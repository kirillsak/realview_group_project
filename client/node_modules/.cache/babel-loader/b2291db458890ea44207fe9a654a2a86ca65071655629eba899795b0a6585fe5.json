{"ast":null,"code":"import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { InputBlock } from \"./Input/inputBlock.js\";\n/**\n * Block used to rotate a 2d vector by a given angle\n */\nexport class Rotate2dBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new Rotate2dBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Neutral);\n    this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Vector2);\n    this.registerInput(\"angle\", NodeMaterialBlockConnectionPointTypes.Float);\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector2);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"Rotate2dBlock\";\n  }\n  /**\n   * Gets the input vector\n   */\n  get input() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the input angle\n   */\n  get angle() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  autoConfigure() {\n    if (!this.angle.isConnected) {\n      const angleInput = new InputBlock(\"angle\");\n      angleInput.value = 0;\n      angleInput.output.connectTo(this.angle);\n    }\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const output = this._outputs[0];\n    const angle = this.angle;\n    const input = this.input;\n    state.compilationString += this._declareOutput(output, state) + ` = vec2(cos(${angle.associatedVariableName}) * ${input.associatedVariableName}.x - sin(${angle.associatedVariableName}) * ${input.associatedVariableName}.y, sin(${angle.associatedVariableName}) * ${input.associatedVariableName}.x + cos(${angle.associatedVariableName}) * ${input.associatedVariableName}.y);\\r\\n`;\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.Rotate2dBlock\", Rotate2dBlock);","map":{"version":3,"mappings":"AAAA,SAASA,iBAAiB,QAAQ,yBAAuB;AACzD,SAASC,qCAAqC,QAAQ,mDAAiD;AAEvG,SAASC,wBAAwB,QAAQ,sCAAoC;AAE7E,SAASC,aAAa,QAAQ,4BAA0B;AACxD,SAASC,UAAU,QAAQ,uBAAqB;AAEhD;;;AAGA,OAAM,MAAOC,aAAc,SAAQL,iBAAiB;EAChD;;;;EAIAM,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,EAAEL,wBAAwB,CAACM,OAAO,CAAC;IAE7C,IAAI,CAACC,aAAa,CAAC,OAAO,EAAER,qCAAqC,CAACS,OAAO,CAAC;IAC1E,IAAI,CAACD,aAAa,CAAC,OAAO,EAAER,qCAAqC,CAACU,KAAK,CAAC;IACxE,IAAI,CAACC,cAAc,CAAC,QAAQ,EAAEX,qCAAqC,CAACS,OAAO,CAAC;EAChF;EAEA;;;;EAIOG,YAAY;IACf,OAAO,eAAe;EAC1B;EAEA;;;EAGA,IAAWC,KAAK;IACZ,OAAO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWC,KAAK;IACZ,OAAO,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWE,MAAM;IACb,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEOC,aAAa;IAChB,IAAI,CAAC,IAAI,CAACH,KAAK,CAACI,WAAW,EAAE;MACzB,MAAMC,UAAU,GAAG,IAAIjB,UAAU,CAAC,OAAO,CAAC;MAC1CiB,UAAU,CAACC,KAAK,GAAG,CAAC;MACpBD,UAAU,CAACJ,MAAM,CAACM,SAAS,CAAC,IAAI,CAACP,KAAK,CAAC;;EAE/C;EAEUQ,WAAW,CAACC,KAA6B;IAC/C,KAAK,CAACD,WAAW,CAACC,KAAK,CAAC;IAExB,MAAMR,MAAM,GAAG,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;IAC/B,MAAMF,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,MAAMF,KAAK,GAAG,IAAI,CAACA,KAAK;IAExBW,KAAK,CAACC,iBAAiB,IACnB,IAAI,CAACC,cAAc,CAACV,MAAM,EAAEQ,KAAK,CAAC,GAClC,eAAeT,KAAK,CAACY,sBAAsB,OAAOd,KAAK,CAACc,sBAAsB,YAAYZ,KAAK,CAACY,sBAAsB,OAAOd,KAAK,CAACc,sBAAsB,WAAWZ,KAAK,CAACY,sBAAsB,OAAOd,KAAK,CAACc,sBAAsB,YAAYZ,KAAK,CAACY,sBAAsB,OAAOd,KAAK,CAACc,sBAAsB,UAAU;IAE5T,OAAO,IAAI;EACf;;AAGJzB,aAAa,CAAC,uBAAuB,EAAEE,aAAa,CAAC","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","InputBlock","Rotate2dBlock","constructor","name","Neutral","registerInput","Vector2","Float","registerOutput","getClassName","input","_inputs","angle","output","_outputs","autoConfigure","isConnected","angleInput","value","connectTo","_buildBlock","state","compilationString","_declareOutput","associatedVariableName"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Node/Blocks/rotate2dBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { InputBlock } from \"./Input/inputBlock\";\r\n\r\n/**\r\n * Block used to rotate a 2d vector by a given angle\r\n */\r\nexport class Rotate2dBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new Rotate2dBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n        this.registerInput(\"angle\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"Rotate2dBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input vector\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the input angle\r\n     */\r\n    public get angle(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure() {\r\n        if (!this.angle.isConnected) {\r\n            const angleInput = new InputBlock(\"angle\");\r\n            angleInput.value = 0;\r\n            angleInput.output.connectTo(this.angle);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const output = this._outputs[0];\r\n        const angle = this.angle;\r\n        const input = this.input;\r\n\r\n        state.compilationString +=\r\n            this._declareOutput(output, state) +\r\n            ` = vec2(cos(${angle.associatedVariableName}) * ${input.associatedVariableName}.x - sin(${angle.associatedVariableName}) * ${input.associatedVariableName}.y, sin(${angle.associatedVariableName}) * ${input.associatedVariableName}.x + cos(${angle.associatedVariableName}) * ${input.associatedVariableName}.y);\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.Rotate2dBlock\", Rotate2dBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}