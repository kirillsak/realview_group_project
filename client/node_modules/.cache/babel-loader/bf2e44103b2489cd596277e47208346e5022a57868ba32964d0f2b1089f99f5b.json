{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Quaternion, Matrix, Vector3, TmpVectors } from \"../../Maths/math.vector.js\";\nimport { Ray } from \"../../Culling/ray.js\";\nimport { EngineStore } from \"../../Engines/engineStore.js\";\nimport { Gamepad } from \"../../Gamepads/gamepad.js\";\n/**\n * Defines the types of pose enabled controllers that are supported\n */\nexport var PoseEnabledControllerType;\n(function (PoseEnabledControllerType) {\n  /**\n   * HTC Vive\n   */\n  PoseEnabledControllerType[PoseEnabledControllerType[\"VIVE\"] = 0] = \"VIVE\";\n  /**\n   * Oculus Rift\n   */\n  PoseEnabledControllerType[PoseEnabledControllerType[\"OCULUS\"] = 1] = \"OCULUS\";\n  /**\n   * Windows mixed reality\n   */\n  PoseEnabledControllerType[PoseEnabledControllerType[\"WINDOWS\"] = 2] = \"WINDOWS\";\n  /**\n   * Samsung gear VR\n   */\n  PoseEnabledControllerType[PoseEnabledControllerType[\"GEAR_VR\"] = 3] = \"GEAR_VR\";\n  /**\n   * Google Daydream\n   */\n  PoseEnabledControllerType[PoseEnabledControllerType[\"DAYDREAM\"] = 4] = \"DAYDREAM\";\n  /**\n   * Generic\n   */\n  PoseEnabledControllerType[PoseEnabledControllerType[\"GENERIC\"] = 5] = \"GENERIC\";\n})(PoseEnabledControllerType || (PoseEnabledControllerType = {}));\n/**\n * Defines the PoseEnabledControllerHelper object that is used initialize a gamepad as the controller type it is specified as (eg. windows mixed reality controller)\n */\nexport class PoseEnabledControllerHelper {\n  /**\n   * Initializes a gamepad as the controller type it is specified as (eg. windows mixed reality controller)\n   * @param vrGamepad the gamepad to initialized\n   * @returns a vr controller of the type the gamepad identified as\n   */\n  static InitiateController(vrGamepad) {\n    for (const factory of this._ControllerFactories) {\n      if (factory.canCreate(vrGamepad)) {\n        return factory.create(vrGamepad);\n      }\n    }\n    if (this._DefaultControllerFactory) {\n      return this._DefaultControllerFactory(vrGamepad);\n    }\n    throw \"The type of gamepad you are trying to load needs to be imported first or is not supported.\";\n  }\n}\n/** @internal */\nPoseEnabledControllerHelper._ControllerFactories = [];\n/** @internal */\nPoseEnabledControllerHelper._DefaultControllerFactory = null;\n/**\n * Defines the PoseEnabledController object that contains state of a vr capable controller\n */\nexport class PoseEnabledController extends Gamepad {\n  /**\n   * Creates a new PoseEnabledController from a gamepad\n   * @param browserGamepad the gamepad that the PoseEnabledController should be created from\n   */\n  constructor(browserGamepad) {\n    super(browserGamepad.id, browserGamepad.index, browserGamepad);\n    /**\n     * If the controller is used in a webXR session\n     */\n    this.isXR = false;\n    // Represents device position and rotation in room space. Should only be used to help calculate babylon space values\n    this._deviceRoomPosition = Vector3.Zero();\n    this._deviceRoomRotationQuaternion = new Quaternion();\n    /**\n     * The device position in babylon space\n     */\n    this.devicePosition = Vector3.Zero();\n    /**\n     * The device rotation in babylon space\n     */\n    this.deviceRotationQuaternion = new Quaternion();\n    /**\n     * The scale factor of the device in babylon space\n     */\n    this.deviceScaleFactor = 1;\n    // Used to convert 6dof controllers to 3dof\n    this._trackPosition = true;\n    this._maxRotationDistFromHeadset = Math.PI / 5;\n    this._draggedRoomRotation = 0;\n    this._leftHandSystemQuaternion = new Quaternion();\n    /**\n     * Internal, matrix used to convert room space to babylon space\n     * @internal\n     */\n    this._deviceToWorld = Matrix.Identity();\n    /**\n     * Node to be used when casting a ray from the controller\n     * @internal\n     */\n    this._pointingPoseNode = null;\n    this._workingMatrix = Matrix.Identity();\n    /**\n     * @internal\n     */\n    this._meshAttachedObservable = new Observable();\n    this.type = Gamepad.POSE_ENABLED;\n    this.controllerType = PoseEnabledControllerType.GENERIC;\n    this.position = Vector3.Zero();\n    this.rotationQuaternion = new Quaternion();\n    this._calculatedPosition = Vector3.Zero();\n    this._calculatedRotation = new Quaternion();\n    Quaternion.RotationYawPitchRollToRef(Math.PI, 0, 0, this._leftHandSystemQuaternion);\n  }\n  /**\n   * @internal\n   */\n  _disableTrackPosition(fixedPosition) {\n    if (this._trackPosition) {\n      this._calculatedPosition.copyFrom(fixedPosition);\n      this._trackPosition = false;\n    }\n  }\n  /**\n   * Updates the state of the pose enabled controller and mesh based on the current position and rotation of the controller\n   */\n  update() {\n    super.update();\n    this._updatePoseAndMesh();\n  }\n  /**\n   * Updates only the pose device and mesh without doing any button event checking\n   */\n  _updatePoseAndMesh() {\n    if (this.isXR) {\n      return;\n    }\n    const pose = this.browserGamepad.pose;\n    this.updateFromDevice(pose);\n    if (!this._trackPosition && EngineStore.LastCreatedScene && EngineStore.LastCreatedScene.activeCamera && EngineStore.LastCreatedScene.activeCamera.devicePosition) {\n      const camera = EngineStore.LastCreatedScene.activeCamera;\n      camera._computeDevicePosition();\n      this._deviceToWorld.setTranslation(camera.devicePosition);\n      if (camera.deviceRotationQuaternion) {\n        camera._deviceRoomRotationQuaternion.toEulerAnglesToRef(TmpVectors.Vector3[0]);\n        // Find the radian distance away that the headset is from the controllers rotation\n        const distanceAway = Math.atan2(Math.sin(TmpVectors.Vector3[0].y - this._draggedRoomRotation), Math.cos(TmpVectors.Vector3[0].y - this._draggedRoomRotation));\n        if (Math.abs(distanceAway) > this._maxRotationDistFromHeadset) {\n          // Only rotate enouph to be within the _maxRotationDistFromHeadset\n          const rotationAmount = distanceAway - (distanceAway < 0 ? -this._maxRotationDistFromHeadset : this._maxRotationDistFromHeadset);\n          this._draggedRoomRotation += rotationAmount;\n          // Rotate controller around headset\n          const sin = Math.sin(-rotationAmount);\n          const cos = Math.cos(-rotationAmount);\n          this._calculatedPosition.x = this._calculatedPosition.x * cos - this._calculatedPosition.z * sin;\n          this._calculatedPosition.z = this._calculatedPosition.x * sin + this._calculatedPosition.z * cos;\n        }\n      }\n    }\n    Vector3.TransformCoordinatesToRef(this._calculatedPosition, this._deviceToWorld, this.devicePosition);\n    this._deviceToWorld.getRotationMatrixToRef(this._workingMatrix);\n    Quaternion.FromRotationMatrixToRef(this._workingMatrix, this.deviceRotationQuaternion);\n    this.deviceRotationQuaternion.multiplyInPlace(this._calculatedRotation);\n    if (this._mesh) {\n      this._mesh.position.copyFrom(this.devicePosition);\n      if (this._mesh.rotationQuaternion) {\n        this._mesh.rotationQuaternion.copyFrom(this.deviceRotationQuaternion);\n      }\n    }\n  }\n  /**\n   * Updates the state of the pose enbaled controller based on the raw pose data from the device\n   * @param poseData raw pose fromthe device\n   */\n  updateFromDevice(poseData) {\n    if (this.isXR) {\n      return;\n    }\n    if (poseData) {\n      this.rawPose = poseData;\n      if (poseData.position) {\n        this._deviceRoomPosition.copyFromFloats(poseData.position[0], poseData.position[1], -poseData.position[2]);\n        if (this._mesh && this._mesh.getScene().useRightHandedSystem) {\n          this._deviceRoomPosition.z *= -1;\n        }\n        if (this._trackPosition) {\n          this._deviceRoomPosition.scaleToRef(this.deviceScaleFactor, this._calculatedPosition);\n        }\n        this._calculatedPosition.addInPlace(this.position);\n      }\n      const pose = this.rawPose;\n      if (poseData.orientation && pose.orientation && pose.orientation.length === 4) {\n        this._deviceRoomRotationQuaternion.copyFromFloats(pose.orientation[0], pose.orientation[1], -pose.orientation[2], -pose.orientation[3]);\n        if (this._mesh) {\n          if (this._mesh.getScene().useRightHandedSystem) {\n            this._deviceRoomRotationQuaternion.z *= -1;\n            this._deviceRoomRotationQuaternion.w *= -1;\n          } else {\n            this._deviceRoomRotationQuaternion.multiplyToRef(this._leftHandSystemQuaternion, this._deviceRoomRotationQuaternion);\n          }\n        }\n        // if the camera is set, rotate to the camera's rotation\n        this._deviceRoomRotationQuaternion.multiplyToRef(this.rotationQuaternion, this._calculatedRotation);\n      }\n    }\n  }\n  /**\n   * Attaches a mesh to the controller\n   * @param mesh the mesh to be attached\n   */\n  attachToMesh(mesh) {\n    if (this._mesh) {\n      this._mesh.parent = null;\n    }\n    this._mesh = mesh;\n    if (this._poseControlledCamera) {\n      this._mesh.parent = this._poseControlledCamera;\n    }\n    if (!this._mesh.rotationQuaternion) {\n      this._mesh.rotationQuaternion = new Quaternion();\n    }\n    // Sync controller mesh and pointing pose node's state with controller, this is done to avoid a frame where position is 0,0,0 when attaching mesh\n    if (!this.isXR) {\n      this._updatePoseAndMesh();\n      if (this._pointingPoseNode) {\n        const parents = [];\n        let obj = this._pointingPoseNode;\n        while (obj.parent) {\n          parents.push(obj.parent);\n          obj = obj.parent;\n        }\n        parents.reverse().forEach(p => {\n          p.computeWorldMatrix(true);\n        });\n      }\n    }\n    this._meshAttachedObservable.notifyObservers(mesh);\n  }\n  /**\n   * Attaches the controllers mesh to a camera\n   * @param camera the camera the mesh should be attached to\n   */\n  attachToPoseControlledCamera(camera) {\n    this._poseControlledCamera = camera;\n    if (this._mesh) {\n      this._mesh.parent = this._poseControlledCamera;\n    }\n  }\n  /**\n   * Disposes of the controller\n   */\n  dispose() {\n    if (this._mesh) {\n      this._mesh.dispose();\n    }\n    this._mesh = null;\n    super.dispose();\n  }\n  /**\n   * The mesh that is attached to the controller\n   */\n  get mesh() {\n    return this._mesh;\n  }\n  /**\n   * Gets the ray of the controller in the direction the controller is pointing\n   * @param length the length the resulting ray should be\n   * @returns a ray in the direction the controller is pointing\n   */\n  getForwardRay(length = 100) {\n    if (!this.mesh) {\n      return new Ray(Vector3.Zero(), new Vector3(0, 0, 1), length);\n    }\n    const m = this._pointingPoseNode ? this._pointingPoseNode.getWorldMatrix() : this.mesh.getWorldMatrix();\n    const origin = m.getTranslation();\n    const forward = new Vector3(0, 0, -1);\n    const forwardWorld = Vector3.TransformNormal(forward, m);\n    const direction = Vector3.Normalize(forwardWorld);\n    return new Ray(origin, direction, length);\n  }\n}\n/**\n * Name of the child mesh that can be used to cast a ray from the controller\n */\nPoseEnabledController.POINTING_POSE = \"POINTING_POSE\";","map":{"version":3,"mappings":"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","names":["Observable","Quaternion","Matrix","Vector3","TmpVectors","Ray","EngineStore","Gamepad","PoseEnabledControllerType","PoseEnabledControllerHelper","InitiateController","vrGamepad","factory","_ControllerFactories","canCreate","create","_DefaultControllerFactory","PoseEnabledController","constructor","browserGamepad","id","index","Zero","Math","PI","Identity","type","POSE_ENABLED","controllerType","GENERIC","position","rotationQuaternion","_calculatedPosition","_calculatedRotation","RotationYawPitchRollToRef","_leftHandSystemQuaternion","_disableTrackPosition","fixedPosition","_trackPosition","copyFrom","update","_updatePoseAndMesh","isXR","pose","updateFromDevice","LastCreatedScene","activeCamera","devicePosition","camera","_computeDevicePosition","_deviceToWorld","setTranslation","deviceRotationQuaternion","_deviceRoomRotationQuaternion","toEulerAnglesToRef","distanceAway","atan2","sin","y","_draggedRoomRotation","cos","abs","_maxRotationDistFromHeadset","rotationAmount","x","z","TransformCoordinatesToRef","getRotationMatrixToRef","_workingMatrix","FromRotationMatrixToRef","multiplyInPlace","_mesh","poseData","rawPose","_deviceRoomPosition","copyFromFloats","getScene","useRightHandedSystem","scaleToRef","deviceScaleFactor","addInPlace","orientation","length","w","multiplyToRef","attachToMesh","mesh","parent","_poseControlledCamera","_pointingPoseNode","parents","obj","push","reverse","forEach","p","computeWorldMatrix","_meshAttachedObservable","notifyObservers","attachToPoseControlledCamera","dispose","getForwardRay","m","getWorldMatrix","origin","getTranslation","forward","forwardWorld","TransformNormal","direction","Normalize"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Gamepads/Controllers/poseEnabledController.ts"],"sourcesContent":["import { Observable } from \"../../Misc/observable\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Quaternion, Matrix, Vector3, TmpVectors } from \"../../Maths/math.vector\";\r\nimport type { Node } from \"../../node\";\r\nimport type { TransformNode } from \"../../Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Ray } from \"../../Culling/ray\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\n\r\nimport { Gamepad } from \"../../Gamepads/gamepad\";\r\nimport type { WebVRFreeCamera, PoseControlled, DevicePose } from \"../../Cameras/VR/webVRCamera\";\r\nimport type { TargetCamera } from \"../../Cameras/targetCamera\";\r\n\r\n/**\r\n * Defines the types of pose enabled controllers that are supported\r\n */\r\nexport enum PoseEnabledControllerType {\r\n    /**\r\n     * HTC Vive\r\n     */\r\n    VIVE,\r\n    /**\r\n     * Oculus Rift\r\n     */\r\n    OCULUS,\r\n    /**\r\n     * Windows mixed reality\r\n     */\r\n    WINDOWS,\r\n    /**\r\n     * Samsung gear VR\r\n     */\r\n    GEAR_VR,\r\n    /**\r\n     * Google Daydream\r\n     */\r\n    DAYDREAM,\r\n    /**\r\n     * Generic\r\n     */\r\n    GENERIC,\r\n}\r\n\r\n/**\r\n * Defines the MutableGamepadButton interface for the state of a gamepad button\r\n */\r\nexport interface MutableGamepadButton {\r\n    /**\r\n     * Value of the button/trigger\r\n     */\r\n    value: number;\r\n    /**\r\n     * If the button/trigger is currently touched\r\n     */\r\n    touched: boolean;\r\n    /**\r\n     * If the button/trigger is currently pressed\r\n     */\r\n    pressed: boolean;\r\n}\r\n\r\n/**\r\n * Defines the ExtendedGamepadButton interface for a gamepad button which includes state provided by a pose controller\r\n * @internal\r\n */\r\nexport interface ExtendedGamepadButton extends GamepadButton {\r\n    /**\r\n     * If the button/trigger is currently pressed\r\n     */\r\n    readonly pressed: boolean;\r\n    /**\r\n     * If the button/trigger is currently touched\r\n     */\r\n    readonly touched: boolean;\r\n    /**\r\n     * Value of the button/trigger\r\n     */\r\n    readonly value: number;\r\n}\r\n\r\n/** @internal */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface _GamePadFactory {\r\n    /**\r\n     * Returns whether or not the current gamepad can be created for this type of controller.\r\n     * @param gamepadInfo Defines the gamepad info as received from the controller APIs.\r\n     * @returns true if it can be created, otherwise false\r\n     */\r\n    canCreate(gamepadInfo: any): boolean;\r\n\r\n    /**\r\n     * Creates a new instance of the Gamepad.\r\n     * @param gamepadInfo Defines the gamepad info as received from the controller APIs.\r\n     * @returns the new gamepad instance\r\n     */\r\n    create(gamepadInfo: any): Gamepad;\r\n}\r\n\r\n/**\r\n * Defines the PoseEnabledControllerHelper object that is used initialize a gamepad as the controller type it is specified as (eg. windows mixed reality controller)\r\n */\r\nexport class PoseEnabledControllerHelper {\r\n    /** @internal */\r\n    public static _ControllerFactories: _GamePadFactory[] = [];\r\n\r\n    /** @internal */\r\n    public static _DefaultControllerFactory: Nullable<(gamepadInfo: any) => Gamepad> = null;\r\n\r\n    /**\r\n     * Initializes a gamepad as the controller type it is specified as (eg. windows mixed reality controller)\r\n     * @param vrGamepad the gamepad to initialized\r\n     * @returns a vr controller of the type the gamepad identified as\r\n     */\r\n    public static InitiateController(vrGamepad: any) {\r\n        for (const factory of this._ControllerFactories) {\r\n            if (factory.canCreate(vrGamepad)) {\r\n                return factory.create(vrGamepad);\r\n            }\r\n        }\r\n\r\n        if (this._DefaultControllerFactory) {\r\n            return this._DefaultControllerFactory(vrGamepad);\r\n        }\r\n\r\n        throw \"The type of gamepad you are trying to load needs to be imported first or is not supported.\";\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the PoseEnabledController object that contains state of a vr capable controller\r\n */\r\nexport class PoseEnabledController extends Gamepad implements PoseControlled {\r\n    /**\r\n     * If the controller is used in a webXR session\r\n     */\r\n    public isXR = false;\r\n    // Represents device position and rotation in room space. Should only be used to help calculate babylon space values\r\n    private _deviceRoomPosition = Vector3.Zero();\r\n    private _deviceRoomRotationQuaternion = new Quaternion();\r\n\r\n    /**\r\n     * The device position in babylon space\r\n     */\r\n    public devicePosition = Vector3.Zero();\r\n    /**\r\n     * The device rotation in babylon space\r\n     */\r\n    public deviceRotationQuaternion = new Quaternion();\r\n    /**\r\n     * The scale factor of the device in babylon space\r\n     */\r\n    public deviceScaleFactor: number = 1;\r\n\r\n    /**\r\n     * (Likely devicePosition should be used instead) The device position in its room space\r\n     */\r\n    public position: Vector3;\r\n    /**\r\n     * (Likely deviceRotationQuaternion should be used instead) The device rotation in its room space\r\n     */\r\n    public rotationQuaternion: Quaternion;\r\n    /**\r\n     * The type of controller (Eg. Windows mixed reality)\r\n     */\r\n    public controllerType: PoseEnabledControllerType;\r\n\r\n    protected _calculatedPosition: Vector3;\r\n    private _calculatedRotation: Quaternion;\r\n\r\n    /**\r\n     * The raw pose from the device\r\n     */\r\n    public rawPose: DevicePose; //GamepadPose;\r\n\r\n    // Used to convert 6dof controllers to 3dof\r\n    private _trackPosition = true;\r\n    private _maxRotationDistFromHeadset = Math.PI / 5;\r\n    private _draggedRoomRotation = 0;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _disableTrackPosition(fixedPosition: Vector3) {\r\n        if (this._trackPosition) {\r\n            this._calculatedPosition.copyFrom(fixedPosition);\r\n            this._trackPosition = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal, the mesh attached to the controller\r\n     * @internal\r\n     */\r\n    public _mesh: Nullable<AbstractMesh>; // a node that will be attached to this Gamepad\r\n    private _poseControlledCamera: TargetCamera;\r\n\r\n    private _leftHandSystemQuaternion: Quaternion = new Quaternion();\r\n\r\n    /**\r\n     * Internal, matrix used to convert room space to babylon space\r\n     * @internal\r\n     */\r\n    public _deviceToWorld = Matrix.Identity();\r\n\r\n    /**\r\n     * Node to be used when casting a ray from the controller\r\n     * @internal\r\n     */\r\n    public _pointingPoseNode: Nullable<TransformNode> = null;\r\n    /**\r\n     * Name of the child mesh that can be used to cast a ray from the controller\r\n     */\r\n    public static readonly POINTING_POSE = \"POINTING_POSE\";\r\n    /**\r\n     * Creates a new PoseEnabledController from a gamepad\r\n     * @param browserGamepad the gamepad that the PoseEnabledController should be created from\r\n     */\r\n    constructor(browserGamepad: any) {\r\n        super(browserGamepad.id, browserGamepad.index, browserGamepad);\r\n        this.type = Gamepad.POSE_ENABLED;\r\n        this.controllerType = PoseEnabledControllerType.GENERIC;\r\n        this.position = Vector3.Zero();\r\n        this.rotationQuaternion = new Quaternion();\r\n\r\n        this._calculatedPosition = Vector3.Zero();\r\n        this._calculatedRotation = new Quaternion();\r\n        Quaternion.RotationYawPitchRollToRef(Math.PI, 0, 0, this._leftHandSystemQuaternion);\r\n    }\r\n\r\n    private _workingMatrix = Matrix.Identity();\r\n    /**\r\n     * Updates the state of the pose enabled controller and mesh based on the current position and rotation of the controller\r\n     */\r\n    public update() {\r\n        super.update();\r\n        this._updatePoseAndMesh();\r\n    }\r\n\r\n    /**\r\n     * Updates only the pose device and mesh without doing any button event checking\r\n     */\r\n    protected _updatePoseAndMesh() {\r\n        if (this.isXR) {\r\n            return;\r\n        }\r\n        const pose: DevicePose = this.browserGamepad.pose;\r\n        this.updateFromDevice(pose);\r\n\r\n        if (\r\n            !this._trackPosition &&\r\n            EngineStore.LastCreatedScene &&\r\n            EngineStore.LastCreatedScene.activeCamera &&\r\n            (<WebVRFreeCamera>EngineStore.LastCreatedScene.activeCamera).devicePosition\r\n        ) {\r\n            const camera = <WebVRFreeCamera>EngineStore.LastCreatedScene.activeCamera;\r\n            camera._computeDevicePosition();\r\n\r\n            this._deviceToWorld.setTranslation(camera.devicePosition);\r\n            if (camera.deviceRotationQuaternion) {\r\n                camera._deviceRoomRotationQuaternion.toEulerAnglesToRef(TmpVectors.Vector3[0]);\r\n\r\n                // Find the radian distance away that the headset is from the controllers rotation\r\n                const distanceAway = Math.atan2(Math.sin(TmpVectors.Vector3[0].y - this._draggedRoomRotation), Math.cos(TmpVectors.Vector3[0].y - this._draggedRoomRotation));\r\n                if (Math.abs(distanceAway) > this._maxRotationDistFromHeadset) {\r\n                    // Only rotate enouph to be within the _maxRotationDistFromHeadset\r\n                    const rotationAmount = distanceAway - (distanceAway < 0 ? -this._maxRotationDistFromHeadset : this._maxRotationDistFromHeadset);\r\n                    this._draggedRoomRotation += rotationAmount;\r\n\r\n                    // Rotate controller around headset\r\n                    const sin = Math.sin(-rotationAmount);\r\n                    const cos = Math.cos(-rotationAmount);\r\n                    this._calculatedPosition.x = this._calculatedPosition.x * cos - this._calculatedPosition.z * sin;\r\n                    this._calculatedPosition.z = this._calculatedPosition.x * sin + this._calculatedPosition.z * cos;\r\n                }\r\n            }\r\n        }\r\n\r\n        Vector3.TransformCoordinatesToRef(this._calculatedPosition, this._deviceToWorld, this.devicePosition);\r\n        this._deviceToWorld.getRotationMatrixToRef(this._workingMatrix);\r\n        Quaternion.FromRotationMatrixToRef(this._workingMatrix, this.deviceRotationQuaternion);\r\n        this.deviceRotationQuaternion.multiplyInPlace(this._calculatedRotation);\r\n\r\n        if (this._mesh) {\r\n            this._mesh.position.copyFrom(this.devicePosition);\r\n\r\n            if (this._mesh.rotationQuaternion) {\r\n                this._mesh.rotationQuaternion.copyFrom(this.deviceRotationQuaternion);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the state of the pose enbaled controller based on the raw pose data from the device\r\n     * @param poseData raw pose fromthe device\r\n     */\r\n    updateFromDevice(poseData: DevicePose) {\r\n        if (this.isXR) {\r\n            return;\r\n        }\r\n        if (poseData) {\r\n            this.rawPose = poseData;\r\n            if (poseData.position) {\r\n                this._deviceRoomPosition.copyFromFloats(poseData.position[0], poseData.position[1], -poseData.position[2]);\r\n                if (this._mesh && this._mesh.getScene().useRightHandedSystem) {\r\n                    this._deviceRoomPosition.z *= -1;\r\n                }\r\n                if (this._trackPosition) {\r\n                    this._deviceRoomPosition.scaleToRef(this.deviceScaleFactor, this._calculatedPosition);\r\n                }\r\n                this._calculatedPosition.addInPlace(this.position);\r\n            }\r\n            const pose = this.rawPose;\r\n            if (poseData.orientation && pose.orientation && pose.orientation.length === 4) {\r\n                this._deviceRoomRotationQuaternion.copyFromFloats(pose.orientation[0], pose.orientation[1], -pose.orientation[2], -pose.orientation[3]);\r\n                if (this._mesh) {\r\n                    if (this._mesh.getScene().useRightHandedSystem) {\r\n                        this._deviceRoomRotationQuaternion.z *= -1;\r\n                        this._deviceRoomRotationQuaternion.w *= -1;\r\n                    } else {\r\n                        this._deviceRoomRotationQuaternion.multiplyToRef(this._leftHandSystemQuaternion, this._deviceRoomRotationQuaternion);\r\n                    }\r\n                }\r\n\r\n                // if the camera is set, rotate to the camera's rotation\r\n                this._deviceRoomRotationQuaternion.multiplyToRef(this.rotationQuaternion, this._calculatedRotation);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _meshAttachedObservable = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * Attaches a mesh to the controller\r\n     * @param mesh the mesh to be attached\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh) {\r\n        if (this._mesh) {\r\n            this._mesh.parent = null;\r\n        }\r\n        this._mesh = mesh;\r\n        if (this._poseControlledCamera) {\r\n            this._mesh.parent = this._poseControlledCamera;\r\n        }\r\n        if (!this._mesh.rotationQuaternion) {\r\n            this._mesh.rotationQuaternion = new Quaternion();\r\n        }\r\n\r\n        // Sync controller mesh and pointing pose node's state with controller, this is done to avoid a frame where position is 0,0,0 when attaching mesh\r\n        if (!this.isXR) {\r\n            this._updatePoseAndMesh();\r\n            if (this._pointingPoseNode) {\r\n                const parents = [];\r\n                let obj: Node = this._pointingPoseNode;\r\n                while (obj.parent) {\r\n                    parents.push(obj.parent);\r\n                    obj = obj.parent;\r\n                }\r\n                parents.reverse().forEach((p) => {\r\n                    p.computeWorldMatrix(true);\r\n                });\r\n            }\r\n        }\r\n\r\n        this._meshAttachedObservable.notifyObservers(mesh);\r\n    }\r\n\r\n    /**\r\n     * Attaches the controllers mesh to a camera\r\n     * @param camera the camera the mesh should be attached to\r\n     */\r\n    public attachToPoseControlledCamera(camera: TargetCamera) {\r\n        this._poseControlledCamera = camera;\r\n        if (this._mesh) {\r\n            this._mesh.parent = this._poseControlledCamera;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes of the controller\r\n     */\r\n    public dispose() {\r\n        if (this._mesh) {\r\n            this._mesh.dispose();\r\n        }\r\n        this._mesh = null;\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /**\r\n     * The mesh that is attached to the controller\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    /**\r\n     * Gets the ray of the controller in the direction the controller is pointing\r\n     * @param length the length the resulting ray should be\r\n     * @returns a ray in the direction the controller is pointing\r\n     */\r\n    public getForwardRay(length = 100): Ray {\r\n        if (!this.mesh) {\r\n            return new Ray(Vector3.Zero(), new Vector3(0, 0, 1), length);\r\n        }\r\n\r\n        const m = this._pointingPoseNode ? this._pointingPoseNode.getWorldMatrix() : this.mesh.getWorldMatrix();\r\n        const origin = m.getTranslation();\r\n\r\n        const forward = new Vector3(0, 0, -1);\r\n        const forwardWorld = Vector3.TransformNormal(forward, m);\r\n\r\n        const direction = Vector3.Normalize(forwardWorld);\r\n\r\n        return new Ray(origin, direction, length);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}