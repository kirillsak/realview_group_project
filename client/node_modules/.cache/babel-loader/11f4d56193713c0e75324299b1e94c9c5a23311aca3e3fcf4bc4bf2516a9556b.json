{"ast":null,"code":"// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nconst name = \"fluidRenderingStandardBlurPixelShader\";\nconst shader = `uniform sampler2D textureSampler;\nuniform int filterSize;\nuniform vec2 blurDir;\nvarying vec2 vUV;\nvoid main(void) {\nvec4 s=textureLod(textureSampler,vUV,0.);\nif (s.r==0.) {\nglFragColor=vec4(0.,0.,0.,1.);\nreturn;\n}\nfloat sigma=float(filterSize)/3.0;\nfloat twoSigma2=2.0*sigma*sigma;\nvec4 sum=vec4(0.);\nfloat wsum=0.;\nfor (int x=-filterSize; x<=filterSize; ++x) {\nvec2 coords=vec2(x);\nvec4 sampl=textureLod(textureSampler,vUV+coords*blurDir,0.);\nfloat w=exp(-coords.x*coords.x/twoSigma2);\nsum+=sampl*w;\nwsum+=w;\n}\nsum/=wsum;\nglFragColor=vec4(sum.rgb,1.);\n}\n`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluidRenderingStandardBlurPixelShader = {\n  name,\n  shader\n};","map":{"version":3,"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,2BAAyB;AAErD,MAAMC,IAAI,GAAG,uCAAuC;AACpD,MAAMC,MAAM,GAAG;;;;;;;;;;;;;;;;;;;;;;;;CAwBd;AACD;AACAF,WAAW,CAACG,YAAY,CAACF,IAAI,CAAC,GAAGC,MAAM;AACvC;AACA,OAAO,MAAME,qCAAqC,GAAG;EAAEH,IAAI;EAAEC;AAAM,CAAE","names":["ShaderStore","name","shader","ShadersStore","fluidRenderingStandardBlurPixelShader"],"sourceRoot":"","sources":["../../../../lts/core/generated/Shaders/fluidRenderingStandardBlur.fragment.ts"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"fluidRenderingStandardBlurPixelShader\";\nconst shader = `uniform sampler2D textureSampler;\runiform int filterSize;\runiform vec2 blurDir;\rvarying vec2 vUV;\rvoid main(void) {\rvec4 s=textureLod(textureSampler,vUV,0.);\rif (s.r==0.) {\rglFragColor=vec4(0.,0.,0.,1.);\rreturn;\r}\rfloat sigma=float(filterSize)/3.0;\rfloat twoSigma2=2.0*sigma*sigma;\rvec4 sum=vec4(0.);\rfloat wsum=0.;\rfor (int x=-filterSize; x<=filterSize; ++x) {\rvec2 coords=vec2(x);\rvec4 sampl=textureLod(textureSampler,vUV+coords*blurDir,0.);\rfloat w=exp(-coords.x*coords.x/twoSigma2);\rsum+=sampl*w;\rwsum+=w;\r}\rsum/=wsum;\rglFragColor=vec4(sum.rgb,1.);\r}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluidRenderingStandardBlurPixelShader = { name, shader };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}