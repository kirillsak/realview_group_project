{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst floatNCache = [\"Int\", \"Int2\", \"Int3\", \"Int4\", \"UInt\", \"UInt2\", \"UInt3\", \"UInt4\", \"Vector2\", \"Vector3\", \"Vector4\", \"Float2\", \"Float\", \"Float3\", \"Float4\", \"Quaternion\", \"Color3\", \"Color4\", \"DirectColor4\"];\n/** @internal */\nexport class WebGLPipelineContext {\n  constructor() {\n    this._valueCache = {};\n    this.vertexCompilationError = null;\n    this.fragmentCompilationError = null;\n    this.programLinkError = null;\n    this.programValidationError = null;\n    const args = [];\n    const prepareArray = function () {\n      args.length = 0;\n      Array.prototype.push.apply(args, arguments);\n      args[0] = this._uniforms[args[0]];\n    };\n    const proxyFunction = functionName => {\n      const cacheFunction = floatNCache.includes(functionName.substring(3)) && \"FloatN\";\n      if (cacheFunction) {\n        const cacheFunc = this[`_cache${cacheFunction}`];\n        return function () {\n          const func = this.engine[functionName];\n          prepareArray.apply(this, arguments);\n          if (cacheFunc.apply(this, arguments)) {\n            if (!func.apply(this.engine, args)) {\n              this._valueCache[arguments[0]] = null;\n            }\n          }\n        };\n      } else {\n        return function () {\n          const func = this.engine[functionName];\n          prepareArray.apply(this, arguments);\n          if (arguments[1] !== undefined) {\n            this._valueCache[arguments[0]] = null;\n            func.apply(this.engine, args);\n          }\n        };\n      }\n    };\n    [\"Int?\", \"UInt?\", \"IntArray?\", \"UIntArray?\", \"Array?\", \"Float?\", \"Matrices\", \"Matrix3x3\", \"Matrix2x2\"].forEach(functionName => {\n      const name = `set${functionName}`;\n      if (this[name]) {\n        return;\n      }\n      if (name.endsWith(\"?\")) {\n        [\"\", 2, 3, 4].forEach(n => {\n          this[name.slice(0, -1) + n] = this[name.slice(0, -1) + n] || proxyFunction(name.slice(0, -1) + n).bind(this);\n        });\n      } else {\n        this[name] = this[name] || proxyFunction(name).bind(this);\n      }\n    });\n  }\n  get isAsync() {\n    return this.isParallelCompiled;\n  }\n  get isReady() {\n    if (this.program) {\n      if (this.isParallelCompiled) {\n        return this.engine._isRenderingStateCompiled(this);\n      }\n      return true;\n    }\n    return false;\n  }\n  _handlesSpectorRebuildCallback(onCompiled) {\n    if (onCompiled && this.program) {\n      onCompiled(this.program);\n    }\n  }\n  _fillEffectInformation(effect, uniformBuffersNames, uniformsNames, uniforms, samplerList, samplers, attributesNames, attributes) {\n    const engine = this.engine;\n    if (engine.supportsUniformBuffers) {\n      for (const name in uniformBuffersNames) {\n        effect.bindUniformBlock(name, uniformBuffersNames[name]);\n      }\n    }\n    const effectAvailableUniforms = this.engine.getUniforms(this, uniformsNames);\n    effectAvailableUniforms.forEach((uniform, index) => {\n      uniforms[uniformsNames[index]] = uniform;\n    });\n    this._uniforms = uniforms;\n    let index;\n    for (index = 0; index < samplerList.length; index++) {\n      const sampler = effect.getUniform(samplerList[index]);\n      if (sampler == null) {\n        samplerList.splice(index, 1);\n        index--;\n      }\n    }\n    samplerList.forEach((name, index) => {\n      samplers[name] = index;\n    });\n    for (const attr of engine.getAttributes(this, attributesNames)) {\n      attributes.push(attr);\n    }\n  }\n  /**\n   * Release all associated resources.\n   **/\n  dispose() {\n    this._uniforms = {};\n  }\n  /**\n   * @internal\n   */\n  _cacheMatrix(uniformName, matrix) {\n    const cache = this._valueCache[uniformName];\n    const flag = matrix.updateFlag;\n    if (cache !== undefined && cache === flag) {\n      return false;\n    }\n    this._valueCache[uniformName] = flag;\n    return true;\n  }\n  /**\n   * @internal\n   */\n  _cacheFloatN(_uniformName, _x, _y, _z, _w) {\n    /**\n     * arguments will be used to abstract the cache function.\n     * arguments[0] is the uniform name. the rest are numbers.\n     */\n    let cache = this._valueCache[arguments[0]];\n    if (!cache || cache.length !== arguments.length - 1) {\n      cache = Array.prototype.slice.call(arguments, 1);\n      this._valueCache[arguments[0]] = cache;\n      return true;\n    }\n    let changed = false;\n    for (let i = 0; i < cache.length; ++i) {\n      if (cache[i] !== arguments[i + 1]) {\n        cache[i] = arguments[i + 1];\n        changed = true;\n      }\n    }\n    return changed;\n  }\n  /**\n   * @internal\n   */\n  _cacheFloat2(uniformName, x, y) {\n    return this._cacheFloatN(uniformName, x, y);\n  }\n  /**\n   * @internal\n   */\n  _cacheFloat3(uniformName, x, y, z) {\n    return this._cacheFloatN(uniformName, x, y, z);\n  }\n  /**\n   * @internal\n   */\n  _cacheFloat4(uniformName, x, y, z, w) {\n    return this._cacheFloatN(uniformName, x, y, z, w);\n  }\n  /**\n   * Sets matrix on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param matrix matrix to be set.\n   */\n  setMatrix(uniformName, matrix) {\n    if (this._cacheMatrix(uniformName, matrix)) {\n      if (!this.engine.setMatrices(this._uniforms[uniformName], matrix.toArray())) {\n        this._valueCache[uniformName] = null;\n      }\n    }\n  }\n  /**\n   * Sets a Vector2 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param vector2 vector2 to be set.\n   */\n  setVector2(uniformName, vector2) {\n    this.setFloat2(uniformName, vector2.x, vector2.y);\n  }\n  /**\n   * Sets a Vector3 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param vector3 Value to be set.\n   */\n  setVector3(uniformName, vector3) {\n    this.setFloat3(uniformName, vector3.x, vector3.y, vector3.z);\n  }\n  /**\n   * Sets a Vector4 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param vector4 Value to be set.\n   */\n  setVector4(uniformName, vector4) {\n    this.setFloat4(uniformName, vector4.x, vector4.y, vector4.z, vector4.w);\n  }\n  /**\n   * Sets a Quaternion on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param quaternion Value to be set.\n   */\n  setQuaternion(uniformName, quaternion) {\n    this.setFloat4(uniformName, quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n  }\n  /**\n   * Sets a Color3 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param color3 Value to be set.\n   */\n  setColor3(uniformName, color3) {\n    this.setFloat3(uniformName, color3.r, color3.g, color3.b);\n  }\n  /**\n   * Sets a Color4 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param color3 Value to be set.\n   * @param alpha Alpha value to be set.\n   */\n  setColor4(uniformName, color3, alpha) {\n    this.setFloat4(uniformName, color3.r, color3.g, color3.b, alpha);\n  }\n  /**\n   * Sets a Color4 on a uniform variable\n   * @param uniformName defines the name of the variable\n   * @param color4 defines the value to be set\n   */\n  setDirectColor4(uniformName, color4) {\n    this.setFloat4(uniformName, color4.r, color4.g, color4.b, color4.a);\n  }\n  _getVertexShaderCode() {\n    return this.vertexShader ? this.engine._getShaderSource(this.vertexShader) : null;\n  }\n  _getFragmentShaderCode() {\n    return this.fragmentShader ? this.engine._getShaderSource(this.fragmentShader) : null;\n  }\n}","map":{"version":3,"mappings":"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","names":["floatNCache","WebGLPipelineContext","constructor","args","prepareArray","length","Array","prototype","push","apply","arguments","_uniforms","proxyFunction","functionName","cacheFunction","includes","substring","cacheFunc","func","engine","_valueCache","undefined","forEach","name","endsWith","n","slice","bind","isAsync","isParallelCompiled","isReady","program","_isRenderingStateCompiled","_handlesSpectorRebuildCallback","onCompiled","_fillEffectInformation","effect","uniformBuffersNames","uniformsNames","uniforms","samplerList","samplers","attributesNames","attributes","supportsUniformBuffers","bindUniformBlock","effectAvailableUniforms","getUniforms","uniform","index","sampler","getUniform","splice","attr","getAttributes","dispose","_cacheMatrix","uniformName","matrix","cache","flag","updateFlag","_cacheFloatN","_uniformName","_x","_y","_z","_w","call","changed","i","_cacheFloat2","x","y","_cacheFloat3","z","_cacheFloat4","w","setMatrix","setMatrices","toArray","setVector2","vector2","setFloat2","setVector3","vector3","setFloat3","setVector4","vector4","setFloat4","setQuaternion","quaternion","setColor3","color3","r","g","b","setColor4","alpha","setDirectColor4","color4","a","_getVertexShaderCode","vertexShader","_getShaderSource","_getFragmentShaderCode","fragmentShader"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/WebGL/webGLPipelineContext.ts"],"sourcesContent":["import type { IPipelineContext } from \"../IPipelineContext\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Effect } from \"../../Materials/effect\";\r\nimport type { IMatrixLike, IVector2Like, IVector3Like, IVector4Like, IColor3Like, IColor4Like, IQuaternionLike } from \"../../Maths/math.like\";\r\nimport type { ThinEngine } from \"../thinEngine\";\r\n\r\nconst floatNCache: string[] = [\r\n    \"Int\",\r\n    \"Int2\",\r\n    \"Int3\",\r\n    \"Int4\",\r\n    \"UInt\",\r\n    \"UInt2\",\r\n    \"UInt3\",\r\n    \"UInt4\",\r\n    \"Vector2\",\r\n    \"Vector3\",\r\n    \"Vector4\",\r\n    \"Float2\",\r\n    \"Float\",\r\n    \"Float3\",\r\n    \"Float4\",\r\n    \"Quaternion\",\r\n    \"Color3\",\r\n    \"Color4\",\r\n    \"DirectColor4\",\r\n];\r\n\r\n/** @internal */\r\nexport class WebGLPipelineContext implements IPipelineContext {\r\n    private _valueCache: { [key: string]: any } = {};\r\n    private _uniforms: { [key: string]: Nullable<WebGLUniformLocation> };\r\n\r\n    public engine: ThinEngine;\r\n    public program: Nullable<WebGLProgram>;\r\n    public context?: WebGLRenderingContext;\r\n    public vertexShader?: WebGLShader;\r\n    public fragmentShader?: WebGLShader;\r\n    public isParallelCompiled: boolean;\r\n    public onCompiled?: () => void;\r\n    public transformFeedback?: WebGLTransformFeedback | null;\r\n\r\n    public vertexCompilationError: Nullable<string> = null;\r\n    public fragmentCompilationError: Nullable<string> = null;\r\n    public programLinkError: Nullable<string> = null;\r\n    public programValidationError: Nullable<string> = null;\r\n\r\n    constructor() {\r\n        const args: any[] = [];\r\n        const prepareArray = function (this: WebGLPipelineContext) {\r\n            args.length = 0;\r\n            Array.prototype.push.apply(args, arguments);\r\n            args[0] = this._uniforms[args[0]];\r\n        };\r\n        const proxyFunction: (functionName: string) => ((/*uniformName: string, ...payload: any[]*/) => void) | undefined = (functionName: string) => {\r\n            const cacheFunction = floatNCache.includes(functionName.substring(3)) && \"FloatN\";\r\n            if (cacheFunction) {\r\n                const cacheFunc = this[`_cache${cacheFunction}` as Partial<keyof WebGLPipelineContext>];\r\n                return function (this: WebGLPipelineContext /*uniformName: string, ...payload: any[]*/) {\r\n                    const func = this.engine[functionName as keyof ThinEngine];\r\n                    prepareArray.apply(this, arguments);\r\n                    if ((cacheFunc as Function).apply(this, arguments)) {\r\n                        if (!func.apply(this.engine, args)) {\r\n                            this._valueCache[arguments[0]] = null;\r\n                        }\r\n                    }\r\n                };\r\n            } else {\r\n                return function (this: WebGLPipelineContext /*uniformName: string, ...payload: any[]*/) {\r\n                    const func = this.engine[functionName as keyof ThinEngine];\r\n                    prepareArray.apply(this, arguments);\r\n                    if (arguments[1] !== undefined) {\r\n                        this._valueCache[arguments[0]] = null;\r\n                        func.apply(this.engine, args);\r\n                    }\r\n                };\r\n            }\r\n        };\r\n        [\"Int?\", \"UInt?\", \"IntArray?\", \"UIntArray?\", \"Array?\", \"Float?\", \"Matrices\", \"Matrix3x3\", \"Matrix2x2\"].forEach((functionName) => {\r\n            const name = `set${functionName}`;\r\n            if (this[name as keyof this]) {\r\n                return;\r\n            }\r\n            if (name.endsWith(\"?\")) {\r\n                [\"\", 2, 3, 4].forEach((n) => {\r\n                    this[(name.slice(0, -1) + n) as keyof this] = this[(name.slice(0, -1) + n) as keyof this] || proxyFunction(name.slice(0, -1) + n)!.bind(this);\r\n                });\r\n            } else {\r\n                this[name as keyof this] = this[name as keyof this] || proxyFunction(name)!.bind(this);\r\n            }\r\n        });\r\n    }\r\n\r\n    public get isAsync() {\r\n        return this.isParallelCompiled;\r\n    }\r\n\r\n    public get isReady(): boolean {\r\n        if (this.program) {\r\n            if (this.isParallelCompiled) {\r\n                return this.engine._isRenderingStateCompiled(this);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _handlesSpectorRebuildCallback(onCompiled: (program: WebGLProgram) => void): void {\r\n        if (onCompiled && this.program) {\r\n            onCompiled(this.program);\r\n        }\r\n    }\r\n\r\n    public _fillEffectInformation(\r\n        effect: Effect,\r\n        uniformBuffersNames: { [key: string]: number },\r\n        uniformsNames: string[],\r\n        uniforms: { [key: string]: Nullable<WebGLUniformLocation> },\r\n        samplerList: string[],\r\n        samplers: { [key: string]: number },\r\n        attributesNames: string[],\r\n        attributes: number[]\r\n    ) {\r\n        const engine = this.engine;\r\n        if (engine.supportsUniformBuffers) {\r\n            for (const name in uniformBuffersNames) {\r\n                effect.bindUniformBlock(name, uniformBuffersNames[name]);\r\n            }\r\n        }\r\n\r\n        const effectAvailableUniforms = this.engine.getUniforms(this, uniformsNames);\r\n        effectAvailableUniforms.forEach((uniform, index) => {\r\n            uniforms[uniformsNames[index]] = uniform;\r\n        });\r\n        this._uniforms = uniforms;\r\n\r\n        let index: number;\r\n        for (index = 0; index < samplerList.length; index++) {\r\n            const sampler = effect.getUniform(samplerList[index]);\r\n            if (sampler == null) {\r\n                samplerList.splice(index, 1);\r\n                index--;\r\n            }\r\n        }\r\n\r\n        samplerList.forEach((name, index) => {\r\n            samplers[name] = index;\r\n        });\r\n\r\n        for (const attr of engine.getAttributes(this, attributesNames)) {\r\n            attributes.push(attr);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release all associated resources.\r\n     **/\r\n    public dispose() {\r\n        this._uniforms = {};\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cacheMatrix(uniformName: string, matrix: IMatrixLike): boolean {\r\n        const cache = this._valueCache[uniformName];\r\n        const flag = matrix.updateFlag;\r\n        if (cache !== undefined && cache === flag) {\r\n            return false;\r\n        }\r\n\r\n        this._valueCache[uniformName] = flag;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cacheFloatN(_uniformName: string, _x: number, _y?: number, _z?: number, _w?: number): boolean {\r\n        /**\r\n         * arguments will be used to abstract the cache function.\r\n         * arguments[0] is the uniform name. the rest are numbers.\r\n         */\r\n        let cache: number[] = this._valueCache[arguments[0]];\r\n        if (!cache || cache.length !== arguments.length - 1) {\r\n            cache = Array.prototype.slice.call(arguments, 1);\r\n            this._valueCache[arguments[0]] = cache;\r\n            return true;\r\n        }\r\n\r\n        let changed = false;\r\n        for (let i = 0; i < cache.length; ++i) {\r\n            if (cache[i] !== arguments[i + 1]) {\r\n                cache[i] = arguments[i + 1];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cacheFloat2(uniformName: string, x: number, y: number): boolean {\r\n        return this._cacheFloatN(uniformName, x, y);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cacheFloat3(uniformName: string, x: number, y: number, z: number): boolean {\r\n        return this._cacheFloatN(uniformName, x, y, z);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cacheFloat4(uniformName: string, x: number, y: number, z: number, w: number): boolean {\r\n        return this._cacheFloatN(uniformName, x, y, z, w);\r\n    }\r\n\r\n    /**\r\n     * Sets an integer value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param value Value to be set.\r\n     */\r\n    public setInt: (uniformName: string, value: number) => void;\r\n\r\n    /**\r\n     * Sets a int2 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First int in int2.\r\n     * @param y Second int in int2.\r\n     */\r\n    public setInt2: (uniformName: string, x: number, y: number) => void;\r\n\r\n    /**\r\n     * Sets a int3 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First int in int3.\r\n     * @param y Second int in int3.\r\n     * @param z Third int in int3.\r\n     */\r\n    public setInt3: (uniformName: string, x: number, y: number, z: number) => void;\r\n\r\n    /**\r\n     * Sets a int4 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First int in int4.\r\n     * @param y Second int in int4.\r\n     * @param z Third int in int4.\r\n     * @param w Fourth int in int4.\r\n     */\r\n    public setInt4: (uniformName: string, x: number, y: number, z: number, w: number) => void;\r\n\r\n    /**\r\n     * Sets an int array on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setIntArray: (uniformName: string, array: Int32Array) => void;\r\n\r\n    /**\r\n     * Sets an int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setIntArray2: (uniformName: string, array: Int32Array) => void;\r\n\r\n    /**\r\n     * Sets an int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setIntArray3: (uniformName: string, array: Int32Array) => void;\r\n\r\n    /**\r\n     * Sets an int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setIntArray4: (uniformName: string, array: Int32Array) => void;\r\n\r\n    /**\r\n     * Sets an unsigned integer value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param value Value to be set.\r\n     */\r\n    public setUInt: (uniformName: string, value: number) => void;\r\n\r\n    /**\r\n     * Sets a unsigned int2 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First unsigned int in uint2.\r\n     * @param y Second unsigned int in uint2.\r\n     */\r\n    public setUInt2: (uniformName: string, x: number, y: number) => void;\r\n\r\n    /**\r\n     * Sets a unsigned int3 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First unsigned int in uint3.\r\n     * @param y Second unsigned int in uint3.\r\n     * @param z Third unsigned int in uint3.\r\n     */\r\n    public setUInt3: (uniformName: string, x: number, y: number, z: number) => void;\r\n\r\n    /**\r\n     * Sets a unsigned int4 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First unsigned int in uint4.\r\n     * @param y Second unsigned int in uint4.\r\n     * @param z Third unsigned int in uint4.\r\n     * @param w Fourth unsigned int in uint4.\r\n     */\r\n    public setUInt4: (uniformName: string, x: number, y: number, z: number, w: number) => void;\r\n\r\n    /**\r\n     * Sets an unsigned int array on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setUIntArray: (uniformName: string, array: Uint32Array) => void;\r\n\r\n    /**\r\n     * Sets an unsigned int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setUIntArray2: (uniformName: string, array: Uint32Array) => void;\r\n\r\n    /**\r\n     * Sets an unsigned int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setUIntArray3: (uniformName: string, array: Uint32Array) => void;\r\n\r\n    /**\r\n     * Sets an unsigned int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setUIntArray4: (uniformName: string, array: Uint32Array) => void;\r\n\r\n    /**\r\n     * Sets an array on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setArray: (uniformName: string, array: number[]) => void;\r\n\r\n    /**\r\n     * Sets an array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setArray2: (uniformName: string, array: number[]) => void;\r\n\r\n    /**\r\n     * Sets an array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setArray3: (uniformName: string, array: number[]) => void;\r\n\r\n    /**\r\n     * Sets an array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setArray4: (uniformName: string, array: number[]) => void;\r\n\r\n    /**\r\n     * Sets matrices on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param matrices matrices to be set.\r\n     */\r\n    public setMatrices: (uniformName: string, matrices: Float32Array) => void;\r\n\r\n    /**\r\n     * Sets matrix on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param matrix matrix to be set.\r\n     */\r\n    public setMatrix(uniformName: string, matrix: IMatrixLike): void {\r\n        if (this._cacheMatrix(uniformName, matrix)) {\r\n            if (!this.engine.setMatrices(this._uniforms[uniformName], matrix.toArray() as Float32Array)) {\r\n                this._valueCache[uniformName] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a 3x3 matrix on a uniform variable. (Specified as [1,2,3,4,5,6,7,8,9] will result in [1,2,3][4,5,6][7,8,9] matrix)\r\n     * @param uniformName Name of the variable.\r\n     * @param matrix matrix to be set.\r\n     */\r\n    public setMatrix3x3: (uniformName: string, matrix: Float32Array) => void;\r\n\r\n    /**\r\n     * Sets a 2x2 matrix on a uniform variable. (Specified as [1,2,3,4] will result in [1,2][3,4] matrix)\r\n     * @param uniformName Name of the variable.\r\n     * @param matrix matrix to be set.\r\n     */\r\n    public setMatrix2x2: (uniformName: string, matrix: Float32Array) => void;\r\n\r\n    /**\r\n     * Sets a float on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param value value to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setFloat: (uniformName: string, value: number) => void;\r\n\r\n    /**\r\n     * Sets a Vector2 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param vector2 vector2 to be set.\r\n     */\r\n    public setVector2(uniformName: string, vector2: IVector2Like): void {\r\n        this.setFloat2(uniformName, vector2.x, vector2.y);\r\n    }\r\n\r\n    /**\r\n     * Sets a float2 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First float in float2.\r\n     * @param y Second float in float2.\r\n     */\r\n    public setFloat2: (uniformName: string, x: number, y: number) => void;\r\n\r\n    /**\r\n     * Sets a Vector3 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param vector3 Value to be set.\r\n     */\r\n    public setVector3(uniformName: string, vector3: IVector3Like): void {\r\n        this.setFloat3(uniformName, vector3.x, vector3.y, vector3.z);\r\n    }\r\n\r\n    /**\r\n     * Sets a float3 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First float in float3.\r\n     * @param y Second float in float3.\r\n     * @param z Third float in float3.\r\n     */\r\n    public setFloat3: (uniformName: string, x: number, y: number, z: number) => void;\r\n\r\n    /**\r\n     * Sets a Vector4 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param vector4 Value to be set.\r\n     */\r\n    public setVector4(uniformName: string, vector4: IVector4Like): void {\r\n        this.setFloat4(uniformName, vector4.x, vector4.y, vector4.z, vector4.w);\r\n    }\r\n\r\n    /**\r\n     * Sets a Quaternion on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param quaternion Value to be set.\r\n     */\r\n    public setQuaternion(uniformName: string, quaternion: IQuaternionLike): void {\r\n        this.setFloat4(uniformName, quaternion.x, quaternion.y, quaternion.z, quaternion.w);\r\n    }\r\n\r\n    /**\r\n     * Sets a float4 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First float in float4.\r\n     * @param y Second float in float4.\r\n     * @param z Third float in float4.\r\n     * @param w Fourth float in float4.\r\n     * @returns this effect.\r\n     */\r\n    public setFloat4: (uniformName: string, x: number, y: number, z: number, w: number) => void;\r\n\r\n    /**\r\n     * Sets a Color3 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param color3 Value to be set.\r\n     */\r\n    public setColor3(uniformName: string, color3: IColor3Like): void {\r\n        this.setFloat3(uniformName, color3.r, color3.g, color3.b);\r\n    }\r\n\r\n    /**\r\n     * Sets a Color4 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param color3 Value to be set.\r\n     * @param alpha Alpha value to be set.\r\n     */\r\n    public setColor4(uniformName: string, color3: IColor3Like, alpha: number): void {\r\n        this.setFloat4(uniformName, color3.r, color3.g, color3.b, alpha);\r\n    }\r\n\r\n    /**\r\n     * Sets a Color4 on a uniform variable\r\n     * @param uniformName defines the name of the variable\r\n     * @param color4 defines the value to be set\r\n     */\r\n    public setDirectColor4(uniformName: string, color4: IColor4Like): void {\r\n        this.setFloat4(uniformName, color4.r, color4.g, color4.b, color4.a);\r\n    }\r\n\r\n    public _getVertexShaderCode(): string | null {\r\n        return this.vertexShader ? this.engine._getShaderSource(this.vertexShader) : null;\r\n    }\r\n\r\n    public _getFragmentShaderCode(): string | null {\r\n        return this.fragmentShader ? this.engine._getShaderSource(this.fragmentShader) : null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}