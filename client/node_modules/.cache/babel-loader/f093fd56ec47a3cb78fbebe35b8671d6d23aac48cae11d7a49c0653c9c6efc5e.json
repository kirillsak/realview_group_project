{"ast":null,"code":"import { BaseTexture } from \"../../Materials/Textures/baseTexture.js\";\nimport { Matrix } from \"../../Maths/math.vector.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport \"../../Engines/Extensions/engine.dynamicTexture.js\";\nimport \"../../Engines/Extensions/engine.videoTexture.js\";\n/**\n * This represents the smallest workload to use an already existing element (Canvas or Video) as a texture.\n * To be as efficient as possible depending on your constraints nothing aside the first upload\n * is automatically managed.\n * It is a cheap VideoTexture or DynamicTexture if you prefer to keep full control of the elements\n * in your application.\n *\n * As the update is not automatic, you need to call them manually.\n */\nexport class HtmlElementTexture extends BaseTexture {\n  /**\n   * Instantiates a HtmlElementTexture from the following parameters.\n   *\n   * @param name Defines the name of the texture\n   * @param element Defines the video or canvas the texture is filled with\n   * @param options Defines the other none mandatory texture creation options\n   */\n  constructor(name, element, options) {\n    var _a, _b;\n    super(options.scene || options.engine);\n    /**\n     * Observable triggered once the texture has been loaded.\n     */\n    this.onLoadObservable = new Observable();\n    if (!element || !options.engine && !options.scene) {\n      return;\n    }\n    options = {\n      ...HtmlElementTexture._DefaultOptions,\n      ...options\n    };\n    this._generateMipMaps = options.generateMipMaps;\n    this._samplingMode = options.samplingMode;\n    this._textureMatrix = Matrix.Identity();\n    this._format = options.format;\n    this.name = name;\n    this.element = element;\n    this._isVideo = !!element.getVideoPlaybackQuality;\n    this._externalTexture = this._isVideo ? (_b = (_a = this._engine) === null || _a === void 0 ? void 0 : _a.createExternalTexture(element)) !== null && _b !== void 0 ? _b : null : null;\n    this.anisotropicFilteringLevel = 1;\n    this._createInternalTexture();\n  }\n  _createInternalTexture() {\n    let width = 0;\n    let height = 0;\n    if (this._isVideo) {\n      width = this.element.videoWidth;\n      height = this.element.videoHeight;\n    } else {\n      width = this.element.width;\n      height = this.element.height;\n    }\n    const engine = this._getEngine();\n    if (engine) {\n      this._texture = engine.createDynamicTexture(width, height, this._generateMipMaps, this._samplingMode);\n      this._texture.format = this._format;\n    }\n    this.update();\n  }\n  /**\n   * Returns the texture matrix used in most of the material.\n   */\n  getTextureMatrix() {\n    return this._textureMatrix;\n  }\n  /**\n   * Updates the content of the texture.\n   * @param invertY Defines whether the texture should be inverted on Y (false by default on video and true on canvas)\n   */\n  update(invertY = null) {\n    const engine = this._getEngine();\n    if (this._texture == null || engine == null) {\n      return;\n    }\n    const wasReady = this.isReady();\n    if (this._isVideo) {\n      const videoElement = this.element;\n      if (videoElement.readyState < videoElement.HAVE_CURRENT_DATA) {\n        return;\n      }\n      engine.updateVideoTexture(this._texture, this._externalTexture ? this._externalTexture : videoElement, invertY === null ? true : invertY);\n    } else {\n      const canvasElement = this.element;\n      engine.updateDynamicTexture(this._texture, canvasElement, invertY === null ? true : invertY, false, this._format);\n    }\n    if (!wasReady && this.isReady()) {\n      this.onLoadObservable.notifyObservers(this);\n    }\n  }\n  /**\n   * Dispose the texture and release its associated resources.\n   */\n  dispose() {\n    this.onLoadObservable.clear();\n    super.dispose();\n  }\n}\nHtmlElementTexture._DefaultOptions = {\n  generateMipMaps: false,\n  samplingMode: 2,\n  format: 5,\n  engine: null,\n  scene: null\n};","map":{"version":3,"mappings":"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","names":["BaseTexture","Matrix","Observable","HtmlElementTexture","constructor","name","element","options","scene","engine","_DefaultOptions","_generateMipMaps","generateMipMaps","_samplingMode","samplingMode","_textureMatrix","Identity","_format","format","_isVideo","getVideoPlaybackQuality","_externalTexture","_engine","createExternalTexture","anisotropicFilteringLevel","_createInternalTexture","width","height","videoWidth","videoHeight","_getEngine","_texture","createDynamicTexture","update","getTextureMatrix","invertY","wasReady","isReady","videoElement","readyState","HAVE_CURRENT_DATA","updateVideoTexture","canvasElement","updateDynamicTexture","onLoadObservable","notifyObservers","dispose","clear"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/Textures/htmlElementTexture.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { Matrix } from \"../../Maths/math.vector\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { ExternalTexture } from \"./externalTexture\";\r\n\r\nimport \"../../Engines/Extensions/engine.dynamicTexture\";\r\nimport \"../../Engines/Extensions/engine.videoTexture\";\r\n\r\ndeclare type ThinEngine = import(\"../../Engines/thinEngine\").ThinEngine;\r\ndeclare type Scene = import(\"../../scene\").Scene;\r\n\r\n/**\r\n * Defines the options related to the creation of an HtmlElementTexture\r\n */\r\nexport interface IHtmlElementTextureOptions {\r\n    /**\r\n     * Defines whether mip maps should be created or not.\r\n     */\r\n    generateMipMaps?: boolean;\r\n    /**\r\n     * Defines the sampling mode of the texture.\r\n     */\r\n    samplingMode?: number;\r\n    /**\r\n     * Defines the associated texture format.\r\n     */\r\n    format?: number;\r\n    /**\r\n     * Defines the engine instance to use the texture with. It is not mandatory if you define a scene.\r\n     */\r\n    engine: Nullable<ThinEngine>;\r\n    /**\r\n     * Defines the scene the texture belongs to. It is not mandatory if you define an engine.\r\n     */\r\n    scene: Nullable<Scene>;\r\n}\r\n\r\n/**\r\n * This represents the smallest workload to use an already existing element (Canvas or Video) as a texture.\r\n * To be as efficient as possible depending on your constraints nothing aside the first upload\r\n * is automatically managed.\r\n * It is a cheap VideoTexture or DynamicTexture if you prefer to keep full control of the elements\r\n * in your application.\r\n *\r\n * As the update is not automatic, you need to call them manually.\r\n */\r\nexport class HtmlElementTexture extends BaseTexture {\r\n    /**\r\n     * The texture URL.\r\n     */\r\n    public element: HTMLVideoElement | HTMLCanvasElement;\r\n\r\n    /**\r\n     * Observable triggered once the texture has been loaded.\r\n     */\r\n    public onLoadObservable: Observable<HtmlElementTexture> = new Observable<HtmlElementTexture>();\r\n\r\n    private static readonly _DefaultOptions: IHtmlElementTextureOptions = {\r\n        generateMipMaps: false,\r\n        samplingMode: Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n        format: Constants.TEXTUREFORMAT_RGBA,\r\n        engine: null,\r\n        scene: null,\r\n    };\r\n\r\n    private readonly _format: number;\r\n    private _textureMatrix: Matrix;\r\n    private _isVideo: boolean;\r\n    private _generateMipMaps: boolean;\r\n    private _samplingMode: number;\r\n    private _externalTexture: Nullable<ExternalTexture>;\r\n\r\n    /**\r\n     * Instantiates a HtmlElementTexture from the following parameters.\r\n     *\r\n     * @param name Defines the name of the texture\r\n     * @param element Defines the video or canvas the texture is filled with\r\n     * @param options Defines the other none mandatory texture creation options\r\n     */\r\n    constructor(name: string, element: HTMLVideoElement | HTMLCanvasElement, options: IHtmlElementTextureOptions) {\r\n        super(options.scene || options.engine);\r\n\r\n        if (!element || (!options.engine && !options.scene)) {\r\n            return;\r\n        }\r\n\r\n        options = {\r\n            ...HtmlElementTexture._DefaultOptions,\r\n            ...options,\r\n        };\r\n\r\n        this._generateMipMaps = options.generateMipMaps!;\r\n        this._samplingMode = options.samplingMode!;\r\n        this._textureMatrix = Matrix.Identity();\r\n        this._format = options.format!;\r\n\r\n        this.name = name;\r\n        this.element = element;\r\n        this._isVideo = !!(element as HTMLVideoElement).getVideoPlaybackQuality;\r\n        this._externalTexture = this._isVideo ? this._engine?.createExternalTexture(element as HTMLVideoElement) ?? null : null;\r\n\r\n        this.anisotropicFilteringLevel = 1;\r\n\r\n        this._createInternalTexture();\r\n    }\r\n\r\n    private _createInternalTexture(): void {\r\n        let width = 0;\r\n        let height = 0;\r\n        if (this._isVideo) {\r\n            width = (this.element as HTMLVideoElement).videoWidth;\r\n            height = (this.element as HTMLVideoElement).videoHeight;\r\n        } else {\r\n            width = this.element.width;\r\n            height = this.element.height;\r\n        }\r\n\r\n        const engine = this._getEngine();\r\n        if (engine) {\r\n            this._texture = engine.createDynamicTexture(width, height, this._generateMipMaps, this._samplingMode);\r\n            this._texture.format = this._format;\r\n        }\r\n\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Returns the texture matrix used in most of the material.\r\n     */\r\n    public getTextureMatrix(): Matrix {\r\n        return this._textureMatrix;\r\n    }\r\n\r\n    /**\r\n     * Updates the content of the texture.\r\n     * @param invertY Defines whether the texture should be inverted on Y (false by default on video and true on canvas)\r\n     */\r\n    public update(invertY: Nullable<boolean> = null): void {\r\n        const engine = this._getEngine();\r\n        if (this._texture == null || engine == null) {\r\n            return;\r\n        }\r\n\r\n        const wasReady = this.isReady();\r\n        if (this._isVideo) {\r\n            const videoElement = this.element as HTMLVideoElement;\r\n            if (videoElement.readyState < videoElement.HAVE_CURRENT_DATA) {\r\n                return;\r\n            }\r\n\r\n            engine.updateVideoTexture(this._texture, this._externalTexture ? this._externalTexture : videoElement, invertY === null ? true : invertY);\r\n        } else {\r\n            const canvasElement = this.element as HTMLCanvasElement;\r\n            engine.updateDynamicTexture(this._texture, canvasElement, invertY === null ? true : invertY, false, this._format);\r\n        }\r\n\r\n        if (!wasReady && this.isReady()) {\r\n            this.onLoadObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the texture and release its associated resources.\r\n     */\r\n    public dispose(): void {\r\n        this.onLoadObservable.clear();\r\n        super.dispose();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}