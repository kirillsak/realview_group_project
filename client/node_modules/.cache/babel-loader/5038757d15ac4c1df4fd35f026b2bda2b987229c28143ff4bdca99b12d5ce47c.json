{"ast":null,"code":"/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Base error. Due to limitations of typedoc-check and missing documentation\n * in lib.es5.d.ts, cannot extend Error directly for RuntimeError.\n * @ignore\n */\nexport class BaseError extends Error {}\n// See https://stackoverflow.com/questions/12915412/how-do-i-extend-a-host-object-e-g-error-in-typescript\n// and https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n// Polyfill for Object.setPrototypeOf if necessary.\nBaseError._setPrototypeOf = Object.setPrototypeOf || ((o, proto) => {\n  o.__proto__ = proto;\n  return o;\n});\n/* IMP! DO NOT CHANGE THE NUMBERING OF EXISTING ERROR CODES */\n/**\n * Error codes for BaseError\n */\nexport const ErrorCodes = {\n  // Mesh errors 0-999\n  /** Invalid or empty mesh vertex positions. */\n  MeshInvalidPositionsError: 0,\n  // Texture errors 1000-1999\n  /** Unsupported texture found. */\n  UnsupportedTextureError: 1000,\n  // GLTFLoader errors 2000-2999\n  /** Unexpected magic number found in GLTF file header. */\n  GLTFLoaderUnexpectedMagicError: 2000,\n  // SceneLoader errors 3000-3999\n  /** SceneLoader generic error code. Ideally wraps the inner exception. */\n  SceneLoaderError: 3000,\n  // File related errors 4000-4999\n  /** Load file error */\n  LoadFileError: 4000,\n  /** Request file error */\n  RequestFileError: 4001,\n  /** Read file error */\n  ReadFileError: 4002\n};\n/**\n * Application runtime error\n */\nexport class RuntimeError extends BaseError {\n  /**\n   * Creates a new RuntimeError\n   * @param message defines the message of the error\n   * @param errorCode the error code\n   * @param innerError the error that caused the outer error\n   */\n  constructor(message, errorCode, innerError) {\n    super(message);\n    this.errorCode = errorCode;\n    this.innerError = innerError;\n    this.name = \"RuntimeError\";\n    BaseError._setPrototypeOf(this, RuntimeError.prototype);\n  }\n}","map":{"version":3,"mappings":"AAAA;AACA;;;;;AAKA,OAAM,MAAgBA,SAAU,SAAQC,KAAK;AACzC;AACA;AAEA;AACiBD,yBAAe,GAC3BE,MAAc,CAACC,cAAc,KAC7B,CAACC,CAAC,EAAEC,KAAK,KAAI;EACVD,CAAC,CAACE,SAAS,GAAGD,KAAK;EACnB,OAAOD,CAAC;AACZ,CAAC,CAAC;AAGV;AACA;;;AAGA,OAAO,MAAMG,UAAU,GAAG;EACtB;EACA;EACAC,yBAAyB,EAAE,CAAC;EAE5B;EACA;EACAC,uBAAuB,EAAE,IAAI;EAE7B;EACA;EACAC,8BAA8B,EAAE,IAAI;EAEpC;EACA;EACAC,gBAAgB,EAAE,IAAI;EAEtB;EACA;EACAC,aAAa,EAAE,IAAI;EACnB;EACAC,gBAAgB,EAAE,IAAI;EACtB;EACAC,aAAa,EAAE;CACT;AAOV;;;AAGA,OAAM,MAAOC,YAAa,SAAQf,SAAS;EAWvC;;;;;;EAMAgB,YAAmBC,OAAe,EAAEC,SAAyB,EAAEC,UAAkB;IAC7E,KAAK,CAACF,OAAO,CAAC;IAEd,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,UAAU,GAAGA,UAAU;IAE5B,IAAI,CAACC,IAAI,GAAG,cAAc;IAC1BpB,SAAS,CAACqB,eAAe,CAAC,IAAI,EAAEN,YAAY,CAACO,SAAS,CAAC;EAC3D","names":["BaseError","Error","Object","setPrototypeOf","o","proto","__proto__","ErrorCodes","MeshInvalidPositionsError","UnsupportedTextureError","GLTFLoaderUnexpectedMagicError","SceneLoaderError","LoadFileError","RequestFileError","ReadFileError","RuntimeError","constructor","message","errorCode","innerError","name","_setPrototypeOf","prototype"],"sourceRoot":"","sources":["../../../../lts/core/generated/Misc/error.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\n/**\r\n * Base error. Due to limitations of typedoc-check and missing documentation\r\n * in lib.es5.d.ts, cannot extend Error directly for RuntimeError.\r\n * @ignore\r\n */\r\nexport abstract class BaseError extends Error {\r\n    // See https://stackoverflow.com/questions/12915412/how-do-i-extend-a-host-object-e-g-error-in-typescript\r\n    // and https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n\r\n    // Polyfill for Object.setPrototypeOf if necessary.\r\n    protected static _setPrototypeOf: (o: any, proto: object | null) => any =\r\n        (Object as any).setPrototypeOf ||\r\n        ((o, proto) => {\r\n            o.__proto__ = proto;\r\n            return o;\r\n        });\r\n}\r\n\r\n/* IMP! DO NOT CHANGE THE NUMBERING OF EXISTING ERROR CODES */\r\n/**\r\n * Error codes for BaseError\r\n */\r\nexport const ErrorCodes = {\r\n    // Mesh errors 0-999\r\n    /** Invalid or empty mesh vertex positions. */\r\n    MeshInvalidPositionsError: 0,\r\n\r\n    // Texture errors 1000-1999\r\n    /** Unsupported texture found. */\r\n    UnsupportedTextureError: 1000,\r\n\r\n    // GLTFLoader errors 2000-2999\r\n    /** Unexpected magic number found in GLTF file header. */\r\n    GLTFLoaderUnexpectedMagicError: 2000,\r\n\r\n    // SceneLoader errors 3000-3999\r\n    /** SceneLoader generic error code. Ideally wraps the inner exception. */\r\n    SceneLoaderError: 3000,\r\n\r\n    // File related errors 4000-4999\r\n    /** Load file error */\r\n    LoadFileError: 4000,\r\n    /** Request file error */\r\n    RequestFileError: 4001,\r\n    /** Read file error */\r\n    ReadFileError: 4002,\r\n} as const;\r\n\r\n/**\r\n * Error code type\r\n */\r\nexport type ErrorCodesType = typeof ErrorCodes[keyof typeof ErrorCodes];\r\n\r\n/**\r\n * Application runtime error\r\n */\r\nexport class RuntimeError extends BaseError {\r\n    /**\r\n     * The error code\r\n     */\r\n    public errorCode: ErrorCodesType;\r\n\r\n    /**\r\n     * The error that caused this outer error\r\n     */\r\n    public innerError?: Error;\r\n\r\n    /**\r\n     * Creates a new RuntimeError\r\n     * @param message defines the message of the error\r\n     * @param errorCode the error code\r\n     * @param innerError the error that caused the outer error\r\n     */\r\n    public constructor(message: string, errorCode: ErrorCodesType, innerError?: Error) {\r\n        super(message);\r\n\r\n        this.errorCode = errorCode;\r\n        this.innerError = innerError;\r\n\r\n        this.name = \"RuntimeError\";\r\n        BaseError._setPrototypeOf(this, RuntimeError.prototype);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}