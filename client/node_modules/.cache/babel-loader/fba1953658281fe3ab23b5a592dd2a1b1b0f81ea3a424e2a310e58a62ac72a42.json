{"ast":null,"code":"import { Tools } from \"../Misc/tools.js\";\nimport { PerfCounter } from \"../Misc/perfCounter.js\";\n/**\n * This class can be used to get instrumentation data from a Babylon engine\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#sceneinstrumentation\n */\nexport class SceneInstrumentation {\n  /**\n   * Instantiates a new scene instrumentation.\n   * This class can be used to get instrumentation data from a Babylon engine\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#sceneinstrumentation\n   * @param scene Defines the scene to instrument\n   */\n  constructor(\n  /**\n   * Defines the scene to instrument\n   */\n  scene) {\n    this.scene = scene;\n    this._captureActiveMeshesEvaluationTime = false;\n    this._activeMeshesEvaluationTime = new PerfCounter();\n    this._captureRenderTargetsRenderTime = false;\n    this._renderTargetsRenderTime = new PerfCounter();\n    this._captureFrameTime = false;\n    this._frameTime = new PerfCounter();\n    this._captureRenderTime = false;\n    this._renderTime = new PerfCounter();\n    this._captureInterFrameTime = false;\n    this._interFrameTime = new PerfCounter();\n    this._captureParticlesRenderTime = false;\n    this._particlesRenderTime = new PerfCounter();\n    this._captureSpritesRenderTime = false;\n    this._spritesRenderTime = new PerfCounter();\n    this._capturePhysicsTime = false;\n    this._physicsTime = new PerfCounter();\n    this._captureAnimationsTime = false;\n    this._animationsTime = new PerfCounter();\n    this._captureCameraRenderTime = false;\n    this._cameraRenderTime = new PerfCounter();\n    // Observers\n    this._onBeforeActiveMeshesEvaluationObserver = null;\n    this._onAfterActiveMeshesEvaluationObserver = null;\n    this._onBeforeRenderTargetsRenderObserver = null;\n    this._onAfterRenderTargetsRenderObserver = null;\n    this._onAfterRenderObserver = null;\n    this._onBeforeDrawPhaseObserver = null;\n    this._onAfterDrawPhaseObserver = null;\n    this._onBeforeAnimationsObserver = null;\n    this._onBeforeParticlesRenderingObserver = null;\n    this._onAfterParticlesRenderingObserver = null;\n    this._onBeforeSpritesRenderingObserver = null;\n    this._onAfterSpritesRenderingObserver = null;\n    this._onBeforePhysicsObserver = null;\n    this._onAfterPhysicsObserver = null;\n    this._onAfterAnimationsObserver = null;\n    this._onBeforeCameraRenderObserver = null;\n    this._onAfterCameraRenderObserver = null;\n    // Before render\n    this._onBeforeAnimationsObserver = scene.onBeforeAnimationsObservable.add(() => {\n      if (this._captureActiveMeshesEvaluationTime) {\n        this._activeMeshesEvaluationTime.fetchNewFrame();\n      }\n      if (this._captureRenderTargetsRenderTime) {\n        this._renderTargetsRenderTime.fetchNewFrame();\n      }\n      if (this._captureFrameTime) {\n        Tools.StartPerformanceCounter(\"Scene rendering\");\n        this._frameTime.beginMonitoring();\n      }\n      if (this._captureInterFrameTime) {\n        this._interFrameTime.endMonitoring();\n      }\n      if (this._captureParticlesRenderTime) {\n        this._particlesRenderTime.fetchNewFrame();\n      }\n      if (this._captureSpritesRenderTime) {\n        this._spritesRenderTime.fetchNewFrame();\n      }\n      if (this._captureAnimationsTime) {\n        this._animationsTime.beginMonitoring();\n      }\n      this.scene.getEngine()._drawCalls.fetchNewFrame();\n    });\n    // After render\n    this._onAfterRenderObserver = scene.onAfterRenderObservable.add(() => {\n      if (this._captureFrameTime) {\n        Tools.EndPerformanceCounter(\"Scene rendering\");\n        this._frameTime.endMonitoring();\n      }\n      if (this._captureRenderTime) {\n        this._renderTime.endMonitoring(false);\n      }\n      if (this._captureInterFrameTime) {\n        this._interFrameTime.beginMonitoring();\n      }\n    });\n  }\n  // Properties\n  /**\n   * Gets the perf counter used for active meshes evaluation time\n   */\n  get activeMeshesEvaluationTimeCounter() {\n    return this._activeMeshesEvaluationTime;\n  }\n  /**\n   * Gets the active meshes evaluation time capture status\n   */\n  get captureActiveMeshesEvaluationTime() {\n    return this._captureActiveMeshesEvaluationTime;\n  }\n  /**\n   * Enable or disable the active meshes evaluation time capture\n   */\n  set captureActiveMeshesEvaluationTime(value) {\n    if (value === this._captureActiveMeshesEvaluationTime) {\n      return;\n    }\n    this._captureActiveMeshesEvaluationTime = value;\n    if (value) {\n      this._onBeforeActiveMeshesEvaluationObserver = this.scene.onBeforeActiveMeshesEvaluationObservable.add(() => {\n        Tools.StartPerformanceCounter(\"Active meshes evaluation\");\n        this._activeMeshesEvaluationTime.beginMonitoring();\n      });\n      this._onAfterActiveMeshesEvaluationObserver = this.scene.onAfterActiveMeshesEvaluationObservable.add(() => {\n        Tools.EndPerformanceCounter(\"Active meshes evaluation\");\n        this._activeMeshesEvaluationTime.endMonitoring();\n      });\n    } else {\n      this.scene.onBeforeActiveMeshesEvaluationObservable.remove(this._onBeforeActiveMeshesEvaluationObserver);\n      this._onBeforeActiveMeshesEvaluationObserver = null;\n      this.scene.onAfterActiveMeshesEvaluationObservable.remove(this._onAfterActiveMeshesEvaluationObserver);\n      this._onAfterActiveMeshesEvaluationObserver = null;\n    }\n  }\n  /**\n   * Gets the perf counter used for render targets render time\n   */\n  get renderTargetsRenderTimeCounter() {\n    return this._renderTargetsRenderTime;\n  }\n  /**\n   * Gets the render targets render time capture status\n   */\n  get captureRenderTargetsRenderTime() {\n    return this._captureRenderTargetsRenderTime;\n  }\n  /**\n   * Enable or disable the render targets render time capture\n   */\n  set captureRenderTargetsRenderTime(value) {\n    if (value === this._captureRenderTargetsRenderTime) {\n      return;\n    }\n    this._captureRenderTargetsRenderTime = value;\n    if (value) {\n      this._onBeforeRenderTargetsRenderObserver = this.scene.onBeforeRenderTargetsRenderObservable.add(() => {\n        Tools.StartPerformanceCounter(\"Render targets rendering\");\n        this._renderTargetsRenderTime.beginMonitoring();\n      });\n      this._onAfterRenderTargetsRenderObserver = this.scene.onAfterRenderTargetsRenderObservable.add(() => {\n        Tools.EndPerformanceCounter(\"Render targets rendering\");\n        this._renderTargetsRenderTime.endMonitoring(false);\n      });\n    } else {\n      this.scene.onBeforeRenderTargetsRenderObservable.remove(this._onBeforeRenderTargetsRenderObserver);\n      this._onBeforeRenderTargetsRenderObserver = null;\n      this.scene.onAfterRenderTargetsRenderObservable.remove(this._onAfterRenderTargetsRenderObserver);\n      this._onAfterRenderTargetsRenderObserver = null;\n    }\n  }\n  /**\n   * Gets the perf counter used for particles render time\n   */\n  get particlesRenderTimeCounter() {\n    return this._particlesRenderTime;\n  }\n  /**\n   * Gets the particles render time capture status\n   */\n  get captureParticlesRenderTime() {\n    return this._captureParticlesRenderTime;\n  }\n  /**\n   * Enable or disable the particles render time capture\n   */\n  set captureParticlesRenderTime(value) {\n    if (value === this._captureParticlesRenderTime) {\n      return;\n    }\n    this._captureParticlesRenderTime = value;\n    if (value) {\n      this._onBeforeParticlesRenderingObserver = this.scene.onBeforeParticlesRenderingObservable.add(() => {\n        Tools.StartPerformanceCounter(\"Particles\");\n        this._particlesRenderTime.beginMonitoring();\n      });\n      this._onAfterParticlesRenderingObserver = this.scene.onAfterParticlesRenderingObservable.add(() => {\n        Tools.EndPerformanceCounter(\"Particles\");\n        this._particlesRenderTime.endMonitoring(false);\n      });\n    } else {\n      this.scene.onBeforeParticlesRenderingObservable.remove(this._onBeforeParticlesRenderingObserver);\n      this._onBeforeParticlesRenderingObserver = null;\n      this.scene.onAfterParticlesRenderingObservable.remove(this._onAfterParticlesRenderingObserver);\n      this._onAfterParticlesRenderingObserver = null;\n    }\n  }\n  /**\n   * Gets the perf counter used for sprites render time\n   */\n  get spritesRenderTimeCounter() {\n    return this._spritesRenderTime;\n  }\n  /**\n   * Gets the sprites render time capture status\n   */\n  get captureSpritesRenderTime() {\n    return this._captureSpritesRenderTime;\n  }\n  /**\n   * Enable or disable the sprites render time capture\n   */\n  set captureSpritesRenderTime(value) {\n    if (value === this._captureSpritesRenderTime) {\n      return;\n    }\n    this._captureSpritesRenderTime = value;\n    if (!this.scene.spriteManagers) {\n      return;\n    }\n    if (value) {\n      this._onBeforeSpritesRenderingObserver = this.scene.onBeforeSpritesRenderingObservable.add(() => {\n        Tools.StartPerformanceCounter(\"Sprites\");\n        this._spritesRenderTime.beginMonitoring();\n      });\n      this._onAfterSpritesRenderingObserver = this.scene.onAfterSpritesRenderingObservable.add(() => {\n        Tools.EndPerformanceCounter(\"Sprites\");\n        this._spritesRenderTime.endMonitoring(false);\n      });\n    } else {\n      this.scene.onBeforeSpritesRenderingObservable.remove(this._onBeforeSpritesRenderingObserver);\n      this._onBeforeSpritesRenderingObserver = null;\n      this.scene.onAfterSpritesRenderingObservable.remove(this._onAfterSpritesRenderingObserver);\n      this._onAfterSpritesRenderingObserver = null;\n    }\n  }\n  /**\n   * Gets the perf counter used for physics time\n   */\n  get physicsTimeCounter() {\n    return this._physicsTime;\n  }\n  /**\n   * Gets the physics time capture status\n   */\n  get capturePhysicsTime() {\n    return this._capturePhysicsTime;\n  }\n  /**\n   * Enable or disable the physics time capture\n   */\n  set capturePhysicsTime(value) {\n    if (value === this._capturePhysicsTime) {\n      return;\n    }\n    if (!this.scene.onBeforePhysicsObservable) {\n      return;\n    }\n    this._capturePhysicsTime = value;\n    if (value) {\n      this._onBeforePhysicsObserver = this.scene.onBeforePhysicsObservable.add(() => {\n        Tools.StartPerformanceCounter(\"Physics\");\n        this._physicsTime.beginMonitoring();\n      });\n      this._onAfterPhysicsObserver = this.scene.onAfterPhysicsObservable.add(() => {\n        Tools.EndPerformanceCounter(\"Physics\");\n        this._physicsTime.endMonitoring();\n      });\n    } else {\n      this.scene.onBeforePhysicsObservable.remove(this._onBeforePhysicsObserver);\n      this._onBeforePhysicsObserver = null;\n      this.scene.onAfterPhysicsObservable.remove(this._onAfterPhysicsObserver);\n      this._onAfterPhysicsObserver = null;\n    }\n  }\n  /**\n   * Gets the perf counter used for animations time\n   */\n  get animationsTimeCounter() {\n    return this._animationsTime;\n  }\n  /**\n   * Gets the animations time capture status\n   */\n  get captureAnimationsTime() {\n    return this._captureAnimationsTime;\n  }\n  /**\n   * Enable or disable the animations time capture\n   */\n  set captureAnimationsTime(value) {\n    if (value === this._captureAnimationsTime) {\n      return;\n    }\n    this._captureAnimationsTime = value;\n    if (value) {\n      this._onAfterAnimationsObserver = this.scene.onAfterAnimationsObservable.add(() => {\n        this._animationsTime.endMonitoring();\n      });\n    } else {\n      this.scene.onAfterAnimationsObservable.remove(this._onAfterAnimationsObserver);\n      this._onAfterAnimationsObserver = null;\n    }\n  }\n  /**\n   * Gets the perf counter used for frame time capture\n   */\n  get frameTimeCounter() {\n    return this._frameTime;\n  }\n  /**\n   * Gets the frame time capture status\n   */\n  get captureFrameTime() {\n    return this._captureFrameTime;\n  }\n  /**\n   * Enable or disable the frame time capture\n   */\n  set captureFrameTime(value) {\n    this._captureFrameTime = value;\n  }\n  /**\n   * Gets the perf counter used for inter-frames time capture\n   */\n  get interFrameTimeCounter() {\n    return this._interFrameTime;\n  }\n  /**\n   * Gets the inter-frames time capture status\n   */\n  get captureInterFrameTime() {\n    return this._captureInterFrameTime;\n  }\n  /**\n   * Enable or disable the inter-frames time capture\n   */\n  set captureInterFrameTime(value) {\n    this._captureInterFrameTime = value;\n  }\n  /**\n   * Gets the perf counter used for render time capture\n   */\n  get renderTimeCounter() {\n    return this._renderTime;\n  }\n  /**\n   * Gets the render time capture status\n   */\n  get captureRenderTime() {\n    return this._captureRenderTime;\n  }\n  /**\n   * Enable or disable the render time capture\n   */\n  set captureRenderTime(value) {\n    if (value === this._captureRenderTime) {\n      return;\n    }\n    this._captureRenderTime = value;\n    if (value) {\n      this._onBeforeDrawPhaseObserver = this.scene.onBeforeDrawPhaseObservable.add(() => {\n        this._renderTime.beginMonitoring();\n        Tools.StartPerformanceCounter(\"Main render\");\n      });\n      this._onAfterDrawPhaseObserver = this.scene.onAfterDrawPhaseObservable.add(() => {\n        this._renderTime.endMonitoring(false);\n        Tools.EndPerformanceCounter(\"Main render\");\n      });\n    } else {\n      this.scene.onBeforeDrawPhaseObservable.remove(this._onBeforeDrawPhaseObserver);\n      this._onBeforeDrawPhaseObserver = null;\n      this.scene.onAfterDrawPhaseObservable.remove(this._onAfterDrawPhaseObserver);\n      this._onAfterDrawPhaseObserver = null;\n    }\n  }\n  /**\n   * Gets the perf counter used for camera render time capture\n   */\n  get cameraRenderTimeCounter() {\n    return this._cameraRenderTime;\n  }\n  /**\n   * Gets the camera render time capture status\n   */\n  get captureCameraRenderTime() {\n    return this._captureCameraRenderTime;\n  }\n  /**\n   * Enable or disable the camera render time capture\n   */\n  set captureCameraRenderTime(value) {\n    if (value === this._captureCameraRenderTime) {\n      return;\n    }\n    this._captureCameraRenderTime = value;\n    if (value) {\n      this._onBeforeCameraRenderObserver = this.scene.onBeforeCameraRenderObservable.add(camera => {\n        this._cameraRenderTime.beginMonitoring();\n        Tools.StartPerformanceCounter(`Rendering camera ${camera.name}`);\n      });\n      this._onAfterCameraRenderObserver = this.scene.onAfterCameraRenderObservable.add(camera => {\n        this._cameraRenderTime.endMonitoring(false);\n        Tools.EndPerformanceCounter(`Rendering camera ${camera.name}`);\n      });\n    } else {\n      this.scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n      this._onBeforeCameraRenderObserver = null;\n      this.scene.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\n      this._onAfterCameraRenderObserver = null;\n    }\n  }\n  /**\n   * Gets the perf counter used for draw calls\n   */\n  get drawCallsCounter() {\n    return this.scene.getEngine()._drawCalls;\n  }\n  /**\n   * Dispose and release associated resources.\n   */\n  dispose() {\n    this.scene.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n    this._onAfterRenderObserver = null;\n    this.scene.onBeforeActiveMeshesEvaluationObservable.remove(this._onBeforeActiveMeshesEvaluationObserver);\n    this._onBeforeActiveMeshesEvaluationObserver = null;\n    this.scene.onAfterActiveMeshesEvaluationObservable.remove(this._onAfterActiveMeshesEvaluationObserver);\n    this._onAfterActiveMeshesEvaluationObserver = null;\n    this.scene.onBeforeRenderTargetsRenderObservable.remove(this._onBeforeRenderTargetsRenderObserver);\n    this._onBeforeRenderTargetsRenderObserver = null;\n    this.scene.onAfterRenderTargetsRenderObservable.remove(this._onAfterRenderTargetsRenderObserver);\n    this._onAfterRenderTargetsRenderObserver = null;\n    this.scene.onBeforeAnimationsObservable.remove(this._onBeforeAnimationsObserver);\n    this._onBeforeAnimationsObserver = null;\n    this.scene.onBeforeParticlesRenderingObservable.remove(this._onBeforeParticlesRenderingObserver);\n    this._onBeforeParticlesRenderingObserver = null;\n    this.scene.onAfterParticlesRenderingObservable.remove(this._onAfterParticlesRenderingObserver);\n    this._onAfterParticlesRenderingObserver = null;\n    if (this._onBeforeSpritesRenderingObserver) {\n      this.scene.onBeforeSpritesRenderingObservable.remove(this._onBeforeSpritesRenderingObserver);\n      this._onBeforeSpritesRenderingObserver = null;\n    }\n    if (this._onAfterSpritesRenderingObserver) {\n      this.scene.onAfterSpritesRenderingObservable.remove(this._onAfterSpritesRenderingObserver);\n      this._onAfterSpritesRenderingObserver = null;\n    }\n    this.scene.onBeforeDrawPhaseObservable.remove(this._onBeforeDrawPhaseObserver);\n    this._onBeforeDrawPhaseObserver = null;\n    this.scene.onAfterDrawPhaseObservable.remove(this._onAfterDrawPhaseObserver);\n    this._onAfterDrawPhaseObserver = null;\n    if (this._onBeforePhysicsObserver) {\n      this.scene.onBeforePhysicsObservable.remove(this._onBeforePhysicsObserver);\n      this._onBeforePhysicsObserver = null;\n    }\n    if (this._onAfterPhysicsObserver) {\n      this.scene.onAfterPhysicsObservable.remove(this._onAfterPhysicsObserver);\n      this._onAfterPhysicsObserver = null;\n    }\n    this.scene.onAfterAnimationsObservable.remove(this._onAfterAnimationsObserver);\n    this._onAfterAnimationsObserver = null;\n    this.scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n    this._onBeforeCameraRenderObserver = null;\n    this.scene.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\n    this._onAfterCameraRenderObserver = null;\n    this.scene = null;\n  }\n}","map":{"version":3,"mappings":"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","names":["Tools","PerfCounter","SceneInstrumentation","constructor","scene","_onBeforeAnimationsObserver","onBeforeAnimationsObservable","add","_captureActiveMeshesEvaluationTime","_activeMeshesEvaluationTime","fetchNewFrame","_captureRenderTargetsRenderTime","_renderTargetsRenderTime","_captureFrameTime","StartPerformanceCounter","_frameTime","beginMonitoring","_captureInterFrameTime","_interFrameTime","endMonitoring","_captureParticlesRenderTime","_particlesRenderTime","_captureSpritesRenderTime","_spritesRenderTime","_captureAnimationsTime","_animationsTime","getEngine","_drawCalls","_onAfterRenderObserver","onAfterRenderObservable","EndPerformanceCounter","_captureRenderTime","_renderTime","activeMeshesEvaluationTimeCounter","captureActiveMeshesEvaluationTime","value","_onBeforeActiveMeshesEvaluationObserver","onBeforeActiveMeshesEvaluationObservable","_onAfterActiveMeshesEvaluationObserver","onAfterActiveMeshesEvaluationObservable","remove","renderTargetsRenderTimeCounter","captureRenderTargetsRenderTime","_onBeforeRenderTargetsRenderObserver","onBeforeRenderTargetsRenderObservable","_onAfterRenderTargetsRenderObserver","onAfterRenderTargetsRenderObservable","particlesRenderTimeCounter","captureParticlesRenderTime","_onBeforeParticlesRenderingObserver","onBeforeParticlesRenderingObservable","_onAfterParticlesRenderingObserver","onAfterParticlesRenderingObservable","spritesRenderTimeCounter","captureSpritesRenderTime","spriteManagers","_onBeforeSpritesRenderingObserver","onBeforeSpritesRenderingObservable","_onAfterSpritesRenderingObserver","onAfterSpritesRenderingObservable","physicsTimeCounter","_physicsTime","capturePhysicsTime","_capturePhysicsTime","onBeforePhysicsObservable","_onBeforePhysicsObserver","_onAfterPhysicsObserver","onAfterPhysicsObservable","animationsTimeCounter","captureAnimationsTime","_onAfterAnimationsObserver","onAfterAnimationsObservable","frameTimeCounter","captureFrameTime","interFrameTimeCounter","captureInterFrameTime","renderTimeCounter","captureRenderTime","_onBeforeDrawPhaseObserver","onBeforeDrawPhaseObservable","_onAfterDrawPhaseObserver","onAfterDrawPhaseObservable","cameraRenderTimeCounter","_cameraRenderTime","captureCameraRenderTime","_captureCameraRenderTime","_onBeforeCameraRenderObserver","onBeforeCameraRenderObservable","camera","name","_onAfterCameraRenderObserver","onAfterCameraRenderObservable","drawCallsCounter","dispose"],"sourceRoot":"","sources":["../../../../lts/core/generated/Instrumentation/sceneInstrumentation.ts"],"sourcesContent":["import { Tools } from \"../Misc/tools\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene, IDisposable } from \"../scene\";\r\nimport { PerfCounter } from \"../Misc/perfCounter\";\r\n/**\r\n * This class can be used to get instrumentation data from a Babylon engine\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#sceneinstrumentation\r\n */\r\nexport class SceneInstrumentation implements IDisposable {\r\n    private _captureActiveMeshesEvaluationTime = false;\r\n    private _activeMeshesEvaluationTime = new PerfCounter();\r\n\r\n    private _captureRenderTargetsRenderTime = false;\r\n    private _renderTargetsRenderTime = new PerfCounter();\r\n\r\n    private _captureFrameTime = false;\r\n    private _frameTime = new PerfCounter();\r\n\r\n    private _captureRenderTime = false;\r\n    private _renderTime = new PerfCounter();\r\n\r\n    private _captureInterFrameTime = false;\r\n    private _interFrameTime = new PerfCounter();\r\n\r\n    private _captureParticlesRenderTime = false;\r\n    private _particlesRenderTime = new PerfCounter();\r\n\r\n    private _captureSpritesRenderTime = false;\r\n    private _spritesRenderTime = new PerfCounter();\r\n\r\n    private _capturePhysicsTime = false;\r\n    private _physicsTime = new PerfCounter();\r\n\r\n    private _captureAnimationsTime = false;\r\n    private _animationsTime = new PerfCounter();\r\n\r\n    private _captureCameraRenderTime = false;\r\n    private _cameraRenderTime = new PerfCounter();\r\n\r\n    // Observers\r\n    private _onBeforeActiveMeshesEvaluationObserver: Nullable<Observer<Scene>> = null;\r\n    private _onAfterActiveMeshesEvaluationObserver: Nullable<Observer<Scene>> = null;\r\n    private _onBeforeRenderTargetsRenderObserver: Nullable<Observer<Scene>> = null;\r\n    private _onAfterRenderTargetsRenderObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onAfterRenderObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onBeforeDrawPhaseObserver: Nullable<Observer<Scene>> = null;\r\n    private _onAfterDrawPhaseObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onBeforeAnimationsObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onBeforeParticlesRenderingObserver: Nullable<Observer<Scene>> = null;\r\n    private _onAfterParticlesRenderingObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onBeforeSpritesRenderingObserver: Nullable<Observer<Scene>> = null;\r\n    private _onAfterSpritesRenderingObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onBeforePhysicsObserver: Nullable<Observer<Scene>> = null;\r\n    private _onAfterPhysicsObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onAfterAnimationsObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onBeforeCameraRenderObserver: Nullable<Observer<Camera>> = null;\r\n    private _onAfterCameraRenderObserver: Nullable<Observer<Camera>> = null;\r\n\r\n    // Properties\r\n    /**\r\n     * Gets the perf counter used for active meshes evaluation time\r\n     */\r\n    public get activeMeshesEvaluationTimeCounter(): PerfCounter {\r\n        return this._activeMeshesEvaluationTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the active meshes evaluation time capture status\r\n     */\r\n    public get captureActiveMeshesEvaluationTime(): boolean {\r\n        return this._captureActiveMeshesEvaluationTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the active meshes evaluation time capture\r\n     */\r\n    public set captureActiveMeshesEvaluationTime(value: boolean) {\r\n        if (value === this._captureActiveMeshesEvaluationTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureActiveMeshesEvaluationTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforeActiveMeshesEvaluationObserver = this.scene.onBeforeActiveMeshesEvaluationObservable.add(() => {\r\n                Tools.StartPerformanceCounter(\"Active meshes evaluation\");\r\n                this._activeMeshesEvaluationTime.beginMonitoring();\r\n            });\r\n\r\n            this._onAfterActiveMeshesEvaluationObserver = this.scene.onAfterActiveMeshesEvaluationObservable.add(() => {\r\n                Tools.EndPerformanceCounter(\"Active meshes evaluation\");\r\n                this._activeMeshesEvaluationTime.endMonitoring();\r\n            });\r\n        } else {\r\n            this.scene.onBeforeActiveMeshesEvaluationObservable.remove(this._onBeforeActiveMeshesEvaluationObserver);\r\n            this._onBeforeActiveMeshesEvaluationObserver = null;\r\n\r\n            this.scene.onAfterActiveMeshesEvaluationObservable.remove(this._onAfterActiveMeshesEvaluationObserver);\r\n            this._onAfterActiveMeshesEvaluationObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for render targets render time\r\n     */\r\n    public get renderTargetsRenderTimeCounter(): PerfCounter {\r\n        return this._renderTargetsRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the render targets render time capture status\r\n     */\r\n    public get captureRenderTargetsRenderTime(): boolean {\r\n        return this._captureRenderTargetsRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the render targets render time capture\r\n     */\r\n    public set captureRenderTargetsRenderTime(value: boolean) {\r\n        if (value === this._captureRenderTargetsRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureRenderTargetsRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforeRenderTargetsRenderObserver = this.scene.onBeforeRenderTargetsRenderObservable.add(() => {\r\n                Tools.StartPerformanceCounter(\"Render targets rendering\");\r\n                this._renderTargetsRenderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onAfterRenderTargetsRenderObserver = this.scene.onAfterRenderTargetsRenderObservable.add(() => {\r\n                Tools.EndPerformanceCounter(\"Render targets rendering\");\r\n                this._renderTargetsRenderTime.endMonitoring(false);\r\n            });\r\n        } else {\r\n            this.scene.onBeforeRenderTargetsRenderObservable.remove(this._onBeforeRenderTargetsRenderObserver);\r\n            this._onBeforeRenderTargetsRenderObserver = null;\r\n\r\n            this.scene.onAfterRenderTargetsRenderObservable.remove(this._onAfterRenderTargetsRenderObserver);\r\n            this._onAfterRenderTargetsRenderObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for particles render time\r\n     */\r\n    public get particlesRenderTimeCounter(): PerfCounter {\r\n        return this._particlesRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the particles render time capture status\r\n     */\r\n    public get captureParticlesRenderTime(): boolean {\r\n        return this._captureParticlesRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the particles render time capture\r\n     */\r\n    public set captureParticlesRenderTime(value: boolean) {\r\n        if (value === this._captureParticlesRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureParticlesRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforeParticlesRenderingObserver = this.scene.onBeforeParticlesRenderingObservable.add(() => {\r\n                Tools.StartPerformanceCounter(\"Particles\");\r\n                this._particlesRenderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onAfterParticlesRenderingObserver = this.scene.onAfterParticlesRenderingObservable.add(() => {\r\n                Tools.EndPerformanceCounter(\"Particles\");\r\n                this._particlesRenderTime.endMonitoring(false);\r\n            });\r\n        } else {\r\n            this.scene.onBeforeParticlesRenderingObservable.remove(this._onBeforeParticlesRenderingObserver);\r\n            this._onBeforeParticlesRenderingObserver = null;\r\n\r\n            this.scene.onAfterParticlesRenderingObservable.remove(this._onAfterParticlesRenderingObserver);\r\n            this._onAfterParticlesRenderingObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for sprites render time\r\n     */\r\n    public get spritesRenderTimeCounter(): PerfCounter {\r\n        return this._spritesRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the sprites render time capture status\r\n     */\r\n    public get captureSpritesRenderTime(): boolean {\r\n        return this._captureSpritesRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the sprites render time capture\r\n     */\r\n    public set captureSpritesRenderTime(value: boolean) {\r\n        if (value === this._captureSpritesRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureSpritesRenderTime = value;\r\n\r\n        if (!this.scene.spriteManagers) {\r\n            return;\r\n        }\r\n\r\n        if (value) {\r\n            this._onBeforeSpritesRenderingObserver = this.scene.onBeforeSpritesRenderingObservable.add(() => {\r\n                Tools.StartPerformanceCounter(\"Sprites\");\r\n                this._spritesRenderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onAfterSpritesRenderingObserver = this.scene.onAfterSpritesRenderingObservable.add(() => {\r\n                Tools.EndPerformanceCounter(\"Sprites\");\r\n                this._spritesRenderTime.endMonitoring(false);\r\n            });\r\n        } else {\r\n            this.scene.onBeforeSpritesRenderingObservable.remove(this._onBeforeSpritesRenderingObserver);\r\n            this._onBeforeSpritesRenderingObserver = null;\r\n\r\n            this.scene.onAfterSpritesRenderingObservable.remove(this._onAfterSpritesRenderingObserver);\r\n            this._onAfterSpritesRenderingObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for physics time\r\n     */\r\n    public get physicsTimeCounter(): PerfCounter {\r\n        return this._physicsTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the physics time capture status\r\n     */\r\n    public get capturePhysicsTime(): boolean {\r\n        return this._capturePhysicsTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the physics time capture\r\n     */\r\n    public set capturePhysicsTime(value: boolean) {\r\n        if (value === this._capturePhysicsTime) {\r\n            return;\r\n        }\r\n\r\n        if (!this.scene.onBeforePhysicsObservable) {\r\n            return;\r\n        }\r\n\r\n        this._capturePhysicsTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforePhysicsObserver = this.scene.onBeforePhysicsObservable.add(() => {\r\n                Tools.StartPerformanceCounter(\"Physics\");\r\n                this._physicsTime.beginMonitoring();\r\n            });\r\n\r\n            this._onAfterPhysicsObserver = this.scene.onAfterPhysicsObservable.add(() => {\r\n                Tools.EndPerformanceCounter(\"Physics\");\r\n                this._physicsTime.endMonitoring();\r\n            });\r\n        } else {\r\n            this.scene.onBeforePhysicsObservable.remove(this._onBeforePhysicsObserver);\r\n            this._onBeforePhysicsObserver = null;\r\n\r\n            this.scene.onAfterPhysicsObservable.remove(this._onAfterPhysicsObserver);\r\n            this._onAfterPhysicsObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for animations time\r\n     */\r\n    public get animationsTimeCounter(): PerfCounter {\r\n        return this._animationsTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the animations time capture status\r\n     */\r\n    public get captureAnimationsTime(): boolean {\r\n        return this._captureAnimationsTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the animations time capture\r\n     */\r\n    public set captureAnimationsTime(value: boolean) {\r\n        if (value === this._captureAnimationsTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureAnimationsTime = value;\r\n\r\n        if (value) {\r\n            this._onAfterAnimationsObserver = this.scene.onAfterAnimationsObservable.add(() => {\r\n                this._animationsTime.endMonitoring();\r\n            });\r\n        } else {\r\n            this.scene.onAfterAnimationsObservable.remove(this._onAfterAnimationsObserver);\r\n            this._onAfterAnimationsObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for frame time capture\r\n     */\r\n    public get frameTimeCounter(): PerfCounter {\r\n        return this._frameTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the frame time capture status\r\n     */\r\n    public get captureFrameTime(): boolean {\r\n        return this._captureFrameTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the frame time capture\r\n     */\r\n    public set captureFrameTime(value: boolean) {\r\n        this._captureFrameTime = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for inter-frames time capture\r\n     */\r\n    public get interFrameTimeCounter(): PerfCounter {\r\n        return this._interFrameTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the inter-frames time capture status\r\n     */\r\n    public get captureInterFrameTime(): boolean {\r\n        return this._captureInterFrameTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the inter-frames time capture\r\n     */\r\n    public set captureInterFrameTime(value: boolean) {\r\n        this._captureInterFrameTime = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for render time capture\r\n     */\r\n    public get renderTimeCounter(): PerfCounter {\r\n        return this._renderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the render time capture status\r\n     */\r\n    public get captureRenderTime(): boolean {\r\n        return this._captureRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the render time capture\r\n     */\r\n    public set captureRenderTime(value: boolean) {\r\n        if (value === this._captureRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforeDrawPhaseObserver = this.scene.onBeforeDrawPhaseObservable.add(() => {\r\n                this._renderTime.beginMonitoring();\r\n                Tools.StartPerformanceCounter(\"Main render\");\r\n            });\r\n\r\n            this._onAfterDrawPhaseObserver = this.scene.onAfterDrawPhaseObservable.add(() => {\r\n                this._renderTime.endMonitoring(false);\r\n                Tools.EndPerformanceCounter(\"Main render\");\r\n            });\r\n        } else {\r\n            this.scene.onBeforeDrawPhaseObservable.remove(this._onBeforeDrawPhaseObserver);\r\n            this._onBeforeDrawPhaseObserver = null;\r\n            this.scene.onAfterDrawPhaseObservable.remove(this._onAfterDrawPhaseObserver);\r\n            this._onAfterDrawPhaseObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for camera render time capture\r\n     */\r\n    public get cameraRenderTimeCounter(): PerfCounter {\r\n        return this._cameraRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the camera render time capture status\r\n     */\r\n    public get captureCameraRenderTime(): boolean {\r\n        return this._captureCameraRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the camera render time capture\r\n     */\r\n    public set captureCameraRenderTime(value: boolean) {\r\n        if (value === this._captureCameraRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureCameraRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforeCameraRenderObserver = this.scene.onBeforeCameraRenderObservable.add((camera) => {\r\n                this._cameraRenderTime.beginMonitoring();\r\n                Tools.StartPerformanceCounter(`Rendering camera ${camera.name}`);\r\n            });\r\n\r\n            this._onAfterCameraRenderObserver = this.scene.onAfterCameraRenderObservable.add((camera) => {\r\n                this._cameraRenderTime.endMonitoring(false);\r\n                Tools.EndPerformanceCounter(`Rendering camera ${camera.name}`);\r\n            });\r\n        } else {\r\n            this.scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\r\n            this._onBeforeCameraRenderObserver = null;\r\n            this.scene.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\r\n            this._onAfterCameraRenderObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for draw calls\r\n     */\r\n    public get drawCallsCounter(): PerfCounter {\r\n        return this.scene.getEngine()._drawCalls;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new scene instrumentation.\r\n     * This class can be used to get instrumentation data from a Babylon engine\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#sceneinstrumentation\r\n     * @param scene Defines the scene to instrument\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Defines the scene to instrument\r\n         */\r\n        public scene: Scene\r\n    ) {\r\n        // Before render\r\n        this._onBeforeAnimationsObserver = scene.onBeforeAnimationsObservable.add(() => {\r\n            if (this._captureActiveMeshesEvaluationTime) {\r\n                this._activeMeshesEvaluationTime.fetchNewFrame();\r\n            }\r\n\r\n            if (this._captureRenderTargetsRenderTime) {\r\n                this._renderTargetsRenderTime.fetchNewFrame();\r\n            }\r\n\r\n            if (this._captureFrameTime) {\r\n                Tools.StartPerformanceCounter(\"Scene rendering\");\r\n                this._frameTime.beginMonitoring();\r\n            }\r\n\r\n            if (this._captureInterFrameTime) {\r\n                this._interFrameTime.endMonitoring();\r\n            }\r\n\r\n            if (this._captureParticlesRenderTime) {\r\n                this._particlesRenderTime.fetchNewFrame();\r\n            }\r\n\r\n            if (this._captureSpritesRenderTime) {\r\n                this._spritesRenderTime.fetchNewFrame();\r\n            }\r\n\r\n            if (this._captureAnimationsTime) {\r\n                this._animationsTime.beginMonitoring();\r\n            }\r\n\r\n            this.scene.getEngine()._drawCalls.fetchNewFrame();\r\n        });\r\n\r\n        // After render\r\n        this._onAfterRenderObserver = scene.onAfterRenderObservable.add(() => {\r\n            if (this._captureFrameTime) {\r\n                Tools.EndPerformanceCounter(\"Scene rendering\");\r\n                this._frameTime.endMonitoring();\r\n            }\r\n\r\n            if (this._captureRenderTime) {\r\n                this._renderTime.endMonitoring(false);\r\n            }\r\n\r\n            if (this._captureInterFrameTime) {\r\n                this._interFrameTime.beginMonitoring();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose and release associated resources.\r\n     */\r\n    public dispose() {\r\n        this.scene.onAfterRenderObservable.remove(this._onAfterRenderObserver);\r\n        this._onAfterRenderObserver = null;\r\n\r\n        this.scene.onBeforeActiveMeshesEvaluationObservable.remove(this._onBeforeActiveMeshesEvaluationObserver);\r\n        this._onBeforeActiveMeshesEvaluationObserver = null;\r\n\r\n        this.scene.onAfterActiveMeshesEvaluationObservable.remove(this._onAfterActiveMeshesEvaluationObserver);\r\n        this._onAfterActiveMeshesEvaluationObserver = null;\r\n\r\n        this.scene.onBeforeRenderTargetsRenderObservable.remove(this._onBeforeRenderTargetsRenderObserver);\r\n        this._onBeforeRenderTargetsRenderObserver = null;\r\n\r\n        this.scene.onAfterRenderTargetsRenderObservable.remove(this._onAfterRenderTargetsRenderObserver);\r\n        this._onAfterRenderTargetsRenderObserver = null;\r\n\r\n        this.scene.onBeforeAnimationsObservable.remove(this._onBeforeAnimationsObserver);\r\n        this._onBeforeAnimationsObserver = null;\r\n\r\n        this.scene.onBeforeParticlesRenderingObservable.remove(this._onBeforeParticlesRenderingObserver);\r\n        this._onBeforeParticlesRenderingObserver = null;\r\n\r\n        this.scene.onAfterParticlesRenderingObservable.remove(this._onAfterParticlesRenderingObserver);\r\n        this._onAfterParticlesRenderingObserver = null;\r\n\r\n        if (this._onBeforeSpritesRenderingObserver) {\r\n            this.scene.onBeforeSpritesRenderingObservable.remove(this._onBeforeSpritesRenderingObserver);\r\n            this._onBeforeSpritesRenderingObserver = null;\r\n        }\r\n\r\n        if (this._onAfterSpritesRenderingObserver) {\r\n            this.scene.onAfterSpritesRenderingObservable.remove(this._onAfterSpritesRenderingObserver);\r\n            this._onAfterSpritesRenderingObserver = null;\r\n        }\r\n\r\n        this.scene.onBeforeDrawPhaseObservable.remove(this._onBeforeDrawPhaseObserver);\r\n        this._onBeforeDrawPhaseObserver = null;\r\n\r\n        this.scene.onAfterDrawPhaseObservable.remove(this._onAfterDrawPhaseObserver);\r\n        this._onAfterDrawPhaseObserver = null;\r\n\r\n        if (this._onBeforePhysicsObserver) {\r\n            this.scene.onBeforePhysicsObservable.remove(this._onBeforePhysicsObserver);\r\n            this._onBeforePhysicsObserver = null;\r\n        }\r\n\r\n        if (this._onAfterPhysicsObserver) {\r\n            this.scene.onAfterPhysicsObservable.remove(this._onAfterPhysicsObserver);\r\n            this._onAfterPhysicsObserver = null;\r\n        }\r\n\r\n        this.scene.onAfterAnimationsObservable.remove(this._onAfterAnimationsObserver);\r\n        this._onAfterAnimationsObserver = null;\r\n\r\n        this.scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\r\n        this._onBeforeCameraRenderObserver = null;\r\n\r\n        this.scene.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\r\n        this._onAfterCameraRenderObserver = null;\r\n\r\n        (<any>this.scene) = null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}