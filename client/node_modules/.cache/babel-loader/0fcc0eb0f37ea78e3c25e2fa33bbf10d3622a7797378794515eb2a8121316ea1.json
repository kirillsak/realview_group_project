{"ast":null,"code":"import { IsWindowObjectExist } from \"../../Misc/domManagement.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/** @internal */\nexport class WebGPUTintWASM {\n  constructor() {\n    this._twgsl = null;\n  }\n  async initTwgsl(twgslOptions) {\n    twgslOptions = twgslOptions || {};\n    twgslOptions = {\n      ...WebGPUTintWASM._TWgslDefaultOptions,\n      ...twgslOptions\n    };\n    if (twgslOptions.twgsl) {\n      this._twgsl = twgslOptions.twgsl;\n      return Promise.resolve();\n    }\n    if (twgslOptions.jsPath && twgslOptions.wasmPath) {\n      if (IsWindowObjectExist()) {\n        await Tools.LoadScriptAsync(twgslOptions.jsPath);\n      } else {\n        importScripts(twgslOptions.jsPath);\n      }\n    }\n    if (self.twgsl) {\n      this._twgsl = await self.twgsl(twgslOptions.wasmPath);\n      return Promise.resolve();\n    }\n    return Promise.reject(\"twgsl is not available.\");\n  }\n  convertSpirV2WGSL(code) {\n    const ccode = this._twgsl.convertSpirV2WGSL(code);\n    if (WebGPUTintWASM.ShowWGSLShaderCode) {\n      console.log(ccode);\n      console.log(\"***********************************************\");\n    }\n    return ccode;\n  }\n}\n// Default twgsl options.\nWebGPUTintWASM._TWgslDefaultOptions = {\n  jsPath: \"https://preview.babylonjs.com/twgsl/twgsl.js\",\n  wasmPath: \"https://preview.babylonjs.com/twgsl/twgsl.wasm\"\n};\nWebGPUTintWASM.ShowWGSLShaderCode = false;","map":{"version":3,"mappings":"AAAA,SAASA,mBAAmB,QAAQ,6BAA2B;AAC/D,SAASC,KAAK,QAAQ,qBAAmB;AAsBzC;AACA,OAAM,MAAOC,cAAc;EAA3BC;IASY,WAAM,GAAQ,IAAI;EAsC9B;EApCW,MAAMC,SAAS,CAACC,YAA2B;IAC9CA,YAAY,GAAGA,YAAY,IAAI,EAAE;IACjCA,YAAY,GAAG;MACX,GAAGH,cAAc,CAACI,oBAAoB;MACtC,GAAGD;KACN;IAED,IAAIA,YAAY,CAACE,KAAK,EAAE;MACpB,IAAI,CAACC,MAAM,GAAGH,YAAY,CAACE,KAAK;MAChC,OAAOE,OAAO,CAACC,OAAO,EAAE;;IAG5B,IAAIL,YAAY,CAACM,MAAM,IAAIN,YAAY,CAACO,QAAQ,EAAE;MAC9C,IAAIZ,mBAAmB,EAAE,EAAE;QACvB,MAAMC,KAAK,CAACY,eAAe,CAACR,YAAY,CAACM,MAAM,CAAC;OACnD,MAAM;QACHG,aAAa,CAACT,YAAY,CAACM,MAAM,CAAC;;;IAI1C,IAAKI,IAAY,CAACR,KAAK,EAAE;MACrB,IAAI,CAACC,MAAM,GAAG,MAAOO,IAAY,CAACR,KAAK,CAACF,YAAa,CAACO,QAAQ,CAAC;MAC/D,OAAOH,OAAO,CAACC,OAAO,EAAE;;IAG5B,OAAOD,OAAO,CAACO,MAAM,CAAC,yBAAyB,CAAC;EACpD;EAEOC,iBAAiB,CAACC,IAAiB;IACtC,MAAMC,KAAK,GAAG,IAAI,CAACX,MAAM,CAACS,iBAAiB,CAACC,IAAI,CAAC;IACjD,IAAIhB,cAAc,CAACkB,kBAAkB,EAAE;MACnCC,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;MAClBE,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;;IAElE,OAAOH,KAAK;EAChB;;AA7CA;AACwBjB,mCAAoB,GAAiB;EACzDS,MAAM,EAAE,8CAA8C;EACtDC,QAAQ,EAAE;CACb;AAEaV,iCAAkB,GAAG,KAAK","names":["IsWindowObjectExist","Tools","WebGPUTintWASM","constructor","initTwgsl","twgslOptions","_TWgslDefaultOptions","twgsl","_twgsl","Promise","resolve","jsPath","wasmPath","LoadScriptAsync","importScripts","self","reject","convertSpirV2WGSL","code","ccode","ShowWGSLShaderCode","console","log"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/WebGPU/webgpuTintWASM.ts"],"sourcesContent":["import { IsWindowObjectExist } from \"../../Misc/domManagement\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n\r\ndeclare function importScripts(...urls: string[]): void;\r\n\r\n/**\r\n * Options to load the associated Twgsl library\r\n */\r\nexport interface TwgslOptions {\r\n    /**\r\n     * Defines an existing instance of Twgsl (useful in modules who do not access the global instance).\r\n     */\r\n    twgsl?: any;\r\n    /**\r\n     * Defines the URL of the twgsl JS File.\r\n     */\r\n    jsPath?: string;\r\n    /**\r\n     * Defines the URL of the twgsl WASM File.\r\n     */\r\n    wasmPath?: string;\r\n}\r\n\r\n/** @internal */\r\nexport class WebGPUTintWASM {\r\n    // Default twgsl options.\r\n    private static readonly _TWgslDefaultOptions: TwgslOptions = {\r\n        jsPath: \"https://preview.babylonjs.com/twgsl/twgsl.js\",\r\n        wasmPath: \"https://preview.babylonjs.com/twgsl/twgsl.wasm\",\r\n    };\r\n\r\n    public static ShowWGSLShaderCode = false;\r\n\r\n    private _twgsl: any = null;\r\n\r\n    public async initTwgsl(twgslOptions?: TwgslOptions): Promise<void> {\r\n        twgslOptions = twgslOptions || {};\r\n        twgslOptions = {\r\n            ...WebGPUTintWASM._TWgslDefaultOptions,\r\n            ...twgslOptions,\r\n        };\r\n\r\n        if (twgslOptions.twgsl) {\r\n            this._twgsl = twgslOptions.twgsl;\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (twgslOptions.jsPath && twgslOptions.wasmPath) {\r\n            if (IsWindowObjectExist()) {\r\n                await Tools.LoadScriptAsync(twgslOptions.jsPath);\r\n            } else {\r\n                importScripts(twgslOptions.jsPath);\r\n            }\r\n        }\r\n\r\n        if ((self as any).twgsl) {\r\n            this._twgsl = await (self as any).twgsl(twgslOptions!.wasmPath);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"twgsl is not available.\");\r\n    }\r\n\r\n    public convertSpirV2WGSL(code: Uint32Array): string {\r\n        const ccode = this._twgsl.convertSpirV2WGSL(code);\r\n        if (WebGPUTintWASM.ShowWGSLShaderCode) {\r\n            console.log(ccode);\r\n            console.log(\"***********************************************\");\r\n        }\r\n        return ccode;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}