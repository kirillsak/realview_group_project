{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/** @internal */\nexport class ShaderCodeCursor {\n  constructor() {\n    this._lines = [];\n  }\n  get currentLine() {\n    return this._lines[this.lineIndex];\n  }\n  get canRead() {\n    return this.lineIndex < this._lines.length - 1;\n  }\n  set lines(value) {\n    this._lines.length = 0;\n    for (const line of value) {\n      // Prevent removing line break in macros.\n      if (line[0] === \"#\") {\n        this._lines.push(line);\n        continue;\n      }\n      // Do not split single line comments\n      if (line.trim().startsWith(\"//\")) {\n        this._lines.push(line);\n        continue;\n      }\n      const split = line.split(\";\");\n      for (let index = 0; index < split.length; index++) {\n        let subLine = split[index];\n        subLine = subLine.trim();\n        if (!subLine) {\n          continue;\n        }\n        this._lines.push(subLine + (index !== split.length - 1 ? \";\" : \"\"));\n      }\n    }\n  }\n}","map":{"version":3,"mappings":";AAAA;AACA,OAAM,MAAOA,gBAAgB;EAA7BC;IACY,WAAM,GAAa,EAAE;EAyCjC;EAtCI,IAAIC,WAAW;IACX,OAAO,IAAI,CAACC,MAAM,CAAC,IAAI,CAACC,SAAS,CAAC;EACtC;EAEA,IAAIC,OAAO;IACP,OAAO,IAAI,CAACD,SAAS,GAAG,IAAI,CAACD,MAAM,CAACG,MAAM,GAAG,CAAC;EAClD;EAEA,IAAIC,KAAK,CAACC,KAAe;IACrB,IAAI,CAACL,MAAM,CAACG,MAAM,GAAG,CAAC;IAEtB,KAAK,MAAMG,IAAI,IAAID,KAAK,EAAE;MACtB;MACA,IAAIC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACjB,IAAI,CAACN,MAAM,CAACO,IAAI,CAACD,IAAI,CAAC;QACtB;;MAGJ;MACA,IAAIA,IAAI,CAACE,IAAI,EAAE,CAACC,UAAU,CAAC,IAAI,CAAC,EAAE;QAC9B,IAAI,CAACT,MAAM,CAACO,IAAI,CAACD,IAAI,CAAC;QACtB;;MAGJ,MAAMI,KAAK,GAAGJ,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC;MAE7B,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,CAACP,MAAM,EAAEQ,KAAK,EAAE,EAAE;QAC/C,IAAIC,OAAO,GAAGF,KAAK,CAACC,KAAK,CAAC;QAC1BC,OAAO,GAAGA,OAAO,CAACJ,IAAI,EAAE;QAExB,IAAI,CAACI,OAAO,EAAE;UACV;;QAGJ,IAAI,CAACZ,MAAM,CAACO,IAAI,CAACK,OAAO,IAAID,KAAK,KAAKD,KAAK,CAACP,MAAM,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;;;EAG/E","names":["ShaderCodeCursor","constructor","currentLine","_lines","lineIndex","canRead","length","lines","value","line","push","trim","startsWith","split","index","subLine"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/Processors/shaderCodeCursor.ts"],"sourcesContent":["/** @internal */\r\nexport class ShaderCodeCursor {\r\n    private _lines: string[] = [];\r\n    lineIndex: number;\r\n\r\n    get currentLine(): string {\r\n        return this._lines[this.lineIndex];\r\n    }\r\n\r\n    get canRead(): boolean {\r\n        return this.lineIndex < this._lines.length - 1;\r\n    }\r\n\r\n    set lines(value: string[]) {\r\n        this._lines.length = 0;\r\n\r\n        for (const line of value) {\r\n            // Prevent removing line break in macros.\r\n            if (line[0] === \"#\") {\r\n                this._lines.push(line);\r\n                continue;\r\n            }\r\n\r\n            // Do not split single line comments\r\n            if (line.trim().startsWith(\"//\")) {\r\n                this._lines.push(line);\r\n                continue;\r\n            }\r\n\r\n            const split = line.split(\";\");\r\n\r\n            for (let index = 0; index < split.length; index++) {\r\n                let subLine = split[index];\r\n                subLine = subLine.trim();\r\n\r\n                if (!subLine) {\r\n                    continue;\r\n                }\r\n\r\n                this._lines.push(subLine + (index !== split.length - 1 ? \";\" : \"\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}