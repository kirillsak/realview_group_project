{"ast":null,"code":"import { Vector3 } from \"../Maths/math.vector.js\";\n/**\n * Holds the data for the raycast result\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\nexport class PhysicsRaycastResult {\n  constructor() {\n    this._hasHit = false;\n    this._hitDistance = 0;\n    this._hitNormalWorld = Vector3.Zero();\n    this._hitPointWorld = Vector3.Zero();\n    this._rayFromWorld = Vector3.Zero();\n    this._rayToWorld = Vector3.Zero();\n  }\n  /**\n   * Gets if there was a hit\n   */\n  get hasHit() {\n    return this._hasHit;\n  }\n  /**\n   * Gets the distance from the hit\n   */\n  get hitDistance() {\n    return this._hitDistance;\n  }\n  /**\n   * Gets the hit normal/direction in the world\n   */\n  get hitNormalWorld() {\n    return this._hitNormalWorld;\n  }\n  /**\n   * Gets the hit point in the world\n   */\n  get hitPointWorld() {\n    return this._hitPointWorld;\n  }\n  /**\n   * Gets the ray \"start point\" of the ray in the world\n   */\n  get rayFromWorld() {\n    return this._rayFromWorld;\n  }\n  /**\n   * Gets the ray \"end point\" of the ray in the world\n   */\n  get rayToWorld() {\n    return this._rayToWorld;\n  }\n  /**\n   * Sets the hit data (normal & point in world space)\n   * @param hitNormalWorld defines the normal in world space\n   * @param hitPointWorld defines the point in world space\n   */\n  setHitData(hitNormalWorld, hitPointWorld) {\n    this._hasHit = true;\n    this._hitNormalWorld = new Vector3(hitNormalWorld.x, hitNormalWorld.y, hitNormalWorld.z);\n    this._hitPointWorld = new Vector3(hitPointWorld.x, hitPointWorld.y, hitPointWorld.z);\n  }\n  /**\n   * Sets the distance from the start point to the hit point\n   * @param distance\n   */\n  setHitDistance(distance) {\n    this._hitDistance = distance;\n  }\n  /**\n   * Calculates the distance manually\n   */\n  calculateHitDistance() {\n    this._hitDistance = Vector3.Distance(this._rayFromWorld, this._hitPointWorld);\n  }\n  /**\n   * Resets all the values to default\n   * @param from The from point on world space\n   * @param to The to point on world space\n   */\n  reset(from = Vector3.Zero(), to = Vector3.Zero()) {\n    this._rayFromWorld = from;\n    this._rayToWorld = to;\n    this._hasHit = false;\n    this._hitDistance = 0;\n    this._hitNormalWorld = Vector3.Zero();\n    this._hitPointWorld = Vector3.Zero();\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAO,QAAQ,yBAAuB;AAE/C;;;;AAIA,OAAM,MAAOC,oBAAoB;EAAjCC;IACY,YAAO,GAAY,KAAK;IAExB,iBAAY,GAAW,CAAC;IACxB,oBAAe,GAAYF,OAAO,CAACG,IAAI,EAAE;IACzC,mBAAc,GAAYH,OAAO,CAACG,IAAI,EAAE;IACxC,kBAAa,GAAYH,OAAO,CAACG,IAAI,EAAE;IACvC,gBAAW,GAAYH,OAAO,CAACG,IAAI,EAAE;EAqFjD;EAnFI;;;EAGA,IAAIC,MAAM;IACN,OAAO,IAAI,CAACC,OAAO;EACvB;EAEA;;;EAGA,IAAIC,WAAW;IACX,OAAO,IAAI,CAACC,YAAY;EAC5B;EAEA;;;EAGA,IAAIC,cAAc;IACd,OAAO,IAAI,CAACC,eAAe;EAC/B;EAEA;;;EAGA,IAAIC,aAAa;IACb,OAAO,IAAI,CAACC,cAAc;EAC9B;EAEA;;;EAGA,IAAIC,YAAY;IACZ,OAAO,IAAI,CAACC,aAAa;EAC7B;EAEA;;;EAGA,IAAIC,UAAU;IACV,OAAO,IAAI,CAACC,WAAW;EAC3B;EAEA;;;;;EAKOC,UAAU,CAACR,cAAoB,EAAEE,aAAmB;IACvD,IAAI,CAACL,OAAO,GAAG,IAAI;IACnB,IAAI,CAACI,eAAe,GAAG,IAAIT,OAAO,CAACQ,cAAc,CAACS,CAAC,EAAET,cAAc,CAACU,CAAC,EAAEV,cAAc,CAACW,CAAC,CAAC;IACxF,IAAI,CAACR,cAAc,GAAG,IAAIX,OAAO,CAACU,aAAa,CAACO,CAAC,EAAEP,aAAa,CAACQ,CAAC,EAAER,aAAa,CAACS,CAAC,CAAC;EACxF;EAEA;;;;EAIOC,cAAc,CAACC,QAAgB;IAClC,IAAI,CAACd,YAAY,GAAGc,QAAQ;EAChC;EAEA;;;EAGOC,oBAAoB;IACvB,IAAI,CAACf,YAAY,GAAGP,OAAO,CAACuB,QAAQ,CAAC,IAAI,CAACV,aAAa,EAAE,IAAI,CAACF,cAAc,CAAC;EACjF;EAEA;;;;;EAKOa,KAAK,CAACC,OAAgBzB,OAAO,CAACG,IAAI,EAAE,EAAEuB,KAAc1B,OAAO,CAACG,IAAI,EAAE;IACrE,IAAI,CAACU,aAAa,GAAGY,IAAI;IACzB,IAAI,CAACV,WAAW,GAAGW,EAAE;IAErB,IAAI,CAACrB,OAAO,GAAG,KAAK;IACpB,IAAI,CAACE,YAAY,GAAG,CAAC;IAErB,IAAI,CAACE,eAAe,GAAGT,OAAO,CAACG,IAAI,EAAE;IACrC,IAAI,CAACQ,cAAc,GAAGX,OAAO,CAACG,IAAI,EAAE;EACxC","names":["Vector3","PhysicsRaycastResult","constructor","Zero","hasHit","_hasHit","hitDistance","_hitDistance","hitNormalWorld","_hitNormalWorld","hitPointWorld","_hitPointWorld","rayFromWorld","_rayFromWorld","rayToWorld","_rayToWorld","setHitData","x","y","z","setHitDistance","distance","calculateHitDistance","Distance","reset","from","to"],"sourceRoot":"","sources":["../../../../lts/core/generated/Physics/physicsRaycastResult.ts"],"sourcesContent":["import { Vector3 } from \"../Maths/math.vector\";\r\n\r\n/**\r\n * Holds the data for the raycast result\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class PhysicsRaycastResult {\r\n    private _hasHit: boolean = false;\r\n\r\n    private _hitDistance: number = 0;\r\n    private _hitNormalWorld: Vector3 = Vector3.Zero();\r\n    private _hitPointWorld: Vector3 = Vector3.Zero();\r\n    private _rayFromWorld: Vector3 = Vector3.Zero();\r\n    private _rayToWorld: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Gets if there was a hit\r\n     */\r\n    get hasHit(): boolean {\r\n        return this._hasHit;\r\n    }\r\n\r\n    /**\r\n     * Gets the distance from the hit\r\n     */\r\n    get hitDistance(): number {\r\n        return this._hitDistance;\r\n    }\r\n\r\n    /**\r\n     * Gets the hit normal/direction in the world\r\n     */\r\n    get hitNormalWorld(): Vector3 {\r\n        return this._hitNormalWorld;\r\n    }\r\n\r\n    /**\r\n     * Gets the hit point in the world\r\n     */\r\n    get hitPointWorld(): Vector3 {\r\n        return this._hitPointWorld;\r\n    }\r\n\r\n    /**\r\n     * Gets the ray \"start point\" of the ray in the world\r\n     */\r\n    get rayFromWorld(): Vector3 {\r\n        return this._rayFromWorld;\r\n    }\r\n\r\n    /**\r\n     * Gets the ray \"end point\" of the ray in the world\r\n     */\r\n    get rayToWorld(): Vector3 {\r\n        return this._rayToWorld;\r\n    }\r\n\r\n    /**\r\n     * Sets the hit data (normal & point in world space)\r\n     * @param hitNormalWorld defines the normal in world space\r\n     * @param hitPointWorld defines the point in world space\r\n     */\r\n    public setHitData(hitNormalWorld: IXYZ, hitPointWorld: IXYZ) {\r\n        this._hasHit = true;\r\n        this._hitNormalWorld = new Vector3(hitNormalWorld.x, hitNormalWorld.y, hitNormalWorld.z);\r\n        this._hitPointWorld = new Vector3(hitPointWorld.x, hitPointWorld.y, hitPointWorld.z);\r\n    }\r\n\r\n    /**\r\n     * Sets the distance from the start point to the hit point\r\n     * @param distance\r\n     */\r\n    public setHitDistance(distance: number) {\r\n        this._hitDistance = distance;\r\n    }\r\n\r\n    /**\r\n     * Calculates the distance manually\r\n     */\r\n    public calculateHitDistance() {\r\n        this._hitDistance = Vector3.Distance(this._rayFromWorld, this._hitPointWorld);\r\n    }\r\n\r\n    /**\r\n     * Resets all the values to default\r\n     * @param from The from point on world space\r\n     * @param to The to point on world space\r\n     */\r\n    public reset(from: Vector3 = Vector3.Zero(), to: Vector3 = Vector3.Zero()) {\r\n        this._rayFromWorld = from;\r\n        this._rayToWorld = to;\r\n\r\n        this._hasHit = false;\r\n        this._hitDistance = 0;\r\n\r\n        this._hitNormalWorld = Vector3.Zero();\r\n        this._hitPointWorld = Vector3.Zero();\r\n    }\r\n}\r\n\r\n/**\r\n * Interface for the size containing width and height\r\n */\r\ninterface IXYZ {\r\n    /**\r\n     * X\r\n     */\r\n    x: number;\r\n\r\n    /**\r\n     * Y\r\n     */\r\n    y: number;\r\n\r\n    /**\r\n     * Z\r\n     */\r\n    z: number;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}