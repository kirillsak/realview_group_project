{"ast":null,"code":"import { Vector2 } from \"../Maths/math.vector.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/stereoscopicInterlace.fragment.js\";\n/**\n * StereoscopicInterlacePostProcessI used to render stereo views from a rigged camera with support for alternate line interlacing\n */\nexport class StereoscopicInterlacePostProcessI extends PostProcess {\n  /**\n   * Initializes a StereoscopicInterlacePostProcessI\n   * @param name The name of the effect.\n   * @param rigCameras The rig cameras to be applied to the post process\n   * @param isStereoscopicHoriz If the rendered results are horizontal or vertical\n   * @param isStereoscopicInterlaced If the rendered results are alternate line interlaced\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   */\n  constructor(name, rigCameras, isStereoscopicHoriz, isStereoscopicInterlaced, samplingMode, engine, reusable) {\n    super(name, \"stereoscopicInterlace\", [\"stepSize\"], [\"camASampler\"], 1, rigCameras[1], samplingMode, engine, reusable, isStereoscopicInterlaced ? \"#define IS_STEREOSCOPIC_INTERLACED 1\" : isStereoscopicHoriz ? \"#define IS_STEREOSCOPIC_HORIZ 1\" : undefined);\n    this._passedProcess = rigCameras[0]._rigPostProcess;\n    this._stepSize = new Vector2(1 / this.width, 1 / this.height);\n    this.onSizeChangedObservable.add(() => {\n      this._stepSize = new Vector2(1 / this.width, 1 / this.height);\n    });\n    this.onApplyObservable.add(effect => {\n      effect.setTextureFromPostProcess(\"camASampler\", this._passedProcess);\n      effect.setFloat2(\"stepSize\", this._stepSize.x, this._stepSize.y);\n    });\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"StereoscopicInterlacePostProcessI\" string\n   */\n  getClassName() {\n    return \"StereoscopicInterlacePostProcessI\";\n  }\n}\n/**\n * StereoscopicInterlacePostProcess used to render stereo views from a rigged camera\n */\nexport class StereoscopicInterlacePostProcess extends PostProcess {\n  /**\n   * Initializes a StereoscopicInterlacePostProcess\n   * @param name The name of the effect.\n   * @param rigCameras The rig cameras to be applied to the post process\n   * @param isStereoscopicHoriz If the rendered results are horizontal or vertical\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   */\n  constructor(name, rigCameras, isStereoscopicHoriz, samplingMode, engine, reusable) {\n    super(name, \"stereoscopicInterlace\", [\"stepSize\"], [\"camASampler\"], 1, rigCameras[1], samplingMode, engine, reusable, isStereoscopicHoriz ? \"#define IS_STEREOSCOPIC_HORIZ 1\" : undefined);\n    this._passedProcess = rigCameras[0]._rigPostProcess;\n    this._stepSize = new Vector2(1 / this.width, 1 / this.height);\n    this.onSizeChangedObservable.add(() => {\n      this._stepSize = new Vector2(1 / this.width, 1 / this.height);\n    });\n    this.onApplyObservable.add(effect => {\n      effect.setTextureFromPostProcess(\"camASampler\", this._passedProcess);\n      effect.setFloat2(\"stepSize\", this._stepSize.x, this._stepSize.y);\n    });\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"StereoscopicInterlacePostProcess\" string\n   */\n  getClassName() {\n    return \"StereoscopicInterlacePostProcess\";\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,yBAAuB;AAG/C,SAASC,WAAW,QAAQ,kBAAgB;AAG5C,OAAO,8CAA4C;AAEnD;;;AAGA,OAAM,MAAOC,iCAAkC,SAAQD,WAAW;EAY9D;;;;;;;;;;EAUAE,YAAYC,IAAY,EAAEC,UAAoB,EAAEC,mBAA4B,EAAEC,wBAAiC,EAAEC,YAAqB,EAAEC,MAAe,EAAEC,QAAkB;IACvK,KAAK,CACDN,IAAI,EACJ,uBAAuB,EACvB,CAAC,UAAU,CAAC,EACZ,CAAC,aAAa,CAAC,EACf,CAAC,EACDC,UAAU,CAAC,CAAC,CAAC,EACbG,YAAY,EACZC,MAAM,EACNC,QAAQ,EACRH,wBAAwB,GAAG,sCAAsC,GAAGD,mBAAmB,GAAG,iCAAiC,GAAGK,SAAS,CAC1I;IAED,IAAI,CAACC,cAAc,GAAGP,UAAU,CAAC,CAAC,CAAC,CAACQ,eAAe;IACnD,IAAI,CAACC,SAAS,GAAG,IAAId,OAAO,CAAC,CAAC,GAAG,IAAI,CAACe,KAAK,EAAE,CAAC,GAAG,IAAI,CAACC,MAAM,CAAC;IAE7D,IAAI,CAACC,uBAAuB,CAACC,GAAG,CAAC,MAAK;MAClC,IAAI,CAACJ,SAAS,GAAG,IAAId,OAAO,CAAC,CAAC,GAAG,IAAI,CAACe,KAAK,EAAE,CAAC,GAAG,IAAI,CAACC,MAAM,CAAC;IACjE,CAAC,CAAC;IACF,IAAI,CAACG,iBAAiB,CAACD,GAAG,CAAEE,MAAc,IAAI;MAC1CA,MAAM,CAACC,yBAAyB,CAAC,aAAa,EAAE,IAAI,CAACT,cAAc,CAAC;MACpEQ,MAAM,CAACE,SAAS,CAAC,UAAU,EAAE,IAAI,CAACR,SAAS,CAACS,CAAC,EAAE,IAAI,CAACT,SAAS,CAACU,CAAC,CAAC;IACpE,CAAC,CAAC;EACN;EA1CA;;;;EAIOC,YAAY;IACf,OAAO,mCAAmC;EAC9C;;AAsCJ;;;AAGA,OAAM,MAAOC,gCAAiC,SAAQzB,WAAW;EAY7D;;;;;;;;;EASAE,YAAYC,IAAY,EAAEC,UAAoB,EAAEC,mBAA4B,EAAEE,YAAqB,EAAEC,MAAe,EAAEC,QAAkB;IACpI,KAAK,CACDN,IAAI,EACJ,uBAAuB,EACvB,CAAC,UAAU,CAAC,EACZ,CAAC,aAAa,CAAC,EACf,CAAC,EACDC,UAAU,CAAC,CAAC,CAAC,EACbG,YAAY,EACZC,MAAM,EACNC,QAAQ,EACRJ,mBAAmB,GAAG,iCAAiC,GAAGK,SAAS,CACtE;IAED,IAAI,CAACC,cAAc,GAAGP,UAAU,CAAC,CAAC,CAAC,CAACQ,eAAe;IACnD,IAAI,CAACC,SAAS,GAAG,IAAId,OAAO,CAAC,CAAC,GAAG,IAAI,CAACe,KAAK,EAAE,CAAC,GAAG,IAAI,CAACC,MAAM,CAAC;IAE7D,IAAI,CAACC,uBAAuB,CAACC,GAAG,CAAC,MAAK;MAClC,IAAI,CAACJ,SAAS,GAAG,IAAId,OAAO,CAAC,CAAC,GAAG,IAAI,CAACe,KAAK,EAAE,CAAC,GAAG,IAAI,CAACC,MAAM,CAAC;IACjE,CAAC,CAAC;IACF,IAAI,CAACG,iBAAiB,CAACD,GAAG,CAAEE,MAAc,IAAI;MAC1CA,MAAM,CAACC,yBAAyB,CAAC,aAAa,EAAE,IAAI,CAACT,cAAc,CAAC;MACpEQ,MAAM,CAACE,SAAS,CAAC,UAAU,EAAE,IAAI,CAACR,SAAS,CAACS,CAAC,EAAE,IAAI,CAACT,SAAS,CAACU,CAAC,CAAC;IACpE,CAAC,CAAC;EACN;EAzCA;;;;EAIOC,YAAY;IACf,OAAO,kCAAkC;EAC7C","names":["Vector2","PostProcess","StereoscopicInterlacePostProcessI","constructor","name","rigCameras","isStereoscopicHoriz","isStereoscopicInterlaced","samplingMode","engine","reusable","undefined","_passedProcess","_rigPostProcess","_stepSize","width","height","onSizeChangedObservable","add","onApplyObservable","effect","setTextureFromPostProcess","setFloat2","x","y","getClassName","StereoscopicInterlacePostProcess"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/stereoscopicInterlacePostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Vector2 } from \"../Maths/math.vector\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\n\r\nimport \"../Shaders/stereoscopicInterlace.fragment\";\r\n\r\n/**\r\n * StereoscopicInterlacePostProcessI used to render stereo views from a rigged camera with support for alternate line interlacing\r\n */\r\nexport class StereoscopicInterlacePostProcessI extends PostProcess {\r\n    private _stepSize: Vector2;\r\n    private _passedProcess: Nullable<PostProcess>;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"StereoscopicInterlacePostProcessI\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"StereoscopicInterlacePostProcessI\";\r\n    }\r\n\r\n    /**\r\n     * Initializes a StereoscopicInterlacePostProcessI\r\n     * @param name The name of the effect.\r\n     * @param rigCameras The rig cameras to be applied to the post process\r\n     * @param isStereoscopicHoriz If the rendered results are horizontal or vertical\r\n     * @param isStereoscopicInterlaced If the rendered results are alternate line interlaced\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     */\r\n    constructor(name: string, rigCameras: Camera[], isStereoscopicHoriz: boolean, isStereoscopicInterlaced: boolean, samplingMode?: number, engine?: Engine, reusable?: boolean) {\r\n        super(\r\n            name,\r\n            \"stereoscopicInterlace\",\r\n            [\"stepSize\"],\r\n            [\"camASampler\"],\r\n            1,\r\n            rigCameras[1],\r\n            samplingMode,\r\n            engine,\r\n            reusable,\r\n            isStereoscopicInterlaced ? \"#define IS_STEREOSCOPIC_INTERLACED 1\" : isStereoscopicHoriz ? \"#define IS_STEREOSCOPIC_HORIZ 1\" : undefined\r\n        );\r\n\r\n        this._passedProcess = rigCameras[0]._rigPostProcess;\r\n        this._stepSize = new Vector2(1 / this.width, 1 / this.height);\r\n\r\n        this.onSizeChangedObservable.add(() => {\r\n            this._stepSize = new Vector2(1 / this.width, 1 / this.height);\r\n        });\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setTextureFromPostProcess(\"camASampler\", this._passedProcess);\r\n            effect.setFloat2(\"stepSize\", this._stepSize.x, this._stepSize.y);\r\n        });\r\n    }\r\n}\r\n/**\r\n * StereoscopicInterlacePostProcess used to render stereo views from a rigged camera\r\n */\r\nexport class StereoscopicInterlacePostProcess extends PostProcess {\r\n    private _stepSize: Vector2;\r\n    private _passedProcess: Nullable<PostProcess>;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"StereoscopicInterlacePostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"StereoscopicInterlacePostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Initializes a StereoscopicInterlacePostProcess\r\n     * @param name The name of the effect.\r\n     * @param rigCameras The rig cameras to be applied to the post process\r\n     * @param isStereoscopicHoriz If the rendered results are horizontal or vertical\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     */\r\n    constructor(name: string, rigCameras: Camera[], isStereoscopicHoriz: boolean, samplingMode?: number, engine?: Engine, reusable?: boolean) {\r\n        super(\r\n            name,\r\n            \"stereoscopicInterlace\",\r\n            [\"stepSize\"],\r\n            [\"camASampler\"],\r\n            1,\r\n            rigCameras[1],\r\n            samplingMode,\r\n            engine,\r\n            reusable,\r\n            isStereoscopicHoriz ? \"#define IS_STEREOSCOPIC_HORIZ 1\" : undefined\r\n        );\r\n\r\n        this._passedProcess = rigCameras[0]._rigPostProcess;\r\n        this._stepSize = new Vector2(1 / this.width, 1 / this.height);\r\n\r\n        this.onSizeChangedObservable.add(() => {\r\n            this._stepSize = new Vector2(1 / this.width, 1 / this.height);\r\n        });\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setTextureFromPostProcess(\"camASampler\", this._passedProcess);\r\n            effect.setFloat2(\"stepSize\", this._stepSize.x, this._stepSize.y);\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}