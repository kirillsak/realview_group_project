{"ast":null,"code":"import { Logger } from \"./logger.js\";\nimport { GetClass } from \"./typeStore.js\";\n/**\n * Class used to enable instantiation of objects by class name\n */\nexport class InstantiationTools {\n  /**\n   * Tries to instantiate a new object from a given class name\n   * @param className defines the class name to instantiate\n   * @returns the new object or null if the system was not able to do the instantiation\n   */\n  static Instantiate(className) {\n    if (this.RegisteredExternalClasses && this.RegisteredExternalClasses[className]) {\n      return this.RegisteredExternalClasses[className];\n    }\n    const internalClass = GetClass(className);\n    if (internalClass) {\n      return internalClass;\n    }\n    Logger.Warn(className + \" not found, you may have missed an import.\");\n    const arr = className.split(\".\");\n    let fn = window || this;\n    for (let i = 0, len = arr.length; i < len; i++) {\n      fn = fn[arr[i]];\n    }\n    if (typeof fn !== \"function\") {\n      return null;\n    }\n    return fn;\n  }\n}\n/**\n * Use this object to register external classes like custom textures or material\n * to allow the loaders to instantiate them\n */\nInstantiationTools.RegisteredExternalClasses = {};","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAQ,aAAW;AAClC,SAASC,QAAQ,QAAQ,gBAAc;AAEvC;;;AAGA,OAAM,MAAOC,kBAAkB;EAO3B;;;;;EAKO,OAAOC,WAAW,CAACC,SAAiB;IACvC,IAAI,IAAI,CAACC,yBAAyB,IAAI,IAAI,CAACA,yBAAyB,CAACD,SAAS,CAAC,EAAE;MAC7E,OAAO,IAAI,CAACC,yBAAyB,CAACD,SAAS,CAAC;;IAGpD,MAAME,aAAa,GAAGL,QAAQ,CAACG,SAAS,CAAC;IACzC,IAAIE,aAAa,EAAE;MACf,OAAOA,aAAa;;IAGxBN,MAAM,CAACO,IAAI,CAACH,SAAS,GAAG,4CAA4C,CAAC;IAErE,MAAMI,GAAG,GAAGJ,SAAS,CAACK,KAAK,CAAC,GAAG,CAAC;IAEhC,IAAIC,EAAE,GAAQC,MAAM,IAAI,IAAI;IAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGL,GAAG,CAACM,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC5CF,EAAE,GAAGA,EAAE,CAACF,GAAG,CAACI,CAAC,CAAC,CAAC;;IAGnB,IAAI,OAAOF,EAAE,KAAK,UAAU,EAAE;MAC1B,OAAO,IAAI;;IAGf,OAAOA,EAAE;EACb;;AAnCA;;;;AAIcR,4CAAyB,GAA8B,EAAE","names":["Logger","GetClass","InstantiationTools","Instantiate","className","RegisteredExternalClasses","internalClass","Warn","arr","split","fn","window","i","len","length"],"sourceRoot":"","sources":["../../../../lts/core/generated/Misc/instantiationTools.ts"],"sourcesContent":["import { Logger } from \"./logger\";\r\nimport { GetClass } from \"./typeStore\";\r\n\r\n/**\r\n * Class used to enable instantiation of objects by class name\r\n */\r\nexport class InstantiationTools {\r\n    /**\r\n     * Use this object to register external classes like custom textures or material\r\n     * to allow the loaders to instantiate them\r\n     */\r\n    public static RegisteredExternalClasses: { [key: string]: Object } = {};\r\n\r\n    /**\r\n     * Tries to instantiate a new object from a given class name\r\n     * @param className defines the class name to instantiate\r\n     * @returns the new object or null if the system was not able to do the instantiation\r\n     */\r\n    public static Instantiate(className: string): any {\r\n        if (this.RegisteredExternalClasses && this.RegisteredExternalClasses[className]) {\r\n            return this.RegisteredExternalClasses[className];\r\n        }\r\n\r\n        const internalClass = GetClass(className);\r\n        if (internalClass) {\r\n            return internalClass;\r\n        }\r\n\r\n        Logger.Warn(className + \" not found, you may have missed an import.\");\r\n\r\n        const arr = className.split(\".\");\r\n\r\n        let fn: any = window || this;\r\n        for (let i = 0, len = arr.length; i < len; i++) {\r\n            fn = fn[arr[i]];\r\n        }\r\n\r\n        if (typeof fn !== \"function\") {\r\n            return null;\r\n        }\r\n\r\n        return fn;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}