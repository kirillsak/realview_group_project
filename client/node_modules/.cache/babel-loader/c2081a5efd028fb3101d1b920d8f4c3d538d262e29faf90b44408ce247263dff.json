{"ast":null,"code":"import { GLTFLoaderExtension, GLTFLoader, GLTFLoaderBase } from \"./glTFLoader.js\";\nimport { GLTFUtils } from \"./glTFLoaderUtils.js\";\nimport { EComponentType } from \"./glTFLoaderInterfaces.js\";\nconst BinaryExtensionBufferName = \"binary_glTF\";\n/**\n * @internal\n * @deprecated\n */\nexport class GLTFBinaryExtension extends GLTFLoaderExtension {\n  constructor() {\n    super(\"KHR_binary_glTF\");\n  }\n  loadRuntimeAsync(scene, data, rootUrl, onSuccess) {\n    const extensionsUsed = data.json.extensionsUsed;\n    if (!extensionsUsed || extensionsUsed.indexOf(this.name) === -1 || !data.bin) {\n      return false;\n    }\n    this._bin = data.bin;\n    onSuccess(GLTFLoaderBase.CreateRuntime(data.json, scene, rootUrl));\n    return true;\n  }\n  loadBufferAsync(gltfRuntime, id, onSuccess, onError) {\n    if (gltfRuntime.extensionsUsed.indexOf(this.name) === -1) {\n      return false;\n    }\n    if (id !== BinaryExtensionBufferName) {\n      return false;\n    }\n    this._bin.readAsync(0, this._bin.byteLength).then(onSuccess, error => onError(error.message));\n    return true;\n  }\n  loadTextureBufferAsync(gltfRuntime, id, onSuccess) {\n    const texture = gltfRuntime.textures[id];\n    const source = gltfRuntime.images[texture.source];\n    if (!source.extensions || !(this.name in source.extensions)) {\n      return false;\n    }\n    const sourceExt = source.extensions[this.name];\n    const bufferView = gltfRuntime.bufferViews[sourceExt.bufferView];\n    const buffer = GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, 0, bufferView.byteLength, EComponentType.UNSIGNED_BYTE);\n    onSuccess(buffer);\n    return true;\n  }\n  loadShaderStringAsync(gltfRuntime, id, onSuccess) {\n    const shader = gltfRuntime.shaders[id];\n    if (!shader.extensions || !(this.name in shader.extensions)) {\n      return false;\n    }\n    const binaryExtensionShader = shader.extensions[this.name];\n    const bufferView = gltfRuntime.bufferViews[binaryExtensionShader.bufferView];\n    const shaderBytes = GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, 0, bufferView.byteLength, EComponentType.UNSIGNED_BYTE);\n    setTimeout(() => {\n      const shaderString = GLTFUtils.DecodeBufferToText(shaderBytes);\n      onSuccess(shaderString);\n    });\n    return true;\n  }\n}\nGLTFLoader.RegisterExtension(new GLTFBinaryExtension());","map":{"version":3,"mappings":"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","names":["GLTFLoaderExtension","GLTFLoader","GLTFLoaderBase","GLTFUtils","EComponentType","BinaryExtensionBufferName","GLTFBinaryExtension","constructor","loadRuntimeAsync","scene","data","rootUrl","onSuccess","extensionsUsed","json","indexOf","name","bin","_bin","CreateRuntime","loadBufferAsync","gltfRuntime","id","onError","readAsync","byteLength","then","error","message","loadTextureBufferAsync","texture","textures","source","images","extensions","sourceExt","bufferView","bufferViews","buffer","GetBufferFromBufferView","UNSIGNED_BYTE","loadShaderStringAsync","shader","shaders","binaryExtensionShader","shaderBytes","setTimeout","shaderString","DecodeBufferToText","RegisterExtension"],"sourceRoot":"","sources":["../../../../../lts/loaders/generated/glTF/1.0/glTFBinaryExtension.ts"],"sourcesContent":["import { GLTFLoaderExtension, GLTFLoader, GLTFLoaderBase } from \"./glTFLoader\";\r\nimport { GLTFUtils } from \"./glTFLoaderUtils\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { IGLTFLoaderData } from \"../glTFFileLoader\";\r\nimport type { IGLTFRuntime, IGLTFTexture, IGLTFImage, IGLTFBufferView, IGLTFShader } from \"./glTFLoaderInterfaces\";\r\nimport { EComponentType } from \"./glTFLoaderInterfaces\";\r\n\r\nimport type { IDataBuffer } from \"core/Misc/dataReader\";\r\n\r\nconst BinaryExtensionBufferName = \"binary_glTF\";\r\n\r\ninterface IGLTFBinaryExtensionShader {\r\n    bufferView: string;\r\n}\r\n\r\ninterface IGLTFBinaryExtensionImage {\r\n    bufferView: string;\r\n    mimeType: string;\r\n    height: number;\r\n    width: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @deprecated\r\n */\r\nexport class GLTFBinaryExtension extends GLTFLoaderExtension {\r\n    private _bin: IDataBuffer;\r\n\r\n    public constructor() {\r\n        super(\"KHR_binary_glTF\");\r\n    }\r\n\r\n    public loadRuntimeAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onSuccess: (gltfRuntime: IGLTFRuntime) => void): boolean {\r\n        const extensionsUsed = (<any>data.json).extensionsUsed;\r\n        if (!extensionsUsed || extensionsUsed.indexOf(this.name) === -1 || !data.bin) {\r\n            return false;\r\n        }\r\n\r\n        this._bin = data.bin;\r\n        onSuccess(GLTFLoaderBase.CreateRuntime(data.json, scene, rootUrl));\r\n        return true;\r\n    }\r\n\r\n    public loadBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: ArrayBufferView) => void, onError: (message: string) => void): boolean {\r\n        if (gltfRuntime.extensionsUsed.indexOf(this.name) === -1) {\r\n            return false;\r\n        }\r\n\r\n        if (id !== BinaryExtensionBufferName) {\r\n            return false;\r\n        }\r\n\r\n        this._bin.readAsync(0, this._bin.byteLength).then(onSuccess, (error) => onError(error.message));\r\n        return true;\r\n    }\r\n\r\n    public loadTextureBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: ArrayBufferView) => void): boolean {\r\n        const texture: IGLTFTexture = gltfRuntime.textures[id];\r\n        const source: IGLTFImage = gltfRuntime.images[texture.source];\r\n        if (!source.extensions || !(this.name in source.extensions)) {\r\n            return false;\r\n        }\r\n\r\n        const sourceExt: IGLTFBinaryExtensionImage = source.extensions[this.name];\r\n        const bufferView: IGLTFBufferView = gltfRuntime.bufferViews[sourceExt.bufferView];\r\n        const buffer = GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, 0, bufferView.byteLength, EComponentType.UNSIGNED_BYTE);\r\n        onSuccess(buffer);\r\n        return true;\r\n    }\r\n\r\n    public loadShaderStringAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (shaderString: string) => void): boolean {\r\n        const shader: IGLTFShader = gltfRuntime.shaders[id];\r\n        if (!shader.extensions || !(this.name in shader.extensions)) {\r\n            return false;\r\n        }\r\n\r\n        const binaryExtensionShader: IGLTFBinaryExtensionShader = shader.extensions[this.name];\r\n        const bufferView: IGLTFBufferView = gltfRuntime.bufferViews[binaryExtensionShader.bufferView];\r\n        const shaderBytes = GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, 0, bufferView.byteLength, EComponentType.UNSIGNED_BYTE);\r\n\r\n        setTimeout(() => {\r\n            const shaderString = GLTFUtils.DecodeBufferToText(shaderBytes);\r\n            onSuccess(shaderString);\r\n        });\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(new GLTFBinaryExtension());\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}