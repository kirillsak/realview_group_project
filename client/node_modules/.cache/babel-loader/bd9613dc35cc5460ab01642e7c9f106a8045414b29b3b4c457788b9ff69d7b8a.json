{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { Vector2 } from \"../Maths/math.vector.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/chromaticAberration.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The ChromaticAberrationPostProcess separates the rgb channels in an image to produce chromatic distortion around the edges of the screen\n */\nexport class ChromaticAberrationPostProcess extends PostProcess {\n  /**\n   * Creates a new instance ChromaticAberrationPostProcess\n   * @param name The name of the effect.\n   * @param screenWidth The width of the screen to apply the effect on.\n   * @param screenHeight The height of the screen to apply the effect on.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType Type of textures used when performing the post process. (default: 0)\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n   */\n  constructor(name, screenWidth, screenHeight, options, camera, samplingMode, engine, reusable, textureType = 0, blockCompilation = false) {\n    super(name, \"chromaticAberration\", [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"], [], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\n    /**\n     * The amount of separation of rgb channels (default: 30)\n     */\n    this.aberrationAmount = 30;\n    /**\n     * The amount the effect will increase for pixels closer to the edge of the screen. (default: 0)\n     */\n    this.radialIntensity = 0;\n    /**\n     * The normalized direction in which the rgb channels should be separated. If set to 0,0 radial direction will be used. (default: Vector2(0.707,0.707))\n     */\n    this.direction = new Vector2(0.707, 0.707);\n    /**\n     * The center position where the radialIntensity should be around. [0.5,0.5 is center of screen, 1,1 is top right corner] (default: Vector2(0.5 ,0.5))\n     */\n    this.centerPosition = new Vector2(0.5, 0.5);\n    this.screenWidth = screenWidth;\n    this.screenHeight = screenHeight;\n    this.onApplyObservable.add(effect => {\n      effect.setFloat(\"chromatic_aberration\", this.aberrationAmount);\n      effect.setFloat(\"screen_width\", screenWidth);\n      effect.setFloat(\"screen_height\", screenHeight);\n      effect.setFloat(\"radialIntensity\", this.radialIntensity);\n      effect.setFloat2(\"direction\", this.direction.x, this.direction.y);\n      effect.setFloat2(\"centerPosition\", this.centerPosition.x, this.centerPosition.y);\n    });\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"ChromaticAberrationPostProcess\" string\n   */\n  getClassName() {\n    return \"ChromaticAberrationPostProcess\";\n  }\n  /**\n   * @internal\n   */\n  static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(() => {\n      return new ChromaticAberrationPostProcess(parsedPostProcess.name, parsedPostProcess.screenWidth, parsedPostProcess.screenHeight, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType, false);\n    }, parsedPostProcess, scene, rootUrl);\n  }\n}\n__decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"aberrationAmount\", void 0);\n__decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"radialIntensity\", void 0);\n__decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"direction\", void 0);\n__decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"centerPosition\", void 0);\n__decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"screenWidth\", void 0);\n__decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"screenHeight\", void 0);\nRegisterClass(\"BABYLON.ChromaticAberrationPostProcess\", ChromaticAberrationPostProcess);","map":{"version":3,"mappings":"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","names":["Vector2","PostProcess","RegisterClass","serialize","SerializationHelper","ChromaticAberrationPostProcess","constructor","name","screenWidth","screenHeight","options","camera","samplingMode","engine","reusable","textureType","undefined","blockCompilation","onApplyObservable","add","effect","setFloat","aberrationAmount","radialIntensity","setFloat2","direction","x","y","centerPosition","getClassName","_Parse","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","getEngine","__decorate"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/chromaticAberrationPostProcess.ts"],"sourcesContent":["import { Vector2 } from \"../Maths/math.vector\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/chromaticAberration.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize, SerializationHelper } from \"../Misc/decorators\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The ChromaticAberrationPostProcess separates the rgb channels in an image to produce chromatic distortion around the edges of the screen\r\n */\r\nexport class ChromaticAberrationPostProcess extends PostProcess {\r\n    /**\r\n     * The amount of separation of rgb channels (default: 30)\r\n     */\r\n    @serialize()\r\n    aberrationAmount = 30;\r\n\r\n    /**\r\n     * The amount the effect will increase for pixels closer to the edge of the screen. (default: 0)\r\n     */\r\n    @serialize()\r\n    radialIntensity = 0;\r\n\r\n    /**\r\n     * The normalized direction in which the rgb channels should be separated. If set to 0,0 radial direction will be used. (default: Vector2(0.707,0.707))\r\n     */\r\n    @serialize()\r\n    direction = new Vector2(0.707, 0.707);\r\n\r\n    /**\r\n     * The center position where the radialIntensity should be around. [0.5,0.5 is center of screen, 1,1 is top right corner] (default: Vector2(0.5 ,0.5))\r\n     */\r\n    @serialize()\r\n    centerPosition = new Vector2(0.5, 0.5);\r\n\r\n    /** The width of the screen to apply the effect on */\r\n    @serialize()\r\n    screenWidth: number;\r\n\r\n    /** The height of the screen to apply the effect on */\r\n    @serialize()\r\n    screenHeight: number;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"ChromaticAberrationPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"ChromaticAberrationPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance ChromaticAberrationPostProcess\r\n     * @param name The name of the effect.\r\n     * @param screenWidth The width of the screen to apply the effect on.\r\n     * @param screenHeight The height of the screen to apply the effect on.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        screenWidth: number,\r\n        screenHeight: number,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(\r\n            name,\r\n            \"chromaticAberration\",\r\n            [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"],\r\n            [],\r\n            options,\r\n            camera,\r\n            samplingMode,\r\n            engine,\r\n            reusable,\r\n            null,\r\n            textureType,\r\n            undefined,\r\n            null,\r\n            blockCompilation\r\n        );\r\n\r\n        this.screenWidth = screenWidth;\r\n        this.screenHeight = screenHeight;\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setFloat(\"chromatic_aberration\", this.aberrationAmount);\r\n            effect.setFloat(\"screen_width\", screenWidth);\r\n            effect.setFloat(\"screen_height\", screenHeight);\r\n            effect.setFloat(\"radialIntensity\", this.radialIntensity);\r\n            effect.setFloat2(\"direction\", this.direction.x, this.direction.y);\r\n            effect.setFloat2(\"centerPosition\", this.centerPosition.x, this.centerPosition.y);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<ChromaticAberrationPostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new ChromaticAberrationPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.screenWidth,\r\n                    parsedPostProcess.screenHeight,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable,\r\n                    parsedPostProcess.textureType,\r\n                    false\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ChromaticAberrationPostProcess\", ChromaticAberrationPostProcess);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}