{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../tslib.es6.js\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { serialize, serializeAsImageProcessingConfiguration, expandToProperty } from \"../../Misc/decorators.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { SmartArray } from \"../../Misc/smartArray.js\";\nimport { GetEnvironmentBRDFTexture } from \"../../Misc/brdfTextureTools.js\";\nimport { Scene, ScenePerformancePriority } from \"../../scene.js\";\nimport { Vector4 } from \"../../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../../Buffers/buffer.js\";\nimport { PBRBRDFConfiguration } from \"./pbrBRDFConfiguration.js\";\nimport { PrePassConfiguration } from \"../prePassConfiguration.js\";\nimport { Color3, TmpColors } from \"../../Maths/math.color.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\nimport { ImageProcessingConfiguration } from \"../../Materials/imageProcessingConfiguration.js\";\nimport { Material } from \"../../Materials/material.js\";\nimport { MaterialPluginEvent } from \"../materialPluginEvent.js\";\nimport { MaterialDefines } from \"../../Materials/materialDefines.js\";\nimport { PushMaterial } from \"../../Materials/pushMaterial.js\";\nimport { MaterialHelper } from \"../../Materials/materialHelper.js\";\nimport { Texture } from \"../../Materials/Textures/texture.js\";\nimport { MaterialFlags } from \"../materialFlags.js\";\nimport \"../../Materials/Textures/baseTexture.polynomial.js\";\nimport \"../../Shaders/pbr.fragment.js\";\nimport \"../../Shaders/pbr.vertex.js\";\nimport { EffectFallbacks } from \"../effectFallbacks.js\";\nimport { PBRClearCoatConfiguration } from \"./pbrClearCoatConfiguration.js\";\nimport { PBRIridescenceConfiguration } from \"./pbrIridescenceConfiguration.js\";\nimport { PBRAnisotropicConfiguration } from \"./pbrAnisotropicConfiguration.js\";\nimport { PBRSheenConfiguration } from \"./pbrSheenConfiguration.js\";\nimport { PBRSubSurfaceConfiguration } from \"./pbrSubSurfaceConfiguration.js\";\nimport { DetailMapConfiguration } from \"../material.detailMapConfiguration.js\";\nimport { addClipPlaneUniforms, bindClipPlane } from \"../clipPlaneMaterialHelper.js\";\nconst onCreatedEffectParameters = {\n  effect: null,\n  subMesh: null\n};\n/**\n * Manages the defines for the PBR Material.\n * @internal\n */\nexport class PBRMaterialDefines extends MaterialDefines {\n  /**\n   * Initializes the PBR Material defines.\n   * @param externalProperties The external properties\n   */\n  constructor(externalProperties) {\n    super(externalProperties);\n    this.PBR = true;\n    this.NUM_SAMPLES = \"0\";\n    this.REALTIME_FILTERING = false;\n    this.MAINUV1 = false;\n    this.MAINUV2 = false;\n    this.MAINUV3 = false;\n    this.MAINUV4 = false;\n    this.MAINUV5 = false;\n    this.MAINUV6 = false;\n    this.UV1 = false;\n    this.UV2 = false;\n    this.UV3 = false;\n    this.UV4 = false;\n    this.UV5 = false;\n    this.UV6 = false;\n    this.ALBEDO = false;\n    this.GAMMAALBEDO = false;\n    this.ALBEDODIRECTUV = 0;\n    this.VERTEXCOLOR = false;\n    this.BAKED_VERTEX_ANIMATION_TEXTURE = false;\n    this.AMBIENT = false;\n    this.AMBIENTDIRECTUV = 0;\n    this.AMBIENTINGRAYSCALE = false;\n    this.OPACITY = false;\n    this.VERTEXALPHA = false;\n    this.OPACITYDIRECTUV = 0;\n    this.OPACITYRGB = false;\n    this.ALPHATEST = false;\n    this.DEPTHPREPASS = false;\n    this.ALPHABLEND = false;\n    this.ALPHAFROMALBEDO = false;\n    this.ALPHATESTVALUE = \"0.5\";\n    this.SPECULAROVERALPHA = false;\n    this.RADIANCEOVERALPHA = false;\n    this.ALPHAFRESNEL = false;\n    this.LINEARALPHAFRESNEL = false;\n    this.PREMULTIPLYALPHA = false;\n    this.EMISSIVE = false;\n    this.EMISSIVEDIRECTUV = 0;\n    this.GAMMAEMISSIVE = false;\n    this.REFLECTIVITY = false;\n    this.REFLECTIVITY_GAMMA = false;\n    this.REFLECTIVITYDIRECTUV = 0;\n    this.SPECULARTERM = false;\n    this.MICROSURFACEFROMREFLECTIVITYMAP = false;\n    this.MICROSURFACEAUTOMATIC = false;\n    this.LODBASEDMICROSFURACE = false;\n    this.MICROSURFACEMAP = false;\n    this.MICROSURFACEMAPDIRECTUV = 0;\n    this.METALLICWORKFLOW = false;\n    this.ROUGHNESSSTOREINMETALMAPALPHA = false;\n    this.ROUGHNESSSTOREINMETALMAPGREEN = false;\n    this.METALLNESSSTOREINMETALMAPBLUE = false;\n    this.AOSTOREINMETALMAPRED = false;\n    this.METALLIC_REFLECTANCE = false;\n    this.METALLIC_REFLECTANCE_GAMMA = false;\n    this.METALLIC_REFLECTANCEDIRECTUV = 0;\n    this.METALLIC_REFLECTANCE_USE_ALPHA_ONLY = false;\n    this.REFLECTANCE = false;\n    this.REFLECTANCE_GAMMA = false;\n    this.REFLECTANCEDIRECTUV = 0;\n    this.ENVIRONMENTBRDF = false;\n    this.ENVIRONMENTBRDF_RGBD = false;\n    this.NORMAL = false;\n    this.TANGENT = false;\n    this.BUMP = false;\n    this.BUMPDIRECTUV = 0;\n    this.OBJECTSPACE_NORMALMAP = false;\n    this.PARALLAX = false;\n    this.PARALLAXOCCLUSION = false;\n    this.NORMALXYSCALE = true;\n    this.LIGHTMAP = false;\n    this.LIGHTMAPDIRECTUV = 0;\n    this.USELIGHTMAPASSHADOWMAP = false;\n    this.GAMMALIGHTMAP = false;\n    this.RGBDLIGHTMAP = false;\n    this.REFLECTION = false;\n    this.REFLECTIONMAP_3D = false;\n    this.REFLECTIONMAP_SPHERICAL = false;\n    this.REFLECTIONMAP_PLANAR = false;\n    this.REFLECTIONMAP_CUBIC = false;\n    this.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\n    this.REFLECTIONMAP_PROJECTION = false;\n    this.REFLECTIONMAP_SKYBOX = false;\n    this.REFLECTIONMAP_EXPLICIT = false;\n    this.REFLECTIONMAP_EQUIRECTANGULAR = false;\n    this.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n    this.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n    this.INVERTCUBICMAP = false;\n    this.USESPHERICALFROMREFLECTIONMAP = false;\n    this.USEIRRADIANCEMAP = false;\n    this.USESPHERICALINVERTEX = false;\n    this.REFLECTIONMAP_OPPOSITEZ = false;\n    this.LODINREFLECTIONALPHA = false;\n    this.GAMMAREFLECTION = false;\n    this.RGBDREFLECTION = false;\n    this.LINEARSPECULARREFLECTION = false;\n    this.RADIANCEOCCLUSION = false;\n    this.HORIZONOCCLUSION = false;\n    this.INSTANCES = false;\n    this.THIN_INSTANCES = false;\n    this.INSTANCESCOLOR = false;\n    this.PREPASS = false;\n    this.PREPASS_IRRADIANCE = false;\n    this.PREPASS_IRRADIANCE_INDEX = -1;\n    this.PREPASS_ALBEDO_SQRT = false;\n    this.PREPASS_ALBEDO_SQRT_INDEX = -1;\n    this.PREPASS_DEPTH = false;\n    this.PREPASS_DEPTH_INDEX = -1;\n    this.PREPASS_NORMAL = false;\n    this.PREPASS_NORMAL_INDEX = -1;\n    this.PREPASS_POSITION = false;\n    this.PREPASS_POSITION_INDEX = -1;\n    this.PREPASS_VELOCITY = false;\n    this.PREPASS_VELOCITY_INDEX = -1;\n    this.PREPASS_REFLECTIVITY = false;\n    this.PREPASS_REFLECTIVITY_INDEX = -1;\n    this.SCENE_MRT_COUNT = 0;\n    this.NUM_BONE_INFLUENCERS = 0;\n    this.BonesPerMesh = 0;\n    this.BONETEXTURE = false;\n    this.BONES_VELOCITY_ENABLED = false;\n    this.NONUNIFORMSCALING = false;\n    this.MORPHTARGETS = false;\n    this.MORPHTARGETS_NORMAL = false;\n    this.MORPHTARGETS_TANGENT = false;\n    this.MORPHTARGETS_UV = false;\n    this.NUM_MORPH_INFLUENCERS = 0;\n    this.MORPHTARGETS_TEXTURE = false;\n    this.IMAGEPROCESSING = false;\n    this.VIGNETTE = false;\n    this.VIGNETTEBLENDMODEMULTIPLY = false;\n    this.VIGNETTEBLENDMODEOPAQUE = false;\n    this.TONEMAPPING = false;\n    this.TONEMAPPING_ACES = false;\n    this.CONTRAST = false;\n    this.COLORCURVES = false;\n    this.COLORGRADING = false;\n    this.COLORGRADING3D = false;\n    this.SAMPLER3DGREENDEPTH = false;\n    this.SAMPLER3DBGRMAP = false;\n    this.DITHER = false;\n    this.IMAGEPROCESSINGPOSTPROCESS = false;\n    this.SKIPFINALCOLORCLAMP = false;\n    this.EXPOSURE = false;\n    this.MULTIVIEW = false;\n    this.ORDER_INDEPENDENT_TRANSPARENCY = false;\n    this.ORDER_INDEPENDENT_TRANSPARENCY_16BITS = false;\n    this.USEPHYSICALLIGHTFALLOFF = false;\n    this.USEGLTFLIGHTFALLOFF = false;\n    this.TWOSIDEDLIGHTING = false;\n    this.SHADOWFLOAT = false;\n    this.CLIPPLANE = false;\n    this.CLIPPLANE2 = false;\n    this.CLIPPLANE3 = false;\n    this.CLIPPLANE4 = false;\n    this.CLIPPLANE5 = false;\n    this.CLIPPLANE6 = false;\n    this.POINTSIZE = false;\n    this.FOG = false;\n    this.LOGARITHMICDEPTH = false;\n    this.CAMERA_ORTHOGRAPHIC = false;\n    this.CAMERA_PERSPECTIVE = false;\n    this.FORCENORMALFORWARD = false;\n    this.SPECULARAA = false;\n    this.UNLIT = false;\n    this.DEBUGMODE = 0;\n    this.rebuild();\n  }\n  /**\n   * Resets the PBR Material defines.\n   */\n  reset() {\n    super.reset();\n    this.ALPHATESTVALUE = \"0.5\";\n    this.PBR = true;\n    this.NORMALXYSCALE = true;\n  }\n}\n/**\n * The Physically based material base class of BJS.\n *\n * This offers the main features of a standard PBR material.\n * For more information, please refer to the documentation :\n * https://doc.babylonjs.com/features/featuresDeepDive/materials/using/introToPBR\n */\nexport class PBRBaseMaterial extends PushMaterial {\n  /**\n   * Instantiates a new PBRMaterial instance.\n   *\n   * @param name The material name\n   * @param scene The scene the material will be use in.\n   */\n  constructor(name, scene) {\n    super(name, scene);\n    /**\n     * Intensity of the direct lights e.g. the four lights available in your scene.\n     * This impacts both the direct diffuse and specular highlights.\n     * @internal\n     */\n    this._directIntensity = 1.0;\n    /**\n     * Intensity of the emissive part of the material.\n     * This helps controlling the emissive effect without modifying the emissive color.\n     * @internal\n     */\n    this._emissiveIntensity = 1.0;\n    /**\n     * Intensity of the environment e.g. how much the environment will light the object\n     * either through harmonics for rough material or through the reflection for shiny ones.\n     * @internal\n     */\n    this._environmentIntensity = 1.0;\n    /**\n     * This is a special control allowing the reduction of the specular highlights coming from the\n     * four lights of the scene. Those highlights may not be needed in full environment lighting.\n     * @internal\n     */\n    this._specularIntensity = 1.0;\n    /**\n     * This stores the direct, emissive, environment, and specular light intensities into a Vector4.\n     */\n    this._lightingInfos = new Vector4(this._directIntensity, this._emissiveIntensity, this._environmentIntensity, this._specularIntensity);\n    /**\n     * Debug Control allowing disabling the bump map on this material.\n     * @internal\n     */\n    this._disableBumpMap = false;\n    /**\n     * AKA Diffuse Texture in standard nomenclature.\n     * @internal\n     */\n    this._albedoTexture = null;\n    /**\n     * AKA Occlusion Texture in other nomenclature.\n     * @internal\n     */\n    this._ambientTexture = null;\n    /**\n     * AKA Occlusion Texture Intensity in other nomenclature.\n     * @internal\n     */\n    this._ambientTextureStrength = 1.0;\n    /**\n     * Defines how much the AO map is occluding the analytical lights (point spot...).\n     * 1 means it completely occludes it\n     * 0 mean it has no impact\n     * @internal\n     */\n    this._ambientTextureImpactOnAnalyticalLights = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS;\n    /**\n     * Stores the alpha values in a texture.\n     * @internal\n     */\n    this._opacityTexture = null;\n    /**\n     * Stores the reflection values in a texture.\n     * @internal\n     */\n    this._reflectionTexture = null;\n    /**\n     * Stores the emissive values in a texture.\n     * @internal\n     */\n    this._emissiveTexture = null;\n    /**\n     * AKA Specular texture in other nomenclature.\n     * @internal\n     */\n    this._reflectivityTexture = null;\n    /**\n     * Used to switch from specular/glossiness to metallic/roughness workflow.\n     * @internal\n     */\n    this._metallicTexture = null;\n    /**\n     * Specifies the metallic scalar of the metallic/roughness workflow.\n     * Can also be used to scale the metalness values of the metallic texture.\n     * @internal\n     */\n    this._metallic = null;\n    /**\n     * Specifies the roughness scalar of the metallic/roughness workflow.\n     * Can also be used to scale the roughness values of the metallic texture.\n     * @internal\n     */\n    this._roughness = null;\n    /**\n     * In metallic workflow, specifies an F0 factor to help configuring the material F0.\n     * By default the indexOfrefraction is used to compute F0;\n     *\n     * This is used as a factor against the default reflectance at normal incidence to tweak it.\n     *\n     * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor;\n     * F90 = metallicReflectanceColor;\n     * @internal\n     */\n    this._metallicF0Factor = 1;\n    /**\n     * In metallic workflow, specifies an F90 color to help configuring the material F90.\n     * By default the F90 is always 1;\n     *\n     * Please note that this factor is also used as a factor against the default reflectance at normal incidence.\n     *\n     * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor\n     * F90 = metallicReflectanceColor;\n     * @internal\n     */\n    this._metallicReflectanceColor = Color3.White();\n    /**\n     * Specifies that only the A channel from _metallicReflectanceTexture should be used.\n     * If false, both RGB and A channels will be used\n     * @internal\n     */\n    this._useOnlyMetallicFromMetallicReflectanceTexture = false;\n    /**\n     * Defines to store metallicReflectanceColor in RGB and metallicF0Factor in A\n     * This is multiply against the scalar values defined in the material.\n     * @internal\n     */\n    this._metallicReflectanceTexture = null;\n    /**\n     * Defines to store reflectanceColor in RGB\n     * This is multiplied against the scalar values defined in the material.\n     * If both _reflectanceTexture and _metallicReflectanceTexture textures are provided and _useOnlyMetallicFromMetallicReflectanceTexture\n     * is false, _metallicReflectanceTexture takes precedence and _reflectanceTexture is not used\n     * @internal\n     */\n    this._reflectanceTexture = null;\n    /**\n     * Used to enable roughness/glossiness fetch from a separate channel depending on the current mode.\n     * Gray Scale represents roughness in metallic mode and glossiness in specular mode.\n     * @internal\n     */\n    this._microSurfaceTexture = null;\n    /**\n     * Stores surface normal data used to displace a mesh in a texture.\n     * @internal\n     */\n    this._bumpTexture = null;\n    /**\n     * Stores the pre-calculated light information of a mesh in a texture.\n     * @internal\n     */\n    this._lightmapTexture = null;\n    /**\n     * The color of a material in ambient lighting.\n     * @internal\n     */\n    this._ambientColor = new Color3(0, 0, 0);\n    /**\n     * AKA Diffuse Color in other nomenclature.\n     * @internal\n     */\n    this._albedoColor = new Color3(1, 1, 1);\n    /**\n     * AKA Specular Color in other nomenclature.\n     * @internal\n     */\n    this._reflectivityColor = new Color3(1, 1, 1);\n    /**\n     * The color applied when light is reflected from a material.\n     * @internal\n     */\n    this._reflectionColor = new Color3(1, 1, 1);\n    /**\n     * The color applied when light is emitted from a material.\n     * @internal\n     */\n    this._emissiveColor = new Color3(0, 0, 0);\n    /**\n     * AKA Glossiness in other nomenclature.\n     * @internal\n     */\n    this._microSurface = 0.9;\n    /**\n     * Specifies that the material will use the light map as a show map.\n     * @internal\n     */\n    this._useLightmapAsShadowmap = false;\n    /**\n     * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\n     * makes the reflect vector face the model (under horizon).\n     * @internal\n     */\n    this._useHorizonOcclusion = true;\n    /**\n     * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\n     * too much the area relying on ambient texture to define their ambient occlusion.\n     * @internal\n     */\n    this._useRadianceOcclusion = true;\n    /**\n     * Specifies that the alpha is coming form the albedo channel alpha channel for alpha blending.\n     * @internal\n     */\n    this._useAlphaFromAlbedoTexture = false;\n    /**\n     * Specifies that the material will keeps the specular highlights over a transparent surface (only the most luminous ones).\n     * A car glass is a good example of that. When sun reflects on it you can not see what is behind.\n     * @internal\n     */\n    this._useSpecularOverAlpha = true;\n    /**\n     * Specifies if the reflectivity texture contains the glossiness information in its alpha channel.\n     * @internal\n     */\n    this._useMicroSurfaceFromReflectivityMapAlpha = false;\n    /**\n     * Specifies if the metallic texture contains the roughness information in its alpha channel.\n     * @internal\n     */\n    this._useRoughnessFromMetallicTextureAlpha = true;\n    /**\n     * Specifies if the metallic texture contains the roughness information in its green channel.\n     * @internal\n     */\n    this._useRoughnessFromMetallicTextureGreen = false;\n    /**\n     * Specifies if the metallic texture contains the metallness information in its blue channel.\n     * @internal\n     */\n    this._useMetallnessFromMetallicTextureBlue = false;\n    /**\n     * Specifies if the metallic texture contains the ambient occlusion information in its red channel.\n     * @internal\n     */\n    this._useAmbientOcclusionFromMetallicTextureRed = false;\n    /**\n     * Specifies if the ambient texture contains the ambient occlusion information in its red channel only.\n     * @internal\n     */\n    this._useAmbientInGrayScale = false;\n    /**\n     * In case the reflectivity map does not contain the microsurface information in its alpha channel,\n     * The material will try to infer what glossiness each pixel should be.\n     * @internal\n     */\n    this._useAutoMicroSurfaceFromReflectivityMap = false;\n    /**\n     * Defines the  falloff type used in this material.\n     * It by default is Physical.\n     * @internal\n     */\n    this._lightFalloff = PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL;\n    /**\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\n     * A car glass is a good example of that. When the street lights reflects on it you can not see what is behind.\n     * @internal\n     */\n    this._useRadianceOverAlpha = true;\n    /**\n     * Allows using an object space normal map (instead of tangent space).\n     * @internal\n     */\n    this._useObjectSpaceNormalMap = false;\n    /**\n     * Allows using the bump map in parallax mode.\n     * @internal\n     */\n    this._useParallax = false;\n    /**\n     * Allows using the bump map in parallax occlusion mode.\n     * @internal\n     */\n    this._useParallaxOcclusion = false;\n    /**\n     * Controls the scale bias of the parallax mode.\n     * @internal\n     */\n    this._parallaxScaleBias = 0.05;\n    /**\n     * If sets to true, disables all the lights affecting the material.\n     * @internal\n     */\n    this._disableLighting = false;\n    /**\n     * Number of Simultaneous lights allowed on the material.\n     * @internal\n     */\n    this._maxSimultaneousLights = 4;\n    /**\n     * If sets to true, x component of normal map value will be inverted (x = 1.0 - x).\n     * @internal\n     */\n    this._invertNormalMapX = false;\n    /**\n     * If sets to true, y component of normal map value will be inverted (y = 1.0 - y).\n     * @internal\n     */\n    this._invertNormalMapY = false;\n    /**\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\n     * @internal\n     */\n    this._twoSidedLighting = false;\n    /**\n     * Defines the alpha limits in alpha test mode.\n     * @internal\n     */\n    this._alphaCutOff = 0.4;\n    /**\n     * Enforces alpha test in opaque or blend mode in order to improve the performances of some situations.\n     * @internal\n     */\n    this._forceAlphaTest = false;\n    /**\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\n     * And/Or occlude the blended part. (alpha is converted to gamma to compute the fresnel)\n     * @internal\n     */\n    this._useAlphaFresnel = false;\n    /**\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\n     * And/Or occlude the blended part. (alpha stays linear to compute the fresnel)\n     * @internal\n     */\n    this._useLinearAlphaFresnel = false;\n    /**\n     * Specifies the environment BRDF texture used to compute the scale and offset roughness values\n     * from cos theta and roughness:\n     * http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\n     * @internal\n     */\n    this._environmentBRDFTexture = null;\n    /**\n     * Force the shader to compute irradiance in the fragment shader in order to take bump in account.\n     * @internal\n     */\n    this._forceIrradianceInFragment = false;\n    this._realTimeFiltering = false;\n    this._realTimeFilteringQuality = 8;\n    /**\n     * Force normal to face away from face.\n     * @internal\n     */\n    this._forceNormalForward = false;\n    /**\n     * Enables specular anti aliasing in the PBR shader.\n     * It will both interacts on the Geometry for analytical and IBL lighting.\n     * It also prefilter the roughness map based on the bump values.\n     * @internal\n     */\n    this._enableSpecularAntiAliasing = false;\n    /**\n     * Keep track of the image processing observer to allow dispose and replace.\n     */\n    this._imageProcessingObserver = null;\n    /**\n     * Stores the available render targets.\n     */\n    this._renderTargets = new SmartArray(16);\n    /**\n     * Sets the global ambient color for the material used in lighting calculations.\n     */\n    this._globalAmbientColor = new Color3(0, 0, 0);\n    /**\n     * Enables the use of logarithmic depth buffers, which is good for wide depth buffers.\n     */\n    this._useLogarithmicDepth = false;\n    /**\n     * If set to true, no lighting calculations will be applied.\n     */\n    this._unlit = false;\n    this._debugMode = 0;\n    /**\n     * @internal\n     * This is reserved for the inspector.\n     * Defines the material debug mode.\n     * It helps seeing only some components of the material while troubleshooting.\n     */\n    this.debugMode = 0;\n    /**\n     * @internal\n     * This is reserved for the inspector.\n     * Specify from where on screen the debug mode should start.\n     * The value goes from -1 (full screen) to 1 (not visible)\n     * It helps with side by side comparison against the final render\n     * This defaults to -1\n     */\n    this._debugLimit = -1;\n    /**\n     * @internal\n     * This is reserved for the inspector.\n     * As the default viewing range might not be enough (if the ambient is really small for instance)\n     * You can use the factor to better multiply the final value.\n     */\n    this._debugFactor = 1;\n    this._cacheHasRenderTargetTextures = false;\n    this.brdf = new PBRBRDFConfiguration(this);\n    this.clearCoat = new PBRClearCoatConfiguration(this);\n    this.iridescence = new PBRIridescenceConfiguration(this);\n    this.anisotropy = new PBRAnisotropicConfiguration(this);\n    this.sheen = new PBRSheenConfiguration(this);\n    this.subSurface = new PBRSubSurfaceConfiguration(this);\n    this.detailMap = new DetailMapConfiguration(this);\n    // Setup the default processing configuration to the scene.\n    this._attachImageProcessingConfiguration(null);\n    this.getRenderTargetTextures = () => {\n      this._renderTargets.reset();\n      if (MaterialFlags.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\n        this._renderTargets.push(this._reflectionTexture);\n      }\n      this._eventInfo.renderTargets = this._renderTargets;\n      this._callbackPluginEventFillRenderTargetTextures(this._eventInfo);\n      return this._renderTargets;\n    };\n    this._environmentBRDFTexture = GetEnvironmentBRDFTexture(this.getScene());\n    this.prePassConfiguration = new PrePassConfiguration();\n  }\n  /**\n   * Enables realtime filtering on the texture.\n   */\n  get realTimeFiltering() {\n    return this._realTimeFiltering;\n  }\n  set realTimeFiltering(b) {\n    this._realTimeFiltering = b;\n    this.markAsDirty(1);\n  }\n  /**\n   * Quality switch for realtime filtering\n   */\n  get realTimeFilteringQuality() {\n    return this._realTimeFilteringQuality;\n  }\n  set realTimeFilteringQuality(n) {\n    this._realTimeFilteringQuality = n;\n    this.markAsDirty(1);\n  }\n  /**\n   * Can this material render to several textures at once\n   */\n  get canRenderToMRT() {\n    return true;\n  }\n  /**\n   * Attaches a new image processing configuration to the PBR Material.\n   * @param configuration\n   */\n  _attachImageProcessingConfiguration(configuration) {\n    if (configuration === this._imageProcessingConfiguration) {\n      return;\n    }\n    // Detaches observer.\n    if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n      this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n    }\n    // Pick the scene configuration if needed.\n    if (!configuration) {\n      this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\n    } else {\n      this._imageProcessingConfiguration = configuration;\n    }\n    // Attaches observer.\n    if (this._imageProcessingConfiguration) {\n      this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\n        this._markAllSubMeshesAsImageProcessingDirty();\n      });\n    }\n  }\n  /**\n   * Gets a boolean indicating that current material needs to register RTT\n   */\n  get hasRenderTargetTextures() {\n    if (MaterialFlags.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\n      return true;\n    }\n    return this._cacheHasRenderTargetTextures;\n  }\n  /**\n   * Can this material render to prepass\n   */\n  get isPrePassCapable() {\n    return !this.disableDepthWrite;\n  }\n  /**\n   * Gets the name of the material class.\n   */\n  getClassName() {\n    return \"PBRBaseMaterial\";\n  }\n  /**\n   * Enabled the use of logarithmic depth buffers, which is good for wide depth buffers.\n   */\n  get useLogarithmicDepth() {\n    return this._useLogarithmicDepth;\n  }\n  /**\n   * Enabled the use of logarithmic depth buffers, which is good for wide depth buffers.\n   */\n  set useLogarithmicDepth(value) {\n    this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;\n  }\n  /**\n   * Returns true if alpha blending should be disabled.\n   */\n  get _disableAlphaBlending() {\n    var _a;\n    return this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_OPAQUE || this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST || ((_a = this.subSurface) === null || _a === void 0 ? void 0 : _a.disableAlphaBlending);\n  }\n  /**\n   * Specifies whether or not this material should be rendered in alpha blend mode.\n   */\n  needAlphaBlending() {\n    if (this._disableAlphaBlending) {\n      return false;\n    }\n    return this.alpha < 1.0 || this._opacityTexture != null || this._shouldUseAlphaFromAlbedoTexture();\n  }\n  /**\n   * Specifies whether or not this material should be rendered in alpha test mode.\n   */\n  needAlphaTesting() {\n    var _a;\n    if (this._forceAlphaTest) {\n      return true;\n    }\n    if ((_a = this.subSurface) === null || _a === void 0 ? void 0 : _a.disableAlphaBlending) {\n      return false;\n    }\n    return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST);\n  }\n  /**\n   * Specifies whether or not the alpha value of the albedo texture should be used for alpha blending.\n   */\n  _shouldUseAlphaFromAlbedoTexture() {\n    return this._albedoTexture != null && this._albedoTexture.hasAlpha && this._useAlphaFromAlbedoTexture && this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE;\n  }\n  /**\n   * Specifies whether or not there is a usable alpha channel for transparency.\n   */\n  _hasAlphaChannel() {\n    return this._albedoTexture != null && this._albedoTexture.hasAlpha || this._opacityTexture != null;\n  }\n  /**\n   * Gets the texture used for the alpha test.\n   */\n  getAlphaTestTexture() {\n    return this._albedoTexture;\n  }\n  /**\n   * Specifies that the submesh is ready to be used.\n   * @param mesh - BJS mesh.\n   * @param subMesh - A submesh of the BJS mesh.  Used to check if it is ready.\n   * @param useInstances - Specifies that instances should be used.\n   * @returns - boolean indicating that the submesh is ready or not.\n   */\n  isReadyForSubMesh(mesh, subMesh, useInstances) {\n    if (!this._uniformBufferLayoutBuilt) {\n      this.buildUniformLayout();\n    }\n    if (subMesh.effect && this.isFrozen) {\n      if (subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\n        return true;\n      }\n    }\n    if (!subMesh.materialDefines) {\n      this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\n      subMesh.materialDefines = new PBRMaterialDefines(this._eventInfo.defineNames);\n    }\n    const defines = subMesh.materialDefines;\n    if (this._isReadyForSubMesh(subMesh)) {\n      return true;\n    }\n    const scene = this.getScene();\n    const engine = scene.getEngine();\n    if (defines._areTexturesDirty) {\n      this._eventInfo.hasRenderTargetTextures = false;\n      this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\n      this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\n      if (scene.texturesEnabled) {\n        if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n          if (!this._albedoTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n        if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n          if (!this._ambientTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n        if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n          if (!this._opacityTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n        const reflectionTexture = this._getReflectionTexture();\n        if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n          if (!reflectionTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n          if (reflectionTexture.irradianceTexture && !reflectionTexture.irradianceTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n        if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n          if (!this._lightmapTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n        if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n          if (!this._emissiveTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n        if (MaterialFlags.SpecularTextureEnabled) {\n          if (this._metallicTexture) {\n            if (!this._metallicTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          } else if (this._reflectivityTexture) {\n            if (!this._reflectivityTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          }\n          if (this._metallicReflectanceTexture) {\n            if (!this._metallicReflectanceTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          }\n          if (this._reflectanceTexture) {\n            if (!this._reflectanceTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          }\n          if (this._microSurfaceTexture) {\n            if (!this._microSurfaceTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          }\n        }\n        if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n          // Bump texture cannot be not blocking.\n          if (!this._bumpTexture.isReady()) {\n            return false;\n          }\n        }\n        if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\n          // This is blocking.\n          if (!this._environmentBRDFTexture.isReady()) {\n            return false;\n          }\n        }\n      }\n    }\n    this._eventInfo.isReadyForSubMesh = true;\n    this._eventInfo.defines = defines;\n    this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\n    if (!this._eventInfo.isReadyForSubMesh) {\n      return false;\n    }\n    if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n      if (!this._imageProcessingConfiguration.isReady()) {\n        return false;\n      }\n    }\n    if (!engine.getCaps().standardDerivatives && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n      mesh.createNormals(true);\n      Logger.Warn(\"PBRMaterial: Normals have been created for the mesh: \" + mesh.name);\n    }\n    const previousEffect = subMesh.effect;\n    const lightDisposed = defines._areLightsDisposed;\n    let effect = this._prepareEffect(mesh, defines, this.onCompiled, this.onError, useInstances, null, subMesh.getRenderingMesh().hasThinInstances);\n    let forceWasNotReadyPreviously = false;\n    if (effect) {\n      if (this._onEffectCreatedObservable) {\n        onCreatedEffectParameters.effect = effect;\n        onCreatedEffectParameters.subMesh = subMesh;\n        this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n      }\n      // Use previous effect while new one is compiling\n      if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\n        effect = previousEffect;\n        defines.markAsUnprocessed();\n        forceWasNotReadyPreviously = this.isFrozen;\n        if (lightDisposed) {\n          // re register in case it takes more than one frame.\n          defines._areLightsDisposed = true;\n          return false;\n        }\n      } else {\n        scene.resetCachedMaterial();\n        subMesh.setEffect(effect, defines, this._materialContext);\n      }\n    }\n    if (!subMesh.effect || !subMesh.effect.isReady()) {\n      return false;\n    }\n    defines._renderId = scene.getRenderId();\n    subMesh.effect._wasPreviouslyReady = forceWasNotReadyPreviously ? false : true;\n    subMesh.effect._wasPreviouslyUsingInstances = !!useInstances;\n    if (scene.performancePriority !== ScenePerformancePriority.BackwardCompatible) {\n      this.checkReadyOnlyOnce = true;\n    }\n    return true;\n  }\n  /**\n   * Specifies if the material uses metallic roughness workflow.\n   * @returns boolean specifying if the material uses metallic roughness workflow.\n   */\n  isMetallicWorkflow() {\n    if (this._metallic != null || this._roughness != null || this._metallicTexture) {\n      return true;\n    }\n    return false;\n  }\n  _prepareEffect(mesh, defines, onCompiled = null, onError = null, useInstances = null, useClipPlane = null, useThinInstances) {\n    this._prepareDefines(mesh, defines, useInstances, useClipPlane, useThinInstances);\n    if (!defines.isDirty) {\n      return null;\n    }\n    defines.markAsProcessed();\n    const scene = this.getScene();\n    const engine = scene.getEngine();\n    // Fallbacks\n    const fallbacks = new EffectFallbacks();\n    let fallbackRank = 0;\n    if (defines.USESPHERICALINVERTEX) {\n      fallbacks.addFallback(fallbackRank++, \"USESPHERICALINVERTEX\");\n    }\n    if (defines.FOG) {\n      fallbacks.addFallback(fallbackRank, \"FOG\");\n    }\n    if (defines.SPECULARAA) {\n      fallbacks.addFallback(fallbackRank, \"SPECULARAA\");\n    }\n    if (defines.POINTSIZE) {\n      fallbacks.addFallback(fallbackRank, \"POINTSIZE\");\n    }\n    if (defines.LOGARITHMICDEPTH) {\n      fallbacks.addFallback(fallbackRank, \"LOGARITHMICDEPTH\");\n    }\n    if (defines.PARALLAX) {\n      fallbacks.addFallback(fallbackRank, \"PARALLAX\");\n    }\n    if (defines.PARALLAXOCCLUSION) {\n      fallbacks.addFallback(fallbackRank++, \"PARALLAXOCCLUSION\");\n    }\n    if (defines.ENVIRONMENTBRDF) {\n      fallbacks.addFallback(fallbackRank++, \"ENVIRONMENTBRDF\");\n    }\n    if (defines.TANGENT) {\n      fallbacks.addFallback(fallbackRank++, \"TANGENT\");\n    }\n    if (defines.BUMP) {\n      fallbacks.addFallback(fallbackRank++, \"BUMP\");\n    }\n    fallbackRank = MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights, fallbackRank++);\n    if (defines.SPECULARTERM) {\n      fallbacks.addFallback(fallbackRank++, \"SPECULARTERM\");\n    }\n    if (defines.USESPHERICALFROMREFLECTIONMAP) {\n      fallbacks.addFallback(fallbackRank++, \"USESPHERICALFROMREFLECTIONMAP\");\n    }\n    if (defines.USEIRRADIANCEMAP) {\n      fallbacks.addFallback(fallbackRank++, \"USEIRRADIANCEMAP\");\n    }\n    if (defines.LIGHTMAP) {\n      fallbacks.addFallback(fallbackRank++, \"LIGHTMAP\");\n    }\n    if (defines.NORMAL) {\n      fallbacks.addFallback(fallbackRank++, \"NORMAL\");\n    }\n    if (defines.AMBIENT) {\n      fallbacks.addFallback(fallbackRank++, \"AMBIENT\");\n    }\n    if (defines.EMISSIVE) {\n      fallbacks.addFallback(fallbackRank++, \"EMISSIVE\");\n    }\n    if (defines.VERTEXCOLOR) {\n      fallbacks.addFallback(fallbackRank++, \"VERTEXCOLOR\");\n    }\n    if (defines.MORPHTARGETS) {\n      fallbacks.addFallback(fallbackRank++, \"MORPHTARGETS\");\n    }\n    if (defines.MULTIVIEW) {\n      fallbacks.addFallback(0, \"MULTIVIEW\");\n    }\n    //Attributes\n    const attribs = [VertexBuffer.PositionKind];\n    if (defines.NORMAL) {\n      attribs.push(VertexBuffer.NormalKind);\n    }\n    if (defines.TANGENT) {\n      attribs.push(VertexBuffer.TangentKind);\n    }\n    for (let i = 1; i <= 6; ++i) {\n      if (defines[\"UV\" + i]) {\n        attribs.push(`uv${i === 1 ? \"\" : i}`);\n      }\n    }\n    if (defines.VERTEXCOLOR) {\n      attribs.push(VertexBuffer.ColorKind);\n    }\n    if (defines.INSTANCESCOLOR) {\n      attribs.push(VertexBuffer.ColorInstanceKind);\n    }\n    MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n    MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n    MaterialHelper.PrepareAttributesForMorphTargets(attribs, mesh, defines);\n    MaterialHelper.PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\n    let shaderName = \"pbr\";\n    const uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vAmbientColor\", \"vAlbedoColor\", \"vReflectivityColor\", \"vMetallicReflectanceFactors\", \"vEmissiveColor\", \"visibility\", \"vReflectionColor\", \"vFogInfos\", \"vFogColor\", \"pointSize\", \"vAlbedoInfos\", \"vAmbientInfos\", \"vOpacityInfos\", \"vReflectionInfos\", \"vReflectionPosition\", \"vReflectionSize\", \"vEmissiveInfos\", \"vReflectivityInfos\", \"vReflectionFilteringInfo\", \"vMetallicReflectanceInfos\", \"vReflectanceInfos\", \"vMicroSurfaceSamplerInfos\", \"vBumpInfos\", \"vLightmapInfos\", \"mBones\", \"albedoMatrix\", \"ambientMatrix\", \"opacityMatrix\", \"reflectionMatrix\", \"emissiveMatrix\", \"reflectivityMatrix\", \"normalMatrix\", \"microSurfaceSamplerMatrix\", \"bumpMatrix\", \"lightmapMatrix\", \"metallicReflectanceMatrix\", \"reflectanceMatrix\", \"vLightingIntensity\", \"logarithmicDepthConstant\", \"vSphericalX\", \"vSphericalY\", \"vSphericalZ\", \"vSphericalXX_ZZ\", \"vSphericalYY_ZZ\", \"vSphericalZZ\", \"vSphericalXY\", \"vSphericalYZ\", \"vSphericalZX\", \"vSphericalL00\", \"vSphericalL1_1\", \"vSphericalL10\", \"vSphericalL11\", \"vSphericalL2_2\", \"vSphericalL2_1\", \"vSphericalL20\", \"vSphericalL21\", \"vSphericalL22\", \"vReflectionMicrosurfaceInfos\", \"vTangentSpaceParams\", \"boneTextureWidth\", \"vDebugMode\", \"morphTargetTextureInfo\", \"morphTargetTextureIndices\"];\n    const samplers = [\"albedoSampler\", \"reflectivitySampler\", \"ambientSampler\", \"emissiveSampler\", \"bumpSampler\", \"lightmapSampler\", \"opacitySampler\", \"reflectionSampler\", \"reflectionSamplerLow\", \"reflectionSamplerHigh\", \"irradianceSampler\", \"microSurfaceSampler\", \"environmentBrdfSampler\", \"boneSampler\", \"metallicReflectanceSampler\", \"reflectanceSampler\", \"morphTargets\", \"oitDepthSampler\", \"oitFrontColorSampler\"];\n    const uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\n    this._eventInfo.fallbacks = fallbacks;\n    this._eventInfo.fallbackRank = fallbackRank;\n    this._eventInfo.defines = defines;\n    this._eventInfo.uniforms = uniforms;\n    this._eventInfo.attributes = attribs;\n    this._eventInfo.samplers = samplers;\n    this._eventInfo.uniformBuffersNames = uniformBuffers;\n    this._eventInfo.customCode = undefined;\n    this._eventInfo.mesh = mesh;\n    this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareEffect, this._eventInfo);\n    PrePassConfiguration.AddUniforms(uniforms);\n    PrePassConfiguration.AddSamplers(samplers);\n    addClipPlaneUniforms(uniforms);\n    if (ImageProcessingConfiguration) {\n      ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\n      ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\n    }\n    MaterialHelper.PrepareUniformsAndSamplersList({\n      uniformsNames: uniforms,\n      uniformBuffersNames: uniformBuffers,\n      samplers: samplers,\n      defines: defines,\n      maxSimultaneousLights: this._maxSimultaneousLights\n    });\n    const csnrOptions = {};\n    if (this.customShaderNameResolve) {\n      shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\n    }\n    const join = defines.toString();\n    const effect = engine.createEffect(shaderName, {\n      attributes: attribs,\n      uniformsNames: uniforms,\n      uniformBuffersNames: uniformBuffers,\n      samplers: samplers,\n      defines: join,\n      fallbacks: fallbacks,\n      onCompiled: onCompiled,\n      onError: onError,\n      indexParameters: {\n        maxSimultaneousLights: this._maxSimultaneousLights,\n        maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS\n      },\n      processFinalCode: csnrOptions.processFinalCode,\n      processCodeAfterIncludes: this._eventInfo.customCode,\n      multiTarget: defines.PREPASS\n    }, engine);\n    this._eventInfo.customCode = undefined;\n    return effect;\n  }\n  _prepareDefines(mesh, defines, useInstances = null, useClipPlane = null, useThinInstances = false) {\n    var _a;\n    const scene = this.getScene();\n    const engine = scene.getEngine();\n    // Lights\n    MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\n    defines._needNormals = true;\n    // Multiview\n    MaterialHelper.PrepareDefinesForMultiview(scene, defines);\n    // PrePass\n    const oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\n    MaterialHelper.PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\n    // Order independant transparency\n    MaterialHelper.PrepareDefinesForOIT(scene, defines, oit);\n    // Textures\n    defines.METALLICWORKFLOW = this.isMetallicWorkflow();\n    if (defines._areTexturesDirty) {\n      defines._needUVs = false;\n      if (scene.texturesEnabled) {\n        defines.ALBEDODIRECTUV = 0;\n        defines.AMBIENTDIRECTUV = 0;\n        defines.OPACITYDIRECTUV = 0;\n        defines.EMISSIVEDIRECTUV = 0;\n        defines.REFLECTIVITYDIRECTUV = 0;\n        defines.MICROSURFACEMAPDIRECTUV = 0;\n        defines.METALLIC_REFLECTANCEDIRECTUV = 0;\n        defines.REFLECTANCEDIRECTUV = 0;\n        defines.BUMPDIRECTUV = 0;\n        defines.LIGHTMAPDIRECTUV = 0;\n        if (engine.getCaps().textureLOD) {\n          defines.LODBASEDMICROSFURACE = true;\n        }\n        if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._albedoTexture, defines, \"ALBEDO\");\n          defines.GAMMAALBEDO = this._albedoTexture.gammaSpace;\n        } else {\n          defines.ALBEDO = false;\n        }\n        if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\n          defines.AMBIENTINGRAYSCALE = this._useAmbientInGrayScale;\n        } else {\n          defines.AMBIENT = false;\n        }\n        if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\n          defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\n        } else {\n          defines.OPACITY = false;\n        }\n        const reflectionTexture = this._getReflectionTexture();\n        if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n          defines.REFLECTION = true;\n          defines.GAMMAREFLECTION = reflectionTexture.gammaSpace;\n          defines.RGBDREFLECTION = reflectionTexture.isRGBD;\n          defines.LODINREFLECTIONALPHA = reflectionTexture.lodLevelInAlpha;\n          defines.LINEARSPECULARREFLECTION = reflectionTexture.linearSpecularLOD;\n          if (this.realTimeFiltering && this.realTimeFilteringQuality > 0) {\n            defines.NUM_SAMPLES = \"\" + this.realTimeFilteringQuality;\n            if (engine._features.needTypeSuffixInShaderConstants) {\n              defines.NUM_SAMPLES = defines.NUM_SAMPLES + \"u\";\n            }\n            defines.REALTIME_FILTERING = true;\n          } else {\n            defines.REALTIME_FILTERING = false;\n          }\n          if (reflectionTexture.coordinatesMode === Texture.INVCUBIC_MODE) {\n            defines.INVERTCUBICMAP = true;\n          }\n          defines.REFLECTIONMAP_3D = reflectionTexture.isCube;\n          defines.REFLECTIONMAP_OPPOSITEZ = defines.REFLECTIONMAP_3D && this.getScene().useRightHandedSystem ? !reflectionTexture.invertZ : reflectionTexture.invertZ;\n          defines.REFLECTIONMAP_CUBIC = false;\n          defines.REFLECTIONMAP_EXPLICIT = false;\n          defines.REFLECTIONMAP_PLANAR = false;\n          defines.REFLECTIONMAP_PROJECTION = false;\n          defines.REFLECTIONMAP_SKYBOX = false;\n          defines.REFLECTIONMAP_SPHERICAL = false;\n          defines.REFLECTIONMAP_EQUIRECTANGULAR = false;\n          defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n          defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n          switch (reflectionTexture.coordinatesMode) {\n            case Texture.EXPLICIT_MODE:\n              defines.REFLECTIONMAP_EXPLICIT = true;\n              break;\n            case Texture.PLANAR_MODE:\n              defines.REFLECTIONMAP_PLANAR = true;\n              break;\n            case Texture.PROJECTION_MODE:\n              defines.REFLECTIONMAP_PROJECTION = true;\n              break;\n            case Texture.SKYBOX_MODE:\n              defines.REFLECTIONMAP_SKYBOX = true;\n              break;\n            case Texture.SPHERICAL_MODE:\n              defines.REFLECTIONMAP_SPHERICAL = true;\n              break;\n            case Texture.EQUIRECTANGULAR_MODE:\n              defines.REFLECTIONMAP_EQUIRECTANGULAR = true;\n              break;\n            case Texture.FIXED_EQUIRECTANGULAR_MODE:\n              defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = true;\n              break;\n            case Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE:\n              defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = true;\n              break;\n            case Texture.CUBIC_MODE:\n            case Texture.INVCUBIC_MODE:\n            default:\n              defines.REFLECTIONMAP_CUBIC = true;\n              defines.USE_LOCAL_REFLECTIONMAP_CUBIC = reflectionTexture.boundingBoxSize ? true : false;\n              break;\n          }\n          if (reflectionTexture.coordinatesMode !== Texture.SKYBOX_MODE) {\n            if (reflectionTexture.irradianceTexture) {\n              defines.USEIRRADIANCEMAP = true;\n              defines.USESPHERICALFROMREFLECTIONMAP = false;\n            }\n            // Assume using spherical polynomial if the reflection texture is a cube map\n            else if (reflectionTexture.isCube) {\n              defines.USESPHERICALFROMREFLECTIONMAP = true;\n              defines.USEIRRADIANCEMAP = false;\n              if (this._forceIrradianceInFragment || this.realTimeFiltering || engine.getCaps().maxVaryingVectors <= 8) {\n                defines.USESPHERICALINVERTEX = false;\n              } else {\n                defines.USESPHERICALINVERTEX = true;\n              }\n            }\n          }\n        } else {\n          defines.REFLECTION = false;\n          defines.REFLECTIONMAP_3D = false;\n          defines.REFLECTIONMAP_SPHERICAL = false;\n          defines.REFLECTIONMAP_PLANAR = false;\n          defines.REFLECTIONMAP_CUBIC = false;\n          defines.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\n          defines.REFLECTIONMAP_PROJECTION = false;\n          defines.REFLECTIONMAP_SKYBOX = false;\n          defines.REFLECTIONMAP_EXPLICIT = false;\n          defines.REFLECTIONMAP_EQUIRECTANGULAR = false;\n          defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n          defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n          defines.INVERTCUBICMAP = false;\n          defines.USESPHERICALFROMREFLECTIONMAP = false;\n          defines.USEIRRADIANCEMAP = false;\n          defines.USESPHERICALINVERTEX = false;\n          defines.REFLECTIONMAP_OPPOSITEZ = false;\n          defines.LODINREFLECTIONALPHA = false;\n          defines.GAMMAREFLECTION = false;\n          defines.RGBDREFLECTION = false;\n          defines.LINEARSPECULARREFLECTION = false;\n        }\n        if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\n          defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\n          defines.GAMMALIGHTMAP = this._lightmapTexture.gammaSpace;\n          defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\n        } else {\n          defines.LIGHTMAP = false;\n        }\n        if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\n          defines.GAMMAEMISSIVE = this._emissiveTexture.gammaSpace;\n        } else {\n          defines.EMISSIVE = false;\n        }\n        if (MaterialFlags.SpecularTextureEnabled) {\n          if (this._metallicTexture) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._metallicTexture, defines, \"REFLECTIVITY\");\n            defines.ROUGHNESSSTOREINMETALMAPALPHA = this._useRoughnessFromMetallicTextureAlpha;\n            defines.ROUGHNESSSTOREINMETALMAPGREEN = !this._useRoughnessFromMetallicTextureAlpha && this._useRoughnessFromMetallicTextureGreen;\n            defines.METALLNESSSTOREINMETALMAPBLUE = this._useMetallnessFromMetallicTextureBlue;\n            defines.AOSTOREINMETALMAPRED = this._useAmbientOcclusionFromMetallicTextureRed;\n            defines.REFLECTIVITY_GAMMA = false;\n          } else if (this._reflectivityTexture) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._reflectivityTexture, defines, \"REFLECTIVITY\");\n            defines.MICROSURFACEFROMREFLECTIVITYMAP = this._useMicroSurfaceFromReflectivityMapAlpha;\n            defines.MICROSURFACEAUTOMATIC = this._useAutoMicroSurfaceFromReflectivityMap;\n            defines.REFLECTIVITY_GAMMA = this._reflectivityTexture.gammaSpace;\n          } else {\n            defines.REFLECTIVITY = false;\n          }\n          if (this._metallicReflectanceTexture || this._reflectanceTexture) {\n            const identicalTextures = this._metallicReflectanceTexture !== null && this._metallicReflectanceTexture._texture === ((_a = this._reflectanceTexture) === null || _a === void 0 ? void 0 : _a._texture) && this._metallicReflectanceTexture.checkTransformsAreIdentical(this._reflectanceTexture);\n            defines.METALLIC_REFLECTANCE_USE_ALPHA_ONLY = this._useOnlyMetallicFromMetallicReflectanceTexture && !identicalTextures;\n            if (this._metallicReflectanceTexture) {\n              MaterialHelper.PrepareDefinesForMergedUV(this._metallicReflectanceTexture, defines, \"METALLIC_REFLECTANCE\");\n              defines.METALLIC_REFLECTANCE_GAMMA = this._metallicReflectanceTexture.gammaSpace;\n            } else {\n              defines.METALLIC_REFLECTANCE = false;\n            }\n            if (this._reflectanceTexture && !identicalTextures && (!this._metallicReflectanceTexture || this._metallicReflectanceTexture && this._useOnlyMetallicFromMetallicReflectanceTexture)) {\n              MaterialHelper.PrepareDefinesForMergedUV(this._reflectanceTexture, defines, \"REFLECTANCE\");\n              defines.REFLECTANCE_GAMMA = this._reflectanceTexture.gammaSpace;\n            } else {\n              defines.REFLECTANCE = false;\n            }\n          } else {\n            defines.METALLIC_REFLECTANCE = false;\n            defines.REFLECTANCE = false;\n          }\n          if (this._microSurfaceTexture) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._microSurfaceTexture, defines, \"MICROSURFACEMAP\");\n          } else {\n            defines.MICROSURFACEMAP = false;\n          }\n        } else {\n          defines.REFLECTIVITY = false;\n          defines.MICROSURFACEMAP = false;\n        }\n        if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\n          if (this._useParallax && this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n            defines.PARALLAX = true;\n            defines.PARALLAXOCCLUSION = !!this._useParallaxOcclusion;\n          } else {\n            defines.PARALLAX = false;\n          }\n          defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\n        } else {\n          defines.BUMP = false;\n          defines.PARALLAX = false;\n          defines.PARALLAXOCCLUSION = false;\n          defines.OBJECTSPACE_NORMALMAP = false;\n        }\n        if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\n          defines.ENVIRONMENTBRDF = true;\n          defines.ENVIRONMENTBRDF_RGBD = this._environmentBRDFTexture.isRGBD;\n        } else {\n          defines.ENVIRONMENTBRDF = false;\n          defines.ENVIRONMENTBRDF_RGBD = false;\n        }\n        if (this._shouldUseAlphaFromAlbedoTexture()) {\n          defines.ALPHAFROMALBEDO = true;\n        } else {\n          defines.ALPHAFROMALBEDO = false;\n        }\n      }\n      defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\n      if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_STANDARD) {\n        defines.USEPHYSICALLIGHTFALLOFF = false;\n        defines.USEGLTFLIGHTFALLOFF = false;\n      } else if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF) {\n        defines.USEPHYSICALLIGHTFALLOFF = false;\n        defines.USEGLTFLIGHTFALLOFF = true;\n      } else {\n        defines.USEPHYSICALLIGHTFALLOFF = true;\n        defines.USEGLTFLIGHTFALLOFF = false;\n      }\n      defines.RADIANCEOVERALPHA = this._useRadianceOverAlpha;\n      if (!this.backFaceCulling && this._twoSidedLighting) {\n        defines.TWOSIDEDLIGHTING = true;\n      } else {\n        defines.TWOSIDEDLIGHTING = false;\n      }\n      defines.SPECULARAA = engine.getCaps().standardDerivatives && this._enableSpecularAntiAliasing;\n    }\n    if (defines._areTexturesDirty || defines._areMiscDirty) {\n      defines.ALPHATESTVALUE = `${this._alphaCutOff}${this._alphaCutOff % 1 === 0 ? \".\" : \"\"}`;\n      defines.PREMULTIPLYALPHA = this.alphaMode === 7 || this.alphaMode === 8;\n      defines.ALPHABLEND = this.needAlphaBlendingForMesh(mesh);\n      defines.ALPHAFRESNEL = this._useAlphaFresnel || this._useLinearAlphaFresnel;\n      defines.LINEARALPHAFRESNEL = this._useLinearAlphaFresnel;\n    }\n    if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n      this._imageProcessingConfiguration.prepareDefines(defines);\n    }\n    defines.FORCENORMALFORWARD = this._forceNormalForward;\n    defines.RADIANCEOCCLUSION = this._useRadianceOcclusion;\n    defines.HORIZONOCCLUSION = this._useHorizonOcclusion;\n    // Misc.\n    if (defines._areMiscDirty) {\n      MaterialHelper.PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh) || this._forceAlphaTest, defines);\n      defines.UNLIT = this._unlit || (this.pointsCloud || this.wireframe) && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind);\n      defines.DEBUGMODE = this._debugMode;\n    }\n    // Values that need to be evaluated on every frame\n    MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false, useClipPlane, useThinInstances);\n    // External config\n    this._eventInfo.defines = defines;\n    this._eventInfo.mesh = mesh;\n    this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo);\n    // Attribs\n    MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true, true, this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE);\n    // External config\n    this._callbackPluginEventPrepareDefines(this._eventInfo);\n  }\n  /**\n   * Force shader compilation\n   * @param mesh\n   * @param onCompiled\n   * @param options\n   */\n  forceCompilation(mesh, onCompiled, options) {\n    const localOptions = {\n      clipPlane: false,\n      useInstances: false,\n      ...options\n    };\n    if (!this._uniformBufferLayoutBuilt) {\n      this.buildUniformLayout();\n    }\n    this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\n    const defines = new PBRMaterialDefines(this._eventInfo.defineNames);\n    const effect = this._prepareEffect(mesh, defines, undefined, undefined, localOptions.useInstances, localOptions.clipPlane, mesh.hasThinInstances);\n    if (this._onEffectCreatedObservable) {\n      onCreatedEffectParameters.effect = effect;\n      onCreatedEffectParameters.subMesh = null;\n      this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n    }\n    if (effect.isReady()) {\n      if (onCompiled) {\n        onCompiled(this);\n      }\n    } else {\n      effect.onCompileObservable.add(() => {\n        if (onCompiled) {\n          onCompiled(this);\n        }\n      });\n    }\n  }\n  /**\n   * Initializes the uniform buffer layout for the shader.\n   */\n  buildUniformLayout() {\n    // Order is important !\n    const ubo = this._uniformBuffer;\n    ubo.addUniform(\"vAlbedoInfos\", 2);\n    ubo.addUniform(\"vAmbientInfos\", 4);\n    ubo.addUniform(\"vOpacityInfos\", 2);\n    ubo.addUniform(\"vEmissiveInfos\", 2);\n    ubo.addUniform(\"vLightmapInfos\", 2);\n    ubo.addUniform(\"vReflectivityInfos\", 3);\n    ubo.addUniform(\"vMicroSurfaceSamplerInfos\", 2);\n    ubo.addUniform(\"vReflectionInfos\", 2);\n    ubo.addUniform(\"vReflectionFilteringInfo\", 2);\n    ubo.addUniform(\"vReflectionPosition\", 3);\n    ubo.addUniform(\"vReflectionSize\", 3);\n    ubo.addUniform(\"vBumpInfos\", 3);\n    ubo.addUniform(\"albedoMatrix\", 16);\n    ubo.addUniform(\"ambientMatrix\", 16);\n    ubo.addUniform(\"opacityMatrix\", 16);\n    ubo.addUniform(\"emissiveMatrix\", 16);\n    ubo.addUniform(\"lightmapMatrix\", 16);\n    ubo.addUniform(\"reflectivityMatrix\", 16);\n    ubo.addUniform(\"microSurfaceSamplerMatrix\", 16);\n    ubo.addUniform(\"bumpMatrix\", 16);\n    ubo.addUniform(\"vTangentSpaceParams\", 2);\n    ubo.addUniform(\"reflectionMatrix\", 16);\n    ubo.addUniform(\"vReflectionColor\", 3);\n    ubo.addUniform(\"vAlbedoColor\", 4);\n    ubo.addUniform(\"vLightingIntensity\", 4);\n    ubo.addUniform(\"vReflectionMicrosurfaceInfos\", 3);\n    ubo.addUniform(\"pointSize\", 1);\n    ubo.addUniform(\"vReflectivityColor\", 4);\n    ubo.addUniform(\"vEmissiveColor\", 3);\n    ubo.addUniform(\"vAmbientColor\", 3);\n    ubo.addUniform(\"vDebugMode\", 2);\n    ubo.addUniform(\"vMetallicReflectanceFactors\", 4);\n    ubo.addUniform(\"vMetallicReflectanceInfos\", 2);\n    ubo.addUniform(\"metallicReflectanceMatrix\", 16);\n    ubo.addUniform(\"vReflectanceInfos\", 2);\n    ubo.addUniform(\"reflectanceMatrix\", 16);\n    ubo.addUniform(\"vSphericalL00\", 3);\n    ubo.addUniform(\"vSphericalL1_1\", 3);\n    ubo.addUniform(\"vSphericalL10\", 3);\n    ubo.addUniform(\"vSphericalL11\", 3);\n    ubo.addUniform(\"vSphericalL2_2\", 3);\n    ubo.addUniform(\"vSphericalL2_1\", 3);\n    ubo.addUniform(\"vSphericalL20\", 3);\n    ubo.addUniform(\"vSphericalL21\", 3);\n    ubo.addUniform(\"vSphericalL22\", 3);\n    ubo.addUniform(\"vSphericalX\", 3);\n    ubo.addUniform(\"vSphericalY\", 3);\n    ubo.addUniform(\"vSphericalZ\", 3);\n    ubo.addUniform(\"vSphericalXX_ZZ\", 3);\n    ubo.addUniform(\"vSphericalYY_ZZ\", 3);\n    ubo.addUniform(\"vSphericalZZ\", 3);\n    ubo.addUniform(\"vSphericalXY\", 3);\n    ubo.addUniform(\"vSphericalYZ\", 3);\n    ubo.addUniform(\"vSphericalZX\", 3);\n    super.buildUniformLayout();\n  }\n  /**\n   * Binds the submesh data.\n   * @param world - The world matrix.\n   * @param mesh - The BJS mesh.\n   * @param subMesh - A submesh of the BJS mesh.\n   */\n  bindForSubMesh(world, mesh, subMesh) {\n    var _a, _b, _c, _d;\n    const scene = this.getScene();\n    const defines = subMesh.materialDefines;\n    if (!defines) {\n      return;\n    }\n    const effect = subMesh.effect;\n    if (!effect) {\n      return;\n    }\n    this._activeEffect = effect;\n    // Matrices Mesh.\n    mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n    mesh.transferToEffect(world);\n    const engine = scene.getEngine();\n    // Binding unconditionally\n    this._uniformBuffer.bindToEffect(effect, \"Material\");\n    this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\n    this._eventInfo.subMesh = subMesh;\n    this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\n    // Normal Matrix\n    if (defines.OBJECTSPACE_NORMALMAP) {\n      world.toNormalMatrix(this._normalMatrix);\n      this.bindOnlyNormalMatrix(this._normalMatrix);\n    }\n    const mustRebind = effect._forceRebindOnNextCall || this._mustRebind(scene, effect, mesh.visibility);\n    // Bones\n    MaterialHelper.BindBonesParameters(mesh, this._activeEffect, this.prePassConfiguration);\n    let reflectionTexture = null;\n    const ubo = this._uniformBuffer;\n    if (mustRebind) {\n      this.bindViewProjection(effect);\n      reflectionTexture = this._getReflectionTexture();\n      if (!ubo.useUbo || !this.isFrozen || !ubo.isSync || effect._forceRebindOnNextCall) {\n        // Texture uniforms\n        if (scene.texturesEnabled) {\n          if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n            ubo.updateFloat2(\"vAlbedoInfos\", this._albedoTexture.coordinatesIndex, this._albedoTexture.level);\n            MaterialHelper.BindTextureMatrix(this._albedoTexture, ubo, \"albedo\");\n          }\n          if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n            ubo.updateFloat4(\"vAmbientInfos\", this._ambientTexture.coordinatesIndex, this._ambientTexture.level, this._ambientTextureStrength, this._ambientTextureImpactOnAnalyticalLights);\n            MaterialHelper.BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\n          }\n          if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n            ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\n            MaterialHelper.BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\n          }\n          if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n            ubo.updateMatrix(\"reflectionMatrix\", reflectionTexture.getReflectionTextureMatrix());\n            ubo.updateFloat2(\"vReflectionInfos\", reflectionTexture.level, 0);\n            if (reflectionTexture.boundingBoxSize) {\n              const cubeTexture = reflectionTexture;\n              ubo.updateVector3(\"vReflectionPosition\", cubeTexture.boundingBoxPosition);\n              ubo.updateVector3(\"vReflectionSize\", cubeTexture.boundingBoxSize);\n            }\n            if (this.realTimeFiltering) {\n              const width = reflectionTexture.getSize().width;\n              ubo.updateFloat2(\"vReflectionFilteringInfo\", width, Scalar.Log2(width));\n            }\n            if (!defines.USEIRRADIANCEMAP) {\n              const polynomials = reflectionTexture.sphericalPolynomial;\n              if (defines.USESPHERICALFROMREFLECTIONMAP && polynomials) {\n                if (defines.SPHERICAL_HARMONICS) {\n                  const preScaledHarmonics = polynomials.preScaledHarmonics;\n                  ubo.updateVector3(\"vSphericalL00\", preScaledHarmonics.l00);\n                  ubo.updateVector3(\"vSphericalL1_1\", preScaledHarmonics.l1_1);\n                  ubo.updateVector3(\"vSphericalL10\", preScaledHarmonics.l10);\n                  ubo.updateVector3(\"vSphericalL11\", preScaledHarmonics.l11);\n                  ubo.updateVector3(\"vSphericalL2_2\", preScaledHarmonics.l2_2);\n                  ubo.updateVector3(\"vSphericalL2_1\", preScaledHarmonics.l2_1);\n                  ubo.updateVector3(\"vSphericalL20\", preScaledHarmonics.l20);\n                  ubo.updateVector3(\"vSphericalL21\", preScaledHarmonics.l21);\n                  ubo.updateVector3(\"vSphericalL22\", preScaledHarmonics.l22);\n                } else {\n                  ubo.updateFloat3(\"vSphericalX\", polynomials.x.x, polynomials.x.y, polynomials.x.z);\n                  ubo.updateFloat3(\"vSphericalY\", polynomials.y.x, polynomials.y.y, polynomials.y.z);\n                  ubo.updateFloat3(\"vSphericalZ\", polynomials.z.x, polynomials.z.y, polynomials.z.z);\n                  ubo.updateFloat3(\"vSphericalXX_ZZ\", polynomials.xx.x - polynomials.zz.x, polynomials.xx.y - polynomials.zz.y, polynomials.xx.z - polynomials.zz.z);\n                  ubo.updateFloat3(\"vSphericalYY_ZZ\", polynomials.yy.x - polynomials.zz.x, polynomials.yy.y - polynomials.zz.y, polynomials.yy.z - polynomials.zz.z);\n                  ubo.updateFloat3(\"vSphericalZZ\", polynomials.zz.x, polynomials.zz.y, polynomials.zz.z);\n                  ubo.updateFloat3(\"vSphericalXY\", polynomials.xy.x, polynomials.xy.y, polynomials.xy.z);\n                  ubo.updateFloat3(\"vSphericalYZ\", polynomials.yz.x, polynomials.yz.y, polynomials.yz.z);\n                  ubo.updateFloat3(\"vSphericalZX\", polynomials.zx.x, polynomials.zx.y, polynomials.zx.z);\n                }\n              }\n            }\n            ubo.updateFloat3(\"vReflectionMicrosurfaceInfos\", reflectionTexture.getSize().width, reflectionTexture.lodGenerationScale, reflectionTexture.lodGenerationOffset);\n          }\n          if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n            ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\n            MaterialHelper.BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\n          }\n          if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n            ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\n            MaterialHelper.BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\n          }\n          if (MaterialFlags.SpecularTextureEnabled) {\n            if (this._metallicTexture) {\n              ubo.updateFloat3(\"vReflectivityInfos\", this._metallicTexture.coordinatesIndex, this._metallicTexture.level, this._ambientTextureStrength);\n              MaterialHelper.BindTextureMatrix(this._metallicTexture, ubo, \"reflectivity\");\n            } else if (this._reflectivityTexture) {\n              ubo.updateFloat3(\"vReflectivityInfos\", this._reflectivityTexture.coordinatesIndex, this._reflectivityTexture.level, 1.0);\n              MaterialHelper.BindTextureMatrix(this._reflectivityTexture, ubo, \"reflectivity\");\n            }\n            if (this._metallicReflectanceTexture) {\n              ubo.updateFloat2(\"vMetallicReflectanceInfos\", this._metallicReflectanceTexture.coordinatesIndex, this._metallicReflectanceTexture.level);\n              MaterialHelper.BindTextureMatrix(this._metallicReflectanceTexture, ubo, \"metallicReflectance\");\n            }\n            if (this._reflectanceTexture && defines.REFLECTANCE) {\n              ubo.updateFloat2(\"vReflectanceInfos\", this._reflectanceTexture.coordinatesIndex, this._reflectanceTexture.level);\n              MaterialHelper.BindTextureMatrix(this._reflectanceTexture, ubo, \"reflectance\");\n            }\n            if (this._microSurfaceTexture) {\n              ubo.updateFloat2(\"vMicroSurfaceSamplerInfos\", this._microSurfaceTexture.coordinatesIndex, this._microSurfaceTexture.level);\n              MaterialHelper.BindTextureMatrix(this._microSurfaceTexture, ubo, \"microSurfaceSampler\");\n            }\n          }\n          if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n            ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level, this._parallaxScaleBias);\n            MaterialHelper.BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\n            if (scene._mirroredCameraPosition) {\n              ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\n            } else {\n              ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\n            }\n          }\n        }\n        // Point size\n        if (this.pointsCloud) {\n          ubo.updateFloat(\"pointSize\", this.pointSize);\n        }\n        // Colors\n        if (defines.METALLICWORKFLOW) {\n          TmpColors.Color3[0].r = this._metallic === undefined || this._metallic === null ? 1 : this._metallic;\n          TmpColors.Color3[0].g = this._roughness === undefined || this._roughness === null ? 1 : this._roughness;\n          ubo.updateColor4(\"vReflectivityColor\", TmpColors.Color3[0], 1);\n          const ior = (_b = (_a = this.subSurface) === null || _a === void 0 ? void 0 : _a._indexOfRefraction) !== null && _b !== void 0 ? _b : 1.5;\n          const outsideIOR = 1; // consider air as clear coat and other layers would remap in the shader.\n          // We are here deriving our default reflectance from a common value for none metallic surface.\n          // Based of the schlick fresnel approximation model\n          // for dielectrics.\n          const f0 = Math.pow((ior - outsideIOR) / (ior + outsideIOR), 2);\n          // Tweak the default F0 and F90 based on our given setup\n          this._metallicReflectanceColor.scaleToRef(f0 * this._metallicF0Factor, TmpColors.Color3[0]);\n          const metallicF90 = this._metallicF0Factor;\n          ubo.updateColor4(\"vMetallicReflectanceFactors\", TmpColors.Color3[0], metallicF90);\n        } else {\n          ubo.updateColor4(\"vReflectivityColor\", this._reflectivityColor, this._microSurface);\n        }\n        ubo.updateColor3(\"vEmissiveColor\", MaterialFlags.EmissiveTextureEnabled ? this._emissiveColor : Color3.BlackReadOnly);\n        ubo.updateColor3(\"vReflectionColor\", this._reflectionColor);\n        if (!defines.SS_REFRACTION && ((_c = this.subSurface) === null || _c === void 0 ? void 0 : _c._linkRefractionWithTransparency)) {\n          ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, 1);\n        } else {\n          ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, this.alpha);\n        }\n        // Misc\n        this._lightingInfos.x = this._directIntensity;\n        this._lightingInfos.y = this._emissiveIntensity;\n        this._lightingInfos.z = this._environmentIntensity * scene.environmentIntensity;\n        this._lightingInfos.w = this._specularIntensity;\n        ubo.updateVector4(\"vLightingIntensity\", this._lightingInfos);\n        // Colors\n        scene.ambientColor.multiplyToRef(this._ambientColor, this._globalAmbientColor);\n        ubo.updateColor3(\"vAmbientColor\", this._globalAmbientColor);\n        ubo.updateFloat2(\"vDebugMode\", this._debugLimit, this._debugFactor);\n      }\n      // Textures\n      if (scene.texturesEnabled) {\n        if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n          ubo.setTexture(\"albedoSampler\", this._albedoTexture);\n        }\n        if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n          ubo.setTexture(\"ambientSampler\", this._ambientTexture);\n        }\n        if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n          ubo.setTexture(\"opacitySampler\", this._opacityTexture);\n        }\n        if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n          if (defines.LODBASEDMICROSFURACE) {\n            ubo.setTexture(\"reflectionSampler\", reflectionTexture);\n          } else {\n            ubo.setTexture(\"reflectionSampler\", reflectionTexture._lodTextureMid || reflectionTexture);\n            ubo.setTexture(\"reflectionSamplerLow\", reflectionTexture._lodTextureLow || reflectionTexture);\n            ubo.setTexture(\"reflectionSamplerHigh\", reflectionTexture._lodTextureHigh || reflectionTexture);\n          }\n          if (defines.USEIRRADIANCEMAP) {\n            ubo.setTexture(\"irradianceSampler\", reflectionTexture.irradianceTexture);\n          }\n        }\n        if (defines.ENVIRONMENTBRDF) {\n          ubo.setTexture(\"environmentBrdfSampler\", this._environmentBRDFTexture);\n        }\n        if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n          ubo.setTexture(\"emissiveSampler\", this._emissiveTexture);\n        }\n        if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n          ubo.setTexture(\"lightmapSampler\", this._lightmapTexture);\n        }\n        if (MaterialFlags.SpecularTextureEnabled) {\n          if (this._metallicTexture) {\n            ubo.setTexture(\"reflectivitySampler\", this._metallicTexture);\n          } else if (this._reflectivityTexture) {\n            ubo.setTexture(\"reflectivitySampler\", this._reflectivityTexture);\n          }\n          if (this._metallicReflectanceTexture) {\n            ubo.setTexture(\"metallicReflectanceSampler\", this._metallicReflectanceTexture);\n          }\n          if (this._reflectanceTexture && defines.REFLECTANCE) {\n            ubo.setTexture(\"reflectanceSampler\", this._reflectanceTexture);\n          }\n          if (this._microSurfaceTexture) {\n            ubo.setTexture(\"microSurfaceSampler\", this._microSurfaceTexture);\n          }\n        }\n        if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n          ubo.setTexture(\"bumpSampler\", this._bumpTexture);\n        }\n      }\n      // OIT with depth peeling\n      if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\n        this.getScene().depthPeelingRenderer.bind(effect);\n      }\n      this._eventInfo.subMesh = subMesh;\n      this._callbackPluginEventBindForSubMesh(this._eventInfo);\n      // Clip plane\n      bindClipPlane(this._activeEffect, this, scene);\n      this.bindEyePosition(effect);\n    } else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\n      this._needToBindSceneUbo = true;\n    }\n    if (mustRebind || !this.isFrozen) {\n      // Lights\n      if (scene.lightsEnabled && !this._disableLighting) {\n        MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this._maxSimultaneousLights);\n      }\n      // View\n      if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE || reflectionTexture || mesh.receiveShadows || defines.PREPASS) {\n        this.bindView(effect);\n      }\n      // Fog\n      MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect, true);\n      // Morph targets\n      if (defines.NUM_MORPH_INFLUENCERS) {\n        MaterialHelper.BindMorphTargetParameters(mesh, this._activeEffect);\n      }\n      if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\n        (_d = mesh.bakedVertexAnimationManager) === null || _d === void 0 ? void 0 : _d.bind(effect, defines.INSTANCES);\n      }\n      // image processing\n      this._imageProcessingConfiguration.bind(this._activeEffect);\n      // Log. depth\n      MaterialHelper.BindLogDepth(defines, this._activeEffect, scene);\n    }\n    this._afterBind(mesh, this._activeEffect);\n    ubo.update();\n  }\n  /**\n   * Returns the animatable textures.\n   * If material have animatable metallic texture, then reflectivity texture will not be returned, even if it has animations.\n   * @returns - Array of animatable textures.\n   */\n  getAnimatables() {\n    const results = super.getAnimatables();\n    if (this._albedoTexture && this._albedoTexture.animations && this._albedoTexture.animations.length > 0) {\n      results.push(this._albedoTexture);\n    }\n    if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\n      results.push(this._ambientTexture);\n    }\n    if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\n      results.push(this._opacityTexture);\n    }\n    if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\n      results.push(this._reflectionTexture);\n    }\n    if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\n      results.push(this._emissiveTexture);\n    }\n    if (this._metallicTexture && this._metallicTexture.animations && this._metallicTexture.animations.length > 0) {\n      results.push(this._metallicTexture);\n    } else if (this._reflectivityTexture && this._reflectivityTexture.animations && this._reflectivityTexture.animations.length > 0) {\n      results.push(this._reflectivityTexture);\n    }\n    if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\n      results.push(this._bumpTexture);\n    }\n    if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\n      results.push(this._lightmapTexture);\n    }\n    if (this._metallicReflectanceTexture && this._metallicReflectanceTexture.animations && this._metallicReflectanceTexture.animations.length > 0) {\n      results.push(this._metallicReflectanceTexture);\n    }\n    if (this._reflectanceTexture && this._reflectanceTexture.animations && this._reflectanceTexture.animations.length > 0) {\n      results.push(this._reflectanceTexture);\n    }\n    if (this._microSurfaceTexture && this._microSurfaceTexture.animations && this._microSurfaceTexture.animations.length > 0) {\n      results.push(this._microSurfaceTexture);\n    }\n    return results;\n  }\n  /**\n   * Returns the texture used for reflections.\n   * @returns - Reflection texture if present.  Otherwise, returns the environment texture.\n   */\n  _getReflectionTexture() {\n    if (this._reflectionTexture) {\n      return this._reflectionTexture;\n    }\n    return this.getScene().environmentTexture;\n  }\n  /**\n   * Returns an array of the actively used textures.\n   * @returns - Array of BaseTextures\n   */\n  getActiveTextures() {\n    const activeTextures = super.getActiveTextures();\n    if (this._albedoTexture) {\n      activeTextures.push(this._albedoTexture);\n    }\n    if (this._ambientTexture) {\n      activeTextures.push(this._ambientTexture);\n    }\n    if (this._opacityTexture) {\n      activeTextures.push(this._opacityTexture);\n    }\n    if (this._reflectionTexture) {\n      activeTextures.push(this._reflectionTexture);\n    }\n    if (this._emissiveTexture) {\n      activeTextures.push(this._emissiveTexture);\n    }\n    if (this._reflectivityTexture) {\n      activeTextures.push(this._reflectivityTexture);\n    }\n    if (this._metallicTexture) {\n      activeTextures.push(this._metallicTexture);\n    }\n    if (this._metallicReflectanceTexture) {\n      activeTextures.push(this._metallicReflectanceTexture);\n    }\n    if (this._reflectanceTexture) {\n      activeTextures.push(this._reflectanceTexture);\n    }\n    if (this._microSurfaceTexture) {\n      activeTextures.push(this._microSurfaceTexture);\n    }\n    if (this._bumpTexture) {\n      activeTextures.push(this._bumpTexture);\n    }\n    if (this._lightmapTexture) {\n      activeTextures.push(this._lightmapTexture);\n    }\n    return activeTextures;\n  }\n  /**\n   * Checks to see if a texture is used in the material.\n   * @param texture - Base texture to use.\n   * @returns - Boolean specifying if a texture is used in the material.\n   */\n  hasTexture(texture) {\n    if (super.hasTexture(texture)) {\n      return true;\n    }\n    if (this._albedoTexture === texture) {\n      return true;\n    }\n    if (this._ambientTexture === texture) {\n      return true;\n    }\n    if (this._opacityTexture === texture) {\n      return true;\n    }\n    if (this._reflectionTexture === texture) {\n      return true;\n    }\n    if (this._emissiveTexture === texture) {\n      return true;\n    }\n    if (this._reflectivityTexture === texture) {\n      return true;\n    }\n    if (this._metallicTexture === texture) {\n      return true;\n    }\n    if (this._metallicReflectanceTexture === texture) {\n      return true;\n    }\n    if (this._reflectanceTexture === texture) {\n      return true;\n    }\n    if (this._microSurfaceTexture === texture) {\n      return true;\n    }\n    if (this._bumpTexture === texture) {\n      return true;\n    }\n    if (this._lightmapTexture === texture) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Sets the required values to the prepass renderer.\n   * It can't be sets when subsurface scattering of this material is disabled.\n   * When scene have ability to enable subsurface prepass effect, it will enable.\n   */\n  setPrePassRenderer() {\n    var _a;\n    if (!((_a = this.subSurface) === null || _a === void 0 ? void 0 : _a.isScatteringEnabled)) {\n      return false;\n    }\n    const subSurfaceConfiguration = this.getScene().enableSubSurfaceForPrePass();\n    if (subSurfaceConfiguration) {\n      subSurfaceConfiguration.enabled = true;\n    }\n    return true;\n  }\n  /**\n   * Disposes the resources of the material.\n   * @param forceDisposeEffect - Forces the disposal of effects.\n   * @param forceDisposeTextures - Forces the disposal of all textures.\n   */\n  dispose(forceDisposeEffect, forceDisposeTextures) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    if (forceDisposeTextures) {\n      if (this._environmentBRDFTexture && this.getScene().environmentBRDFTexture !== this._environmentBRDFTexture) {\n        this._environmentBRDFTexture.dispose();\n      }\n      (_a = this._albedoTexture) === null || _a === void 0 ? void 0 : _a.dispose();\n      (_b = this._ambientTexture) === null || _b === void 0 ? void 0 : _b.dispose();\n      (_c = this._opacityTexture) === null || _c === void 0 ? void 0 : _c.dispose();\n      (_d = this._reflectionTexture) === null || _d === void 0 ? void 0 : _d.dispose();\n      (_e = this._emissiveTexture) === null || _e === void 0 ? void 0 : _e.dispose();\n      (_f = this._metallicTexture) === null || _f === void 0 ? void 0 : _f.dispose();\n      (_g = this._reflectivityTexture) === null || _g === void 0 ? void 0 : _g.dispose();\n      (_h = this._bumpTexture) === null || _h === void 0 ? void 0 : _h.dispose();\n      (_j = this._lightmapTexture) === null || _j === void 0 ? void 0 : _j.dispose();\n      (_k = this._metallicReflectanceTexture) === null || _k === void 0 ? void 0 : _k.dispose();\n      (_l = this._reflectanceTexture) === null || _l === void 0 ? void 0 : _l.dispose();\n      (_m = this._microSurfaceTexture) === null || _m === void 0 ? void 0 : _m.dispose();\n    }\n    this._renderTargets.dispose();\n    if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n      this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n    }\n    super.dispose(forceDisposeEffect, forceDisposeTextures);\n  }\n}\n/**\n * PBRMaterialTransparencyMode: No transparency mode, Alpha channel is not use.\n */\nPBRBaseMaterial.PBRMATERIAL_OPAQUE = Material.MATERIAL_OPAQUE;\n/**\n * PBRMaterialTransparencyMode: Alpha Test mode, pixel are discarded below a certain threshold defined by the alpha cutoff value.\n */\nPBRBaseMaterial.PBRMATERIAL_ALPHATEST = Material.MATERIAL_ALPHATEST;\n/**\n * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\n */\nPBRBaseMaterial.PBRMATERIAL_ALPHABLEND = Material.MATERIAL_ALPHABLEND;\n/**\n * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\n * They are also discarded below the alpha cutoff threshold to improve performances.\n */\nPBRBaseMaterial.PBRMATERIAL_ALPHATESTANDBLEND = Material.MATERIAL_ALPHATESTANDBLEND;\n/**\n * Defines the default value of how much AO map is occluding the analytical lights\n * (point spot...).\n */\nPBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS = 0;\n/**\n * PBRMaterialLightFalloff Physical: light is falling off following the inverse squared distance law.\n */\nPBRBaseMaterial.LIGHTFALLOFF_PHYSICAL = 0;\n/**\n * PBRMaterialLightFalloff gltf: light is falling off as described in the gltf moving to PBR document\n * to enhance interoperability with other engines.\n */\nPBRBaseMaterial.LIGHTFALLOFF_GLTF = 1;\n/**\n * PBRMaterialLightFalloff Standard: light is falling off like in the standard material\n * to enhance interoperability with other materials.\n */\nPBRBaseMaterial.LIGHTFALLOFF_STANDARD = 2;\n__decorate([serializeAsImageProcessingConfiguration()], PBRBaseMaterial.prototype, \"_imageProcessingConfiguration\", void 0);\n__decorate([expandToProperty(\"_markAllSubMeshesAsMiscDirty\")], PBRBaseMaterial.prototype, \"debugMode\", void 0);\n__decorate([serialize()], PBRBaseMaterial.prototype, \"useLogarithmicDepth\", null);","map":{"version":3,"mappings":"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","names":["serialize","serializeAsImageProcessingConfiguration","expandToProperty","Logger","SmartArray","GetEnvironmentBRDFTexture","Scene","ScenePerformancePriority","Vector4","VertexBuffer","PBRBRDFConfiguration","PrePassConfiguration","Color3","TmpColors","Scalar","ImageProcessingConfiguration","Material","MaterialPluginEvent","MaterialDefines","PushMaterial","MaterialHelper","Texture","MaterialFlags","EffectFallbacks","PBRClearCoatConfiguration","PBRIridescenceConfiguration","PBRAnisotropicConfiguration","PBRSheenConfiguration","PBRSubSurfaceConfiguration","DetailMapConfiguration","addClipPlaneUniforms","bindClipPlane","onCreatedEffectParameters","effect","subMesh","PBRMaterialDefines","constructor","externalProperties","rebuild","reset","ALPHATESTVALUE","PBR","NORMALXYSCALE","PBRBaseMaterial","name","scene","_directIntensity","_emissiveIntensity","_environmentIntensity","_specularIntensity","DEFAULT_AO_ON_ANALYTICAL_LIGHTS","White","LIGHTFALLOFF_PHYSICAL","brdf","clearCoat","iridescence","anisotropy","sheen","subSurface","detailMap","_attachImageProcessingConfiguration","getRenderTargetTextures","_renderTargets","ReflectionTextureEnabled","_reflectionTexture","isRenderTarget","push","_eventInfo","renderTargets","_callbackPluginEventFillRenderTargetTextures","_environmentBRDFTexture","getScene","prePassConfiguration","realTimeFiltering","_realTimeFiltering","b","markAsDirty","realTimeFilteringQuality","_realTimeFilteringQuality","n","canRenderToMRT","configuration","_imageProcessingConfiguration","_imageProcessingObserver","onUpdateParameters","remove","imageProcessingConfiguration","add","_markAllSubMeshesAsImageProcessingDirty","hasRenderTargetTextures","_cacheHasRenderTargetTextures","isPrePassCapable","disableDepthWrite","getClassName","useLogarithmicDepth","_useLogarithmicDepth","value","getEngine","getCaps","fragmentDepthSupported","_disableAlphaBlending","_transparencyMode","PBRMATERIAL_OPAQUE","PBRMATERIAL_ALPHATEST","disableAlphaBlending","needAlphaBlending","alpha","_opacityTexture","_shouldUseAlphaFromAlbedoTexture","needAlphaTesting","_forceAlphaTest","_hasAlphaChannel","_albedoTexture","hasAlpha","_useAlphaFromAlbedoTexture","getAlphaTestTexture","isReadyForSubMesh","mesh","useInstances","_uniformBufferLayoutBuilt","buildUniformLayout","isFrozen","_wasPreviouslyReady","_wasPreviouslyUsingInstances","materialDefines","_callbackPluginEventGeneric","GetDefineNames","defineNames","defines","_isReadyForSubMesh","engine","_areTexturesDirty","_callbackPluginEventHasRenderTargetTextures","texturesEnabled","DiffuseTextureEnabled","isReadyOrNotBlocking","_ambientTexture","AmbientTextureEnabled","OpacityTextureEnabled","reflectionTexture","_getReflectionTexture","irradianceTexture","_lightmapTexture","LightmapTextureEnabled","_emissiveTexture","EmissiveTextureEnabled","SpecularTextureEnabled","_metallicTexture","_reflectivityTexture","_metallicReflectanceTexture","_reflectanceTexture","_microSurfaceTexture","standardDerivatives","_bumpTexture","BumpTextureEnabled","_disableBumpMap","isReady","_callbackPluginEventIsReadyForSubMesh","_areImageProcessingDirty","isVerticesDataPresent","NormalKind","createNormals","Warn","previousEffect","lightDisposed","_areLightsDisposed","_prepareEffect","onCompiled","onError","getRenderingMesh","hasThinInstances","forceWasNotReadyPreviously","_onEffectCreatedObservable","notifyObservers","allowShaderHotSwapping","markAsUnprocessed","resetCachedMaterial","setEffect","_materialContext","_renderId","getRenderId","performancePriority","BackwardCompatible","checkReadyOnlyOnce","isMetallicWorkflow","_metallic","_roughness","useClipPlane","useThinInstances","_prepareDefines","isDirty","markAsProcessed","fallbacks","fallbackRank","USESPHERICALINVERTEX","addFallback","FOG","SPECULARAA","POINTSIZE","LOGARITHMICDEPTH","PARALLAX","PARALLAXOCCLUSION","ENVIRONMENTBRDF","TANGENT","BUMP","HandleFallbacksForShadows","_maxSimultaneousLights","SPECULARTERM","USESPHERICALFROMREFLECTIONMAP","USEIRRADIANCEMAP","LIGHTMAP","NORMAL","AMBIENT","EMISSIVE","VERTEXCOLOR","MORPHTARGETS","MULTIVIEW","attribs","PositionKind","TangentKind","i","ColorKind","INSTANCESCOLOR","ColorInstanceKind","PrepareAttributesForBones","PrepareAttributesForInstances","PrepareAttributesForMorphTargets","PrepareAttributesForBakedVertexAnimation","shaderName","uniforms","samplers","uniformBuffers","attributes","uniformBuffersNames","customCode","undefined","PrepareEffect","AddUniforms","AddSamplers","PrepareUniforms","PrepareSamplers","PrepareUniformsAndSamplersList","uniformsNames","maxSimultaneousLights","csnrOptions","customShaderNameResolve","join","toString","createEffect","indexParameters","maxSimultaneousMorphTargets","NUM_MORPH_INFLUENCERS","processFinalCode","processCodeAfterIncludes","multiTarget","PREPASS","PrepareDefinesForLights","_disableLighting","_needNormals","PrepareDefinesForMultiview","oit","needAlphaBlendingForMesh","useOrderIndependentTransparency","PrepareDefinesForPrePass","PrepareDefinesForOIT","METALLICWORKFLOW","_needUVs","ALBEDODIRECTUV","AMBIENTDIRECTUV","OPACITYDIRECTUV","EMISSIVEDIRECTUV","REFLECTIVITYDIRECTUV","MICROSURFACEMAPDIRECTUV","METALLIC_REFLECTANCEDIRECTUV","REFLECTANCEDIRECTUV","BUMPDIRECTUV","LIGHTMAPDIRECTUV","textureLOD","LODBASEDMICROSFURACE","PrepareDefinesForMergedUV","GAMMAALBEDO","gammaSpace","ALBEDO","AMBIENTINGRAYSCALE","_useAmbientInGrayScale","OPACITYRGB","getAlphaFromRGB","OPACITY","REFLECTION","GAMMAREFLECTION","RGBDREFLECTION","isRGBD","LODINREFLECTIONALPHA","lodLevelInAlpha","LINEARSPECULARREFLECTION","linearSpecularLOD","NUM_SAMPLES","_features","needTypeSuffixInShaderConstants","REALTIME_FILTERING","coordinatesMode","INVCUBIC_MODE","INVERTCUBICMAP","REFLECTIONMAP_3D","isCube","REFLECTIONMAP_OPPOSITEZ","useRightHandedSystem","invertZ","REFLECTIONMAP_CUBIC","REFLECTIONMAP_EXPLICIT","REFLECTIONMAP_PLANAR","REFLECTIONMAP_PROJECTION","REFLECTIONMAP_SKYBOX","REFLECTIONMAP_SPHERICAL","REFLECTIONMAP_EQUIRECTANGULAR","REFLECTIONMAP_EQUIRECTANGULAR_FIXED","REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED","EXPLICIT_MODE","PLANAR_MODE","PROJECTION_MODE","SKYBOX_MODE","SPHERICAL_MODE","EQUIRECTANGULAR_MODE","FIXED_EQUIRECTANGULAR_MODE","FIXED_EQUIRECTANGULAR_MIRRORED_MODE","CUBIC_MODE","USE_LOCAL_REFLECTIONMAP_CUBIC","boundingBoxSize","_forceIrradianceInFragment","maxVaryingVectors","USELIGHTMAPASSHADOWMAP","_useLightmapAsShadowmap","GAMMALIGHTMAP","RGBDLIGHTMAP","GAMMAEMISSIVE","ROUGHNESSSTOREINMETALMAPALPHA","_useRoughnessFromMetallicTextureAlpha","ROUGHNESSSTOREINMETALMAPGREEN","_useRoughnessFromMetallicTextureGreen","METALLNESSSTOREINMETALMAPBLUE","_useMetallnessFromMetallicTextureBlue","AOSTOREINMETALMAPRED","_useAmbientOcclusionFromMetallicTextureRed","REFLECTIVITY_GAMMA","MICROSURFACEFROMREFLECTIVITYMAP","_useMicroSurfaceFromReflectivityMapAlpha","MICROSURFACEAUTOMATIC","_useAutoMicroSurfaceFromReflectivityMap","REFLECTIVITY","identicalTextures","_texture","checkTransformsAreIdentical","METALLIC_REFLECTANCE_USE_ALPHA_ONLY","_useOnlyMetallicFromMetallicReflectanceTexture","METALLIC_REFLECTANCE_GAMMA","METALLIC_REFLECTANCE","REFLECTANCE_GAMMA","REFLECTANCE","MICROSURFACEMAP","_useParallax","_useParallaxOcclusion","OBJECTSPACE_NORMALMAP","_useObjectSpaceNormalMap","ENVIRONMENTBRDF_RGBD","ALPHAFROMALBEDO","SPECULAROVERALPHA","_useSpecularOverAlpha","_lightFalloff","LIGHTFALLOFF_STANDARD","USEPHYSICALLIGHTFALLOFF","USEGLTFLIGHTFALLOFF","LIGHTFALLOFF_GLTF","RADIANCEOVERALPHA","_useRadianceOverAlpha","backFaceCulling","_twoSidedLighting","TWOSIDEDLIGHTING","_enableSpecularAntiAliasing","_areMiscDirty","_alphaCutOff","PREMULTIPLYALPHA","alphaMode","ALPHABLEND","ALPHAFRESNEL","_useAlphaFresnel","_useLinearAlphaFresnel","LINEARALPHAFRESNEL","prepareDefines","FORCENORMALFORWARD","_forceNormalForward","RADIANCEOCCLUSION","_useRadianceOcclusion","HORIZONOCCLUSION","_useHorizonOcclusion","PrepareDefinesForMisc","pointsCloud","fogEnabled","_shouldTurnAlphaTestOn","UNLIT","_unlit","wireframe","DEBUGMODE","_debugMode","PrepareDefinesForFrameBoundValues","_callbackPluginEventPrepareDefinesBeforeAttributes","PrepareDefinesForAttributes","_callbackPluginEventPrepareDefines","forceCompilation","options","localOptions","clipPlane","onCompileObservable","ubo","_uniformBuffer","addUniform","bindForSubMesh","world","_activeEffect","getMeshUniformBuffer","bindToEffect","transferToEffect","_callbackPluginEventHardBindForSubMesh","toNormalMatrix","_normalMatrix","bindOnlyNormalMatrix","mustRebind","_forceRebindOnNextCall","_mustRebind","visibility","BindBonesParameters","bindViewProjection","useUbo","isSync","updateFloat2","coordinatesIndex","level","BindTextureMatrix","updateFloat4","_ambientTextureStrength","_ambientTextureImpactOnAnalyticalLights","updateMatrix","getReflectionTextureMatrix","cubeTexture","updateVector3","boundingBoxPosition","width","getSize","Log2","polynomials","sphericalPolynomial","SPHERICAL_HARMONICS","preScaledHarmonics","l00","l1_1","l10","l11","l2_2","l2_1","l20","l21","l22","updateFloat3","x","y","z","xx","zz","yy","xy","yz","zx","lodGenerationScale","lodGenerationOffset","_parallaxScaleBias","_mirroredCameraPosition","_invertNormalMapX","_invertNormalMapY","updateFloat","pointSize","r","g","updateColor4","ior","_indexOfRefraction","outsideIOR","f0","Math","pow","_metallicReflectanceColor","scaleToRef","_metallicF0Factor","metallicF90","_reflectivityColor","_microSurface","updateColor3","_emissiveColor","BlackReadOnly","_reflectionColor","SS_REFRACTION","_linkRefractionWithTransparency","_albedoColor","_lightingInfos","environmentIntensity","w","updateVector4","ambientColor","multiplyToRef","_ambientColor","_globalAmbientColor","_debugLimit","_debugFactor","setTexture","_lodTextureMid","_lodTextureLow","_lodTextureHigh","depthPeelingRenderer","bind","_callbackPluginEventBindForSubMesh","bindEyePosition","needToAlwaysBindUniformBuffers","_needToBindSceneUbo","lightsEnabled","BindLights","applyFog","fogMode","FOGMODE_NONE","receiveShadows","bindView","BindFogParameters","BindMorphTargetParameters","BAKED_VERTEX_ANIMATION_TEXTURE","bakedVertexAnimationManager","INSTANCES","BindLogDepth","_afterBind","update","getAnimatables","results","animations","length","environmentTexture","getActiveTextures","activeTextures","hasTexture","texture","setPrePassRenderer","isScatteringEnabled","subSurfaceConfiguration","enableSubSurfaceForPrePass","enabled","dispose","forceDisposeEffect","forceDisposeTextures","environmentBRDFTexture","MATERIAL_OPAQUE","MATERIAL_ALPHATEST","MATERIAL_ALPHABLEND","MATERIAL_ALPHATESTANDBLEND","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/PBR/pbrBaseMaterial.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serialize, serializeAsImageProcessingConfiguration, expandToProperty } from \"../../Misc/decorators\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { SmartArray } from \"../../Misc/smartArray\";\r\nimport { GetEnvironmentBRDFTexture } from \"../../Misc/brdfTextureTools\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Scene, ScenePerformancePriority } from \"../../scene\";\r\nimport type { Matrix } from \"../../Maths/math.vector\";\r\nimport { Vector4 } from \"../../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport { PBRBRDFConfiguration } from \"./pbrBRDFConfiguration\";\r\nimport { PrePassConfiguration } from \"../prePassConfiguration\";\r\nimport { Color3, TmpColors } from \"../../Maths/math.color\";\r\nimport { Scalar } from \"../../Maths/math.scalar\";\r\n\r\nimport type { IImageProcessingConfigurationDefines } from \"../../Materials/imageProcessingConfiguration\";\r\nimport { ImageProcessingConfiguration } from \"../../Materials/imageProcessingConfiguration\";\r\nimport type { Effect, IEffectCreationOptions } from \"../../Materials/effect\";\r\nimport type { IMaterialCompilationOptions, ICustomShaderNameResolveOptions } from \"../../Materials/material\";\r\nimport { Material } from \"../../Materials/material\";\r\nimport { MaterialPluginEvent } from \"../materialPluginEvent\";\r\nimport { MaterialDefines } from \"../../Materials/materialDefines\";\r\nimport { PushMaterial } from \"../../Materials/pushMaterial\";\r\nimport { MaterialHelper } from \"../../Materials/materialHelper\";\r\n\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../../Materials/Textures/texture\";\r\nimport type { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\nimport type { CubeTexture } from \"../../Materials/Textures/cubeTexture\";\r\n\r\nimport { MaterialFlags } from \"../materialFlags\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport type { IAnimatable } from \"../../Animations/animatable.interface\";\r\n\r\nimport \"../../Materials/Textures/baseTexture.polynomial\";\r\nimport \"../../Shaders/pbr.fragment\";\r\nimport \"../../Shaders/pbr.vertex\";\r\n\r\nimport { EffectFallbacks } from \"../effectFallbacks\";\r\nimport { PBRClearCoatConfiguration } from \"./pbrClearCoatConfiguration\";\r\nimport { PBRIridescenceConfiguration } from \"./pbrIridescenceConfiguration\";\r\nimport { PBRAnisotropicConfiguration } from \"./pbrAnisotropicConfiguration\";\r\nimport { PBRSheenConfiguration } from \"./pbrSheenConfiguration\";\r\nimport { PBRSubSurfaceConfiguration } from \"./pbrSubSurfaceConfiguration\";\r\nimport { DetailMapConfiguration } from \"../material.detailMapConfiguration\";\r\nimport { addClipPlaneUniforms, bindClipPlane } from \"../clipPlaneMaterialHelper\";\r\n\r\nconst onCreatedEffectParameters = { effect: null as unknown as Effect, subMesh: null as unknown as Nullable<SubMesh> };\r\n\r\n/**\r\n * Manages the defines for the PBR Material.\r\n * @internal\r\n */\r\nexport class PBRMaterialDefines extends MaterialDefines implements IImageProcessingConfigurationDefines {\r\n    public PBR = true;\r\n\r\n    public NUM_SAMPLES = \"0\";\r\n    public REALTIME_FILTERING = false;\r\n\r\n    public MAINUV1 = false;\r\n    public MAINUV2 = false;\r\n    public MAINUV3 = false;\r\n    public MAINUV4 = false;\r\n    public MAINUV5 = false;\r\n    public MAINUV6 = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public UV3 = false;\r\n    public UV4 = false;\r\n    public UV5 = false;\r\n    public UV6 = false;\r\n\r\n    public ALBEDO = false;\r\n    public GAMMAALBEDO = false;\r\n    public ALBEDODIRECTUV = 0;\r\n    public VERTEXCOLOR = false;\r\n\r\n    public BAKED_VERTEX_ANIMATION_TEXTURE = false;\r\n\r\n    public AMBIENT = false;\r\n    public AMBIENTDIRECTUV = 0;\r\n    public AMBIENTINGRAYSCALE = false;\r\n\r\n    public OPACITY = false;\r\n    public VERTEXALPHA = false;\r\n    public OPACITYDIRECTUV = 0;\r\n    public OPACITYRGB = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public ALPHABLEND = false;\r\n    public ALPHAFROMALBEDO = false;\r\n    public ALPHATESTVALUE = \"0.5\";\r\n    public SPECULAROVERALPHA = false;\r\n    public RADIANCEOVERALPHA = false;\r\n    public ALPHAFRESNEL = false;\r\n    public LINEARALPHAFRESNEL = false;\r\n    public PREMULTIPLYALPHA = false;\r\n\r\n    public EMISSIVE = false;\r\n    public EMISSIVEDIRECTUV = 0;\r\n    public GAMMAEMISSIVE = false;\r\n\r\n    public REFLECTIVITY = false;\r\n    public REFLECTIVITY_GAMMA = false;\r\n    public REFLECTIVITYDIRECTUV = 0;\r\n    public SPECULARTERM = false;\r\n\r\n    public MICROSURFACEFROMREFLECTIVITYMAP = false;\r\n    public MICROSURFACEAUTOMATIC = false;\r\n    public LODBASEDMICROSFURACE = false;\r\n    public MICROSURFACEMAP = false;\r\n    public MICROSURFACEMAPDIRECTUV = 0;\r\n\r\n    public METALLICWORKFLOW = false;\r\n    public ROUGHNESSSTOREINMETALMAPALPHA = false;\r\n    public ROUGHNESSSTOREINMETALMAPGREEN = false;\r\n    public METALLNESSSTOREINMETALMAPBLUE = false;\r\n    public AOSTOREINMETALMAPRED = false;\r\n    public METALLIC_REFLECTANCE = false;\r\n    public METALLIC_REFLECTANCE_GAMMA = false;\r\n    public METALLIC_REFLECTANCEDIRECTUV = 0;\r\n    public METALLIC_REFLECTANCE_USE_ALPHA_ONLY = false;\r\n    public REFLECTANCE = false;\r\n    public REFLECTANCE_GAMMA = false;\r\n    public REFLECTANCEDIRECTUV = 0;\r\n\r\n    public ENVIRONMENTBRDF = false;\r\n    public ENVIRONMENTBRDF_RGBD = false;\r\n\r\n    public NORMAL = false;\r\n    public TANGENT = false;\r\n    public BUMP = false;\r\n    public BUMPDIRECTUV = 0;\r\n    public OBJECTSPACE_NORMALMAP = false;\r\n    public PARALLAX = false;\r\n    public PARALLAXOCCLUSION = false;\r\n    public NORMALXYSCALE = true;\r\n\r\n    public LIGHTMAP = false;\r\n    public LIGHTMAPDIRECTUV = 0;\r\n    public USELIGHTMAPASSHADOWMAP = false;\r\n    public GAMMALIGHTMAP = false;\r\n    public RGBDLIGHTMAP = false;\r\n\r\n    public REFLECTION = false;\r\n    public REFLECTIONMAP_3D = false;\r\n    public REFLECTIONMAP_SPHERICAL = false;\r\n    public REFLECTIONMAP_PLANAR = false;\r\n    public REFLECTIONMAP_CUBIC = false;\r\n    public USE_LOCAL_REFLECTIONMAP_CUBIC = false;\r\n    public REFLECTIONMAP_PROJECTION = false;\r\n    public REFLECTIONMAP_SKYBOX = false;\r\n    public REFLECTIONMAP_EXPLICIT = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\r\n    public REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\r\n    public INVERTCUBICMAP = false;\r\n    public USESPHERICALFROMREFLECTIONMAP = false;\r\n    public USEIRRADIANCEMAP = false;\r\n    public USESPHERICALINVERTEX = false;\r\n    public REFLECTIONMAP_OPPOSITEZ = false;\r\n    public LODINREFLECTIONALPHA = false;\r\n    public GAMMAREFLECTION = false;\r\n    public RGBDREFLECTION = false;\r\n    public LINEARSPECULARREFLECTION = false;\r\n    public RADIANCEOCCLUSION = false;\r\n    public HORIZONOCCLUSION = false;\r\n\r\n    public INSTANCES = false;\r\n    public THIN_INSTANCES = false;\r\n    public INSTANCESCOLOR = false;\r\n\r\n    public PREPASS = false;\r\n    public PREPASS_IRRADIANCE = false;\r\n    public PREPASS_IRRADIANCE_INDEX = -1;\r\n    public PREPASS_ALBEDO_SQRT = false;\r\n    public PREPASS_ALBEDO_SQRT_INDEX = -1;\r\n    public PREPASS_DEPTH = false;\r\n    public PREPASS_DEPTH_INDEX = -1;\r\n    public PREPASS_NORMAL = false;\r\n    public PREPASS_NORMAL_INDEX = -1;\r\n    public PREPASS_POSITION = false;\r\n    public PREPASS_POSITION_INDEX = -1;\r\n    public PREPASS_VELOCITY = false;\r\n    public PREPASS_VELOCITY_INDEX = -1;\r\n    public PREPASS_REFLECTIVITY = false;\r\n    public PREPASS_REFLECTIVITY_INDEX = -1;\r\n    public SCENE_MRT_COUNT = 0;\r\n\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public BONETEXTURE = false;\r\n    public BONES_VELOCITY_ENABLED = false;\r\n\r\n    public NONUNIFORMSCALING = false;\r\n\r\n    public MORPHTARGETS = false;\r\n    public MORPHTARGETS_NORMAL = false;\r\n    public MORPHTARGETS_TANGENT = false;\r\n    public MORPHTARGETS_UV = false;\r\n    public NUM_MORPH_INFLUENCERS = 0;\r\n    public MORPHTARGETS_TEXTURE = false;\r\n\r\n    public IMAGEPROCESSING = false;\r\n    public VIGNETTE = false;\r\n    public VIGNETTEBLENDMODEMULTIPLY = false;\r\n    public VIGNETTEBLENDMODEOPAQUE = false;\r\n    public TONEMAPPING = false;\r\n    public TONEMAPPING_ACES = false;\r\n    public CONTRAST = false;\r\n    public COLORCURVES = false;\r\n    public COLORGRADING = false;\r\n    public COLORGRADING3D = false;\r\n    public SAMPLER3DGREENDEPTH = false;\r\n    public SAMPLER3DBGRMAP = false;\r\n    public DITHER = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n    public EXPOSURE = false;\r\n    public MULTIVIEW = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY_16BITS = false;\r\n\r\n    public USEPHYSICALLIGHTFALLOFF = false;\r\n    public USEGLTFLIGHTFALLOFF = false;\r\n    public TWOSIDEDLIGHTING = false;\r\n    public SHADOWFLOAT = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public LOGARITHMICDEPTH = false;\r\n    public CAMERA_ORTHOGRAPHIC = false;\r\n    public CAMERA_PERSPECTIVE = false;\r\n\r\n    public FORCENORMALFORWARD = false;\r\n\r\n    public SPECULARAA = false;\r\n\r\n    public UNLIT = false;\r\n\r\n    public DEBUGMODE = 0;\r\n\r\n    /**\r\n     * Initializes the PBR Material defines.\r\n     * @param externalProperties The external properties\r\n     */\r\n    constructor(externalProperties?: { [name: string]: { type: string; default: any } }) {\r\n        super(externalProperties);\r\n        this.rebuild();\r\n    }\r\n\r\n    /**\r\n     * Resets the PBR Material defines.\r\n     */\r\n    public reset(): void {\r\n        super.reset();\r\n        this.ALPHATESTVALUE = \"0.5\";\r\n        this.PBR = true;\r\n        this.NORMALXYSCALE = true;\r\n    }\r\n}\r\n\r\n/**\r\n * The Physically based material base class of BJS.\r\n *\r\n * This offers the main features of a standard PBR material.\r\n * For more information, please refer to the documentation :\r\n * https://doc.babylonjs.com/features/featuresDeepDive/materials/using/introToPBR\r\n */\r\nexport abstract class PBRBaseMaterial extends PushMaterial {\r\n    /**\r\n     * PBRMaterialTransparencyMode: No transparency mode, Alpha channel is not use.\r\n     */\r\n    public static readonly PBRMATERIAL_OPAQUE = Material.MATERIAL_OPAQUE;\r\n\r\n    /**\r\n     * PBRMaterialTransparencyMode: Alpha Test mode, pixel are discarded below a certain threshold defined by the alpha cutoff value.\r\n     */\r\n    public static readonly PBRMATERIAL_ALPHATEST = Material.MATERIAL_ALPHATEST;\r\n\r\n    /**\r\n     * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n     */\r\n    public static readonly PBRMATERIAL_ALPHABLEND = Material.MATERIAL_ALPHABLEND;\r\n\r\n    /**\r\n     * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n     * They are also discarded below the alpha cutoff threshold to improve performances.\r\n     */\r\n    public static readonly PBRMATERIAL_ALPHATESTANDBLEND = Material.MATERIAL_ALPHATESTANDBLEND;\r\n\r\n    /**\r\n     * Defines the default value of how much AO map is occluding the analytical lights\r\n     * (point spot...).\r\n     */\r\n    public static DEFAULT_AO_ON_ANALYTICAL_LIGHTS = 0;\r\n\r\n    /**\r\n     * PBRMaterialLightFalloff Physical: light is falling off following the inverse squared distance law.\r\n     */\r\n    public static readonly LIGHTFALLOFF_PHYSICAL = 0;\r\n\r\n    /**\r\n     * PBRMaterialLightFalloff gltf: light is falling off as described in the gltf moving to PBR document\r\n     * to enhance interoperability with other engines.\r\n     */\r\n    public static readonly LIGHTFALLOFF_GLTF = 1;\r\n\r\n    /**\r\n     * PBRMaterialLightFalloff Standard: light is falling off like in the standard material\r\n     * to enhance interoperability with other materials.\r\n     */\r\n    public static readonly LIGHTFALLOFF_STANDARD = 2;\r\n\r\n    /**\r\n     * Intensity of the direct lights e.g. the four lights available in your scene.\r\n     * This impacts both the direct diffuse and specular highlights.\r\n     * @internal\r\n     */\r\n    public _directIntensity: number = 1.0;\r\n\r\n    /**\r\n     * Intensity of the emissive part of the material.\r\n     * This helps controlling the emissive effect without modifying the emissive color.\r\n     * @internal\r\n     */\r\n    public _emissiveIntensity: number = 1.0;\r\n\r\n    /**\r\n     * Intensity of the environment e.g. how much the environment will light the object\r\n     * either through harmonics for rough material or through the reflection for shiny ones.\r\n     * @internal\r\n     */\r\n    public _environmentIntensity: number = 1.0;\r\n\r\n    /**\r\n     * This is a special control allowing the reduction of the specular highlights coming from the\r\n     * four lights of the scene. Those highlights may not be needed in full environment lighting.\r\n     * @internal\r\n     */\r\n    public _specularIntensity: number = 1.0;\r\n\r\n    /**\r\n     * This stores the direct, emissive, environment, and specular light intensities into a Vector4.\r\n     */\r\n    private _lightingInfos: Vector4 = new Vector4(this._directIntensity, this._emissiveIntensity, this._environmentIntensity, this._specularIntensity);\r\n\r\n    /**\r\n     * Debug Control allowing disabling the bump map on this material.\r\n     * @internal\r\n     */\r\n    public _disableBumpMap: boolean = false;\r\n\r\n    /**\r\n     * AKA Diffuse Texture in standard nomenclature.\r\n     * @internal\r\n     */\r\n    public _albedoTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * AKA Occlusion Texture in other nomenclature.\r\n     * @internal\r\n     */\r\n    public _ambientTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * AKA Occlusion Texture Intensity in other nomenclature.\r\n     * @internal\r\n     */\r\n    public _ambientTextureStrength: number = 1.0;\r\n\r\n    /**\r\n     * Defines how much the AO map is occluding the analytical lights (point spot...).\r\n     * 1 means it completely occludes it\r\n     * 0 mean it has no impact\r\n     * @internal\r\n     */\r\n    public _ambientTextureImpactOnAnalyticalLights: number = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS;\r\n\r\n    /**\r\n     * Stores the alpha values in a texture.\r\n     * @internal\r\n     */\r\n    public _opacityTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores the reflection values in a texture.\r\n     * @internal\r\n     */\r\n    public _reflectionTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores the emissive values in a texture.\r\n     * @internal\r\n     */\r\n    public _emissiveTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * AKA Specular texture in other nomenclature.\r\n     * @internal\r\n     */\r\n    public _reflectivityTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Used to switch from specular/glossiness to metallic/roughness workflow.\r\n     * @internal\r\n     */\r\n    public _metallicTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Specifies the metallic scalar of the metallic/roughness workflow.\r\n     * Can also be used to scale the metalness values of the metallic texture.\r\n     * @internal\r\n     */\r\n    public _metallic: Nullable<number> = null;\r\n\r\n    /**\r\n     * Specifies the roughness scalar of the metallic/roughness workflow.\r\n     * Can also be used to scale the roughness values of the metallic texture.\r\n     * @internal\r\n     */\r\n    public _roughness: Nullable<number> = null;\r\n\r\n    /**\r\n     * In metallic workflow, specifies an F0 factor to help configuring the material F0.\r\n     * By default the indexOfrefraction is used to compute F0;\r\n     *\r\n     * This is used as a factor against the default reflectance at normal incidence to tweak it.\r\n     *\r\n     * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor;\r\n     * F90 = metallicReflectanceColor;\r\n     * @internal\r\n     */\r\n    public _metallicF0Factor = 1;\r\n\r\n    /**\r\n     * In metallic workflow, specifies an F90 color to help configuring the material F90.\r\n     * By default the F90 is always 1;\r\n     *\r\n     * Please note that this factor is also used as a factor against the default reflectance at normal incidence.\r\n     *\r\n     * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor\r\n     * F90 = metallicReflectanceColor;\r\n     * @internal\r\n     */\r\n    public _metallicReflectanceColor = Color3.White();\r\n\r\n    /**\r\n     * Specifies that only the A channel from _metallicReflectanceTexture should be used.\r\n     * If false, both RGB and A channels will be used\r\n     * @internal\r\n     */\r\n    public _useOnlyMetallicFromMetallicReflectanceTexture = false;\r\n\r\n    /**\r\n     * Defines to store metallicReflectanceColor in RGB and metallicF0Factor in A\r\n     * This is multiply against the scalar values defined in the material.\r\n     * @internal\r\n     */\r\n    public _metallicReflectanceTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Defines to store reflectanceColor in RGB\r\n     * This is multiplied against the scalar values defined in the material.\r\n     * If both _reflectanceTexture and _metallicReflectanceTexture textures are provided and _useOnlyMetallicFromMetallicReflectanceTexture\r\n     * is false, _metallicReflectanceTexture takes precedence and _reflectanceTexture is not used\r\n     * @internal\r\n     */\r\n    public _reflectanceTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Used to enable roughness/glossiness fetch from a separate channel depending on the current mode.\r\n     * Gray Scale represents roughness in metallic mode and glossiness in specular mode.\r\n     * @internal\r\n     */\r\n    public _microSurfaceTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores surface normal data used to displace a mesh in a texture.\r\n     * @internal\r\n     */\r\n    public _bumpTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores the pre-calculated light information of a mesh in a texture.\r\n     * @internal\r\n     */\r\n    public _lightmapTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * The color of a material in ambient lighting.\r\n     * @internal\r\n     */\r\n    public _ambientColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * AKA Diffuse Color in other nomenclature.\r\n     * @internal\r\n     */\r\n    public _albedoColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * AKA Specular Color in other nomenclature.\r\n     * @internal\r\n     */\r\n    public _reflectivityColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * The color applied when light is reflected from a material.\r\n     * @internal\r\n     */\r\n    public _reflectionColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * The color applied when light is emitted from a material.\r\n     * @internal\r\n     */\r\n    public _emissiveColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * AKA Glossiness in other nomenclature.\r\n     * @internal\r\n     */\r\n    public _microSurface = 0.9;\r\n\r\n    /**\r\n     * Specifies that the material will use the light map as a show map.\r\n     * @internal\r\n     */\r\n    public _useLightmapAsShadowmap = false;\r\n\r\n    /**\r\n     * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\r\n     * makes the reflect vector face the model (under horizon).\r\n     * @internal\r\n     */\r\n    public _useHorizonOcclusion = true;\r\n\r\n    /**\r\n     * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\r\n     * too much the area relying on ambient texture to define their ambient occlusion.\r\n     * @internal\r\n     */\r\n    public _useRadianceOcclusion = true;\r\n\r\n    /**\r\n     * Specifies that the alpha is coming form the albedo channel alpha channel for alpha blending.\r\n     * @internal\r\n     */\r\n    public _useAlphaFromAlbedoTexture = false;\r\n\r\n    /**\r\n     * Specifies that the material will keeps the specular highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good example of that. When sun reflects on it you can not see what is behind.\r\n     * @internal\r\n     */\r\n    public _useSpecularOverAlpha = true;\r\n\r\n    /**\r\n     * Specifies if the reflectivity texture contains the glossiness information in its alpha channel.\r\n     * @internal\r\n     */\r\n    public _useMicroSurfaceFromReflectivityMapAlpha = false;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the roughness information in its alpha channel.\r\n     * @internal\r\n     */\r\n    public _useRoughnessFromMetallicTextureAlpha = true;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the roughness information in its green channel.\r\n     * @internal\r\n     */\r\n    public _useRoughnessFromMetallicTextureGreen = false;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the metallness information in its blue channel.\r\n     * @internal\r\n     */\r\n    public _useMetallnessFromMetallicTextureBlue = false;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the ambient occlusion information in its red channel.\r\n     * @internal\r\n     */\r\n    public _useAmbientOcclusionFromMetallicTextureRed = false;\r\n\r\n    /**\r\n     * Specifies if the ambient texture contains the ambient occlusion information in its red channel only.\r\n     * @internal\r\n     */\r\n    public _useAmbientInGrayScale = false;\r\n\r\n    /**\r\n     * In case the reflectivity map does not contain the microsurface information in its alpha channel,\r\n     * The material will try to infer what glossiness each pixel should be.\r\n     * @internal\r\n     */\r\n    public _useAutoMicroSurfaceFromReflectivityMap = false;\r\n\r\n    /**\r\n     * Defines the  falloff type used in this material.\r\n     * It by default is Physical.\r\n     * @internal\r\n     */\r\n    public _lightFalloff = PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL;\r\n\r\n    /**\r\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good example of that. When the street lights reflects on it you can not see what is behind.\r\n     * @internal\r\n     */\r\n    public _useRadianceOverAlpha = true;\r\n\r\n    /**\r\n     * Allows using an object space normal map (instead of tangent space).\r\n     * @internal\r\n     */\r\n    public _useObjectSpaceNormalMap = false;\r\n\r\n    /**\r\n     * Allows using the bump map in parallax mode.\r\n     * @internal\r\n     */\r\n    public _useParallax = false;\r\n\r\n    /**\r\n     * Allows using the bump map in parallax occlusion mode.\r\n     * @internal\r\n     */\r\n    public _useParallaxOcclusion = false;\r\n\r\n    /**\r\n     * Controls the scale bias of the parallax mode.\r\n     * @internal\r\n     */\r\n    public _parallaxScaleBias = 0.05;\r\n\r\n    /**\r\n     * If sets to true, disables all the lights affecting the material.\r\n     * @internal\r\n     */\r\n    public _disableLighting = false;\r\n\r\n    /**\r\n     * Number of Simultaneous lights allowed on the material.\r\n     * @internal\r\n     */\r\n    public _maxSimultaneousLights = 4;\r\n\r\n    /**\r\n     * If sets to true, x component of normal map value will be inverted (x = 1.0 - x).\r\n     * @internal\r\n     */\r\n    public _invertNormalMapX = false;\r\n\r\n    /**\r\n     * If sets to true, y component of normal map value will be inverted (y = 1.0 - y).\r\n     * @internal\r\n     */\r\n    public _invertNormalMapY = false;\r\n\r\n    /**\r\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\r\n     * @internal\r\n     */\r\n    public _twoSidedLighting = false;\r\n\r\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     * @internal\r\n     */\r\n    public _alphaCutOff = 0.4;\r\n\r\n    /**\r\n     * Enforces alpha test in opaque or blend mode in order to improve the performances of some situations.\r\n     * @internal\r\n     */\r\n    public _forceAlphaTest = false;\r\n\r\n    /**\r\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\r\n     * And/Or occlude the blended part. (alpha is converted to gamma to compute the fresnel)\r\n     * @internal\r\n     */\r\n    public _useAlphaFresnel = false;\r\n\r\n    /**\r\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\r\n     * And/Or occlude the blended part. (alpha stays linear to compute the fresnel)\r\n     * @internal\r\n     */\r\n    public _useLinearAlphaFresnel = false;\r\n\r\n    /**\r\n     * Specifies the environment BRDF texture used to compute the scale and offset roughness values\r\n     * from cos theta and roughness:\r\n     * http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\r\n     * @internal\r\n     */\r\n    public _environmentBRDFTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Force the shader to compute irradiance in the fragment shader in order to take bump in account.\r\n     * @internal\r\n     */\r\n    public _forceIrradianceInFragment = false;\r\n\r\n    private _realTimeFiltering: boolean = false;\r\n    /**\r\n     * Enables realtime filtering on the texture.\r\n     */\r\n    public get realTimeFiltering() {\r\n        return this._realTimeFiltering;\r\n    }\r\n    public set realTimeFiltering(b: boolean) {\r\n        this._realTimeFiltering = b;\r\n        this.markAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private _realTimeFilteringQuality: number = Constants.TEXTURE_FILTERING_QUALITY_LOW;\r\n    /**\r\n     * Quality switch for realtime filtering\r\n     */\r\n    public get realTimeFilteringQuality(): number {\r\n        return this._realTimeFilteringQuality;\r\n    }\r\n    public set realTimeFilteringQuality(n: number) {\r\n        this._realTimeFilteringQuality = n;\r\n        this.markAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Can this material render to several textures at once\r\n     */\r\n    public get canRenderToMRT() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Force normal to face away from face.\r\n     * @internal\r\n     */\r\n    public _forceNormalForward = false;\r\n\r\n    /**\r\n     * Enables specular anti aliasing in the PBR shader.\r\n     * It will both interacts on the Geometry for analytical and IBL lighting.\r\n     * It also prefilter the roughness map based on the bump values.\r\n     * @internal\r\n     */\r\n    public _enableSpecularAntiAliasing = false;\r\n\r\n    /**\r\n     * Default configuration related to image processing available in the PBR Material.\r\n     */\r\n    @serializeAsImageProcessingConfiguration()\r\n    protected _imageProcessingConfiguration: ImageProcessingConfiguration;\r\n\r\n    /**\r\n     * Keep track of the image processing observer to allow dispose and replace.\r\n     */\r\n    private _imageProcessingObserver: Nullable<Observer<ImageProcessingConfiguration>> = null;\r\n\r\n    /**\r\n     * Attaches a new image processing configuration to the PBR Material.\r\n     * @param configuration\r\n     */\r\n    protected _attachImageProcessingConfiguration(configuration: Nullable<ImageProcessingConfiguration>): void {\r\n        if (configuration === this._imageProcessingConfiguration) {\r\n            return;\r\n        }\r\n\r\n        // Detaches observer.\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        // Pick the scene configuration if needed.\r\n        if (!configuration) {\r\n            this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\r\n        } else {\r\n            this._imageProcessingConfiguration = configuration;\r\n        }\r\n\r\n        // Attaches observer.\r\n        if (this._imageProcessingConfiguration) {\r\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\r\n                this._markAllSubMeshesAsImageProcessingDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stores the available render targets.\r\n     */\r\n    private _renderTargets = new SmartArray<RenderTargetTexture>(16);\r\n\r\n    /**\r\n     * Sets the global ambient color for the material used in lighting calculations.\r\n     */\r\n    private _globalAmbientColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * Enables the use of logarithmic depth buffers, which is good for wide depth buffers.\r\n     */\r\n    private _useLogarithmicDepth: boolean = false;\r\n\r\n    /**\r\n     * If set to true, no lighting calculations will be applied.\r\n     */\r\n    private _unlit = false;\r\n\r\n    private _debugMode = 0;\r\n    /**\r\n     * @internal\r\n     * This is reserved for the inspector.\r\n     * Defines the material debug mode.\r\n     * It helps seeing only some components of the material while troubleshooting.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public debugMode = 0;\r\n\r\n    /**\r\n     * @internal\r\n     * This is reserved for the inspector.\r\n     * Specify from where on screen the debug mode should start.\r\n     * The value goes from -1 (full screen) to 1 (not visible)\r\n     * It helps with side by side comparison against the final render\r\n     * This defaults to -1\r\n     */\r\n    private _debugLimit = -1;\r\n\r\n    /**\r\n     * @internal\r\n     * This is reserved for the inspector.\r\n     * As the default viewing range might not be enough (if the ambient is really small for instance)\r\n     * You can use the factor to better multiply the final value.\r\n     */\r\n    private _debugFactor = 1;\r\n\r\n    /**\r\n     * Defines the clear coat layer parameters for the material.\r\n     */\r\n    public readonly clearCoat: PBRClearCoatConfiguration;\r\n\r\n    /**\r\n     * Defines the iridescence layer parameters for the material.\r\n     */\r\n    public readonly iridescence: PBRIridescenceConfiguration;\r\n\r\n    /**\r\n     * Defines the anisotropic parameters for the material.\r\n     */\r\n    public readonly anisotropy: PBRAnisotropicConfiguration;\r\n\r\n    /**\r\n     * Defines the BRDF parameters for the material.\r\n     */\r\n    public readonly brdf: PBRBRDFConfiguration;\r\n\r\n    /**\r\n     * Defines the Sheen parameters for the material.\r\n     */\r\n    public readonly sheen: PBRSheenConfiguration;\r\n\r\n    /**\r\n     * Defines the SubSurface parameters for the material.\r\n     */\r\n    public readonly subSurface: PBRSubSurfaceConfiguration;\r\n\r\n    /**\r\n     * Defines additional PrePass parameters for the material.\r\n     */\r\n    public readonly prePassConfiguration: PrePassConfiguration;\r\n\r\n    /**\r\n     * Defines the detail map parameters for the material.\r\n     */\r\n    public readonly detailMap: DetailMapConfiguration;\r\n\r\n    protected _cacheHasRenderTargetTextures = false;\r\n\r\n    /**\r\n     * Instantiates a new PBRMaterial instance.\r\n     *\r\n     * @param name The material name\r\n     * @param scene The scene the material will be use in.\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n\r\n        this.brdf = new PBRBRDFConfiguration(this);\r\n        this.clearCoat = new PBRClearCoatConfiguration(this);\r\n        this.iridescence = new PBRIridescenceConfiguration(this);\r\n        this.anisotropy = new PBRAnisotropicConfiguration(this);\r\n        this.sheen = new PBRSheenConfiguration(this);\r\n        this.subSurface = new PBRSubSurfaceConfiguration(this);\r\n        this.detailMap = new DetailMapConfiguration(this);\r\n\r\n        // Setup the default processing configuration to the scene.\r\n        this._attachImageProcessingConfiguration(null);\r\n\r\n        this.getRenderTargetTextures = (): SmartArray<RenderTargetTexture> => {\r\n            this._renderTargets.reset();\r\n\r\n            if (MaterialFlags.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n                this._renderTargets.push(<RenderTargetTexture>this._reflectionTexture);\r\n            }\r\n\r\n            this._eventInfo.renderTargets = this._renderTargets;\r\n            this._callbackPluginEventFillRenderTargetTextures(this._eventInfo);\r\n\r\n            return this._renderTargets;\r\n        };\r\n\r\n        this._environmentBRDFTexture = GetEnvironmentBRDFTexture(this.getScene());\r\n        this.prePassConfiguration = new PrePassConfiguration();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     */\r\n    public get hasRenderTargetTextures(): boolean {\r\n        if (MaterialFlags.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n            return true;\r\n        }\r\n\r\n        return this._cacheHasRenderTargetTextures;\r\n    }\r\n\r\n    /**\r\n     * Can this material render to prepass\r\n     */\r\n    public get isPrePassCapable(): boolean {\r\n        return !this.disableDepthWrite;\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the material class.\r\n     */\r\n    public getClassName(): string {\r\n        return \"PBRBaseMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Enabled the use of logarithmic depth buffers, which is good for wide depth buffers.\r\n     */\r\n    @serialize()\r\n    public get useLogarithmicDepth(): boolean {\r\n        return this._useLogarithmicDepth;\r\n    }\r\n\r\n    /**\r\n     * Enabled the use of logarithmic depth buffers, which is good for wide depth buffers.\r\n     */\r\n    public set useLogarithmicDepth(value: boolean) {\r\n        this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;\r\n    }\r\n\r\n    /**\r\n     * Returns true if alpha blending should be disabled.\r\n     */\r\n    protected get _disableAlphaBlending(): boolean {\r\n        return (\r\n            this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_OPAQUE ||\r\n            this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST ||\r\n            this.subSurface?.disableAlphaBlending\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not this material should be rendered in alpha blend mode.\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        if (this._disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return this.alpha < 1.0 || this._opacityTexture != null || this._shouldUseAlphaFromAlbedoTexture();\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not this material should be rendered in alpha test mode.\r\n     */\r\n    public needAlphaTesting(): boolean {\r\n        if (this._forceAlphaTest) {\r\n            return true;\r\n        }\r\n\r\n        if (this.subSurface?.disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST);\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not the alpha value of the albedo texture should be used for alpha blending.\r\n     */\r\n    protected _shouldUseAlphaFromAlbedoTexture(): boolean {\r\n        return this._albedoTexture != null && this._albedoTexture.hasAlpha && this._useAlphaFromAlbedoTexture && this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE;\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not there is a usable alpha channel for transparency.\r\n     */\r\n    protected _hasAlphaChannel(): boolean {\r\n        return (this._albedoTexture != null && this._albedoTexture.hasAlpha) || this._opacityTexture != null;\r\n    }\r\n\r\n    /**\r\n     * Gets the texture used for the alpha test.\r\n     */\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return this._albedoTexture;\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used.\r\n     * @param mesh - BJS mesh.\r\n     * @param subMesh - A submesh of the BJS mesh.  Used to check if it is ready.\r\n     * @param useInstances - Specifies that instances should be used.\r\n     * @returns - boolean indicating that the submesh is ready or not.\r\n     */\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (!this._uniformBufferLayoutBuilt) {\r\n            this.buildUniformLayout();\r\n        }\r\n\r\n        if (subMesh.effect && this.isFrozen) {\r\n            if (subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\r\n            subMesh.materialDefines = new PBRMaterialDefines(this._eventInfo.defineNames);\r\n        }\r\n\r\n        const defines = <PBRMaterialDefines>subMesh.materialDefines;\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        if (defines._areTexturesDirty) {\r\n            this._eventInfo.hasRenderTargetTextures = false;\r\n            this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\r\n            this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\r\n            if (scene.texturesEnabled) {\r\n                if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                    if (!this._ambientTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                    if (!this._opacityTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                const reflectionTexture = this._getReflectionTexture();\r\n                if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    if (!reflectionTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                    if (reflectionTexture.irradianceTexture && !reflectionTexture.irradianceTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                    if (!this._lightmapTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                    if (!this._emissiveTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (MaterialFlags.SpecularTextureEnabled) {\r\n                    if (this._metallicTexture) {\r\n                        if (!this._metallicTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    } else if (this._reflectivityTexture) {\r\n                        if (!this._reflectivityTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (this._metallicReflectanceTexture) {\r\n                        if (!this._metallicReflectanceTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (this._reflectanceTexture) {\r\n                        if (!this._reflectanceTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (this._microSurfaceTexture) {\r\n                        if (!this._microSurfaceTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                    // Bump texture cannot be not blocking.\r\n                    if (!this._bumpTexture.isReady()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    // This is blocking.\r\n                    if (!this._environmentBRDFTexture.isReady()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._eventInfo.isReadyForSubMesh = true;\r\n        this._eventInfo.defines = defines;\r\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\r\n\r\n        if (!this._eventInfo.isReadyForSubMesh) {\r\n            return false;\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\r\n            if (!this._imageProcessingConfiguration.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (!engine.getCaps().standardDerivatives && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            mesh.createNormals(true);\r\n            Logger.Warn(\"PBRMaterial: Normals have been created for the mesh: \" + mesh.name);\r\n        }\r\n\r\n        const previousEffect = subMesh.effect;\r\n        const lightDisposed = defines._areLightsDisposed;\r\n        let effect = this._prepareEffect(mesh, defines, this.onCompiled, this.onError, useInstances, null, subMesh.getRenderingMesh().hasThinInstances);\r\n\r\n        let forceWasNotReadyPreviously = false;\r\n\r\n        if (effect) {\r\n            if (this._onEffectCreatedObservable) {\r\n                onCreatedEffectParameters.effect = effect;\r\n                onCreatedEffectParameters.subMesh = subMesh;\r\n                this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n            }\r\n\r\n            // Use previous effect while new one is compiling\r\n            if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\r\n                effect = previousEffect;\r\n                defines.markAsUnprocessed();\r\n\r\n                forceWasNotReadyPreviously = this.isFrozen;\r\n\r\n                if (lightDisposed) {\r\n                    // re register in case it takes more than one frame.\r\n                    defines._areLightsDisposed = true;\r\n                    return false;\r\n                }\r\n            } else {\r\n                scene.resetCachedMaterial();\r\n                subMesh.setEffect(effect, defines, this._materialContext);\r\n            }\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = forceWasNotReadyPreviously ? false : true;\r\n        subMesh.effect._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        if (scene.performancePriority !== ScenePerformancePriority.BackwardCompatible) {\r\n            this.checkReadyOnlyOnce = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses metallic roughness workflow.\r\n     * @returns boolean specifying if the material uses metallic roughness workflow.\r\n     */\r\n    public isMetallicWorkflow(): boolean {\r\n        if (this._metallic != null || this._roughness != null || this._metallicTexture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareEffect(\r\n        mesh: AbstractMesh,\r\n        defines: PBRMaterialDefines,\r\n        onCompiled: Nullable<(effect: Effect) => void> = null,\r\n        onError: Nullable<(effect: Effect, errors: string) => void> = null,\r\n        useInstances: Nullable<boolean> = null,\r\n        useClipPlane: Nullable<boolean> = null,\r\n        useThinInstances: boolean\r\n    ): Nullable<Effect> {\r\n        this._prepareDefines(mesh, defines, useInstances, useClipPlane, useThinInstances);\r\n\r\n        if (!defines.isDirty) {\r\n            return null;\r\n        }\r\n\r\n        defines.markAsProcessed();\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        // Fallbacks\r\n        const fallbacks = new EffectFallbacks();\r\n        let fallbackRank = 0;\r\n        if (defines.USESPHERICALINVERTEX) {\r\n            fallbacks.addFallback(fallbackRank++, \"USESPHERICALINVERTEX\");\r\n        }\r\n\r\n        if (defines.FOG) {\r\n            fallbacks.addFallback(fallbackRank, \"FOG\");\r\n        }\r\n        if (defines.SPECULARAA) {\r\n            fallbacks.addFallback(fallbackRank, \"SPECULARAA\");\r\n        }\r\n        if (defines.POINTSIZE) {\r\n            fallbacks.addFallback(fallbackRank, \"POINTSIZE\");\r\n        }\r\n        if (defines.LOGARITHMICDEPTH) {\r\n            fallbacks.addFallback(fallbackRank, \"LOGARITHMICDEPTH\");\r\n        }\r\n        if (defines.PARALLAX) {\r\n            fallbacks.addFallback(fallbackRank, \"PARALLAX\");\r\n        }\r\n        if (defines.PARALLAXOCCLUSION) {\r\n            fallbacks.addFallback(fallbackRank++, \"PARALLAXOCCLUSION\");\r\n        }\r\n\r\n        if (defines.ENVIRONMENTBRDF) {\r\n            fallbacks.addFallback(fallbackRank++, \"ENVIRONMENTBRDF\");\r\n        }\r\n\r\n        if (defines.TANGENT) {\r\n            fallbacks.addFallback(fallbackRank++, \"TANGENT\");\r\n        }\r\n\r\n        if (defines.BUMP) {\r\n            fallbacks.addFallback(fallbackRank++, \"BUMP\");\r\n        }\r\n\r\n        fallbackRank = MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights, fallbackRank++);\r\n\r\n        if (defines.SPECULARTERM) {\r\n            fallbacks.addFallback(fallbackRank++, \"SPECULARTERM\");\r\n        }\r\n\r\n        if (defines.USESPHERICALFROMREFLECTIONMAP) {\r\n            fallbacks.addFallback(fallbackRank++, \"USESPHERICALFROMREFLECTIONMAP\");\r\n        }\r\n\r\n        if (defines.USEIRRADIANCEMAP) {\r\n            fallbacks.addFallback(fallbackRank++, \"USEIRRADIANCEMAP\");\r\n        }\r\n\r\n        if (defines.LIGHTMAP) {\r\n            fallbacks.addFallback(fallbackRank++, \"LIGHTMAP\");\r\n        }\r\n\r\n        if (defines.NORMAL) {\r\n            fallbacks.addFallback(fallbackRank++, \"NORMAL\");\r\n        }\r\n\r\n        if (defines.AMBIENT) {\r\n            fallbacks.addFallback(fallbackRank++, \"AMBIENT\");\r\n        }\r\n\r\n        if (defines.EMISSIVE) {\r\n            fallbacks.addFallback(fallbackRank++, \"EMISSIVE\");\r\n        }\r\n\r\n        if (defines.VERTEXCOLOR) {\r\n            fallbacks.addFallback(fallbackRank++, \"VERTEXCOLOR\");\r\n        }\r\n\r\n        if (defines.MORPHTARGETS) {\r\n            fallbacks.addFallback(fallbackRank++, \"MORPHTARGETS\");\r\n        }\r\n\r\n        if (defines.MULTIVIEW) {\r\n            fallbacks.addFallback(0, \"MULTIVIEW\");\r\n        }\r\n\r\n        //Attributes\r\n        const attribs = [VertexBuffer.PositionKind];\r\n\r\n        if (defines.NORMAL) {\r\n            attribs.push(VertexBuffer.NormalKind);\r\n        }\r\n\r\n        if (defines.TANGENT) {\r\n            attribs.push(VertexBuffer.TangentKind);\r\n        }\r\n\r\n        for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n            if (defines[\"UV\" + i]) {\r\n                attribs.push(`uv${i === 1 ? \"\" : i}`);\r\n            }\r\n        }\r\n\r\n        if (defines.VERTEXCOLOR) {\r\n            attribs.push(VertexBuffer.ColorKind);\r\n        }\r\n\r\n        if (defines.INSTANCESCOLOR) {\r\n            attribs.push(VertexBuffer.ColorInstanceKind);\r\n        }\r\n\r\n        MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n        MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n        MaterialHelper.PrepareAttributesForMorphTargets(attribs, mesh, defines);\r\n        MaterialHelper.PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\r\n\r\n        let shaderName = \"pbr\";\r\n\r\n        const uniforms = [\r\n            \"world\",\r\n            \"view\",\r\n            \"viewProjection\",\r\n            \"vEyePosition\",\r\n            \"vLightsType\",\r\n            \"vAmbientColor\",\r\n            \"vAlbedoColor\",\r\n            \"vReflectivityColor\",\r\n            \"vMetallicReflectanceFactors\",\r\n            \"vEmissiveColor\",\r\n            \"visibility\",\r\n            \"vReflectionColor\",\r\n            \"vFogInfos\",\r\n            \"vFogColor\",\r\n            \"pointSize\",\r\n            \"vAlbedoInfos\",\r\n            \"vAmbientInfos\",\r\n            \"vOpacityInfos\",\r\n            \"vReflectionInfos\",\r\n            \"vReflectionPosition\",\r\n            \"vReflectionSize\",\r\n            \"vEmissiveInfos\",\r\n            \"vReflectivityInfos\",\r\n            \"vReflectionFilteringInfo\",\r\n            \"vMetallicReflectanceInfos\",\r\n            \"vReflectanceInfos\",\r\n            \"vMicroSurfaceSamplerInfos\",\r\n            \"vBumpInfos\",\r\n            \"vLightmapInfos\",\r\n            \"mBones\",\r\n            \"albedoMatrix\",\r\n            \"ambientMatrix\",\r\n            \"opacityMatrix\",\r\n            \"reflectionMatrix\",\r\n            \"emissiveMatrix\",\r\n            \"reflectivityMatrix\",\r\n            \"normalMatrix\",\r\n            \"microSurfaceSamplerMatrix\",\r\n            \"bumpMatrix\",\r\n            \"lightmapMatrix\",\r\n            \"metallicReflectanceMatrix\",\r\n            \"reflectanceMatrix\",\r\n            \"vLightingIntensity\",\r\n            \"logarithmicDepthConstant\",\r\n            \"vSphericalX\",\r\n            \"vSphericalY\",\r\n            \"vSphericalZ\",\r\n            \"vSphericalXX_ZZ\",\r\n            \"vSphericalYY_ZZ\",\r\n            \"vSphericalZZ\",\r\n            \"vSphericalXY\",\r\n            \"vSphericalYZ\",\r\n            \"vSphericalZX\",\r\n            \"vSphericalL00\",\r\n            \"vSphericalL1_1\",\r\n            \"vSphericalL10\",\r\n            \"vSphericalL11\",\r\n            \"vSphericalL2_2\",\r\n            \"vSphericalL2_1\",\r\n            \"vSphericalL20\",\r\n            \"vSphericalL21\",\r\n            \"vSphericalL22\",\r\n            \"vReflectionMicrosurfaceInfos\",\r\n            \"vTangentSpaceParams\",\r\n            \"boneTextureWidth\",\r\n            \"vDebugMode\",\r\n            \"morphTargetTextureInfo\",\r\n            \"morphTargetTextureIndices\",\r\n        ];\r\n\r\n        const samplers = [\r\n            \"albedoSampler\",\r\n            \"reflectivitySampler\",\r\n            \"ambientSampler\",\r\n            \"emissiveSampler\",\r\n            \"bumpSampler\",\r\n            \"lightmapSampler\",\r\n            \"opacitySampler\",\r\n            \"reflectionSampler\",\r\n            \"reflectionSamplerLow\",\r\n            \"reflectionSamplerHigh\",\r\n            \"irradianceSampler\",\r\n            \"microSurfaceSampler\",\r\n            \"environmentBrdfSampler\",\r\n            \"boneSampler\",\r\n            \"metallicReflectanceSampler\",\r\n            \"reflectanceSampler\",\r\n            \"morphTargets\",\r\n            \"oitDepthSampler\",\r\n            \"oitFrontColorSampler\",\r\n        ];\r\n\r\n        const uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\r\n\r\n        this._eventInfo.fallbacks = fallbacks;\r\n        this._eventInfo.fallbackRank = fallbackRank;\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.uniforms = uniforms;\r\n        this._eventInfo.attributes = attribs;\r\n        this._eventInfo.samplers = samplers;\r\n        this._eventInfo.uniformBuffersNames = uniformBuffers;\r\n        this._eventInfo.customCode = undefined;\r\n        this._eventInfo.mesh = mesh;\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareEffect, this._eventInfo);\r\n\r\n        PrePassConfiguration.AddUniforms(uniforms);\r\n        PrePassConfiguration.AddSamplers(samplers);\r\n        addClipPlaneUniforms(uniforms);\r\n\r\n        if (ImageProcessingConfiguration) {\r\n            ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\r\n            ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\r\n        }\r\n\r\n        MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n            uniformsNames: uniforms,\r\n            uniformBuffersNames: uniformBuffers,\r\n            samplers: samplers,\r\n            defines: defines,\r\n            maxSimultaneousLights: this._maxSimultaneousLights,\r\n        });\r\n\r\n        const csnrOptions: ICustomShaderNameResolveOptions = {};\r\n\r\n        if (this.customShaderNameResolve) {\r\n            shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\r\n        }\r\n\r\n        const join = defines.toString();\r\n        const effect = engine.createEffect(\r\n            shaderName,\r\n            <IEffectCreationOptions>{\r\n                attributes: attribs,\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: join,\r\n                fallbacks: fallbacks,\r\n                onCompiled: onCompiled,\r\n                onError: onError,\r\n                indexParameters: { maxSimultaneousLights: this._maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS },\r\n                processFinalCode: csnrOptions.processFinalCode,\r\n                processCodeAfterIncludes: this._eventInfo.customCode,\r\n                multiTarget: defines.PREPASS,\r\n            },\r\n            engine\r\n        );\r\n\r\n        this._eventInfo.customCode = undefined;\r\n\r\n        return effect;\r\n    }\r\n\r\n    private _prepareDefines(\r\n        mesh: AbstractMesh,\r\n        defines: PBRMaterialDefines,\r\n        useInstances: Nullable<boolean> = null,\r\n        useClipPlane: Nullable<boolean> = null,\r\n        useThinInstances: boolean = false\r\n    ): void {\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        // Lights\r\n        MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\r\n        defines._needNormals = true;\r\n\r\n        // Multiview\r\n        MaterialHelper.PrepareDefinesForMultiview(scene, defines);\r\n\r\n        // PrePass\r\n        const oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\r\n        MaterialHelper.PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\r\n\r\n        // Order independant transparency\r\n        MaterialHelper.PrepareDefinesForOIT(scene, defines, oit);\r\n\r\n        // Textures\r\n        defines.METALLICWORKFLOW = this.isMetallicWorkflow();\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                defines.ALBEDODIRECTUV = 0;\r\n                defines.AMBIENTDIRECTUV = 0;\r\n                defines.OPACITYDIRECTUV = 0;\r\n                defines.EMISSIVEDIRECTUV = 0;\r\n                defines.REFLECTIVITYDIRECTUV = 0;\r\n                defines.MICROSURFACEMAPDIRECTUV = 0;\r\n                defines.METALLIC_REFLECTANCEDIRECTUV = 0;\r\n                defines.REFLECTANCEDIRECTUV = 0;\r\n                defines.BUMPDIRECTUV = 0;\r\n                defines.LIGHTMAPDIRECTUV = 0;\r\n\r\n                if (engine.getCaps().textureLOD) {\r\n                    defines.LODBASEDMICROSFURACE = true;\r\n                }\r\n\r\n                if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._albedoTexture, defines, \"ALBEDO\");\r\n                    defines.GAMMAALBEDO = this._albedoTexture.gammaSpace;\r\n                } else {\r\n                    defines.ALBEDO = false;\r\n                }\r\n\r\n                if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\r\n                    defines.AMBIENTINGRAYSCALE = this._useAmbientInGrayScale;\r\n                } else {\r\n                    defines.AMBIENT = false;\r\n                }\r\n\r\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\r\n                    defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\r\n                } else {\r\n                    defines.OPACITY = false;\r\n                }\r\n\r\n                const reflectionTexture = this._getReflectionTexture();\r\n                if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    defines.REFLECTION = true;\r\n                    defines.GAMMAREFLECTION = reflectionTexture.gammaSpace;\r\n                    defines.RGBDREFLECTION = reflectionTexture.isRGBD;\r\n                    defines.LODINREFLECTIONALPHA = reflectionTexture.lodLevelInAlpha;\r\n                    defines.LINEARSPECULARREFLECTION = reflectionTexture.linearSpecularLOD;\r\n\r\n                    if (this.realTimeFiltering && this.realTimeFilteringQuality > 0) {\r\n                        defines.NUM_SAMPLES = \"\" + this.realTimeFilteringQuality;\r\n                        if (engine._features.needTypeSuffixInShaderConstants) {\r\n                            defines.NUM_SAMPLES = defines.NUM_SAMPLES + \"u\";\r\n                        }\r\n\r\n                        defines.REALTIME_FILTERING = true;\r\n                    } else {\r\n                        defines.REALTIME_FILTERING = false;\r\n                    }\r\n\r\n                    if (reflectionTexture.coordinatesMode === Texture.INVCUBIC_MODE) {\r\n                        defines.INVERTCUBICMAP = true;\r\n                    }\r\n\r\n                    defines.REFLECTIONMAP_3D = reflectionTexture.isCube;\r\n                    defines.REFLECTIONMAP_OPPOSITEZ = defines.REFLECTIONMAP_3D && this.getScene().useRightHandedSystem ? !reflectionTexture.invertZ : reflectionTexture.invertZ;\r\n\r\n                    defines.REFLECTIONMAP_CUBIC = false;\r\n                    defines.REFLECTIONMAP_EXPLICIT = false;\r\n                    defines.REFLECTIONMAP_PLANAR = false;\r\n                    defines.REFLECTIONMAP_PROJECTION = false;\r\n                    defines.REFLECTIONMAP_SKYBOX = false;\r\n                    defines.REFLECTIONMAP_SPHERICAL = false;\r\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR = false;\r\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\r\n                    defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\r\n\r\n                    switch (reflectionTexture.coordinatesMode) {\r\n                        case Texture.EXPLICIT_MODE:\r\n                            defines.REFLECTIONMAP_EXPLICIT = true;\r\n                            break;\r\n                        case Texture.PLANAR_MODE:\r\n                            defines.REFLECTIONMAP_PLANAR = true;\r\n                            break;\r\n                        case Texture.PROJECTION_MODE:\r\n                            defines.REFLECTIONMAP_PROJECTION = true;\r\n                            break;\r\n                        case Texture.SKYBOX_MODE:\r\n                            defines.REFLECTIONMAP_SKYBOX = true;\r\n                            break;\r\n                        case Texture.SPHERICAL_MODE:\r\n                            defines.REFLECTIONMAP_SPHERICAL = true;\r\n                            break;\r\n                        case Texture.EQUIRECTANGULAR_MODE:\r\n                            defines.REFLECTIONMAP_EQUIRECTANGULAR = true;\r\n                            break;\r\n                        case Texture.FIXED_EQUIRECTANGULAR_MODE:\r\n                            defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = true;\r\n                            break;\r\n                        case Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE:\r\n                            defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = true;\r\n                            break;\r\n                        case Texture.CUBIC_MODE:\r\n                        case Texture.INVCUBIC_MODE:\r\n                        default:\r\n                            defines.REFLECTIONMAP_CUBIC = true;\r\n                            defines.USE_LOCAL_REFLECTIONMAP_CUBIC = (<any>reflectionTexture).boundingBoxSize ? true : false;\r\n                            break;\r\n                    }\r\n\r\n                    if (reflectionTexture.coordinatesMode !== Texture.SKYBOX_MODE) {\r\n                        if (reflectionTexture.irradianceTexture) {\r\n                            defines.USEIRRADIANCEMAP = true;\r\n                            defines.USESPHERICALFROMREFLECTIONMAP = false;\r\n                        }\r\n                        // Assume using spherical polynomial if the reflection texture is a cube map\r\n                        else if (reflectionTexture.isCube) {\r\n                            defines.USESPHERICALFROMREFLECTIONMAP = true;\r\n                            defines.USEIRRADIANCEMAP = false;\r\n                            if (this._forceIrradianceInFragment || this.realTimeFiltering || engine.getCaps().maxVaryingVectors <= 8) {\r\n                                defines.USESPHERICALINVERTEX = false;\r\n                            } else {\r\n                                defines.USESPHERICALINVERTEX = true;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    defines.REFLECTION = false;\r\n                    defines.REFLECTIONMAP_3D = false;\r\n                    defines.REFLECTIONMAP_SPHERICAL = false;\r\n                    defines.REFLECTIONMAP_PLANAR = false;\r\n                    defines.REFLECTIONMAP_CUBIC = false;\r\n                    defines.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\r\n                    defines.REFLECTIONMAP_PROJECTION = false;\r\n                    defines.REFLECTIONMAP_SKYBOX = false;\r\n                    defines.REFLECTIONMAP_EXPLICIT = false;\r\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR = false;\r\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\r\n                    defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\r\n                    defines.INVERTCUBICMAP = false;\r\n                    defines.USESPHERICALFROMREFLECTIONMAP = false;\r\n                    defines.USEIRRADIANCEMAP = false;\r\n                    defines.USESPHERICALINVERTEX = false;\r\n                    defines.REFLECTIONMAP_OPPOSITEZ = false;\r\n                    defines.LODINREFLECTIONALPHA = false;\r\n                    defines.GAMMAREFLECTION = false;\r\n                    defines.RGBDREFLECTION = false;\r\n                    defines.LINEARSPECULARREFLECTION = false;\r\n                }\r\n\r\n                if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\r\n                    defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\r\n                    defines.GAMMALIGHTMAP = this._lightmapTexture.gammaSpace;\r\n                    defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\r\n                } else {\r\n                    defines.LIGHTMAP = false;\r\n                }\r\n\r\n                if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\r\n                    defines.GAMMAEMISSIVE = this._emissiveTexture.gammaSpace;\r\n                } else {\r\n                    defines.EMISSIVE = false;\r\n                }\r\n\r\n                if (MaterialFlags.SpecularTextureEnabled) {\r\n                    if (this._metallicTexture) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._metallicTexture, defines, \"REFLECTIVITY\");\r\n                        defines.ROUGHNESSSTOREINMETALMAPALPHA = this._useRoughnessFromMetallicTextureAlpha;\r\n                        defines.ROUGHNESSSTOREINMETALMAPGREEN = !this._useRoughnessFromMetallicTextureAlpha && this._useRoughnessFromMetallicTextureGreen;\r\n                        defines.METALLNESSSTOREINMETALMAPBLUE = this._useMetallnessFromMetallicTextureBlue;\r\n                        defines.AOSTOREINMETALMAPRED = this._useAmbientOcclusionFromMetallicTextureRed;\r\n                        defines.REFLECTIVITY_GAMMA = false;\r\n                    } else if (this._reflectivityTexture) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._reflectivityTexture, defines, \"REFLECTIVITY\");\r\n                        defines.MICROSURFACEFROMREFLECTIVITYMAP = this._useMicroSurfaceFromReflectivityMapAlpha;\r\n                        defines.MICROSURFACEAUTOMATIC = this._useAutoMicroSurfaceFromReflectivityMap;\r\n                        defines.REFLECTIVITY_GAMMA = this._reflectivityTexture.gammaSpace;\r\n                    } else {\r\n                        defines.REFLECTIVITY = false;\r\n                    }\r\n\r\n                    if (this._metallicReflectanceTexture || this._reflectanceTexture) {\r\n                        const identicalTextures =\r\n                            this._metallicReflectanceTexture !== null &&\r\n                            this._metallicReflectanceTexture._texture === this._reflectanceTexture?._texture &&\r\n                            this._metallicReflectanceTexture.checkTransformsAreIdentical(this._reflectanceTexture);\r\n\r\n                        defines.METALLIC_REFLECTANCE_USE_ALPHA_ONLY = this._useOnlyMetallicFromMetallicReflectanceTexture && !identicalTextures;\r\n                        if (this._metallicReflectanceTexture) {\r\n                            MaterialHelper.PrepareDefinesForMergedUV(this._metallicReflectanceTexture, defines, \"METALLIC_REFLECTANCE\");\r\n                            defines.METALLIC_REFLECTANCE_GAMMA = this._metallicReflectanceTexture.gammaSpace;\r\n                        } else {\r\n                            defines.METALLIC_REFLECTANCE = false;\r\n                        }\r\n                        if (\r\n                            this._reflectanceTexture &&\r\n                            !identicalTextures &&\r\n                            (!this._metallicReflectanceTexture || (this._metallicReflectanceTexture && this._useOnlyMetallicFromMetallicReflectanceTexture))\r\n                        ) {\r\n                            MaterialHelper.PrepareDefinesForMergedUV(this._reflectanceTexture, defines, \"REFLECTANCE\");\r\n                            defines.REFLECTANCE_GAMMA = this._reflectanceTexture.gammaSpace;\r\n                        } else {\r\n                            defines.REFLECTANCE = false;\r\n                        }\r\n                    } else {\r\n                        defines.METALLIC_REFLECTANCE = false;\r\n                        defines.REFLECTANCE = false;\r\n                    }\r\n\r\n                    if (this._microSurfaceTexture) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._microSurfaceTexture, defines, \"MICROSURFACEMAP\");\r\n                    } else {\r\n                        defines.MICROSURFACEMAP = false;\r\n                    }\r\n                } else {\r\n                    defines.REFLECTIVITY = false;\r\n                    defines.MICROSURFACEMAP = false;\r\n                }\r\n\r\n                if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\r\n\r\n                    if (this._useParallax && this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                        defines.PARALLAX = true;\r\n                        defines.PARALLAXOCCLUSION = !!this._useParallaxOcclusion;\r\n                    } else {\r\n                        defines.PARALLAX = false;\r\n                    }\r\n\r\n                    defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\r\n                } else {\r\n                    defines.BUMP = false;\r\n                    defines.PARALLAX = false;\r\n                    defines.PARALLAXOCCLUSION = false;\r\n                    defines.OBJECTSPACE_NORMALMAP = false;\r\n                }\r\n\r\n                if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    defines.ENVIRONMENTBRDF = true;\r\n                    defines.ENVIRONMENTBRDF_RGBD = this._environmentBRDFTexture.isRGBD;\r\n                } else {\r\n                    defines.ENVIRONMENTBRDF = false;\r\n                    defines.ENVIRONMENTBRDF_RGBD = false;\r\n                }\r\n\r\n                if (this._shouldUseAlphaFromAlbedoTexture()) {\r\n                    defines.ALPHAFROMALBEDO = true;\r\n                } else {\r\n                    defines.ALPHAFROMALBEDO = false;\r\n                }\r\n            }\r\n\r\n            defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\r\n\r\n            if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_STANDARD) {\r\n                defines.USEPHYSICALLIGHTFALLOFF = false;\r\n                defines.USEGLTFLIGHTFALLOFF = false;\r\n            } else if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF) {\r\n                defines.USEPHYSICALLIGHTFALLOFF = false;\r\n                defines.USEGLTFLIGHTFALLOFF = true;\r\n            } else {\r\n                defines.USEPHYSICALLIGHTFALLOFF = true;\r\n                defines.USEGLTFLIGHTFALLOFF = false;\r\n            }\r\n\r\n            defines.RADIANCEOVERALPHA = this._useRadianceOverAlpha;\r\n\r\n            if (!this.backFaceCulling && this._twoSidedLighting) {\r\n                defines.TWOSIDEDLIGHTING = true;\r\n            } else {\r\n                defines.TWOSIDEDLIGHTING = false;\r\n            }\r\n\r\n            defines.SPECULARAA = engine.getCaps().standardDerivatives && this._enableSpecularAntiAliasing;\r\n        }\r\n\r\n        if (defines._areTexturesDirty || defines._areMiscDirty) {\r\n            defines.ALPHATESTVALUE = `${this._alphaCutOff}${this._alphaCutOff % 1 === 0 ? \".\" : \"\"}`;\r\n            defines.PREMULTIPLYALPHA = this.alphaMode === Constants.ALPHA_PREMULTIPLIED || this.alphaMode === Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\r\n            defines.ALPHABLEND = this.needAlphaBlendingForMesh(mesh);\r\n            defines.ALPHAFRESNEL = this._useAlphaFresnel || this._useLinearAlphaFresnel;\r\n            defines.LINEARALPHAFRESNEL = this._useLinearAlphaFresnel;\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\r\n            this._imageProcessingConfiguration.prepareDefines(defines);\r\n        }\r\n\r\n        defines.FORCENORMALFORWARD = this._forceNormalForward;\r\n\r\n        defines.RADIANCEOCCLUSION = this._useRadianceOcclusion;\r\n\r\n        defines.HORIZONOCCLUSION = this._useHorizonOcclusion;\r\n\r\n        // Misc.\r\n        if (defines._areMiscDirty) {\r\n            MaterialHelper.PrepareDefinesForMisc(\r\n                mesh,\r\n                scene,\r\n                this._useLogarithmicDepth,\r\n                this.pointsCloud,\r\n                this.fogEnabled,\r\n                this._shouldTurnAlphaTestOn(mesh) || this._forceAlphaTest,\r\n                defines\r\n            );\r\n            defines.UNLIT = this._unlit || ((this.pointsCloud || this.wireframe) && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind));\r\n            defines.DEBUGMODE = this._debugMode;\r\n        }\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false, useClipPlane, useThinInstances);\r\n\r\n        // External config\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.mesh = mesh;\r\n        this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true, true, this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE);\r\n\r\n        // External config\r\n        this._callbackPluginEventPrepareDefines(this._eventInfo);\r\n    }\r\n\r\n    /**\r\n     * Force shader compilation\r\n     * @param mesh\r\n     * @param onCompiled\r\n     * @param options\r\n     */\r\n    public forceCompilation(mesh: AbstractMesh, onCompiled?: (material: Material) => void, options?: Partial<IMaterialCompilationOptions>): void {\r\n        const localOptions = {\r\n            clipPlane: false,\r\n            useInstances: false,\r\n            ...options,\r\n        };\r\n\r\n        if (!this._uniformBufferLayoutBuilt) {\r\n            this.buildUniformLayout();\r\n        }\r\n\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\r\n        const defines = new PBRMaterialDefines(this._eventInfo.defineNames);\r\n        const effect = this._prepareEffect(mesh, defines, undefined, undefined, localOptions.useInstances, localOptions.clipPlane, mesh.hasThinInstances)!;\r\n        if (this._onEffectCreatedObservable) {\r\n            onCreatedEffectParameters.effect = effect;\r\n            onCreatedEffectParameters.subMesh = null;\r\n            this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n        }\r\n        if (effect.isReady()) {\r\n            if (onCompiled) {\r\n                onCompiled(this);\r\n            }\r\n        } else {\r\n            effect.onCompileObservable.add(() => {\r\n                if (onCompiled) {\r\n                    onCompiled(this);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the uniform buffer layout for the shader.\r\n     */\r\n    public buildUniformLayout(): void {\r\n        // Order is important !\r\n        const ubo = this._uniformBuffer;\r\n        ubo.addUniform(\"vAlbedoInfos\", 2);\r\n        ubo.addUniform(\"vAmbientInfos\", 4);\r\n        ubo.addUniform(\"vOpacityInfos\", 2);\r\n        ubo.addUniform(\"vEmissiveInfos\", 2);\r\n        ubo.addUniform(\"vLightmapInfos\", 2);\r\n        ubo.addUniform(\"vReflectivityInfos\", 3);\r\n        ubo.addUniform(\"vMicroSurfaceSamplerInfos\", 2);\r\n        ubo.addUniform(\"vReflectionInfos\", 2);\r\n        ubo.addUniform(\"vReflectionFilteringInfo\", 2);\r\n        ubo.addUniform(\"vReflectionPosition\", 3);\r\n        ubo.addUniform(\"vReflectionSize\", 3);\r\n        ubo.addUniform(\"vBumpInfos\", 3);\r\n        ubo.addUniform(\"albedoMatrix\", 16);\r\n        ubo.addUniform(\"ambientMatrix\", 16);\r\n        ubo.addUniform(\"opacityMatrix\", 16);\r\n        ubo.addUniform(\"emissiveMatrix\", 16);\r\n        ubo.addUniform(\"lightmapMatrix\", 16);\r\n        ubo.addUniform(\"reflectivityMatrix\", 16);\r\n        ubo.addUniform(\"microSurfaceSamplerMatrix\", 16);\r\n        ubo.addUniform(\"bumpMatrix\", 16);\r\n        ubo.addUniform(\"vTangentSpaceParams\", 2);\r\n        ubo.addUniform(\"reflectionMatrix\", 16);\r\n\r\n        ubo.addUniform(\"vReflectionColor\", 3);\r\n        ubo.addUniform(\"vAlbedoColor\", 4);\r\n        ubo.addUniform(\"vLightingIntensity\", 4);\r\n\r\n        ubo.addUniform(\"vReflectionMicrosurfaceInfos\", 3);\r\n        ubo.addUniform(\"pointSize\", 1);\r\n        ubo.addUniform(\"vReflectivityColor\", 4);\r\n        ubo.addUniform(\"vEmissiveColor\", 3);\r\n        ubo.addUniform(\"vAmbientColor\", 3);\r\n\r\n        ubo.addUniform(\"vDebugMode\", 2);\r\n\r\n        ubo.addUniform(\"vMetallicReflectanceFactors\", 4);\r\n        ubo.addUniform(\"vMetallicReflectanceInfos\", 2);\r\n        ubo.addUniform(\"metallicReflectanceMatrix\", 16);\r\n        ubo.addUniform(\"vReflectanceInfos\", 2);\r\n        ubo.addUniform(\"reflectanceMatrix\", 16);\r\n\r\n        ubo.addUniform(\"vSphericalL00\", 3);\r\n        ubo.addUniform(\"vSphericalL1_1\", 3);\r\n        ubo.addUniform(\"vSphericalL10\", 3);\r\n        ubo.addUniform(\"vSphericalL11\", 3);\r\n        ubo.addUniform(\"vSphericalL2_2\", 3);\r\n        ubo.addUniform(\"vSphericalL2_1\", 3);\r\n        ubo.addUniform(\"vSphericalL20\", 3);\r\n        ubo.addUniform(\"vSphericalL21\", 3);\r\n        ubo.addUniform(\"vSphericalL22\", 3);\r\n\r\n        ubo.addUniform(\"vSphericalX\", 3);\r\n        ubo.addUniform(\"vSphericalY\", 3);\r\n        ubo.addUniform(\"vSphericalZ\", 3);\r\n        ubo.addUniform(\"vSphericalXX_ZZ\", 3);\r\n        ubo.addUniform(\"vSphericalYY_ZZ\", 3);\r\n        ubo.addUniform(\"vSphericalZZ\", 3);\r\n        ubo.addUniform(\"vSphericalXY\", 3);\r\n        ubo.addUniform(\"vSphericalYZ\", 3);\r\n        ubo.addUniform(\"vSphericalZX\", 3);\r\n\r\n        super.buildUniformLayout();\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh data.\r\n     * @param world - The world matrix.\r\n     * @param mesh - The BJS mesh.\r\n     * @param subMesh - A submesh of the BJS mesh.\r\n     */\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <PBRMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices Mesh.\r\n        mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n        mesh.transferToEffect(world);\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Binding unconditionally\r\n        this._uniformBuffer.bindToEffect(effect, \"Material\");\r\n\r\n        this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\r\n\r\n        this._eventInfo.subMesh = subMesh;\r\n        this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\r\n\r\n        // Normal Matrix\r\n        if (defines.OBJECTSPACE_NORMALMAP) {\r\n            world.toNormalMatrix(this._normalMatrix);\r\n            this.bindOnlyNormalMatrix(this._normalMatrix);\r\n        }\r\n\r\n        const mustRebind = effect._forceRebindOnNextCall || this._mustRebind(scene, effect, mesh.visibility);\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect, this.prePassConfiguration);\r\n\r\n        let reflectionTexture: Nullable<BaseTexture> = null;\r\n        const ubo = this._uniformBuffer;\r\n        if (mustRebind) {\r\n            this.bindViewProjection(effect);\r\n            reflectionTexture = this._getReflectionTexture();\r\n\r\n            if (!ubo.useUbo || !this.isFrozen || !ubo.isSync || effect._forceRebindOnNextCall) {\r\n                // Texture uniforms\r\n                if (scene.texturesEnabled) {\r\n                    if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                        ubo.updateFloat2(\"vAlbedoInfos\", this._albedoTexture.coordinatesIndex, this._albedoTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._albedoTexture, ubo, \"albedo\");\r\n                    }\r\n\r\n                    if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                        ubo.updateFloat4(\r\n                            \"vAmbientInfos\",\r\n                            this._ambientTexture.coordinatesIndex,\r\n                            this._ambientTexture.level,\r\n                            this._ambientTextureStrength,\r\n                            this._ambientTextureImpactOnAnalyticalLights\r\n                        );\r\n                        MaterialHelper.BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\r\n                    }\r\n\r\n                    if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                        ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\r\n                    }\r\n\r\n                    if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                        ubo.updateMatrix(\"reflectionMatrix\", reflectionTexture.getReflectionTextureMatrix());\r\n                        ubo.updateFloat2(\"vReflectionInfos\", reflectionTexture.level, 0);\r\n\r\n                        if ((<any>reflectionTexture).boundingBoxSize) {\r\n                            const cubeTexture = <CubeTexture>reflectionTexture;\r\n\r\n                            ubo.updateVector3(\"vReflectionPosition\", cubeTexture.boundingBoxPosition);\r\n                            ubo.updateVector3(\"vReflectionSize\", cubeTexture.boundingBoxSize);\r\n                        }\r\n\r\n                        if (this.realTimeFiltering) {\r\n                            const width = reflectionTexture.getSize().width;\r\n                            ubo.updateFloat2(\"vReflectionFilteringInfo\", width, Scalar.Log2(width));\r\n                        }\r\n\r\n                        if (!defines.USEIRRADIANCEMAP) {\r\n                            const polynomials = reflectionTexture.sphericalPolynomial;\r\n                            if (defines.USESPHERICALFROMREFLECTIONMAP && polynomials) {\r\n                                if (defines.SPHERICAL_HARMONICS) {\r\n                                    const preScaledHarmonics = polynomials.preScaledHarmonics;\r\n                                    ubo.updateVector3(\"vSphericalL00\", preScaledHarmonics.l00);\r\n                                    ubo.updateVector3(\"vSphericalL1_1\", preScaledHarmonics.l1_1);\r\n                                    ubo.updateVector3(\"vSphericalL10\", preScaledHarmonics.l10);\r\n                                    ubo.updateVector3(\"vSphericalL11\", preScaledHarmonics.l11);\r\n                                    ubo.updateVector3(\"vSphericalL2_2\", preScaledHarmonics.l2_2);\r\n                                    ubo.updateVector3(\"vSphericalL2_1\", preScaledHarmonics.l2_1);\r\n                                    ubo.updateVector3(\"vSphericalL20\", preScaledHarmonics.l20);\r\n                                    ubo.updateVector3(\"vSphericalL21\", preScaledHarmonics.l21);\r\n                                    ubo.updateVector3(\"vSphericalL22\", preScaledHarmonics.l22);\r\n                                } else {\r\n                                    ubo.updateFloat3(\"vSphericalX\", polynomials.x.x, polynomials.x.y, polynomials.x.z);\r\n                                    ubo.updateFloat3(\"vSphericalY\", polynomials.y.x, polynomials.y.y, polynomials.y.z);\r\n                                    ubo.updateFloat3(\"vSphericalZ\", polynomials.z.x, polynomials.z.y, polynomials.z.z);\r\n                                    ubo.updateFloat3(\r\n                                        \"vSphericalXX_ZZ\",\r\n                                        polynomials.xx.x - polynomials.zz.x,\r\n                                        polynomials.xx.y - polynomials.zz.y,\r\n                                        polynomials.xx.z - polynomials.zz.z\r\n                                    );\r\n                                    ubo.updateFloat3(\r\n                                        \"vSphericalYY_ZZ\",\r\n                                        polynomials.yy.x - polynomials.zz.x,\r\n                                        polynomials.yy.y - polynomials.zz.y,\r\n                                        polynomials.yy.z - polynomials.zz.z\r\n                                    );\r\n                                    ubo.updateFloat3(\"vSphericalZZ\", polynomials.zz.x, polynomials.zz.y, polynomials.zz.z);\r\n                                    ubo.updateFloat3(\"vSphericalXY\", polynomials.xy.x, polynomials.xy.y, polynomials.xy.z);\r\n                                    ubo.updateFloat3(\"vSphericalYZ\", polynomials.yz.x, polynomials.yz.y, polynomials.yz.z);\r\n                                    ubo.updateFloat3(\"vSphericalZX\", polynomials.zx.x, polynomials.zx.y, polynomials.zx.z);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        ubo.updateFloat3(\r\n                            \"vReflectionMicrosurfaceInfos\",\r\n                            reflectionTexture.getSize().width,\r\n                            reflectionTexture.lodGenerationScale,\r\n                            reflectionTexture.lodGenerationOffset\r\n                        );\r\n                    }\r\n\r\n                    if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                        ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\r\n                    }\r\n\r\n                    if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                        ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\r\n                    }\r\n\r\n                    if (MaterialFlags.SpecularTextureEnabled) {\r\n                        if (this._metallicTexture) {\r\n                            ubo.updateFloat3(\"vReflectivityInfos\", this._metallicTexture.coordinatesIndex, this._metallicTexture.level, this._ambientTextureStrength);\r\n                            MaterialHelper.BindTextureMatrix(this._metallicTexture, ubo, \"reflectivity\");\r\n                        } else if (this._reflectivityTexture) {\r\n                            ubo.updateFloat3(\"vReflectivityInfos\", this._reflectivityTexture.coordinatesIndex, this._reflectivityTexture.level, 1.0);\r\n                            MaterialHelper.BindTextureMatrix(this._reflectivityTexture, ubo, \"reflectivity\");\r\n                        }\r\n\r\n                        if (this._metallicReflectanceTexture) {\r\n                            ubo.updateFloat2(\"vMetallicReflectanceInfos\", this._metallicReflectanceTexture.coordinatesIndex, this._metallicReflectanceTexture.level);\r\n                            MaterialHelper.BindTextureMatrix(this._metallicReflectanceTexture, ubo, \"metallicReflectance\");\r\n                        }\r\n\r\n                        if (this._reflectanceTexture && defines.REFLECTANCE) {\r\n                            ubo.updateFloat2(\"vReflectanceInfos\", this._reflectanceTexture.coordinatesIndex, this._reflectanceTexture.level);\r\n                            MaterialHelper.BindTextureMatrix(this._reflectanceTexture, ubo, \"reflectance\");\r\n                        }\r\n\r\n                        if (this._microSurfaceTexture) {\r\n                            ubo.updateFloat2(\"vMicroSurfaceSamplerInfos\", this._microSurfaceTexture.coordinatesIndex, this._microSurfaceTexture.level);\r\n                            MaterialHelper.BindTextureMatrix(this._microSurfaceTexture, ubo, \"microSurfaceSampler\");\r\n                        }\r\n                    }\r\n\r\n                    if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                        ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level, this._parallaxScaleBias);\r\n                        MaterialHelper.BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\r\n\r\n                        if (scene._mirroredCameraPosition) {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\r\n                        } else {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Point size\r\n                if (this.pointsCloud) {\r\n                    ubo.updateFloat(\"pointSize\", this.pointSize);\r\n                }\r\n\r\n                // Colors\r\n                if (defines.METALLICWORKFLOW) {\r\n                    TmpColors.Color3[0].r = this._metallic === undefined || this._metallic === null ? 1 : this._metallic;\r\n                    TmpColors.Color3[0].g = this._roughness === undefined || this._roughness === null ? 1 : this._roughness;\r\n                    ubo.updateColor4(\"vReflectivityColor\", TmpColors.Color3[0], 1);\r\n\r\n                    const ior = this.subSurface?._indexOfRefraction ?? 1.5;\r\n                    const outsideIOR = 1; // consider air as clear coat and other layers would remap in the shader.\r\n\r\n                    // We are here deriving our default reflectance from a common value for none metallic surface.\r\n                    // Based of the schlick fresnel approximation model\r\n                    // for dielectrics.\r\n                    const f0 = Math.pow((ior - outsideIOR) / (ior + outsideIOR), 2);\r\n\r\n                    // Tweak the default F0 and F90 based on our given setup\r\n                    this._metallicReflectanceColor.scaleToRef(f0 * this._metallicF0Factor, TmpColors.Color3[0]);\r\n                    const metallicF90 = this._metallicF0Factor;\r\n\r\n                    ubo.updateColor4(\"vMetallicReflectanceFactors\", TmpColors.Color3[0], metallicF90);\r\n                } else {\r\n                    ubo.updateColor4(\"vReflectivityColor\", this._reflectivityColor, this._microSurface);\r\n                }\r\n\r\n                ubo.updateColor3(\"vEmissiveColor\", MaterialFlags.EmissiveTextureEnabled ? this._emissiveColor : Color3.BlackReadOnly);\r\n                ubo.updateColor3(\"vReflectionColor\", this._reflectionColor);\r\n                if (!defines.SS_REFRACTION && this.subSurface?._linkRefractionWithTransparency) {\r\n                    ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, 1);\r\n                } else {\r\n                    ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, this.alpha);\r\n                }\r\n\r\n                // Misc\r\n                this._lightingInfos.x = this._directIntensity;\r\n                this._lightingInfos.y = this._emissiveIntensity;\r\n                this._lightingInfos.z = this._environmentIntensity * scene.environmentIntensity;\r\n                this._lightingInfos.w = this._specularIntensity;\r\n\r\n                ubo.updateVector4(\"vLightingIntensity\", this._lightingInfos);\r\n\r\n                // Colors\r\n                scene.ambientColor.multiplyToRef(this._ambientColor, this._globalAmbientColor);\r\n\r\n                ubo.updateColor3(\"vAmbientColor\", this._globalAmbientColor);\r\n\r\n                ubo.updateFloat2(\"vDebugMode\", this._debugLimit, this._debugFactor);\r\n            }\r\n\r\n            // Textures\r\n            if (scene.texturesEnabled) {\r\n                if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    ubo.setTexture(\"albedoSampler\", this._albedoTexture);\r\n                }\r\n\r\n                if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                    ubo.setTexture(\"ambientSampler\", this._ambientTexture);\r\n                }\r\n\r\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                    ubo.setTexture(\"opacitySampler\", this._opacityTexture);\r\n                }\r\n\r\n                if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    if (defines.LODBASEDMICROSFURACE) {\r\n                        ubo.setTexture(\"reflectionSampler\", reflectionTexture);\r\n                    } else {\r\n                        ubo.setTexture(\"reflectionSampler\", reflectionTexture._lodTextureMid || reflectionTexture);\r\n                        ubo.setTexture(\"reflectionSamplerLow\", reflectionTexture._lodTextureLow || reflectionTexture);\r\n                        ubo.setTexture(\"reflectionSamplerHigh\", reflectionTexture._lodTextureHigh || reflectionTexture);\r\n                    }\r\n\r\n                    if (defines.USEIRRADIANCEMAP) {\r\n                        ubo.setTexture(\"irradianceSampler\", reflectionTexture.irradianceTexture);\r\n                    }\r\n                }\r\n\r\n                if (defines.ENVIRONMENTBRDF) {\r\n                    ubo.setTexture(\"environmentBrdfSampler\", this._environmentBRDFTexture);\r\n                }\r\n\r\n                if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                    ubo.setTexture(\"emissiveSampler\", this._emissiveTexture);\r\n                }\r\n\r\n                if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                    ubo.setTexture(\"lightmapSampler\", this._lightmapTexture);\r\n                }\r\n\r\n                if (MaterialFlags.SpecularTextureEnabled) {\r\n                    if (this._metallicTexture) {\r\n                        ubo.setTexture(\"reflectivitySampler\", this._metallicTexture);\r\n                    } else if (this._reflectivityTexture) {\r\n                        ubo.setTexture(\"reflectivitySampler\", this._reflectivityTexture);\r\n                    }\r\n\r\n                    if (this._metallicReflectanceTexture) {\r\n                        ubo.setTexture(\"metallicReflectanceSampler\", this._metallicReflectanceTexture);\r\n                    }\r\n\r\n                    if (this._reflectanceTexture && defines.REFLECTANCE) {\r\n                        ubo.setTexture(\"reflectanceSampler\", this._reflectanceTexture);\r\n                    }\r\n\r\n                    if (this._microSurfaceTexture) {\r\n                        ubo.setTexture(\"microSurfaceSampler\", this._microSurfaceTexture);\r\n                    }\r\n                }\r\n\r\n                if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                    ubo.setTexture(\"bumpSampler\", this._bumpTexture);\r\n                }\r\n            }\r\n\r\n            // OIT with depth peeling\r\n            if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\r\n                this.getScene().depthPeelingRenderer!.bind(effect);\r\n            }\r\n\r\n            this._eventInfo.subMesh = subMesh;\r\n            this._callbackPluginEventBindForSubMesh(this._eventInfo);\r\n\r\n            // Clip plane\r\n            bindClipPlane(this._activeEffect, this, scene);\r\n\r\n            this.bindEyePosition(effect);\r\n        } else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\r\n            this._needToBindSceneUbo = true;\r\n        }\r\n\r\n        if (mustRebind || !this.isFrozen) {\r\n            // Lights\r\n            if (scene.lightsEnabled && !this._disableLighting) {\r\n                MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this._maxSimultaneousLights);\r\n            }\r\n\r\n            // View\r\n            if ((scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) || reflectionTexture || mesh.receiveShadows || defines.PREPASS) {\r\n                this.bindView(effect);\r\n            }\r\n\r\n            // Fog\r\n            MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect, true);\r\n\r\n            // Morph targets\r\n            if (defines.NUM_MORPH_INFLUENCERS) {\r\n                MaterialHelper.BindMorphTargetParameters(mesh, this._activeEffect);\r\n            }\r\n\r\n            if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\r\n                mesh.bakedVertexAnimationManager?.bind(effect, defines.INSTANCES);\r\n            }\r\n\r\n            // image processing\r\n            this._imageProcessingConfiguration!.bind(this._activeEffect);\r\n\r\n            // Log. depth\r\n            MaterialHelper.BindLogDepth(defines, this._activeEffect, scene);\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n\r\n        ubo.update();\r\n    }\r\n\r\n    /**\r\n     * Returns the animatable textures.\r\n     * If material have animatable metallic texture, then reflectivity texture will not be returned, even if it has animations.\r\n     * @returns - Array of animatable textures.\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results = super.getAnimatables();\r\n\r\n        if (this._albedoTexture && this._albedoTexture.animations && this._albedoTexture.animations.length > 0) {\r\n            results.push(this._albedoTexture);\r\n        }\r\n\r\n        if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\r\n            results.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\r\n            results.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\r\n            results.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\r\n            results.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._metallicTexture && this._metallicTexture.animations && this._metallicTexture.animations.length > 0) {\r\n            results.push(this._metallicTexture);\r\n        } else if (this._reflectivityTexture && this._reflectivityTexture.animations && this._reflectivityTexture.animations.length > 0) {\r\n            results.push(this._reflectivityTexture);\r\n        }\r\n\r\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\r\n            results.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\r\n            results.push(this._lightmapTexture);\r\n        }\r\n\r\n        if (this._metallicReflectanceTexture && this._metallicReflectanceTexture.animations && this._metallicReflectanceTexture.animations.length > 0) {\r\n            results.push(this._metallicReflectanceTexture);\r\n        }\r\n\r\n        if (this._reflectanceTexture && this._reflectanceTexture.animations && this._reflectanceTexture.animations.length > 0) {\r\n            results.push(this._reflectanceTexture);\r\n        }\r\n\r\n        if (this._microSurfaceTexture && this._microSurfaceTexture.animations && this._microSurfaceTexture.animations.length > 0) {\r\n            results.push(this._microSurfaceTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Returns the texture used for reflections.\r\n     * @returns - Reflection texture if present.  Otherwise, returns the environment texture.\r\n     */\r\n    private _getReflectionTexture(): Nullable<BaseTexture> {\r\n        if (this._reflectionTexture) {\r\n            return this._reflectionTexture;\r\n        }\r\n\r\n        return this.getScene().environmentTexture;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of the actively used textures.\r\n     * @returns - Array of BaseTextures\r\n     */\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        if (this._albedoTexture) {\r\n            activeTextures.push(this._albedoTexture);\r\n        }\r\n\r\n        if (this._ambientTexture) {\r\n            activeTextures.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            activeTextures.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture) {\r\n            activeTextures.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture) {\r\n            activeTextures.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._reflectivityTexture) {\r\n            activeTextures.push(this._reflectivityTexture);\r\n        }\r\n\r\n        if (this._metallicTexture) {\r\n            activeTextures.push(this._metallicTexture);\r\n        }\r\n\r\n        if (this._metallicReflectanceTexture) {\r\n            activeTextures.push(this._metallicReflectanceTexture);\r\n        }\r\n\r\n        if (this._reflectanceTexture) {\r\n            activeTextures.push(this._reflectanceTexture);\r\n        }\r\n\r\n        if (this._microSurfaceTexture) {\r\n            activeTextures.push(this._microSurfaceTexture);\r\n        }\r\n\r\n        if (this._bumpTexture) {\r\n            activeTextures.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture) {\r\n            activeTextures.push(this._lightmapTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if a texture is used in the material.\r\n     * @param texture - Base texture to use.\r\n     * @returns - Boolean specifying if a texture is used in the material.\r\n     */\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._albedoTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._ambientTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._opacityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._reflectionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._emissiveTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._reflectivityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._metallicTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._metallicReflectanceTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._reflectanceTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._microSurfaceTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._lightmapTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sets the required values to the prepass renderer.\r\n     * It can't be sets when subsurface scattering of this material is disabled.\r\n     * When scene have ability to enable subsurface prepass effect, it will enable.\r\n     */\r\n    public setPrePassRenderer(): boolean {\r\n        if (!this.subSurface?.isScatteringEnabled) {\r\n            return false;\r\n        }\r\n\r\n        const subSurfaceConfiguration = this.getScene().enableSubSurfaceForPrePass();\r\n        if (subSurfaceConfiguration) {\r\n            subSurfaceConfiguration.enabled = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Disposes the resources of the material.\r\n     * @param forceDisposeEffect - Forces the disposal of effects.\r\n     * @param forceDisposeTextures - Forces the disposal of all textures.\r\n     */\r\n    public dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            if (this._environmentBRDFTexture && this.getScene().environmentBRDFTexture !== this._environmentBRDFTexture) {\r\n                this._environmentBRDFTexture.dispose();\r\n            }\r\n\r\n            this._albedoTexture?.dispose();\r\n            this._ambientTexture?.dispose();\r\n            this._opacityTexture?.dispose();\r\n            this._reflectionTexture?.dispose();\r\n            this._emissiveTexture?.dispose();\r\n            this._metallicTexture?.dispose();\r\n            this._reflectivityTexture?.dispose();\r\n            this._bumpTexture?.dispose();\r\n            this._lightmapTexture?.dispose();\r\n            this._metallicReflectanceTexture?.dispose();\r\n            this._reflectanceTexture?.dispose();\r\n            this._microSurfaceTexture?.dispose();\r\n        }\r\n\r\n        this._renderTargets.dispose();\r\n\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}