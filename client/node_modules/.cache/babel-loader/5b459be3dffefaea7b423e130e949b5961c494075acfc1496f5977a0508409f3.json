{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nconst NAME = \"KHR_materials_translucency\";\n/**\n * [Proposed Specification](https://github.com/KhronosGroup/glTF/pull/1825)\n * !!! Experimental Extension Subject to Changes !!!\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_materials_translucency {\n  /**\n   * @internal\n   */\n  constructor(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n    this.order = 174;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n    if (this.enabled) {\n      loader.parent.transparencyAsCoverage = true;\n    }\n  }\n  /** @internal */\n  dispose() {\n    this._loader = null;\n  }\n  /**\n   * @internal\n   */\n  loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, (extensionContext, extension) => {\n      const promises = new Array();\n      promises.push(this._loader.loadMaterialBasePropertiesAsync(context, material, babylonMaterial));\n      promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n      promises.push(this._loadTranslucentPropertiesAsync(extensionContext, material, babylonMaterial, extension));\n      return Promise.all(promises).then(() => {});\n    });\n  }\n  _loadTranslucentPropertiesAsync(context, material, babylonMaterial, extension) {\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(`${context}: Material type not supported`);\n    }\n    const pbrMaterial = babylonMaterial;\n    // Enables \"translucency\" texture which represents diffusely-transmitted light.\n    pbrMaterial.subSurface.isTranslucencyEnabled = true;\n    // Since this extension models thin-surface transmission only, we must make the\n    // internal IOR == 1.0 and set the thickness to 0.\n    pbrMaterial.subSurface.volumeIndexOfRefraction = 1.0;\n    pbrMaterial.subSurface.minimumThickness = 0.0;\n    pbrMaterial.subSurface.maximumThickness = 0.0;\n    // Albedo colour will tint transmission.\n    pbrMaterial.subSurface.useAlbedoToTintTranslucency = true;\n    if (extension.translucencyFactor !== undefined) {\n      pbrMaterial.subSurface.translucencyIntensity = extension.translucencyFactor;\n    } else {\n      pbrMaterial.subSurface.translucencyIntensity = 0.0;\n      pbrMaterial.subSurface.isTranslucencyEnabled = false;\n      return Promise.resolve();\n    }\n    if (extension.translucencyTexture) {\n      extension.translucencyTexture.nonColorData = true;\n      return this._loader.loadTextureInfoAsync(`${context}/translucencyTexture`, extension.translucencyTexture).then(texture => {\n        pbrMaterial.subSurface.translucencyIntensityTexture = texture;\n      });\n    } else {\n      return Promise.resolve();\n    }\n  }\n}\nGLTFLoader.RegisterExtension(NAME, loader => new KHR_materials_translucency(loader));","map":{"version":3,"mappings":"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","names":["PBRMaterial","GLTFLoader","NAME","KHR_materials_translucency","constructor","loader","_loader","enabled","isExtensionUsed","parent","transparencyAsCoverage","dispose","loadMaterialPropertiesAsync","context","material","babylonMaterial","LoadExtensionAsync","name","extensionContext","extension","promises","Array","push","loadMaterialBasePropertiesAsync","_loadTranslucentPropertiesAsync","Promise","all","then","Error","pbrMaterial","subSurface","isTranslucencyEnabled","volumeIndexOfRefraction","minimumThickness","maximumThickness","useAlbedoToTintTranslucency","translucencyFactor","undefined","translucencyIntensity","resolve","translucencyTexture","nonColorData","loadTextureInfoAsync","texture","translucencyIntensityTexture","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_materials_translucency.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsTranslucency } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_materials_translucency\";\r\n\r\n/**\r\n * [Proposed Specification](https://github.com/KhronosGroup/glTF/pull/1825)\r\n * !!! Experimental Extension Subject to Changes !!!\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_translucency implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 174;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n        if (this.enabled) {\r\n            loader.parent.transparencyAsCoverage = true;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsTranslucency>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialBasePropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadTranslucentPropertiesAsync(extensionContext, material, babylonMaterial, extension));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadTranslucentPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material, extension: IKHRMaterialsTranslucency): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n        const pbrMaterial = babylonMaterial as PBRMaterial;\r\n\r\n        // Enables \"translucency\" texture which represents diffusely-transmitted light.\r\n        pbrMaterial.subSurface.isTranslucencyEnabled = true;\r\n\r\n        // Since this extension models thin-surface transmission only, we must make the\r\n        // internal IOR == 1.0 and set the thickness to 0.\r\n        pbrMaterial.subSurface.volumeIndexOfRefraction = 1.0;\r\n        pbrMaterial.subSurface.minimumThickness = 0.0;\r\n        pbrMaterial.subSurface.maximumThickness = 0.0;\r\n\r\n        // Albedo colour will tint transmission.\r\n        pbrMaterial.subSurface.useAlbedoToTintTranslucency = true;\r\n\r\n        if (extension.translucencyFactor !== undefined) {\r\n            pbrMaterial.subSurface.translucencyIntensity = extension.translucencyFactor;\r\n        } else {\r\n            pbrMaterial.subSurface.translucencyIntensity = 0.0;\r\n            pbrMaterial.subSurface.isTranslucencyEnabled = false;\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (extension.translucencyTexture) {\r\n            (extension.translucencyTexture as ITextureInfo).nonColorData = true;\r\n            return this._loader.loadTextureInfoAsync(`${context}/translucencyTexture`, extension.translucencyTexture).then((texture: BaseTexture) => {\r\n                pbrMaterial.subSurface.translucencyIntensityTexture = texture;\r\n            });\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_translucency(loader));\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}