{"ast":null,"code":"import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to desaturate a color\n */\nexport class DesaturateBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new DesaturateBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Neutral);\n    this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3);\n    this.registerInput(\"level\", NodeMaterialBlockConnectionPointTypes.Float);\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Color3);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"DesaturateBlock\";\n  }\n  /**\n   * Gets the color operand input component\n   */\n  get color() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the level operand input component\n   */\n  get level() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const output = this._outputs[0];\n    const color = this.color;\n    const colorName = color.associatedVariableName;\n    const tempMin = state._getFreeVariableName(\"colorMin\");\n    const tempMax = state._getFreeVariableName(\"colorMax\");\n    const tempMerge = state._getFreeVariableName(\"colorMerge\");\n    state.compilationString += `float ${tempMin} = min(min(${colorName}.x, ${colorName}.y), ${colorName}.z);\\r\\n`;\n    state.compilationString += `float ${tempMax} = max(max(${colorName}.x, ${colorName}.y), ${colorName}.z);\\r\\n`;\n    state.compilationString += `float ${tempMerge} = 0.5 * (${tempMin} + ${tempMax});\\r\\n`;\n    state.compilationString += this._declareOutput(output, state) + ` = mix(${colorName}, vec3(${tempMerge}, ${tempMerge}, ${tempMerge}), ${this.level.associatedVariableName});\\r\\n`;\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.DesaturateBlock\", DesaturateBlock);","map":{"version":3,"mappings":"AAAA,SAASA,iBAAiB,QAAQ,yBAAuB;AACzD,SAASC,qCAAqC,QAAQ,mDAAiD;AAGvG,SAASC,wBAAwB,QAAQ,sCAAoC;AAC7E,SAASC,aAAa,QAAQ,4BAA0B;AACxD;;;AAGA,OAAM,MAAOC,eAAgB,SAAQJ,iBAAiB;EAClD;;;;EAIAK,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,EAAEJ,wBAAwB,CAACK,OAAO,CAAC;IAE7C,IAAI,CAACC,aAAa,CAAC,OAAO,EAAEP,qCAAqC,CAACQ,MAAM,CAAC;IACzE,IAAI,CAACD,aAAa,CAAC,OAAO,EAAEP,qCAAqC,CAACS,KAAK,CAAC;IACxE,IAAI,CAACC,cAAc,CAAC,QAAQ,EAAEV,qCAAqC,CAACQ,MAAM,CAAC;EAC/E;EAEA;;;;EAIOG,YAAY;IACf,OAAO,iBAAiB;EAC5B;EAEA;;;EAGA,IAAWC,KAAK;IACZ,OAAO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWC,KAAK;IACZ,OAAO,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWE,MAAM;IACb,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEUC,WAAW,CAACC,KAA6B;IAC/C,KAAK,CAACD,WAAW,CAACC,KAAK,CAAC;IAExB,MAAMH,MAAM,GAAG,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;IAC/B,MAAMJ,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,MAAMO,SAAS,GAAGP,KAAK,CAACQ,sBAAsB;IAC9C,MAAMC,OAAO,GAAGH,KAAK,CAACI,oBAAoB,CAAC,UAAU,CAAC;IACtD,MAAMC,OAAO,GAAGL,KAAK,CAACI,oBAAoB,CAAC,UAAU,CAAC;IACtD,MAAME,SAAS,GAAGN,KAAK,CAACI,oBAAoB,CAAC,YAAY,CAAC;IAE1DJ,KAAK,CAACO,iBAAiB,IAAI,SAASJ,OAAO,cAAcF,SAAS,OAAOA,SAAS,QAAQA,SAAS,UAAU;IAC7GD,KAAK,CAACO,iBAAiB,IAAI,SAASF,OAAO,cAAcJ,SAAS,OAAOA,SAAS,QAAQA,SAAS,UAAU;IAC7GD,KAAK,CAACO,iBAAiB,IAAI,SAASD,SAAS,aAAaH,OAAO,MAAME,OAAO,QAAQ;IACtFL,KAAK,CAACO,iBAAiB,IACnB,IAAI,CAACC,cAAc,CAACX,MAAM,EAAEG,KAAK,CAAC,GAAG,UAAUC,SAAS,UAAUK,SAAS,KAAKA,SAAS,KAAKA,SAAS,MAAM,IAAI,CAACV,KAAK,CAACM,sBAAsB,QAAQ;IAE1J,OAAO,IAAI;EACf;;AAGJlB,aAAa,CAAC,yBAAyB,EAAEC,eAAe,CAAC","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","DesaturateBlock","constructor","name","Neutral","registerInput","Color3","Float","registerOutput","getClassName","color","_inputs","level","output","_outputs","_buildBlock","state","colorName","associatedVariableName","tempMin","_getFreeVariableName","tempMax","tempMerge","compilationString","_declareOutput"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Node/Blocks/desaturateBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\n/**\r\n * Block used to desaturate a color\r\n */\r\nexport class DesaturateBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new DesaturateBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3);\r\n        this.registerInput(\"level\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Color3);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"DesaturateBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the color operand input component\r\n     */\r\n    public get color(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the level operand input component\r\n     */\r\n    public get level(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const output = this._outputs[0];\r\n        const color = this.color;\r\n        const colorName = color.associatedVariableName;\r\n        const tempMin = state._getFreeVariableName(\"colorMin\");\r\n        const tempMax = state._getFreeVariableName(\"colorMax\");\r\n        const tempMerge = state._getFreeVariableName(\"colorMerge\");\r\n\r\n        state.compilationString += `float ${tempMin} = min(min(${colorName}.x, ${colorName}.y), ${colorName}.z);\\r\\n`;\r\n        state.compilationString += `float ${tempMax} = max(max(${colorName}.x, ${colorName}.y), ${colorName}.z);\\r\\n`;\r\n        state.compilationString += `float ${tempMerge} = 0.5 * (${tempMin} + ${tempMax});\\r\\n`;\r\n        state.compilationString +=\r\n            this._declareOutput(output, state) + ` = mix(${colorName}, vec3(${tempMerge}, ${tempMerge}, ${tempMerge}), ${this.level.associatedVariableName});\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.DesaturateBlock\", DesaturateBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}