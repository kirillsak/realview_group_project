{"ast":null,"code":"/**\n * This is a holder class for the physics joint created by the physics plugin\n * It holds a set of functions to control the underlying joint\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\nexport class PhysicsJoint {\n  /**\n   * Initializes the physics joint\n   * @param type The type of the physics joint\n   * @param jointData The data for the physics joint\n   */\n  constructor(\n  /**\n   * The type of the physics joint\n   */\n  type,\n  /**\n   * The data for the physics joint\n   */\n  jointData) {\n    this.type = type;\n    this.jointData = jointData;\n    jointData.nativeParams = jointData.nativeParams || {};\n  }\n  /**\n   * Gets the physics joint\n   */\n  get physicsJoint() {\n    return this._physicsJoint;\n  }\n  /**\n   * Sets the physics joint\n   */\n  set physicsJoint(newJoint) {\n    if (this._physicsJoint) {\n      //remove from the world\n    }\n    this._physicsJoint = newJoint;\n  }\n  /**\n   * Sets the physics plugin\n   */\n  set physicsPlugin(physicsPlugin) {\n    this._physicsPlugin = physicsPlugin;\n  }\n  /**\n   * Execute a function that is physics-plugin specific.\n   * @param {Function} func the function that will be executed.\n   *                        It accepts two parameters: the physics world and the physics joint\n   */\n  executeNativeFunction(func) {\n    func(this._physicsPlugin.world, this._physicsJoint);\n  }\n}\n//TODO check if the native joints are the same\n//Joint Types\n/**\n * Distance-Joint type\n */\nPhysicsJoint.DistanceJoint = 0;\n/**\n * Hinge-Joint type\n */\nPhysicsJoint.HingeJoint = 1;\n/**\n * Ball-and-Socket joint type\n */\nPhysicsJoint.BallAndSocketJoint = 2;\n/**\n * Wheel-Joint type\n */\nPhysicsJoint.WheelJoint = 3;\n/**\n * Slider-Joint type\n */\nPhysicsJoint.SliderJoint = 4;\n//OIMO\n/**\n * Prismatic-Joint type\n */\nPhysicsJoint.PrismaticJoint = 5;\n//\n/**\n * Universal-Joint type\n * ENERGY FTW! (compare with this - @see http://ode-wiki.org/wiki/index.php?title=Manual:_Joint_Types_and_Functions)\n */\nPhysicsJoint.UniversalJoint = 6;\n/**\n * Hinge-Joint 2 type\n */\nPhysicsJoint.Hinge2Joint = PhysicsJoint.WheelJoint;\n//Cannon\n/**\n * Point to Point Joint type.  Similar to a Ball-Joint.  Different in parameters\n */\nPhysicsJoint.PointToPointJoint = 8;\n//Cannon only at the moment\n/**\n * Spring-Joint type\n */\nPhysicsJoint.SpringJoint = 9;\n/**\n * Lock-Joint type\n */\nPhysicsJoint.LockJoint = 10;\n/**\n * A class representing a physics distance joint\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\nexport class DistanceJoint extends PhysicsJoint {\n  /**\n   *\n   * @param jointData The data for the Distance-Joint\n   */\n  constructor(jointData) {\n    super(PhysicsJoint.DistanceJoint, jointData);\n  }\n  /**\n   * Update the predefined distance.\n   * @param maxDistance The maximum preferred distance\n   * @param minDistance The minimum preferred distance\n   */\n  updateDistance(maxDistance, minDistance) {\n    this._physicsPlugin.updateDistanceJoint(this, maxDistance, minDistance);\n  }\n}\n/**\n * Represents a Motor-Enabled Joint\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\nexport class MotorEnabledJoint extends PhysicsJoint {\n  /**\n   * Initializes the Motor-Enabled Joint\n   * @param type The type of the joint\n   * @param jointData The physical joint data for the joint\n   */\n  constructor(type, jointData) {\n    super(type, jointData);\n  }\n  /**\n   * Set the motor values.\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\n   * @param force the force to apply\n   * @param maxForce max force for this motor.\n   */\n  setMotor(force, maxForce) {\n    this._physicsPlugin.setMotor(this, force || 0, maxForce);\n  }\n  /**\n   * Set the motor's limits.\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\n   * @param upperLimit The upper limit of the motor\n   * @param lowerLimit The lower limit of the motor\n   */\n  setLimit(upperLimit, lowerLimit) {\n    this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\n  }\n}\n/**\n * This class represents a single physics Hinge-Joint\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\nexport class HingeJoint extends MotorEnabledJoint {\n  /**\n   * Initializes the Hinge-Joint\n   * @param jointData The joint data for the Hinge-Joint\n   */\n  constructor(jointData) {\n    super(PhysicsJoint.HingeJoint, jointData);\n  }\n  /**\n   * Set the motor values.\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\n   * @param {number} force the force to apply\n   * @param {number} maxForce max force for this motor.\n   */\n  setMotor(force, maxForce) {\n    this._physicsPlugin.setMotor(this, force || 0, maxForce);\n  }\n  /**\n   * Set the motor's limits.\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\n   * @param upperLimit The upper limit of the motor\n   * @param lowerLimit The lower limit of the motor\n   */\n  setLimit(upperLimit, lowerLimit) {\n    this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\n  }\n}\n/**\n * This class represents a dual hinge physics joint (same as wheel joint)\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\nexport class Hinge2Joint extends MotorEnabledJoint {\n  /**\n   * Initializes the Hinge2-Joint\n   * @param jointData The joint data for the Hinge2-Joint\n   */\n  constructor(jointData) {\n    super(PhysicsJoint.Hinge2Joint, jointData);\n  }\n  /**\n   * Set the motor values.\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\n   * @param targetSpeed the speed the motor is to reach\n   * @param maxForce max force for this motor.\n   * @param motorIndex motor's index, 0 or 1.\n   */\n  setMotor(targetSpeed, maxForce, motorIndex = 0) {\n    this._physicsPlugin.setMotor(this, targetSpeed || 0, maxForce, motorIndex);\n  }\n  /**\n   * Set the motor limits.\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\n   * @param upperLimit the upper limit\n   * @param lowerLimit lower limit\n   * @param motorIndex the motor's index, 0 or 1.\n   */\n  setLimit(upperLimit, lowerLimit, motorIndex = 0) {\n    this._physicsPlugin.setLimit(this, upperLimit, lowerLimit, motorIndex);\n  }\n}","map":{"version":3,"mappings":"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","names":["PhysicsJoint","constructor","type","jointData","nativeParams","physicsJoint","_physicsJoint","newJoint","physicsPlugin","_physicsPlugin","executeNativeFunction","func","world","WheelJoint","DistanceJoint","updateDistance","maxDistance","minDistance","updateDistanceJoint","MotorEnabledJoint","setMotor","force","maxForce","setLimit","upperLimit","lowerLimit","HingeJoint","Hinge2Joint","targetSpeed","motorIndex"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Physics/v1/physicsJoint.ts"],"sourcesContent":["import type { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { IPhysicsEnginePlugin } from \"./IPhysicsEnginePlugin\";\r\n/**\r\n * Interface for Physics-Joint data\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport interface PhysicsJointData {\r\n    //Important for some engines, optional!\r\n    /**\r\n     * The main pivot of the joint\r\n     */\r\n    mainPivot?: Vector3;\r\n    /**\r\n     * The connected pivot of the joint\r\n     */\r\n    connectedPivot?: Vector3;\r\n    /**\r\n     * The main axis of the joint\r\n     */\r\n    mainAxis?: Vector3;\r\n    /**\r\n     * The connected axis of the joint\r\n     */\r\n    connectedAxis?: Vector3;\r\n    /**\r\n     * The collision of the joint\r\n     */\r\n    collision?: boolean;\r\n    /**\r\n     * Native Oimo/Cannon/Energy data\r\n     */\r\n    nativeParams?: any;\r\n}\r\n\r\n/**\r\n * This is a holder class for the physics joint created by the physics plugin\r\n * It holds a set of functions to control the underlying joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class PhysicsJoint {\r\n    private _physicsJoint: any;\r\n    protected _physicsPlugin: IPhysicsEnginePlugin;\r\n\r\n    /**\r\n     * Initializes the physics joint\r\n     * @param type The type of the physics joint\r\n     * @param jointData The data for the physics joint\r\n     */\r\n    constructor(\r\n        /**\r\n         * The type of the physics joint\r\n         */\r\n        public type: number,\r\n        /**\r\n         * The data for the physics joint\r\n         */\r\n        public jointData: PhysicsJointData\r\n    ) {\r\n        jointData.nativeParams = jointData.nativeParams || {};\r\n    }\r\n\r\n    /**\r\n     * Gets the physics joint\r\n     */\r\n    public get physicsJoint(): any {\r\n        return this._physicsJoint;\r\n    }\r\n\r\n    /**\r\n     * Sets the physics joint\r\n     */\r\n    public set physicsJoint(newJoint: any) {\r\n        if (this._physicsJoint) {\r\n            //remove from the world\r\n        }\r\n\r\n        this._physicsJoint = newJoint;\r\n    }\r\n\r\n    /**\r\n     * Sets the physics plugin\r\n     */\r\n    public set physicsPlugin(physicsPlugin: IPhysicsEnginePlugin) {\r\n        this._physicsPlugin = physicsPlugin;\r\n    }\r\n\r\n    /**\r\n     * Execute a function that is physics-plugin specific.\r\n     * @param {Function} func the function that will be executed.\r\n     *                        It accepts two parameters: the physics world and the physics joint\r\n     */\r\n    public executeNativeFunction(func: (world: any, physicsJoint: any) => void) {\r\n        func(this._physicsPlugin.world, this._physicsJoint);\r\n    }\r\n\r\n    //TODO check if the native joints are the same\r\n\r\n    //Joint Types\r\n    /**\r\n     * Distance-Joint type\r\n     */\r\n    public static DistanceJoint = 0;\r\n    /**\r\n     * Hinge-Joint type\r\n     */\r\n    public static HingeJoint = 1;\r\n    /**\r\n     * Ball-and-Socket joint type\r\n     */\r\n    public static BallAndSocketJoint = 2;\r\n    /**\r\n     * Wheel-Joint type\r\n     */\r\n    public static WheelJoint = 3;\r\n    /**\r\n     * Slider-Joint type\r\n     */\r\n    public static SliderJoint = 4;\r\n    //OIMO\r\n    /**\r\n     * Prismatic-Joint type\r\n     */\r\n    public static PrismaticJoint = 5;\r\n    //\r\n    /**\r\n     * Universal-Joint type\r\n     * ENERGY FTW! (compare with this - @see http://ode-wiki.org/wiki/index.php?title=Manual:_Joint_Types_and_Functions)\r\n     */\r\n    public static UniversalJoint = 6;\r\n    /**\r\n     * Hinge-Joint 2 type\r\n     */\r\n    public static Hinge2Joint = PhysicsJoint.WheelJoint;\r\n    //Cannon\r\n    /**\r\n     * Point to Point Joint type.  Similar to a Ball-Joint.  Different in parameters\r\n     */\r\n    public static PointToPointJoint = 8;\r\n    //Cannon only at the moment\r\n    /**\r\n     * Spring-Joint type\r\n     */\r\n    public static SpringJoint = 9;\r\n    /**\r\n     * Lock-Joint type\r\n     */\r\n    public static LockJoint = 10;\r\n}\r\n\r\n/**\r\n * A class representing a physics distance joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class DistanceJoint extends PhysicsJoint {\r\n    /**\r\n     *\r\n     * @param jointData The data for the Distance-Joint\r\n     */\r\n    constructor(jointData: DistanceJointData) {\r\n        super(PhysicsJoint.DistanceJoint, jointData);\r\n    }\r\n\r\n    /**\r\n     * Update the predefined distance.\r\n     * @param maxDistance The maximum preferred distance\r\n     * @param minDistance The minimum preferred distance\r\n     */\r\n    public updateDistance(maxDistance: number, minDistance?: number) {\r\n        this._physicsPlugin.updateDistanceJoint(this, maxDistance, minDistance);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a Motor-Enabled Joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class MotorEnabledJoint extends PhysicsJoint implements IMotorEnabledJoint {\r\n    /**\r\n     * Initializes the Motor-Enabled Joint\r\n     * @param type The type of the joint\r\n     * @param jointData The physical joint data for the joint\r\n     */\r\n    constructor(type: number, jointData: PhysicsJointData) {\r\n        super(type, jointData);\r\n    }\r\n\r\n    /**\r\n     * Set the motor values.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param force the force to apply\r\n     * @param maxForce max force for this motor.\r\n     */\r\n    public setMotor(force?: number, maxForce?: number) {\r\n        this._physicsPlugin.setMotor(this, force || 0, maxForce);\r\n    }\r\n\r\n    /**\r\n     * Set the motor's limits.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param upperLimit The upper limit of the motor\r\n     * @param lowerLimit The lower limit of the motor\r\n     */\r\n    public setLimit(upperLimit: number, lowerLimit?: number) {\r\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\r\n    }\r\n}\r\n\r\n/**\r\n * This class represents a single physics Hinge-Joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class HingeJoint extends MotorEnabledJoint {\r\n    /**\r\n     * Initializes the Hinge-Joint\r\n     * @param jointData The joint data for the Hinge-Joint\r\n     */\r\n    constructor(jointData: PhysicsJointData) {\r\n        super(PhysicsJoint.HingeJoint, jointData);\r\n    }\r\n\r\n    /**\r\n     * Set the motor values.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param {number} force the force to apply\r\n     * @param {number} maxForce max force for this motor.\r\n     */\r\n    public setMotor(force?: number, maxForce?: number) {\r\n        this._physicsPlugin.setMotor(this, force || 0, maxForce);\r\n    }\r\n\r\n    /**\r\n     * Set the motor's limits.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param upperLimit The upper limit of the motor\r\n     * @param lowerLimit The lower limit of the motor\r\n     */\r\n    public setLimit(upperLimit: number, lowerLimit?: number) {\r\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\r\n    }\r\n}\r\n\r\n/**\r\n * This class represents a dual hinge physics joint (same as wheel joint)\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class Hinge2Joint extends MotorEnabledJoint {\r\n    /**\r\n     * Initializes the Hinge2-Joint\r\n     * @param jointData The joint data for the Hinge2-Joint\r\n     */\r\n    constructor(jointData: PhysicsJointData) {\r\n        super(PhysicsJoint.Hinge2Joint, jointData);\r\n    }\r\n\r\n    /**\r\n     * Set the motor values.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param targetSpeed the speed the motor is to reach\r\n     * @param maxForce max force for this motor.\r\n     * @param motorIndex motor's index, 0 or 1.\r\n     */\r\n    public setMotor(targetSpeed?: number, maxForce?: number, motorIndex: number = 0) {\r\n        this._physicsPlugin.setMotor(this, targetSpeed || 0, maxForce, motorIndex);\r\n    }\r\n\r\n    /**\r\n     * Set the motor limits.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param upperLimit the upper limit\r\n     * @param lowerLimit lower limit\r\n     * @param motorIndex the motor's index, 0 or 1.\r\n     */\r\n    public setLimit(upperLimit: number, lowerLimit?: number, motorIndex: number = 0) {\r\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit, motorIndex);\r\n    }\r\n}\r\n\r\n/**\r\n * Interface for a motor enabled joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport interface IMotorEnabledJoint {\r\n    /**\r\n     * Physics joint\r\n     */\r\n    physicsJoint: any;\r\n    /**\r\n     * Sets the motor of the motor-enabled joint\r\n     * @param force The force of the motor\r\n     * @param maxForce The maximum force of the motor\r\n     * @param motorIndex The index of the motor\r\n     */\r\n    setMotor(force?: number, maxForce?: number, motorIndex?: number): void;\r\n    /**\r\n     * Sets the limit of the motor\r\n     * @param upperLimit The upper limit of the motor\r\n     * @param lowerLimit The lower limit of the motor\r\n     * @param motorIndex The index of the motor\r\n     */\r\n    setLimit(upperLimit: number, lowerLimit?: number, motorIndex?: number): void;\r\n}\r\n\r\n/**\r\n * Joint data for a Distance-Joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport interface DistanceJointData extends PhysicsJointData {\r\n    /**\r\n     * Max distance the 2 joint objects can be apart\r\n     */\r\n    maxDistance: number;\r\n    //Oimo - minDistance\r\n    //Cannon - maxForce\r\n}\r\n\r\n/**\r\n * Joint data from a spring joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport interface SpringJointData extends PhysicsJointData {\r\n    /**\r\n     * Length of the spring\r\n     */\r\n    length: number;\r\n    /**\r\n     * Stiffness of the spring\r\n     */\r\n    stiffness: number;\r\n    /**\r\n     * Damping of the spring\r\n     */\r\n    damping: number;\r\n    /** this callback will be called when applying the force to the impostors. */\r\n    forceApplicationCallback: () => void;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}