{"ast":null,"code":"/**\n * Class used to store a texture sampler data\n */\nexport class TextureSampler {\n  /**\n   * Creates a Sampler instance\n   */\n  constructor() {\n    /**\n     * Gets the sampling mode of the texture\n     */\n    this.samplingMode = -1;\n    this._useMipMaps = true;\n    /** @internal */\n    this._cachedWrapU = null;\n    /** @internal */\n    this._cachedWrapV = null;\n    /** @internal */\n    this._cachedWrapR = null;\n    /** @internal */\n    this._cachedAnisotropicFilteringLevel = null;\n    /** @internal */\n    this._comparisonFunction = 0;\n  }\n  /**\n   * | Value | Type               | Description |\n   * | ----- | ------------------ | ----------- |\n   * | 0     | CLAMP_ADDRESSMODE  |             |\n   * | 1     | WRAP_ADDRESSMODE   |             |\n   * | 2     | MIRROR_ADDRESSMODE |             |\n   */\n  get wrapU() {\n    return this._cachedWrapU;\n  }\n  set wrapU(value) {\n    this._cachedWrapU = value;\n  }\n  /**\n   * | Value | Type               | Description |\n   * | ----- | ------------------ | ----------- |\n   * | 0     | CLAMP_ADDRESSMODE  |             |\n   * | 1     | WRAP_ADDRESSMODE   |             |\n   * | 2     | MIRROR_ADDRESSMODE |             |\n   */\n  get wrapV() {\n    return this._cachedWrapV;\n  }\n  set wrapV(value) {\n    this._cachedWrapV = value;\n  }\n  /**\n   * | Value | Type               | Description |\n   * | ----- | ------------------ | ----------- |\n   * | 0     | CLAMP_ADDRESSMODE  |             |\n   * | 1     | WRAP_ADDRESSMODE   |             |\n   * | 2     | MIRROR_ADDRESSMODE |             |\n   */\n  get wrapR() {\n    return this._cachedWrapR;\n  }\n  set wrapR(value) {\n    this._cachedWrapR = value;\n  }\n  /**\n   * With compliant hardware and browser (supporting anisotropic filtering)\n   * this defines the level of anisotropic filtering in the texture.\n   * The higher the better but the slower.\n   */\n  get anisotropicFilteringLevel() {\n    return this._cachedAnisotropicFilteringLevel;\n  }\n  set anisotropicFilteringLevel(value) {\n    this._cachedAnisotropicFilteringLevel = value;\n  }\n  /**\n   * Gets or sets the comparison function (513, 514, etc). Set 0 to not use a comparison function\n   */\n  get comparisonFunction() {\n    return this._comparisonFunction;\n  }\n  set comparisonFunction(value) {\n    this._comparisonFunction = value;\n  }\n  /**\n   * Indicates to use the mip maps (if available on the texture).\n   * Thanks to this flag, you can instruct the sampler to not sample the mipmaps even if they exist (and if the sampling mode is set to a value that normally samples the mipmaps!)\n   */\n  get useMipMaps() {\n    return this._useMipMaps;\n  }\n  set useMipMaps(value) {\n    this._useMipMaps = value;\n  }\n  /**\n   * Sets all the parameters of the sampler\n   * @param wrapU u address mode (default: TEXTURE_WRAP_ADDRESSMODE)\n   * @param wrapV v address mode (default: TEXTURE_WRAP_ADDRESSMODE)\n   * @param wrapR r address mode (default: TEXTURE_WRAP_ADDRESSMODE)\n   * @param anisotropicFilteringLevel anisotropic level (default: 1)\n   * @param samplingMode sampling mode (default: 2)\n   * @param comparisonFunction comparison function (default: 0 - no comparison function)\n   * @returns the current sampler instance\n   */\n  setParameters(wrapU = 1, wrapV = 1, wrapR = 1, anisotropicFilteringLevel = 1, samplingMode = 2, comparisonFunction = 0) {\n    this._cachedWrapU = wrapU;\n    this._cachedWrapV = wrapV;\n    this._cachedWrapR = wrapR;\n    this._cachedAnisotropicFilteringLevel = anisotropicFilteringLevel;\n    this.samplingMode = samplingMode;\n    this._comparisonFunction = comparisonFunction;\n    return this;\n  }\n  /**\n   * Compares this sampler with another one\n   * @param other sampler to compare with\n   * @returns true if the samplers have the same parametres, else false\n   */\n  compareSampler(other) {\n    return this._cachedWrapU === other._cachedWrapU && this._cachedWrapV === other._cachedWrapV && this._cachedWrapR === other._cachedWrapR && this._cachedAnisotropicFilteringLevel === other._cachedAnisotropicFilteringLevel && this.samplingMode === other.samplingMode && this._comparisonFunction === other._comparisonFunction && this._useMipMaps === other._useMipMaps;\n  }\n}","map":{"version":3,"mappings":"AAGA;;;AAGA,OAAM,MAAOA,cAAc;EAuGvB;;;EAGAC;IAzGA;;;IAGO,iBAAY,GAAW,CAAC,CAAC;IAuExB,gBAAW,GAAG,IAAI;IAa1B;IACO,iBAAY,GAAqB,IAAI;IAE5C;IACO,iBAAY,GAAqB,IAAI;IAE5C;IACO,iBAAY,GAAqB,IAAI;IAE5C;IACO,qCAAgC,GAAqB,IAAI;IAEhE;IACO,wBAAmB,GAAW,CAAC;EAKvB;EApGf;;;;;;;EAOA,IAAWC,KAAK;IACZ,OAAO,IAAI,CAACC,YAAY;EAC5B;EAEA,IAAWD,KAAK,CAACE,KAAuB;IACpC,IAAI,CAACD,YAAY,GAAGC,KAAK;EAC7B;EAEA;;;;;;;EAOA,IAAWC,KAAK;IACZ,OAAO,IAAI,CAACC,YAAY;EAC5B;EAEA,IAAWD,KAAK,CAACD,KAAuB;IACpC,IAAI,CAACE,YAAY,GAAGF,KAAK;EAC7B;EAEA;;;;;;;EAOA,IAAWG,KAAK;IACZ,OAAO,IAAI,CAACC,YAAY;EAC5B;EAEA,IAAWD,KAAK,CAACH,KAAuB;IACpC,IAAI,CAACI,YAAY,GAAGJ,KAAK;EAC7B;EAEA;;;;;EAKA,IAAWK,yBAAyB;IAChC,OAAO,IAAI,CAACC,gCAAgC;EAChD;EAEA,IAAWD,yBAAyB,CAACL,KAAuB;IACxD,IAAI,CAACM,gCAAgC,GAAGN,KAAK;EACjD;EAEA;;;EAGA,IAAWO,kBAAkB;IACzB,OAAO,IAAI,CAACC,mBAAmB;EACnC;EAEA,IAAWD,kBAAkB,CAACP,KAAa;IACvC,IAAI,CAACQ,mBAAmB,GAAGR,KAAK;EACpC;EAGA;;;;EAIA,IAAWS,UAAU;IACjB,OAAO,IAAI,CAACC,WAAW;EAC3B;EAEA,IAAWD,UAAU,CAACT,KAAc;IAChC,IAAI,CAACU,WAAW,GAAGV,KAAK;EAC5B;EAsBA;;;;;;;;;;EAUOW,aAAa,CAChBb,KAAK,GAAG,WAAU,uCACV,GAAS,CAAC,sCACV,MAAU;IAKlB,IAAI,CAACC,YAAY,GAAGD,KAAK;IACzB,IAAI,CAACI,YAAY,GAAGD,KAAK;IACzB,IAAI,CAACG,YAAY,GAAGD,KAAK;IACzB,IAAI,CAACG,gCAAgC,GAAGD,yBAAyB;IACjE,IAAI,CAACO,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACJ,mBAAmB,GAAGD,kBAAkB;IAE7C,OAAO,IAAI;EACf;EAEA;;;;;EAKOM,cAAc,CAACC,KAAqB;IACvC,OACI,IAAI,CAACf,YAAY,KAAKe,KAAK,CAACf,YAAY,IACxC,IAAI,CAACG,YAAY,KAAKY,KAAK,CAACZ,YAAY,IACxC,IAAI,CAACE,YAAY,KAAKU,KAAK,CAACV,YAAY,IACxC,IAAI,CAACE,gCAAgC,KAAKQ,KAAK,CAACR,gCAAgC,IAChF,IAAI,CAACM,YAAY,KAAKE,KAAK,CAACF,YAAY,IACxC,IAAI,CAACJ,mBAAmB,KAAKM,KAAK,CAACN,mBAAmB,IACtD,IAAI,CAACE,WAAW,KAAKI,KAAK,CAACJ,WAAW;EAE9C","names":["TextureSampler","constructor","wrapU","_cachedWrapU","value","wrapV","_cachedWrapV","wrapR","_cachedWrapR","anisotropicFilteringLevel","_cachedAnisotropicFilteringLevel","comparisonFunction","_comparisonFunction","useMipMaps","_useMipMaps","setParameters","samplingMode","compareSampler","other"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/Textures/textureSampler.ts"],"sourcesContent":["import { Constants } from \"../../Engines/constants\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n/**\r\n * Class used to store a texture sampler data\r\n */\r\nexport class TextureSampler {\r\n    /**\r\n     * Gets the sampling mode of the texture\r\n     */\r\n    public samplingMode: number = -1;\r\n\r\n    /**\r\n     * | Value | Type               | Description |\r\n     * | ----- | ------------------ | ----------- |\r\n     * | 0     | CLAMP_ADDRESSMODE  |             |\r\n     * | 1     | WRAP_ADDRESSMODE   |             |\r\n     * | 2     | MIRROR_ADDRESSMODE |             |\r\n     */\r\n    public get wrapU() {\r\n        return this._cachedWrapU;\r\n    }\r\n\r\n    public set wrapU(value: Nullable<number>) {\r\n        this._cachedWrapU = value;\r\n    }\r\n\r\n    /**\r\n     * | Value | Type               | Description |\r\n     * | ----- | ------------------ | ----------- |\r\n     * | 0     | CLAMP_ADDRESSMODE  |             |\r\n     * | 1     | WRAP_ADDRESSMODE   |             |\r\n     * | 2     | MIRROR_ADDRESSMODE |             |\r\n     */\r\n    public get wrapV() {\r\n        return this._cachedWrapV;\r\n    }\r\n\r\n    public set wrapV(value: Nullable<number>) {\r\n        this._cachedWrapV = value;\r\n    }\r\n\r\n    /**\r\n     * | Value | Type               | Description |\r\n     * | ----- | ------------------ | ----------- |\r\n     * | 0     | CLAMP_ADDRESSMODE  |             |\r\n     * | 1     | WRAP_ADDRESSMODE   |             |\r\n     * | 2     | MIRROR_ADDRESSMODE |             |\r\n     */\r\n    public get wrapR() {\r\n        return this._cachedWrapR;\r\n    }\r\n\r\n    public set wrapR(value: Nullable<number>) {\r\n        this._cachedWrapR = value;\r\n    }\r\n\r\n    /**\r\n     * With compliant hardware and browser (supporting anisotropic filtering)\r\n     * this defines the level of anisotropic filtering in the texture.\r\n     * The higher the better but the slower.\r\n     */\r\n    public get anisotropicFilteringLevel() {\r\n        return this._cachedAnisotropicFilteringLevel;\r\n    }\r\n\r\n    public set anisotropicFilteringLevel(value: Nullable<number>) {\r\n        this._cachedAnisotropicFilteringLevel = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the comparison function (Constants.LESS, Constants.EQUAL, etc). Set 0 to not use a comparison function\r\n     */\r\n    public get comparisonFunction() {\r\n        return this._comparisonFunction;\r\n    }\r\n\r\n    public set comparisonFunction(value: number) {\r\n        this._comparisonFunction = value;\r\n    }\r\n\r\n    private _useMipMaps = true;\r\n    /**\r\n     * Indicates to use the mip maps (if available on the texture).\r\n     * Thanks to this flag, you can instruct the sampler to not sample the mipmaps even if they exist (and if the sampling mode is set to a value that normally samples the mipmaps!)\r\n     */\r\n    public get useMipMaps() {\r\n        return this._useMipMaps;\r\n    }\r\n\r\n    public set useMipMaps(value: boolean) {\r\n        this._useMipMaps = value;\r\n    }\r\n\r\n    /** @internal */\r\n    public _cachedWrapU: Nullable<number> = null;\r\n\r\n    /** @internal */\r\n    public _cachedWrapV: Nullable<number> = null;\r\n\r\n    /** @internal */\r\n    public _cachedWrapR: Nullable<number> = null;\r\n\r\n    /** @internal */\r\n    public _cachedAnisotropicFilteringLevel: Nullable<number> = null;\r\n\r\n    /** @internal */\r\n    public _comparisonFunction: number = 0;\r\n\r\n    /**\r\n     * Creates a Sampler instance\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     * Sets all the parameters of the sampler\r\n     * @param wrapU u address mode (default: TEXTURE_WRAP_ADDRESSMODE)\r\n     * @param wrapV v address mode (default: TEXTURE_WRAP_ADDRESSMODE)\r\n     * @param wrapR r address mode (default: TEXTURE_WRAP_ADDRESSMODE)\r\n     * @param anisotropicFilteringLevel anisotropic level (default: 1)\r\n     * @param samplingMode sampling mode (default: Constants.TEXTURE_BILINEAR_SAMPLINGMODE)\r\n     * @param comparisonFunction comparison function (default: 0 - no comparison function)\r\n     * @returns the current sampler instance\r\n     */\r\n    public setParameters(\r\n        wrapU = Constants.TEXTURE_WRAP_ADDRESSMODE,\r\n        wrapV = Constants.TEXTURE_WRAP_ADDRESSMODE,\r\n        wrapR = Constants.TEXTURE_WRAP_ADDRESSMODE,\r\n        anisotropicFilteringLevel = 1,\r\n        samplingMode = Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n        comparisonFunction = 0\r\n    ): TextureSampler {\r\n        this._cachedWrapU = wrapU;\r\n        this._cachedWrapV = wrapV;\r\n        this._cachedWrapR = wrapR;\r\n        this._cachedAnisotropicFilteringLevel = anisotropicFilteringLevel;\r\n        this.samplingMode = samplingMode;\r\n        this._comparisonFunction = comparisonFunction;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Compares this sampler with another one\r\n     * @param other sampler to compare with\r\n     * @returns true if the samplers have the same parametres, else false\r\n     */\r\n    public compareSampler(other: TextureSampler): boolean {\r\n        return (\r\n            this._cachedWrapU === other._cachedWrapU &&\r\n            this._cachedWrapV === other._cachedWrapV &&\r\n            this._cachedWrapR === other._cachedWrapR &&\r\n            this._cachedAnisotropicFilteringLevel === other._cachedAnisotropicFilteringLevel &&\r\n            this.samplingMode === other.samplingMode &&\r\n            this._comparisonFunction === other._comparisonFunction &&\r\n            this._useMipMaps === other._useMipMaps\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}