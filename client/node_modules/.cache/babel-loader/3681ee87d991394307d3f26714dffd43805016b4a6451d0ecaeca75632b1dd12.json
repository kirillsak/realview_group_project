{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { FactorGradient, ColorGradient, GradientHelper } from \"../Misc/gradients.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Matrix, TmpVectors } from \"../Maths/math.vector.js\";\nimport { Color4, TmpColors } from \"../Maths/math.color.js\";\nimport { Scalar } from \"../Maths/math.scalar.js\";\nimport { VertexBuffer, Buffer } from \"../Buffers/buffer.js\";\nimport { BaseParticleSystem } from \"./baseParticleSystem.js\";\nimport { ParticleSystem } from \"./particleSystem.js\";\nimport { BoxParticleEmitter } from \"../Particles/EmitterTypes/boxParticleEmitter.js\";\nimport { MaterialHelper } from \"../Materials/materialHelper.js\";\nimport { ImageProcessingConfiguration } from \"../Materials/imageProcessingConfiguration.js\";\nimport { RawTexture } from \"../Materials/Textures/rawTexture.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { CustomParticleEmitter } from \"./EmitterTypes/customParticleEmitter.js\";\nimport { ThinEngine } from \"../Engines/thinEngine.js\";\nimport { DrawWrapper } from \"../Materials/drawWrapper.js\";\nimport \"../Shaders/gpuRenderParticles.fragment.js\";\nimport \"../Shaders/gpuRenderParticles.vertex.js\";\nimport { GetClass } from \"../Misc/typeStore.js\";\nimport { addClipPlaneUniforms, bindClipPlane, prepareDefinesForClipPlanes } from \"../Materials/clipPlaneMaterialHelper.js\";\n/**\n * This represents a GPU particle system in Babylon\n * This is the fastest particle system in Babylon as it uses the GPU to update the individual particle data\n * @see https://www.babylonjs-playground.com/#PU4WYI#4\n */\nexport class GPUParticleSystem extends BaseParticleSystem {\n  /**\n   * Instantiates a GPU particle system.\n   * Particles are often small sprites used to simulate hard-to-reproduce phenomena like fire, smoke, water, or abstract visual effects like magic glitter and faery dust.\n   * @param name The name of the particle system\n   * @param options The options used to create the system\n   * @param sceneOrEngine The scene the particle system belongs to or the engine to use if no scene\n   * @param customEffect a custom effect used to change the way particles are rendered by default\n   * @param isAnimationSheetEnabled Must be true if using a spritesheet to animate the particles texture\n   */\n  constructor(name, options, sceneOrEngine, customEffect = null, isAnimationSheetEnabled = false) {\n    super(name);\n    /**\n     * The layer mask we are rendering the particles through.\n     */\n    this.layerMask = 0x0fffffff;\n    this._accumulatedCount = 0;\n    this._renderVertexBuffers = [];\n    this._targetIndex = 0;\n    this._currentRenderId = -1;\n    this._currentRenderingCameraUniqueId = -1;\n    this._started = false;\n    this._stopped = false;\n    this._timeDelta = 0;\n    /** Indicates that the update of particles is done in the animate function (and not in render). Default: false */\n    this.updateInAnimate = false;\n    this._actualFrame = 0;\n    this._rawTextureWidth = 256;\n    /**\n     * An event triggered when the system is disposed.\n     */\n    this.onDisposeObservable = new Observable();\n    /**\n     * An event triggered when the system is stopped\n     */\n    this.onStoppedObservable = new Observable();\n    /**\n     * Forces the particle to write their depth information to the depth buffer. This can help preventing other draw calls\n     * to override the particles.\n     */\n    this.forceDepthWrite = false;\n    this._preWarmDone = false;\n    /**\n     * Specifies if the particles are updated in emitter local space or world space.\n     */\n    this.isLocal = false;\n    /** Indicates that the particle system is GPU based */\n    this.isGPU = true;\n    /** @internal */\n    this._onBeforeDrawParticlesObservable = null;\n    if (!sceneOrEngine || sceneOrEngine.getClassName() === \"Scene\") {\n      this._scene = sceneOrEngine || EngineStore.LastCreatedScene;\n      this._engine = this._scene.getEngine();\n      this.uniqueId = this._scene.getUniqueId();\n      this._scene.particleSystems.push(this);\n    } else {\n      this._engine = sceneOrEngine;\n      this.defaultProjectionMatrix = Matrix.PerspectiveFovLH(0.8, 1, 0.1, 100, this._engine.isNDCHalfZRange);\n    }\n    if (this._engine.getCaps().supportComputeShaders) {\n      if (!GetClass(\"BABYLON.ComputeShaderParticleSystem\")) {\n        throw new Error(\"The ComputeShaderParticleSystem class is not available! Make sure you have imported it.\");\n      }\n      this._platform = new (GetClass(\"BABYLON.ComputeShaderParticleSystem\"))(this, this._engine);\n    } else {\n      if (!GetClass(\"BABYLON.WebGL2ParticleSystem\")) {\n        throw new Error(\"The WebGL2ParticleSystem class is not available! Make sure you have imported it.\");\n      }\n      this._platform = new (GetClass(\"BABYLON.WebGL2ParticleSystem\"))(this, this._engine);\n    }\n    this._customWrappers = {\n      0: new DrawWrapper(this._engine)\n    };\n    this._customWrappers[0].effect = customEffect;\n    this._drawWrappers = {\n      0: new DrawWrapper(this._engine)\n    };\n    if (this._drawWrappers[0].drawContext) {\n      this._drawWrappers[0].drawContext.useInstancing = true;\n    }\n    // Setup the default processing configuration to the scene.\n    this._attachImageProcessingConfiguration(null);\n    options = options !== null && options !== void 0 ? options : {};\n    if (!options.randomTextureSize) {\n      delete options.randomTextureSize;\n    }\n    const fullOptions = {\n      capacity: 50000,\n      randomTextureSize: this._engine.getCaps().maxTextureSize,\n      ...options\n    };\n    const optionsAsNumber = options;\n    if (isFinite(optionsAsNumber)) {\n      fullOptions.capacity = optionsAsNumber;\n    }\n    this._capacity = fullOptions.capacity;\n    this._activeCount = fullOptions.capacity;\n    this._currentActiveCount = 0;\n    this._isAnimationSheetEnabled = isAnimationSheetEnabled;\n    this.particleEmitterType = new BoxParticleEmitter();\n    // Random data\n    const maxTextureSize = Math.min(this._engine.getCaps().maxTextureSize, fullOptions.randomTextureSize);\n    let d = [];\n    for (let i = 0; i < maxTextureSize; ++i) {\n      d.push(Math.random());\n      d.push(Math.random());\n      d.push(Math.random());\n      d.push(Math.random());\n    }\n    this._randomTexture = new RawTexture(new Float32Array(d), maxTextureSize, 1, 5, sceneOrEngine, false, false, 1, 1);\n    this._randomTexture.name = \"GPUParticleSystem_random1\";\n    this._randomTexture.wrapU = 1;\n    this._randomTexture.wrapV = 1;\n    d = [];\n    for (let i = 0; i < maxTextureSize; ++i) {\n      d.push(Math.random());\n      d.push(Math.random());\n      d.push(Math.random());\n      d.push(Math.random());\n    }\n    this._randomTexture2 = new RawTexture(new Float32Array(d), maxTextureSize, 1, 5, sceneOrEngine, false, false, 1, 1);\n    this._randomTexture2.name = \"GPUParticleSystem_random2\";\n    this._randomTexture2.wrapU = 1;\n    this._randomTexture2.wrapV = 1;\n    this._randomTextureSize = maxTextureSize;\n  }\n  /**\n   * Gets a boolean indicating if the GPU particles can be rendered on current browser\n   */\n  static get IsSupported() {\n    if (!EngineStore.LastCreatedEngine) {\n      return false;\n    }\n    const caps = EngineStore.LastCreatedEngine.getCaps();\n    return caps.supportTransformFeedbacks || caps.supportComputeShaders;\n  }\n  /**\n   * Gets the maximum number of particles active at the same time.\n   * @returns The max number of active particles.\n   */\n  getCapacity() {\n    return this._capacity;\n  }\n  /**\n   * Gets or set the number of active particles\n   */\n  get activeParticleCount() {\n    return this._activeCount;\n  }\n  set activeParticleCount(value) {\n    this._activeCount = Math.min(value, this._capacity);\n  }\n  /**\n   * Is this system ready to be used/rendered\n   * @returns true if the system is ready\n   */\n  isReady() {\n    if (!this.emitter || this._imageProcessingConfiguration && !this._imageProcessingConfiguration.isReady() || !this.particleTexture || !this.particleTexture.isReady()) {\n      return false;\n    }\n    if (this.blendMode !== ParticleSystem.BLENDMODE_MULTIPLYADD) {\n      if (!this._getWrapper(this.blendMode).effect.isReady()) {\n        return false;\n      }\n    } else {\n      if (!this._getWrapper(ParticleSystem.BLENDMODE_MULTIPLY).effect.isReady()) {\n        return false;\n      }\n      if (!this._getWrapper(ParticleSystem.BLENDMODE_ADD).effect.isReady()) {\n        return false;\n      }\n    }\n    if (!this._platform.isUpdateBufferCreated()) {\n      this._recreateUpdateEffect();\n      return false;\n    }\n    return this._platform.isUpdateBufferReady();\n  }\n  /**\n   * Gets if the system has been started. (Note: this will still be true after stop is called)\n   * @returns True if it has been started, otherwise false.\n   */\n  isStarted() {\n    return this._started;\n  }\n  /**\n   * Gets if the system has been stopped. (Note: rendering is still happening but the system is frozen)\n   * @returns True if it has been stopped, otherwise false.\n   */\n  isStopped() {\n    return this._stopped;\n  }\n  /**\n   * Gets a boolean indicating that the system is stopping\n   * @returns true if the system is currently stopping\n   */\n  isStopping() {\n    return false; // Stop is immediate on GPU\n  }\n  /**\n   * Gets the number of particles active at the same time.\n   * @returns The number of active particles.\n   */\n  getActiveCount() {\n    return this._currentActiveCount;\n  }\n  /**\n   * Starts the particle system and begins to emit\n   * @param delay defines the delay in milliseconds before starting the system (this.startDelay by default)\n   */\n  start(delay = this.startDelay) {\n    if (!this.targetStopDuration && this._hasTargetStopDurationDependantGradient()) {\n      throw \"Particle system started with a targetStopDuration dependant gradient (eg. startSizeGradients) but no targetStopDuration set\";\n    }\n    if (delay) {\n      setTimeout(() => {\n        this.start(0);\n      }, delay);\n      return;\n    }\n    this._started = true;\n    this._stopped = false;\n    this._preWarmDone = false;\n    // Animations\n    if (this.beginAnimationOnStart && this.animations && this.animations.length > 0 && this._scene) {\n      this._scene.beginAnimation(this, this.beginAnimationFrom, this.beginAnimationTo, this.beginAnimationLoop);\n    }\n  }\n  /**\n   * Stops the particle system.\n   */\n  stop() {\n    if (this._stopped) {\n      return;\n    }\n    this._stopped = true;\n  }\n  /**\n   * Remove all active particles\n   */\n  reset() {\n    this._releaseBuffers();\n    this._platform.releaseVertexBuffers();\n    this._currentActiveCount = 0;\n    this._targetIndex = 0;\n  }\n  /**\n   * Returns the string \"GPUParticleSystem\"\n   * @returns a string containing the class name\n   */\n  getClassName() {\n    return \"GPUParticleSystem\";\n  }\n  /**\n   * Gets the custom effect used to render the particles\n   * @param blendMode Blend mode for which the effect should be retrieved\n   * @returns The effect\n   */\n  getCustomEffect(blendMode = 0) {\n    var _a, _b;\n    return (_b = (_a = this._customWrappers[blendMode]) === null || _a === void 0 ? void 0 : _a.effect) !== null && _b !== void 0 ? _b : this._customWrappers[0].effect;\n  }\n  _getCustomDrawWrapper(blendMode = 0) {\n    var _a;\n    return (_a = this._customWrappers[blendMode]) !== null && _a !== void 0 ? _a : this._customWrappers[0];\n  }\n  /**\n   * Sets the custom effect used to render the particles\n   * @param effect The effect to set\n   * @param blendMode Blend mode for which the effect should be set\n   */\n  setCustomEffect(effect, blendMode = 0) {\n    this._customWrappers[blendMode] = new DrawWrapper(this._engine);\n    this._customWrappers[blendMode].effect = effect;\n  }\n  /**\n   * Observable that will be called just before the particles are drawn\n   */\n  get onBeforeDrawParticlesObservable() {\n    if (!this._onBeforeDrawParticlesObservable) {\n      this._onBeforeDrawParticlesObservable = new Observable();\n    }\n    return this._onBeforeDrawParticlesObservable;\n  }\n  /**\n   * Gets the name of the particle vertex shader\n   */\n  get vertexShaderName() {\n    return \"gpuRenderParticles\";\n  }\n  /**\n   * Gets the vertex buffers used by the particle system\n   * Should be called after render() has been called for the current frame so that the buffers returned are the ones that have been updated\n   * in the current frame (there's a ping-pong between two sets of buffers - for a given frame, one set is used as the source and the other as the destination)\n   */\n  get vertexBuffers() {\n    // We return the other buffers than those corresponding to this._targetIndex because it is assumed vertexBuffers will be called in the current frame\n    // after render() has been called, meaning that the buffers have already been swapped and this._targetIndex points to the buffers that will be updated\n    // in the next frame (and which are the sources in this frame) and (this._targetIndex ^ 1) points to the buffers that have been updated this frame\n    // (and that will be the source buffers in the next frame)\n    return this._renderVertexBuffers[this._targetIndex ^ 1];\n  }\n  /**\n   * Gets the index buffer used by the particle system (null for GPU particle systems)\n   */\n  get indexBuffer() {\n    return null;\n  }\n  _removeGradientAndTexture(gradient, gradients, texture) {\n    super._removeGradientAndTexture(gradient, gradients, texture);\n    this._releaseBuffers();\n    return this;\n  }\n  /**\n   * Adds a new color gradient\n   * @param gradient defines the gradient to use (between 0 and 1)\n   * @param color1 defines the color to affect to the specified gradient\n   * @returns the current particle system\n   */\n  addColorGradient(gradient, color1) {\n    if (!this._colorGradients) {\n      this._colorGradients = [];\n    }\n    const colorGradient = new ColorGradient(gradient, color1);\n    this._colorGradients.push(colorGradient);\n    this._refreshColorGradient(true);\n    this._releaseBuffers();\n    return this;\n  }\n  _refreshColorGradient(reorder = false) {\n    if (this._colorGradients) {\n      if (reorder) {\n        this._colorGradients.sort((a, b) => {\n          if (a.gradient < b.gradient) {\n            return -1;\n          } else if (a.gradient > b.gradient) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n      if (this._colorGradientsTexture) {\n        this._colorGradientsTexture.dispose();\n        this._colorGradientsTexture = null;\n      }\n    }\n  }\n  /** Force the system to rebuild all gradients that need to be resync */\n  forceRefreshGradients() {\n    this._refreshColorGradient();\n    this._refreshFactorGradient(this._sizeGradients, \"_sizeGradientsTexture\");\n    this._refreshFactorGradient(this._angularSpeedGradients, \"_angularSpeedGradientsTexture\");\n    this._refreshFactorGradient(this._velocityGradients, \"_velocityGradientsTexture\");\n    this._refreshFactorGradient(this._limitVelocityGradients, \"_limitVelocityGradientsTexture\");\n    this._refreshFactorGradient(this._dragGradients, \"_dragGradientsTexture\");\n    this.reset();\n  }\n  /**\n   * Remove a specific color gradient\n   * @param gradient defines the gradient to remove\n   * @returns the current particle system\n   */\n  removeColorGradient(gradient) {\n    this._removeGradientAndTexture(gradient, this._colorGradients, this._colorGradientsTexture);\n    this._colorGradientsTexture = null;\n    return this;\n  }\n  /**\n   * Resets the draw wrappers cache\n   */\n  resetDrawCache() {\n    var _a;\n    for (const blendMode in this._drawWrappers) {\n      const drawWrapper = this._drawWrappers[blendMode];\n      (_a = drawWrapper.drawContext) === null || _a === void 0 ? void 0 : _a.reset();\n    }\n  }\n  _addFactorGradient(factorGradients, gradient, factor) {\n    const valueGradient = new FactorGradient(gradient, factor);\n    factorGradients.push(valueGradient);\n    this._releaseBuffers();\n  }\n  /**\n   * Adds a new size gradient\n   * @param gradient defines the gradient to use (between 0 and 1)\n   * @param factor defines the size factor to affect to the specified gradient\n   * @returns the current particle system\n   */\n  addSizeGradient(gradient, factor) {\n    if (!this._sizeGradients) {\n      this._sizeGradients = [];\n    }\n    this._addFactorGradient(this._sizeGradients, gradient, factor);\n    this._refreshFactorGradient(this._sizeGradients, \"_sizeGradientsTexture\", true);\n    this._releaseBuffers();\n    return this;\n  }\n  /**\n   * Remove a specific size gradient\n   * @param gradient defines the gradient to remove\n   * @returns the current particle system\n   */\n  removeSizeGradient(gradient) {\n    this._removeGradientAndTexture(gradient, this._sizeGradients, this._sizeGradientsTexture);\n    this._sizeGradientsTexture = null;\n    return this;\n  }\n  _refreshFactorGradient(factorGradients, textureName, reorder = false) {\n    if (!factorGradients) {\n      return;\n    }\n    if (reorder) {\n      factorGradients.sort((a, b) => {\n        if (a.gradient < b.gradient) {\n          return -1;\n        } else if (a.gradient > b.gradient) {\n          return 1;\n        }\n        return 0;\n      });\n    }\n    const that = this;\n    if (that[textureName]) {\n      that[textureName].dispose();\n      that[textureName] = null;\n    }\n  }\n  /**\n   * Adds a new angular speed gradient\n   * @param gradient defines the gradient to use (between 0 and 1)\n   * @param factor defines the angular speed to affect to the specified gradient\n   * @returns the current particle system\n   */\n  addAngularSpeedGradient(gradient, factor) {\n    if (!this._angularSpeedGradients) {\n      this._angularSpeedGradients = [];\n    }\n    this._addFactorGradient(this._angularSpeedGradients, gradient, factor);\n    this._refreshFactorGradient(this._angularSpeedGradients, \"_angularSpeedGradientsTexture\", true);\n    this._releaseBuffers();\n    return this;\n  }\n  /**\n   * Remove a specific angular speed gradient\n   * @param gradient defines the gradient to remove\n   * @returns the current particle system\n   */\n  removeAngularSpeedGradient(gradient) {\n    this._removeGradientAndTexture(gradient, this._angularSpeedGradients, this._angularSpeedGradientsTexture);\n    this._angularSpeedGradientsTexture = null;\n    return this;\n  }\n  /**\n   * Adds a new velocity gradient\n   * @param gradient defines the gradient to use (between 0 and 1)\n   * @param factor defines the velocity to affect to the specified gradient\n   * @returns the current particle system\n   */\n  addVelocityGradient(gradient, factor) {\n    if (!this._velocityGradients) {\n      this._velocityGradients = [];\n    }\n    this._addFactorGradient(this._velocityGradients, gradient, factor);\n    this._refreshFactorGradient(this._velocityGradients, \"_velocityGradientsTexture\", true);\n    this._releaseBuffers();\n    return this;\n  }\n  /**\n   * Remove a specific velocity gradient\n   * @param gradient defines the gradient to remove\n   * @returns the current particle system\n   */\n  removeVelocityGradient(gradient) {\n    this._removeGradientAndTexture(gradient, this._velocityGradients, this._velocityGradientsTexture);\n    this._velocityGradientsTexture = null;\n    return this;\n  }\n  /**\n   * Adds a new limit velocity gradient\n   * @param gradient defines the gradient to use (between 0 and 1)\n   * @param factor defines the limit velocity value to affect to the specified gradient\n   * @returns the current particle system\n   */\n  addLimitVelocityGradient(gradient, factor) {\n    if (!this._limitVelocityGradients) {\n      this._limitVelocityGradients = [];\n    }\n    this._addFactorGradient(this._limitVelocityGradients, gradient, factor);\n    this._refreshFactorGradient(this._limitVelocityGradients, \"_limitVelocityGradientsTexture\", true);\n    this._releaseBuffers();\n    return this;\n  }\n  /**\n   * Remove a specific limit velocity gradient\n   * @param gradient defines the gradient to remove\n   * @returns the current particle system\n   */\n  removeLimitVelocityGradient(gradient) {\n    this._removeGradientAndTexture(gradient, this._limitVelocityGradients, this._limitVelocityGradientsTexture);\n    this._limitVelocityGradientsTexture = null;\n    return this;\n  }\n  /**\n   * Adds a new drag gradient\n   * @param gradient defines the gradient to use (between 0 and 1)\n   * @param factor defines the drag value to affect to the specified gradient\n   * @returns the current particle system\n   */\n  addDragGradient(gradient, factor) {\n    if (!this._dragGradients) {\n      this._dragGradients = [];\n    }\n    this._addFactorGradient(this._dragGradients, gradient, factor);\n    this._refreshFactorGradient(this._dragGradients, \"_dragGradientsTexture\", true);\n    this._releaseBuffers();\n    return this;\n  }\n  /**\n   * Remove a specific drag gradient\n   * @param gradient defines the gradient to remove\n   * @returns the current particle system\n   */\n  removeDragGradient(gradient) {\n    this._removeGradientAndTexture(gradient, this._dragGradients, this._dragGradientsTexture);\n    this._dragGradientsTexture = null;\n    return this;\n  }\n  /**\n   * Not supported by GPUParticleSystem\n   * @returns the current particle system\n   */\n  addEmitRateGradient() {\n    // Do nothing as emit rate is not supported by GPUParticleSystem\n    return this;\n  }\n  /**\n   * Not supported by GPUParticleSystem\n   * @returns the current particle system\n   */\n  removeEmitRateGradient() {\n    // Do nothing as emit rate is not supported by GPUParticleSystem\n    return this;\n  }\n  /**\n   * Not supported by GPUParticleSystem\n   * @returns the current particle system\n   */\n  addStartSizeGradient() {\n    // Do nothing as start size is not supported by GPUParticleSystem\n    return this;\n  }\n  /**\n   * Not supported by GPUParticleSystem\n   * @returns the current particle system\n   */\n  removeStartSizeGradient() {\n    // Do nothing as start size is not supported by GPUParticleSystem\n    return this;\n  }\n  /**\n   * Not supported by GPUParticleSystem\n   * @returns the current particle system\n   */\n  addColorRemapGradient() {\n    // Do nothing as start size is not supported by GPUParticleSystem\n    return this;\n  }\n  /**\n   * Not supported by GPUParticleSystem\n   * @returns the current particle system\n   */\n  removeColorRemapGradient() {\n    // Do nothing as start size is not supported by GPUParticleSystem\n    return this;\n  }\n  /**\n   * Not supported by GPUParticleSystem\n   * @returns the current particle system\n   */\n  addAlphaRemapGradient() {\n    // Do nothing as start size is not supported by GPUParticleSystem\n    return this;\n  }\n  /**\n   * Not supported by GPUParticleSystem\n   * @returns the current particle system\n   */\n  removeAlphaRemapGradient() {\n    // Do nothing as start size is not supported by GPUParticleSystem\n    return this;\n  }\n  /**\n   * Not supported by GPUParticleSystem\n   * @returns the current particle system\n   */\n  addRampGradient() {\n    //Not supported by GPUParticleSystem\n    return this;\n  }\n  /**\n   * Not supported by GPUParticleSystem\n   * @returns the current particle system\n   */\n  removeRampGradient() {\n    //Not supported by GPUParticleSystem\n    return this;\n  }\n  /**\n   * Not supported by GPUParticleSystem\n   * @returns the list of ramp gradients\n   */\n  getRampGradients() {\n    return null;\n  }\n  /**\n   * Not supported by GPUParticleSystem\n   * Gets or sets a boolean indicating that ramp gradients must be used\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/particles/particle_system/particle_system_intro#ramp-gradients\n   */\n  get useRampGradients() {\n    //Not supported by GPUParticleSystem\n    return false;\n  }\n  set useRampGradients(value) {\n    //Not supported by GPUParticleSystem\n  }\n  /**\n   * Not supported by GPUParticleSystem\n   * @returns the current particle system\n   */\n  addLifeTimeGradient() {\n    //Not supported by GPUParticleSystem\n    return this;\n  }\n  /**\n   * Not supported by GPUParticleSystem\n   * @returns the current particle system\n   */\n  removeLifeTimeGradient() {\n    //Not supported by GPUParticleSystem\n    return this;\n  }\n  _reset() {\n    this._releaseBuffers();\n  }\n  _createVertexBuffers(updateBuffer, renderBuffer, spriteSource) {\n    const renderVertexBuffers = {};\n    renderVertexBuffers[\"position\"] = renderBuffer.createVertexBuffer(\"position\", 0, 3, this._attributesStrideSize, true);\n    let offset = 3;\n    renderVertexBuffers[\"age\"] = renderBuffer.createVertexBuffer(\"age\", offset, 1, this._attributesStrideSize, true);\n    offset += 1;\n    renderVertexBuffers[\"size\"] = renderBuffer.createVertexBuffer(\"size\", offset, 3, this._attributesStrideSize, true);\n    offset += 3;\n    renderVertexBuffers[\"life\"] = renderBuffer.createVertexBuffer(\"life\", offset, 1, this._attributesStrideSize, true);\n    offset += 1;\n    offset += 4; // seed\n    if (this.billboardMode === ParticleSystem.BILLBOARDMODE_STRETCHED) {\n      renderVertexBuffers[\"direction\"] = renderBuffer.createVertexBuffer(\"direction\", offset, 3, this._attributesStrideSize, true);\n    }\n    offset += 3; // direction\n    if (this._platform.alignDataInBuffer) {\n      offset += 1;\n    }\n    if (this.particleEmitterType instanceof CustomParticleEmitter) {\n      offset += 3;\n      if (this._platform.alignDataInBuffer) {\n        offset += 1;\n      }\n    }\n    if (!this._colorGradientsTexture) {\n      renderVertexBuffers[\"color\"] = renderBuffer.createVertexBuffer(\"color\", offset, 4, this._attributesStrideSize, true);\n      offset += 4;\n    }\n    if (!this._isBillboardBased) {\n      renderVertexBuffers[\"initialDirection\"] = renderBuffer.createVertexBuffer(\"initialDirection\", offset, 3, this._attributesStrideSize, true);\n      offset += 3;\n      if (this._platform.alignDataInBuffer) {\n        offset += 1;\n      }\n    }\n    if (this.noiseTexture) {\n      renderVertexBuffers[\"noiseCoordinates1\"] = renderBuffer.createVertexBuffer(\"noiseCoordinates1\", offset, 3, this._attributesStrideSize, true);\n      offset += 3;\n      if (this._platform.alignDataInBuffer) {\n        offset += 1;\n      }\n      renderVertexBuffers[\"noiseCoordinates2\"] = renderBuffer.createVertexBuffer(\"noiseCoordinates2\", offset, 3, this._attributesStrideSize, true);\n      offset += 3;\n      if (this._platform.alignDataInBuffer) {\n        offset += 1;\n      }\n    }\n    renderVertexBuffers[\"angle\"] = renderBuffer.createVertexBuffer(\"angle\", offset, 1, this._attributesStrideSize, true);\n    if (this._angularSpeedGradientsTexture) {\n      offset++;\n    } else {\n      offset += 2;\n    }\n    if (this._isAnimationSheetEnabled) {\n      renderVertexBuffers[\"cellIndex\"] = renderBuffer.createVertexBuffer(\"cellIndex\", offset, 1, this._attributesStrideSize, true);\n      offset += 1;\n      if (this.spriteRandomStartCell) {\n        renderVertexBuffers[\"cellStartOffset\"] = renderBuffer.createVertexBuffer(\"cellStartOffset\", offset, 1, this._attributesStrideSize, true);\n        offset += 1;\n      }\n    }\n    renderVertexBuffers[\"offset\"] = spriteSource.createVertexBuffer(\"offset\", 0, 2);\n    renderVertexBuffers[\"uv\"] = spriteSource.createVertexBuffer(\"uv\", 2, 2);\n    this._renderVertexBuffers.push(renderVertexBuffers);\n    this._platform.createVertexBuffers(updateBuffer, renderVertexBuffers);\n    this.resetDrawCache();\n  }\n  _initialize(force = false) {\n    if (this._buffer0 && !force) {\n      return;\n    }\n    const engine = this._engine;\n    const data = new Array();\n    this._attributesStrideSize = 21;\n    this._targetIndex = 0;\n    if (this._platform.alignDataInBuffer) {\n      this._attributesStrideSize += 1;\n    }\n    if (this.particleEmitterType instanceof CustomParticleEmitter) {\n      this._attributesStrideSize += 3;\n      if (this._platform.alignDataInBuffer) {\n        this._attributesStrideSize += 1;\n      }\n    }\n    if (!this.isBillboardBased) {\n      this._attributesStrideSize += 3;\n      if (this._platform.alignDataInBuffer) {\n        this._attributesStrideSize += 1;\n      }\n    }\n    if (this._colorGradientsTexture) {\n      this._attributesStrideSize -= 4;\n    }\n    if (this._angularSpeedGradientsTexture) {\n      this._attributesStrideSize -= 1;\n    }\n    if (this._isAnimationSheetEnabled) {\n      this._attributesStrideSize += 1;\n      if (this.spriteRandomStartCell) {\n        this._attributesStrideSize += 1;\n      }\n    }\n    if (this.noiseTexture) {\n      this._attributesStrideSize += 6;\n      if (this._platform.alignDataInBuffer) {\n        this._attributesStrideSize += 2;\n      }\n    }\n    if (this._platform.alignDataInBuffer) {\n      this._attributesStrideSize += 3 - (this._attributesStrideSize + 3 & 3); // round to multiple of 4\n    }\n\n    const usingCustomEmitter = this.particleEmitterType instanceof CustomParticleEmitter;\n    const tmpVector = TmpVectors.Vector3[0];\n    let offset = 0;\n    for (let particleIndex = 0; particleIndex < this._capacity; particleIndex++) {\n      // position\n      data.push(0.0);\n      data.push(0.0);\n      data.push(0.0);\n      // Age\n      data.push(0.0); // create the particle as a dead one to create a new one at start\n      // Size\n      data.push(0.0);\n      data.push(0.0);\n      data.push(0.0);\n      // life\n      data.push(0.0);\n      // Seed\n      data.push(Math.random());\n      data.push(Math.random());\n      data.push(Math.random());\n      data.push(Math.random());\n      // direction\n      if (usingCustomEmitter) {\n        this.particleEmitterType.particleDestinationGenerator(particleIndex, null, tmpVector);\n        data.push(tmpVector.x);\n        data.push(tmpVector.y);\n        data.push(tmpVector.z);\n      } else {\n        data.push(0.0);\n        data.push(0.0);\n        data.push(0.0);\n      }\n      if (this._platform.alignDataInBuffer) {\n        data.push(0.0); // dummy0\n      }\n\n      offset += 16; // position, age, size, life, seed, direction, dummy0\n      if (usingCustomEmitter) {\n        this.particleEmitterType.particlePositionGenerator(particleIndex, null, tmpVector);\n        data.push(tmpVector.x);\n        data.push(tmpVector.y);\n        data.push(tmpVector.z);\n        if (this._platform.alignDataInBuffer) {\n          data.push(0.0); // dummy1\n        }\n\n        offset += 4;\n      }\n      if (!this._colorGradientsTexture) {\n        // color\n        data.push(0.0);\n        data.push(0.0);\n        data.push(0.0);\n        data.push(0.0);\n        offset += 4;\n      }\n      if (!this.isBillboardBased) {\n        // initialDirection\n        data.push(0.0);\n        data.push(0.0);\n        data.push(0.0);\n        if (this._platform.alignDataInBuffer) {\n          data.push(0.0); // dummy2\n        }\n\n        offset += 4;\n      }\n      if (this.noiseTexture) {\n        // Random coordinates for reading into noise texture\n        data.push(Math.random());\n        data.push(Math.random());\n        data.push(Math.random());\n        if (this._platform.alignDataInBuffer) {\n          data.push(0.0); // dummy3\n        }\n\n        data.push(Math.random());\n        data.push(Math.random());\n        data.push(Math.random());\n        if (this._platform.alignDataInBuffer) {\n          data.push(0.0); // dummy4\n        }\n\n        offset += 8;\n      }\n      // angle\n      data.push(0.0);\n      offset += 1;\n      if (!this._angularSpeedGradientsTexture) {\n        data.push(0.0);\n        offset += 1;\n      }\n      if (this._isAnimationSheetEnabled) {\n        data.push(0.0);\n        offset += 1;\n        if (this.spriteRandomStartCell) {\n          data.push(0.0);\n          offset += 1;\n        }\n      }\n      if (this._platform.alignDataInBuffer) {\n        let numDummies = 3 - (offset + 3 & 3);\n        offset += numDummies;\n        while (numDummies-- > 0) {\n          data.push(0.0);\n        }\n      }\n    }\n    // Sprite data\n    const spriteData = new Float32Array([0.5, 0.5, 1, 1, -0.5, 0.5, 0, 1, 0.5, -0.5, 1, 0, -0.5, -0.5, 0, 0]);\n    const bufferData1 = this._platform.createParticleBuffer(data);\n    const bufferData2 = this._platform.createParticleBuffer(data);\n    // Buffers\n    this._buffer0 = new Buffer(engine, bufferData1, false, this._attributesStrideSize);\n    this._buffer1 = new Buffer(engine, bufferData2, false, this._attributesStrideSize);\n    this._spriteBuffer = new Buffer(engine, spriteData, false, 4);\n    // Update & Render vertex buffers\n    this._renderVertexBuffers = [];\n    this._createVertexBuffers(this._buffer0, this._buffer1, this._spriteBuffer);\n    this._createVertexBuffers(this._buffer1, this._buffer0, this._spriteBuffer);\n    // Links\n    this._sourceBuffer = this._buffer0;\n    this._targetBuffer = this._buffer1;\n  }\n  /** @internal */\n  _recreateUpdateEffect() {\n    let defines = this.particleEmitterType ? this.particleEmitterType.getEffectDefines() : \"\";\n    if (this._isBillboardBased) {\n      defines += \"\\n#define BILLBOARD\";\n    }\n    if (this._colorGradientsTexture) {\n      defines += \"\\n#define COLORGRADIENTS\";\n    }\n    if (this._sizeGradientsTexture) {\n      defines += \"\\n#define SIZEGRADIENTS\";\n    }\n    if (this._angularSpeedGradientsTexture) {\n      defines += \"\\n#define ANGULARSPEEDGRADIENTS\";\n    }\n    if (this._velocityGradientsTexture) {\n      defines += \"\\n#define VELOCITYGRADIENTS\";\n    }\n    if (this._limitVelocityGradientsTexture) {\n      defines += \"\\n#define LIMITVELOCITYGRADIENTS\";\n    }\n    if (this._dragGradientsTexture) {\n      defines += \"\\n#define DRAGGRADIENTS\";\n    }\n    if (this.isAnimationSheetEnabled) {\n      defines += \"\\n#define ANIMATESHEET\";\n      if (this.spriteRandomStartCell) {\n        defines += \"\\n#define ANIMATESHEETRANDOMSTART\";\n      }\n    }\n    if (this.noiseTexture) {\n      defines += \"\\n#define NOISE\";\n    }\n    if (this.isLocal) {\n      defines += \"\\n#define LOCAL\";\n    }\n    if (this._platform.isUpdateBufferCreated() && this._cachedUpdateDefines === defines) {\n      return true;\n    }\n    this._cachedUpdateDefines = defines;\n    this._updateBuffer = this._platform.createUpdateBuffer(defines);\n    return this._platform.isUpdateBufferReady();\n  }\n  /**\n   * @internal\n   */\n  _getWrapper(blendMode) {\n    const customWrapper = this._getCustomDrawWrapper(blendMode);\n    if (customWrapper === null || customWrapper === void 0 ? void 0 : customWrapper.effect) {\n      return customWrapper;\n    }\n    const defines = [];\n    this.fillDefines(defines, blendMode);\n    // Effect\n    let drawWrapper = this._drawWrappers[blendMode];\n    if (!drawWrapper) {\n      drawWrapper = new DrawWrapper(this._engine);\n      if (drawWrapper.drawContext) {\n        drawWrapper.drawContext.useInstancing = true;\n      }\n      this._drawWrappers[blendMode] = drawWrapper;\n    }\n    const join = defines.join(\"\\n\");\n    if (drawWrapper.defines !== join) {\n      const attributes = [];\n      const uniforms = [];\n      const samplers = [];\n      this.fillUniformsAttributesAndSamplerNames(uniforms, attributes, samplers);\n      drawWrapper.setEffect(this._engine.createEffect(\"gpuRenderParticles\", attributes, uniforms, samplers, join), join);\n    }\n    return drawWrapper;\n  }\n  /**\n   * @internal\n   */\n  static _GetAttributeNamesOrOptions(hasColorGradients = false, isAnimationSheetEnabled = false, isBillboardBased = false, isBillboardStretched = false) {\n    const attributeNamesOrOptions = [VertexBuffer.PositionKind, \"age\", \"life\", \"size\", \"angle\"];\n    if (!hasColorGradients) {\n      attributeNamesOrOptions.push(VertexBuffer.ColorKind);\n    }\n    if (isAnimationSheetEnabled) {\n      attributeNamesOrOptions.push(\"cellIndex\");\n    }\n    if (!isBillboardBased) {\n      attributeNamesOrOptions.push(\"initialDirection\");\n    }\n    if (!isBillboardStretched) {\n      attributeNamesOrOptions.push(\"direction\");\n    }\n    attributeNamesOrOptions.push(\"offset\", VertexBuffer.UVKind);\n    return attributeNamesOrOptions;\n  }\n  /**\n   * @internal\n   */\n  static _GetEffectCreationOptions(isAnimationSheetEnabled = false, useLogarithmicDepth = false) {\n    const effectCreationOption = [\"emitterWM\", \"worldOffset\", \"view\", \"projection\", \"colorDead\", \"invView\", \"translationPivot\", \"eyePosition\"];\n    addClipPlaneUniforms(effectCreationOption);\n    if (isAnimationSheetEnabled) {\n      effectCreationOption.push(\"sheetInfos\");\n    }\n    if (useLogarithmicDepth) {\n      effectCreationOption.push(\"logarithmicDepthConstant\");\n    }\n    return effectCreationOption;\n  }\n  /**\n   * Fill the defines array according to the current settings of the particle system\n   * @param defines Array to be updated\n   * @param blendMode blend mode to take into account when updating the array\n   */\n  fillDefines(defines, blendMode = 0) {\n    if (this._scene) {\n      prepareDefinesForClipPlanes(this, this._scene, defines);\n    }\n    if (blendMode === ParticleSystem.BLENDMODE_MULTIPLY) {\n      defines.push(\"#define BLENDMULTIPLYMODE\");\n    }\n    if (this.isLocal) {\n      defines.push(\"#define LOCAL\");\n    }\n    if (this.useLogarithmicDepth) {\n      defines.push(\"#define LOGARITHMICDEPTH\");\n    }\n    if (this._isBillboardBased) {\n      defines.push(\"#define BILLBOARD\");\n      switch (this.billboardMode) {\n        case ParticleSystem.BILLBOARDMODE_Y:\n          defines.push(\"#define BILLBOARDY\");\n          break;\n        case ParticleSystem.BILLBOARDMODE_STRETCHED:\n          defines.push(\"#define BILLBOARDSTRETCHED\");\n          break;\n        case ParticleSystem.BILLBOARDMODE_ALL:\n          defines.push(\"#define BILLBOARDMODE_ALL\");\n          break;\n        default:\n          break;\n      }\n    }\n    if (this._colorGradientsTexture) {\n      defines.push(\"#define COLORGRADIENTS\");\n    }\n    if (this.isAnimationSheetEnabled) {\n      defines.push(\"#define ANIMATESHEET\");\n    }\n    if (this._imageProcessingConfiguration) {\n      this._imageProcessingConfiguration.prepareDefines(this._imageProcessingConfigurationDefines);\n      defines.push(\"\" + this._imageProcessingConfigurationDefines.toString());\n    }\n  }\n  /**\n   * Fill the uniforms, attributes and samplers arrays according to the current settings of the particle system\n   * @param uniforms Uniforms array to fill\n   * @param attributes Attributes array to fill\n   * @param samplers Samplers array to fill\n   */\n  fillUniformsAttributesAndSamplerNames(uniforms, attributes, samplers) {\n    attributes.push(...GPUParticleSystem._GetAttributeNamesOrOptions(!!this._colorGradientsTexture, this._isAnimationSheetEnabled, this._isBillboardBased, this._isBillboardBased && this.billboardMode === ParticleSystem.BILLBOARDMODE_STRETCHED));\n    uniforms.push(...GPUParticleSystem._GetEffectCreationOptions(this._isAnimationSheetEnabled, this.useLogarithmicDepth));\n    samplers.push(\"diffuseSampler\", \"colorGradientSampler\");\n    if (this._imageProcessingConfiguration) {\n      ImageProcessingConfiguration.PrepareUniforms(uniforms, this._imageProcessingConfigurationDefines);\n      ImageProcessingConfiguration.PrepareSamplers(samplers, this._imageProcessingConfigurationDefines);\n    }\n  }\n  /**\n   * Animates the particle system for the current frame by emitting new particles and or animating the living ones.\n   * @param preWarm defines if we are in the pre-warmimg phase\n   */\n  animate(preWarm = false) {\n    var _a;\n    this._timeDelta = this.updateSpeed * (preWarm ? this.preWarmStepOffset : ((_a = this._scene) === null || _a === void 0 ? void 0 : _a.getAnimationRatio()) || 1);\n    this._actualFrame += this._timeDelta;\n    if (!this._stopped) {\n      if (this.targetStopDuration && this._actualFrame >= this.targetStopDuration) {\n        this.stop();\n      }\n    }\n    if (this.updateInAnimate) {\n      this._update();\n    }\n  }\n  _createFactorGradientTexture(factorGradients, textureName) {\n    const texture = this[textureName];\n    if (!factorGradients || !factorGradients.length || texture) {\n      return;\n    }\n    const data = new Float32Array(this._rawTextureWidth);\n    for (let x = 0; x < this._rawTextureWidth; x++) {\n      const ratio = x / this._rawTextureWidth;\n      GradientHelper.GetCurrentGradient(ratio, factorGradients, (currentGradient, nextGradient, scale) => {\n        data[x] = Scalar.Lerp(currentGradient.factor1, nextGradient.factor1, scale);\n      });\n    }\n    this[textureName] = RawTexture.CreateRTexture(data, this._rawTextureWidth, 1, this._scene || this._engine, false, false, 1);\n  }\n  _createSizeGradientTexture() {\n    this._createFactorGradientTexture(this._sizeGradients, \"_sizeGradientsTexture\");\n  }\n  _createAngularSpeedGradientTexture() {\n    this._createFactorGradientTexture(this._angularSpeedGradients, \"_angularSpeedGradientsTexture\");\n  }\n  _createVelocityGradientTexture() {\n    this._createFactorGradientTexture(this._velocityGradients, \"_velocityGradientsTexture\");\n  }\n  _createLimitVelocityGradientTexture() {\n    this._createFactorGradientTexture(this._limitVelocityGradients, \"_limitVelocityGradientsTexture\");\n  }\n  _createDragGradientTexture() {\n    this._createFactorGradientTexture(this._dragGradients, \"_dragGradientsTexture\");\n  }\n  _createColorGradientTexture() {\n    if (!this._colorGradients || !this._colorGradients.length || this._colorGradientsTexture) {\n      return;\n    }\n    const data = new Uint8Array(this._rawTextureWidth * 4);\n    const tmpColor = TmpColors.Color4[0];\n    for (let x = 0; x < this._rawTextureWidth; x++) {\n      const ratio = x / this._rawTextureWidth;\n      GradientHelper.GetCurrentGradient(ratio, this._colorGradients, (currentGradient, nextGradient, scale) => {\n        Color4.LerpToRef(currentGradient.color1, nextGradient.color1, scale, tmpColor);\n        data[x * 4] = tmpColor.r * 255;\n        data[x * 4 + 1] = tmpColor.g * 255;\n        data[x * 4 + 2] = tmpColor.b * 255;\n        data[x * 4 + 3] = tmpColor.a * 255;\n      });\n    }\n    this._colorGradientsTexture = RawTexture.CreateRGBATexture(data, this._rawTextureWidth, 1, this._scene, false, false, 1);\n  }\n  _render(blendMode, emitterWM) {\n    var _a, _b;\n    // Enable render effect\n    const drawWrapper = this._getWrapper(blendMode);\n    const effect = drawWrapper.effect;\n    this._engine.enableEffect(drawWrapper);\n    const viewMatrix = ((_a = this._scene) === null || _a === void 0 ? void 0 : _a.getViewMatrix()) || Matrix.IdentityReadOnly;\n    effect.setMatrix(\"view\", viewMatrix);\n    effect.setMatrix(\"projection\", (_b = this.defaultProjectionMatrix) !== null && _b !== void 0 ? _b : this._scene.getProjectionMatrix());\n    effect.setTexture(\"diffuseSampler\", this.particleTexture);\n    effect.setVector2(\"translationPivot\", this.translationPivot);\n    effect.setVector3(\"worldOffset\", this.worldOffset);\n    if (this.isLocal) {\n      effect.setMatrix(\"emitterWM\", emitterWM);\n    }\n    if (this._colorGradientsTexture) {\n      effect.setTexture(\"colorGradientSampler\", this._colorGradientsTexture);\n    } else {\n      effect.setDirectColor4(\"colorDead\", this.colorDead);\n    }\n    if (this._isAnimationSheetEnabled && this.particleTexture) {\n      const baseSize = this.particleTexture.getBaseSize();\n      effect.setFloat3(\"sheetInfos\", this.spriteCellWidth / baseSize.width, this.spriteCellHeight / baseSize.height, baseSize.width / this.spriteCellWidth);\n    }\n    if (this._isBillboardBased && this._scene) {\n      const camera = this._scene.activeCamera;\n      effect.setVector3(\"eyePosition\", camera.globalPosition);\n    }\n    const defines = effect.defines;\n    if (this._scene) {\n      bindClipPlane(effect, this, this._scene);\n    }\n    if (defines.indexOf(\"#define BILLBOARDMODE_ALL\") >= 0) {\n      const invView = viewMatrix.clone();\n      invView.invert();\n      effect.setMatrix(\"invView\", invView);\n    }\n    // Log. depth\n    if (this.useLogarithmicDepth && this._scene) {\n      MaterialHelper.BindLogDepth(defines, effect, this._scene);\n    }\n    // image processing\n    if (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.applyByPostProcess) {\n      this._imageProcessingConfiguration.bind(effect);\n    }\n    // Draw order\n    switch (blendMode) {\n      case ParticleSystem.BLENDMODE_ADD:\n        this._engine.setAlphaMode(1);\n        break;\n      case ParticleSystem.BLENDMODE_ONEONE:\n        this._engine.setAlphaMode(6);\n        break;\n      case ParticleSystem.BLENDMODE_STANDARD:\n        this._engine.setAlphaMode(2);\n        break;\n      case ParticleSystem.BLENDMODE_MULTIPLY:\n        this._engine.setAlphaMode(4);\n        break;\n    }\n    // Bind source VAO\n    this._platform.bindDrawBuffers(this._targetIndex, effect);\n    if (this._onBeforeDrawParticlesObservable) {\n      this._onBeforeDrawParticlesObservable.notifyObservers(effect);\n    }\n    // Render\n    this._engine.drawArraysType(7, 0, 4, this._currentActiveCount);\n    this._engine.setAlphaMode(0);\n    return this._currentActiveCount;\n  }\n  /** @internal */\n  _update(emitterWM) {\n    if (!this.emitter) {\n      return;\n    }\n    if (!this._recreateUpdateEffect()) {\n      return;\n    }\n    if (this.emitter.position) {\n      const emitterMesh = this.emitter;\n      emitterWM = emitterMesh.getWorldMatrix();\n    } else {\n      const emitterPosition = this.emitter;\n      emitterWM = TmpVectors.Matrix[0];\n      Matrix.TranslationToRef(emitterPosition.x, emitterPosition.y, emitterPosition.z, emitterWM);\n    }\n    this._platform.preUpdateParticleBuffer();\n    this._updateBuffer.setFloat(\"currentCount\", this._currentActiveCount);\n    this._updateBuffer.setFloat(\"timeDelta\", this._timeDelta);\n    this._updateBuffer.setFloat(\"stopFactor\", this._stopped ? 0 : 1);\n    this._updateBuffer.setInt(\"randomTextureSize\", this._randomTextureSize);\n    this._updateBuffer.setFloat2(\"lifeTime\", this.minLifeTime, this.maxLifeTime);\n    this._updateBuffer.setFloat2(\"emitPower\", this.minEmitPower, this.maxEmitPower);\n    if (!this._colorGradientsTexture) {\n      this._updateBuffer.setDirectColor4(\"color1\", this.color1);\n      this._updateBuffer.setDirectColor4(\"color2\", this.color2);\n    }\n    this._updateBuffer.setFloat2(\"sizeRange\", this.minSize, this.maxSize);\n    this._updateBuffer.setFloat4(\"scaleRange\", this.minScaleX, this.maxScaleX, this.minScaleY, this.maxScaleY);\n    this._updateBuffer.setFloat4(\"angleRange\", this.minAngularSpeed, this.maxAngularSpeed, this.minInitialRotation, this.maxInitialRotation);\n    this._updateBuffer.setVector3(\"gravity\", this.gravity);\n    if (this._limitVelocityGradientsTexture) {\n      this._updateBuffer.setFloat(\"limitVelocityDamping\", this.limitVelocityDamping);\n    }\n    if (this.particleEmitterType) {\n      this.particleEmitterType.applyToShader(this._updateBuffer);\n    }\n    if (this._isAnimationSheetEnabled) {\n      this._updateBuffer.setFloat4(\"cellInfos\", this.startSpriteCellID, this.endSpriteCellID, this.spriteCellChangeSpeed, this.spriteCellLoop ? 1 : 0);\n    }\n    if (this.noiseTexture) {\n      this._updateBuffer.setVector3(\"noiseStrength\", this.noiseStrength);\n    }\n    if (!this.isLocal) {\n      this._updateBuffer.setMatrix(\"emitterWM\", emitterWM);\n    }\n    this._platform.updateParticleBuffer(this._targetIndex, this._targetBuffer, this._currentActiveCount);\n    // Switch VAOs\n    this._targetIndex++;\n    if (this._targetIndex === 2) {\n      this._targetIndex = 0;\n    }\n    // Switch buffers\n    const tmpBuffer = this._sourceBuffer;\n    this._sourceBuffer = this._targetBuffer;\n    this._targetBuffer = tmpBuffer;\n  }\n  /**\n   * Renders the particle system in its current state\n   * @param preWarm defines if the system should only update the particles but not render them\n   * @param forceUpdateOnly if true, force to only update the particles and never display them (meaning, even if preWarm=false, when forceUpdateOnly=true the particles won't be displayed)\n   * @returns the current number of particles\n   */\n  render(preWarm = false, forceUpdateOnly = false) {\n    if (!this._started) {\n      return 0;\n    }\n    this._createColorGradientTexture();\n    this._createSizeGradientTexture();\n    this._createAngularSpeedGradientTexture();\n    this._createVelocityGradientTexture();\n    this._createLimitVelocityGradientTexture();\n    this._createDragGradientTexture();\n    if (!this.isReady()) {\n      return 0;\n    }\n    if (!preWarm && this._scene) {\n      if (!this._preWarmDone && this.preWarmCycles) {\n        for (let index = 0; index < this.preWarmCycles; index++) {\n          this.animate(true);\n          this.render(true, true);\n        }\n        this._preWarmDone = true;\n      }\n      if (this._currentRenderId === this._scene.getFrameId() && (!this._scene.activeCamera || this._scene.activeCamera && this._currentRenderingCameraUniqueId === this._scene.activeCamera.uniqueId)) {\n        return 0;\n      }\n      this._currentRenderId = this._scene.getFrameId();\n      if (this._scene.activeCamera) {\n        this._currentRenderingCameraUniqueId = this._scene.activeCamera.uniqueId;\n      }\n    }\n    // Get everything ready to render\n    this._initialize();\n    this._accumulatedCount += this.emitRate * this._timeDelta;\n    if (this._accumulatedCount > 1) {\n      const intPart = this._accumulatedCount | 0;\n      this._accumulatedCount -= intPart;\n      this._currentActiveCount = Math.min(this._activeCount, this._currentActiveCount + intPart);\n    }\n    if (!this._currentActiveCount) {\n      return 0;\n    }\n    // Enable update effect\n    let emitterWM;\n    if (this.emitter.position) {\n      const emitterMesh = this.emitter;\n      emitterWM = emitterMesh.getWorldMatrix();\n    } else {\n      const emitterPosition = this.emitter;\n      emitterWM = TmpVectors.Matrix[0];\n      Matrix.TranslationToRef(emitterPosition.x, emitterPosition.y, emitterPosition.z, emitterWM);\n    }\n    const engine = this._engine;\n    if (!this.updateInAnimate) {\n      this._update(emitterWM);\n    }\n    let outparticles = 0;\n    if (!preWarm && !forceUpdateOnly) {\n      engine.setState(false);\n      if (this.forceDepthWrite) {\n        engine.setDepthWrite(true);\n      }\n      if (this.blendMode === ParticleSystem.BLENDMODE_MULTIPLYADD) {\n        outparticles = this._render(ParticleSystem.BLENDMODE_MULTIPLY, emitterWM) + this._render(ParticleSystem.BLENDMODE_ADD, emitterWM);\n      } else {\n        outparticles = this._render(this.blendMode, emitterWM);\n      }\n      this._engine.setAlphaMode(0);\n    }\n    return outparticles;\n  }\n  /**\n   * Rebuilds the particle system\n   */\n  rebuild() {\n    this._initialize(true);\n  }\n  _releaseBuffers() {\n    if (this._buffer0) {\n      this._buffer0.dispose();\n      this._buffer0 = null;\n    }\n    if (this._buffer1) {\n      this._buffer1.dispose();\n      this._buffer1 = null;\n    }\n    if (this._spriteBuffer) {\n      this._spriteBuffer.dispose();\n      this._spriteBuffer = null;\n    }\n    this._platform.releaseBuffers();\n  }\n  /**\n   * Disposes the particle system and free the associated resources\n   * @param disposeTexture defines if the particule texture must be disposed as well (true by default)\n   */\n  dispose(disposeTexture = true) {\n    for (const blendMode in this._drawWrappers) {\n      const drawWrapper = this._drawWrappers[blendMode];\n      drawWrapper.dispose();\n    }\n    this._drawWrappers = {};\n    if (this._scene) {\n      const index = this._scene.particleSystems.indexOf(this);\n      if (index > -1) {\n        this._scene.particleSystems.splice(index, 1);\n      }\n    }\n    this._releaseBuffers();\n    this._platform.releaseVertexBuffers();\n    for (let i = 0; i < this._renderVertexBuffers.length; ++i) {\n      const rvb = this._renderVertexBuffers[i];\n      for (const key in rvb) {\n        rvb[key].dispose();\n      }\n    }\n    this._renderVertexBuffers = [];\n    if (this._colorGradientsTexture) {\n      this._colorGradientsTexture.dispose();\n      this._colorGradientsTexture = null;\n    }\n    if (this._sizeGradientsTexture) {\n      this._sizeGradientsTexture.dispose();\n      this._sizeGradientsTexture = null;\n    }\n    if (this._angularSpeedGradientsTexture) {\n      this._angularSpeedGradientsTexture.dispose();\n      this._angularSpeedGradientsTexture = null;\n    }\n    if (this._velocityGradientsTexture) {\n      this._velocityGradientsTexture.dispose();\n      this._velocityGradientsTexture = null;\n    }\n    if (this._limitVelocityGradientsTexture) {\n      this._limitVelocityGradientsTexture.dispose();\n      this._limitVelocityGradientsTexture = null;\n    }\n    if (this._dragGradientsTexture) {\n      this._dragGradientsTexture.dispose();\n      this._dragGradientsTexture = null;\n    }\n    if (this._randomTexture) {\n      this._randomTexture.dispose();\n      this._randomTexture = null;\n    }\n    if (this._randomTexture2) {\n      this._randomTexture2.dispose();\n      this._randomTexture2 = null;\n    }\n    if (disposeTexture && this.particleTexture) {\n      this.particleTexture.dispose();\n      this.particleTexture = null;\n    }\n    if (disposeTexture && this.noiseTexture) {\n      this.noiseTexture.dispose();\n      this.noiseTexture = null;\n    }\n    // Callback\n    this.onStoppedObservable.clear();\n    this.onDisposeObservable.notifyObservers(this);\n    this.onDisposeObservable.clear();\n  }\n  /**\n   * Clones the particle system.\n   * @param name The name of the cloned object\n   * @param newEmitter The new emitter to use\n   * @param cloneTexture Also clone the textures if true\n   * @returns the cloned particle system\n   */\n  clone(name, newEmitter, cloneTexture = false) {\n    const custom = {\n      ...this._customWrappers\n    };\n    let program = null;\n    const engine = this._engine;\n    if (engine.createEffectForParticles) {\n      if (this.customShader != null) {\n        program = this.customShader;\n        const defines = program.shaderOptions.defines.length > 0 ? program.shaderOptions.defines.join(\"\\n\") : \"\";\n        custom[0] = engine.createEffectForParticles(program.shaderPath.fragmentElement, program.shaderOptions.uniforms, program.shaderOptions.samplers, defines, undefined, undefined, undefined, this);\n      }\n    }\n    const serialization = this.serialize(cloneTexture);\n    const result = GPUParticleSystem.Parse(serialization, this._scene || this._engine, this._rootUrl);\n    result.name = name;\n    result.customShader = program;\n    result._customWrappers = custom;\n    if (newEmitter === undefined) {\n      newEmitter = this.emitter;\n    }\n    if (this.noiseTexture) {\n      result.noiseTexture = this.noiseTexture.clone();\n    }\n    result.emitter = newEmitter;\n    return result;\n  }\n  /**\n   * Serializes the particle system to a JSON object\n   * @param serializeTexture defines if the texture must be serialized as well\n   * @returns the JSON object\n   */\n  serialize(serializeTexture = false) {\n    const serializationObject = {};\n    ParticleSystem._Serialize(serializationObject, this, serializeTexture);\n    serializationObject.activeParticleCount = this.activeParticleCount;\n    serializationObject.randomTextureSize = this._randomTextureSize;\n    serializationObject.customShader = this.customShader;\n    return serializationObject;\n  }\n  /**\n   * Parses a JSON object to create a GPU particle system.\n   * @param parsedParticleSystem The JSON object to parse\n   * @param sceneOrEngine The scene or the engine to create the particle system in\n   * @param rootUrl The root url to use to load external dependencies like texture\n   * @param doNotStart Ignore the preventAutoStart attribute and does not start\n   * @param capacity defines the system capacity (if null or undefined the sotred capacity will be used)\n   * @returns the parsed GPU particle system\n   */\n  static Parse(parsedParticleSystem, sceneOrEngine, rootUrl, doNotStart = false, capacity) {\n    const name = parsedParticleSystem.name;\n    let engine;\n    let scene;\n    if (sceneOrEngine instanceof ThinEngine) {\n      engine = sceneOrEngine;\n    } else {\n      scene = sceneOrEngine;\n      engine = scene.getEngine();\n    }\n    const particleSystem = new GPUParticleSystem(name, {\n      capacity: capacity || parsedParticleSystem.capacity,\n      randomTextureSize: parsedParticleSystem.randomTextureSize\n    }, sceneOrEngine, null, parsedParticleSystem.isAnimationSheetEnabled);\n    particleSystem._rootUrl = rootUrl;\n    if (parsedParticleSystem.customShader && engine.createEffectForParticles) {\n      const program = parsedParticleSystem.customShader;\n      const defines = program.shaderOptions.defines.length > 0 ? program.shaderOptions.defines.join(\"\\n\") : \"\";\n      const custom = engine.createEffectForParticles(program.shaderPath.fragmentElement, program.shaderOptions.uniforms, program.shaderOptions.samplers, defines, undefined, undefined, undefined, particleSystem);\n      particleSystem.setCustomEffect(custom, 0);\n      particleSystem.customShader = program;\n    }\n    if (parsedParticleSystem.id) {\n      particleSystem.id = parsedParticleSystem.id;\n    }\n    if (parsedParticleSystem.activeParticleCount) {\n      particleSystem.activeParticleCount = parsedParticleSystem.activeParticleCount;\n    }\n    ParticleSystem._Parse(parsedParticleSystem, particleSystem, sceneOrEngine, rootUrl);\n    // Auto start\n    if (parsedParticleSystem.preventAutoStart) {\n      particleSystem.preventAutoStart = parsedParticleSystem.preventAutoStart;\n    }\n    if (!doNotStart && !particleSystem.preventAutoStart) {\n      particleSystem.start();\n    }\n    return particleSystem;\n  }\n}","map":{"version":3,"mappings":";AAGA,SAASA,cAAc,EAAEC,aAAa,EAAEC,cAAc,QAAQ,sBAAoB;AAClF,SAASC,UAAU,QAAQ,uBAAqB;AAEhD,SAASC,MAAM,EAAEC,UAAU,QAAQ,yBAAuB;AAC1D,SAASC,MAAM,EAAEC,SAAS,QAAQ,wBAAsB;AACxD,SAASC,MAAM,QAAQ,yBAAuB;AAC9C,SAASC,YAAY,EAAEC,MAAM,QAAQ,sBAAoB;AAGzD,SAASC,kBAAkB,QAAQ,yBAAuB;AAC1D,SAASC,cAAc,QAAQ,qBAAmB;AAClD,SAASC,kBAAkB,QAAQ,iDAA+C;AAGlF,SAASC,cAAc,QAAQ,gCAA8B;AAC7D,SAASC,4BAA4B,QAAQ,8CAA4C;AACzF,SAASC,UAAU,QAAQ,qCAAmC;AAE9D,SAASC,WAAW,QAAQ,2BAAyB;AAErD,SAASC,qBAAqB,QAAQ,yCAAuC;AAC7E,SAASC,UAAU,QAAQ,0BAAwB;AAEnD,SAASC,WAAW,QAAQ,6BAA2B;AAQvD,OAAO,2CAAyC;AAChD,OAAO,yCAAuC;AAC9C,SAASC,QAAQ,QAAQ,sBAAoB;AAC7C,SAASC,oBAAoB,EAAEC,aAAa,EAAEC,2BAA2B,QAAQ,yCAAuC;AAExH;;;;;AAKA,OAAM,MAAOC,iBAAkB,SAAQd,kBAAkB;EAmsBrD;;;;;;;;;EASAe,YACIC,IAAY,EACZC,OAGE,EACFC,aAAiC,EACjCC,eAAiC,IAAI,EACrCC,0BAAmC,KAAK;IAExC,KAAK,CAACJ,IAAI,CAAC;IArtBf;;;IAGO,cAAS,GAAW,UAAU;IAK7B,sBAAiB,GAAG,CAAC;IAMrB,yBAAoB,GAA2C,EAAE;IAEjE,iBAAY,GAAG,CAAC;IAIhB,qBAAgB,GAAG,CAAC,CAAC;IACrB,oCAA+B,GAAG,CAAC,CAAC;IACpC,aAAQ,GAAG,KAAK;IAChB,aAAQ,GAAG,KAAK;IAEhB,eAAU,GAAG,CAAC;IAOtB;IACO,oBAAe,GAAG,KAAK;IAMtB,iBAAY,GAAG,CAAC;IAIP,qBAAgB,GAAG,GAAG;IAgBvC;;;IAGO,wBAAmB,GAAG,IAAIxB,UAAU,EAAmB;IAC9D;;;IAGO,wBAAmB,GAAG,IAAIA,UAAU,EAAmB;IAU9D;;;;IAIO,oBAAe,GAAG,KAAK;IAatB,iBAAY,GAAG,KAAK;IAE5B;;;IAGO,YAAO,GAAG,KAAK;IAEtB;IACgB,UAAK,GAAG,IAAI;IA8I5B;IACU,qCAAgC,GAA2C,IAAI;IAmerF,IAAI,CAAC0B,aAAa,IAAIA,aAAa,CAACG,YAAY,EAAE,KAAK,OAAO,EAAE;MAC5D,IAAI,CAACC,MAAM,GAAIJ,aAAuB,IAAIZ,WAAW,CAACiB,gBAAgB;MACtE,IAAI,CAACC,OAAO,GAAG,IAAI,CAACF,MAAM,CAACG,SAAS,EAAE;MACtC,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACJ,MAAM,CAACK,WAAW,EAAE;MACzC,IAAI,CAACL,MAAM,CAACM,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC;KACzC,MAAM;MACH,IAAI,CAACL,OAAO,GAAGN,aAA2B;MAC1C,IAAI,CAACY,uBAAuB,GAAGrC,MAAM,CAACsC,gBAAgB,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAACP,OAAO,CAACQ,eAAe,CAAC;;IAG1G,IAAI,IAAI,CAACR,OAAO,CAACS,OAAO,EAAE,CAACC,qBAAqB,EAAE;MAC9C,IAAI,CAACxB,QAAQ,CAAC,qCAAqC,CAAC,EAAE;QAClD,MAAM,IAAIyB,KAAK,CAAC,yFAAyF,CAAC;;MAE9G,IAAI,CAACC,SAAS,GAAG,KAAK1B,QAAQ,CAAC,qCAAqC,CAAS,EAAC,IAAI,EAAE,IAAI,CAACc,OAAO,CAAC;KACpG,MAAM;MACH,IAAI,CAACd,QAAQ,CAAC,8BAA8B,CAAC,EAAE;QAC3C,MAAM,IAAIyB,KAAK,CAAC,kFAAkF,CAAC;;MAEvG,IAAI,CAACC,SAAS,GAAG,KAAK1B,QAAQ,CAAC,8BAA8B,CAAS,EAAC,IAAI,EAAE,IAAI,CAACc,OAAO,CAAC;;IAG9F,IAAI,CAACa,eAAe,GAAG;MAAE,CAAC,EAAE,IAAI5B,WAAW,CAAC,IAAI,CAACe,OAAO;IAAC,CAAE;IAC3D,IAAI,CAACa,eAAe,CAAC,CAAC,CAAE,CAACC,MAAM,GAAGnB,YAAY;IAE9C,IAAI,CAACoB,aAAa,GAAG;MAAE,CAAC,EAAE,IAAI9B,WAAW,CAAC,IAAI,CAACe,OAAO;IAAC,CAAE;IACzD,IAAI,IAAI,CAACe,aAAa,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;MACnC,IAAI,CAACD,aAAa,CAAC,CAAC,CAAC,CAACC,WAAW,CAACC,aAAa,GAAG,IAAI;;IAG1D;IACA,IAAI,CAACC,mCAAmC,CAAC,IAAI,CAAC;IAE9CzB,OAAO,GAAGA,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,EAAE;IAEvB,IAAI,CAACA,OAAO,CAAC0B,iBAAiB,EAAE;MAC5B,OAAO1B,OAAO,CAAC0B,iBAAiB;;IAGpC,MAAMC,WAAW,GAAG;MAChBC,QAAQ,EAAE,KAAK;MACfF,iBAAiB,EAAE,IAAI,CAACnB,OAAO,CAACS,OAAO,EAAE,CAACa,cAAc;MACxD,GAAG7B;KACN;IAED,MAAM8B,eAAe,GAAW9B,OAAO;IACvC,IAAI+B,QAAQ,CAACD,eAAe,CAAC,EAAE;MAC3BH,WAAW,CAACC,QAAQ,GAAGE,eAAe;;IAG1C,IAAI,CAACE,SAAS,GAAGL,WAAW,CAACC,QAAQ;IACrC,IAAI,CAACK,YAAY,GAAGN,WAAW,CAACC,QAAQ;IACxC,IAAI,CAACM,mBAAmB,GAAG,CAAC;IAC5B,IAAI,CAACC,wBAAwB,GAAGhC,uBAAuB;IAEvD,IAAI,CAACiC,mBAAmB,GAAG,IAAInD,kBAAkB,EAAE;IAEnD;IACA,MAAM4C,cAAc,GAAGQ,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC/B,OAAO,CAACS,OAAO,EAAE,CAACa,cAAc,EAAEF,WAAW,CAACD,iBAAiB,CAAC;IACrG,IAAIa,CAAC,GAAG,EAAE;IACV,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,cAAc,EAAE,EAAEW,CAAC,EAAE;MACrCD,CAAC,CAAC3B,IAAI,CAACyB,IAAI,CAACI,MAAM,EAAE,CAAC;MACrBF,CAAC,CAAC3B,IAAI,CAACyB,IAAI,CAACI,MAAM,EAAE,CAAC;MACrBF,CAAC,CAAC3B,IAAI,CAACyB,IAAI,CAACI,MAAM,EAAE,CAAC;MACrBF,CAAC,CAAC3B,IAAI,CAACyB,IAAI,CAACI,MAAM,EAAE,CAAC;;IAEzB,IAAI,CAACC,cAAc,GAAG,IAAItD,UAAU,CAChC,IAAIuD,YAAY,CAACJ,CAAC,CAAC,EACnBV,cAAc,EACd,CAAC,EACD,gBAAU,cACV;IAMJ,IAAI,CAACa,cAAc,CAAC3C,IAAI,GAAG,2BAA2B;IACtD,IAAI,CAAC2C,cAAc,CAACE,KAAK,GAAG;IAC5B,IAAI,CAACF,cAAc,CAACG,KAAK,GAAG;IAE5BN,CAAC,GAAG,EAAE;IACN,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,cAAc,EAAE,EAAEW,CAAC,EAAE;MACrCD,CAAC,CAAC3B,IAAI,CAACyB,IAAI,CAACI,MAAM,EAAE,CAAC;MACrBF,CAAC,CAAC3B,IAAI,CAACyB,IAAI,CAACI,MAAM,EAAE,CAAC;MACrBF,CAAC,CAAC3B,IAAI,CAACyB,IAAI,CAACI,MAAM,EAAE,CAAC;MACrBF,CAAC,CAAC3B,IAAI,CAACyB,IAAI,CAACI,MAAM,EAAE,CAAC;;IAEzB,IAAI,CAACK,eAAe,GAAG,IAAI1D,UAAU,CACjC,IAAIuD,YAAY,CAACJ,CAAC,CAAC,EACnBV,cAAc,EACd,CAAC,EACD,gBAAU,cACV;IAMJ,IAAI,CAACiB,eAAe,CAAC/C,IAAI,GAAG,2BAA2B;IACvD,IAAI,CAAC+C,eAAe,CAACF,KAAK,GAAG;IAC7B,IAAI,CAACE,eAAe,CAACD,KAAK,GAAG;IAE7B,IAAI,CAACE,kBAAkB,GAAGlB,cAAc;EAC5C;EAhxBA;;;EAGO,WAAWmB,WAAW;IACzB,IAAI,CAAC3D,WAAW,CAAC4D,iBAAiB,EAAE;MAChC,OAAO,KAAK;;IAEhB,MAAMC,IAAI,GAAG7D,WAAW,CAAC4D,iBAAiB,CAACjC,OAAO,EAAE;IAEpD,OAAOkC,IAAI,CAACC,yBAAyB,IAAID,IAAI,CAACjC,qBAAqB;EACvE;EAWA;;;;EAIOmC,WAAW;IACd,OAAO,IAAI,CAACpB,SAAS;EACzB;EAQA;;;EAGA,IAAWqB,mBAAmB;IAC1B,OAAO,IAAI,CAACpB,YAAY;EAC5B;EAEA,IAAWoB,mBAAmB,CAACC,KAAa;IACxC,IAAI,CAACrB,YAAY,GAAGI,IAAI,CAACC,GAAG,CAACgB,KAAK,EAAE,IAAI,CAACtB,SAAS,CAAC;EACvD;EAeA;;;;EAIOuB,OAAO;IACV,IAAI,CAAC,IAAI,CAACC,OAAO,IAAK,IAAI,CAACC,6BAA6B,IAAI,CAAC,IAAI,CAACA,6BAA6B,CAACF,OAAO,EAAG,IAAI,CAAC,IAAI,CAACG,eAAe,IAAI,CAAC,IAAI,CAACA,eAAe,CAACH,OAAO,EAAE,EAAE;MACpK,OAAO,KAAK;;IAGhB,IAAI,IAAI,CAACI,SAAS,KAAK3E,cAAc,CAAC4E,qBAAqB,EAAE;MACzD,IAAI,CAAC,IAAI,CAACC,WAAW,CAAC,IAAI,CAACF,SAAS,CAAC,CAACtC,MAAO,CAACkC,OAAO,EAAE,EAAE;QACrD,OAAO,KAAK;;KAEnB,MAAM;MACH,IAAI,CAAC,IAAI,CAACM,WAAW,CAAC7E,cAAc,CAAC8E,kBAAkB,CAAC,CAACzC,MAAO,CAACkC,OAAO,EAAE,EAAE;QACxE,OAAO,KAAK;;MAEhB,IAAI,CAAC,IAAI,CAACM,WAAW,CAAC7E,cAAc,CAAC+E,aAAa,CAAC,CAAC1C,MAAO,CAACkC,OAAO,EAAE,EAAE;QACnE,OAAO,KAAK;;;IAIpB,IAAI,CAAC,IAAI,CAACpC,SAAS,CAAC6C,qBAAqB,EAAE,EAAE;MACzC,IAAI,CAACC,qBAAqB,EAAE;MAC5B,OAAO,KAAK;;IAGhB,OAAO,IAAI,CAAC9C,SAAS,CAAC+C,mBAAmB,EAAE;EAC/C;EAEA;;;;EAIOC,SAAS;IACZ,OAAO,IAAI,CAACC,QAAQ;EACxB;EAEA;;;;EAIOC,SAAS;IACZ,OAAO,IAAI,CAACC,QAAQ;EACxB;EAEA;;;;EAIOC,UAAU;IACb,OAAO,KAAK,CAAC,CAAC;EAClB;EAEA;;;;EAIOC,cAAc;IACjB,OAAO,IAAI,CAACtC,mBAAmB;EACnC;EAEA;;;;EAIOuC,KAAK,CAACC,KAAK,GAAG,IAAI,CAACC,UAAU;IAChC,IAAI,CAAC,IAAI,CAACC,kBAAkB,IAAI,IAAI,CAACC,uCAAuC,EAAE,EAAE;MAC5E,MAAM,6HAA6H;;IAEvI,IAAIH,KAAK,EAAE;MACPI,UAAU,CAAC,MAAK;QACZ,IAAI,CAACL,KAAK,CAAC,CAAC,CAAC;MACjB,CAAC,EAAEC,KAAK,CAAC;MACT;;IAEJ,IAAI,CAACN,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACE,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACS,YAAY,GAAG,KAAK;IAEzB;IACA,IAAI,IAAI,CAACC,qBAAqB,IAAI,IAAI,CAACC,UAAU,IAAI,IAAI,CAACA,UAAU,CAACC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC7E,MAAM,EAAE;MAC5F,IAAI,CAACA,MAAM,CAAC8E,cAAc,CAAC,IAAI,EAAE,IAAI,CAACC,kBAAkB,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAACC,kBAAkB,CAAC;;EAEjH;EAEA;;;EAGOC,IAAI;IACP,IAAI,IAAI,CAACjB,QAAQ,EAAE;MACf;;IAEJ,IAAI,CAACA,QAAQ,GAAG,IAAI;EACxB;EAEA;;;EAGOkB,KAAK;IACR,IAAI,CAACC,eAAe,EAAE;IACtB,IAAI,CAACtE,SAAS,CAACuE,oBAAoB,EAAE;IACrC,IAAI,CAACxD,mBAAmB,GAAG,CAAC;IAC5B,IAAI,CAACyD,YAAY,GAAG,CAAC;EACzB;EAEA;;;;EAIOvF,YAAY;IACf,OAAO,mBAAmB;EAC9B;EAEA;;;;;EAKOwF,eAAe,CAACjC,YAAoB,CAAC;;IACxC,OAAO,gBAAI,CAACvC,eAAe,CAACuC,SAAS,CAAC,0CAAEtC,MAAM,mCAAI,IAAI,CAACD,eAAe,CAAC,CAAC,CAAE,CAACC,MAAM;EACrF;EAEQwE,qBAAqB,CAAClC,YAAoB,CAAC;;IAC/C,OAAO,UAAI,CAACvC,eAAe,CAACuC,SAAS,CAAC,mCAAI,IAAI,CAACvC,eAAe,CAAC,CAAC,CAAC;EACrE;EAEA;;;;;EAKO0E,eAAe,CAACzE,MAAwB,EAAEsC,YAAoB,CAAC;IAClE,IAAI,CAACvC,eAAe,CAACuC,SAAS,CAAC,GAAG,IAAInE,WAAW,CAAC,IAAI,CAACe,OAAO,CAAC;IAC/D,IAAI,CAACa,eAAe,CAACuC,SAAS,CAAE,CAACtC,MAAM,GAAGA,MAAM;EACpD;EAKA;;;EAGA,IAAW0E,+BAA+B;IACtC,IAAI,CAAC,IAAI,CAACC,gCAAgC,EAAE;MACxC,IAAI,CAACA,gCAAgC,GAAG,IAAIzH,UAAU,EAAoB;;IAG9E,OAAO,IAAI,CAACyH,gCAAgC;EAChD;EAEA;;;EAGA,IAAWC,gBAAgB;IACvB,OAAO,oBAAoB;EAC/B;EAEA;;;;;EAKA,IAAWC,aAAa;IACpB;IACA;IACA;IACA;IACA,OAAO,IAAI,CAACC,oBAAoB,CAAC,IAAI,CAACR,YAAY,GAAG,CAAC,CAAC;EAC3D;EAEA;;;EAGA,IAAWS,WAAW;IAClB,OAAO,IAAI;EACf;EAKUC,yBAAyB,CAACC,QAAgB,EAAEC,SAAqC,EAAEC,OAAmB;IAC5G,KAAK,CAACH,yBAAyB,CAACC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,CAAC;IAC7D,IAAI,CAACf,eAAe,EAAE;IAEtB,OAAO,IAAI;EACf;EAEA;;;;;;EAMOgB,gBAAgB,CAACH,QAAgB,EAAEI,MAAc;IACpD,IAAI,CAAC,IAAI,CAACC,eAAe,EAAE;MACvB,IAAI,CAACA,eAAe,GAAG,EAAE;;IAG7B,MAAMC,aAAa,GAAG,IAAIvI,aAAa,CAACiI,QAAQ,EAAEI,MAAM,CAAC;IACzD,IAAI,CAACC,eAAe,CAAC/F,IAAI,CAACgG,aAAa,CAAC;IAExC,IAAI,CAACC,qBAAqB,CAAC,IAAI,CAAC;IAEhC,IAAI,CAACpB,eAAe,EAAE;IAEtB,OAAO,IAAI;EACf;EAEQoB,qBAAqB,CAACC,OAAO,GAAG,KAAK;IACzC,IAAI,IAAI,CAACH,eAAe,EAAE;MACtB,IAAIG,OAAO,EAAE;QACT,IAAI,CAACH,eAAe,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;UAC/B,IAAID,CAAC,CAACV,QAAQ,GAAGW,CAAC,CAACX,QAAQ,EAAE;YACzB,OAAO,CAAC,CAAC;WACZ,MAAM,IAAIU,CAAC,CAACV,QAAQ,GAAGW,CAAC,CAACX,QAAQ,EAAE;YAChC,OAAO,CAAC;;UAGZ,OAAO,CAAC;QACZ,CAAC,CAAC;;MAGN,IAAI,IAAI,CAACY,sBAAsB,EAAE;QAC7B,IAAI,CAACA,sBAAsB,CAACC,OAAO,EAAE;QAC/B,IAAI,CAACD,sBAAuB,GAAG,IAAI;;;EAGrD;EAEA;EACOE,qBAAqB;IACxB,IAAI,CAACP,qBAAqB,EAAE;IAC5B,IAAI,CAACQ,sBAAsB,CAAC,IAAI,CAACC,cAAc,EAAE,uBAAuB,CAAC;IACzE,IAAI,CAACD,sBAAsB,CAAC,IAAI,CAACE,sBAAsB,EAAE,+BAA+B,CAAC;IACzF,IAAI,CAACF,sBAAsB,CAAC,IAAI,CAACG,kBAAkB,EAAE,2BAA2B,CAAC;IACjF,IAAI,CAACH,sBAAsB,CAAC,IAAI,CAACI,uBAAuB,EAAE,gCAAgC,CAAC;IAC3F,IAAI,CAACJ,sBAAsB,CAAC,IAAI,CAACK,cAAc,EAAE,uBAAuB,CAAC;IAEzE,IAAI,CAAClC,KAAK,EAAE;EAChB;EAEA;;;;;EAKOmC,mBAAmB,CAACrB,QAAgB;IACvC,IAAI,CAACD,yBAAyB,CAACC,QAAQ,EAAE,IAAI,CAACK,eAAe,EAAE,IAAI,CAACO,sBAAsB,CAAC;IACrF,IAAI,CAACA,sBAAuB,GAAG,IAAI;IAEzC,OAAO,IAAI;EACf;EAEA;;;EAGOU,cAAc;;IACjB,KAAK,MAAMjE,SAAS,IAAI,IAAI,CAACrC,aAAa,EAAE;MACxC,MAAMuG,WAAW,GAAG,IAAI,CAACvG,aAAa,CAACqC,SAAS,CAAC;MACjD,iBAAW,CAACpC,WAAW,0CAAEiE,KAAK,EAAE;;EAExC;EAaQsC,kBAAkB,CAACC,eAAiC,EAAEzB,QAAgB,EAAE0B,MAAc;IAC1F,MAAMC,aAAa,GAAG,IAAI7J,cAAc,CAACkI,QAAQ,EAAE0B,MAAM,CAAC;IAC1DD,eAAe,CAACnH,IAAI,CAACqH,aAAa,CAAC;IAEnC,IAAI,CAACxC,eAAe,EAAE;EAC1B;EAEA;;;;;;EAMOyC,eAAe,CAAC5B,QAAgB,EAAE0B,MAAc;IACnD,IAAI,CAAC,IAAI,CAACV,cAAc,EAAE;MACtB,IAAI,CAACA,cAAc,GAAG,EAAE;;IAG5B,IAAI,CAACQ,kBAAkB,CAAC,IAAI,CAACR,cAAc,EAAEhB,QAAQ,EAAE0B,MAAM,CAAC;IAE9D,IAAI,CAACX,sBAAsB,CAAC,IAAI,CAACC,cAAc,EAAE,uBAAuB,EAAE,IAAI,CAAC;IAE/E,IAAI,CAAC7B,eAAe,EAAE;IAEtB,OAAO,IAAI;EACf;EAEA;;;;;EAKO0C,kBAAkB,CAAC7B,QAAgB;IACtC,IAAI,CAACD,yBAAyB,CAACC,QAAQ,EAAE,IAAI,CAACgB,cAAc,EAAE,IAAI,CAACc,qBAAqB,CAAC;IACnF,IAAI,CAACA,qBAAsB,GAAG,IAAI;IAExC,OAAO,IAAI;EACf;EAEQf,sBAAsB,CAACU,eAA2C,EAAEM,WAAmB,EAAEvB,OAAO,GAAG,KAAK;IAC5G,IAAI,CAACiB,eAAe,EAAE;MAClB;;IAGJ,IAAIjB,OAAO,EAAE;MACTiB,eAAe,CAAChB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;QAC1B,IAAID,CAAC,CAACV,QAAQ,GAAGW,CAAC,CAACX,QAAQ,EAAE;UACzB,OAAO,CAAC,CAAC;SACZ,MAAM,IAAIU,CAAC,CAACV,QAAQ,GAAGW,CAAC,CAACX,QAAQ,EAAE;UAChC,OAAO,CAAC;;QAGZ,OAAO,CAAC;MACZ,CAAC,CAAC;;IAGN,MAAMgC,IAAI,GAAG,IAAW;IACxB,IAAIA,IAAI,CAACD,WAAW,CAAC,EAAE;MACnBC,IAAI,CAACD,WAAW,CAAC,CAAClB,OAAO,EAAE;MAC3BmB,IAAI,CAACD,WAAW,CAAC,GAAG,IAAI;;EAEhC;EAEA;;;;;;EAMOE,uBAAuB,CAACjC,QAAgB,EAAE0B,MAAc;IAC3D,IAAI,CAAC,IAAI,CAACT,sBAAsB,EAAE;MAC9B,IAAI,CAACA,sBAAsB,GAAG,EAAE;;IAGpC,IAAI,CAACO,kBAAkB,CAAC,IAAI,CAACP,sBAAsB,EAAEjB,QAAQ,EAAE0B,MAAM,CAAC;IACtE,IAAI,CAACX,sBAAsB,CAAC,IAAI,CAACE,sBAAsB,EAAE,+BAA+B,EAAE,IAAI,CAAC;IAE/F,IAAI,CAAC9B,eAAe,EAAE;IAEtB,OAAO,IAAI;EACf;EAEA;;;;;EAKO+C,0BAA0B,CAAClC,QAAgB;IAC9C,IAAI,CAACD,yBAAyB,CAACC,QAAQ,EAAE,IAAI,CAACiB,sBAAsB,EAAE,IAAI,CAACkB,6BAA6B,CAAC;IACnG,IAAI,CAACA,6BAA8B,GAAG,IAAI;IAEhD,OAAO,IAAI;EACf;EAEA;;;;;;EAMOC,mBAAmB,CAACpC,QAAgB,EAAE0B,MAAc;IACvD,IAAI,CAAC,IAAI,CAACR,kBAAkB,EAAE;MAC1B,IAAI,CAACA,kBAAkB,GAAG,EAAE;;IAGhC,IAAI,CAACM,kBAAkB,CAAC,IAAI,CAACN,kBAAkB,EAAElB,QAAQ,EAAE0B,MAAM,CAAC;IAClE,IAAI,CAACX,sBAAsB,CAAC,IAAI,CAACG,kBAAkB,EAAE,2BAA2B,EAAE,IAAI,CAAC;IAEvF,IAAI,CAAC/B,eAAe,EAAE;IAEtB,OAAO,IAAI;EACf;EAEA;;;;;EAKOkD,sBAAsB,CAACrC,QAAgB;IAC1C,IAAI,CAACD,yBAAyB,CAACC,QAAQ,EAAE,IAAI,CAACkB,kBAAkB,EAAE,IAAI,CAACoB,yBAAyB,CAAC;IAC3F,IAAI,CAACA,yBAA0B,GAAG,IAAI;IAE5C,OAAO,IAAI;EACf;EAEA;;;;;;EAMOC,wBAAwB,CAACvC,QAAgB,EAAE0B,MAAc;IAC5D,IAAI,CAAC,IAAI,CAACP,uBAAuB,EAAE;MAC/B,IAAI,CAACA,uBAAuB,GAAG,EAAE;;IAGrC,IAAI,CAACK,kBAAkB,CAAC,IAAI,CAACL,uBAAuB,EAAEnB,QAAQ,EAAE0B,MAAM,CAAC;IACvE,IAAI,CAACX,sBAAsB,CAAC,IAAI,CAACI,uBAAuB,EAAE,gCAAgC,EAAE,IAAI,CAAC;IAEjG,IAAI,CAAChC,eAAe,EAAE;IAEtB,OAAO,IAAI;EACf;EAEA;;;;;EAKOqD,2BAA2B,CAACxC,QAAgB;IAC/C,IAAI,CAACD,yBAAyB,CAACC,QAAQ,EAAE,IAAI,CAACmB,uBAAuB,EAAE,IAAI,CAACsB,8BAA8B,CAAC;IACrG,IAAI,CAACA,8BAA+B,GAAG,IAAI;IAEjD,OAAO,IAAI;EACf;EAEA;;;;;;EAMOC,eAAe,CAAC1C,QAAgB,EAAE0B,MAAc;IACnD,IAAI,CAAC,IAAI,CAACN,cAAc,EAAE;MACtB,IAAI,CAACA,cAAc,GAAG,EAAE;;IAG5B,IAAI,CAACI,kBAAkB,CAAC,IAAI,CAACJ,cAAc,EAAEpB,QAAQ,EAAE0B,MAAM,CAAC;IAC9D,IAAI,CAACX,sBAAsB,CAAC,IAAI,CAACK,cAAc,EAAE,uBAAuB,EAAE,IAAI,CAAC;IAE/E,IAAI,CAACjC,eAAe,EAAE;IAEtB,OAAO,IAAI;EACf;EAEA;;;;;EAKOwD,kBAAkB,CAAC3C,QAAgB;IACtC,IAAI,CAACD,yBAAyB,CAACC,QAAQ,EAAE,IAAI,CAACoB,cAAc,EAAE,IAAI,CAACwB,qBAAqB,CAAC;IACnF,IAAI,CAACA,qBAAsB,GAAG,IAAI;IAExC,OAAO,IAAI;EACf;EAEA;;;;EAIOC,mBAAmB;IACtB;IACA,OAAO,IAAI;EACf;EAEA;;;;EAIOC,sBAAsB;IACzB;IACA,OAAO,IAAI;EACf;EAEA;;;;EAIOC,oBAAoB;IACvB;IACA,OAAO,IAAI;EACf;EAEA;;;;EAIOC,uBAAuB;IAC1B;IACA,OAAO,IAAI;EACf;EAEA;;;;EAIOC,qBAAqB;IACxB;IAEA,OAAO,IAAI;EACf;EAEA;;;;EAIOC,wBAAwB;IAC3B;IAEA,OAAO,IAAI;EACf;EAEA;;;;EAIOC,qBAAqB;IACxB;IAEA,OAAO,IAAI;EACf;EAEA;;;;EAIOC,wBAAwB;IAC3B;IAEA,OAAO,IAAI;EACf;EAEA;;;;EAIOC,eAAe;IAClB;IAEA,OAAO,IAAI;EACf;EAEA;;;;EAIOC,kBAAkB;IACrB;IAEA,OAAO,IAAI;EACf;EAEA;;;;EAIOC,gBAAgB;IACnB,OAAO,IAAI;EACf;EAEA;;;;;EAKA,IAAWC,gBAAgB;IACvB;IACA,OAAO,KAAK;EAChB;EAEA,IAAWA,gBAAgB,CAACxG,KAAc;IACtC;EAAA;EAGJ;;;;EAIOyG,mBAAmB;IACtB;IAEA,OAAO,IAAI;EACf;EAEA;;;;EAIOC,sBAAsB;IACzB;IAEA,OAAO,IAAI;EACf;EAiIUC,MAAM;IACZ,IAAI,CAACxE,eAAe,EAAE;EAC1B;EAEQyE,oBAAoB,CAACC,YAAoB,EAAEC,YAAoB,EAAEC,YAAoB;IACzF,MAAMC,mBAAmB,GAAoC,EAAE;IAC/DA,mBAAmB,CAAC,UAAU,CAAC,GAAGF,YAAY,CAACG,kBAAkB,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAACC,qBAAqB,EAAE,IAAI,CAAC;IACrH,IAAIC,MAAM,GAAG,CAAC;IACdH,mBAAmB,CAAC,KAAK,CAAC,GAAGF,YAAY,CAACG,kBAAkB,CAAC,KAAK,EAAEE,MAAM,EAAE,CAAC,EAAE,IAAI,CAACD,qBAAqB,EAAE,IAAI,CAAC;IAChHC,MAAM,IAAI,CAAC;IACXH,mBAAmB,CAAC,MAAM,CAAC,GAAGF,YAAY,CAACG,kBAAkB,CAAC,MAAM,EAAEE,MAAM,EAAE,CAAC,EAAE,IAAI,CAACD,qBAAqB,EAAE,IAAI,CAAC;IAClHC,MAAM,IAAI,CAAC;IACXH,mBAAmB,CAAC,MAAM,CAAC,GAAGF,YAAY,CAACG,kBAAkB,CAAC,MAAM,EAAEE,MAAM,EAAE,CAAC,EAAE,IAAI,CAACD,qBAAqB,EAAE,IAAI,CAAC;IAClHC,MAAM,IAAI,CAAC;IACXA,MAAM,IAAI,CAAC,CAAC,CAAC;IACb,IAAI,IAAI,CAACC,aAAa,KAAK1L,cAAc,CAAC2L,uBAAuB,EAAE;MAC/DL,mBAAmB,CAAC,WAAW,CAAC,GAAGF,YAAY,CAACG,kBAAkB,CAAC,WAAW,EAAEE,MAAM,EAAE,CAAC,EAAE,IAAI,CAACD,qBAAqB,EAAE,IAAI,CAAC;;IAEhIC,MAAM,IAAI,CAAC,CAAC,CAAC;IACb,IAAI,IAAI,CAACtJ,SAAS,CAACyJ,iBAAiB,EAAE;MAClCH,MAAM,IAAI,CAAC;;IAGf,IAAI,IAAI,CAACrI,mBAAmB,YAAY9C,qBAAqB,EAAE;MAC3DmL,MAAM,IAAI,CAAC;MACX,IAAI,IAAI,CAACtJ,SAAS,CAACyJ,iBAAiB,EAAE;QAClCH,MAAM,IAAI,CAAC;;;IAInB,IAAI,CAAC,IAAI,CAACvD,sBAAsB,EAAE;MAC9BoD,mBAAmB,CAAC,OAAO,CAAC,GAAGF,YAAY,CAACG,kBAAkB,CAAC,OAAO,EAAEE,MAAM,EAAE,CAAC,EAAE,IAAI,CAACD,qBAAqB,EAAE,IAAI,CAAC;MACpHC,MAAM,IAAI,CAAC;;IAGf,IAAI,CAAC,IAAI,CAACI,iBAAiB,EAAE;MACzBP,mBAAmB,CAAC,kBAAkB,CAAC,GAAGF,YAAY,CAACG,kBAAkB,CAAC,kBAAkB,EAAEE,MAAM,EAAE,CAAC,EAAE,IAAI,CAACD,qBAAqB,EAAE,IAAI,CAAC;MAC1IC,MAAM,IAAI,CAAC;MACX,IAAI,IAAI,CAACtJ,SAAS,CAACyJ,iBAAiB,EAAE;QAClCH,MAAM,IAAI,CAAC;;;IAInB,IAAI,IAAI,CAACK,YAAY,EAAE;MACnBR,mBAAmB,CAAC,mBAAmB,CAAC,GAAGF,YAAY,CAACG,kBAAkB,CAAC,mBAAmB,EAAEE,MAAM,EAAE,CAAC,EAAE,IAAI,CAACD,qBAAqB,EAAE,IAAI,CAAC;MAC5IC,MAAM,IAAI,CAAC;MACX,IAAI,IAAI,CAACtJ,SAAS,CAACyJ,iBAAiB,EAAE;QAClCH,MAAM,IAAI,CAAC;;MAEfH,mBAAmB,CAAC,mBAAmB,CAAC,GAAGF,YAAY,CAACG,kBAAkB,CAAC,mBAAmB,EAAEE,MAAM,EAAE,CAAC,EAAE,IAAI,CAACD,qBAAqB,EAAE,IAAI,CAAC;MAC5IC,MAAM,IAAI,CAAC;MACX,IAAI,IAAI,CAACtJ,SAAS,CAACyJ,iBAAiB,EAAE;QAClCH,MAAM,IAAI,CAAC;;;IAInBH,mBAAmB,CAAC,OAAO,CAAC,GAAGF,YAAY,CAACG,kBAAkB,CAAC,OAAO,EAAEE,MAAM,EAAE,CAAC,EAAE,IAAI,CAACD,qBAAqB,EAAE,IAAI,CAAC;IACpH,IAAI,IAAI,CAAC/B,6BAA6B,EAAE;MACpCgC,MAAM,EAAE;KACX,MAAM;MACHA,MAAM,IAAI,CAAC;;IAGf,IAAI,IAAI,CAACtI,wBAAwB,EAAE;MAC/BmI,mBAAmB,CAAC,WAAW,CAAC,GAAGF,YAAY,CAACG,kBAAkB,CAAC,WAAW,EAAEE,MAAM,EAAE,CAAC,EAAE,IAAI,CAACD,qBAAqB,EAAE,IAAI,CAAC;MAC5HC,MAAM,IAAI,CAAC;MACX,IAAI,IAAI,CAACM,qBAAqB,EAAE;QAC5BT,mBAAmB,CAAC,iBAAiB,CAAC,GAAGF,YAAY,CAACG,kBAAkB,CAAC,iBAAiB,EAAEE,MAAM,EAAE,CAAC,EAAE,IAAI,CAACD,qBAAqB,EAAE,IAAI,CAAC;QACxIC,MAAM,IAAI,CAAC;;;IAInBH,mBAAmB,CAAC,QAAQ,CAAC,GAAGD,YAAY,CAACE,kBAAkB,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;IAC/ED,mBAAmB,CAAC,IAAI,CAAC,GAAGD,YAAY,CAACE,kBAAkB,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;IAEvE,IAAI,CAACpE,oBAAoB,CAACvF,IAAI,CAAC0J,mBAAmB,CAAC;IAEnD,IAAI,CAACnJ,SAAS,CAAC6J,mBAAmB,CAACb,YAAY,EAAEG,mBAAmB,CAAC;IAErE,IAAI,CAAC1C,cAAc,EAAE;EACzB;EAEQqD,WAAW,CAACC,KAAK,GAAG,KAAK;IAC7B,IAAI,IAAI,CAACC,QAAQ,IAAI,CAACD,KAAK,EAAE;MACzB;;IAGJ,MAAME,MAAM,GAAG,IAAI,CAAC7K,OAAO;IAC3B,MAAM8K,IAAI,GAAG,IAAIC,KAAK,EAAS;IAE/B,IAAI,CAACd,qBAAqB,GAAG,EAAE;IAC/B,IAAI,CAAC7E,YAAY,GAAG,CAAC;IAErB,IAAI,IAAI,CAACxE,SAAS,CAACyJ,iBAAiB,EAAE;MAClC,IAAI,CAACJ,qBAAqB,IAAI,CAAC;;IAGnC,IAAI,IAAI,CAACpI,mBAAmB,YAAY9C,qBAAqB,EAAE;MAC3D,IAAI,CAACkL,qBAAqB,IAAI,CAAC;MAC/B,IAAI,IAAI,CAACrJ,SAAS,CAACyJ,iBAAiB,EAAE;QAClC,IAAI,CAACJ,qBAAqB,IAAI,CAAC;;;IAIvC,IAAI,CAAC,IAAI,CAACe,gBAAgB,EAAE;MACxB,IAAI,CAACf,qBAAqB,IAAI,CAAC;MAC/B,IAAI,IAAI,CAACrJ,SAAS,CAACyJ,iBAAiB,EAAE;QAClC,IAAI,CAACJ,qBAAqB,IAAI,CAAC;;;IAIvC,IAAI,IAAI,CAACtD,sBAAsB,EAAE;MAC7B,IAAI,CAACsD,qBAAqB,IAAI,CAAC;;IAGnC,IAAI,IAAI,CAAC/B,6BAA6B,EAAE;MACpC,IAAI,CAAC+B,qBAAqB,IAAI,CAAC;;IAGnC,IAAI,IAAI,CAACrI,wBAAwB,EAAE;MAC/B,IAAI,CAACqI,qBAAqB,IAAI,CAAC;MAC/B,IAAI,IAAI,CAACO,qBAAqB,EAAE;QAC5B,IAAI,CAACP,qBAAqB,IAAI,CAAC;;;IAIvC,IAAI,IAAI,CAACM,YAAY,EAAE;MACnB,IAAI,CAACN,qBAAqB,IAAI,CAAC;MAC/B,IAAI,IAAI,CAACrJ,SAAS,CAACyJ,iBAAiB,EAAE;QAClC,IAAI,CAACJ,qBAAqB,IAAI,CAAC;;;IAIvC,IAAI,IAAI,CAACrJ,SAAS,CAACyJ,iBAAiB,EAAE;MAClC,IAAI,CAACJ,qBAAqB,IAAI,CAAC,IAAK,IAAI,CAACA,qBAAqB,GAAG,CAAC,GAAI,CAAC,CAAC,CAAC,CAAC;;;IAG9E,MAAMgB,kBAAkB,GAAG,IAAI,CAACpJ,mBAAmB,YAAY9C,qBAAqB;IACpF,MAAMmM,SAAS,GAAGhN,UAAU,CAACiN,OAAO,CAAC,CAAC,CAAC;IAEvC,IAAIjB,MAAM,GAAG,CAAC;IACd,KAAK,IAAIkB,aAAa,GAAG,CAAC,EAAEA,aAAa,GAAG,IAAI,CAAC3J,SAAS,EAAE2J,aAAa,EAAE,EAAE;MACzE;MACAN,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;MACdyK,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;MACdyK,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;MAEd;MACAyK,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;MAEhB;MACAyK,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;MACdyK,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;MACdyK,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;MAEd;MACAyK,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;MAEd;MACAyK,IAAI,CAACzK,IAAI,CAACyB,IAAI,CAACI,MAAM,EAAE,CAAC;MACxB4I,IAAI,CAACzK,IAAI,CAACyB,IAAI,CAACI,MAAM,EAAE,CAAC;MACxB4I,IAAI,CAACzK,IAAI,CAACyB,IAAI,CAACI,MAAM,EAAE,CAAC;MACxB4I,IAAI,CAACzK,IAAI,CAACyB,IAAI,CAACI,MAAM,EAAE,CAAC;MAExB;MACA,IAAI+I,kBAAkB,EAAE;QACnB,IAAI,CAACpJ,mBAA6C,CAACwJ,4BAA4B,CAACD,aAAa,EAAE,IAAI,EAAEF,SAAS,CAAC;QAChHJ,IAAI,CAACzK,IAAI,CAAC6K,SAAS,CAACI,CAAC,CAAC;QACtBR,IAAI,CAACzK,IAAI,CAAC6K,SAAS,CAACK,CAAC,CAAC;QACtBT,IAAI,CAACzK,IAAI,CAAC6K,SAAS,CAACM,CAAC,CAAC;OACzB,MAAM;QACHV,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;QACdyK,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;QACdyK,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;;MAGlB,IAAI,IAAI,CAACO,SAAS,CAACyJ,iBAAiB,EAAE;QAClCS,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;;;MAGpB6J,MAAM,IAAI,EAAE,CAAC,CAAC;MAEd,IAAIe,kBAAkB,EAAE;QACnB,IAAI,CAACpJ,mBAA6C,CAAC4J,yBAAyB,CAACL,aAAa,EAAE,IAAI,EAAEF,SAAS,CAAC;QAC7GJ,IAAI,CAACzK,IAAI,CAAC6K,SAAS,CAACI,CAAC,CAAC;QACtBR,IAAI,CAACzK,IAAI,CAAC6K,SAAS,CAACK,CAAC,CAAC;QACtBT,IAAI,CAACzK,IAAI,CAAC6K,SAAS,CAACM,CAAC,CAAC;QACtB,IAAI,IAAI,CAAC5K,SAAS,CAACyJ,iBAAiB,EAAE;UAClCS,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;;;QAEpB6J,MAAM,IAAI,CAAC;;MAGf,IAAI,CAAC,IAAI,CAACvD,sBAAsB,EAAE;QAC9B;QACAmE,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;QACdyK,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;QACdyK,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;QACdyK,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;QACd6J,MAAM,IAAI,CAAC;;MAGf,IAAI,CAAC,IAAI,CAACc,gBAAgB,EAAE;QACxB;QACAF,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;QACdyK,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;QACdyK,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;QACd,IAAI,IAAI,CAACO,SAAS,CAACyJ,iBAAiB,EAAE;UAClCS,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;;;QAEpB6J,MAAM,IAAI,CAAC;;MAGf,IAAI,IAAI,CAACK,YAAY,EAAE;QACnB;QACAO,IAAI,CAACzK,IAAI,CAACyB,IAAI,CAACI,MAAM,EAAE,CAAC;QACxB4I,IAAI,CAACzK,IAAI,CAACyB,IAAI,CAACI,MAAM,EAAE,CAAC;QACxB4I,IAAI,CAACzK,IAAI,CAACyB,IAAI,CAACI,MAAM,EAAE,CAAC;QACxB,IAAI,IAAI,CAACtB,SAAS,CAACyJ,iBAAiB,EAAE;UAClCS,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;;;QAEpByK,IAAI,CAACzK,IAAI,CAACyB,IAAI,CAACI,MAAM,EAAE,CAAC;QACxB4I,IAAI,CAACzK,IAAI,CAACyB,IAAI,CAACI,MAAM,EAAE,CAAC;QACxB4I,IAAI,CAACzK,IAAI,CAACyB,IAAI,CAACI,MAAM,EAAE,CAAC;QACxB,IAAI,IAAI,CAACtB,SAAS,CAACyJ,iBAAiB,EAAE;UAClCS,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;;;QAEpB6J,MAAM,IAAI,CAAC;;MAGf;MACAY,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;MACd6J,MAAM,IAAI,CAAC;MAEX,IAAI,CAAC,IAAI,CAAChC,6BAA6B,EAAE;QACrC4C,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;QACd6J,MAAM,IAAI,CAAC;;MAGf,IAAI,IAAI,CAACtI,wBAAwB,EAAE;QAC/BkJ,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;QACd6J,MAAM,IAAI,CAAC;QACX,IAAI,IAAI,CAACM,qBAAqB,EAAE;UAC5BM,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;UACd6J,MAAM,IAAI,CAAC;;;MAInB,IAAI,IAAI,CAACtJ,SAAS,CAACyJ,iBAAiB,EAAE;QAClC,IAAIqB,UAAU,GAAG,CAAC,IAAKxB,MAAM,GAAG,CAAC,GAAI,CAAC,CAAC;QACvCA,MAAM,IAAIwB,UAAU;QACpB,OAAOA,UAAU,EAAE,GAAG,CAAC,EAAE;UACrBZ,IAAI,CAACzK,IAAI,CAAC,GAAG,CAAC;;;;IAK1B;IACA,MAAMsL,UAAU,GAAG,IAAIvJ,YAAY,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAEzG,MAAMwJ,WAAW,GAA2B,IAAI,CAAChL,SAAS,CAACiL,oBAAoB,CAACf,IAAI,CAAC;IACrF,MAAMgB,WAAW,GAA2B,IAAI,CAAClL,SAAS,CAACiL,oBAAoB,CAACf,IAAI,CAAC;IAErF;IACA,IAAI,CAACF,QAAQ,GAAG,IAAIrM,MAAM,CAACsM,MAAM,EAAEe,WAAW,EAAE,KAAK,EAAE,IAAI,CAAC3B,qBAAqB,CAAC;IAClF,IAAI,CAAC8B,QAAQ,GAAG,IAAIxN,MAAM,CAACsM,MAAM,EAAEiB,WAAW,EAAE,KAAK,EAAE,IAAI,CAAC7B,qBAAqB,CAAC;IAClF,IAAI,CAAC+B,aAAa,GAAG,IAAIzN,MAAM,CAACsM,MAAM,EAAEc,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;IAE7D;IACA,IAAI,CAAC/F,oBAAoB,GAAG,EAAE;IAC9B,IAAI,CAAC+D,oBAAoB,CAAC,IAAI,CAACiB,QAAQ,EAAE,IAAI,CAACmB,QAAQ,EAAE,IAAI,CAACC,aAAa,CAAC;IAC3E,IAAI,CAACrC,oBAAoB,CAAC,IAAI,CAACoC,QAAQ,EAAE,IAAI,CAACnB,QAAQ,EAAE,IAAI,CAACoB,aAAa,CAAC;IAE3E;IACA,IAAI,CAACC,aAAa,GAAG,IAAI,CAACrB,QAAQ;IAClC,IAAI,CAACsB,aAAa,GAAG,IAAI,CAACH,QAAQ;EACtC;EAEA;EACOrI,qBAAqB;IACxB,IAAIyI,OAAO,GAAG,IAAI,CAACtK,mBAAmB,GAAG,IAAI,CAACA,mBAAmB,CAACuK,gBAAgB,EAAE,GAAG,EAAE;IAEzF,IAAI,IAAI,CAAC9B,iBAAiB,EAAE;MACxB6B,OAAO,IAAI,qBAAqB;;IAGpC,IAAI,IAAI,CAACxF,sBAAsB,EAAE;MAC7BwF,OAAO,IAAI,0BAA0B;;IAGzC,IAAI,IAAI,CAACtE,qBAAqB,EAAE;MAC5BsE,OAAO,IAAI,yBAAyB;;IAGxC,IAAI,IAAI,CAACjE,6BAA6B,EAAE;MACpCiE,OAAO,IAAI,iCAAiC;;IAGhD,IAAI,IAAI,CAAC9D,yBAAyB,EAAE;MAChC8D,OAAO,IAAI,6BAA6B;;IAG5C,IAAI,IAAI,CAAC3D,8BAA8B,EAAE;MACrC2D,OAAO,IAAI,kCAAkC;;IAGjD,IAAI,IAAI,CAACxD,qBAAqB,EAAE;MAC5BwD,OAAO,IAAI,yBAAyB;;IAGxC,IAAI,IAAI,CAACvM,uBAAuB,EAAE;MAC9BuM,OAAO,IAAI,wBAAwB;MACnC,IAAI,IAAI,CAAC3B,qBAAqB,EAAE;QAC5B2B,OAAO,IAAI,mCAAmC;;;IAItD,IAAI,IAAI,CAAC5B,YAAY,EAAE;MACnB4B,OAAO,IAAI,iBAAiB;;IAGhC,IAAI,IAAI,CAACE,OAAO,EAAE;MACdF,OAAO,IAAI,iBAAiB;;IAGhC,IAAI,IAAI,CAACvL,SAAS,CAAC6C,qBAAqB,EAAE,IAAI,IAAI,CAAC6I,oBAAoB,KAAKH,OAAO,EAAE;MACjF,OAAO,IAAI;;IAGf,IAAI,CAACG,oBAAoB,GAAGH,OAAO;IACnC,IAAI,CAACI,aAAa,GAAG,IAAI,CAAC3L,SAAS,CAAC4L,kBAAkB,CAACL,OAAO,CAAC;IAE/D,OAAO,IAAI,CAACvL,SAAS,CAAC+C,mBAAmB,EAAE;EAC/C;EAEA;;;EAGOL,WAAW,CAACF,SAAiB;IAChC,MAAMqJ,aAAa,GAAG,IAAI,CAACnH,qBAAqB,CAAClC,SAAS,CAAC;IAE3D,IAAIqJ,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAE3L,MAAM,EAAE;MACvB,OAAO2L,aAAa;;IAGxB,MAAMN,OAAO,GAAkB,EAAE;IAEjC,IAAI,CAACO,WAAW,CAACP,OAAO,EAAE/I,SAAS,CAAC;IAEpC;IACA,IAAIkE,WAAW,GAAG,IAAI,CAACvG,aAAa,CAACqC,SAAS,CAAC;IAC/C,IAAI,CAACkE,WAAW,EAAE;MACdA,WAAW,GAAG,IAAIrI,WAAW,CAAC,IAAI,CAACe,OAAO,CAAC;MAC3C,IAAIsH,WAAW,CAACtG,WAAW,EAAE;QACzBsG,WAAW,CAACtG,WAAW,CAACC,aAAa,GAAG,IAAI;;MAEhD,IAAI,CAACF,aAAa,CAACqC,SAAS,CAAC,GAAGkE,WAAW;;IAG/C,MAAMqF,IAAI,GAAGR,OAAO,CAACQ,IAAI,CAAC,IAAI,CAAC;IAC/B,IAAIrF,WAAW,CAAC6E,OAAO,KAAKQ,IAAI,EAAE;MAC9B,MAAMC,UAAU,GAAkB,EAAE;MACpC,MAAMC,QAAQ,GAAkB,EAAE;MAClC,MAAMC,QAAQ,GAAkB,EAAE;MAElC,IAAI,CAACC,qCAAqC,CAACF,QAAQ,EAAED,UAAU,EAAEE,QAAQ,CAAC;MAE1ExF,WAAW,CAAC0F,SAAS,CAAC,IAAI,CAAChN,OAAO,CAACiN,YAAY,CAAC,oBAAoB,EAAEL,UAAU,EAAEC,QAAQ,EAAEC,QAAQ,EAAEH,IAAI,CAAC,EAAEA,IAAI,CAAC;;IAGtH,OAAOrF,WAAW;EACtB;EAEA;;;EAGO,OAAO4F,2BAA2B,CAACC,iBAAiB,GAAG,KAAK,EAAEvN,uBAAuB,GAAG,KAAK,EAAEoL,gBAAgB,GAAG,KAAK,EAAEoC,oBAAoB,GAAG,KAAK;IACxJ,MAAMC,uBAAuB,GAAG,CAAC/O,YAAY,CAACgP,YAAY,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC;IAE3F,IAAI,CAACH,iBAAiB,EAAE;MACpBE,uBAAuB,CAAChN,IAAI,CAAC/B,YAAY,CAACiP,SAAS,CAAC;;IAGxD,IAAI3N,uBAAuB,EAAE;MACzByN,uBAAuB,CAAChN,IAAI,CAAC,WAAW,CAAC;;IAG7C,IAAI,CAAC2K,gBAAgB,EAAE;MACnBqC,uBAAuB,CAAChN,IAAI,CAAC,kBAAkB,CAAC;;IAGpD,IAAI,CAAC+M,oBAAoB,EAAE;MACvBC,uBAAuB,CAAChN,IAAI,CAAC,WAAW,CAAC;;IAG7CgN,uBAAuB,CAAChN,IAAI,CAAC,QAAQ,EAAE/B,YAAY,CAACkP,MAAM,CAAC;IAE3D,OAAOH,uBAAuB;EAClC;EAEA;;;EAGO,OAAOI,yBAAyB,CAAC7N,uBAAuB,GAAG,KAAK,EAAE8N,mBAAmB,GAAG,KAAK;IAChG,MAAMC,oBAAoB,GAAG,CAAC,WAAW,EAAE,aAAa,EAAE,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,SAAS,EAAE,kBAAkB,EAAE,aAAa,CAAC;IAC1IxO,oBAAoB,CAACwO,oBAAoB,CAAC;IAE1C,IAAI/N,uBAAuB,EAAE;MACzB+N,oBAAoB,CAACtN,IAAI,CAAC,YAAY,CAAC;;IAE3C,IAAIqN,mBAAmB,EAAE;MACrBC,oBAAoB,CAACtN,IAAI,CAAC,0BAA0B,CAAC;;IAGzD,OAAOsN,oBAAoB;EAC/B;EAEA;;;;;EAKOjB,WAAW,CAACP,OAAsB,EAAE/I,YAAoB,CAAC;IAC5D,IAAI,IAAI,CAACtD,MAAM,EAAE;MACbT,2BAA2B,CAAC,IAAI,EAAE,IAAI,CAACS,MAAM,EAAEqM,OAAO,CAAC;;IAG3D,IAAI/I,SAAS,KAAK3E,cAAc,CAAC8E,kBAAkB,EAAE;MACjD4I,OAAO,CAAC9L,IAAI,CAAC,2BAA2B,CAAC;;IAG7C,IAAI,IAAI,CAACgM,OAAO,EAAE;MACdF,OAAO,CAAC9L,IAAI,CAAC,eAAe,CAAC;;IAGjC,IAAI,IAAI,CAACqN,mBAAmB,EAAE;MAC1BvB,OAAO,CAAC9L,IAAI,CAAC,0BAA0B,CAAC;;IAG5C,IAAI,IAAI,CAACiK,iBAAiB,EAAE;MACxB6B,OAAO,CAAC9L,IAAI,CAAC,mBAAmB,CAAC;MAEjC,QAAQ,IAAI,CAAC8J,aAAa;QACtB,KAAK1L,cAAc,CAACmP,eAAe;UAC/BzB,OAAO,CAAC9L,IAAI,CAAC,oBAAoB,CAAC;UAClC;QACJ,KAAK5B,cAAc,CAAC2L,uBAAuB;UACvC+B,OAAO,CAAC9L,IAAI,CAAC,4BAA4B,CAAC;UAC1C;QACJ,KAAK5B,cAAc,CAACoP,iBAAiB;UACjC1B,OAAO,CAAC9L,IAAI,CAAC,2BAA2B,CAAC;UACzC;QACJ;UACI;MAAM;;IAIlB,IAAI,IAAI,CAACsG,sBAAsB,EAAE;MAC7BwF,OAAO,CAAC9L,IAAI,CAAC,wBAAwB,CAAC;;IAG1C,IAAI,IAAI,CAACT,uBAAuB,EAAE;MAC9BuM,OAAO,CAAC9L,IAAI,CAAC,sBAAsB,CAAC;;IAGxC,IAAI,IAAI,CAAC6C,6BAA6B,EAAE;MACpC,IAAI,CAACA,6BAA6B,CAAC4K,cAAc,CAAC,IAAI,CAACC,oCAAoC,CAAC;MAC5F5B,OAAO,CAAC9L,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC0N,oCAAoC,CAACC,QAAQ,EAAE,CAAC;;EAE/E;EAEA;;;;;;EAMOjB,qCAAqC,CAACF,QAAuB,EAAED,UAAyB,EAAEE,QAAuB;IACpHF,UAAU,CAACvM,IAAI,CACX,GAAGf,iBAAiB,CAAC4N,2BAA2B,CAC5C,CAAC,CAAC,IAAI,CAACvG,sBAAsB,EAC7B,IAAI,CAAC/E,wBAAwB,EAC7B,IAAI,CAAC0I,iBAAiB,EACtB,IAAI,CAACA,iBAAiB,IAAI,IAAI,CAACH,aAAa,KAAK1L,cAAc,CAAC2L,uBAAuB,CAC1F,CACJ;IAEDyC,QAAQ,CAACxM,IAAI,CAAC,GAAGf,iBAAiB,CAACmO,yBAAyB,CAAC,IAAI,CAAC7L,wBAAwB,EAAE,IAAI,CAAC8L,mBAAmB,CAAC,CAAC;IAEtHZ,QAAQ,CAACzM,IAAI,CAAC,gBAAgB,EAAE,sBAAsB,CAAC;IAEvD,IAAI,IAAI,CAAC6C,6BAA6B,EAAE;MACpCtE,4BAA4B,CAACqP,eAAe,CAACpB,QAAQ,EAAE,IAAI,CAACkB,oCAAoC,CAAC;MACjGnP,4BAA4B,CAACsP,eAAe,CAACpB,QAAQ,EAAE,IAAI,CAACiB,oCAAoC,CAAC;;EAEzG;EAEA;;;;EAIOI,OAAO,CAACC,OAAO,GAAG,KAAK;;IAC1B,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,WAAW,IAAIF,OAAO,GAAG,IAAI,CAACG,iBAAiB,GAAG,WAAI,CAACzO,MAAM,0CAAE0O,iBAAiB,EAAE,KAAI,CAAC,CAAC;IAC/G,IAAI,CAACC,YAAY,IAAI,IAAI,CAACJ,UAAU;IAEpC,IAAI,CAAC,IAAI,CAACtK,QAAQ,EAAE;MAChB,IAAI,IAAI,CAACM,kBAAkB,IAAI,IAAI,CAACoK,YAAY,IAAI,IAAI,CAACpK,kBAAkB,EAAE;QACzE,IAAI,CAACW,IAAI,EAAE;;;IAInB,IAAI,IAAI,CAAC0J,eAAe,EAAE;MACtB,IAAI,CAACC,OAAO,EAAE;;EAEtB;EAEQC,4BAA4B,CAACpH,eAA2C,EAAEM,WAAmB;IACjG,MAAM7B,OAAO,GAAqB,IAAK,CAAC6B,WAAW,CAAC;IAEpD,IAAI,CAACN,eAAe,IAAI,CAACA,eAAe,CAAC7C,MAAM,IAAIsB,OAAO,EAAE;MACxD;;IAGJ,MAAM6E,IAAI,GAAG,IAAI1I,YAAY,CAAC,IAAI,CAACyM,gBAAgB,CAAC;IAEpD,KAAK,IAAIvD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACuD,gBAAgB,EAAEvD,CAAC,EAAE,EAAE;MAC5C,MAAMwD,KAAK,GAAGxD,CAAC,GAAG,IAAI,CAACuD,gBAAgB;MAEvC9Q,cAAc,CAACgR,kBAAkB,CAACD,KAAK,EAAEtH,eAAe,EAAE,CAACwH,eAAe,EAAEC,YAAY,EAAEC,KAAK,KAAI;QAC/FpE,IAAI,CAACQ,CAAC,CAAC,GAAGjN,MAAM,CAAC8Q,IAAI,CAAkBH,eAAgB,CAACI,OAAO,EAAmBH,YAAa,CAACG,OAAO,EAAEF,KAAK,CAAC;MACnH,CAAC,CAAC;;IAGA,IAAK,CAACpH,WAAW,CAAC,GAAGjJ,UAAU,CAACwQ,cAAc,CAACvE,IAAI,EAAE,IAAI,CAAC+D,gBAAgB,EAAE,CAAC,EAAE,IAAI,CAAC/O,MAAM,IAAI,IAAI,CAACE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE;EACpI;EAEQsP,0BAA0B;IAC9B,IAAI,CAACV,4BAA4B,CAAC,IAAI,CAAC7H,cAAc,EAAE,uBAAuB,CAAC;EACnF;EAEQwI,kCAAkC;IACtC,IAAI,CAACX,4BAA4B,CAAC,IAAI,CAAC5H,sBAAsB,EAAE,+BAA+B,CAAC;EACnG;EAEQwI,8BAA8B;IAClC,IAAI,CAACZ,4BAA4B,CAAC,IAAI,CAAC3H,kBAAkB,EAAE,2BAA2B,CAAC;EAC3F;EAEQwI,mCAAmC;IACvC,IAAI,CAACb,4BAA4B,CAAC,IAAI,CAAC1H,uBAAuB,EAAE,gCAAgC,CAAC;EACrG;EAEQwI,0BAA0B;IAC9B,IAAI,CAACd,4BAA4B,CAAC,IAAI,CAACzH,cAAc,EAAE,uBAAuB,CAAC;EACnF;EAEQwI,2BAA2B;IAC/B,IAAI,CAAC,IAAI,CAACvJ,eAAe,IAAI,CAAC,IAAI,CAACA,eAAe,CAACzB,MAAM,IAAI,IAAI,CAACgC,sBAAsB,EAAE;MACtF;;IAGJ,MAAMmE,IAAI,GAAG,IAAI8E,UAAU,CAAC,IAAI,CAACf,gBAAgB,GAAG,CAAC,CAAC;IACtD,MAAMgB,QAAQ,GAAGzR,SAAS,CAACD,MAAM,CAAC,CAAC,CAAC;IAEpC,KAAK,IAAImN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACuD,gBAAgB,EAAEvD,CAAC,EAAE,EAAE;MAC5C,MAAMwD,KAAK,GAAGxD,CAAC,GAAG,IAAI,CAACuD,gBAAgB;MAEvC9Q,cAAc,CAACgR,kBAAkB,CAACD,KAAK,EAAE,IAAI,CAAC1I,eAAe,EAAE,CAAC4I,eAAe,EAAEC,YAAY,EAAEC,KAAK,KAAI;QACpG/Q,MAAM,CAAC2R,SAAS,CAAiBd,eAAgB,CAAC7I,MAAM,EAAkB8I,YAAa,CAAC9I,MAAM,EAAE+I,KAAK,EAAEW,QAAQ,CAAC;QAChH/E,IAAI,CAACQ,CAAC,GAAG,CAAC,CAAC,GAAGuE,QAAQ,CAACE,CAAC,GAAG,GAAG;QAC9BjF,IAAI,CAACQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGuE,QAAQ,CAACG,CAAC,GAAG,GAAG;QAClClF,IAAI,CAACQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGuE,QAAQ,CAACnJ,CAAC,GAAG,GAAG;QAClCoE,IAAI,CAACQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGuE,QAAQ,CAACpJ,CAAC,GAAG,GAAG;MACtC,CAAC,CAAC;;IAGN,IAAI,CAACE,sBAAsB,GAAG9H,UAAU,CAACoR,iBAAiB,CAACnF,IAAI,EAAE,IAAI,CAAC+D,gBAAgB,EAAE,CAAC,EAAE,IAAI,CAAC/O,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE;EAC1H;EAEQoQ,OAAO,CAAC9M,SAAiB,EAAE+M,SAAiB;;IAChD;IACA,MAAM7I,WAAW,GAAG,IAAI,CAAChE,WAAW,CAACF,SAAS,CAAC;IAC/C,MAAMtC,MAAM,GAAGwG,WAAW,CAACxG,MAAO;IAElC,IAAI,CAACd,OAAO,CAACoQ,YAAY,CAAC9I,WAAW,CAAC;IACtC,MAAM+I,UAAU,GAAG,WAAI,CAACvQ,MAAM,0CAAEwQ,aAAa,EAAE,KAAIrS,MAAM,CAACsS,gBAAgB;IAC1EzP,MAAM,CAAC0P,SAAS,CAAC,MAAM,EAAEH,UAAU,CAAC;IACpCvP,MAAM,CAAC0P,SAAS,CAAC,YAAY,EAAE,UAAI,CAAClQ,uBAAuB,mCAAI,IAAI,CAACR,MAAO,CAAC2Q,mBAAmB,EAAE,CAAC;IAClG3P,MAAM,CAAC4P,UAAU,CAAC,gBAAgB,EAAE,IAAI,CAACvN,eAAe,CAAC;IACzDrC,MAAM,CAAC6P,UAAU,CAAC,kBAAkB,EAAE,IAAI,CAACC,gBAAgB,CAAC;IAC5D9P,MAAM,CAAC+P,UAAU,CAAC,aAAa,EAAE,IAAI,CAACC,WAAW,CAAC;IAClD,IAAI,IAAI,CAACzE,OAAO,EAAE;MACdvL,MAAM,CAAC0P,SAAS,CAAC,WAAW,EAAEL,SAAS,CAAC;;IAE5C,IAAI,IAAI,CAACxJ,sBAAsB,EAAE;MAC7B7F,MAAM,CAAC4P,UAAU,CAAC,sBAAsB,EAAE,IAAI,CAAC/J,sBAAsB,CAAC;KACzE,MAAM;MACH7F,MAAM,CAACiQ,eAAe,CAAC,WAAW,EAAE,IAAI,CAACC,SAAS,CAAC;;IAGvD,IAAI,IAAI,CAACpP,wBAAwB,IAAI,IAAI,CAACuB,eAAe,EAAE;MACvD,MAAM8N,QAAQ,GAAG,IAAI,CAAC9N,eAAe,CAAC+N,WAAW,EAAE;MACnDpQ,MAAM,CAACqQ,SAAS,CAAC,YAAY,EAAE,IAAI,CAACC,eAAe,GAAGH,QAAQ,CAACI,KAAK,EAAE,IAAI,CAACC,gBAAgB,GAAGL,QAAQ,CAACM,MAAM,EAAEN,QAAQ,CAACI,KAAK,GAAG,IAAI,CAACD,eAAe,CAAC;;IAGzJ,IAAI,IAAI,CAAC9G,iBAAiB,IAAI,IAAI,CAACxK,MAAM,EAAE;MACvC,MAAM0R,MAAM,GAAG,IAAI,CAAC1R,MAAM,CAAC2R,YAAa;MACxC3Q,MAAM,CAAC+P,UAAU,CAAC,aAAa,EAAEW,MAAM,CAACE,cAAc,CAAC;;IAG3D,MAAMvF,OAAO,GAAGrL,MAAM,CAACqL,OAAO;IAE9B,IAAI,IAAI,CAACrM,MAAM,EAAE;MACbV,aAAa,CAAC0B,MAAM,EAAE,IAAI,EAAE,IAAI,CAAChB,MAAM,CAAC;;IAG5C,IAAIqM,OAAO,CAACwF,OAAO,CAAC,2BAA2B,CAAC,IAAI,CAAC,EAAE;MACnD,MAAMC,OAAO,GAAGvB,UAAU,CAACwB,KAAK,EAAE;MAClCD,OAAO,CAACE,MAAM,EAAE;MAChBhR,MAAM,CAAC0P,SAAS,CAAC,SAAS,EAAEoB,OAAO,CAAC;;IAGxC;IACA,IAAI,IAAI,CAAClE,mBAAmB,IAAI,IAAI,CAAC5N,MAAM,EAAE;MACzCnB,cAAc,CAACoT,YAAY,CAAC5F,OAAO,EAAErL,MAAM,EAAE,IAAI,CAAChB,MAAM,CAAC;;IAG7D;IACA,IAAI,IAAI,CAACoD,6BAA6B,IAAI,CAAC,IAAI,CAACA,6BAA6B,CAAC8O,kBAAkB,EAAE;MAC9F,IAAI,CAAC9O,6BAA6B,CAAC+O,IAAI,CAACnR,MAAM,CAAC;;IAGnD;IACA,QAAQsC,SAAS;MACb,KAAK3E,cAAc,CAAC+E,aAAa;QAC7B,IAAI,CAACxD,OAAO,CAACkS,YAAY,CAAC;QAC1B;MACJ,KAAKzT,cAAc,CAAC0T,gBAAgB;QAChC,IAAI,CAACnS,OAAO,CAACkS,YAAY,CAAC;QAC1B;MACJ,KAAKzT,cAAc,CAAC2T,kBAAkB;QAClC,IAAI,CAACpS,OAAO,CAACkS,YAAY,CAAC;QAC1B;MACJ,KAAKzT,cAAc,CAAC8E,kBAAkB;QAClC,IAAI,CAACvD,OAAO,CAACkS,YAAY,CAAC;QAC1B;IAAM;IAGd;IACA,IAAI,CAACtR,SAAS,CAACyR,eAAe,CAAC,IAAI,CAACjN,YAAY,EAAEtE,MAAM,CAAC;IAEzD,IAAI,IAAI,CAAC2E,gCAAgC,EAAE;MACvC,IAAI,CAACA,gCAAgC,CAAC6M,eAAe,CAACxR,MAAM,CAAC;;IAGjE;IACA,IAAI,CAACd,OAAO,CAACuS,cAAc,CAAC,SAAS,IAAC;IACtC,IAAI,CAACvS,OAAO,CAACkS,YAAY,CAAC;IAE1B,OAAO,IAAI,CAACvQ,mBAAmB;EACnC;EAEA;EACOgN,OAAO,CAACwB,SAAkB;IAC7B,IAAI,CAAC,IAAI,CAAClN,OAAO,EAAE;MACf;;IAGJ,IAAI,CAAC,IAAI,CAACS,qBAAqB,EAAE,EAAE;MAC/B;;IAGJ,IAAmB,IAAI,CAACT,OAAQ,CAACuP,QAAQ,EAAE;MACvC,MAAMC,WAAW,GAAiB,IAAI,CAACxP,OAAO;MAC9CkN,SAAS,GAAGsC,WAAW,CAACC,cAAc,EAAE;KAC3C,MAAM;MACH,MAAMC,eAAe,GAAY,IAAI,CAAC1P,OAAO;MAC7CkN,SAAS,GAAGjS,UAAU,CAACD,MAAM,CAAC,CAAC,CAAC;MAChCA,MAAM,CAAC2U,gBAAgB,CAACD,eAAe,CAACrH,CAAC,EAAEqH,eAAe,CAACpH,CAAC,EAAEoH,eAAe,CAACnH,CAAC,EAAE2E,SAAS,CAAC;;IAG/F,IAAI,CAACvP,SAAS,CAACiS,uBAAuB,EAAE;IAExC,IAAI,CAACtG,aAAa,CAACuG,QAAQ,CAAC,cAAc,EAAE,IAAI,CAACnR,mBAAmB,CAAC;IACrE,IAAI,CAAC4K,aAAa,CAACuG,QAAQ,CAAC,WAAW,EAAE,IAAI,CAACzE,UAAU,CAAC;IACzD,IAAI,CAAC9B,aAAa,CAACuG,QAAQ,CAAC,YAAY,EAAE,IAAI,CAAC/O,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC;IAChE,IAAI,CAACwI,aAAa,CAACwG,MAAM,CAAC,mBAAmB,EAAE,IAAI,CAACvQ,kBAAkB,CAAC;IACvE,IAAI,CAAC+J,aAAa,CAACyG,SAAS,CAAC,UAAU,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACC,WAAW,CAAC;IAC5E,IAAI,CAAC3G,aAAa,CAACyG,SAAS,CAAC,WAAW,EAAE,IAAI,CAACG,YAAY,EAAE,IAAI,CAACC,YAAY,CAAC;IAC/E,IAAI,CAAC,IAAI,CAACzM,sBAAsB,EAAE;MAC9B,IAAI,CAAC4F,aAAa,CAACwE,eAAe,CAAC,QAAQ,EAAE,IAAI,CAAC5K,MAAM,CAAC;MACzD,IAAI,CAACoG,aAAa,CAACwE,eAAe,CAAC,QAAQ,EAAE,IAAI,CAACsC,MAAM,CAAC;;IAE7D,IAAI,CAAC9G,aAAa,CAACyG,SAAS,CAAC,WAAW,EAAE,IAAI,CAACM,OAAO,EAAE,IAAI,CAACC,OAAO,CAAC;IACrE,IAAI,CAAChH,aAAa,CAACiH,SAAS,CAAC,YAAY,EAAE,IAAI,CAACC,SAAS,EAAE,IAAI,CAACC,SAAS,EAAE,IAAI,CAACC,SAAS,EAAE,IAAI,CAACC,SAAS,CAAC;IAC1G,IAAI,CAACrH,aAAa,CAACiH,SAAS,CAAC,YAAY,EAAE,IAAI,CAACK,eAAe,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAACC,kBAAkB,EAAE,IAAI,CAACC,kBAAkB,CAAC;IACxI,IAAI,CAACzH,aAAa,CAACsE,UAAU,CAAC,SAAS,EAAE,IAAI,CAACoD,OAAO,CAAC;IACtD,IAAI,IAAI,CAACzL,8BAA8B,EAAE;MACrC,IAAI,CAAC+D,aAAa,CAACuG,QAAQ,CAAC,sBAAsB,EAAE,IAAI,CAACoB,oBAAoB,CAAC;;IAElF,IAAI,IAAI,CAACrS,mBAAmB,EAAE;MAC1B,IAAI,CAACA,mBAAmB,CAACsS,aAAa,CAAC,IAAI,CAAC5H,aAAa,CAAC;;IAE9D,IAAI,IAAI,CAAC3K,wBAAwB,EAAE;MAC/B,IAAI,CAAC2K,aAAa,CAACiH,SAAS,CAAC,WAAW,EAAE,IAAI,CAACY,iBAAiB,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAACC,qBAAqB,EAAE,IAAI,CAACC,cAAc,GAAG,CAAC,GAAG,CAAC,CAAC;;IAEpJ,IAAI,IAAI,CAAChK,YAAY,EAAE;MACnB,IAAI,CAACgC,aAAa,CAACsE,UAAU,CAAC,eAAe,EAAE,IAAI,CAAC2D,aAAa,CAAC;;IAEtE,IAAI,CAAC,IAAI,CAACnI,OAAO,EAAE;MACf,IAAI,CAACE,aAAa,CAACiE,SAAS,CAAC,WAAW,EAAEL,SAAS,CAAC;;IAGxD,IAAI,CAACvP,SAAS,CAAC6T,oBAAoB,CAAC,IAAI,CAACrP,YAAY,EAAE,IAAI,CAAC8G,aAAa,EAAE,IAAI,CAACvK,mBAAmB,CAAC;IAEpG;IACA,IAAI,CAACyD,YAAY,EAAE;IACnB,IAAI,IAAI,CAACA,YAAY,KAAK,CAAC,EAAE;MACzB,IAAI,CAACA,YAAY,GAAG,CAAC;;IAGzB;IACA,MAAMsP,SAAS,GAAG,IAAI,CAACzI,aAAa;IACpC,IAAI,CAACA,aAAa,GAAG,IAAI,CAACC,aAAa;IACvC,IAAI,CAACA,aAAa,GAAGwI,SAAS;EAClC;EAEA;;;;;;EAMOC,MAAM,CAACvG,OAAO,GAAG,KAAK,EAAEwG,eAAe,GAAG,KAAK;IAClD,IAAI,CAAC,IAAI,CAAC/Q,QAAQ,EAAE;MAChB,OAAO,CAAC;;IAGZ,IAAI,CAAC8L,2BAA2B,EAAE;IAClC,IAAI,CAACL,0BAA0B,EAAE;IACjC,IAAI,CAACC,kCAAkC,EAAE;IACzC,IAAI,CAACC,8BAA8B,EAAE;IACrC,IAAI,CAACC,mCAAmC,EAAE;IAC1C,IAAI,CAACC,0BAA0B,EAAE;IAEjC,IAAI,CAAC,IAAI,CAAC1M,OAAO,EAAE,EAAE;MACjB,OAAO,CAAC;;IAGZ,IAAI,CAACoL,OAAO,IAAI,IAAI,CAACtO,MAAM,EAAE;MACzB,IAAI,CAAC,IAAI,CAAC0E,YAAY,IAAI,IAAI,CAACqQ,aAAa,EAAE;QAC1C,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,IAAI,CAACD,aAAa,EAAEC,KAAK,EAAE,EAAE;UACrD,IAAI,CAAC3G,OAAO,CAAC,IAAI,CAAC;UAClB,IAAI,CAACwG,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC;;QAG3B,IAAI,CAACnQ,YAAY,GAAG,IAAI;;MAG5B,IACI,IAAI,CAACuQ,gBAAgB,KAAK,IAAI,CAACjV,MAAM,CAACkV,UAAU,EAAE,KACjD,CAAC,IAAI,CAAClV,MAAM,CAAC2R,YAAY,IAAK,IAAI,CAAC3R,MAAM,CAAC2R,YAAY,IAAI,IAAI,CAACwD,+BAA+B,KAAK,IAAI,CAACnV,MAAM,CAAC2R,YAAY,CAACvR,QAAS,CAAC,EACzI;QACE,OAAO,CAAC;;MAGZ,IAAI,CAAC6U,gBAAgB,GAAG,IAAI,CAACjV,MAAM,CAACkV,UAAU,EAAE;MAChD,IAAI,IAAI,CAAClV,MAAM,CAAC2R,YAAY,EAAE;QAC1B,IAAI,CAACwD,+BAA+B,GAAG,IAAI,CAACnV,MAAM,CAAC2R,YAAY,CAACvR,QAAQ;;;IAIhF;IACA,IAAI,CAACwK,WAAW,EAAE;IAElB,IAAI,CAACwK,iBAAiB,IAAI,IAAI,CAACC,QAAQ,GAAG,IAAI,CAAC9G,UAAU;IACzD,IAAI,IAAI,CAAC6G,iBAAiB,GAAG,CAAC,EAAE;MAC5B,MAAME,OAAO,GAAG,IAAI,CAACF,iBAAiB,GAAG,CAAC;MAC1C,IAAI,CAACA,iBAAiB,IAAIE,OAAO;MACjC,IAAI,CAACzT,mBAAmB,GAAGG,IAAI,CAACC,GAAG,CAAC,IAAI,CAACL,YAAY,EAAE,IAAI,CAACC,mBAAmB,GAAGyT,OAAO,CAAC;;IAG9F,IAAI,CAAC,IAAI,CAACzT,mBAAmB,EAAE;MAC3B,OAAO,CAAC;;IAGZ;IACA,IAAIwO,SAAiB;IACrB,IAAmB,IAAI,CAAClN,OAAQ,CAACuP,QAAQ,EAAE;MACvC,MAAMC,WAAW,GAAiB,IAAI,CAACxP,OAAO;MAC9CkN,SAAS,GAAGsC,WAAW,CAACC,cAAc,EAAE;KAC3C,MAAM;MACH,MAAMC,eAAe,GAAY,IAAI,CAAC1P,OAAO;MAC7CkN,SAAS,GAAGjS,UAAU,CAACD,MAAM,CAAC,CAAC,CAAC;MAChCA,MAAM,CAAC2U,gBAAgB,CAACD,eAAe,CAACrH,CAAC,EAAEqH,eAAe,CAACpH,CAAC,EAAEoH,eAAe,CAACnH,CAAC,EAAE2E,SAAS,CAAC;;IAG/F,MAAMtF,MAAM,GAAG,IAAI,CAAC7K,OAAiB;IAErC,IAAI,CAAC,IAAI,CAAC0O,eAAe,EAAE;MACvB,IAAI,CAACC,OAAO,CAACwB,SAAS,CAAC;;IAG3B,IAAIkF,YAAY,GAAG,CAAC;IACpB,IAAI,CAACjH,OAAO,IAAI,CAACwG,eAAe,EAAE;MAC9B/J,MAAM,CAACyK,QAAQ,CAAC,KAAK,CAAC;MAEtB,IAAI,IAAI,CAACC,eAAe,EAAE;QACtB1K,MAAM,CAAC2K,aAAa,CAAC,IAAI,CAAC;;MAG9B,IAAI,IAAI,CAACpS,SAAS,KAAK3E,cAAc,CAAC4E,qBAAqB,EAAE;QACzDgS,YAAY,GAAG,IAAI,CAACnF,OAAO,CAACzR,cAAc,CAAC8E,kBAAkB,EAAE4M,SAAS,CAAC,GAAG,IAAI,CAACD,OAAO,CAACzR,cAAc,CAAC+E,aAAa,EAAE2M,SAAS,CAAC;OACpI,MAAM;QACHkF,YAAY,GAAG,IAAI,CAACnF,OAAO,CAAC,IAAI,CAAC9M,SAAS,EAAE+M,SAAS,CAAC;;MAG1D,IAAI,CAACnQ,OAAO,CAACkS,YAAY,CAAC;;IAG9B,OAAOmD,YAAY;EACvB;EAEA;;;EAGOI,OAAO;IACV,IAAI,CAAC/K,WAAW,CAAC,IAAI,CAAC;EAC1B;EAEQxF,eAAe;IACnB,IAAI,IAAI,CAAC0F,QAAQ,EAAE;MACf,IAAI,CAACA,QAAQ,CAAChE,OAAO,EAAE;MACjB,IAAI,CAACgE,QAAS,GAAG,IAAI;;IAE/B,IAAI,IAAI,CAACmB,QAAQ,EAAE;MACf,IAAI,CAACA,QAAQ,CAACnF,OAAO,EAAE;MACjB,IAAI,CAACmF,QAAS,GAAG,IAAI;;IAE/B,IAAI,IAAI,CAACC,aAAa,EAAE;MACpB,IAAI,CAACA,aAAa,CAACpF,OAAO,EAAE;MACtB,IAAI,CAACoF,aAAc,GAAG,IAAI;;IAEpC,IAAI,CAACpL,SAAS,CAAC8U,cAAc,EAAE;EACnC;EAEA;;;;EAIO9O,OAAO,CAAC+O,cAAc,GAAG,IAAI;IAChC,KAAK,MAAMvS,SAAS,IAAI,IAAI,CAACrC,aAAa,EAAE;MACxC,MAAMuG,WAAW,GAAG,IAAI,CAACvG,aAAa,CAACqC,SAAS,CAAC;MACjDkE,WAAW,CAACV,OAAO,EAAE;;IAGzB,IAAI,CAAC7F,aAAa,GAAG,EAAE;IAEvB,IAAI,IAAI,CAACjB,MAAM,EAAE;MACb,MAAMgV,KAAK,GAAG,IAAI,CAAChV,MAAM,CAACM,eAAe,CAACuR,OAAO,CAAC,IAAI,CAAC;MACvD,IAAImD,KAAK,GAAG,CAAC,CAAC,EAAE;QACZ,IAAI,CAAChV,MAAM,CAACM,eAAe,CAACwV,MAAM,CAACd,KAAK,EAAE,CAAC,CAAC;;;IAIpD,IAAI,CAAC5P,eAAe,EAAE;IACtB,IAAI,CAACtE,SAAS,CAACuE,oBAAoB,EAAE;IAErC,KAAK,IAAIlD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC2D,oBAAoB,CAACjB,MAAM,EAAE,EAAE1C,CAAC,EAAE;MACvD,MAAM4T,GAAG,GAAG,IAAI,CAACjQ,oBAAoB,CAAC3D,CAAC,CAAC;MACxC,KAAK,MAAM6T,GAAG,IAAID,GAAG,EAAE;QACnBA,GAAG,CAACC,GAAG,CAAC,CAAClP,OAAO,EAAE;;;IAI1B,IAAI,CAAChB,oBAAoB,GAAG,EAAE;IAE9B,IAAI,IAAI,CAACe,sBAAsB,EAAE;MAC7B,IAAI,CAACA,sBAAsB,CAACC,OAAO,EAAE;MAC/B,IAAI,CAACD,sBAAuB,GAAG,IAAI;;IAG7C,IAAI,IAAI,CAACkB,qBAAqB,EAAE;MAC5B,IAAI,CAACA,qBAAqB,CAACjB,OAAO,EAAE;MAC9B,IAAI,CAACiB,qBAAsB,GAAG,IAAI;;IAG5C,IAAI,IAAI,CAACK,6BAA6B,EAAE;MACpC,IAAI,CAACA,6BAA6B,CAACtB,OAAO,EAAE;MACtC,IAAI,CAACsB,6BAA8B,GAAG,IAAI;;IAGpD,IAAI,IAAI,CAACG,yBAAyB,EAAE;MAChC,IAAI,CAACA,yBAAyB,CAACzB,OAAO,EAAE;MAClC,IAAI,CAACyB,yBAA0B,GAAG,IAAI;;IAGhD,IAAI,IAAI,CAACG,8BAA8B,EAAE;MACrC,IAAI,CAACA,8BAA8B,CAAC5B,OAAO,EAAE;MACvC,IAAI,CAAC4B,8BAA+B,GAAG,IAAI;;IAGrD,IAAI,IAAI,CAACG,qBAAqB,EAAE;MAC5B,IAAI,CAACA,qBAAqB,CAAC/B,OAAO,EAAE;MAC9B,IAAI,CAAC+B,qBAAsB,GAAG,IAAI;;IAG5C,IAAI,IAAI,CAACxG,cAAc,EAAE;MACrB,IAAI,CAACA,cAAc,CAACyE,OAAO,EAAE;MACvB,IAAI,CAACzE,cAAe,GAAG,IAAI;;IAGrC,IAAI,IAAI,CAACI,eAAe,EAAE;MACtB,IAAI,CAACA,eAAe,CAACqE,OAAO,EAAE;MACxB,IAAI,CAACrE,eAAgB,GAAG,IAAI;;IAGtC,IAAIoT,cAAc,IAAI,IAAI,CAACxS,eAAe,EAAE;MACxC,IAAI,CAACA,eAAe,CAACyD,OAAO,EAAE;MAC9B,IAAI,CAACzD,eAAe,GAAG,IAAI;;IAG/B,IAAIwS,cAAc,IAAI,IAAI,CAACpL,YAAY,EAAE;MACrC,IAAI,CAACA,YAAY,CAAC3D,OAAO,EAAE;MAC3B,IAAI,CAAC2D,YAAY,GAAG,IAAI;;IAG5B;IACA,IAAI,CAACwL,mBAAmB,CAACC,KAAK,EAAE;IAChC,IAAI,CAACC,mBAAmB,CAAC3D,eAAe,CAAC,IAAI,CAAC;IAC9C,IAAI,CAAC2D,mBAAmB,CAACD,KAAK,EAAE;EACpC;EACA;;;;;;;EAOOnE,KAAK,CAACrS,IAAY,EAAE0W,UAAe,EAAEC,YAAY,GAAG,KAAK;IAC5D,MAAMC,MAAM,GAAG;MAAE,GAAG,IAAI,CAACvV;IAAe,CAAE;IAC1C,IAAIwV,OAAO,GAAQ,IAAI;IACvB,MAAMxL,MAAM,GAAG,IAAI,CAAC7K,OAAc;IAClC,IAAI6K,MAAM,CAACyL,wBAAwB,EAAE;MACjC,IAAI,IAAI,CAACC,YAAY,IAAI,IAAI,EAAE;QAC3BF,OAAO,GAAG,IAAI,CAACE,YAAY;QAC3B,MAAMpK,OAAO,GAAWkK,OAAO,CAACG,aAAa,CAACrK,OAAO,CAACxH,MAAM,GAAG,CAAC,GAAG0R,OAAO,CAACG,aAAa,CAACrK,OAAO,CAACQ,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;QAChHyJ,MAAM,CAAC,CAAC,CAAC,GAAGvL,MAAM,CAACyL,wBAAwB,CACvCD,OAAO,CAACI,UAAU,CAACC,eAAe,EAClCL,OAAO,CAACG,aAAa,CAAC3J,QAAQ,EAC9BwJ,OAAO,CAACG,aAAa,CAAC1J,QAAQ,EAC9BX,OAAO,EACPwK,SAAS,EACTA,SAAS,EACTA,SAAS,EACT,IAAI,CACP;;;IAIT,MAAMC,aAAa,GAAG,IAAI,CAACC,SAAS,CAACV,YAAY,CAAC;IAClD,MAAMW,MAAM,GAAGxX,iBAAiB,CAACyX,KAAK,CAACH,aAAa,EAAE,IAAI,CAAC9W,MAAM,IAAI,IAAI,CAACE,OAAO,EAAE,IAAI,CAACgX,QAAQ,CAAC;IACjGF,MAAM,CAACtX,IAAI,GAAGA,IAAI;IAClBsX,MAAM,CAACP,YAAY,GAAGF,OAAO;IAC7BS,MAAM,CAACjW,eAAe,GAAGuV,MAAM;IAE/B,IAAIF,UAAU,KAAKS,SAAS,EAAE;MAC1BT,UAAU,GAAG,IAAI,CAACjT,OAAO;;IAG7B,IAAI,IAAI,CAACsH,YAAY,EAAE;MACnBuM,MAAM,CAACvM,YAAY,GAAG,IAAI,CAACA,YAAY,CAACsH,KAAK,EAAE;;IAGnDiF,MAAM,CAAC7T,OAAO,GAAGiT,UAAU;IAE3B,OAAOY,MAAM;EACjB;EAEA;;;;;EAKOD,SAAS,CAACI,gBAAgB,GAAG,KAAK;IACrC,MAAMC,mBAAmB,GAAQ,EAAE;IAEnCzY,cAAc,CAAC0Y,UAAU,CAACD,mBAAmB,EAAE,IAAI,EAAED,gBAAgB,CAAC;IAEtEC,mBAAmB,CAACpU,mBAAmB,GAAG,IAAI,CAACA,mBAAmB;IAClEoU,mBAAmB,CAAC/V,iBAAiB,GAAG,IAAI,CAACqB,kBAAkB;IAC/D0U,mBAAmB,CAACX,YAAY,GAAG,IAAI,CAACA,YAAY;IAEpD,OAAOW,mBAAmB;EAC9B;EAEA;;;;;;;;;EASO,OAAOH,KAAK,CAACK,oBAAyB,EAAE1X,aAAiC,EAAE2X,OAAe,EAAEC,UAAU,GAAG,KAAK,EAAEjW,QAAiB;IACpI,MAAM7B,IAAI,GAAG4X,oBAAoB,CAAC5X,IAAI;IACtC,IAAIqL,MAAkB;IACtB,IAAI0M,KAAsB;IAE1B,IAAI7X,aAAa,YAAYV,UAAU,EAAE;MACrC6L,MAAM,GAAGnL,aAAa;KACzB,MAAM;MACH6X,KAAK,GAAG7X,aAAsB;MAC9BmL,MAAM,GAAG0M,KAAK,CAACtX,SAAS,EAAE;;IAG9B,MAAMuX,cAAc,GAAG,IAAIlY,iBAAiB,CACxCE,IAAI,EACJ;MAAE6B,QAAQ,EAAEA,QAAQ,IAAI+V,oBAAoB,CAAC/V,QAAQ;MAAEF,iBAAiB,EAAEiW,oBAAoB,CAACjW;IAAiB,CAAE,EAClHzB,aAAa,EACb,IAAI,EACJ0X,oBAAoB,CAACxX,uBAAuB,CAC/C;IACD4X,cAAc,CAACR,QAAQ,GAAGK,OAAO;IAEjC,IAAID,oBAAoB,CAACb,YAAY,IAAK1L,MAAc,CAACyL,wBAAwB,EAAE;MAC/E,MAAMD,OAAO,GAAGe,oBAAoB,CAACb,YAAY;MACjD,MAAMpK,OAAO,GAAWkK,OAAO,CAACG,aAAa,CAACrK,OAAO,CAACxH,MAAM,GAAG,CAAC,GAAG0R,OAAO,CAACG,aAAa,CAACrK,OAAO,CAACQ,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;MAChH,MAAMyJ,MAAM,GAAsBvL,MAAc,CAACyL,wBAAwB,CACrED,OAAO,CAACI,UAAU,CAACC,eAAe,EAClCL,OAAO,CAACG,aAAa,CAAC3J,QAAQ,EAC9BwJ,OAAO,CAACG,aAAa,CAAC1J,QAAQ,EAC9BX,OAAO,EACPwK,SAAS,EACTA,SAAS,EACTA,SAAS,EACTa,cAAc,CACjB;MACDA,cAAc,CAACjS,eAAe,CAAC6Q,MAAM,EAAE,CAAC,CAAC;MACzCoB,cAAc,CAACjB,YAAY,GAAGF,OAAO;;IAGzC,IAAIe,oBAAoB,CAACK,EAAE,EAAE;MACzBD,cAAc,CAACC,EAAE,GAAGL,oBAAoB,CAACK,EAAE;;IAG/C,IAAIL,oBAAoB,CAACtU,mBAAmB,EAAE;MAC1C0U,cAAc,CAAC1U,mBAAmB,GAAGsU,oBAAoB,CAACtU,mBAAmB;;IAGjFrE,cAAc,CAACiZ,MAAM,CAACN,oBAAoB,EAAEI,cAAc,EAAE9X,aAAa,EAAE2X,OAAO,CAAC;IAEnF;IACA,IAAID,oBAAoB,CAACO,gBAAgB,EAAE;MACvCH,cAAc,CAACG,gBAAgB,GAAGP,oBAAoB,CAACO,gBAAgB;;IAG3E,IAAI,CAACL,UAAU,IAAI,CAACE,cAAc,CAACG,gBAAgB,EAAE;MACjDH,cAAc,CAACtT,KAAK,EAAE;;IAG1B,OAAOsT,cAAc;EACzB","names":["FactorGradient","ColorGradient","GradientHelper","Observable","Matrix","TmpVectors","Color4","TmpColors","Scalar","VertexBuffer","Buffer","BaseParticleSystem","ParticleSystem","BoxParticleEmitter","MaterialHelper","ImageProcessingConfiguration","RawTexture","EngineStore","CustomParticleEmitter","ThinEngine","DrawWrapper","GetClass","addClipPlaneUniforms","bindClipPlane","prepareDefinesForClipPlanes","GPUParticleSystem","constructor","name","options","sceneOrEngine","customEffect","isAnimationSheetEnabled","getClassName","_scene","LastCreatedScene","_engine","getEngine","uniqueId","getUniqueId","particleSystems","push","defaultProjectionMatrix","PerspectiveFovLH","isNDCHalfZRange","getCaps","supportComputeShaders","Error","_platform","_customWrappers","effect","_drawWrappers","drawContext","useInstancing","_attachImageProcessingConfiguration","randomTextureSize","fullOptions","capacity","maxTextureSize","optionsAsNumber","isFinite","_capacity","_activeCount","_currentActiveCount","_isAnimationSheetEnabled","particleEmitterType","Math","min","d","i","random","_randomTexture","Float32Array","wrapU","wrapV","_randomTexture2","_randomTextureSize","IsSupported","LastCreatedEngine","caps","supportTransformFeedbacks","getCapacity","activeParticleCount","value","isReady","emitter","_imageProcessingConfiguration","particleTexture","blendMode","BLENDMODE_MULTIPLYADD","_getWrapper","BLENDMODE_MULTIPLY","BLENDMODE_ADD","isUpdateBufferCreated","_recreateUpdateEffect","isUpdateBufferReady","isStarted","_started","isStopped","_stopped","isStopping","getActiveCount","start","delay","startDelay","targetStopDuration","_hasTargetStopDurationDependantGradient","setTimeout","_preWarmDone","beginAnimationOnStart","animations","length","beginAnimation","beginAnimationFrom","beginAnimationTo","beginAnimationLoop","stop","reset","_releaseBuffers","releaseVertexBuffers","_targetIndex","getCustomEffect","_getCustomDrawWrapper","setCustomEffect","onBeforeDrawParticlesObservable","_onBeforeDrawParticlesObservable","vertexShaderName","vertexBuffers","_renderVertexBuffers","indexBuffer","_removeGradientAndTexture","gradient","gradients","texture","addColorGradient","color1","_colorGradients","colorGradient","_refreshColorGradient","reorder","sort","a","b","_colorGradientsTexture","dispose","forceRefreshGradients","_refreshFactorGradient","_sizeGradients","_angularSpeedGradients","_velocityGradients","_limitVelocityGradients","_dragGradients","removeColorGradient","resetDrawCache","drawWrapper","_addFactorGradient","factorGradients","factor","valueGradient","addSizeGradient","removeSizeGradient","_sizeGradientsTexture","textureName","that","addAngularSpeedGradient","removeAngularSpeedGradient","_angularSpeedGradientsTexture","addVelocityGradient","removeVelocityGradient","_velocityGradientsTexture","addLimitVelocityGradient","removeLimitVelocityGradient","_limitVelocityGradientsTexture","addDragGradient","removeDragGradient","_dragGradientsTexture","addEmitRateGradient","removeEmitRateGradient","addStartSizeGradient","removeStartSizeGradient","addColorRemapGradient","removeColorRemapGradient","addAlphaRemapGradient","removeAlphaRemapGradient","addRampGradient","removeRampGradient","getRampGradients","useRampGradients","addLifeTimeGradient","removeLifeTimeGradient","_reset","_createVertexBuffers","updateBuffer","renderBuffer","spriteSource","renderVertexBuffers","createVertexBuffer","_attributesStrideSize","offset","billboardMode","BILLBOARDMODE_STRETCHED","alignDataInBuffer","_isBillboardBased","noiseTexture","spriteRandomStartCell","createVertexBuffers","_initialize","force","_buffer0","engine","data","Array","isBillboardBased","usingCustomEmitter","tmpVector","Vector3","particleIndex","particleDestinationGenerator","x","y","z","particlePositionGenerator","numDummies","spriteData","bufferData1","createParticleBuffer","bufferData2","_buffer1","_spriteBuffer","_sourceBuffer","_targetBuffer","defines","getEffectDefines","isLocal","_cachedUpdateDefines","_updateBuffer","createUpdateBuffer","customWrapper","fillDefines","join","attributes","uniforms","samplers","fillUniformsAttributesAndSamplerNames","setEffect","createEffect","_GetAttributeNamesOrOptions","hasColorGradients","isBillboardStretched","attributeNamesOrOptions","PositionKind","ColorKind","UVKind","_GetEffectCreationOptions","useLogarithmicDepth","effectCreationOption","BILLBOARDMODE_Y","BILLBOARDMODE_ALL","prepareDefines","_imageProcessingConfigurationDefines","toString","PrepareUniforms","PrepareSamplers","animate","preWarm","_timeDelta","updateSpeed","preWarmStepOffset","getAnimationRatio","_actualFrame","updateInAnimate","_update","_createFactorGradientTexture","_rawTextureWidth","ratio","GetCurrentGradient","currentGradient","nextGradient","scale","Lerp","factor1","CreateRTexture","_createSizeGradientTexture","_createAngularSpeedGradientTexture","_createVelocityGradientTexture","_createLimitVelocityGradientTexture","_createDragGradientTexture","_createColorGradientTexture","Uint8Array","tmpColor","LerpToRef","r","g","CreateRGBATexture","_render","emitterWM","enableEffect","viewMatrix","getViewMatrix","IdentityReadOnly","setMatrix","getProjectionMatrix","setTexture","setVector2","translationPivot","setVector3","worldOffset","setDirectColor4","colorDead","baseSize","getBaseSize","setFloat3","spriteCellWidth","width","spriteCellHeight","height","camera","activeCamera","globalPosition","indexOf","invView","clone","invert","BindLogDepth","applyByPostProcess","bind","setAlphaMode","BLENDMODE_ONEONE","BLENDMODE_STANDARD","bindDrawBuffers","notifyObservers","drawArraysType","position","emitterMesh","getWorldMatrix","emitterPosition","TranslationToRef","preUpdateParticleBuffer","setFloat","setInt","setFloat2","minLifeTime","maxLifeTime","minEmitPower","maxEmitPower","color2","minSize","maxSize","setFloat4","minScaleX","maxScaleX","minScaleY","maxScaleY","minAngularSpeed","maxAngularSpeed","minInitialRotation","maxInitialRotation","gravity","limitVelocityDamping","applyToShader","startSpriteCellID","endSpriteCellID","spriteCellChangeSpeed","spriteCellLoop","noiseStrength","updateParticleBuffer","tmpBuffer","render","forceUpdateOnly","preWarmCycles","index","_currentRenderId","getFrameId","_currentRenderingCameraUniqueId","_accumulatedCount","emitRate","intPart","outparticles","setState","forceDepthWrite","setDepthWrite","rebuild","releaseBuffers","disposeTexture","splice","rvb","key","onStoppedObservable","clear","onDisposeObservable","newEmitter","cloneTexture","custom","program","createEffectForParticles","customShader","shaderOptions","shaderPath","fragmentElement","undefined","serialization","serialize","result","Parse","_rootUrl","serializeTexture","serializationObject","_Serialize","parsedParticleSystem","rootUrl","doNotStart","scene","particleSystem","id","_Parse","preventAutoStart"],"sourceRoot":"","sources":["../../../../lts/core/generated/Particles/gpuParticleSystem.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Immutable, Nullable, float, DataArray } from \"../types\";\r\nimport type { Color3Gradient, IValueGradient } from \"../Misc/gradients\";\r\nimport { FactorGradient, ColorGradient, GradientHelper } from \"../Misc/gradients\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Vector3 } from \"../Maths/math.vector\";\r\nimport { Matrix, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Color4, TmpColors } from \"../Maths/math.color\";\r\nimport { Scalar } from \"../Maths/math.scalar\";\r\nimport { VertexBuffer, Buffer } from \"../Buffers/buffer\";\r\n\r\nimport type { IParticleSystem } from \"./IParticleSystem\";\r\nimport { BaseParticleSystem } from \"./baseParticleSystem\";\r\nimport { ParticleSystem } from \"./particleSystem\";\r\nimport { BoxParticleEmitter } from \"../Particles/EmitterTypes/boxParticleEmitter\";\r\nimport type { IDisposable } from \"../scene\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { MaterialHelper } from \"../Materials/materialHelper\";\r\nimport { ImageProcessingConfiguration } from \"../Materials/imageProcessingConfiguration\";\r\nimport { RawTexture } from \"../Materials/Textures/rawTexture\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport { CustomParticleEmitter } from \"./EmitterTypes/customParticleEmitter\";\r\nimport { ThinEngine } from \"../Engines/thinEngine\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { DrawWrapper } from \"../Materials/drawWrapper\";\r\nimport type { UniformBufferEffectCommonAccessor } from \"../Materials/uniformBufferEffectCommonAccessor\";\r\nimport type { IGPUParticleSystemPlatform } from \"./IGPUParticleSystemPlatform\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\ndeclare type Engine = import(\"../Engines/engine\").Engine;\r\ndeclare type AbstractMesh = import(\"../Meshes/abstractMesh\").AbstractMesh;\r\n\r\nimport \"../Shaders/gpuRenderParticles.fragment\";\r\nimport \"../Shaders/gpuRenderParticles.vertex\";\r\nimport { GetClass } from \"../Misc/typeStore\";\r\nimport { addClipPlaneUniforms, bindClipPlane, prepareDefinesForClipPlanes } from \"../Materials/clipPlaneMaterialHelper\";\r\n\r\n/**\r\n * This represents a GPU particle system in Babylon\r\n * This is the fastest particle system in Babylon as it uses the GPU to update the individual particle data\r\n * @see https://www.babylonjs-playground.com/#PU4WYI#4\r\n */\r\nexport class GPUParticleSystem extends BaseParticleSystem implements IDisposable, IParticleSystem, IAnimatable {\r\n    /**\r\n     * The layer mask we are rendering the particles through.\r\n     */\r\n    public layerMask: number = 0x0fffffff;\r\n\r\n    private _capacity: number;\r\n    private _activeCount: number;\r\n    private _currentActiveCount: number;\r\n    private _accumulatedCount = 0;\r\n    private _updateBuffer: UniformBufferEffectCommonAccessor;\r\n\r\n    private _buffer0: Buffer;\r\n    private _buffer1: Buffer;\r\n    private _spriteBuffer: Buffer;\r\n    private _renderVertexBuffers: Array<{ [key: string]: VertexBuffer }> = [];\r\n\r\n    private _targetIndex = 0;\r\n    private _sourceBuffer: Buffer;\r\n    private _targetBuffer: Buffer;\r\n\r\n    private _currentRenderId = -1;\r\n    private _currentRenderingCameraUniqueId = -1;\r\n    private _started = false;\r\n    private _stopped = false;\r\n\r\n    private _timeDelta = 0;\r\n\r\n    /** @internal */\r\n    public _randomTexture: RawTexture;\r\n    /** @internal */\r\n    public _randomTexture2: RawTexture;\r\n\r\n    /** Indicates that the update of particles is done in the animate function (and not in render). Default: false */\r\n    public updateInAnimate = false;\r\n\r\n    private _attributesStrideSize: number;\r\n    private _cachedUpdateDefines: string;\r\n\r\n    private _randomTextureSize: number;\r\n    private _actualFrame = 0;\r\n    private _drawWrappers: { [blendMode: number]: DrawWrapper };\r\n    private _customWrappers: { [blendMode: number]: Nullable<DrawWrapper> };\r\n\r\n    private readonly _rawTextureWidth = 256;\r\n\r\n    private _platform: IGPUParticleSystemPlatform;\r\n\r\n    /**\r\n     * Gets a boolean indicating if the GPU particles can be rendered on current browser\r\n     */\r\n    public static get IsSupported(): boolean {\r\n        if (!EngineStore.LastCreatedEngine) {\r\n            return false;\r\n        }\r\n        const caps = EngineStore.LastCreatedEngine.getCaps();\r\n\r\n        return caps.supportTransformFeedbacks || caps.supportComputeShaders;\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the system is disposed.\r\n     */\r\n    public onDisposeObservable = new Observable<IParticleSystem>();\r\n    /**\r\n     * An event triggered when the system is stopped\r\n     */\r\n    public onStoppedObservable = new Observable<IParticleSystem>();\r\n\r\n    /**\r\n     * Gets the maximum number of particles active at the same time.\r\n     * @returns The max number of active particles.\r\n     */\r\n    public getCapacity(): number {\r\n        return this._capacity;\r\n    }\r\n\r\n    /**\r\n     * Forces the particle to write their depth information to the depth buffer. This can help preventing other draw calls\r\n     * to override the particles.\r\n     */\r\n    public forceDepthWrite = false;\r\n\r\n    /**\r\n     * Gets or set the number of active particles\r\n     */\r\n    public get activeParticleCount(): number {\r\n        return this._activeCount;\r\n    }\r\n\r\n    public set activeParticleCount(value: number) {\r\n        this._activeCount = Math.min(value, this._capacity);\r\n    }\r\n\r\n    private _preWarmDone = false;\r\n\r\n    /**\r\n     * Specifies if the particles are updated in emitter local space or world space.\r\n     */\r\n    public isLocal = false;\r\n\r\n    /** Indicates that the particle system is GPU based */\r\n    public readonly isGPU = true;\r\n\r\n    /** Gets or sets a matrix to use to compute projection */\r\n    public defaultProjectionMatrix: Matrix;\r\n\r\n    /**\r\n     * Is this system ready to be used/rendered\r\n     * @returns true if the system is ready\r\n     */\r\n    public isReady(): boolean {\r\n        if (!this.emitter || (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.isReady()) || !this.particleTexture || !this.particleTexture.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        if (this.blendMode !== ParticleSystem.BLENDMODE_MULTIPLYADD) {\r\n            if (!this._getWrapper(this.blendMode).effect!.isReady()) {\r\n                return false;\r\n            }\r\n        } else {\r\n            if (!this._getWrapper(ParticleSystem.BLENDMODE_MULTIPLY).effect!.isReady()) {\r\n                return false;\r\n            }\r\n            if (!this._getWrapper(ParticleSystem.BLENDMODE_ADD).effect!.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (!this._platform.isUpdateBufferCreated()) {\r\n            this._recreateUpdateEffect();\r\n            return false;\r\n        }\r\n\r\n        return this._platform.isUpdateBufferReady();\r\n    }\r\n\r\n    /**\r\n     * Gets if the system has been started. (Note: this will still be true after stop is called)\r\n     * @returns True if it has been started, otherwise false.\r\n     */\r\n    public isStarted(): boolean {\r\n        return this._started;\r\n    }\r\n\r\n    /**\r\n     * Gets if the system has been stopped. (Note: rendering is still happening but the system is frozen)\r\n     * @returns True if it has been stopped, otherwise false.\r\n     */\r\n    public isStopped(): boolean {\r\n        return this._stopped;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the system is stopping\r\n     * @returns true if the system is currently stopping\r\n     */\r\n    public isStopping() {\r\n        return false; // Stop is immediate on GPU\r\n    }\r\n\r\n    /**\r\n     * Gets the number of particles active at the same time.\r\n     * @returns The number of active particles.\r\n     */\r\n    public getActiveCount() {\r\n        return this._currentActiveCount;\r\n    }\r\n\r\n    /**\r\n     * Starts the particle system and begins to emit\r\n     * @param delay defines the delay in milliseconds before starting the system (this.startDelay by default)\r\n     */\r\n    public start(delay = this.startDelay): void {\r\n        if (!this.targetStopDuration && this._hasTargetStopDurationDependantGradient()) {\r\n            throw \"Particle system started with a targetStopDuration dependant gradient (eg. startSizeGradients) but no targetStopDuration set\";\r\n        }\r\n        if (delay) {\r\n            setTimeout(() => {\r\n                this.start(0);\r\n            }, delay);\r\n            return;\r\n        }\r\n        this._started = true;\r\n        this._stopped = false;\r\n        this._preWarmDone = false;\r\n\r\n        // Animations\r\n        if (this.beginAnimationOnStart && this.animations && this.animations.length > 0 && this._scene) {\r\n            this._scene.beginAnimation(this, this.beginAnimationFrom, this.beginAnimationTo, this.beginAnimationLoop);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops the particle system.\r\n     */\r\n    public stop(): void {\r\n        if (this._stopped) {\r\n            return;\r\n        }\r\n        this._stopped = true;\r\n    }\r\n\r\n    /**\r\n     * Remove all active particles\r\n     */\r\n    public reset(): void {\r\n        this._releaseBuffers();\r\n        this._platform.releaseVertexBuffers();\r\n        this._currentActiveCount = 0;\r\n        this._targetIndex = 0;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"GPUParticleSystem\"\r\n     * @returns a string containing the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"GPUParticleSystem\";\r\n    }\r\n\r\n    /**\r\n     * Gets the custom effect used to render the particles\r\n     * @param blendMode Blend mode for which the effect should be retrieved\r\n     * @returns The effect\r\n     */\r\n    public getCustomEffect(blendMode: number = 0): Nullable<Effect> {\r\n        return this._customWrappers[blendMode]?.effect ?? this._customWrappers[0]!.effect;\r\n    }\r\n\r\n    private _getCustomDrawWrapper(blendMode: number = 0): Nullable<DrawWrapper> {\r\n        return this._customWrappers[blendMode] ?? this._customWrappers[0];\r\n    }\r\n\r\n    /**\r\n     * Sets the custom effect used to render the particles\r\n     * @param effect The effect to set\r\n     * @param blendMode Blend mode for which the effect should be set\r\n     */\r\n    public setCustomEffect(effect: Nullable<Effect>, blendMode: number = 0) {\r\n        this._customWrappers[blendMode] = new DrawWrapper(this._engine);\r\n        this._customWrappers[blendMode]!.effect = effect;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _onBeforeDrawParticlesObservable: Nullable<Observable<Nullable<Effect>>> = null;\r\n\r\n    /**\r\n     * Observable that will be called just before the particles are drawn\r\n     */\r\n    public get onBeforeDrawParticlesObservable(): Observable<Nullable<Effect>> {\r\n        if (!this._onBeforeDrawParticlesObservable) {\r\n            this._onBeforeDrawParticlesObservable = new Observable<Nullable<Effect>>();\r\n        }\r\n\r\n        return this._onBeforeDrawParticlesObservable;\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the particle vertex shader\r\n     */\r\n    public get vertexShaderName(): string {\r\n        return \"gpuRenderParticles\";\r\n    }\r\n\r\n    /**\r\n     * Gets the vertex buffers used by the particle system\r\n     * Should be called after render() has been called for the current frame so that the buffers returned are the ones that have been updated\r\n     * in the current frame (there's a ping-pong between two sets of buffers - for a given frame, one set is used as the source and the other as the destination)\r\n     */\r\n    public get vertexBuffers(): Immutable<{ [key: string]: VertexBuffer }> {\r\n        // We return the other buffers than those corresponding to this._targetIndex because it is assumed vertexBuffers will be called in the current frame\r\n        // after render() has been called, meaning that the buffers have already been swapped and this._targetIndex points to the buffers that will be updated\r\n        // in the next frame (and which are the sources in this frame) and (this._targetIndex ^ 1) points to the buffers that have been updated this frame\r\n        // (and that will be the source buffers in the next frame)\r\n        return this._renderVertexBuffers[this._targetIndex ^ 1];\r\n    }\r\n\r\n    /**\r\n     * Gets the index buffer used by the particle system (null for GPU particle systems)\r\n     */\r\n    public get indexBuffer(): Nullable<DataBuffer> {\r\n        return null;\r\n    }\r\n\r\n    /** @internal */\r\n    public _colorGradientsTexture: RawTexture;\r\n\r\n    protected _removeGradientAndTexture(gradient: number, gradients: Nullable<IValueGradient[]>, texture: RawTexture): BaseParticleSystem {\r\n        super._removeGradientAndTexture(gradient, gradients, texture);\r\n        this._releaseBuffers();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new color gradient\r\n     * @param gradient defines the gradient to use (between 0 and 1)\r\n     * @param color1 defines the color to affect to the specified gradient\r\n     * @returns the current particle system\r\n     */\r\n    public addColorGradient(gradient: number, color1: Color4): GPUParticleSystem {\r\n        if (!this._colorGradients) {\r\n            this._colorGradients = [];\r\n        }\r\n\r\n        const colorGradient = new ColorGradient(gradient, color1);\r\n        this._colorGradients.push(colorGradient);\r\n\r\n        this._refreshColorGradient(true);\r\n\r\n        this._releaseBuffers();\r\n\r\n        return this;\r\n    }\r\n\r\n    private _refreshColorGradient(reorder = false) {\r\n        if (this._colorGradients) {\r\n            if (reorder) {\r\n                this._colorGradients.sort((a, b) => {\r\n                    if (a.gradient < b.gradient) {\r\n                        return -1;\r\n                    } else if (a.gradient > b.gradient) {\r\n                        return 1;\r\n                    }\r\n\r\n                    return 0;\r\n                });\r\n            }\r\n\r\n            if (this._colorGradientsTexture) {\r\n                this._colorGradientsTexture.dispose();\r\n                (<any>this._colorGradientsTexture) = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Force the system to rebuild all gradients that need to be resync */\r\n    public forceRefreshGradients() {\r\n        this._refreshColorGradient();\r\n        this._refreshFactorGradient(this._sizeGradients, \"_sizeGradientsTexture\");\r\n        this._refreshFactorGradient(this._angularSpeedGradients, \"_angularSpeedGradientsTexture\");\r\n        this._refreshFactorGradient(this._velocityGradients, \"_velocityGradientsTexture\");\r\n        this._refreshFactorGradient(this._limitVelocityGradients, \"_limitVelocityGradientsTexture\");\r\n        this._refreshFactorGradient(this._dragGradients, \"_dragGradientsTexture\");\r\n\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Remove a specific color gradient\r\n     * @param gradient defines the gradient to remove\r\n     * @returns the current particle system\r\n     */\r\n    public removeColorGradient(gradient: number): GPUParticleSystem {\r\n        this._removeGradientAndTexture(gradient, this._colorGradients, this._colorGradientsTexture);\r\n        (<any>this._colorGradientsTexture) = null;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Resets the draw wrappers cache\r\n     */\r\n    public resetDrawCache(): void {\r\n        for (const blendMode in this._drawWrappers) {\r\n            const drawWrapper = this._drawWrappers[blendMode];\r\n            drawWrapper.drawContext?.reset();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _angularSpeedGradientsTexture: RawTexture;\r\n    /** @internal */\r\n    public _sizeGradientsTexture: RawTexture;\r\n    /** @internal */\r\n    public _velocityGradientsTexture: RawTexture;\r\n    /** @internal */\r\n    public _limitVelocityGradientsTexture: RawTexture;\r\n    /** @internal */\r\n    public _dragGradientsTexture: RawTexture;\r\n\r\n    private _addFactorGradient(factorGradients: FactorGradient[], gradient: number, factor: number) {\r\n        const valueGradient = new FactorGradient(gradient, factor);\r\n        factorGradients.push(valueGradient);\r\n\r\n        this._releaseBuffers();\r\n    }\r\n\r\n    /**\r\n     * Adds a new size gradient\r\n     * @param gradient defines the gradient to use (between 0 and 1)\r\n     * @param factor defines the size factor to affect to the specified gradient\r\n     * @returns the current particle system\r\n     */\r\n    public addSizeGradient(gradient: number, factor: number): GPUParticleSystem {\r\n        if (!this._sizeGradients) {\r\n            this._sizeGradients = [];\r\n        }\r\n\r\n        this._addFactorGradient(this._sizeGradients, gradient, factor);\r\n\r\n        this._refreshFactorGradient(this._sizeGradients, \"_sizeGradientsTexture\", true);\r\n\r\n        this._releaseBuffers();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific size gradient\r\n     * @param gradient defines the gradient to remove\r\n     * @returns the current particle system\r\n     */\r\n    public removeSizeGradient(gradient: number): GPUParticleSystem {\r\n        this._removeGradientAndTexture(gradient, this._sizeGradients, this._sizeGradientsTexture);\r\n        (<any>this._sizeGradientsTexture) = null;\r\n\r\n        return this;\r\n    }\r\n\r\n    private _refreshFactorGradient(factorGradients: Nullable<FactorGradient[]>, textureName: string, reorder = false) {\r\n        if (!factorGradients) {\r\n            return;\r\n        }\r\n\r\n        if (reorder) {\r\n            factorGradients.sort((a, b) => {\r\n                if (a.gradient < b.gradient) {\r\n                    return -1;\r\n                } else if (a.gradient > b.gradient) {\r\n                    return 1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n        }\r\n\r\n        const that = this as any;\r\n        if (that[textureName]) {\r\n            that[textureName].dispose();\r\n            that[textureName] = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a new angular speed gradient\r\n     * @param gradient defines the gradient to use (between 0 and 1)\r\n     * @param factor defines the angular speed to affect to the specified gradient\r\n     * @returns the current particle system\r\n     */\r\n    public addAngularSpeedGradient(gradient: number, factor: number): GPUParticleSystem {\r\n        if (!this._angularSpeedGradients) {\r\n            this._angularSpeedGradients = [];\r\n        }\r\n\r\n        this._addFactorGradient(this._angularSpeedGradients, gradient, factor);\r\n        this._refreshFactorGradient(this._angularSpeedGradients, \"_angularSpeedGradientsTexture\", true);\r\n\r\n        this._releaseBuffers();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific angular speed gradient\r\n     * @param gradient defines the gradient to remove\r\n     * @returns the current particle system\r\n     */\r\n    public removeAngularSpeedGradient(gradient: number): GPUParticleSystem {\r\n        this._removeGradientAndTexture(gradient, this._angularSpeedGradients, this._angularSpeedGradientsTexture);\r\n        (<any>this._angularSpeedGradientsTexture) = null;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new velocity gradient\r\n     * @param gradient defines the gradient to use (between 0 and 1)\r\n     * @param factor defines the velocity to affect to the specified gradient\r\n     * @returns the current particle system\r\n     */\r\n    public addVelocityGradient(gradient: number, factor: number): GPUParticleSystem {\r\n        if (!this._velocityGradients) {\r\n            this._velocityGradients = [];\r\n        }\r\n\r\n        this._addFactorGradient(this._velocityGradients, gradient, factor);\r\n        this._refreshFactorGradient(this._velocityGradients, \"_velocityGradientsTexture\", true);\r\n\r\n        this._releaseBuffers();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific velocity gradient\r\n     * @param gradient defines the gradient to remove\r\n     * @returns the current particle system\r\n     */\r\n    public removeVelocityGradient(gradient: number): GPUParticleSystem {\r\n        this._removeGradientAndTexture(gradient, this._velocityGradients, this._velocityGradientsTexture);\r\n        (<any>this._velocityGradientsTexture) = null;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new limit velocity gradient\r\n     * @param gradient defines the gradient to use (between 0 and 1)\r\n     * @param factor defines the limit velocity value to affect to the specified gradient\r\n     * @returns the current particle system\r\n     */\r\n    public addLimitVelocityGradient(gradient: number, factor: number): GPUParticleSystem {\r\n        if (!this._limitVelocityGradients) {\r\n            this._limitVelocityGradients = [];\r\n        }\r\n\r\n        this._addFactorGradient(this._limitVelocityGradients, gradient, factor);\r\n        this._refreshFactorGradient(this._limitVelocityGradients, \"_limitVelocityGradientsTexture\", true);\r\n\r\n        this._releaseBuffers();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific limit velocity gradient\r\n     * @param gradient defines the gradient to remove\r\n     * @returns the current particle system\r\n     */\r\n    public removeLimitVelocityGradient(gradient: number): GPUParticleSystem {\r\n        this._removeGradientAndTexture(gradient, this._limitVelocityGradients, this._limitVelocityGradientsTexture);\r\n        (<any>this._limitVelocityGradientsTexture) = null;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new drag gradient\r\n     * @param gradient defines the gradient to use (between 0 and 1)\r\n     * @param factor defines the drag value to affect to the specified gradient\r\n     * @returns the current particle system\r\n     */\r\n    public addDragGradient(gradient: number, factor: number): GPUParticleSystem {\r\n        if (!this._dragGradients) {\r\n            this._dragGradients = [];\r\n        }\r\n\r\n        this._addFactorGradient(this._dragGradients, gradient, factor);\r\n        this._refreshFactorGradient(this._dragGradients, \"_dragGradientsTexture\", true);\r\n\r\n        this._releaseBuffers();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific drag gradient\r\n     * @param gradient defines the gradient to remove\r\n     * @returns the current particle system\r\n     */\r\n    public removeDragGradient(gradient: number): GPUParticleSystem {\r\n        this._removeGradientAndTexture(gradient, this._dragGradients, this._dragGradientsTexture);\r\n        (<any>this._dragGradientsTexture) = null;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not supported by GPUParticleSystem\r\n     * @returns the current particle system\r\n     */\r\n    public addEmitRateGradient(): IParticleSystem {\r\n        // Do nothing as emit rate is not supported by GPUParticleSystem\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not supported by GPUParticleSystem\r\n     * @returns the current particle system\r\n     */\r\n    public removeEmitRateGradient(): IParticleSystem {\r\n        // Do nothing as emit rate is not supported by GPUParticleSystem\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not supported by GPUParticleSystem\r\n     * @returns the current particle system\r\n     */\r\n    public addStartSizeGradient(): IParticleSystem {\r\n        // Do nothing as start size is not supported by GPUParticleSystem\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not supported by GPUParticleSystem\r\n     * @returns the current particle system\r\n     */\r\n    public removeStartSizeGradient(): IParticleSystem {\r\n        // Do nothing as start size is not supported by GPUParticleSystem\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not supported by GPUParticleSystem\r\n     * @returns the current particle system\r\n     */\r\n    public addColorRemapGradient(): IParticleSystem {\r\n        // Do nothing as start size is not supported by GPUParticleSystem\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not supported by GPUParticleSystem\r\n     * @returns the current particle system\r\n     */\r\n    public removeColorRemapGradient(): IParticleSystem {\r\n        // Do nothing as start size is not supported by GPUParticleSystem\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not supported by GPUParticleSystem\r\n     * @returns the current particle system\r\n     */\r\n    public addAlphaRemapGradient(): IParticleSystem {\r\n        // Do nothing as start size is not supported by GPUParticleSystem\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not supported by GPUParticleSystem\r\n     * @returns the current particle system\r\n     */\r\n    public removeAlphaRemapGradient(): IParticleSystem {\r\n        // Do nothing as start size is not supported by GPUParticleSystem\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not supported by GPUParticleSystem\r\n     * @returns the current particle system\r\n     */\r\n    public addRampGradient(): IParticleSystem {\r\n        //Not supported by GPUParticleSystem\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not supported by GPUParticleSystem\r\n     * @returns the current particle system\r\n     */\r\n    public removeRampGradient(): IParticleSystem {\r\n        //Not supported by GPUParticleSystem\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not supported by GPUParticleSystem\r\n     * @returns the list of ramp gradients\r\n     */\r\n    public getRampGradients(): Nullable<Array<Color3Gradient>> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Not supported by GPUParticleSystem\r\n     * Gets or sets a boolean indicating that ramp gradients must be used\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/particles/particle_system/particle_system_intro#ramp-gradients\r\n     */\r\n    public get useRampGradients(): boolean {\r\n        //Not supported by GPUParticleSystem\r\n        return false;\r\n    }\r\n\r\n    public set useRampGradients(value: boolean) {\r\n        //Not supported by GPUParticleSystem\r\n    }\r\n\r\n    /**\r\n     * Not supported by GPUParticleSystem\r\n     * @returns the current particle system\r\n     */\r\n    public addLifeTimeGradient(): IParticleSystem {\r\n        //Not supported by GPUParticleSystem\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Not supported by GPUParticleSystem\r\n     * @returns the current particle system\r\n     */\r\n    public removeLifeTimeGradient(): IParticleSystem {\r\n        //Not supported by GPUParticleSystem\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a GPU particle system.\r\n     * Particles are often small sprites used to simulate hard-to-reproduce phenomena like fire, smoke, water, or abstract visual effects like magic glitter and faery dust.\r\n     * @param name The name of the particle system\r\n     * @param options The options used to create the system\r\n     * @param sceneOrEngine The scene the particle system belongs to or the engine to use if no scene\r\n     * @param customEffect a custom effect used to change the way particles are rendered by default\r\n     * @param isAnimationSheetEnabled Must be true if using a spritesheet to animate the particles texture\r\n     */\r\n    constructor(\r\n        name: string,\r\n        options: Partial<{\r\n            capacity: number;\r\n            randomTextureSize: number;\r\n        }>,\r\n        sceneOrEngine: Scene | ThinEngine,\r\n        customEffect: Nullable<Effect> = null,\r\n        isAnimationSheetEnabled: boolean = false\r\n    ) {\r\n        super(name);\r\n\r\n        if (!sceneOrEngine || sceneOrEngine.getClassName() === \"Scene\") {\r\n            this._scene = (sceneOrEngine as Scene) || EngineStore.LastCreatedScene;\r\n            this._engine = this._scene.getEngine();\r\n            this.uniqueId = this._scene.getUniqueId();\r\n            this._scene.particleSystems.push(this);\r\n        } else {\r\n            this._engine = sceneOrEngine as ThinEngine;\r\n            this.defaultProjectionMatrix = Matrix.PerspectiveFovLH(0.8, 1, 0.1, 100, this._engine.isNDCHalfZRange);\r\n        }\r\n\r\n        if (this._engine.getCaps().supportComputeShaders) {\r\n            if (!GetClass(\"BABYLON.ComputeShaderParticleSystem\")) {\r\n                throw new Error(\"The ComputeShaderParticleSystem class is not available! Make sure you have imported it.\");\r\n            }\r\n            this._platform = new (GetClass(\"BABYLON.ComputeShaderParticleSystem\") as any)(this, this._engine);\r\n        } else {\r\n            if (!GetClass(\"BABYLON.WebGL2ParticleSystem\")) {\r\n                throw new Error(\"The WebGL2ParticleSystem class is not available! Make sure you have imported it.\");\r\n            }\r\n            this._platform = new (GetClass(\"BABYLON.WebGL2ParticleSystem\") as any)(this, this._engine);\r\n        }\r\n\r\n        this._customWrappers = { 0: new DrawWrapper(this._engine) };\r\n        this._customWrappers[0]!.effect = customEffect;\r\n\r\n        this._drawWrappers = { 0: new DrawWrapper(this._engine) };\r\n        if (this._drawWrappers[0].drawContext) {\r\n            this._drawWrappers[0].drawContext.useInstancing = true;\r\n        }\r\n\r\n        // Setup the default processing configuration to the scene.\r\n        this._attachImageProcessingConfiguration(null);\r\n\r\n        options = options ?? {};\r\n\r\n        if (!options.randomTextureSize) {\r\n            delete options.randomTextureSize;\r\n        }\r\n\r\n        const fullOptions = {\r\n            capacity: 50000,\r\n            randomTextureSize: this._engine.getCaps().maxTextureSize,\r\n            ...options,\r\n        };\r\n\r\n        const optionsAsNumber = <number>options;\r\n        if (isFinite(optionsAsNumber)) {\r\n            fullOptions.capacity = optionsAsNumber;\r\n        }\r\n\r\n        this._capacity = fullOptions.capacity;\r\n        this._activeCount = fullOptions.capacity;\r\n        this._currentActiveCount = 0;\r\n        this._isAnimationSheetEnabled = isAnimationSheetEnabled;\r\n\r\n        this.particleEmitterType = new BoxParticleEmitter();\r\n\r\n        // Random data\r\n        const maxTextureSize = Math.min(this._engine.getCaps().maxTextureSize, fullOptions.randomTextureSize);\r\n        let d = [];\r\n        for (let i = 0; i < maxTextureSize; ++i) {\r\n            d.push(Math.random());\r\n            d.push(Math.random());\r\n            d.push(Math.random());\r\n            d.push(Math.random());\r\n        }\r\n        this._randomTexture = new RawTexture(\r\n            new Float32Array(d),\r\n            maxTextureSize,\r\n            1,\r\n            Constants.TEXTUREFORMAT_RGBA,\r\n            sceneOrEngine,\r\n            false,\r\n            false,\r\n            Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n            Constants.TEXTURETYPE_FLOAT\r\n        );\r\n        this._randomTexture.name = \"GPUParticleSystem_random1\";\r\n        this._randomTexture.wrapU = Constants.TEXTURE_WRAP_ADDRESSMODE;\r\n        this._randomTexture.wrapV = Constants.TEXTURE_WRAP_ADDRESSMODE;\r\n\r\n        d = [];\r\n        for (let i = 0; i < maxTextureSize; ++i) {\r\n            d.push(Math.random());\r\n            d.push(Math.random());\r\n            d.push(Math.random());\r\n            d.push(Math.random());\r\n        }\r\n        this._randomTexture2 = new RawTexture(\r\n            new Float32Array(d),\r\n            maxTextureSize,\r\n            1,\r\n            Constants.TEXTUREFORMAT_RGBA,\r\n            sceneOrEngine,\r\n            false,\r\n            false,\r\n            Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n            Constants.TEXTURETYPE_FLOAT\r\n        );\r\n        this._randomTexture2.name = \"GPUParticleSystem_random2\";\r\n        this._randomTexture2.wrapU = Constants.TEXTURE_WRAP_ADDRESSMODE;\r\n        this._randomTexture2.wrapV = Constants.TEXTURE_WRAP_ADDRESSMODE;\r\n\r\n        this._randomTextureSize = maxTextureSize;\r\n    }\r\n\r\n    protected _reset() {\r\n        this._releaseBuffers();\r\n    }\r\n\r\n    private _createVertexBuffers(updateBuffer: Buffer, renderBuffer: Buffer, spriteSource: Buffer): void {\r\n        const renderVertexBuffers: { [key: string]: VertexBuffer } = {};\r\n        renderVertexBuffers[\"position\"] = renderBuffer.createVertexBuffer(\"position\", 0, 3, this._attributesStrideSize, true);\r\n        let offset = 3;\r\n        renderVertexBuffers[\"age\"] = renderBuffer.createVertexBuffer(\"age\", offset, 1, this._attributesStrideSize, true);\r\n        offset += 1;\r\n        renderVertexBuffers[\"size\"] = renderBuffer.createVertexBuffer(\"size\", offset, 3, this._attributesStrideSize, true);\r\n        offset += 3;\r\n        renderVertexBuffers[\"life\"] = renderBuffer.createVertexBuffer(\"life\", offset, 1, this._attributesStrideSize, true);\r\n        offset += 1;\r\n        offset += 4; // seed\r\n        if (this.billboardMode === ParticleSystem.BILLBOARDMODE_STRETCHED) {\r\n            renderVertexBuffers[\"direction\"] = renderBuffer.createVertexBuffer(\"direction\", offset, 3, this._attributesStrideSize, true);\r\n        }\r\n        offset += 3; // direction\r\n        if (this._platform.alignDataInBuffer) {\r\n            offset += 1;\r\n        }\r\n\r\n        if (this.particleEmitterType instanceof CustomParticleEmitter) {\r\n            offset += 3;\r\n            if (this._platform.alignDataInBuffer) {\r\n                offset += 1;\r\n            }\r\n        }\r\n\r\n        if (!this._colorGradientsTexture) {\r\n            renderVertexBuffers[\"color\"] = renderBuffer.createVertexBuffer(\"color\", offset, 4, this._attributesStrideSize, true);\r\n            offset += 4;\r\n        }\r\n\r\n        if (!this._isBillboardBased) {\r\n            renderVertexBuffers[\"initialDirection\"] = renderBuffer.createVertexBuffer(\"initialDirection\", offset, 3, this._attributesStrideSize, true);\r\n            offset += 3;\r\n            if (this._platform.alignDataInBuffer) {\r\n                offset += 1;\r\n            }\r\n        }\r\n\r\n        if (this.noiseTexture) {\r\n            renderVertexBuffers[\"noiseCoordinates1\"] = renderBuffer.createVertexBuffer(\"noiseCoordinates1\", offset, 3, this._attributesStrideSize, true);\r\n            offset += 3;\r\n            if (this._platform.alignDataInBuffer) {\r\n                offset += 1;\r\n            }\r\n            renderVertexBuffers[\"noiseCoordinates2\"] = renderBuffer.createVertexBuffer(\"noiseCoordinates2\", offset, 3, this._attributesStrideSize, true);\r\n            offset += 3;\r\n            if (this._platform.alignDataInBuffer) {\r\n                offset += 1;\r\n            }\r\n        }\r\n\r\n        renderVertexBuffers[\"angle\"] = renderBuffer.createVertexBuffer(\"angle\", offset, 1, this._attributesStrideSize, true);\r\n        if (this._angularSpeedGradientsTexture) {\r\n            offset++;\r\n        } else {\r\n            offset += 2;\r\n        }\r\n\r\n        if (this._isAnimationSheetEnabled) {\r\n            renderVertexBuffers[\"cellIndex\"] = renderBuffer.createVertexBuffer(\"cellIndex\", offset, 1, this._attributesStrideSize, true);\r\n            offset += 1;\r\n            if (this.spriteRandomStartCell) {\r\n                renderVertexBuffers[\"cellStartOffset\"] = renderBuffer.createVertexBuffer(\"cellStartOffset\", offset, 1, this._attributesStrideSize, true);\r\n                offset += 1;\r\n            }\r\n        }\r\n\r\n        renderVertexBuffers[\"offset\"] = spriteSource.createVertexBuffer(\"offset\", 0, 2);\r\n        renderVertexBuffers[\"uv\"] = spriteSource.createVertexBuffer(\"uv\", 2, 2);\r\n\r\n        this._renderVertexBuffers.push(renderVertexBuffers);\r\n\r\n        this._platform.createVertexBuffers(updateBuffer, renderVertexBuffers);\r\n\r\n        this.resetDrawCache();\r\n    }\r\n\r\n    private _initialize(force = false): void {\r\n        if (this._buffer0 && !force) {\r\n            return;\r\n        }\r\n\r\n        const engine = this._engine;\r\n        const data = new Array<float>();\r\n\r\n        this._attributesStrideSize = 21;\r\n        this._targetIndex = 0;\r\n\r\n        if (this._platform.alignDataInBuffer) {\r\n            this._attributesStrideSize += 1;\r\n        }\r\n\r\n        if (this.particleEmitterType instanceof CustomParticleEmitter) {\r\n            this._attributesStrideSize += 3;\r\n            if (this._platform.alignDataInBuffer) {\r\n                this._attributesStrideSize += 1;\r\n            }\r\n        }\r\n\r\n        if (!this.isBillboardBased) {\r\n            this._attributesStrideSize += 3;\r\n            if (this._platform.alignDataInBuffer) {\r\n                this._attributesStrideSize += 1;\r\n            }\r\n        }\r\n\r\n        if (this._colorGradientsTexture) {\r\n            this._attributesStrideSize -= 4;\r\n        }\r\n\r\n        if (this._angularSpeedGradientsTexture) {\r\n            this._attributesStrideSize -= 1;\r\n        }\r\n\r\n        if (this._isAnimationSheetEnabled) {\r\n            this._attributesStrideSize += 1;\r\n            if (this.spriteRandomStartCell) {\r\n                this._attributesStrideSize += 1;\r\n            }\r\n        }\r\n\r\n        if (this.noiseTexture) {\r\n            this._attributesStrideSize += 6;\r\n            if (this._platform.alignDataInBuffer) {\r\n                this._attributesStrideSize += 2;\r\n            }\r\n        }\r\n\r\n        if (this._platform.alignDataInBuffer) {\r\n            this._attributesStrideSize += 3 - ((this._attributesStrideSize + 3) & 3); // round to multiple of 4\r\n        }\r\n\r\n        const usingCustomEmitter = this.particleEmitterType instanceof CustomParticleEmitter;\r\n        const tmpVector = TmpVectors.Vector3[0];\r\n\r\n        let offset = 0;\r\n        for (let particleIndex = 0; particleIndex < this._capacity; particleIndex++) {\r\n            // position\r\n            data.push(0.0);\r\n            data.push(0.0);\r\n            data.push(0.0);\r\n\r\n            // Age\r\n            data.push(0.0); // create the particle as a dead one to create a new one at start\r\n\r\n            // Size\r\n            data.push(0.0);\r\n            data.push(0.0);\r\n            data.push(0.0);\r\n\r\n            // life\r\n            data.push(0.0);\r\n\r\n            // Seed\r\n            data.push(Math.random());\r\n            data.push(Math.random());\r\n            data.push(Math.random());\r\n            data.push(Math.random());\r\n\r\n            // direction\r\n            if (usingCustomEmitter) {\r\n                (this.particleEmitterType as CustomParticleEmitter).particleDestinationGenerator(particleIndex, null, tmpVector);\r\n                data.push(tmpVector.x);\r\n                data.push(tmpVector.y);\r\n                data.push(tmpVector.z);\r\n            } else {\r\n                data.push(0.0);\r\n                data.push(0.0);\r\n                data.push(0.0);\r\n            }\r\n\r\n            if (this._platform.alignDataInBuffer) {\r\n                data.push(0.0); // dummy0\r\n            }\r\n\r\n            offset += 16; // position, age, size, life, seed, direction, dummy0\r\n\r\n            if (usingCustomEmitter) {\r\n                (this.particleEmitterType as CustomParticleEmitter).particlePositionGenerator(particleIndex, null, tmpVector);\r\n                data.push(tmpVector.x);\r\n                data.push(tmpVector.y);\r\n                data.push(tmpVector.z);\r\n                if (this._platform.alignDataInBuffer) {\r\n                    data.push(0.0); // dummy1\r\n                }\r\n                offset += 4;\r\n            }\r\n\r\n            if (!this._colorGradientsTexture) {\r\n                // color\r\n                data.push(0.0);\r\n                data.push(0.0);\r\n                data.push(0.0);\r\n                data.push(0.0);\r\n                offset += 4;\r\n            }\r\n\r\n            if (!this.isBillboardBased) {\r\n                // initialDirection\r\n                data.push(0.0);\r\n                data.push(0.0);\r\n                data.push(0.0);\r\n                if (this._platform.alignDataInBuffer) {\r\n                    data.push(0.0); // dummy2\r\n                }\r\n                offset += 4;\r\n            }\r\n\r\n            if (this.noiseTexture) {\r\n                // Random coordinates for reading into noise texture\r\n                data.push(Math.random());\r\n                data.push(Math.random());\r\n                data.push(Math.random());\r\n                if (this._platform.alignDataInBuffer) {\r\n                    data.push(0.0); // dummy3\r\n                }\r\n                data.push(Math.random());\r\n                data.push(Math.random());\r\n                data.push(Math.random());\r\n                if (this._platform.alignDataInBuffer) {\r\n                    data.push(0.0); // dummy4\r\n                }\r\n                offset += 8;\r\n            }\r\n\r\n            // angle\r\n            data.push(0.0);\r\n            offset += 1;\r\n\r\n            if (!this._angularSpeedGradientsTexture) {\r\n                data.push(0.0);\r\n                offset += 1;\r\n            }\r\n\r\n            if (this._isAnimationSheetEnabled) {\r\n                data.push(0.0);\r\n                offset += 1;\r\n                if (this.spriteRandomStartCell) {\r\n                    data.push(0.0);\r\n                    offset += 1;\r\n                }\r\n            }\r\n\r\n            if (this._platform.alignDataInBuffer) {\r\n                let numDummies = 3 - ((offset + 3) & 3);\r\n                offset += numDummies;\r\n                while (numDummies-- > 0) {\r\n                    data.push(0.0);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Sprite data\r\n        const spriteData = new Float32Array([0.5, 0.5, 1, 1, -0.5, 0.5, 0, 1, 0.5, -0.5, 1, 0, -0.5, -0.5, 0, 0]);\r\n\r\n        const bufferData1: DataArray | DataBuffer = this._platform.createParticleBuffer(data);\r\n        const bufferData2: DataArray | DataBuffer = this._platform.createParticleBuffer(data);\r\n\r\n        // Buffers\r\n        this._buffer0 = new Buffer(engine, bufferData1, false, this._attributesStrideSize);\r\n        this._buffer1 = new Buffer(engine, bufferData2, false, this._attributesStrideSize);\r\n        this._spriteBuffer = new Buffer(engine, spriteData, false, 4);\r\n\r\n        // Update & Render vertex buffers\r\n        this._renderVertexBuffers = [];\r\n        this._createVertexBuffers(this._buffer0, this._buffer1, this._spriteBuffer);\r\n        this._createVertexBuffers(this._buffer1, this._buffer0, this._spriteBuffer);\r\n\r\n        // Links\r\n        this._sourceBuffer = this._buffer0;\r\n        this._targetBuffer = this._buffer1;\r\n    }\r\n\r\n    /** @internal */\r\n    public _recreateUpdateEffect() {\r\n        let defines = this.particleEmitterType ? this.particleEmitterType.getEffectDefines() : \"\";\r\n\r\n        if (this._isBillboardBased) {\r\n            defines += \"\\n#define BILLBOARD\";\r\n        }\r\n\r\n        if (this._colorGradientsTexture) {\r\n            defines += \"\\n#define COLORGRADIENTS\";\r\n        }\r\n\r\n        if (this._sizeGradientsTexture) {\r\n            defines += \"\\n#define SIZEGRADIENTS\";\r\n        }\r\n\r\n        if (this._angularSpeedGradientsTexture) {\r\n            defines += \"\\n#define ANGULARSPEEDGRADIENTS\";\r\n        }\r\n\r\n        if (this._velocityGradientsTexture) {\r\n            defines += \"\\n#define VELOCITYGRADIENTS\";\r\n        }\r\n\r\n        if (this._limitVelocityGradientsTexture) {\r\n            defines += \"\\n#define LIMITVELOCITYGRADIENTS\";\r\n        }\r\n\r\n        if (this._dragGradientsTexture) {\r\n            defines += \"\\n#define DRAGGRADIENTS\";\r\n        }\r\n\r\n        if (this.isAnimationSheetEnabled) {\r\n            defines += \"\\n#define ANIMATESHEET\";\r\n            if (this.spriteRandomStartCell) {\r\n                defines += \"\\n#define ANIMATESHEETRANDOMSTART\";\r\n            }\r\n        }\r\n\r\n        if (this.noiseTexture) {\r\n            defines += \"\\n#define NOISE\";\r\n        }\r\n\r\n        if (this.isLocal) {\r\n            defines += \"\\n#define LOCAL\";\r\n        }\r\n\r\n        if (this._platform.isUpdateBufferCreated() && this._cachedUpdateDefines === defines) {\r\n            return true;\r\n        }\r\n\r\n        this._cachedUpdateDefines = defines;\r\n        this._updateBuffer = this._platform.createUpdateBuffer(defines);\r\n\r\n        return this._platform.isUpdateBufferReady();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getWrapper(blendMode: number): DrawWrapper {\r\n        const customWrapper = this._getCustomDrawWrapper(blendMode);\r\n\r\n        if (customWrapper?.effect) {\r\n            return customWrapper;\r\n        }\r\n\r\n        const defines: Array<string> = [];\r\n\r\n        this.fillDefines(defines, blendMode);\r\n\r\n        // Effect\r\n        let drawWrapper = this._drawWrappers[blendMode];\r\n        if (!drawWrapper) {\r\n            drawWrapper = new DrawWrapper(this._engine);\r\n            if (drawWrapper.drawContext) {\r\n                drawWrapper.drawContext.useInstancing = true;\r\n            }\r\n            this._drawWrappers[blendMode] = drawWrapper;\r\n        }\r\n\r\n        const join = defines.join(\"\\n\");\r\n        if (drawWrapper.defines !== join) {\r\n            const attributes: Array<string> = [];\r\n            const uniforms: Array<string> = [];\r\n            const samplers: Array<string> = [];\r\n\r\n            this.fillUniformsAttributesAndSamplerNames(uniforms, attributes, samplers);\r\n\r\n            drawWrapper.setEffect(this._engine.createEffect(\"gpuRenderParticles\", attributes, uniforms, samplers, join), join);\r\n        }\r\n\r\n        return drawWrapper;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _GetAttributeNamesOrOptions(hasColorGradients = false, isAnimationSheetEnabled = false, isBillboardBased = false, isBillboardStretched = false): string[] {\r\n        const attributeNamesOrOptions = [VertexBuffer.PositionKind, \"age\", \"life\", \"size\", \"angle\"];\r\n\r\n        if (!hasColorGradients) {\r\n            attributeNamesOrOptions.push(VertexBuffer.ColorKind);\r\n        }\r\n\r\n        if (isAnimationSheetEnabled) {\r\n            attributeNamesOrOptions.push(\"cellIndex\");\r\n        }\r\n\r\n        if (!isBillboardBased) {\r\n            attributeNamesOrOptions.push(\"initialDirection\");\r\n        }\r\n\r\n        if (!isBillboardStretched) {\r\n            attributeNamesOrOptions.push(\"direction\");\r\n        }\r\n\r\n        attributeNamesOrOptions.push(\"offset\", VertexBuffer.UVKind);\r\n\r\n        return attributeNamesOrOptions;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _GetEffectCreationOptions(isAnimationSheetEnabled = false, useLogarithmicDepth = false): string[] {\r\n        const effectCreationOption = [\"emitterWM\", \"worldOffset\", \"view\", \"projection\", \"colorDead\", \"invView\", \"translationPivot\", \"eyePosition\"];\r\n        addClipPlaneUniforms(effectCreationOption);\r\n\r\n        if (isAnimationSheetEnabled) {\r\n            effectCreationOption.push(\"sheetInfos\");\r\n        }\r\n        if (useLogarithmicDepth) {\r\n            effectCreationOption.push(\"logarithmicDepthConstant\");\r\n        }\r\n\r\n        return effectCreationOption;\r\n    }\r\n\r\n    /**\r\n     * Fill the defines array according to the current settings of the particle system\r\n     * @param defines Array to be updated\r\n     * @param blendMode blend mode to take into account when updating the array\r\n     */\r\n    public fillDefines(defines: Array<string>, blendMode: number = 0) {\r\n        if (this._scene) {\r\n            prepareDefinesForClipPlanes(this, this._scene, defines);\r\n        }\r\n\r\n        if (blendMode === ParticleSystem.BLENDMODE_MULTIPLY) {\r\n            defines.push(\"#define BLENDMULTIPLYMODE\");\r\n        }\r\n\r\n        if (this.isLocal) {\r\n            defines.push(\"#define LOCAL\");\r\n        }\r\n\r\n        if (this.useLogarithmicDepth) {\r\n            defines.push(\"#define LOGARITHMICDEPTH\");\r\n        }\r\n\r\n        if (this._isBillboardBased) {\r\n            defines.push(\"#define BILLBOARD\");\r\n\r\n            switch (this.billboardMode) {\r\n                case ParticleSystem.BILLBOARDMODE_Y:\r\n                    defines.push(\"#define BILLBOARDY\");\r\n                    break;\r\n                case ParticleSystem.BILLBOARDMODE_STRETCHED:\r\n                    defines.push(\"#define BILLBOARDSTRETCHED\");\r\n                    break;\r\n                case ParticleSystem.BILLBOARDMODE_ALL:\r\n                    defines.push(\"#define BILLBOARDMODE_ALL\");\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (this._colorGradientsTexture) {\r\n            defines.push(\"#define COLORGRADIENTS\");\r\n        }\r\n\r\n        if (this.isAnimationSheetEnabled) {\r\n            defines.push(\"#define ANIMATESHEET\");\r\n        }\r\n\r\n        if (this._imageProcessingConfiguration) {\r\n            this._imageProcessingConfiguration.prepareDefines(this._imageProcessingConfigurationDefines);\r\n            defines.push(\"\" + this._imageProcessingConfigurationDefines.toString());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fill the uniforms, attributes and samplers arrays according to the current settings of the particle system\r\n     * @param uniforms Uniforms array to fill\r\n     * @param attributes Attributes array to fill\r\n     * @param samplers Samplers array to fill\r\n     */\r\n    public fillUniformsAttributesAndSamplerNames(uniforms: Array<string>, attributes: Array<string>, samplers: Array<string>) {\r\n        attributes.push(\r\n            ...GPUParticleSystem._GetAttributeNamesOrOptions(\r\n                !!this._colorGradientsTexture,\r\n                this._isAnimationSheetEnabled,\r\n                this._isBillboardBased,\r\n                this._isBillboardBased && this.billboardMode === ParticleSystem.BILLBOARDMODE_STRETCHED\r\n            )\r\n        );\r\n\r\n        uniforms.push(...GPUParticleSystem._GetEffectCreationOptions(this._isAnimationSheetEnabled, this.useLogarithmicDepth));\r\n\r\n        samplers.push(\"diffuseSampler\", \"colorGradientSampler\");\r\n\r\n        if (this._imageProcessingConfiguration) {\r\n            ImageProcessingConfiguration.PrepareUniforms(uniforms, this._imageProcessingConfigurationDefines);\r\n            ImageProcessingConfiguration.PrepareSamplers(samplers, this._imageProcessingConfigurationDefines);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Animates the particle system for the current frame by emitting new particles and or animating the living ones.\r\n     * @param preWarm defines if we are in the pre-warmimg phase\r\n     */\r\n    public animate(preWarm = false): void {\r\n        this._timeDelta = this.updateSpeed * (preWarm ? this.preWarmStepOffset : this._scene?.getAnimationRatio() || 1);\r\n        this._actualFrame += this._timeDelta;\r\n\r\n        if (!this._stopped) {\r\n            if (this.targetStopDuration && this._actualFrame >= this.targetStopDuration) {\r\n                this.stop();\r\n            }\r\n        }\r\n\r\n        if (this.updateInAnimate) {\r\n            this._update();\r\n        }\r\n    }\r\n\r\n    private _createFactorGradientTexture(factorGradients: Nullable<IValueGradient[]>, textureName: string) {\r\n        const texture: RawTexture = (<any>this)[textureName];\r\n\r\n        if (!factorGradients || !factorGradients.length || texture) {\r\n            return;\r\n        }\r\n\r\n        const data = new Float32Array(this._rawTextureWidth);\r\n\r\n        for (let x = 0; x < this._rawTextureWidth; x++) {\r\n            const ratio = x / this._rawTextureWidth;\r\n\r\n            GradientHelper.GetCurrentGradient(ratio, factorGradients, (currentGradient, nextGradient, scale) => {\r\n                data[x] = Scalar.Lerp((<FactorGradient>currentGradient).factor1, (<FactorGradient>nextGradient).factor1, scale);\r\n            });\r\n        }\r\n\r\n        (<any>this)[textureName] = RawTexture.CreateRTexture(data, this._rawTextureWidth, 1, this._scene || this._engine, false, false, Constants.TEXTURE_NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    private _createSizeGradientTexture() {\r\n        this._createFactorGradientTexture(this._sizeGradients, \"_sizeGradientsTexture\");\r\n    }\r\n\r\n    private _createAngularSpeedGradientTexture() {\r\n        this._createFactorGradientTexture(this._angularSpeedGradients, \"_angularSpeedGradientsTexture\");\r\n    }\r\n\r\n    private _createVelocityGradientTexture() {\r\n        this._createFactorGradientTexture(this._velocityGradients, \"_velocityGradientsTexture\");\r\n    }\r\n\r\n    private _createLimitVelocityGradientTexture() {\r\n        this._createFactorGradientTexture(this._limitVelocityGradients, \"_limitVelocityGradientsTexture\");\r\n    }\r\n\r\n    private _createDragGradientTexture() {\r\n        this._createFactorGradientTexture(this._dragGradients, \"_dragGradientsTexture\");\r\n    }\r\n\r\n    private _createColorGradientTexture() {\r\n        if (!this._colorGradients || !this._colorGradients.length || this._colorGradientsTexture) {\r\n            return;\r\n        }\r\n\r\n        const data = new Uint8Array(this._rawTextureWidth * 4);\r\n        const tmpColor = TmpColors.Color4[0];\r\n\r\n        for (let x = 0; x < this._rawTextureWidth; x++) {\r\n            const ratio = x / this._rawTextureWidth;\r\n\r\n            GradientHelper.GetCurrentGradient(ratio, this._colorGradients, (currentGradient, nextGradient, scale) => {\r\n                Color4.LerpToRef((<ColorGradient>currentGradient).color1, (<ColorGradient>nextGradient).color1, scale, tmpColor);\r\n                data[x * 4] = tmpColor.r * 255;\r\n                data[x * 4 + 1] = tmpColor.g * 255;\r\n                data[x * 4 + 2] = tmpColor.b * 255;\r\n                data[x * 4 + 3] = tmpColor.a * 255;\r\n            });\r\n        }\r\n\r\n        this._colorGradientsTexture = RawTexture.CreateRGBATexture(data, this._rawTextureWidth, 1, this._scene, false, false, Constants.TEXTURE_NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    private _render(blendMode: number, emitterWM: Matrix): number {\r\n        // Enable render effect\r\n        const drawWrapper = this._getWrapper(blendMode);\r\n        const effect = drawWrapper.effect!;\r\n\r\n        this._engine.enableEffect(drawWrapper);\r\n        const viewMatrix = this._scene?.getViewMatrix() || Matrix.IdentityReadOnly;\r\n        effect.setMatrix(\"view\", viewMatrix);\r\n        effect.setMatrix(\"projection\", this.defaultProjectionMatrix ?? this._scene!.getProjectionMatrix());\r\n        effect.setTexture(\"diffuseSampler\", this.particleTexture);\r\n        effect.setVector2(\"translationPivot\", this.translationPivot);\r\n        effect.setVector3(\"worldOffset\", this.worldOffset);\r\n        if (this.isLocal) {\r\n            effect.setMatrix(\"emitterWM\", emitterWM);\r\n        }\r\n        if (this._colorGradientsTexture) {\r\n            effect.setTexture(\"colorGradientSampler\", this._colorGradientsTexture);\r\n        } else {\r\n            effect.setDirectColor4(\"colorDead\", this.colorDead);\r\n        }\r\n\r\n        if (this._isAnimationSheetEnabled && this.particleTexture) {\r\n            const baseSize = this.particleTexture.getBaseSize();\r\n            effect.setFloat3(\"sheetInfos\", this.spriteCellWidth / baseSize.width, this.spriteCellHeight / baseSize.height, baseSize.width / this.spriteCellWidth);\r\n        }\r\n\r\n        if (this._isBillboardBased && this._scene) {\r\n            const camera = this._scene.activeCamera!;\r\n            effect.setVector3(\"eyePosition\", camera.globalPosition);\r\n        }\r\n\r\n        const defines = effect.defines;\r\n\r\n        if (this._scene) {\r\n            bindClipPlane(effect, this, this._scene);\r\n        }\r\n\r\n        if (defines.indexOf(\"#define BILLBOARDMODE_ALL\") >= 0) {\r\n            const invView = viewMatrix.clone();\r\n            invView.invert();\r\n            effect.setMatrix(\"invView\", invView);\r\n        }\r\n\r\n        // Log. depth\r\n        if (this.useLogarithmicDepth && this._scene) {\r\n            MaterialHelper.BindLogDepth(defines, effect, this._scene);\r\n        }\r\n\r\n        // image processing\r\n        if (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.applyByPostProcess) {\r\n            this._imageProcessingConfiguration.bind(effect);\r\n        }\r\n\r\n        // Draw order\r\n        switch (blendMode) {\r\n            case ParticleSystem.BLENDMODE_ADD:\r\n                this._engine.setAlphaMode(Constants.ALPHA_ADD);\r\n                break;\r\n            case ParticleSystem.BLENDMODE_ONEONE:\r\n                this._engine.setAlphaMode(Constants.ALPHA_ONEONE);\r\n                break;\r\n            case ParticleSystem.BLENDMODE_STANDARD:\r\n                this._engine.setAlphaMode(Constants.ALPHA_COMBINE);\r\n                break;\r\n            case ParticleSystem.BLENDMODE_MULTIPLY:\r\n                this._engine.setAlphaMode(Constants.ALPHA_MULTIPLY);\r\n                break;\r\n        }\r\n\r\n        // Bind source VAO\r\n        this._platform.bindDrawBuffers(this._targetIndex, effect);\r\n\r\n        if (this._onBeforeDrawParticlesObservable) {\r\n            this._onBeforeDrawParticlesObservable.notifyObservers(effect);\r\n        }\r\n\r\n        // Render\r\n        this._engine.drawArraysType(Constants.MATERIAL_TriangleStripDrawMode, 0, 4, this._currentActiveCount);\r\n        this._engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n\r\n        return this._currentActiveCount;\r\n    }\r\n\r\n    /** @internal */\r\n    public _update(emitterWM?: Matrix): void {\r\n        if (!this.emitter) {\r\n            return;\r\n        }\r\n\r\n        if (!this._recreateUpdateEffect()) {\r\n            return;\r\n        }\r\n\r\n        if ((<AbstractMesh>this.emitter).position) {\r\n            const emitterMesh = <AbstractMesh>this.emitter;\r\n            emitterWM = emitterMesh.getWorldMatrix();\r\n        } else {\r\n            const emitterPosition = <Vector3>this.emitter;\r\n            emitterWM = TmpVectors.Matrix[0];\r\n            Matrix.TranslationToRef(emitterPosition.x, emitterPosition.y, emitterPosition.z, emitterWM);\r\n        }\r\n\r\n        this._platform.preUpdateParticleBuffer();\r\n\r\n        this._updateBuffer.setFloat(\"currentCount\", this._currentActiveCount);\r\n        this._updateBuffer.setFloat(\"timeDelta\", this._timeDelta);\r\n        this._updateBuffer.setFloat(\"stopFactor\", this._stopped ? 0 : 1);\r\n        this._updateBuffer.setInt(\"randomTextureSize\", this._randomTextureSize);\r\n        this._updateBuffer.setFloat2(\"lifeTime\", this.minLifeTime, this.maxLifeTime);\r\n        this._updateBuffer.setFloat2(\"emitPower\", this.minEmitPower, this.maxEmitPower);\r\n        if (!this._colorGradientsTexture) {\r\n            this._updateBuffer.setDirectColor4(\"color1\", this.color1);\r\n            this._updateBuffer.setDirectColor4(\"color2\", this.color2);\r\n        }\r\n        this._updateBuffer.setFloat2(\"sizeRange\", this.minSize, this.maxSize);\r\n        this._updateBuffer.setFloat4(\"scaleRange\", this.minScaleX, this.maxScaleX, this.minScaleY, this.maxScaleY);\r\n        this._updateBuffer.setFloat4(\"angleRange\", this.minAngularSpeed, this.maxAngularSpeed, this.minInitialRotation, this.maxInitialRotation);\r\n        this._updateBuffer.setVector3(\"gravity\", this.gravity);\r\n        if (this._limitVelocityGradientsTexture) {\r\n            this._updateBuffer.setFloat(\"limitVelocityDamping\", this.limitVelocityDamping);\r\n        }\r\n        if (this.particleEmitterType) {\r\n            this.particleEmitterType.applyToShader(this._updateBuffer);\r\n        }\r\n        if (this._isAnimationSheetEnabled) {\r\n            this._updateBuffer.setFloat4(\"cellInfos\", this.startSpriteCellID, this.endSpriteCellID, this.spriteCellChangeSpeed, this.spriteCellLoop ? 1 : 0);\r\n        }\r\n        if (this.noiseTexture) {\r\n            this._updateBuffer.setVector3(\"noiseStrength\", this.noiseStrength);\r\n        }\r\n        if (!this.isLocal) {\r\n            this._updateBuffer.setMatrix(\"emitterWM\", emitterWM);\r\n        }\r\n\r\n        this._platform.updateParticleBuffer(this._targetIndex, this._targetBuffer, this._currentActiveCount);\r\n\r\n        // Switch VAOs\r\n        this._targetIndex++;\r\n        if (this._targetIndex === 2) {\r\n            this._targetIndex = 0;\r\n        }\r\n\r\n        // Switch buffers\r\n        const tmpBuffer = this._sourceBuffer;\r\n        this._sourceBuffer = this._targetBuffer;\r\n        this._targetBuffer = tmpBuffer;\r\n    }\r\n\r\n    /**\r\n     * Renders the particle system in its current state\r\n     * @param preWarm defines if the system should only update the particles but not render them\r\n     * @param forceUpdateOnly if true, force to only update the particles and never display them (meaning, even if preWarm=false, when forceUpdateOnly=true the particles won't be displayed)\r\n     * @returns the current number of particles\r\n     */\r\n    public render(preWarm = false, forceUpdateOnly = false): number {\r\n        if (!this._started) {\r\n            return 0;\r\n        }\r\n\r\n        this._createColorGradientTexture();\r\n        this._createSizeGradientTexture();\r\n        this._createAngularSpeedGradientTexture();\r\n        this._createVelocityGradientTexture();\r\n        this._createLimitVelocityGradientTexture();\r\n        this._createDragGradientTexture();\r\n\r\n        if (!this.isReady()) {\r\n            return 0;\r\n        }\r\n\r\n        if (!preWarm && this._scene) {\r\n            if (!this._preWarmDone && this.preWarmCycles) {\r\n                for (let index = 0; index < this.preWarmCycles; index++) {\r\n                    this.animate(true);\r\n                    this.render(true, true);\r\n                }\r\n\r\n                this._preWarmDone = true;\r\n            }\r\n\r\n            if (\r\n                this._currentRenderId === this._scene.getFrameId() &&\r\n                (!this._scene.activeCamera || (this._scene.activeCamera && this._currentRenderingCameraUniqueId === this._scene.activeCamera.uniqueId))\r\n            ) {\r\n                return 0;\r\n            }\r\n\r\n            this._currentRenderId = this._scene.getFrameId();\r\n            if (this._scene.activeCamera) {\r\n                this._currentRenderingCameraUniqueId = this._scene.activeCamera.uniqueId;\r\n            }\r\n        }\r\n\r\n        // Get everything ready to render\r\n        this._initialize();\r\n\r\n        this._accumulatedCount += this.emitRate * this._timeDelta;\r\n        if (this._accumulatedCount > 1) {\r\n            const intPart = this._accumulatedCount | 0;\r\n            this._accumulatedCount -= intPart;\r\n            this._currentActiveCount = Math.min(this._activeCount, this._currentActiveCount + intPart);\r\n        }\r\n\r\n        if (!this._currentActiveCount) {\r\n            return 0;\r\n        }\r\n\r\n        // Enable update effect\r\n        let emitterWM: Matrix;\r\n        if ((<AbstractMesh>this.emitter).position) {\r\n            const emitterMesh = <AbstractMesh>this.emitter;\r\n            emitterWM = emitterMesh.getWorldMatrix();\r\n        } else {\r\n            const emitterPosition = <Vector3>this.emitter;\r\n            emitterWM = TmpVectors.Matrix[0];\r\n            Matrix.TranslationToRef(emitterPosition.x, emitterPosition.y, emitterPosition.z, emitterWM);\r\n        }\r\n\r\n        const engine = this._engine as Engine;\r\n\r\n        if (!this.updateInAnimate) {\r\n            this._update(emitterWM);\r\n        }\r\n\r\n        let outparticles = 0;\r\n        if (!preWarm && !forceUpdateOnly) {\r\n            engine.setState(false);\r\n\r\n            if (this.forceDepthWrite) {\r\n                engine.setDepthWrite(true);\r\n            }\r\n\r\n            if (this.blendMode === ParticleSystem.BLENDMODE_MULTIPLYADD) {\r\n                outparticles = this._render(ParticleSystem.BLENDMODE_MULTIPLY, emitterWM) + this._render(ParticleSystem.BLENDMODE_ADD, emitterWM);\r\n            } else {\r\n                outparticles = this._render(this.blendMode, emitterWM);\r\n            }\r\n\r\n            this._engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n        }\r\n\r\n        return outparticles;\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the particle system\r\n     */\r\n    public rebuild(): void {\r\n        this._initialize(true);\r\n    }\r\n\r\n    private _releaseBuffers() {\r\n        if (this._buffer0) {\r\n            this._buffer0.dispose();\r\n            (<any>this._buffer0) = null;\r\n        }\r\n        if (this._buffer1) {\r\n            this._buffer1.dispose();\r\n            (<any>this._buffer1) = null;\r\n        }\r\n        if (this._spriteBuffer) {\r\n            this._spriteBuffer.dispose();\r\n            (<any>this._spriteBuffer) = null;\r\n        }\r\n        this._platform.releaseBuffers();\r\n    }\r\n\r\n    /**\r\n     * Disposes the particle system and free the associated resources\r\n     * @param disposeTexture defines if the particule texture must be disposed as well (true by default)\r\n     */\r\n    public dispose(disposeTexture = true): void {\r\n        for (const blendMode in this._drawWrappers) {\r\n            const drawWrapper = this._drawWrappers[blendMode];\r\n            drawWrapper.dispose();\r\n        }\r\n\r\n        this._drawWrappers = {};\r\n\r\n        if (this._scene) {\r\n            const index = this._scene.particleSystems.indexOf(this);\r\n            if (index > -1) {\r\n                this._scene.particleSystems.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        this._releaseBuffers();\r\n        this._platform.releaseVertexBuffers();\r\n\r\n        for (let i = 0; i < this._renderVertexBuffers.length; ++i) {\r\n            const rvb = this._renderVertexBuffers[i];\r\n            for (const key in rvb) {\r\n                rvb[key].dispose();\r\n            }\r\n        }\r\n\r\n        this._renderVertexBuffers = [];\r\n\r\n        if (this._colorGradientsTexture) {\r\n            this._colorGradientsTexture.dispose();\r\n            (<any>this._colorGradientsTexture) = null;\r\n        }\r\n\r\n        if (this._sizeGradientsTexture) {\r\n            this._sizeGradientsTexture.dispose();\r\n            (<any>this._sizeGradientsTexture) = null;\r\n        }\r\n\r\n        if (this._angularSpeedGradientsTexture) {\r\n            this._angularSpeedGradientsTexture.dispose();\r\n            (<any>this._angularSpeedGradientsTexture) = null;\r\n        }\r\n\r\n        if (this._velocityGradientsTexture) {\r\n            this._velocityGradientsTexture.dispose();\r\n            (<any>this._velocityGradientsTexture) = null;\r\n        }\r\n\r\n        if (this._limitVelocityGradientsTexture) {\r\n            this._limitVelocityGradientsTexture.dispose();\r\n            (<any>this._limitVelocityGradientsTexture) = null;\r\n        }\r\n\r\n        if (this._dragGradientsTexture) {\r\n            this._dragGradientsTexture.dispose();\r\n            (<any>this._dragGradientsTexture) = null;\r\n        }\r\n\r\n        if (this._randomTexture) {\r\n            this._randomTexture.dispose();\r\n            (<any>this._randomTexture) = null;\r\n        }\r\n\r\n        if (this._randomTexture2) {\r\n            this._randomTexture2.dispose();\r\n            (<any>this._randomTexture2) = null;\r\n        }\r\n\r\n        if (disposeTexture && this.particleTexture) {\r\n            this.particleTexture.dispose();\r\n            this.particleTexture = null;\r\n        }\r\n\r\n        if (disposeTexture && this.noiseTexture) {\r\n            this.noiseTexture.dispose();\r\n            this.noiseTexture = null;\r\n        }\r\n\r\n        // Callback\r\n        this.onStoppedObservable.clear();\r\n        this.onDisposeObservable.notifyObservers(this);\r\n        this.onDisposeObservable.clear();\r\n    }\r\n    /**\r\n     * Clones the particle system.\r\n     * @param name The name of the cloned object\r\n     * @param newEmitter The new emitter to use\r\n     * @param cloneTexture Also clone the textures if true\r\n     * @returns the cloned particle system\r\n     */\r\n    public clone(name: string, newEmitter: any, cloneTexture = false): GPUParticleSystem {\r\n        const custom = { ...this._customWrappers };\r\n        let program: any = null;\r\n        const engine = this._engine as any;\r\n        if (engine.createEffectForParticles) {\r\n            if (this.customShader != null) {\r\n                program = this.customShader;\r\n                const defines: string = program.shaderOptions.defines.length > 0 ? program.shaderOptions.defines.join(\"\\n\") : \"\";\r\n                custom[0] = engine.createEffectForParticles(\r\n                    program.shaderPath.fragmentElement,\r\n                    program.shaderOptions.uniforms,\r\n                    program.shaderOptions.samplers,\r\n                    defines,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    this\r\n                );\r\n            }\r\n        }\r\n\r\n        const serialization = this.serialize(cloneTexture);\r\n        const result = GPUParticleSystem.Parse(serialization, this._scene || this._engine, this._rootUrl);\r\n        result.name = name;\r\n        result.customShader = program;\r\n        result._customWrappers = custom;\r\n\r\n        if (newEmitter === undefined) {\r\n            newEmitter = this.emitter;\r\n        }\r\n\r\n        if (this.noiseTexture) {\r\n            result.noiseTexture = this.noiseTexture.clone();\r\n        }\r\n\r\n        result.emitter = newEmitter;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Serializes the particle system to a JSON object\r\n     * @param serializeTexture defines if the texture must be serialized as well\r\n     * @returns the JSON object\r\n     */\r\n    public serialize(serializeTexture = false): any {\r\n        const serializationObject: any = {};\r\n\r\n        ParticleSystem._Serialize(serializationObject, this, serializeTexture);\r\n\r\n        serializationObject.activeParticleCount = this.activeParticleCount;\r\n        serializationObject.randomTextureSize = this._randomTextureSize;\r\n        serializationObject.customShader = this.customShader;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parses a JSON object to create a GPU particle system.\r\n     * @param parsedParticleSystem The JSON object to parse\r\n     * @param sceneOrEngine The scene or the engine to create the particle system in\r\n     * @param rootUrl The root url to use to load external dependencies like texture\r\n     * @param doNotStart Ignore the preventAutoStart attribute and does not start\r\n     * @param capacity defines the system capacity (if null or undefined the sotred capacity will be used)\r\n     * @returns the parsed GPU particle system\r\n     */\r\n    public static Parse(parsedParticleSystem: any, sceneOrEngine: Scene | ThinEngine, rootUrl: string, doNotStart = false, capacity?: number): GPUParticleSystem {\r\n        const name = parsedParticleSystem.name;\r\n        let engine: ThinEngine;\r\n        let scene: Nullable<Scene>;\r\n\r\n        if (sceneOrEngine instanceof ThinEngine) {\r\n            engine = sceneOrEngine;\r\n        } else {\r\n            scene = sceneOrEngine as Scene;\r\n            engine = scene.getEngine();\r\n        }\r\n\r\n        const particleSystem = new GPUParticleSystem(\r\n            name,\r\n            { capacity: capacity || parsedParticleSystem.capacity, randomTextureSize: parsedParticleSystem.randomTextureSize },\r\n            sceneOrEngine,\r\n            null,\r\n            parsedParticleSystem.isAnimationSheetEnabled\r\n        );\r\n        particleSystem._rootUrl = rootUrl;\r\n\r\n        if (parsedParticleSystem.customShader && (engine as any).createEffectForParticles) {\r\n            const program = parsedParticleSystem.customShader;\r\n            const defines: string = program.shaderOptions.defines.length > 0 ? program.shaderOptions.defines.join(\"\\n\") : \"\";\r\n            const custom: Nullable<Effect> = (engine as any).createEffectForParticles(\r\n                program.shaderPath.fragmentElement,\r\n                program.shaderOptions.uniforms,\r\n                program.shaderOptions.samplers,\r\n                defines,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                particleSystem\r\n            );\r\n            particleSystem.setCustomEffect(custom, 0);\r\n            particleSystem.customShader = program;\r\n        }\r\n\r\n        if (parsedParticleSystem.id) {\r\n            particleSystem.id = parsedParticleSystem.id;\r\n        }\r\n\r\n        if (parsedParticleSystem.activeParticleCount) {\r\n            particleSystem.activeParticleCount = parsedParticleSystem.activeParticleCount;\r\n        }\r\n\r\n        ParticleSystem._Parse(parsedParticleSystem, particleSystem, sceneOrEngine, rootUrl);\r\n\r\n        // Auto start\r\n        if (parsedParticleSystem.preventAutoStart) {\r\n            particleSystem.preventAutoStart = parsedParticleSystem.preventAutoStart;\r\n        }\r\n\r\n        if (!doNotStart && !particleSystem.preventAutoStart) {\r\n            particleSystem.start();\r\n        }\r\n\r\n        return particleSystem;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}