{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Action } from \"./action.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * This defines an action responsible to toggle a boolean once triggered.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\n */\nexport class SwitchBooleanAction extends Action {\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param target defines the object containing the boolean\n   * @param propertyPath defines the path to the boolean property in the target object\n   * @param condition defines the trigger related conditions\n   */\n  constructor(triggerOptions, target, propertyPath, condition) {\n    super(triggerOptions, condition);\n    this.propertyPath = propertyPath;\n    this._target = this._effectiveTarget = target;\n  }\n  /** @internal */\n  _prepare() {\n    this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\n    this._property = this._getProperty(this.propertyPath);\n  }\n  /**\n   * Execute the action toggle the boolean value.\n   */\n  execute() {\n    this._effectiveTarget[this._property] = !this._effectiveTarget[this._property];\n  }\n  /**\n   * Serializes the actions and its related information.\n   * @param parent defines the object to serialize in\n   * @returns the serialized object\n   */\n  serialize(parent) {\n    return super._serialize({\n      name: \"SwitchBooleanAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"propertyPath\",\n        value: this.propertyPath\n      }]\n    }, parent);\n  }\n}\n/**\n * This defines an action responsible to set a the state field of the target\n *  to a desired value once triggered.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\n */\nexport class SetStateAction extends Action {\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param target defines the object containing the state property\n   * @param value defines the value to store in the state field\n   * @param condition defines the trigger related conditions\n   */\n  constructor(triggerOptions, target, value, condition) {\n    super(triggerOptions, condition);\n    this.value = value;\n    this._target = target;\n  }\n  /**\n   * Execute the action and store the value on the target state property.\n   */\n  execute() {\n    this._target.state = this.value;\n  }\n  /**\n   * Serializes the actions and its related information.\n   * @param parent defines the object to serialize in\n   * @returns the serialized object\n   */\n  serialize(parent) {\n    return super._serialize({\n      name: \"SetStateAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"value\",\n        value: this.value\n      }]\n    }, parent);\n  }\n}\n/**\n * This defines an action responsible to set a property of the target\n *  to a desired value once triggered.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\n */\nexport class SetValueAction extends Action {\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param target defines the object containing the property\n   * @param propertyPath defines the path of the property to set in the target\n   * @param value defines the value to set in the property\n   * @param condition defines the trigger related conditions\n   */\n  constructor(triggerOptions, target, propertyPath, value, condition) {\n    super(triggerOptions, condition);\n    this.propertyPath = propertyPath;\n    this.value = value;\n    this._target = this._effectiveTarget = target;\n  }\n  /** @internal */\n  _prepare() {\n    this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\n    this._property = this._getProperty(this.propertyPath);\n  }\n  /**\n   * Execute the action and set the targeted property to the desired value.\n   */\n  execute() {\n    this._effectiveTarget[this._property] = this.value;\n    if (this._target.markAsDirty) {\n      this._target.markAsDirty(this._property);\n    }\n  }\n  /**\n   * Serializes the actions and its related information.\n   * @param parent defines the object to serialize in\n   * @returns the serialized object\n   */\n  serialize(parent) {\n    return super._serialize({\n      name: \"SetValueAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"propertyPath\",\n        value: this.propertyPath\n      }, {\n        name: \"value\",\n        value: Action._SerializeValueAsString(this.value)\n      }]\n    }, parent);\n  }\n}\n/**\n * This defines an action responsible to increment the target value\n *  to a desired value once triggered.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\n */\nexport class IncrementValueAction extends Action {\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param target defines the object containing the property\n   * @param propertyPath defines the path of the property to increment in the target\n   * @param value defines the value value we should increment the property by\n   * @param condition defines the trigger related conditions\n   */\n  constructor(triggerOptions, target, propertyPath, value, condition) {\n    super(triggerOptions, condition);\n    this.propertyPath = propertyPath;\n    this.value = value;\n    this._target = this._effectiveTarget = target;\n  }\n  /** @internal */\n  _prepare() {\n    this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\n    this._property = this._getProperty(this.propertyPath);\n    if (typeof this._effectiveTarget[this._property] !== \"number\") {\n      Logger.Warn(\"Warning: IncrementValueAction can only be used with number values\");\n    }\n  }\n  /**\n   * Execute the action and increment the target of the value amount.\n   */\n  execute() {\n    this._effectiveTarget[this._property] += this.value;\n    if (this._target.markAsDirty) {\n      this._target.markAsDirty(this._property);\n    }\n  }\n  /**\n   * Serializes the actions and its related information.\n   * @param parent defines the object to serialize in\n   * @returns the serialized object\n   */\n  serialize(parent) {\n    return super._serialize({\n      name: \"IncrementValueAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"propertyPath\",\n        value: this.propertyPath\n      }, {\n        name: \"value\",\n        value: Action._SerializeValueAsString(this.value)\n      }]\n    }, parent);\n  }\n}\n/**\n * This defines an action responsible to start an animation once triggered.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\n */\nexport class PlayAnimationAction extends Action {\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param target defines the target animation or animation name\n   * @param from defines from where the animation should start (animation frame)\n   * @param to defines where the animation should stop (animation frame)\n   * @param loop defines if the animation should loop or stop after the first play\n   * @param condition defines the trigger related conditions\n   */\n  constructor(triggerOptions, target, from, to, loop, condition) {\n    super(triggerOptions, condition);\n    this.from = from;\n    this.to = to;\n    this.loop = loop;\n    this._target = target;\n  }\n  /** @internal */\n  _prepare() {}\n  /**\n   * Execute the action and play the animation.\n   */\n  execute() {\n    const scene = this._actionManager.getScene();\n    scene.beginAnimation(this._target, this.from, this.to, this.loop);\n  }\n  /**\n   * Serializes the actions and its related information.\n   * @param parent defines the object to serialize in\n   * @returns the serialized object\n   */\n  serialize(parent) {\n    return super._serialize({\n      name: \"PlayAnimationAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"from\",\n        value: String(this.from)\n      }, {\n        name: \"to\",\n        value: String(this.to)\n      }, {\n        name: \"loop\",\n        value: Action._SerializeValueAsString(this.loop) || false\n      }]\n    }, parent);\n  }\n}\n/**\n * This defines an action responsible to stop an animation once triggered.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\n */\nexport class StopAnimationAction extends Action {\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param target defines the target animation or animation name\n   * @param condition defines the trigger related conditions\n   */\n  constructor(triggerOptions, target, condition) {\n    super(triggerOptions, condition);\n    this._target = target;\n  }\n  /** @internal */\n  _prepare() {}\n  /**\n   * Execute the action and stop the animation.\n   */\n  execute() {\n    const scene = this._actionManager.getScene();\n    scene.stopAnimation(this._target);\n  }\n  /**\n   * Serializes the actions and its related information.\n   * @param parent defines the object to serialize in\n   * @returns the serialized object\n   */\n  serialize(parent) {\n    return super._serialize({\n      name: \"StopAnimationAction\",\n      properties: [Action._GetTargetProperty(this._target)]\n    }, parent);\n  }\n}\n/**\n * This defines an action responsible that does nothing once triggered.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\n */\nexport class DoNothingAction extends Action {\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param condition defines the trigger related conditions\n   */\n  constructor(triggerOptions = 0, condition) {\n    super(triggerOptions, condition);\n  }\n  /**\n   * Execute the action and do nothing.\n   */\n  execute() {}\n  /**\n   * Serializes the actions and its related information.\n   * @param parent defines the object to serialize in\n   * @returns the serialized object\n   */\n  serialize(parent) {\n    return super._serialize({\n      name: \"DoNothingAction\",\n      properties: []\n    }, parent);\n  }\n}\n/**\n * This defines an action responsible to trigger several actions once triggered.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\n */\nexport class CombineAction extends Action {\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param children defines the list of aggregated animations to run\n   * @param condition defines the trigger related conditions\n   * @param enableChildrenConditions defines if the children actions conditions should be check before execution\n   */\n  constructor(triggerOptions, children, condition, enableChildrenConditions = true) {\n    super(triggerOptions, condition);\n    this.children = children;\n    this.enableChildrenConditions = enableChildrenConditions;\n  }\n  /** @internal */\n  _prepare() {\n    for (let index = 0; index < this.children.length; index++) {\n      this.children[index]._actionManager = this._actionManager;\n      this.children[index]._prepare();\n    }\n  }\n  /**\n   * Execute the action and executes all the aggregated actions.\n   * @param evt\n   */\n  execute(evt) {\n    for (const action of this.children) {\n      if (!this.enableChildrenConditions || action._evaluateConditionForCurrentFrame()) {\n        action.execute(evt);\n      }\n    }\n  }\n  /**\n   * Serializes the actions and its related information.\n   * @param parent defines the object to serialize in\n   * @returns the serialized object\n   */\n  serialize(parent) {\n    const serializationObject = super._serialize({\n      name: \"CombineAction\",\n      properties: [],\n      combine: []\n    }, parent);\n    for (let i = 0; i < this.children.length; i++) {\n      serializationObject.combine.push(this.children[i].serialize(null));\n    }\n    return serializationObject;\n  }\n}\n/**\n * This defines an action responsible to run code (external event) once triggered.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\n */\nexport class ExecuteCodeAction extends Action {\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param func defines the callback function to run\n   * @param condition defines the trigger related conditions\n   */\n  constructor(triggerOptions, func, condition) {\n    super(triggerOptions, condition);\n    this.func = func;\n  }\n  /**\n   * Execute the action and run the attached code.\n   * @param evt\n   */\n  execute(evt) {\n    this.func(evt);\n  }\n}\n/**\n * This defines an action responsible to set the parent property of the target once triggered.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\n */\nexport class SetParentAction extends Action {\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param target defines the target containing the parent property\n   * @param parent defines from where the animation should start (animation frame)\n   * @param condition defines the trigger related conditions\n   */\n  constructor(triggerOptions, target, parent, condition) {\n    super(triggerOptions, condition);\n    this._target = target;\n    this._parent = parent;\n  }\n  /** @internal */\n  _prepare() {}\n  /**\n   * Execute the action and set the parent property.\n   */\n  execute() {\n    if (this._target.parent === this._parent) {\n      return;\n    }\n    const invertParentWorldMatrix = this._parent.getWorldMatrix().clone();\n    invertParentWorldMatrix.invert();\n    this._target.position = Vector3.TransformCoordinates(this._target.position, invertParentWorldMatrix);\n    this._target.parent = this._parent;\n  }\n  /**\n   * Serializes the actions and its related information.\n   * @param parent defines the object to serialize in\n   * @returns the serialized object\n   */\n  serialize(parent) {\n    return super._serialize({\n      name: \"SetParentAction\",\n      properties: [Action._GetTargetProperty(this._target), Action._GetTargetProperty(this._parent)]\n    }, parent);\n  }\n}\nRegisterClass(\"BABYLON.SetParentAction\", SetParentAction);\nRegisterClass(\"BABYLON.ExecuteCodeAction\", ExecuteCodeAction);\nRegisterClass(\"BABYLON.DoNothingAction\", DoNothingAction);\nRegisterClass(\"BABYLON.StopAnimationAction\", StopAnimationAction);\nRegisterClass(\"BABYLON.PlayAnimationAction\", PlayAnimationAction);\nRegisterClass(\"BABYLON.IncrementValueAction\", IncrementValueAction);\nRegisterClass(\"BABYLON.SetValueAction\", SetValueAction);\nRegisterClass(\"BABYLON.SetStateAction\", SetStateAction);\nRegisterClass(\"BABYLON.SetParentAction\", SetParentAction);\nRegisterClass(\"BABYLON.SwitchBooleanAction\", SwitchBooleanAction);\nRegisterClass(\"BABYLON.CombineAction\", CombineAction);","map":{"version":3,"mappings":"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","names":["Logger","Vector3","Action","RegisterClass","SwitchBooleanAction","constructor","triggerOptions","target","propertyPath","condition","_target","_effectiveTarget","_prepare","_getEffectiveTarget","_property","_getProperty","execute","serialize","parent","_serialize","name","properties","_GetTargetProperty","value","SetStateAction","state","SetValueAction","markAsDirty","_SerializeValueAsString","IncrementValueAction","Warn","PlayAnimationAction","from","to","loop","scene","_actionManager","getScene","beginAnimation","String","StopAnimationAction","stopAnimation","DoNothingAction","CombineAction","children","enableChildrenConditions","index","length","evt","action","_evaluateConditionForCurrentFrame","serializationObject","combine","i","push","ExecuteCodeAction","func","SetParentAction","_parent","invertParentWorldMatrix","getWorldMatrix","clone","invert","position","TransformCoordinates"],"sourceRoot":"","sources":["../../../../lts/core/generated/Actions/directActions.ts"],"sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Action } from \"./action\";\r\nimport type { Condition } from \"./condition\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\ndeclare type ActionEvent = import(\"./actionEvent\").ActionEvent;\r\n\r\n/**\r\n * This defines an action responsible to toggle a boolean once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class SwitchBooleanAction extends Action {\r\n    /**\r\n     * The path to the boolean property in the target object\r\n     */\r\n    public propertyPath: string;\r\n\r\n    private _target: any;\r\n    private _effectiveTarget: any;\r\n    private _property: string;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the object containing the boolean\r\n     * @param propertyPath defines the path to the boolean property in the target object\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, propertyPath: string, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.propertyPath = propertyPath;\r\n        this._target = this._effectiveTarget = target;\r\n    }\r\n\r\n    /** @internal */\r\n    public _prepare(): void {\r\n        this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\r\n        this._property = this._getProperty(this.propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Execute the action toggle the boolean value.\r\n     */\r\n    public execute(): void {\r\n        this._effectiveTarget[this._property] = !this._effectiveTarget[this._property];\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"SwitchBooleanAction\",\r\n                properties: [Action._GetTargetProperty(this._target), { name: \"propertyPath\", value: this.propertyPath }],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to set a the state field of the target\r\n *  to a desired value once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class SetStateAction extends Action {\r\n    /**\r\n     * The value to store in the state field.\r\n     */\r\n    public value: string;\r\n\r\n    private _target: any;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the object containing the state property\r\n     * @param value defines the value to store in the state field\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, value: string, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.value = value;\r\n        this._target = target;\r\n    }\r\n\r\n    /**\r\n     * Execute the action and store the value on the target state property.\r\n     */\r\n    public execute(): void {\r\n        this._target.state = this.value;\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"SetStateAction\",\r\n                properties: [Action._GetTargetProperty(this._target), { name: \"value\", value: this.value }],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to set a property of the target\r\n *  to a desired value once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class SetValueAction extends Action {\r\n    /**\r\n     * The path of the property to set in the target.\r\n     */\r\n    public propertyPath: string;\r\n\r\n    /**\r\n     * The value to set in the property\r\n     */\r\n    public value: any;\r\n\r\n    private _target: any;\r\n    private _effectiveTarget: any;\r\n    private _property: string;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the object containing the property\r\n     * @param propertyPath defines the path of the property to set in the target\r\n     * @param value defines the value to set in the property\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, propertyPath: string, value: any, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.propertyPath = propertyPath;\r\n        this.value = value;\r\n        this._target = this._effectiveTarget = target;\r\n    }\r\n\r\n    /** @internal */\r\n    public _prepare(): void {\r\n        this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\r\n        this._property = this._getProperty(this.propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Execute the action and set the targeted property to the desired value.\r\n     */\r\n    public execute(): void {\r\n        this._effectiveTarget[this._property] = this.value;\r\n\r\n        if (this._target.markAsDirty) {\r\n            this._target.markAsDirty(this._property);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"SetValueAction\",\r\n                properties: [\r\n                    Action._GetTargetProperty(this._target),\r\n                    { name: \"propertyPath\", value: this.propertyPath },\r\n                    { name: \"value\", value: Action._SerializeValueAsString(this.value) },\r\n                ],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to increment the target value\r\n *  to a desired value once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class IncrementValueAction extends Action {\r\n    /**\r\n     * The path of the property to increment in the target.\r\n     */\r\n    public propertyPath: string;\r\n\r\n    /**\r\n     * The value we should increment the property by.\r\n     */\r\n    public value: any;\r\n\r\n    private _target: any;\r\n    private _effectiveTarget: any;\r\n    private _property: string;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the object containing the property\r\n     * @param propertyPath defines the path of the property to increment in the target\r\n     * @param value defines the value value we should increment the property by\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, propertyPath: string, value: any, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.propertyPath = propertyPath;\r\n        this.value = value;\r\n        this._target = this._effectiveTarget = target;\r\n    }\r\n\r\n    /** @internal */\r\n    public _prepare(): void {\r\n        this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\r\n        this._property = this._getProperty(this.propertyPath);\r\n\r\n        if (typeof this._effectiveTarget[this._property] !== \"number\") {\r\n            Logger.Warn(\"Warning: IncrementValueAction can only be used with number values\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute the action and increment the target of the value amount.\r\n     */\r\n    public execute(): void {\r\n        this._effectiveTarget[this._property] += this.value;\r\n\r\n        if (this._target.markAsDirty) {\r\n            this._target.markAsDirty(this._property);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"IncrementValueAction\",\r\n                properties: [\r\n                    Action._GetTargetProperty(this._target),\r\n                    { name: \"propertyPath\", value: this.propertyPath },\r\n                    { name: \"value\", value: Action._SerializeValueAsString(this.value) },\r\n                ],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to start an animation once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class PlayAnimationAction extends Action {\r\n    /**\r\n     * Where the animation should start (animation frame)\r\n     */\r\n    public from: number;\r\n\r\n    /**\r\n     * Where the animation should stop (animation frame)\r\n     */\r\n    public to: number;\r\n\r\n    /**\r\n     * Define if the animation should loop or stop after the first play.\r\n     */\r\n    public loop?: boolean;\r\n\r\n    private _target: any;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the target animation or animation name\r\n     * @param from defines from where the animation should start (animation frame)\r\n     * @param to defines where the animation should stop (animation frame)\r\n     * @param loop defines if the animation should loop or stop after the first play\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, from: number, to: number, loop?: boolean, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.from = from;\r\n        this.to = to;\r\n        this.loop = loop;\r\n        this._target = target;\r\n    }\r\n\r\n    /** @internal */\r\n    public _prepare(): void {}\r\n\r\n    /**\r\n     * Execute the action and play the animation.\r\n     */\r\n    public execute(): void {\r\n        const scene = this._actionManager.getScene();\r\n        scene.beginAnimation(this._target, this.from, this.to, this.loop);\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"PlayAnimationAction\",\r\n                properties: [\r\n                    Action._GetTargetProperty(this._target),\r\n                    { name: \"from\", value: String(this.from) },\r\n                    { name: \"to\", value: String(this.to) },\r\n                    { name: \"loop\", value: Action._SerializeValueAsString(this.loop) || false },\r\n                ],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to stop an animation once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class StopAnimationAction extends Action {\r\n    private _target: any;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the target animation or animation name\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this._target = target;\r\n    }\r\n\r\n    /** @internal */\r\n    public _prepare(): void {}\r\n\r\n    /**\r\n     * Execute the action and stop the animation.\r\n     */\r\n    public execute(): void {\r\n        const scene = this._actionManager.getScene();\r\n        scene.stopAnimation(this._target);\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"StopAnimationAction\",\r\n                properties: [Action._GetTargetProperty(this._target)],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible that does nothing once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class DoNothingAction extends Action {\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any = Constants.ACTION_NothingTrigger, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n    }\r\n\r\n    /**\r\n     * Execute the action and do nothing.\r\n     */\r\n    public execute(): void {}\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"DoNothingAction\",\r\n                properties: [],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to trigger several actions once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class CombineAction extends Action {\r\n    /**\r\n     * The list of aggregated animations to run.\r\n     */\r\n    public children: Action[];\r\n\r\n    /**\r\n     * defines if the children actions conditions should be check before execution\r\n     */\r\n    public enableChildrenConditions: boolean;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param children defines the list of aggregated animations to run\r\n     * @param condition defines the trigger related conditions\r\n     * @param enableChildrenConditions defines if the children actions conditions should be check before execution\r\n     */\r\n    constructor(triggerOptions: any, children: Action[], condition?: Condition, enableChildrenConditions = true) {\r\n        super(triggerOptions, condition);\r\n        this.children = children;\r\n        this.enableChildrenConditions = enableChildrenConditions;\r\n    }\r\n\r\n    /** @internal */\r\n    public _prepare(): void {\r\n        for (let index = 0; index < this.children.length; index++) {\r\n            this.children[index]._actionManager = this._actionManager;\r\n            this.children[index]._prepare();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute the action and executes all the aggregated actions.\r\n     * @param evt\r\n     */\r\n    public execute(evt: ActionEvent): void {\r\n        for (const action of this.children) {\r\n            if (!this.enableChildrenConditions || action._evaluateConditionForCurrentFrame()) {\r\n                action.execute(evt);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        const serializationObject = super._serialize(\r\n            {\r\n                name: \"CombineAction\",\r\n                properties: [],\r\n                combine: [],\r\n            },\r\n            parent\r\n        );\r\n\r\n        for (let i = 0; i < this.children.length; i++) {\r\n            serializationObject.combine.push(this.children[i].serialize(null));\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to run code (external event) once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class ExecuteCodeAction extends Action {\r\n    /**\r\n     * The callback function to run.\r\n     */\r\n    public func: (evt: ActionEvent) => void;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param func defines the callback function to run\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, func: (evt: ActionEvent) => void, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.func = func;\r\n    }\r\n\r\n    /**\r\n     * Execute the action and run the attached code.\r\n     * @param evt\r\n     */\r\n    public execute(evt: ActionEvent): void {\r\n        this.func(evt);\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to set the parent property of the target once triggered.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport class SetParentAction extends Action {\r\n    private _parent: any;\r\n    private _target: any;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the target containing the parent property\r\n     * @param parent defines from where the animation should start (animation frame)\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, parent: any, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this._target = target;\r\n        this._parent = parent;\r\n    }\r\n\r\n    /** @internal */\r\n    public _prepare(): void {}\r\n\r\n    /**\r\n     * Execute the action and set the parent property.\r\n     */\r\n    public execute(): void {\r\n        if (this._target.parent === this._parent) {\r\n            return;\r\n        }\r\n\r\n        const invertParentWorldMatrix = this._parent.getWorldMatrix().clone();\r\n        invertParentWorldMatrix.invert();\r\n\r\n        this._target.position = Vector3.TransformCoordinates(this._target.position, invertParentWorldMatrix);\r\n\r\n        this._target.parent = this._parent;\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"SetParentAction\",\r\n                properties: [Action._GetTargetProperty(this._target), Action._GetTargetProperty(this._parent)],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.SetParentAction\", SetParentAction);\r\nRegisterClass(\"BABYLON.ExecuteCodeAction\", ExecuteCodeAction);\r\nRegisterClass(\"BABYLON.DoNothingAction\", DoNothingAction);\r\nRegisterClass(\"BABYLON.StopAnimationAction\", StopAnimationAction);\r\nRegisterClass(\"BABYLON.PlayAnimationAction\", PlayAnimationAction);\r\nRegisterClass(\"BABYLON.IncrementValueAction\", IncrementValueAction);\r\nRegisterClass(\"BABYLON.SetValueAction\", SetValueAction);\r\nRegisterClass(\"BABYLON.SetStateAction\", SetStateAction);\r\nRegisterClass(\"BABYLON.SetParentAction\", SetParentAction);\r\nRegisterClass(\"BABYLON.SwitchBooleanAction\", SwitchBooleanAction);\r\nRegisterClass(\"BABYLON.CombineAction\", CombineAction);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}