{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { GPUParticleSystem } from \"./gpuParticleSystem.js\";\nimport { AbstractScene } from \"../abstractScene.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { ParticleSystem } from \"./particleSystem.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport \"../Shaders/particles.vertex.js\";\n// Adds the parsers to the scene parsers.\nAbstractScene.AddParser(SceneComponentConstants.NAME_PARTICLESYSTEM, (parsedData, scene, container, rootUrl) => {\n  const individualParser = AbstractScene.GetIndividualParser(SceneComponentConstants.NAME_PARTICLESYSTEM);\n  if (!individualParser) {\n    return;\n  }\n  // Particles Systems\n  if (parsedData.particleSystems !== undefined && parsedData.particleSystems !== null) {\n    for (let index = 0, cache = parsedData.particleSystems.length; index < cache; index++) {\n      const parsedParticleSystem = parsedData.particleSystems[index];\n      container.particleSystems.push(individualParser(parsedParticleSystem, scene, rootUrl));\n    }\n  }\n});\nAbstractScene.AddIndividualParser(SceneComponentConstants.NAME_PARTICLESYSTEM, (parsedParticleSystem, scene, rootUrl) => {\n  if (parsedParticleSystem.activeParticleCount) {\n    const ps = GPUParticleSystem.Parse(parsedParticleSystem, scene, rootUrl);\n    return ps;\n  } else {\n    const ps = ParticleSystem.Parse(parsedParticleSystem, scene, rootUrl);\n    return ps;\n  }\n});\nEngine.prototype.createEffectForParticles = function (fragmentName, uniformsNames = [], samplers = [], defines = \"\", fallbacks, onCompiled, onError, particleSystem) {\n  var _a;\n  let attributesNamesOrOptions = [];\n  let effectCreationOption = [];\n  const allSamplers = [];\n  if (particleSystem) {\n    particleSystem.fillUniformsAttributesAndSamplerNames(effectCreationOption, attributesNamesOrOptions, allSamplers);\n  } else {\n    attributesNamesOrOptions = ParticleSystem._GetAttributeNamesOrOptions();\n    effectCreationOption = ParticleSystem._GetEffectCreationOptions();\n  }\n  if (defines.indexOf(\" BILLBOARD\") === -1) {\n    defines += \"\\n#define BILLBOARD\\n\";\n  }\n  if (samplers.indexOf(\"diffuseSampler\") === -1) {\n    samplers.push(\"diffuseSampler\");\n  }\n  return this.createEffect({\n    vertex: (_a = particleSystem === null || particleSystem === void 0 ? void 0 : particleSystem.vertexShaderName) !== null && _a !== void 0 ? _a : \"particles\",\n    fragmentElement: fragmentName\n  }, attributesNamesOrOptions, effectCreationOption.concat(uniformsNames), allSamplers.concat(samplers), defines, fallbacks, onCompiled, onError);\n};\nMesh.prototype.getEmittedParticleSystems = function () {\n  const results = new Array();\n  for (let index = 0; index < this.getScene().particleSystems.length; index++) {\n    const particleSystem = this.getScene().particleSystems[index];\n    if (particleSystem.emitter === this) {\n      results.push(particleSystem);\n    }\n  }\n  return results;\n};\nMesh.prototype.getHierarchyEmittedParticleSystems = function () {\n  const results = new Array();\n  const descendants = this.getDescendants();\n  descendants.push(this);\n  for (let index = 0; index < this.getScene().particleSystems.length; index++) {\n    const particleSystem = this.getScene().particleSystems[index];\n    const emitter = particleSystem.emitter;\n    if (emitter.position && descendants.indexOf(emitter) !== -1) {\n      results.push(particleSystem);\n    }\n  }\n  return results;\n};","map":{"version":3,"mappings":"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","names":["Mesh","GPUParticleSystem","AbstractScene","Engine","ParticleSystem","SceneComponentConstants","AddParser","NAME_PARTICLESYSTEM","parsedData","scene","container","rootUrl","individualParser","GetIndividualParser","particleSystems","undefined","index","cache","length","parsedParticleSystem","push","AddIndividualParser","activeParticleCount","ps","Parse","prototype","createEffectForParticles","fragmentName","uniformsNames","samplers","defines","fallbacks","onCompiled","onError","particleSystem","attributesNamesOrOptions","effectCreationOption","allSamplers","fillUniformsAttributesAndSamplerNames","_GetAttributeNamesOrOptions","_GetEffectCreationOptions","indexOf","createEffect","vertex","vertexShaderName","fragmentElement","concat","getEmittedParticleSystems","results","Array","getScene","emitter","getHierarchyEmittedParticleSystems","descendants","getDescendants","position"],"sourceRoot":"","sources":["../../../../lts/core/generated/Particles/particleSystemComponent.ts"],"sourcesContent":["import { Mesh } from \"../Meshes/mesh\";\r\nimport type { IParticleSystem } from \"./IParticleSystem\";\r\nimport { GPUParticleSystem } from \"./gpuParticleSystem\";\r\nimport { AbstractScene } from \"../abstractScene\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { ParticleSystem } from \"./particleSystem\";\r\nimport type { Scene } from \"../scene\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport type { AssetContainer } from \"../assetContainer\";\r\n\r\nimport \"../Shaders/particles.vertex\";\r\nimport type { EffectFallbacks } from \"../Materials/effectFallbacks\";\r\n\r\n// Adds the parsers to the scene parsers.\r\nAbstractScene.AddParser(SceneComponentConstants.NAME_PARTICLESYSTEM, (parsedData: any, scene: Scene, container: AssetContainer, rootUrl: string) => {\r\n    const individualParser = AbstractScene.GetIndividualParser(SceneComponentConstants.NAME_PARTICLESYSTEM);\r\n\r\n    if (!individualParser) {\r\n        return;\r\n    }\r\n\r\n    // Particles Systems\r\n    if (parsedData.particleSystems !== undefined && parsedData.particleSystems !== null) {\r\n        for (let index = 0, cache = parsedData.particleSystems.length; index < cache; index++) {\r\n            const parsedParticleSystem = parsedData.particleSystems[index];\r\n            container.particleSystems.push(individualParser(parsedParticleSystem, scene, rootUrl));\r\n        }\r\n    }\r\n});\r\n\r\nAbstractScene.AddIndividualParser(SceneComponentConstants.NAME_PARTICLESYSTEM, (parsedParticleSystem: any, scene: Scene, rootUrl: string) => {\r\n    if (parsedParticleSystem.activeParticleCount) {\r\n        const ps = GPUParticleSystem.Parse(parsedParticleSystem, scene, rootUrl);\r\n        return ps;\r\n    } else {\r\n        const ps = ParticleSystem.Parse(parsedParticleSystem, scene, rootUrl);\r\n        return ps;\r\n    }\r\n});\r\n\r\ndeclare module \"../Engines/engine\" {\r\n    export interface Engine {\r\n        /**\r\n         * Create an effect to use with particle systems.\r\n         * Please note that some parameters like animation sheets or not being billboard are not supported in this configuration, except if you pass\r\n         * the particle system for which you want to create a custom effect in the last parameter\r\n         * @param fragmentName defines the base name of the effect (The name of file without .fragment.fx)\r\n         * @param uniformsNames defines a list of attribute names\r\n         * @param samplers defines an array of string used to represent textures\r\n         * @param defines defines the string containing the defines to use to compile the shaders\r\n         * @param fallbacks defines the list of potential fallbacks to use if shader compilation fails\r\n         * @param onCompiled defines a function to call when the effect creation is successful\r\n         * @param onError defines a function to call when the effect creation has failed\r\n         * @param particleSystem the particle system you want to create the effect for\r\n         * @returns the new Effect\r\n         */\r\n        createEffectForParticles(\r\n            fragmentName: string,\r\n            uniformsNames: string[],\r\n            samplers: string[],\r\n            defines: string,\r\n            fallbacks?: EffectFallbacks,\r\n            onCompiled?: (effect: Effect) => void,\r\n            onError?: (effect: Effect, errors: string) => void,\r\n            particleSystem?: IParticleSystem\r\n        ): Effect;\r\n    }\r\n}\r\n\r\nEngine.prototype.createEffectForParticles = function (\r\n    fragmentName: string,\r\n    uniformsNames: string[] = [],\r\n    samplers: string[] = [],\r\n    defines = \"\",\r\n    fallbacks?: EffectFallbacks,\r\n    onCompiled?: (effect: Effect) => void,\r\n    onError?: (effect: Effect, errors: string) => void,\r\n    particleSystem?: IParticleSystem\r\n): Effect {\r\n    let attributesNamesOrOptions: Array<string> = [];\r\n    let effectCreationOption: Array<string> = [];\r\n    const allSamplers: Array<string> = [];\r\n\r\n    if (particleSystem) {\r\n        particleSystem.fillUniformsAttributesAndSamplerNames(effectCreationOption, attributesNamesOrOptions, allSamplers);\r\n    } else {\r\n        attributesNamesOrOptions = ParticleSystem._GetAttributeNamesOrOptions();\r\n        effectCreationOption = ParticleSystem._GetEffectCreationOptions();\r\n    }\r\n\r\n    if (defines.indexOf(\" BILLBOARD\") === -1) {\r\n        defines += \"\\n#define BILLBOARD\\n\";\r\n    }\r\n\r\n    if (samplers.indexOf(\"diffuseSampler\") === -1) {\r\n        samplers.push(\"diffuseSampler\");\r\n    }\r\n\r\n    return this.createEffect(\r\n        {\r\n            vertex: particleSystem?.vertexShaderName ?? \"particles\",\r\n            fragmentElement: fragmentName,\r\n        },\r\n        attributesNamesOrOptions,\r\n        effectCreationOption.concat(uniformsNames),\r\n        allSamplers.concat(samplers),\r\n        defines,\r\n        fallbacks,\r\n        onCompiled,\r\n        onError\r\n    );\r\n};\r\n\r\ndeclare module \"../Meshes/mesh\" {\r\n    export interface Mesh {\r\n        /**\r\n         * Returns an array populated with IParticleSystem objects whose the mesh is the emitter\r\n         * @returns an array of IParticleSystem\r\n         */\r\n        getEmittedParticleSystems(): IParticleSystem[];\r\n\r\n        /**\r\n         * Returns an array populated with IParticleSystem objects whose the mesh or its children are the emitter\r\n         * @returns an array of IParticleSystem\r\n         */\r\n        getHierarchyEmittedParticleSystems(): IParticleSystem[];\r\n    }\r\n}\r\n\r\nMesh.prototype.getEmittedParticleSystems = function (): IParticleSystem[] {\r\n    const results = new Array<IParticleSystem>();\r\n    for (let index = 0; index < this.getScene().particleSystems.length; index++) {\r\n        const particleSystem = this.getScene().particleSystems[index];\r\n        if (particleSystem.emitter === this) {\r\n            results.push(particleSystem);\r\n        }\r\n    }\r\n    return results;\r\n};\r\n\r\nMesh.prototype.getHierarchyEmittedParticleSystems = function (): IParticleSystem[] {\r\n    const results = new Array<IParticleSystem>();\r\n    const descendants = this.getDescendants();\r\n    descendants.push(this);\r\n\r\n    for (let index = 0; index < this.getScene().particleSystems.length; index++) {\r\n        const particleSystem = this.getScene().particleSystems[index];\r\n        const emitter: any = particleSystem.emitter;\r\n\r\n        if (emitter.position && descendants.indexOf(emitter) !== -1) {\r\n            results.push(particleSystem);\r\n        }\r\n    }\r\n\r\n    return results;\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}