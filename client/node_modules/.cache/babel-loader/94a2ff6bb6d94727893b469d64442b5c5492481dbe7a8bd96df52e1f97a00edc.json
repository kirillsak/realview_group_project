{"ast":null,"code":"import { Matrix } from \"../../Maths/math.vector.js\";\nimport { Viewport } from \"../../Maths/math.viewport.js\";\n/**\n * @internal\n */\nexport function setWebVRRigMode(camera, rigParams) {\n  if (rigParams.vrDisplay) {\n    const leftEye = rigParams.vrDisplay.getEyeParameters(\"left\");\n    const rightEye = rigParams.vrDisplay.getEyeParameters(\"right\");\n    //Left eye\n    camera._rigCameras[0].viewport = new Viewport(0, 0, 0.5, 1.0);\n    camera._rigCameras[0].setCameraRigParameter(\"left\", true);\n    //leaving this for future reference\n    camera._rigCameras[0].setCameraRigParameter(\"specs\", rigParams.specs);\n    camera._rigCameras[0].setCameraRigParameter(\"eyeParameters\", leftEye);\n    camera._rigCameras[0].setCameraRigParameter(\"frameData\", rigParams.frameData);\n    camera._rigCameras[0].setCameraRigParameter(\"parentCamera\", rigParams.parentCamera);\n    camera._rigCameras[0]._cameraRigParams.vrWorkMatrix = new Matrix();\n    camera._rigCameras[0].getProjectionMatrix = camera._getWebVRProjectionMatrix;\n    camera._rigCameras[0].parent = camera;\n    camera._rigCameras[0]._getViewMatrix = camera._getWebVRViewMatrix;\n    //Right eye\n    camera._rigCameras[1].viewport = new Viewport(0.5, 0, 0.5, 1.0);\n    camera._rigCameras[1].setCameraRigParameter(\"eyeParameters\", rightEye);\n    camera._rigCameras[1].setCameraRigParameter(\"specs\", rigParams.specs);\n    camera._rigCameras[1].setCameraRigParameter(\"frameData\", rigParams.frameData);\n    camera._rigCameras[1].setCameraRigParameter(\"parentCamera\", rigParams.parentCamera);\n    camera._rigCameras[1]._cameraRigParams.vrWorkMatrix = new Matrix();\n    camera._rigCameras[1].getProjectionMatrix = camera._getWebVRProjectionMatrix;\n    camera._rigCameras[1].parent = camera;\n    camera._rigCameras[1]._getViewMatrix = camera._getWebVRViewMatrix;\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,MAAM,QAAQ,4BAA0B;AACjD,SAASC,QAAQ,QAAQ,8BAA4B;AAErD;;;AAGA,OAAM,SAAUC,eAAe,CAACC,MAAc,EAAEC,SAAc;EAC1D,IAAIA,SAAS,CAACC,SAAS,EAAE;IACrB,MAAMC,OAAO,GAAGF,SAAS,CAACC,SAAS,CAACE,gBAAgB,CAAC,MAAM,CAAC;IAC5D,MAAMC,QAAQ,GAAGJ,SAAS,CAACC,SAAS,CAACE,gBAAgB,CAAC,OAAO,CAAC;IAE9D;IACAJ,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAACC,QAAQ,GAAG,IAAIT,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC;IAC7DE,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAACE,qBAAqB,CAAC,MAAM,EAAE,IAAI,CAAC;IACzD;IACAR,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAACE,qBAAqB,CAAC,OAAO,EAAEP,SAAS,CAACQ,KAAK,CAAC;IACrET,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAACE,qBAAqB,CAAC,eAAe,EAAEL,OAAO,CAAC;IACrEH,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAACE,qBAAqB,CAAC,WAAW,EAAEP,SAAS,CAACS,SAAS,CAAC;IAC7EV,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAACE,qBAAqB,CAAC,cAAc,EAAEP,SAAS,CAACU,YAAY,CAAC;IACnFX,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAACM,gBAAgB,CAACC,YAAY,GAAG,IAAIhB,MAAM,EAAE;IAClEG,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAACQ,mBAAmB,GAAGd,MAAM,CAACe,yBAAyB;IAC5Ef,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAACU,MAAM,GAAGhB,MAAM;IACrCA,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAACW,cAAc,GAAGjB,MAAM,CAACkB,mBAAmB;IAEjE;IACAlB,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAACC,QAAQ,GAAG,IAAIT,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC;IAC/DE,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAACE,qBAAqB,CAAC,eAAe,EAAEH,QAAQ,CAAC;IACtEL,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAACE,qBAAqB,CAAC,OAAO,EAAEP,SAAS,CAACQ,KAAK,CAAC;IACrET,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAACE,qBAAqB,CAAC,WAAW,EAAEP,SAAS,CAACS,SAAS,CAAC;IAC7EV,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAACE,qBAAqB,CAAC,cAAc,EAAEP,SAAS,CAACU,YAAY,CAAC;IACnFX,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAACM,gBAAgB,CAACC,YAAY,GAAG,IAAIhB,MAAM,EAAE;IAClEG,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAACQ,mBAAmB,GAAGd,MAAM,CAACe,yBAAyB;IAC5Ef,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAACU,MAAM,GAAGhB,MAAM;IACrCA,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAACW,cAAc,GAAGjB,MAAM,CAACkB,mBAAmB;;AAEzE","names":["Matrix","Viewport","setWebVRRigMode","camera","rigParams","vrDisplay","leftEye","getEyeParameters","rightEye","_rigCameras","viewport","setCameraRigParameter","specs","frameData","parentCamera","_cameraRigParams","vrWorkMatrix","getProjectionMatrix","_getWebVRProjectionMatrix","parent","_getViewMatrix","_getWebVRViewMatrix"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/RigModes/webVRRigMode.ts"],"sourcesContent":["import type { Camera } from \"../camera\";\r\nimport { Matrix } from \"../../Maths/math.vector\";\r\nimport { Viewport } from \"../../Maths/math.viewport\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function setWebVRRigMode(camera: Camera, rigParams: any) {\r\n    if (rigParams.vrDisplay) {\r\n        const leftEye = rigParams.vrDisplay.getEyeParameters(\"left\");\r\n        const rightEye = rigParams.vrDisplay.getEyeParameters(\"right\");\r\n\r\n        //Left eye\r\n        camera._rigCameras[0].viewport = new Viewport(0, 0, 0.5, 1.0);\r\n        camera._rigCameras[0].setCameraRigParameter(\"left\", true);\r\n        //leaving this for future reference\r\n        camera._rigCameras[0].setCameraRigParameter(\"specs\", rigParams.specs);\r\n        camera._rigCameras[0].setCameraRigParameter(\"eyeParameters\", leftEye);\r\n        camera._rigCameras[0].setCameraRigParameter(\"frameData\", rigParams.frameData);\r\n        camera._rigCameras[0].setCameraRigParameter(\"parentCamera\", rigParams.parentCamera);\r\n        camera._rigCameras[0]._cameraRigParams.vrWorkMatrix = new Matrix();\r\n        camera._rigCameras[0].getProjectionMatrix = camera._getWebVRProjectionMatrix;\r\n        camera._rigCameras[0].parent = camera;\r\n        camera._rigCameras[0]._getViewMatrix = camera._getWebVRViewMatrix;\r\n\r\n        //Right eye\r\n        camera._rigCameras[1].viewport = new Viewport(0.5, 0, 0.5, 1.0);\r\n        camera._rigCameras[1].setCameraRigParameter(\"eyeParameters\", rightEye);\r\n        camera._rigCameras[1].setCameraRigParameter(\"specs\", rigParams.specs);\r\n        camera._rigCameras[1].setCameraRigParameter(\"frameData\", rigParams.frameData);\r\n        camera._rigCameras[1].setCameraRigParameter(\"parentCamera\", rigParams.parentCamera);\r\n        camera._rigCameras[1]._cameraRigParams.vrWorkMatrix = new Matrix();\r\n        camera._rigCameras[1].getProjectionMatrix = camera._getWebVRProjectionMatrix;\r\n        camera._rigCameras[1].parent = camera;\r\n        camera._rigCameras[1]._getViewMatrix = camera._getWebVRViewMatrix;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}