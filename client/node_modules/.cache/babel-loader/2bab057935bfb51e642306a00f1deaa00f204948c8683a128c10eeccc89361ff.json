{"ast":null,"code":"import { Camera } from \"../../Cameras/camera.js\";\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setStereoscopicRigMode } from \"../RigModes/stereoscopicRigMode.js\";\nNode.AddNodeConstructor(\"StereoscopicArcRotateCamera\", (name, scene, options) => {\n  return () => new StereoscopicArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), options.interaxial_distance, options.isStereoscopicSideBySide, scene);\n});\n/**\n * Camera used to simulate stereoscopic rendering (based on ArcRotateCamera)\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\n */\nexport class StereoscopicArcRotateCamera extends ArcRotateCamera {\n  /**\n   * Creates a new StereoscopicArcRotateCamera\n   * @param name defines camera name\n   * @param alpha defines alpha angle (in radians)\n   * @param beta defines beta angle (in radians)\n   * @param radius defines radius\n   * @param target defines camera target\n   * @param interaxialDistance defines distance between each color axis\n   * @param isStereoscopicSideBySide defines is stereoscopic is done side by side or over under\n   * @param scene defines the hosting scene\n   */\n  constructor(name, alpha, beta, radius, target, interaxialDistance, isStereoscopicSideBySide, scene) {\n    super(name, alpha, beta, radius, target, scene);\n    this._setRigMode = setStereoscopicRigMode.bind(null, this);\n    this.interaxialDistance = interaxialDistance;\n    this.isStereoscopicSideBySide = isStereoscopicSideBySide;\n    this.setCameraRigMode(isStereoscopicSideBySide ? Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL : Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER, {\n      interaxialDistance: interaxialDistance\n    });\n  }\n  /**\n   * Gets camera class name\n   * @returns StereoscopicArcRotateCamera\n   */\n  getClassName() {\n    return \"StereoscopicArcRotateCamera\";\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAQ,yBAAuB;AAC9C,SAASC,eAAe,QAAQ,kCAAgC;AAEhE,SAASC,OAAO,QAAQ,4BAA0B;AAClD,SAASC,IAAI,QAAQ,eAAa;AAClC,SAASC,sBAAsB,QAAQ,oCAAkC;AAEzED,IAAI,CAACE,kBAAkB,CAAC,6BAA6B,EAAE,CAACC,IAAI,EAAEC,KAAK,EAAEC,OAAO,KAAI;EAC5E,OAAO,MAAM,IAAIC,2BAA2B,CAACH,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAEJ,OAAO,CAACQ,IAAI,EAAE,EAAEF,OAAO,CAACG,mBAAmB,EAAEH,OAAO,CAACI,wBAAwB,EAAEL,KAAK,CAAC;AACvJ,CAAC,CAAC;AAEF;;;;AAIA,OAAM,MAAOE,2BAA4B,SAAQR,eAAe;EAC5D;;;;;;;;;;;EAWAY,YAAYP,IAAY,EAAEQ,KAAa,EAAEC,IAAY,EAAEC,MAAc,EAAEC,MAAe,EAAEC,kBAA0B,EAAEN,wBAAiC,EAAEL,KAAa;IAChK,KAAK,CAACD,IAAI,EAAEQ,KAAK,EAAEC,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEV,KAAK,CAAC;IAgBzC,gBAAW,GAAGH,sBAAsB,CAACe,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;IAf3D,IAAI,CAACD,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACN,wBAAwB,GAAGA,wBAAwB;IACxD,IAAI,CAACQ,gBAAgB,CAACR,wBAAwB,GAAGZ,MAAM,CAACqB,yCAAyC,GAAGrB,MAAM,CAACsB,+BAA+B,EAAE;MACxIJ,kBAAkB,EAAEA;KACvB,CAAC;EACN;EAEA;;;;EAIOK,YAAY;IACf,OAAO,6BAA6B;EACxC","names":["Camera","ArcRotateCamera","Vector3","Node","setStereoscopicRigMode","AddNodeConstructor","name","scene","options","StereoscopicArcRotateCamera","Zero","interaxial_distance","isStereoscopicSideBySide","constructor","alpha","beta","radius","target","interaxialDistance","bind","setCameraRigMode","RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL","RIG_MODE_STEREOSCOPIC_OVERUNDER","getClassName"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/Stereoscopic/stereoscopicArcRotateCamera.ts"],"sourcesContent":["import { Camera } from \"../../Cameras/camera\";\r\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Node } from \"../../node\";\r\nimport { setStereoscopicRigMode } from \"../RigModes/stereoscopicRigMode\";\r\n\r\nNode.AddNodeConstructor(\"StereoscopicArcRotateCamera\", (name, scene, options) => {\r\n    return () => new StereoscopicArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), options.interaxial_distance, options.isStereoscopicSideBySide, scene);\r\n});\r\n\r\n/**\r\n * Camera used to simulate stereoscopic rendering (based on ArcRotateCamera)\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\r\n */\r\nexport class StereoscopicArcRotateCamera extends ArcRotateCamera {\r\n    /**\r\n     * Creates a new StereoscopicArcRotateCamera\r\n     * @param name defines camera name\r\n     * @param alpha defines alpha angle (in radians)\r\n     * @param beta defines beta angle (in radians)\r\n     * @param radius defines radius\r\n     * @param target defines camera target\r\n     * @param interaxialDistance defines distance between each color axis\r\n     * @param isStereoscopicSideBySide defines is stereoscopic is done side by side or over under\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, alpha: number, beta: number, radius: number, target: Vector3, interaxialDistance: number, isStereoscopicSideBySide: boolean, scene?: Scene) {\r\n        super(name, alpha, beta, radius, target, scene);\r\n        this.interaxialDistance = interaxialDistance;\r\n        this.isStereoscopicSideBySide = isStereoscopicSideBySide;\r\n        this.setCameraRigMode(isStereoscopicSideBySide ? Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL : Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER, {\r\n            interaxialDistance: interaxialDistance,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets camera class name\r\n     * @returns StereoscopicArcRotateCamera\r\n     */\r\n    public getClassName(): string {\r\n        return \"StereoscopicArcRotateCamera\";\r\n    }\r\n\r\n    protected _setRigMode = setStereoscopicRigMode.bind(null, this);\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}