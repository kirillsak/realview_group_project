{"ast":null,"code":"import { Vector2, Vector3 } from \"./math.vector.js\";\n/**\n * Class used to store (r, theta) vector representation\n */\nexport class Polar {\n  /**\n   * Creates a new Polar object\n   * @param radius the radius of the vector\n   * @param theta the angle of the vector\n   */\n  constructor(radius, theta) {\n    this.radius = radius;\n    this.theta = theta;\n  }\n  /**\n   * Gets the class name\n   * @returns the string \"Polar\"\n   */\n  getClassName() {\n    return \"Polar\";\n  }\n  /**\n   * Converts the current polar to a string\n   * @returns the current polar as a string\n   */\n  toString() {\n    return JSON.stringify(this);\n  }\n  /**\n   * Converts the current polar to an array\n   * @reutrns the current polar as an array\n   */\n  asArray() {\n    return [this.radius, this.theta];\n  }\n  /**\n   * Adds the current Polar and the given Polar and stores the result\n   * @param polar the polar to add\n   * @param ref the polar to store the result in\n   * @returns the updated ref\n   */\n  addToRef(polar, ref) {\n    ref.radius = this.radius + polar.radius;\n    ref.theta = this.theta + polar.theta;\n    return ref;\n  }\n  /**\n   * Adds the current Polar and the given Polar\n   * @param polar the polar to add\n   * @returns the sum polar\n   */\n  add(polar) {\n    const ref = new Polar(0, 0);\n    this.addToRef(polar, ref);\n    return ref;\n  }\n  /**\n   * Adds the given polar to the current polar\n   * @param polar the polar to add\n   * @returns the current polar\n   */\n  addInPlace(polar) {\n    this.addToRef(polar, this);\n    return this;\n  }\n  /**\n   * Adds the provided values to the current polar\n   * @param radius the amount to add to the radius\n   * @param theta the amount to add to the theta\n   * @returns the current polar\n   */\n  addInPlaceFromFloats(radius, theta) {\n    this.radius += radius;\n    this.theta += theta;\n    return this;\n  }\n  /**\n   * Subtracts the given Polar from the current Polar and stores the result\n   * @param polar the polar to subtract\n   * @param ref the polar to store the result in\n   * @returns the updated ref\n   */\n  subtractToRef(polar, ref) {\n    ref.radius = this.radius - polar.radius;\n    ref.theta = this.theta - polar.theta;\n    return ref;\n  }\n  /**\n   * Subtracts the given Polar from the current Polar\n   * @param polar the polar to subtract\n   * @returns the difference polar\n   */\n  subtract(polar) {\n    const ref = new Polar(0, 0);\n    this.subtractToRef(polar, ref);\n    return ref;\n  }\n  /**\n   * Subtracts the given Polar from the current Polar\n   * @param polar the polar to subtract\n   * @returns the current polar\n   */\n  subtractInPlace(polar) {\n    this.subtractToRef(polar, this);\n    return this;\n  }\n  /**\n   * Subtracts the given floats from the current polar\n   * @param radius the amount to subtract from the radius\n   * @param theta the amount to subtract from the theta\n   * @param ref the polar to store the result in\n   * @returns the updated ref\n   */\n  subtractFromFloatsToRef(radius, theta, ref) {\n    ref.radius = this.radius - radius;\n    ref.theta = this.theta - theta;\n    return ref;\n  }\n  /**\n   * Subtracts the given floats from the current polar\n   * @param radius the amount to subtract from the radius\n   * @param theta the amount to subtract from the theta\n   * @returns the difference polar\n   */\n  subtractFromFloats(radius, theta) {\n    const ref = new Polar(0, 0);\n    this.subtractFromFloatsToRef(radius, theta, ref);\n    return ref;\n  }\n  /**\n   * Multiplies the given Polar with the current Polar and stores the result\n   * @param polar the polar to multiply\n   * @param ref the polar to store the result in\n   * @returns the updated ref\n   */\n  multiplyToRef(polar, ref) {\n    ref.radius = this.radius * polar.radius;\n    ref.theta = this.theta * polar.theta;\n    return ref;\n  }\n  /**\n   * Multiplies the given Polar with the current Polar\n   * @param polar the polar to multiply\n   * @returns the product polar\n   */\n  multiply(polar) {\n    const ref = new Polar(0, 0);\n    this.multiplyToRef(polar, ref);\n    return ref;\n  }\n  /**\n   * Multiplies the given Polar with the current Polar\n   * @param polar the polar to multiply\n   * @returns the current polar\n   */\n  multiplyInPlace(polar) {\n    this.multiplyToRef(polar, this);\n    return this;\n  }\n  /**\n   * Divides the current Polar by the given Polar and stores the result\n   * @param polar the polar to divide\n   * @param ref the polar to store the result in\n   * @returns the updated ref\n   */\n  divideToRef(polar, ref) {\n    ref.radius = this.radius / polar.radius;\n    ref.theta = this.theta / polar.theta;\n    return ref;\n  }\n  /**\n   * Divides the current Polar by the given Polar\n   * @param polar the polar to divide\n   * @returns the quotient polar\n   */\n  divide(polar) {\n    const ref = new Polar(0, 0);\n    this.divideToRef(polar, ref);\n    return ref;\n  }\n  /**\n   * Divides the current Polar by the given Polar\n   * @param polar the polar to divide\n   * @returns the current polar\n   */\n  divideInPlace(polar) {\n    this.divideToRef(polar, this);\n    return this;\n  }\n  /**\n   * Clones the current polar\n   * @returns a clone of the current polar\n   */\n  clone() {\n    return new Polar(this.radius, this.theta);\n  }\n  /**\n   * Copies the source polar into the current polar\n   * @param source the polar to copy from\n   * @returns the current polar\n   */\n  copyFrom(source) {\n    this.radius = source.radius;\n    this.theta = source.theta;\n    return this;\n  }\n  /**\n   * Copies the given values into the current polar\n   * @param radius the radius to use\n   * @param theta the theta to use\n   * @returns the current polar\n   */\n  copyFromFloats(radius, theta) {\n    this.radius = radius;\n    this.theta = theta;\n    return this;\n  }\n  /**\n   * Scales the current polar and stores the result\n   * @param scale defines the multiplication factor\n   * @param ref where to store the result\n   * @returns the updated ref\n   */\n  scaleToRef(scale, ref) {\n    ref.radius = this.radius * scale;\n    ref.theta = this.theta * scale;\n    return ref;\n  }\n  /**\n   * Scales the current polar and returns a new polar with the scaled coordinates\n   * @param scale defines the multiplication factor\n   * @returns the scaled polar\n   */\n  scale(scale) {\n    const ref = new Polar(0, 0);\n    this.scaleToRef(scale, ref);\n    return ref;\n  }\n  /**\n   * Scales the current polar\n   * @param scale defines the multiplication factor\n   * @returns the current polar\n   */\n  scaleInPlace(scale) {\n    this.scaleToRef(scale, this);\n    return this;\n  }\n  /**\n   * Sets the values of the current polar\n   * @param radius the new radius\n   * @param theta the new theta\n   * @returns the current polar\n   */\n  set(radius, theta) {\n    this.radius = radius;\n    this.theta = theta;\n    return this;\n  }\n  /**\n   * Sets the values of the current polar\n   * @param value the new values\n   * @returns the current polar\n   */\n  setAll(value) {\n    this.set(value, value);\n    return this;\n  }\n  /**\n   * Gets the rectangular coordinates of the current Polar\n   * @param ref the reference to assign the result\n   * @returns the updated reference\n   */\n  toVector2ToRef(ref) {\n    const x = this.radius * Math.cos(this.theta);\n    const y = this.radius * Math.sin(this.theta);\n    ref.set(x, y);\n    return ref;\n  }\n  /**\n   * Gets the rectangular coordinates of the current Polar\n   * @returns the rectangular coordinates\n   */\n  toVector2() {\n    const ref = new Vector2(0, 0);\n    return this.toVector2ToRef(ref);\n  }\n  /**\n   * Converts a given Vector2 to its polar coordinates\n   * @param v the Vector2 to convert\n   * @param ref the reference to assign the result\n   * @returns the updated reference\n   */\n  static FromVector2ToRef(v, ref) {\n    const theta = Math.sign(v.y) * Math.acos(v.x / v.length());\n    ref.radius = v.length();\n    ref.theta = theta;\n    return ref;\n  }\n  /**\n   * Converts a given Vector2 to its polar coordinates\n   * @param v the Vector2 to convert\n   * @returns a Polar\n   */\n  static FromVector2(v) {\n    const polar = new Polar(0, 0);\n    Polar.FromVector2ToRef(v, polar);\n    return polar;\n  }\n  /**\n   * Converts an array of floats to a polar\n   * @param array the array to convert\n   * @returns the converted polar\n   */\n  static FromArray(array) {\n    return new Polar(array[0], array[1]);\n  }\n}\n/**\n * Class used for (radius, theta, phi) vector representation.\n */\nexport class Spherical {\n  /**\n   * @param radius spherical radius\n   * @param theta angle from positive y axis to radial line from 0 to PI (vertical)\n   * @param phi angle from positive x axis measured anticlockwise from -PI to PI (horizontal)\n   */\n  constructor(radius, theta, phi) {\n    this.radius = radius;\n    this.theta = theta;\n    this.phi = phi;\n  }\n  /**\n   * Gets the class name\n   * @returns the string \"Spherical\"\n   */\n  getClassName() {\n    return \"Spherical\";\n  }\n  /**\n   * Converts the current spherical to a string\n   * @returns the current spherical as a string\n   */\n  toString() {\n    return JSON.stringify(this);\n  }\n  /**\n   * Converts the current spherical to an array\n   * @reutrns the current spherical as an array\n   */\n  asArray() {\n    return [this.radius, this.theta, this.phi];\n  }\n  /**\n   * Adds the current Spherical and the given Spherical and stores the result\n   * @param spherical the spherical to add\n   * @param ref the spherical to store the result in\n   * @returns the updated ref\n   */\n  addToRef(spherical, ref) {\n    ref.radius = this.radius + spherical.radius;\n    ref.theta = this.theta + spherical.theta;\n    ref.phi = this.phi + spherical.phi;\n    return ref;\n  }\n  /**\n   * Adds the current Spherical and the given Spherical\n   * @param spherical the spherical to add\n   * @returns the sum spherical\n   */\n  add(spherical) {\n    const ref = new Spherical(0, 0, 0);\n    this.addToRef(spherical, ref);\n    return ref;\n  }\n  /**\n   * Adds the given spherical to the current spherical\n   * @param spherical the spherical to add\n   * @returns the current spherical\n   */\n  addInPlace(spherical) {\n    this.addToRef(spherical, this);\n    return this;\n  }\n  /**\n   * Adds the provided values to the current spherical\n   * @param radius the amount to add to the radius\n   * @param theta the amount to add to the theta\n   * @param phi the amount to add to the phi\n   * @returns the current spherical\n   */\n  addInPlaceFromFloats(radius, theta, phi) {\n    this.radius += radius;\n    this.theta += theta;\n    this.phi += phi;\n    return this;\n  }\n  /**\n   * Subtracts the given Spherical from the current Spherical and stores the result\n   * @param spherical the spherical to subtract\n   * @param ref the spherical to store the result in\n   * @returns the updated ref\n   */\n  subtractToRef(spherical, ref) {\n    ref.radius = this.radius - spherical.radius;\n    ref.theta = this.theta - spherical.theta;\n    ref.phi = this.phi - spherical.phi;\n    return ref;\n  }\n  /**\n   * Subtracts the given Spherical from the current Spherical\n   * @param spherical the spherical to subtract\n   * @returns the difference spherical\n   */\n  subtract(spherical) {\n    const ref = new Spherical(0, 0, 0);\n    this.subtractToRef(spherical, ref);\n    return ref;\n  }\n  /**\n   * Subtracts the given Spherical from the current Spherical\n   * @param spherical the spherical to subtract\n   * @returns the current spherical\n   */\n  subtractInPlace(spherical) {\n    this.subtractToRef(spherical, this);\n    return this;\n  }\n  /**\n   * Subtracts the given floats from the current spherical\n   * @param radius the amount to subtract from the radius\n   * @param theta the amount to subtract from the theta\n   * @param phi the amount to subtract from the phi\n   * @param ref the spherical to store the result in\n   * @returns the updated ref\n   */\n  subtractFromFloatsToRef(radius, theta, phi, ref) {\n    ref.radius = this.radius - radius;\n    ref.theta = this.theta - theta;\n    ref.phi = this.phi - phi;\n    return ref;\n  }\n  /**\n   * Subtracts the given floats from the current spherical\n   * @param radius the amount to subtract from the radius\n   * @param theta the amount to subtract from the theta\n   * @param phi the amount to subtract from the phi\n   * @returns the difference spherical\n   */\n  subtractFromFloats(radius, theta, phi) {\n    const ref = new Spherical(0, 0, 0);\n    this.subtractFromFloatsToRef(radius, theta, phi, ref);\n    return ref;\n  }\n  /**\n   * Multiplies the given Spherical with the current Spherical and stores the result\n   * @param spherical the spherical to multiply\n   * @param ref the spherical to store the result in\n   * @returns the updated ref\n   */\n  multiplyToRef(spherical, ref) {\n    ref.radius = this.radius * spherical.radius;\n    ref.theta = this.theta * spherical.theta;\n    ref.phi = this.phi * spherical.phi;\n    return ref;\n  }\n  /**\n   * Multiplies the given Spherical with the current Spherical\n   * @param spherical the spherical to multiply\n   * @returns the product spherical\n   */\n  multiply(spherical) {\n    const ref = new Spherical(0, 0, 0);\n    this.multiplyToRef(spherical, ref);\n    return ref;\n  }\n  /**\n   * Multiplies the given Spherical with the current Spherical\n   * @param spherical the spherical to multiply\n   * @returns the current spherical\n   */\n  multiplyInPlace(spherical) {\n    this.multiplyToRef(spherical, this);\n    return this;\n  }\n  /**\n   * Divides the current Spherical by the given Spherical and stores the result\n   * @param spherical the spherical to divide\n   * @param ref the spherical to store the result in\n   * @returns the updated ref\n   */\n  divideToRef(spherical, ref) {\n    ref.radius = this.radius / spherical.radius;\n    ref.theta = this.theta / spherical.theta;\n    ref.phi = this.phi / spherical.phi;\n    return ref;\n  }\n  /**\n   * Divides the current Spherical by the given Spherical\n   * @param spherical the spherical to divide\n   * @returns the quotient spherical\n   */\n  divide(spherical) {\n    const ref = new Spherical(0, 0, 0);\n    this.divideToRef(spherical, ref);\n    return ref;\n  }\n  /**\n   * Divides the current Spherical by the given Spherical\n   * @param spherical the spherical to divide\n   * @returns the current spherical\n   */\n  divideInPlace(spherical) {\n    this.divideToRef(spherical, this);\n    return this;\n  }\n  /**\n   * Clones the current spherical\n   * @returns a clone of the current spherical\n   */\n  clone() {\n    return new Spherical(this.radius, this.theta, this.phi);\n  }\n  /**\n   * Copies the source spherical into the current spherical\n   * @param source the spherical to copy from\n   * @returns the current spherical\n   */\n  copyFrom(source) {\n    this.radius = source.radius;\n    this.theta = source.theta;\n    this.phi = source.phi;\n    return this;\n  }\n  /**\n   * Copies the given values into the current spherical\n   * @param radius the radius to use\n   * @param theta the theta to use\n   * @param phi the phi to use\n   * @returns the current spherical\n   */\n  copyFromFloats(radius, theta, phi) {\n    this.radius = radius;\n    this.theta = theta;\n    this.phi = phi;\n    return this;\n  }\n  /**\n   * Scales the current spherical and stores the result\n   * @param scale defines the multiplication factor\n   * @param ref where to store the result\n   * @returns the updated ref\n   */\n  scaleToRef(scale, ref) {\n    ref.radius = this.radius * scale;\n    ref.theta = this.theta * scale;\n    ref.phi = this.phi * scale;\n    return ref;\n  }\n  /**\n   * Scales the current spherical and returns a new spherical with the scaled coordinates\n   * @param scale defines the multiplication factor\n   * @returns the scaled spherical\n   */\n  scale(scale) {\n    const ref = new Spherical(0, 0, 0);\n    this.scaleToRef(scale, ref);\n    return ref;\n  }\n  /**\n   * Scales the current spherical\n   * @param scale defines the multiplication factor\n   * @returns the current spherical\n   */\n  scaleInPlace(scale) {\n    this.scaleToRef(scale, this);\n    return this;\n  }\n  /**\n   * Sets the values of the current spherical\n   * @param radius the new radius\n   * @param theta the new theta\n   * @param phi the new phi\n   * @returns the current spherical\n   */\n  set(radius, theta, phi) {\n    this.radius = radius;\n    this.theta = theta;\n    this.phi = phi;\n    return this;\n  }\n  /**\n   * Sets the values of the current spherical\n   * @param value the new values\n   * @returns the current spherical\n   */\n  setAll(value) {\n    this.set(value, value, value);\n    return this;\n  }\n  /**\n   * Assigns the rectangular coordinates of the current Spherical to a Vector3\n   * @param ref the Vector3 to update\n   * @returns the updated Vector3\n   */\n  toVector3ToRef(ref) {\n    const x = this.radius * Math.sin(this.theta) * Math.cos(this.phi);\n    const y = this.radius * Math.cos(this.theta);\n    const z = this.radius * Math.sin(this.theta) * Math.sin(this.phi);\n    ref.set(x, y, z);\n    return ref;\n  }\n  /**\n   * Gets a Vector3 from the current spherical coordinates\n   * @returns the (x, y,z) form of the current Spherical\n   */\n  toVector3() {\n    const ref = new Vector3(0, 0, 0);\n    return this.toVector3ToRef(ref);\n  }\n  /**\n   * Assigns the spherical coordinates from a Vector3\n   * @param vector the vector to convert\n   * @param ref the Spherical to update\n   * @returns the updated ref\n   */\n  static FromVector3ToRef(vector, ref) {\n    ref.radius = vector.length();\n    ref.theta = Math.acos(vector.y / ref.radius);\n    ref.phi = Math.atan2(vector.z, vector.x);\n    return ref;\n  }\n  /**\n   * Gets a Spherical from a Vector3\n   * @param vector defines the vector in (x, y, z) coordinate space\n   * @returns a new Spherical\n   */\n  static FromVector3(vector) {\n    const spherical = new Spherical(0, 0, 0);\n    Spherical.FromVector3ToRef(vector, spherical);\n    return spherical;\n  }\n  /**\n   * Converts an array of floats to a spherical\n   * @param array the array to convert\n   * @returns the converted spherical\n   */\n  static FromArray(array) {\n    return new Spherical(array[0], array[1], array[2]);\n  }\n}","map":{"version":3,"mappings":"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","names":["Vector2","Vector3","Polar","constructor","radius","theta","getClassName","toString","JSON","stringify","asArray","addToRef","polar","ref","add","addInPlace","addInPlaceFromFloats","subtractToRef","subtract","subtractInPlace","subtractFromFloatsToRef","subtractFromFloats","multiplyToRef","multiply","multiplyInPlace","divideToRef","divide","divideInPlace","clone","copyFrom","source","copyFromFloats","scaleToRef","scale","scaleInPlace","set","setAll","value","toVector2ToRef","x","Math","cos","y","sin","toVector2","FromVector2ToRef","v","sign","acos","length","FromVector2","FromArray","array","Spherical","phi","spherical","toVector3ToRef","z","toVector3","FromVector3ToRef","vector","atan2","FromVector3"],"sourceRoot":"","sources":["../../../../lts/core/generated/Maths/math.polar.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { DeepImmutable } from \"../types\";\r\nimport { Vector2, Vector3 } from \"./math.vector\";\r\n\r\n/**\r\n * Class used to store (r, theta) vector representation\r\n */\r\nexport class Polar {\r\n    public radius: number;\r\n    public theta: number;\r\n\r\n    /**\r\n     * Creates a new Polar object\r\n     * @param radius the radius of the vector\r\n     * @param theta the angle of the vector\r\n     */\r\n    constructor(radius: number, theta: number) {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name\r\n     * @returns the string \"Polar\"\r\n     */\r\n    public getClassName() {\r\n        return \"Polar\";\r\n    }\r\n\r\n    /**\r\n     * Converts the current polar to a string\r\n     * @returns the current polar as a string\r\n     */\r\n    public toString() {\r\n        return JSON.stringify(this);\r\n    }\r\n\r\n    /**\r\n     * Converts the current polar to an array\r\n     * @reutrns the current polar as an array\r\n     */\r\n    public asArray() {\r\n        return [this.radius, this.theta];\r\n    }\r\n\r\n    /**\r\n     * Adds the current Polar and the given Polar and stores the result\r\n     * @param polar the polar to add\r\n     * @param ref the polar to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public addToRef(polar: Polar, ref: Polar) {\r\n        ref.radius = this.radius + polar.radius;\r\n        ref.theta = this.theta + polar.theta;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Adds the current Polar and the given Polar\r\n     * @param polar the polar to add\r\n     * @returns the sum polar\r\n     */\r\n    public add(polar: Polar) {\r\n        const ref = new Polar(0, 0);\r\n        this.addToRef(polar, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Adds the given polar to the current polar\r\n     * @param polar the polar to add\r\n     * @returns the current polar\r\n     */\r\n    public addInPlace(polar: Polar) {\r\n        this.addToRef(polar, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds the provided values to the current polar\r\n     * @param radius the amount to add to the radius\r\n     * @param theta the amount to add to the theta\r\n     * @returns the current polar\r\n     */\r\n    public addInPlaceFromFloats(radius: number, theta: number) {\r\n        this.radius += radius;\r\n        this.theta += theta;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given Polar from the current Polar and stores the result\r\n     * @param polar the polar to subtract\r\n     * @param ref the polar to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public subtractToRef(polar: Polar, ref: Polar) {\r\n        ref.radius = this.radius - polar.radius;\r\n        ref.theta = this.theta - polar.theta;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given Polar from the current Polar\r\n     * @param polar the polar to subtract\r\n     * @returns the difference polar\r\n     */\r\n    public subtract(polar: Polar) {\r\n        const ref = new Polar(0, 0);\r\n        this.subtractToRef(polar, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given Polar from the current Polar\r\n     * @param polar the polar to subtract\r\n     * @returns the current polar\r\n     */\r\n    public subtractInPlace(polar: Polar) {\r\n        this.subtractToRef(polar, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given floats from the current polar\r\n     * @param radius the amount to subtract from the radius\r\n     * @param theta the amount to subtract from the theta\r\n     * @param ref the polar to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public subtractFromFloatsToRef(radius: number, theta: number, ref: Polar) {\r\n        ref.radius = this.radius - radius;\r\n        ref.theta = this.theta - theta;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given floats from the current polar\r\n     * @param radius the amount to subtract from the radius\r\n     * @param theta the amount to subtract from the theta\r\n     * @returns the difference polar\r\n     */\r\n    public subtractFromFloats(radius: number, theta: number) {\r\n        const ref = new Polar(0, 0);\r\n        this.subtractFromFloatsToRef(radius, theta, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the given Polar with the current Polar and stores the result\r\n     * @param polar the polar to multiply\r\n     * @param ref the polar to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public multiplyToRef(polar: Polar, ref: Polar) {\r\n        ref.radius = this.radius * polar.radius;\r\n        ref.theta = this.theta * polar.theta;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the given Polar with the current Polar\r\n     * @param polar the polar to multiply\r\n     * @returns the product polar\r\n     */\r\n    public multiply(polar: Polar) {\r\n        const ref = new Polar(0, 0);\r\n        this.multiplyToRef(polar, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the given Polar with the current Polar\r\n     * @param polar the polar to multiply\r\n     * @returns the current polar\r\n     */\r\n    public multiplyInPlace(polar: Polar) {\r\n        this.multiplyToRef(polar, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Polar by the given Polar and stores the result\r\n     * @param polar the polar to divide\r\n     * @param ref the polar to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public divideToRef(polar: Polar, ref: Polar) {\r\n        ref.radius = this.radius / polar.radius;\r\n        ref.theta = this.theta / polar.theta;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Polar by the given Polar\r\n     * @param polar the polar to divide\r\n     * @returns the quotient polar\r\n     */\r\n    public divide(polar: Polar) {\r\n        const ref = new Polar(0, 0);\r\n        this.divideToRef(polar, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Polar by the given Polar\r\n     * @param polar the polar to divide\r\n     * @returns the current polar\r\n     */\r\n    public divideInPlace(polar: Polar) {\r\n        this.divideToRef(polar, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clones the current polar\r\n     * @returns a clone of the current polar\r\n     */\r\n    public clone() {\r\n        return new Polar(this.radius, this.theta);\r\n    }\r\n\r\n    /**\r\n     * Copies the source polar into the current polar\r\n     * @param source the polar to copy from\r\n     * @returns the current polar\r\n     */\r\n    public copyFrom(source: Polar) {\r\n        this.radius = source.radius;\r\n        this.theta = source.theta;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copies the given values into the current polar\r\n     * @param radius the radius to use\r\n     * @param theta the theta to use\r\n     * @returns the current polar\r\n     */\r\n    public copyFromFloats(radius: number, theta: number) {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scales the current polar and stores the result\r\n     * @param scale defines the multiplication factor\r\n     * @param ref where to store the result\r\n     * @returns the updated ref\r\n     */\r\n    public scaleToRef(scale: number, ref: Polar) {\r\n        ref.radius = this.radius * scale;\r\n        ref.theta = this.theta * scale;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Scales the current polar and returns a new polar with the scaled coordinates\r\n     * @param scale defines the multiplication factor\r\n     * @returns the scaled polar\r\n     */\r\n    public scale(scale: number) {\r\n        const ref = new Polar(0, 0);\r\n        this.scaleToRef(scale, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Scales the current polar\r\n     * @param scale defines the multiplication factor\r\n     * @returns the current polar\r\n     */\r\n    public scaleInPlace(scale: number) {\r\n        this.scaleToRef(scale, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the current polar\r\n     * @param radius the new radius\r\n     * @param theta the new theta\r\n     * @returns the current polar\r\n     */\r\n    public set(radius: number, theta: number) {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the current polar\r\n     * @param value the new values\r\n     * @returns the current polar\r\n     */\r\n    public setAll(value: number) {\r\n        this.set(value, value);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the rectangular coordinates of the current Polar\r\n     * @param ref the reference to assign the result\r\n     * @returns the updated reference\r\n     */\r\n    public toVector2ToRef(ref: Vector2): Vector2 {\r\n        const x = this.radius * Math.cos(this.theta);\r\n        const y = this.radius * Math.sin(this.theta);\r\n        ref.set(x, y);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Gets the rectangular coordinates of the current Polar\r\n     * @returns the rectangular coordinates\r\n     */\r\n    public toVector2(): Vector2 {\r\n        const ref = new Vector2(0, 0);\r\n        return this.toVector2ToRef(ref);\r\n    }\r\n\r\n    /**\r\n     * Converts a given Vector2 to its polar coordinates\r\n     * @param v the Vector2 to convert\r\n     * @param ref the reference to assign the result\r\n     * @returns the updated reference\r\n     */\r\n    public static FromVector2ToRef(v: Vector2, ref: Polar): Polar {\r\n        const theta = Math.sign(v.y) * Math.acos(v.x / v.length());\r\n        ref.radius = v.length();\r\n        ref.theta = theta;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Converts a given Vector2 to its polar coordinates\r\n     * @param v the Vector2 to convert\r\n     * @returns a Polar\r\n     */\r\n    public static FromVector2(v: Vector2): Polar {\r\n        const polar = new Polar(0, 0);\r\n        Polar.FromVector2ToRef(v, polar);\r\n        return polar;\r\n    }\r\n\r\n    /**\r\n     * Converts an array of floats to a polar\r\n     * @param array the array to convert\r\n     * @returns the converted polar\r\n     */\r\n    public static FromArray(array: number[]) {\r\n        return new Polar(array[0], array[1]);\r\n    }\r\n}\r\n\r\n/**\r\n * Class used for (radius, theta, phi) vector representation.\r\n */\r\nexport class Spherical {\r\n    public radius: number;\r\n    public theta: number;\r\n    public phi: number;\r\n\r\n    /**\r\n     * @param radius spherical radius\r\n     * @param theta angle from positive y axis to radial line from 0 to PI (vertical)\r\n     * @param phi angle from positive x axis measured anticlockwise from -PI to PI (horizontal)\r\n     */\r\n    constructor(radius: number, theta: number, phi: number) {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n        this.phi = phi;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name\r\n     * @returns the string \"Spherical\"\r\n     */\r\n    public getClassName() {\r\n        return \"Spherical\";\r\n    }\r\n\r\n    /**\r\n     * Converts the current spherical to a string\r\n     * @returns the current spherical as a string\r\n     */\r\n    public toString() {\r\n        return JSON.stringify(this);\r\n    }\r\n\r\n    /**\r\n     * Converts the current spherical to an array\r\n     * @reutrns the current spherical as an array\r\n     */\r\n    public asArray() {\r\n        return [this.radius, this.theta, this.phi];\r\n    }\r\n\r\n    /**\r\n     * Adds the current Spherical and the given Spherical and stores the result\r\n     * @param spherical the spherical to add\r\n     * @param ref the spherical to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public addToRef(spherical: Spherical, ref: Spherical) {\r\n        ref.radius = this.radius + spherical.radius;\r\n        ref.theta = this.theta + spherical.theta;\r\n        ref.phi = this.phi + spherical.phi;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Adds the current Spherical and the given Spherical\r\n     * @param spherical the spherical to add\r\n     * @returns the sum spherical\r\n     */\r\n    public add(spherical: Spherical) {\r\n        const ref = new Spherical(0, 0, 0);\r\n        this.addToRef(spherical, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Adds the given spherical to the current spherical\r\n     * @param spherical the spherical to add\r\n     * @returns the current spherical\r\n     */\r\n    public addInPlace(spherical: Spherical) {\r\n        this.addToRef(spherical, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds the provided values to the current spherical\r\n     * @param radius the amount to add to the radius\r\n     * @param theta the amount to add to the theta\r\n     * @param phi the amount to add to the phi\r\n     * @returns the current spherical\r\n     */\r\n    public addInPlaceFromFloats(radius: number, theta: number, phi: number) {\r\n        this.radius += radius;\r\n        this.theta += theta;\r\n        this.phi += phi;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given Spherical from the current Spherical and stores the result\r\n     * @param spherical the spherical to subtract\r\n     * @param ref the spherical to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public subtractToRef(spherical: Spherical, ref: Spherical) {\r\n        ref.radius = this.radius - spherical.radius;\r\n        ref.theta = this.theta - spherical.theta;\r\n        ref.phi = this.phi - spherical.phi;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given Spherical from the current Spherical\r\n     * @param spherical the spherical to subtract\r\n     * @returns the difference spherical\r\n     */\r\n    public subtract(spherical: Spherical) {\r\n        const ref = new Spherical(0, 0, 0);\r\n        this.subtractToRef(spherical, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given Spherical from the current Spherical\r\n     * @param spherical the spherical to subtract\r\n     * @returns the current spherical\r\n     */\r\n    public subtractInPlace(spherical: Spherical) {\r\n        this.subtractToRef(spherical, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given floats from the current spherical\r\n     * @param radius the amount to subtract from the radius\r\n     * @param theta the amount to subtract from the theta\r\n     * @param phi the amount to subtract from the phi\r\n     * @param ref the spherical to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public subtractFromFloatsToRef(radius: number, theta: number, phi: number, ref: Spherical) {\r\n        ref.radius = this.radius - radius;\r\n        ref.theta = this.theta - theta;\r\n        ref.phi = this.phi - phi;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given floats from the current spherical\r\n     * @param radius the amount to subtract from the radius\r\n     * @param theta the amount to subtract from the theta\r\n     * @param phi the amount to subtract from the phi\r\n     * @returns the difference spherical\r\n     */\r\n    public subtractFromFloats(radius: number, theta: number, phi: number) {\r\n        const ref = new Spherical(0, 0, 0);\r\n        this.subtractFromFloatsToRef(radius, theta, phi, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the given Spherical with the current Spherical and stores the result\r\n     * @param spherical the spherical to multiply\r\n     * @param ref the spherical to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public multiplyToRef(spherical: Spherical, ref: Spherical) {\r\n        ref.radius = this.radius * spherical.radius;\r\n        ref.theta = this.theta * spherical.theta;\r\n        ref.phi = this.phi * spherical.phi;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the given Spherical with the current Spherical\r\n     * @param spherical the spherical to multiply\r\n     * @returns the product spherical\r\n     */\r\n    public multiply(spherical: Spherical) {\r\n        const ref = new Spherical(0, 0, 0);\r\n        this.multiplyToRef(spherical, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the given Spherical with the current Spherical\r\n     * @param spherical the spherical to multiply\r\n     * @returns the current spherical\r\n     */\r\n    public multiplyInPlace(spherical: Spherical) {\r\n        this.multiplyToRef(spherical, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Spherical by the given Spherical and stores the result\r\n     * @param spherical the spherical to divide\r\n     * @param ref the spherical to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public divideToRef(spherical: Spherical, ref: Spherical) {\r\n        ref.radius = this.radius / spherical.radius;\r\n        ref.theta = this.theta / spherical.theta;\r\n        ref.phi = this.phi / spherical.phi;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Spherical by the given Spherical\r\n     * @param spherical the spherical to divide\r\n     * @returns the quotient spherical\r\n     */\r\n    public divide(spherical: Spherical) {\r\n        const ref = new Spherical(0, 0, 0);\r\n        this.divideToRef(spherical, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Spherical by the given Spherical\r\n     * @param spherical the spherical to divide\r\n     * @returns the current spherical\r\n     */\r\n    public divideInPlace(spherical: Spherical) {\r\n        this.divideToRef(spherical, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clones the current spherical\r\n     * @returns a clone of the current spherical\r\n     */\r\n    public clone() {\r\n        return new Spherical(this.radius, this.theta, this.phi);\r\n    }\r\n\r\n    /**\r\n     * Copies the source spherical into the current spherical\r\n     * @param source the spherical to copy from\r\n     * @returns the current spherical\r\n     */\r\n    public copyFrom(source: Spherical) {\r\n        this.radius = source.radius;\r\n        this.theta = source.theta;\r\n        this.phi = source.phi;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copies the given values into the current spherical\r\n     * @param radius the radius to use\r\n     * @param theta the theta to use\r\n     * @param phi the phi to use\r\n     * @returns the current spherical\r\n     */\r\n    public copyFromFloats(radius: number, theta: number, phi: number) {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n        this.phi = phi;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scales the current spherical and stores the result\r\n     * @param scale defines the multiplication factor\r\n     * @param ref where to store the result\r\n     * @returns the updated ref\r\n     */\r\n    public scaleToRef(scale: number, ref: Spherical) {\r\n        ref.radius = this.radius * scale;\r\n        ref.theta = this.theta * scale;\r\n        ref.phi = this.phi * scale;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Scales the current spherical and returns a new spherical with the scaled coordinates\r\n     * @param scale defines the multiplication factor\r\n     * @returns the scaled spherical\r\n     */\r\n    public scale(scale: number) {\r\n        const ref = new Spherical(0, 0, 0);\r\n        this.scaleToRef(scale, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Scales the current spherical\r\n     * @param scale defines the multiplication factor\r\n     * @returns the current spherical\r\n     */\r\n    public scaleInPlace(scale: number) {\r\n        this.scaleToRef(scale, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the current spherical\r\n     * @param radius the new radius\r\n     * @param theta the new theta\r\n     * @param phi the new phi\r\n     * @returns the current spherical\r\n     */\r\n    public set(radius: number, theta: number, phi: number) {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n        this.phi = phi;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the current spherical\r\n     * @param value the new values\r\n     * @returns the current spherical\r\n     */\r\n    public setAll(value: number) {\r\n        this.set(value, value, value);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Assigns the rectangular coordinates of the current Spherical to a Vector3\r\n     * @param ref the Vector3 to update\r\n     * @returns the updated Vector3\r\n     */\r\n    public toVector3ToRef(ref: DeepImmutable<Vector3>): Vector3 {\r\n        const x = this.radius * Math.sin(this.theta) * Math.cos(this.phi);\r\n        const y = this.radius * Math.cos(this.theta);\r\n        const z = this.radius * Math.sin(this.theta) * Math.sin(this.phi);\r\n        ref.set(x, y, z);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Gets a Vector3 from the current spherical coordinates\r\n     * @returns the (x, y,z) form of the current Spherical\r\n     */\r\n    public toVector3(): Vector3 {\r\n        const ref = new Vector3(0, 0, 0);\r\n        return this.toVector3ToRef(ref);\r\n    }\r\n\r\n    /**\r\n     * Assigns the spherical coordinates from a Vector3\r\n     * @param vector the vector to convert\r\n     * @param ref the Spherical to update\r\n     * @returns the updated ref\r\n     */\r\n    public static FromVector3ToRef(vector: DeepImmutable<Vector3>, ref: Spherical): Spherical {\r\n        ref.radius = vector.length();\r\n        ref.theta = Math.acos(vector.y / ref.radius);\r\n        ref.phi = Math.atan2(vector.z, vector.x);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Gets a Spherical from a Vector3\r\n     * @param vector defines the vector in (x, y, z) coordinate space\r\n     * @returns a new Spherical\r\n     */\r\n    public static FromVector3(vector: DeepImmutable<Vector3>): Spherical {\r\n        const spherical = new Spherical(0, 0, 0);\r\n        Spherical.FromVector3ToRef(vector, spherical);\r\n        return spherical;\r\n    }\r\n\r\n    /**\r\n     * Converts an array of floats to a spherical\r\n     * @param array the array to convert\r\n     * @returns the converted spherical\r\n     */\r\n    public static FromArray(array: number[]) {\r\n        return new Spherical(array[0], array[1], array[2]);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}