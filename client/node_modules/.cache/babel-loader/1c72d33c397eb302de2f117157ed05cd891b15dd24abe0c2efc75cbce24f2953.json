{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { BlurPostProcess } from \"./blurPostProcess.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize } from \"../Misc/decorators.js\";\n/**\n * The DepthOfFieldBlurPostProcess applied a blur in a give direction.\n * This blur differs from the standard BlurPostProcess as it attempts to avoid blurring pixels\n * based on samples that have a large difference in distance than the center pixel.\n * See section 2.6.2 http://fileadmin.cs.lth.se/cs/education/edan35/lectures/12dof.pdf\n */\nexport class DepthOfFieldBlurPostProcess extends BlurPostProcess {\n  /**\n   * Creates a new instance DepthOfFieldBlurPostProcess\n   * @param name The name of the effect.\n   * @param scene The scene the effect belongs to.\n   * @param direction The direction the blur should be applied.\n   * @param kernel The size of the kernel used to blur.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param circleOfConfusion The circle of confusion + depth map to be used to avoid blurring across edges\n   * @param imageToBlur The image to apply the blur to (default: Current rendered frame)\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType Type of textures used when performing the post process. (default: 0)\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n   * @param textureFormat Format of textures used when performing the post process. (default: TEXTUREFORMAT_RGBA)\n   */\n  constructor(name, scene, direction, kernel, options, camera, circleOfConfusion, imageToBlur = null, samplingMode = Texture.BILINEAR_SAMPLINGMODE, engine, reusable, textureType = 0, blockCompilation = false, textureFormat = 5) {\n    super(name, direction, kernel, options, camera,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    samplingMode = 2, engine, reusable, textureType, `#define DOF 1\\r\\n`, blockCompilation, textureFormat);\n    this.direction = direction;\n    this.externalTextureSamplerBinding = !!imageToBlur;\n    this.onApplyObservable.add(effect => {\n      if (imageToBlur != null) {\n        effect.setTextureFromPostProcess(\"textureSampler\", imageToBlur);\n      }\n      effect.setTextureFromPostProcessOutput(\"circleOfConfusionSampler\", circleOfConfusion);\n    });\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"DepthOfFieldBlurPostProcess\" string\n   */\n  getClassName() {\n    return \"DepthOfFieldBlurPostProcess\";\n  }\n}\n__decorate([serialize()], DepthOfFieldBlurPostProcess.prototype, \"direction\", void 0);\nRegisterClass(\"BABYLON.DepthOfFieldBlurPostProcess\", DepthOfFieldBlurPostProcess);","map":{"version":3,"mappings":";AAIA,SAASA,OAAO,QAAQ,kCAAgC;AAExD,SAASC,eAAe,QAAQ,sBAAoB;AAIpD,SAASC,aAAa,QAAQ,sBAAoB;AAClD,SAASC,SAAS,QAAQ,uBAAqB;AAE/C;;;;;;AAMA,OAAM,MAAOC,2BAA4B,SAAQH,eAAe;EAe5D;;;;;;;;;;;;;;;;;EAiBAI,YACIC,IAAY,EACZC,KAAY,EACZC,SAAkB,EAClBC,MAAc,EACdC,OAAoC,EACpCC,MAAwB,EACxBC,iBAA8B,EAC9BC,cAAqC,IAAI,EACzCC,YAAY,GAAGd,OAAO,CAACe,qBAAqB,EAC5CC,MAAe,EACfC,QAAkB,EAClBC,WAAW,GAAG,mBAAU,uBACxB;IAGA,KAAK,CACDZ,IAAI,EACJE,SAAS,EACTC,MAAM,EACNC,OAAO,EACPC,MAAM;IACN;IACCG,YAAY,GAAG,SAAU,4CAE1B,kBACW,EACXK;IAKJ,IAAI,CAACX,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACY,6BAA6B,GAAG,CAAC,CAACP,WAAW;IAElD,IAAI,CAACQ,iBAAiB,CAACC,GAAG,CAAEC,MAAc,IAAI;MAC1C,IAAIV,WAAW,IAAI,IAAI,EAAE;QACrBU,MAAM,CAACC,yBAAyB,CAAC,gBAAgB,EAAEX,WAAW,CAAC;;MAEnEU,MAAM,CAACE,+BAA+B,CAAC,0BAA0B,EAAEb,iBAAiB,CAAC;IACzF,CAAC,CAAC;EACN;EAlEA;;;;EAIOc,YAAY;IACf,OAAO,6BAA6B;EACxC;;AARAC,YADCxB,SAAS,EAAE,8DACc;AAuE9BD,aAAa,CAAC,qCAAqC,EAAEE,2BAA2B,CAAC","names":["Texture","BlurPostProcess","RegisterClass","serialize","DepthOfFieldBlurPostProcess","constructor","name","scene","direction","kernel","options","camera","circleOfConfusion","imageToBlur","samplingMode","BILINEAR_SAMPLINGMODE","engine","reusable","textureType","textureFormat","externalTextureSamplerBinding","onApplyObservable","add","effect","setTextureFromPostProcess","setTextureFromPostProcessOutput","getClassName","__decorate"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/depthOfFieldBlurPostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Vector2 } from \"../Maths/math.vector\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { BlurPostProcess } from \"./blurPostProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize } from \"../Misc/decorators\";\r\n\r\n/**\r\n * The DepthOfFieldBlurPostProcess applied a blur in a give direction.\r\n * This blur differs from the standard BlurPostProcess as it attempts to avoid blurring pixels\r\n * based on samples that have a large difference in distance than the center pixel.\r\n * See section 2.6.2 http://fileadmin.cs.lth.se/cs/education/edan35/lectures/12dof.pdf\r\n */\r\nexport class DepthOfFieldBlurPostProcess extends BlurPostProcess {\r\n    /**\r\n     * The direction the blur should be applied\r\n     */\r\n    @serialize()\r\n    public direction: Vector2;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"DepthOfFieldBlurPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"DepthOfFieldBlurPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance DepthOfFieldBlurPostProcess\r\n     * @param name The name of the effect.\r\n     * @param scene The scene the effect belongs to.\r\n     * @param direction The direction the blur should be applied.\r\n     * @param kernel The size of the kernel used to blur.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param circleOfConfusion The circle of confusion + depth map to be used to avoid blurring across edges\r\n     * @param imageToBlur The image to apply the blur to (default: Current rendered frame)\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     * @param textureFormat Format of textures used when performing the post process. (default: TEXTUREFORMAT_RGBA)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        scene: Scene,\r\n        direction: Vector2,\r\n        kernel: number,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        circleOfConfusion: PostProcess,\r\n        imageToBlur: Nullable<PostProcess> = null,\r\n        samplingMode = Texture.BILINEAR_SAMPLINGMODE,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false,\r\n        textureFormat = Constants.TEXTUREFORMAT_RGBA\r\n    ) {\r\n        super(\r\n            name,\r\n            direction,\r\n            kernel,\r\n            options,\r\n            camera,\r\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n            (samplingMode = Constants.TEXTURE_BILINEAR_SAMPLINGMODE),\r\n            engine,\r\n            reusable,\r\n            textureType,\r\n            `#define DOF 1\\r\\n`,\r\n            blockCompilation,\r\n            textureFormat\r\n        );\r\n\r\n        this.direction = direction;\r\n        this.externalTextureSamplerBinding = !!imageToBlur;\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            if (imageToBlur != null) {\r\n                effect.setTextureFromPostProcess(\"textureSampler\", imageToBlur);\r\n            }\r\n            effect.setTextureFromPostProcessOutput(\"circleOfConfusionSampler\", circleOfConfusion);\r\n        });\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.DepthOfFieldBlurPostProcess\", DepthOfFieldBlurPostProcess);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}