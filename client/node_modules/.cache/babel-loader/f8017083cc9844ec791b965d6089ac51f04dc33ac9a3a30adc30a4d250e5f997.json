{"ast":null,"code":"// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"importanceSampling\";\nconst shader = `vec3 hemisphereCosSample(vec2 u) {\nfloat phi=2.*PI*u.x;\nfloat cosTheta2=1.-u.y;\nfloat cosTheta=sqrt(cosTheta2);\nfloat sinTheta=sqrt(1.-cosTheta2);\nreturn vec3(sinTheta*cos(phi),sinTheta*sin(phi),cosTheta);\n}\nvec3 hemisphereImportanceSampleDggx(vec2 u,float a) {\nfloat phi=2.*PI*u.x;\nfloat cosTheta2=(1.-u.y)/(1.+(a+1.)*((a-1.)*u.y));\nfloat cosTheta=sqrt(cosTheta2);\nfloat sinTheta=sqrt(1.-cosTheta2);\nreturn vec3(sinTheta*cos(phi),sinTheta*sin(phi),cosTheta);\n}\nvec3 hemisphereImportanceSampleDCharlie(vec2 u,float a) { \nfloat phi=2.*PI*u.x;\nfloat sinTheta=pow(u.y,a/(2.*a+1.));\nfloat cosTheta=sqrt(1.-sinTheta*sinTheta);\nreturn vec3(sinTheta*cos(phi),sinTheta*sin(phi),cosTheta);\n}`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const importanceSampling = {\n  name,\n  shader\n};","map":{"version":3,"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,8BAA4B;AAExD,MAAMC,IAAI,GAAG,oBAAoB;AACjC,MAAMC,MAAM,GAAG;;;;;;;;;;;;;;;;;;;EAmBb;AACF;AACAF,WAAW,CAACG,oBAAoB,CAACF,IAAI,CAAC,GAAGC,MAAM;AAC/C;AACA,OAAO,MAAME,kBAAkB,GAAG;EAAEH,IAAI;EAAEC;AAAM,CAAE","names":["ShaderStore","name","shader","IncludesShadersStore","importanceSampling"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Shaders/ShadersInclude/importanceSampling.ts"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"importanceSampling\";\nconst shader = `vec3 hemisphereCosSample(vec2 u) {\rfloat phi=2.*PI*u.x;\rfloat cosTheta2=1.-u.y;\rfloat cosTheta=sqrt(cosTheta2);\rfloat sinTheta=sqrt(1.-cosTheta2);\rreturn vec3(sinTheta*cos(phi),sinTheta*sin(phi),cosTheta);\r}\rvec3 hemisphereImportanceSampleDggx(vec2 u,float a) {\rfloat phi=2.*PI*u.x;\rfloat cosTheta2=(1.-u.y)/(1.+(a+1.)*((a-1.)*u.y));\rfloat cosTheta=sqrt(cosTheta2);\rfloat sinTheta=sqrt(1.-cosTheta2);\rreturn vec3(sinTheta*cos(phi),sinTheta*sin(phi),cosTheta);\r}\rvec3 hemisphereImportanceSampleDCharlie(vec2 u,float a) { \rfloat phi=2.*PI*u.x;\rfloat sinTheta=pow(u.y,a/(2.*a+1.));\rfloat cosTheta=sqrt(1.-sinTheta*sinTheta);\rreturn vec3(sinTheta*cos(phi),sinTheta*sin(phi),cosTheta);\r}`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const importanceSampling = { name, shader };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}