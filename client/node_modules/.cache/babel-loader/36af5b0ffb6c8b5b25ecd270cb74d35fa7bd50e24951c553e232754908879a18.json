{"ast":null,"code":"import { CameraInputsManager } from \"./cameraInputsManager.js\";\nimport { FreeCameraKeyboardMoveInput } from \"../Cameras/Inputs/freeCameraKeyboardMoveInput.js\";\nimport { FreeCameraMouseInput } from \"../Cameras/Inputs/freeCameraMouseInput.js\";\nimport { FreeCameraMouseWheelInput } from \"../Cameras/Inputs/freeCameraMouseWheelInput.js\";\nimport { FreeCameraTouchInput } from \"../Cameras/Inputs/freeCameraTouchInput.js\";\n/**\n * Default Inputs manager for the FreeCamera.\n * It groups all the default supported inputs for ease of use.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\n */\nexport class FreeCameraInputsManager extends CameraInputsManager {\n  /**\n   * Instantiates a new FreeCameraInputsManager.\n   * @param camera Defines the camera the inputs belong to\n   */\n  constructor(camera) {\n    super(camera);\n    /**\n     * @internal\n     */\n    this._mouseInput = null;\n    /**\n     * @internal\n     */\n    this._mouseWheelInput = null;\n  }\n  /**\n   * Add keyboard input support to the input manager.\n   * @returns the current input manager\n   */\n  addKeyboard() {\n    this.add(new FreeCameraKeyboardMoveInput());\n    return this;\n  }\n  /**\n   * Add mouse input support to the input manager.\n   * @param touchEnabled if the FreeCameraMouseInput should support touch (default: true)\n   * @returns the current input manager\n   */\n  addMouse(touchEnabled = true) {\n    if (!this._mouseInput) {\n      this._mouseInput = new FreeCameraMouseInput(touchEnabled);\n      this.add(this._mouseInput);\n    }\n    return this;\n  }\n  /**\n   * Removes the mouse input support from the manager\n   * @returns the current input manager\n   */\n  removeMouse() {\n    if (this._mouseInput) {\n      this.remove(this._mouseInput);\n    }\n    return this;\n  }\n  /**\n   * Add mouse wheel input support to the input manager.\n   * @returns the current input manager\n   */\n  addMouseWheel() {\n    if (!this._mouseWheelInput) {\n      this._mouseWheelInput = new FreeCameraMouseWheelInput();\n      this.add(this._mouseWheelInput);\n    }\n    return this;\n  }\n  /**\n   * Removes the mouse wheel input support from the manager\n   * @returns the current input manager\n   */\n  removeMouseWheel() {\n    if (this._mouseWheelInput) {\n      this.remove(this._mouseWheelInput);\n    }\n    return this;\n  }\n  /**\n   * Add touch input support to the input manager.\n   * @returns the current input manager\n   */\n  addTouch() {\n    this.add(new FreeCameraTouchInput());\n    return this;\n  }\n  /**\n   * Remove all attached input methods from a camera\n   */\n  clear() {\n    super.clear();\n    this._mouseInput = null;\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,mBAAmB,QAAQ,0BAAwB;AAC5D,SAASC,2BAA2B,QAAQ,kDAAgD;AAC5F,SAASC,oBAAoB,QAAQ,2CAAyC;AAC9E,SAASC,yBAAyB,QAAQ,gDAA8C;AACxF,SAASC,oBAAoB,QAAQ,2CAAyC;AAG9E;;;;;AAKA,OAAM,MAAOC,uBAAwB,SAAQL,mBAA+B;EASxE;;;;EAIAM,YAAYC,MAAkB;IAC1B,KAAK,CAACA,MAAM,CAAC;IAbjB;;;IAGO,gBAAW,GAAmC,IAAI;IACzD;;;IAGO,qBAAgB,GAAwC,IAAI;EAOnE;EAEA;;;;EAIAC,WAAW;IACP,IAAI,CAACC,GAAG,CAAC,IAAIR,2BAA2B,EAAE,CAAC;IAC3C,OAAO,IAAI;EACf;EAEA;;;;;EAKAS,QAAQ,CAACC,YAAY,GAAG,IAAI;IACxB,IAAI,CAAC,IAAI,CAACC,WAAW,EAAE;MACnB,IAAI,CAACA,WAAW,GAAG,IAAIV,oBAAoB,CAACS,YAAY,CAAC;MACzD,IAAI,CAACF,GAAG,CAAC,IAAI,CAACG,WAAW,CAAC;;IAE9B,OAAO,IAAI;EACf;EAEA;;;;EAIAC,WAAW;IACP,IAAI,IAAI,CAACD,WAAW,EAAE;MAClB,IAAI,CAACE,MAAM,CAAC,IAAI,CAACF,WAAW,CAAC;;IAEjC,OAAO,IAAI;EACf;EAEA;;;;EAIAG,aAAa;IACT,IAAI,CAAC,IAAI,CAACC,gBAAgB,EAAE;MACxB,IAAI,CAACA,gBAAgB,GAAG,IAAIb,yBAAyB,EAAE;MACvD,IAAI,CAACM,GAAG,CAAC,IAAI,CAACO,gBAAgB,CAAC;;IAEnC,OAAO,IAAI;EACf;EAEA;;;;EAIAC,gBAAgB;IACZ,IAAI,IAAI,CAACD,gBAAgB,EAAE;MACvB,IAAI,CAACF,MAAM,CAAC,IAAI,CAACE,gBAAgB,CAAC;;IAEtC,OAAO,IAAI;EACf;EAEA;;;;EAIAE,QAAQ;IACJ,IAAI,CAACT,GAAG,CAAC,IAAIL,oBAAoB,EAAE,CAAC;IACpC,OAAO,IAAI;EACf;EAEA;;;EAGOe,KAAK;IACR,KAAK,CAACA,KAAK,EAAE;IACb,IAAI,CAACP,WAAW,GAAG,IAAI;EAC3B","names":["CameraInputsManager","FreeCameraKeyboardMoveInput","FreeCameraMouseInput","FreeCameraMouseWheelInput","FreeCameraTouchInput","FreeCameraInputsManager","constructor","camera","addKeyboard","add","addMouse","touchEnabled","_mouseInput","removeMouse","remove","addMouseWheel","_mouseWheelInput","removeMouseWheel","addTouch","clear"],"sourceRoot":"","sources":["../../../../lts/core/generated/Cameras/freeCameraInputsManager.ts"],"sourcesContent":["import type { FreeCamera } from \"./freeCamera\";\r\nimport { CameraInputsManager } from \"./cameraInputsManager\";\r\nimport { FreeCameraKeyboardMoveInput } from \"../Cameras/Inputs/freeCameraKeyboardMoveInput\";\r\nimport { FreeCameraMouseInput } from \"../Cameras/Inputs/freeCameraMouseInput\";\r\nimport { FreeCameraMouseWheelInput } from \"../Cameras/Inputs/freeCameraMouseWheelInput\";\r\nimport { FreeCameraTouchInput } from \"../Cameras/Inputs/freeCameraTouchInput\";\r\nimport type { Nullable } from \"../types\";\r\n\r\n/**\r\n * Default Inputs manager for the FreeCamera.\r\n * It groups all the default supported inputs for ease of use.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class FreeCameraInputsManager extends CameraInputsManager<FreeCamera> {\r\n    /**\r\n     * @internal\r\n     */\r\n    public _mouseInput: Nullable<FreeCameraMouseInput> = null;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _mouseWheelInput: Nullable<FreeCameraMouseWheelInput> = null;\r\n    /**\r\n     * Instantiates a new FreeCameraInputsManager.\r\n     * @param camera Defines the camera the inputs belong to\r\n     */\r\n    constructor(camera: FreeCamera) {\r\n        super(camera);\r\n    }\r\n\r\n    /**\r\n     * Add keyboard input support to the input manager.\r\n     * @returns the current input manager\r\n     */\r\n    addKeyboard(): FreeCameraInputsManager {\r\n        this.add(new FreeCameraKeyboardMoveInput());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add mouse input support to the input manager.\r\n     * @param touchEnabled if the FreeCameraMouseInput should support touch (default: true)\r\n     * @returns the current input manager\r\n     */\r\n    addMouse(touchEnabled = true): FreeCameraInputsManager {\r\n        if (!this._mouseInput) {\r\n            this._mouseInput = new FreeCameraMouseInput(touchEnabled);\r\n            this.add(this._mouseInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes the mouse input support from the manager\r\n     * @returns the current input manager\r\n     */\r\n    removeMouse(): FreeCameraInputsManager {\r\n        if (this._mouseInput) {\r\n            this.remove(this._mouseInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add mouse wheel input support to the input manager.\r\n     * @returns the current input manager\r\n     */\r\n    addMouseWheel(): FreeCameraInputsManager {\r\n        if (!this._mouseWheelInput) {\r\n            this._mouseWheelInput = new FreeCameraMouseWheelInput();\r\n            this.add(this._mouseWheelInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes the mouse wheel input support from the manager\r\n     * @returns the current input manager\r\n     */\r\n    removeMouseWheel(): FreeCameraInputsManager {\r\n        if (this._mouseWheelInput) {\r\n            this.remove(this._mouseWheelInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add touch input support to the input manager.\r\n     * @returns the current input manager\r\n     */\r\n    addTouch(): FreeCameraInputsManager {\r\n        this.add(new FreeCameraTouchInput());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove all attached input methods from a camera\r\n     */\r\n    public clear(): void {\r\n        super.clear();\r\n        this._mouseInput = null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}