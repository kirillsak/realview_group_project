{"ast":null,"code":"import { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { WebVRController } from \"./webVRController.js\";\nimport { PoseEnabledControllerHelper } from \"./poseEnabledController.js\";\n/**\n * Generic Controller\n */\nexport class GenericController extends WebVRController {\n  /**\n   * Creates a new GenericController from a gamepad\n   * @param vrGamepad the gamepad that the controller should be created from\n   */\n  constructor(vrGamepad) {\n    super(vrGamepad);\n  }\n  /**\n   * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\n   * @param scene scene in which to add meshes\n   * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\n   */\n  initControllerMesh(scene, meshLoaded) {\n    SceneLoader.ImportMesh(\"\", GenericController.MODEL_BASE_URL, GenericController.MODEL_FILENAME, scene, newMeshes => {\n      this._defaultModel = newMeshes[1];\n      this.attachToMesh(this._defaultModel);\n      if (meshLoaded) {\n        meshLoaded(this._defaultModel);\n      }\n    });\n  }\n  /**\n   * Called once for each button that changed state since the last frame\n   * @param buttonIdx Which button index changed\n   * @param state New state of the button\n   */\n  _handleButtonChange(buttonIdx, state) {\n    console.log(\"Button id: \" + buttonIdx + \"state: \");\n    console.dir(state);\n  }\n}\n/**\n * Base Url for the controller model.\n */\nGenericController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/generic/\";\n/**\n * File name for the controller model.\n */\nGenericController.MODEL_FILENAME = \"generic.babylon\";\nPoseEnabledControllerHelper._DefaultControllerFactory = gamepadInfo => new GenericController(gamepadInfo);","map":{"version":3,"mappings":"AAEA,SAASA,WAAW,QAAQ,8BAA4B;AAExD,SAASC,eAAe,QAAQ,sBAAoB;AAEpD,SAASC,2BAA2B,QAAQ,4BAA0B;AAEtE;;;AAGA,OAAM,MAAOC,iBAAkB,SAAQF,eAAe;EAUlD;;;;EAIAG,YAAYC,SAAc;IACtB,KAAK,CAACA,SAAS,CAAC;EACpB;EAEA;;;;;EAKOC,kBAAkB,CAACC,KAAY,EAAEC,UAAyC;IAC7ER,WAAW,CAACS,UAAU,CAAC,EAAE,EAAEN,iBAAiB,CAACO,cAAc,EAAEP,iBAAiB,CAACQ,cAAc,EAAEJ,KAAK,EAAGK,SAAS,IAAI;MAChH,IAAI,CAACC,aAAa,GAAGD,SAAS,CAAC,CAAC,CAAC;MACjC,IAAI,CAACE,YAAY,CAAC,IAAI,CAACD,aAAa,CAAC;MACrC,IAAIL,UAAU,EAAE;QACZA,UAAU,CAAC,IAAI,CAACK,aAAa,CAAC;;IAEtC,CAAC,CAAC;EACN;EAEA;;;;;EAKUE,mBAAmB,CAACC,SAAiB,EAAEC,KAA4B;IACzEC,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGH,SAAS,GAAG,SAAS,CAAC;IAClDE,OAAO,CAACE,GAAG,CAACH,KAAK,CAAC;EACtB;;AAxCA;;;AAGuBd,gCAAc,GAAW,4CAA4C;AAC5F;;;AAGuBA,gCAAc,GAAW,iBAAiB;AAoCrED,2BAA2B,CAACmB,yBAAyB,GAAIC,WAAgB,IAAK,IAAInB,iBAAiB,CAACmB,WAAW,CAAC","names":["SceneLoader","WebVRController","PoseEnabledControllerHelper","GenericController","constructor","vrGamepad","initControllerMesh","scene","meshLoaded","ImportMesh","MODEL_BASE_URL","MODEL_FILENAME","newMeshes","_defaultModel","attachToMesh","_handleButtonChange","buttonIdx","state","console","log","dir","_DefaultControllerFactory","gamepadInfo"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Gamepads/Controllers/genericController.ts"],"sourcesContent":["import type { Scene } from \"../../scene\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\n\r\nimport { WebVRController } from \"./webVRController\";\r\nimport type { ExtendedGamepadButton } from \"./poseEnabledController\";\r\nimport { PoseEnabledControllerHelper } from \"./poseEnabledController\";\r\n\r\n/**\r\n * Generic Controller\r\n */\r\nexport class GenericController extends WebVRController {\r\n    /**\r\n     * Base Url for the controller model.\r\n     */\r\n    public static readonly MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/generic/\";\r\n    /**\r\n     * File name for the controller model.\r\n     */\r\n    public static readonly MODEL_FILENAME: string = \"generic.babylon\";\r\n\r\n    /**\r\n     * Creates a new GenericController from a gamepad\r\n     * @param vrGamepad the gamepad that the controller should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n    }\r\n\r\n    /**\r\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n     * @param scene scene in which to add meshes\r\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n     */\r\n    public initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void) {\r\n        SceneLoader.ImportMesh(\"\", GenericController.MODEL_BASE_URL, GenericController.MODEL_FILENAME, scene, (newMeshes) => {\r\n            this._defaultModel = newMeshes[1];\r\n            this.attachToMesh(this._defaultModel);\r\n            if (meshLoaded) {\r\n                meshLoaded(this._defaultModel);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called once for each button that changed state since the last frame\r\n     * @param buttonIdx Which button index changed\r\n     * @param state New state of the button\r\n     */\r\n    protected _handleButtonChange(buttonIdx: number, state: ExtendedGamepadButton) {\r\n        console.log(\"Button id: \" + buttonIdx + \"state: \");\r\n        console.dir(state);\r\n    }\r\n}\r\n\r\nPoseEnabledControllerHelper._DefaultControllerFactory = (gamepadInfo: any) => new GenericController(gamepadInfo);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}