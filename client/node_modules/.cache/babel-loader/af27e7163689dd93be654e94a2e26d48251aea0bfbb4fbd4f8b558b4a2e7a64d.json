{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Rendering/geometryBufferRendererSceneComponent.js\";\nimport \"../Shaders/screenSpaceCurvature.fragment.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The Screen Space curvature effect can help highlighting ridge and valley of a model.\n */\nexport class ScreenSpaceCurvaturePostProcess extends PostProcess {\n  /**\n   * Creates a new instance ScreenSpaceCurvaturePostProcess\n   * @param name The name of the effect.\n   * @param scene The scene containing the objects to blur according to their velocity.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType Type of textures used when performing the post process. (default: 0)\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n   */\n  constructor(name, scene, options, camera, samplingMode, engine, reusable, textureType = 0, blockCompilation = false) {\n    super(name, \"screenSpaceCurvature\", [\"curvature_ridge\", \"curvature_valley\"], [\"textureSampler\", \"normalSampler\"], options, camera, samplingMode, engine, reusable, undefined, textureType, undefined, null, blockCompilation);\n    /**\n     * Defines how much ridge the curvature effect displays.\n     */\n    this.ridge = 1;\n    /**\n     * Defines how much valley the curvature effect displays.\n     */\n    this.valley = 1;\n    this._geometryBufferRenderer = scene.enableGeometryBufferRenderer();\n    if (!this._geometryBufferRenderer) {\n      // Geometry buffer renderer is not supported. So, work as a passthrough.\n      Logger.Error(\"Multiple Render Target support needed for screen space curvature post process. Please use IsSupported test first.\");\n    } else {\n      // Geometry buffer renderer is supported.\n      this.onApply = effect => {\n        effect.setFloat(\"curvature_ridge\", 0.5 / Math.max(this.ridge * this.ridge, 1e-4));\n        effect.setFloat(\"curvature_valley\", 0.7 / Math.max(this.valley * this.valley, 1e-4));\n        const normalTexture = this._geometryBufferRenderer.getGBuffer().textures[1];\n        effect.setTexture(\"normalSampler\", normalTexture);\n      };\n    }\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"ScreenSpaceCurvaturePostProcess\" string\n   */\n  getClassName() {\n    return \"ScreenSpaceCurvaturePostProcess\";\n  }\n  /**\n   * Support test.\n   */\n  static get IsSupported() {\n    const engine = EngineStore.LastCreatedEngine;\n    if (!engine) {\n      return false;\n    }\n    return engine.getCaps().drawBuffersExtension;\n  }\n  /**\n   * @internal\n   */\n  static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(() => {\n      return new ScreenSpaceCurvaturePostProcess(parsedPostProcess.name, scene, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.textureType, parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  }\n}\n__decorate([serialize()], ScreenSpaceCurvaturePostProcess.prototype, \"ridge\", void 0);\n__decorate([serialize()], ScreenSpaceCurvaturePostProcess.prototype, \"valley\", void 0);\nRegisterClass(\"BABYLON.ScreenSpaceCurvaturePostProcess\", ScreenSpaceCurvaturePostProcess);","map":{"version":3,"mappings":";AACA,SAASA,MAAM,QAAQ,mBAAiB;AAIxC,SAASC,WAAW,QAAQ,kBAAgB;AAI5C,OAAO,sDAAoD;AAC3D,OAAO,6CAA2C;AAClD,SAASC,WAAW,QAAQ,2BAAyB;AACrD,SAASC,aAAa,QAAQ,sBAAoB;AAClD,SAASC,SAAS,EAAEC,mBAAmB,QAAQ,uBAAqB;AAKpE;;;AAGA,OAAM,MAAOC,+BAAgC,SAAQL,WAAW;EAuB5D;;;;;;;;;;;;EAYAM,YACIC,IAAY,EACZC,KAAY,EACZC,OAAoC,EACpCC,MAAwB,EACxBC,YAAqB,EACrBC,MAAe,EACfC,QAAkB,EAClBC,cAAsB,mBAAU;IAGhC,KAAK,CACDP,IAAI,EACJ,sBAAsB,EACtB,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACvC,CAAC,gBAAgB,EAAE,eAAe,CAAC,EACnCE,OAAO,EACPC,MAAM,EACNC,YAAY,EACZC,MAAM,EACNC,QAAQ,EACRE,SAAS,EACTD,WAAW,EACXC,SAAS,EACT,IAAI,EACJC,gBAAgB,CACnB;IA5DL;;;IAIO,UAAK,GAAW,CAAC;IAExB;;;IAIO,WAAM,GAAW,CAAC;IAoDrB,IAAI,CAACC,uBAAuB,GAAGT,KAAK,CAACU,4BAA4B,EAAE;IAEnE,IAAI,CAAC,IAAI,CAACD,uBAAuB,EAAE;MAC/B;MACAlB,MAAM,CAACoB,KAAK,CAAC,mHAAmH,CAAC;KACpI,MAAM;MACH;MACA,IAAI,CAACC,OAAO,GAAIC,MAAc,IAAI;QAC9BA,MAAM,CAACC,QAAQ,CAAC,iBAAiB,EAAE,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACC,KAAK,GAAG,IAAI,CAACA,KAAK,EAAE,IAAI,CAAC,CAAC;QACjFJ,MAAM,CAACC,QAAQ,CAAC,kBAAkB,EAAE,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACE,MAAM,GAAG,IAAI,CAACA,MAAM,EAAE,IAAI,CAAC,CAAC;QAEpF,MAAMC,aAAa,GAAG,IAAI,CAACV,uBAAwB,CAACW,UAAU,EAAE,CAACC,QAAQ,CAAC,CAAC,CAAC;QAC5ER,MAAM,CAACS,UAAU,CAAC,eAAe,EAAEH,aAAa,CAAC;MACrD,CAAC;;EAET;EA/DA;;;;EAIOI,YAAY;IACf,OAAO,iCAAiC;EAC5C;EA2DA;;;EAGO,WAAWC,WAAW;IACzB,MAAMpB,MAAM,GAAGX,WAAW,CAACgC,iBAAiB;IAC5C,IAAI,CAACrB,MAAM,EAAE;MACT,OAAO,KAAK;;IAGhB,OAAOA,MAAM,CAACsB,OAAO,EAAE,CAACC,oBAAoB;EAChD;EAEA;;;EAGO,OAAOC,MAAM,CAACC,iBAAsB,EAAEC,YAAoB,EAAE9B,KAAY,EAAE+B,OAAe;IAC5F,OAAOnC,mBAAmB,CAACoC,KAAK,CAC5B,MAAK;MACD,OAAO,IAAInC,+BAA+B,CACtCgC,iBAAiB,CAAC9B,IAAI,EACtBC,KAAK,EACL6B,iBAAiB,CAAC5B,OAAO,EACzB6B,YAAY,EACZD,iBAAiB,CAACI,wBAAwB,EAC1CjC,KAAK,CAACkC,SAAS,EAAE,EACjBL,iBAAiB,CAACvB,WAAW,EAC7BuB,iBAAiB,CAACxB,QAAQ,CAC7B;IACL,CAAC,EACDwB,iBAAiB,EACjB7B,KAAK,EACL+B,OAAO,CACV;EACL;;AA5GAI,YADCxC,SAAS,EAAE,8DACa;AAMzBwC,YADCxC,SAAS,EAAE,+DACc;AAyG9BD,aAAa,CAAC,yCAAyC,EAAEG,+BAA+B,CAAC","names":["Logger","PostProcess","EngineStore","RegisterClass","serialize","SerializationHelper","ScreenSpaceCurvaturePostProcess","constructor","name","scene","options","camera","samplingMode","engine","reusable","textureType","undefined","blockCompilation","_geometryBufferRenderer","enableGeometryBufferRenderer","Error","onApply","effect","setFloat","Math","max","ridge","valley","normalTexture","getGBuffer","textures","setTexture","getClassName","IsSupported","LastCreatedEngine","getCaps","drawBuffersExtension","_Parse","parsedPostProcess","targetCamera","rootUrl","Parse","renderTargetSamplingMode","getEngine","__decorate"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/screenSpaceCurvaturePostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { GeometryBufferRenderer } from \"../Rendering/geometryBufferRenderer\";\r\n\r\nimport \"../Rendering/geometryBufferRendererSceneComponent\";\r\nimport \"../Shaders/screenSpaceCurvature.fragment\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize, SerializationHelper } from \"../Misc/decorators\";\r\n\r\ndeclare type Engine = import(\"../Engines/engine\").Engine;\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The Screen Space curvature effect can help highlighting ridge and valley of a model.\r\n */\r\nexport class ScreenSpaceCurvaturePostProcess extends PostProcess {\r\n    /**\r\n     * Defines how much ridge the curvature effect displays.\r\n     */\r\n    @serialize()\r\n    public ridge: number = 1;\r\n\r\n    /**\r\n     * Defines how much valley the curvature effect displays.\r\n     */\r\n    @serialize()\r\n    public valley: number = 1;\r\n\r\n    private _geometryBufferRenderer: Nullable<GeometryBufferRenderer>;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"ScreenSpaceCurvaturePostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"ScreenSpaceCurvaturePostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance ScreenSpaceCurvaturePostProcess\r\n     * @param name The name of the effect.\r\n     * @param scene The scene containing the objects to blur according to their velocity.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        scene: Scene,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(\r\n            name,\r\n            \"screenSpaceCurvature\",\r\n            [\"curvature_ridge\", \"curvature_valley\"],\r\n            [\"textureSampler\", \"normalSampler\"],\r\n            options,\r\n            camera,\r\n            samplingMode,\r\n            engine,\r\n            reusable,\r\n            undefined,\r\n            textureType,\r\n            undefined,\r\n            null,\r\n            blockCompilation\r\n        );\r\n\r\n        this._geometryBufferRenderer = scene.enableGeometryBufferRenderer();\r\n\r\n        if (!this._geometryBufferRenderer) {\r\n            // Geometry buffer renderer is not supported. So, work as a passthrough.\r\n            Logger.Error(\"Multiple Render Target support needed for screen space curvature post process. Please use IsSupported test first.\");\r\n        } else {\r\n            // Geometry buffer renderer is supported.\r\n            this.onApply = (effect: Effect) => {\r\n                effect.setFloat(\"curvature_ridge\", 0.5 / Math.max(this.ridge * this.ridge, 1e-4));\r\n                effect.setFloat(\"curvature_valley\", 0.7 / Math.max(this.valley * this.valley, 1e-4));\r\n\r\n                const normalTexture = this._geometryBufferRenderer!.getGBuffer().textures[1];\r\n                effect.setTexture(\"normalSampler\", normalTexture);\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Support test.\r\n     */\r\n    public static get IsSupported(): boolean {\r\n        const engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            return false;\r\n        }\r\n\r\n        return engine.getCaps().drawBuffersExtension;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new ScreenSpaceCurvaturePostProcess(\r\n                    parsedPostProcess.name,\r\n                    scene,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.textureType,\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ScreenSpaceCurvaturePostProcess\", ScreenSpaceCurvaturePostProcess);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}