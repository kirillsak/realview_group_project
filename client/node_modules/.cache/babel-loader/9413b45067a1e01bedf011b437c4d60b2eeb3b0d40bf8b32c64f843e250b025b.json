{"ast":null,"code":"import { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Block used to test if the fragment shader is front facing\n */\nexport class FrontFacingBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new FrontFacingBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"FrontFacingBlock\";\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    if (state.target === NodeMaterialBlockTargets.Vertex) {\n      throw \"FrontFacingBlock must only be used in a fragment shader\";\n    }\n    const output = this._outputs[0];\n    state.compilationString += this._declareOutput(output, state) + ` = gl_FrontFacing ? 1.0 : 0.0;\\r\\n`;\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.FrontFacingBlock\", FrontFacingBlock);","map":{"version":3,"mappings":"AAAA,SAASA,iBAAiB,QAAQ,4BAA0B;AAC5D,SAASC,qCAAqC,QAAQ,sDAAoD;AAG1G,SAASC,wBAAwB,QAAQ,yCAAuC;AAChF,SAASC,aAAa,QAAQ,+BAA6B;AAC3D;;;AAGA,OAAM,MAAOC,gBAAiB,SAAQJ,iBAAiB;EACnD;;;;EAIAK,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,EAAEJ,wBAAwB,CAACK,QAAQ,CAAC;IAE9C,IAAI,CAACC,cAAc,CAAC,QAAQ,EAAEP,qCAAqC,CAACQ,KAAK,EAAEP,wBAAwB,CAACK,QAAQ,CAAC;EACjH;EAEA;;;;EAIOG,YAAY;IACf,OAAO,kBAAkB;EAC7B;EAEA;;;EAGA,IAAWC,MAAM;IACb,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEUC,WAAW,CAACC,KAA6B;IAC/C,KAAK,CAACD,WAAW,CAACC,KAAK,CAAC;IAExB,IAAIA,KAAK,CAACC,MAAM,KAAKb,wBAAwB,CAACc,MAAM,EAAE;MAClD,MAAM,yDAAyD;;IAGnE,MAAML,MAAM,GAAG,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;IAE/BE,KAAK,CAACG,iBAAiB,IAAI,IAAI,CAACC,cAAc,CAACP,MAAM,EAAEG,KAAK,CAAC,GAAG,oCAAoC;IAEpG,OAAO,IAAI;EACf;;AAGJX,aAAa,CAAC,0BAA0B,EAAEC,gBAAgB,CAAC","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","FrontFacingBlock","constructor","name","Fragment","registerOutput","Float","getClassName","output","_outputs","_buildBlock","state","target","Vertex","compilationString","_declareOutput"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/Fragment/frontFacingBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n/**\r\n * Block used to test if the fragment shader is front facing\r\n */\r\nexport class FrontFacingBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new FrontFacingBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"FrontFacingBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Vertex) {\r\n            throw \"FrontFacingBlock must only be used in a fragment shader\";\r\n        }\r\n\r\n        const output = this._outputs[0];\r\n\r\n        state.compilationString += this._declareOutput(output, state) + ` = gl_FrontFacing ? 1.0 : 0.0;\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.FrontFacingBlock\", FrontFacingBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}