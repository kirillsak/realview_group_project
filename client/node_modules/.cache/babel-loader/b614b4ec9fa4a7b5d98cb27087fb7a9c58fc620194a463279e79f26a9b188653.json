{"ast":null,"code":"import { DeepCopier } from \"../Misc/deepCopier.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\n\n/**\n * This represents all the required information to add a fresnel effect on a material:\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\n */\nexport class FresnelParameters {\n  /**\n   * Creates a new FresnelParameters object.\n   *\n   * @param options provide your own settings to optionally to override defaults\n   */\n  constructor(options = {}) {\n    this._isEnabled = true;\n    this.bias = options.bias === undefined ? 0 : options.bias;\n    this.power = options.power === undefined ? 1 : options.power;\n    this.leftColor = options.leftColor || Color3.White();\n    this.rightColor = options.rightColor || Color3.Black();\n    if (options.isEnabled === false) {\n      this.isEnabled = false;\n    }\n  }\n  /**\n   * Define if the fresnel effect is enable or not.\n   */\n  get isEnabled() {\n    return this._isEnabled;\n  }\n  set isEnabled(value) {\n    if (this._isEnabled === value) {\n      return;\n    }\n    this._isEnabled = value;\n    Engine.MarkAllMaterialsAsDirty(4 | 16);\n  }\n  /**\n   * Clones the current fresnel and its values\n   * @returns a clone fresnel configuration\n   */\n  clone() {\n    const newFresnelParameters = new FresnelParameters();\n    DeepCopier.DeepCopy(this, newFresnelParameters);\n    return newFresnelParameters;\n  }\n  /**\n   * Determines equality between FresnelParameters objects\n   * @param otherFresnelParameters defines the second operand\n   * @returns true if the power, bias, leftColor, rightColor and isEnabled values are equal to the given ones\n   */\n  equals(otherFresnelParameters) {\n    return otherFresnelParameters && this.bias === otherFresnelParameters.bias && this.power === otherFresnelParameters.power && this.leftColor.equals(otherFresnelParameters.leftColor) && this.rightColor.equals(otherFresnelParameters.rightColor) && this.isEnabled === otherFresnelParameters.isEnabled;\n  }\n  /**\n   * Serializes the current fresnel parameters to a JSON representation.\n   * @returns the JSON serialization\n   */\n  serialize() {\n    return {\n      isEnabled: this.isEnabled,\n      leftColor: this.leftColor.asArray(),\n      rightColor: this.rightColor.asArray(),\n      bias: this.bias,\n      power: this.power\n    };\n  }\n  /**\n   * Parse a JSON object and deserialize it to a new Fresnel parameter object.\n   * @param parsedFresnelParameters Define the JSON representation\n   * @returns the parsed parameters\n   */\n  static Parse(parsedFresnelParameters) {\n    return new FresnelParameters({\n      isEnabled: parsedFresnelParameters.isEnabled,\n      leftColor: Color3.FromArray(parsedFresnelParameters.leftColor),\n      rightColor: Color3.FromArray(parsedFresnelParameters.rightColor),\n      bias: parsedFresnelParameters.bias,\n      power: parsedFresnelParameters.power || 1.0\n    });\n  }\n}\n// References the dependencies.\nSerializationHelper._FresnelParametersParser = FresnelParameters.Parse;","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,uBAAqB;AAEhD,SAASC,MAAM,QAAQ,wBAAsB;AAC7C,SAASC,MAAM,QAAQ,sBAAoB;AAC3C,SAASC,mBAAmB,QAAQ,uBAAqB;;AA+DzD;;;;AAIA,OAAM,MAAOC,iBAAiB;EAqC1B;;;;;EAKAC,YAAmBC,UAA6C,EAAE;IAzC1D,eAAU,GAAG,IAAI;IA0CrB,IAAI,CAACC,IAAI,GAAGD,OAAO,CAACC,IAAI,KAAKC,SAAS,GAAG,CAAC,GAAGF,OAAO,CAACC,IAAI;IACzD,IAAI,CAACE,KAAK,GAAGH,OAAO,CAACG,KAAK,KAAKD,SAAS,GAAG,CAAC,GAAGF,OAAO,CAACG,KAAK;IAC5D,IAAI,CAACC,SAAS,GAAGJ,OAAO,CAACI,SAAS,IAAIT,MAAM,CAACU,KAAK,EAAE;IACpD,IAAI,CAACC,UAAU,GAAGN,OAAO,CAACM,UAAU,IAAIX,MAAM,CAACY,KAAK,EAAE;IACtD,IAAIP,OAAO,CAACQ,SAAS,KAAK,KAAK,EAAE;MAC7B,IAAI,CAACA,SAAS,GAAG,KAAK;;EAE9B;EAhDA;;;EAGA,IAAWA,SAAS;IAChB,OAAO,IAAI,CAACC,UAAU;EAC1B;EACA,IAAWD,SAAS,CAACE,KAAc;IAC/B,IAAI,IAAI,CAACD,UAAU,KAAKC,KAAK,EAAE;MAC3B;;IAGJ,IAAI,CAACD,UAAU,GAAGC,KAAK;IACvBd,MAAM,CAACe,uBAAuB,CAAC;EACnC;EAqCA;;;;EAIOC,KAAK;IACR,MAAMC,oBAAoB,GAAG,IAAIf,iBAAiB,EAAE;IAEpDJ,UAAU,CAACoB,QAAQ,CAAC,IAAI,EAAED,oBAAoB,CAAC;IAE/C,OAAOA,oBAAoB;EAC/B;EAEA;;;;;EAKOE,MAAM,CAACC,sBAAwD;IAClE,OACIA,sBAAsB,IACtB,IAAI,CAACf,IAAI,KAAKe,sBAAsB,CAACf,IAAI,IACzC,IAAI,CAACE,KAAK,KAAKa,sBAAsB,CAACb,KAAK,IAC3C,IAAI,CAACC,SAAS,CAACW,MAAM,CAACC,sBAAsB,CAACZ,SAAS,CAAC,IACvD,IAAI,CAACE,UAAU,CAACS,MAAM,CAACC,sBAAsB,CAACV,UAAU,CAAC,IACzD,IAAI,CAACE,SAAS,KAAKQ,sBAAsB,CAACR,SAAS;EAE3D;EAEA;;;;EAIOS,SAAS;IACZ,OAAO;MACHT,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBJ,SAAS,EAAE,IAAI,CAACA,SAAS,CAACc,OAAO,EAAE;MACnCZ,UAAU,EAAE,IAAI,CAACA,UAAU,CAACY,OAAO,EAAE;MACrCjB,IAAI,EAAE,IAAI,CAACA,IAAI;MACfE,KAAK,EAAE,IAAI,CAACA;KACf;EACL;EAEA;;;;;EAKO,OAAOgB,KAAK,CAACC,uBAAqD;IACrE,OAAO,IAAItB,iBAAiB,CAAC;MACzBU,SAAS,EAAEY,uBAAuB,CAACZ,SAAS;MAC5CJ,SAAS,EAAET,MAAM,CAAC0B,SAAS,CAACD,uBAAuB,CAAChB,SAAS,CAAC;MAC9DE,UAAU,EAAEX,MAAM,CAAC0B,SAAS,CAACD,uBAAuB,CAACd,UAAU,CAAC;MAChEL,IAAI,EAAEmB,uBAAuB,CAACnB,IAAI;MAClCE,KAAK,EAAEiB,uBAAuB,CAACjB,KAAK,IAAI;KAC3C,CAAC;EACN;;AAGJ;AACAN,mBAAmB,CAACyB,wBAAwB,GAAGxB,iBAAiB,CAACqB,KAAK","names":["DeepCopier","Color3","Engine","SerializationHelper","FresnelParameters","constructor","options","bias","undefined","power","leftColor","White","rightColor","Black","isEnabled","_isEnabled","value","MarkAllMaterialsAsDirty","clone","newFresnelParameters","DeepCopy","equals","otherFresnelParameters","serialize","asArray","Parse","parsedFresnelParameters","FromArray","_FresnelParametersParser"],"sourceRoot":"","sources":["../../../../lts/core/generated/Materials/fresnelParameters.ts"],"sourcesContent":["import { DeepCopier } from \"../Misc/deepCopier\";\r\nimport type { DeepImmutable } from \"../types\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { SerializationHelper } from \"../Misc/decorators\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * Options to be used when creating a FresnelParameters.\r\n */\r\nexport type IFresnelParametersCreationOptions = {\r\n    /**\r\n     * Define the color used on edges (grazing angle)\r\n     */\r\n    leftColor?: Color3;\r\n\r\n    /**\r\n     * Define the color used on center\r\n     */\r\n    rightColor?: Color3;\r\n\r\n    /**\r\n     * Define bias applied to computed fresnel term\r\n     */\r\n    bias?: number;\r\n\r\n    /**\r\n     * Defined the power exponent applied to fresnel term\r\n     */\r\n    power?: number;\r\n\r\n    /**\r\n     * Define if the fresnel effect is enable or not.\r\n     */\r\n    isEnabled?: boolean;\r\n};\r\n\r\n/**\r\n * Serialized format for FresnelParameters.\r\n */\r\nexport type IFresnelParametersSerialized = {\r\n    /**\r\n     * Define the color used on edges (grazing angle) [as an array]\r\n     */\r\n    leftColor: number[];\r\n\r\n    /**\r\n     * Define the color used on center [as an array]\r\n     */\r\n    rightColor: number[];\r\n\r\n    /**\r\n     * Define bias applied to computed fresnel term\r\n     */\r\n    bias: number;\r\n\r\n    /**\r\n     * Defined the power exponent applied to fresnel term\r\n     */\r\n    power?: number;\r\n\r\n    /**\r\n     * Define if the fresnel effect is enable or not.\r\n     */\r\n    isEnabled: boolean;\r\n};\r\n\r\n/**\r\n * This represents all the required information to add a fresnel effect on a material:\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n */\r\nexport class FresnelParameters {\r\n    private _isEnabled = true;\r\n    /**\r\n     * Define if the fresnel effect is enable or not.\r\n     */\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_FresnelDirtyFlag | Constants.MATERIAL_MiscDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Define the color used on edges (grazing angle)\r\n     */\r\n    public leftColor: Color3;\r\n\r\n    /**\r\n     * Define the color used on center\r\n     */\r\n    public rightColor: Color3;\r\n\r\n    /**\r\n     * Define bias applied to computed fresnel term\r\n     */\r\n    public bias: number;\r\n\r\n    /**\r\n     * Defined the power exponent applied to fresnel term\r\n     */\r\n    public power: number;\r\n\r\n    /**\r\n     * Creates a new FresnelParameters object.\r\n     *\r\n     * @param options provide your own settings to optionally to override defaults\r\n     */\r\n    public constructor(options: IFresnelParametersCreationOptions = {}) {\r\n        this.bias = options.bias === undefined ? 0 : options.bias;\r\n        this.power = options.power === undefined ? 1 : options.power;\r\n        this.leftColor = options.leftColor || Color3.White();\r\n        this.rightColor = options.rightColor || Color3.Black();\r\n        if (options.isEnabled === false) {\r\n            this.isEnabled = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones the current fresnel and its values\r\n     * @returns a clone fresnel configuration\r\n     */\r\n    public clone(): FresnelParameters {\r\n        const newFresnelParameters = new FresnelParameters();\r\n\r\n        DeepCopier.DeepCopy(this, newFresnelParameters);\r\n\r\n        return newFresnelParameters;\r\n    }\r\n\r\n    /**\r\n     * Determines equality between FresnelParameters objects\r\n     * @param otherFresnelParameters defines the second operand\r\n     * @returns true if the power, bias, leftColor, rightColor and isEnabled values are equal to the given ones\r\n     */\r\n    public equals(otherFresnelParameters: DeepImmutable<FresnelParameters>): boolean {\r\n        return (\r\n            otherFresnelParameters &&\r\n            this.bias === otherFresnelParameters.bias &&\r\n            this.power === otherFresnelParameters.power &&\r\n            this.leftColor.equals(otherFresnelParameters.leftColor) &&\r\n            this.rightColor.equals(otherFresnelParameters.rightColor) &&\r\n            this.isEnabled === otherFresnelParameters.isEnabled\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Serializes the current fresnel parameters to a JSON representation.\r\n     * @returns the JSON serialization\r\n     */\r\n    public serialize(): IFresnelParametersSerialized {\r\n        return {\r\n            isEnabled: this.isEnabled,\r\n            leftColor: this.leftColor.asArray(),\r\n            rightColor: this.rightColor.asArray(),\r\n            bias: this.bias,\r\n            power: this.power,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Parse a JSON object and deserialize it to a new Fresnel parameter object.\r\n     * @param parsedFresnelParameters Define the JSON representation\r\n     * @returns the parsed parameters\r\n     */\r\n    public static Parse(parsedFresnelParameters: IFresnelParametersSerialized): FresnelParameters {\r\n        return new FresnelParameters({\r\n            isEnabled: parsedFresnelParameters.isEnabled,\r\n            leftColor: Color3.FromArray(parsedFresnelParameters.leftColor),\r\n            rightColor: Color3.FromArray(parsedFresnelParameters.rightColor),\r\n            bias: parsedFresnelParameters.bias,\r\n            power: parsedFresnelParameters.power || 1.0,\r\n        });\r\n    }\r\n}\r\n\r\n// References the dependencies.\r\nSerializationHelper._FresnelParametersParser = FresnelParameters.Parse;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}