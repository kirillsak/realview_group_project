{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Engine } from \"../../../Engines/engine.js\";\nimport { LoadTextureFromTranscodeResult, TranscodeAsync } from \"../../../Misc/basis.js\";\nimport { Tools } from \"../../../Misc/tools.js\";\n/**\n * Loader for .basis file format\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _BasisTextureLoader {\n  constructor() {\n    /**\n     * Defines whether the loader supports cascade loading the different faces.\n     */\n    this.supportCascades = false;\n  }\n  /**\n   * This returns if the loader support the current file information.\n   * @param extension defines the file extension of the file being loaded\n   * @returns true if the loader can load the specified file\n   */\n  canLoad(extension) {\n    return extension.endsWith(\".basis\");\n  }\n  /**\n   * Uploads the cube texture data to the WebGL texture. It has already been bound.\n   * @param data contains the texture data\n   * @param texture defines the BabylonJS internal texture\n   * @param createPolynomials will be true if polynomials have been requested\n   * @param onLoad defines the callback to trigger once the texture is ready\n   * @param onError defines the callback to trigger in case of error\n   */\n  loadCubeData(data, texture, createPolynomials, onLoad, onError) {\n    if (Array.isArray(data)) {\n      return;\n    }\n    const caps = texture.getEngine().getCaps();\n    const transcodeConfig = {\n      supportedCompressionFormats: {\n        etc1: caps.etc1 ? true : false,\n        s3tc: caps.s3tc ? true : false,\n        pvrtc: caps.pvrtc ? true : false,\n        etc2: caps.etc2 ? true : false,\n        astc: caps.astc ? true : false,\n        bc7: caps.bptc ? true : false\n      }\n    };\n    TranscodeAsync(data, transcodeConfig).then(result => {\n      const hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\n      LoadTextureFromTranscodeResult(texture, result);\n      texture.getEngine()._setCubeMapTextureParams(texture, hasMipmap);\n      texture.isReady = true;\n      texture.onLoadedObservable.notifyObservers(texture);\n      texture.onLoadedObservable.clear();\n      if (onLoad) {\n        onLoad();\n      }\n    }).catch(err => {\n      const errorMessage = \"Failed to transcode Basis file, transcoding may not be supported on this device\";\n      Tools.Warn(errorMessage);\n      texture.isReady = true;\n      if (onError) {\n        onError(err);\n      }\n    });\n  }\n  /**\n   * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n   * @param data contains the texture data\n   * @param texture defines the BabylonJS internal texture\n   * @param callback defines the method to call once ready to upload\n   */\n  loadData(data, texture, callback) {\n    const caps = texture.getEngine().getCaps();\n    const transcodeConfig = {\n      supportedCompressionFormats: {\n        etc1: caps.etc1 ? true : false,\n        s3tc: caps.s3tc ? true : false,\n        pvrtc: caps.pvrtc ? true : false,\n        etc2: caps.etc2 ? true : false,\n        astc: caps.astc ? true : false,\n        bc7: caps.bptc ? true : false\n      }\n    };\n    TranscodeAsync(data, transcodeConfig).then(result => {\n      const rootImage = result.fileInfo.images[0].levels[0];\n      const hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\n      callback(rootImage.width, rootImage.height, hasMipmap, result.format !== -1, () => {\n        LoadTextureFromTranscodeResult(texture, result);\n      });\n    }).catch(err => {\n      Tools.Warn(\"Failed to transcode Basis file, transcoding may not be supported on this device\");\n      Tools.Warn(`Failed to transcode Basis file: ${err}`);\n      callback(0, 0, false, false, () => {}, true);\n    });\n  }\n}\n// Register the loader.\nEngine._TextureLoaders.push(new _BasisTextureLoader());","map":{"version":3,"mappings":"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","names":["Engine","LoadTextureFromTranscodeResult","TranscodeAsync","Tools","_BasisTextureLoader","constructor","canLoad","extension","endsWith","loadCubeData","data","texture","createPolynomials","onLoad","onError","Array","isArray","caps","getEngine","getCaps","transcodeConfig","supportedCompressionFormats","etc1","s3tc","pvrtc","etc2","astc","bc7","bptc","then","result","hasMipmap","fileInfo","images","levels","length","generateMipMaps","_setCubeMapTextureParams","isReady","onLoadedObservable","notifyObservers","clear","catch","err","errorMessage","Warn","loadData","callback","rootImage","width","height","format","_TextureLoaders","push"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Textures/Loaders/basisTextureLoader.ts"],"sourcesContent":["import type { Nullable } from \"../../../types\";\r\nimport { Engine } from \"../../../Engines/engine\";\r\nimport type { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport type { IInternalTextureLoader } from \"../../../Materials/Textures/internalTextureLoader\";\r\nimport { LoadTextureFromTranscodeResult, TranscodeAsync } from \"../../../Misc/basis\";\r\nimport { Tools } from \"../../../Misc/tools\";\r\n\r\n/**\r\n * Loader for .basis file format\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _BasisTextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines whether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = false;\r\n\r\n    /**\r\n     * This returns if the loader support the current file information.\r\n     * @param extension defines the file extension of the file being loaded\r\n     * @returns true if the loader can load the specified file\r\n     */\r\n    public canLoad(extension: string): boolean {\r\n        return extension.endsWith(\".basis\");\r\n    }\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param createPolynomials will be true if polynomials have been requested\r\n     * @param onLoad defines the callback to trigger once the texture is ready\r\n     * @param onError defines the callback to trigger in case of error\r\n     */\r\n    public loadCubeData(\r\n        data: ArrayBufferView | ArrayBufferView[],\r\n        texture: InternalTexture,\r\n        createPolynomials: boolean,\r\n        onLoad: Nullable<(data?: any) => void>,\r\n        onError: Nullable<(message?: string, exception?: any) => void>\r\n    ): void {\r\n        if (Array.isArray(data)) {\r\n            return;\r\n        }\r\n        const caps = texture.getEngine().getCaps();\r\n        const transcodeConfig = {\r\n            supportedCompressionFormats: {\r\n                etc1: caps.etc1 ? true : false,\r\n                s3tc: caps.s3tc ? true : false,\r\n                pvrtc: caps.pvrtc ? true : false,\r\n                etc2: caps.etc2 ? true : false,\r\n                astc: caps.astc ? true : false,\r\n                bc7: caps.bptc ? true : false,\r\n            },\r\n        };\r\n        TranscodeAsync(data, transcodeConfig)\r\n            .then((result) => {\r\n                const hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\r\n                LoadTextureFromTranscodeResult(texture, result);\r\n                (texture.getEngine() as Engine)._setCubeMapTextureParams(texture, hasMipmap);\r\n                texture.isReady = true;\r\n                texture.onLoadedObservable.notifyObservers(texture);\r\n                texture.onLoadedObservable.clear();\r\n                if (onLoad) {\r\n                    onLoad();\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                const errorMessage = \"Failed to transcode Basis file, transcoding may not be supported on this device\";\r\n                Tools.Warn(errorMessage);\r\n                texture.isReady = true;\r\n                if (onError) {\r\n                    onError(err);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     */\r\n    public loadData(\r\n        data: ArrayBufferView,\r\n        texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void, failedLoading?: boolean) => void\r\n    ): void {\r\n        const caps = texture.getEngine().getCaps();\r\n        const transcodeConfig = {\r\n            supportedCompressionFormats: {\r\n                etc1: caps.etc1 ? true : false,\r\n                s3tc: caps.s3tc ? true : false,\r\n                pvrtc: caps.pvrtc ? true : false,\r\n                etc2: caps.etc2 ? true : false,\r\n                astc: caps.astc ? true : false,\r\n                bc7: caps.bptc ? true : false,\r\n            },\r\n        };\r\n        TranscodeAsync(data, transcodeConfig)\r\n            .then((result) => {\r\n                const rootImage = result.fileInfo.images[0].levels[0];\r\n                const hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\r\n                callback(rootImage.width, rootImage.height, hasMipmap, result.format !== -1, () => {\r\n                    LoadTextureFromTranscodeResult(texture, result);\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                Tools.Warn(\"Failed to transcode Basis file, transcoding may not be supported on this device\");\r\n                Tools.Warn(`Failed to transcode Basis file: ${err}`);\r\n                callback(0, 0, false, false, () => {}, true);\r\n            });\r\n    }\r\n}\r\n\r\n// Register the loader.\r\nEngine._TextureLoaders.push(new _BasisTextureLoader());\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}