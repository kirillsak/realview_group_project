{"ast":null,"code":"import { FreeCamera } from \"./freeCamera.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Node } from \"../node.js\";\nNode.AddNodeConstructor(\"TouchCamera\", (name, scene) => {\n  return () => new TouchCamera(name, Vector3.Zero(), scene);\n});\n/**\n * This represents a FPS type of camera controlled by touch.\n * This is like a universal camera minus the Gamepad controls.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#universal-camera\n */\nexport class TouchCamera extends FreeCamera {\n  /**\n   * Defines the touch sensibility for rotation.\n   * The higher the faster.\n   */\n  get touchAngularSensibility() {\n    const touch = this.inputs.attached[\"touch\"];\n    if (touch) {\n      return touch.touchAngularSensibility;\n    }\n    return 0;\n  }\n  set touchAngularSensibility(value) {\n    const touch = this.inputs.attached[\"touch\"];\n    if (touch) {\n      touch.touchAngularSensibility = value;\n    }\n  }\n  /**\n   * Defines the touch sensibility for move.\n   * The higher the faster.\n   */\n  get touchMoveSensibility() {\n    const touch = this.inputs.attached[\"touch\"];\n    if (touch) {\n      return touch.touchMoveSensibility;\n    }\n    return 0;\n  }\n  set touchMoveSensibility(value) {\n    const touch = this.inputs.attached[\"touch\"];\n    if (touch) {\n      touch.touchMoveSensibility = value;\n    }\n  }\n  /**\n   * Instantiates a new touch camera.\n   * This represents a FPS type of camera controlled by touch.\n   * This is like a universal camera minus the Gamepad controls.\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#universal-camera\n   * @param name Define the name of the camera in the scene\n   * @param position Define the start position of the camera in the scene\n   * @param scene Define the scene the camera belongs to\n   */\n  constructor(name, position, scene) {\n    super(name, position, scene);\n    this.inputs.addTouch();\n    this._setupInputs();\n  }\n  /**\n   * Gets the current object class name.\n   * @returns the class name\n   */\n  getClassName() {\n    return \"TouchCamera\";\n  }\n  /** @internal */\n  _setupInputs() {\n    const touch = this.inputs.attached[\"touch\"];\n    const mouse = this.inputs.attached[\"mouse\"];\n    if (mouse) {\n      mouse.touchEnabled = false;\n    } else {\n      touch.allowMouse = true;\n    }\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,iBAAe;AAI1C,SAASC,OAAO,QAAQ,yBAAuB;AAC/C,SAASC,IAAI,QAAQ,YAAU;AAE/BA,IAAI,CAACC,kBAAkB,CAAC,aAAa,EAAE,CAACC,IAAI,EAAEC,KAAK,KAAI;EACnD,OAAO,MAAM,IAAIC,WAAW,CAACF,IAAI,EAAEH,OAAO,CAACM,IAAI,EAAE,EAAEF,KAAK,CAAC;AAC7D,CAAC,CAAC;AAEF;;;;;AAKA,OAAM,MAAOC,WAAY,SAAQN,UAAU;EACvC;;;;EAIA,IAAWQ,uBAAuB;IAC9B,MAAMC,KAAK,GAAyB,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,OAAO,CAAC;IACjE,IAAIF,KAAK,EAAE;MACP,OAAOA,KAAK,CAACD,uBAAuB;;IAGxC,OAAO,CAAC;EACZ;EAEA,IAAWA,uBAAuB,CAACI,KAAa;IAC5C,MAAMH,KAAK,GAAyB,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,OAAO,CAAC;IACjE,IAAIF,KAAK,EAAE;MACPA,KAAK,CAACD,uBAAuB,GAAGI,KAAK;;EAE7C;EAEA;;;;EAIA,IAAWC,oBAAoB;IAC3B,MAAMJ,KAAK,GAAyB,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,OAAO,CAAC;IACjE,IAAIF,KAAK,EAAE;MACP,OAAOA,KAAK,CAACI,oBAAoB;;IAGrC,OAAO,CAAC;EACZ;EAEA,IAAWA,oBAAoB,CAACD,KAAa;IACzC,MAAMH,KAAK,GAAyB,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,OAAO,CAAC;IACjE,IAAIF,KAAK,EAAE;MACPA,KAAK,CAACI,oBAAoB,GAAGD,KAAK;;EAE1C;EAEA;;;;;;;;;EASAE,YAAYV,IAAY,EAAEW,QAAiB,EAAEV,KAAa;IACtD,KAAK,CAACD,IAAI,EAAEW,QAAQ,EAAEV,KAAK,CAAC;IAC5B,IAAI,CAACK,MAAM,CAACM,QAAQ,EAAE;IAEtB,IAAI,CAACC,YAAY,EAAE;EACvB;EAEA;;;;EAIOC,YAAY;IACf,OAAO,aAAa;EACxB;EAEA;EACOD,YAAY;IACf,MAAMR,KAAK,GAAyB,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,OAAO,CAAC;IACjE,MAAMQ,KAAK,GAAyB,IAAI,CAACT,MAAM,CAACC,QAAQ,CAAC,OAAO,CAAC;IACjE,IAAIQ,KAAK,EAAE;MACPA,KAAK,CAACC,YAAY,GAAG,KAAK;KAC7B,MAAM;MACHX,KAAK,CAACY,UAAU,GAAG,IAAI;;EAE/B","names":["FreeCamera","Vector3","Node","AddNodeConstructor","name","scene","TouchCamera","Zero","touchAngularSensibility","touch","inputs","attached","value","touchMoveSensibility","constructor","position","addTouch","_setupInputs","getClassName","mouse","touchEnabled","allowMouse"],"sourceRoot":"","sources":["../../../../lts/core/generated/Cameras/touchCamera.ts"],"sourcesContent":["import { FreeCamera } from \"./freeCamera\";\r\nimport type { FreeCameraTouchInput } from \"../Cameras/Inputs/freeCameraTouchInput\";\r\nimport type { FreeCameraMouseInput } from \"../Cameras/Inputs/freeCameraMouseInput\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\n\r\nNode.AddNodeConstructor(\"TouchCamera\", (name, scene) => {\r\n    return () => new TouchCamera(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * This represents a FPS type of camera controlled by touch.\r\n * This is like a universal camera minus the Gamepad controls.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#universal-camera\r\n */\r\nexport class TouchCamera extends FreeCamera {\r\n    /**\r\n     * Defines the touch sensibility for rotation.\r\n     * The higher the faster.\r\n     */\r\n    public get touchAngularSensibility(): number {\r\n        const touch = <FreeCameraTouchInput>this.inputs.attached[\"touch\"];\r\n        if (touch) {\r\n            return touch.touchAngularSensibility;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public set touchAngularSensibility(value: number) {\r\n        const touch = <FreeCameraTouchInput>this.inputs.attached[\"touch\"];\r\n        if (touch) {\r\n            touch.touchAngularSensibility = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines the touch sensibility for move.\r\n     * The higher the faster.\r\n     */\r\n    public get touchMoveSensibility(): number {\r\n        const touch = <FreeCameraTouchInput>this.inputs.attached[\"touch\"];\r\n        if (touch) {\r\n            return touch.touchMoveSensibility;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public set touchMoveSensibility(value: number) {\r\n        const touch = <FreeCameraTouchInput>this.inputs.attached[\"touch\"];\r\n        if (touch) {\r\n            touch.touchMoveSensibility = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new touch camera.\r\n     * This represents a FPS type of camera controlled by touch.\r\n     * This is like a universal camera minus the Gamepad controls.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#universal-camera\r\n     * @param name Define the name of the camera in the scene\r\n     * @param position Define the start position of the camera in the scene\r\n     * @param scene Define the scene the camera belongs to\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene) {\r\n        super(name, position, scene);\r\n        this.inputs.addTouch();\r\n\r\n        this._setupInputs();\r\n    }\r\n\r\n    /**\r\n     * Gets the current object class name.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"TouchCamera\";\r\n    }\r\n\r\n    /** @internal */\r\n    public _setupInputs() {\r\n        const touch = <FreeCameraTouchInput>this.inputs.attached[\"touch\"];\r\n        const mouse = <FreeCameraMouseInput>this.inputs.attached[\"mouse\"];\r\n        if (mouse) {\r\n            mouse.touchEnabled = false;\r\n        } else {\r\n            touch.allowMouse = true;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}