{"ast":null,"code":"import { Vector3 } from \"../Maths/math.vector.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { AxisDragGizmo } from \"../Gizmos/axisDragGizmo.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n/**\n * The Axes viewer will show 3 axes in a specific point in space\n * @see https://doc.babylonjs.com/toolsAndResources/utilities/World_Axes\n */\nexport class AxesViewer {\n  /**\n   * Creates a new AxesViewer\n   * @param scene defines the hosting scene\n   * @param scaleLines defines a number used to scale line length (1 by default)\n   * @param renderingGroupId defines a number used to set the renderingGroupId of the meshes (2 by default)\n   * @param xAxis defines the node hierarchy used to render the x-axis\n   * @param yAxis defines the node hierarchy used to render the y-axis\n   * @param zAxis defines the node hierarchy used to render the z-axis\n   * @param lineThickness The line thickness to use when creating the arrow. defaults to 1.\n   */\n  constructor(scene, scaleLines = 1, renderingGroupId = 2, xAxis, yAxis, zAxis, lineThickness = 1) {\n    this._scaleLinesFactor = 4;\n    this._instanced = false;\n    /**\n     * Gets the hosting scene\n     */\n    this.scene = null;\n    /**\n     * Gets or sets a number used to scale line length\n     */\n    this.scaleLines = 1;\n    scene = scene || EngineStore.LastCreatedScene;\n    if (!scene) {\n      return;\n    }\n    this.scaleLines = scaleLines;\n    if (!xAxis) {\n      const redColoredMaterial = new StandardMaterial(\"\", scene);\n      redColoredMaterial.disableLighting = true;\n      redColoredMaterial.emissiveColor = Color3.Red().scale(0.5);\n      xAxis = AxisDragGizmo._CreateArrow(scene, redColoredMaterial, lineThickness);\n    }\n    if (!yAxis) {\n      const greenColoredMaterial = new StandardMaterial(\"\", scene);\n      greenColoredMaterial.disableLighting = true;\n      greenColoredMaterial.emissiveColor = Color3.Green().scale(0.5);\n      yAxis = AxisDragGizmo._CreateArrow(scene, greenColoredMaterial, lineThickness);\n    }\n    if (!zAxis) {\n      const blueColoredMaterial = new StandardMaterial(\"\", scene);\n      blueColoredMaterial.disableLighting = true;\n      blueColoredMaterial.emissiveColor = Color3.Blue().scale(0.5);\n      zAxis = AxisDragGizmo._CreateArrow(scene, blueColoredMaterial, lineThickness);\n    }\n    this._xAxis = xAxis;\n    this._xAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n    this._yAxis = yAxis;\n    this._yAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n    this._zAxis = zAxis;\n    this._zAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n    if (renderingGroupId != null) {\n      AxesViewer._SetRenderingGroupId(this._xAxis, renderingGroupId);\n      AxesViewer._SetRenderingGroupId(this._yAxis, renderingGroupId);\n      AxesViewer._SetRenderingGroupId(this._zAxis, renderingGroupId);\n    }\n    this.scene = scene;\n    this.update(new Vector3(), Vector3.Right(), Vector3.Up(), Vector3.Forward());\n  }\n  /** Gets the node hierarchy used to render x-axis */\n  get xAxis() {\n    return this._xAxis;\n  }\n  /** Gets the node hierarchy used to render y-axis */\n  get yAxis() {\n    return this._yAxis;\n  }\n  /** Gets the node hierarchy used to render z-axis */\n  get zAxis() {\n    return this._zAxis;\n  }\n  /**\n   * Force the viewer to update\n   * @param position defines the position of the viewer\n   * @param xaxis defines the x axis of the viewer\n   * @param yaxis defines the y axis of the viewer\n   * @param zaxis defines the z axis of the viewer\n   */\n  update(position, xaxis, yaxis, zaxis) {\n    this._xAxis.position.copyFrom(position);\n    this._xAxis.setDirection(xaxis);\n    this._xAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n    this._yAxis.position.copyFrom(position);\n    this._yAxis.setDirection(yaxis);\n    this._yAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n    this._zAxis.position.copyFrom(position);\n    this._zAxis.setDirection(zaxis);\n    this._zAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n  }\n  /**\n   * Creates an instance of this axes viewer.\n   * @returns a new axes viewer with instanced meshes\n   */\n  createInstance() {\n    const xAxis = AxisDragGizmo._CreateArrowInstance(this.scene, this._xAxis);\n    const yAxis = AxisDragGizmo._CreateArrowInstance(this.scene, this._yAxis);\n    const zAxis = AxisDragGizmo._CreateArrowInstance(this.scene, this._zAxis);\n    const axesViewer = new AxesViewer(this.scene, this.scaleLines, null, xAxis, yAxis, zAxis);\n    axesViewer._instanced = true;\n    return axesViewer;\n  }\n  /** Releases resources */\n  dispose() {\n    if (this._xAxis) {\n      this._xAxis.dispose(false, !this._instanced);\n    }\n    if (this._yAxis) {\n      this._yAxis.dispose(false, !this._instanced);\n    }\n    if (this._zAxis) {\n      this._zAxis.dispose(false, !this._instanced);\n    }\n    this.scene = null;\n  }\n  static _SetRenderingGroupId(node, id) {\n    node.getChildMeshes().forEach(mesh => {\n      mesh.renderingGroupId = id;\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Vector3","StandardMaterial","AxisDragGizmo","Color3","EngineStore","AxesViewer","constructor","scene","scaleLines","renderingGroupId","xAxis","yAxis","zAxis","lineThickness","LastCreatedScene","redColoredMaterial","disableLighting","emissiveColor","Red","scale","_CreateArrow","greenColoredMaterial","Green","blueColoredMaterial","Blue","_xAxis","scaling","setAll","_scaleLinesFactor","_yAxis","_zAxis","_SetRenderingGroupId","update","Right","Up","Forward","position","xaxis","yaxis","zaxis","copyFrom","setDirection","createInstance","_CreateArrowInstance","axesViewer","_instanced","dispose","node","id","getChildMeshes","forEach","mesh"],"sourceRoot":"","sources":["../../../../lts/core/generated/Debug/axesViewer.ts"],"sourcesContent":["import { Vector3 } from \"../Maths/math.vector\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport { AxisDragGizmo } from \"../Gizmos/axisDragGizmo\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\n/**\r\n * The Axes viewer will show 3 axes in a specific point in space\r\n * @see https://doc.babylonjs.com/toolsAndResources/utilities/World_Axes\r\n */\r\nexport class AxesViewer {\r\n    private _xAxis: TransformNode;\r\n    private _yAxis: TransformNode;\r\n    private _zAxis: TransformNode;\r\n    private _scaleLinesFactor = 4;\r\n    private _instanced = false;\r\n\r\n    /**\r\n     * Gets the hosting scene\r\n     */\r\n    public scene: Nullable<Scene> = null;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale line length\r\n     */\r\n    public scaleLines = 1;\r\n\r\n    /** Gets the node hierarchy used to render x-axis */\r\n    public get xAxis(): TransformNode {\r\n        return this._xAxis;\r\n    }\r\n\r\n    /** Gets the node hierarchy used to render y-axis */\r\n    public get yAxis(): TransformNode {\r\n        return this._yAxis;\r\n    }\r\n\r\n    /** Gets the node hierarchy used to render z-axis */\r\n    public get zAxis(): TransformNode {\r\n        return this._zAxis;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AxesViewer\r\n     * @param scene defines the hosting scene\r\n     * @param scaleLines defines a number used to scale line length (1 by default)\r\n     * @param renderingGroupId defines a number used to set the renderingGroupId of the meshes (2 by default)\r\n     * @param xAxis defines the node hierarchy used to render the x-axis\r\n     * @param yAxis defines the node hierarchy used to render the y-axis\r\n     * @param zAxis defines the node hierarchy used to render the z-axis\r\n     * @param lineThickness The line thickness to use when creating the arrow. defaults to 1.\r\n     */\r\n    constructor(scene?: Scene, scaleLines = 1, renderingGroupId: Nullable<number> = 2, xAxis?: TransformNode, yAxis?: TransformNode, zAxis?: TransformNode, lineThickness = 1) {\r\n        scene = scene || <Scene>EngineStore.LastCreatedScene;\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this.scaleLines = scaleLines;\r\n\r\n        if (!xAxis) {\r\n            const redColoredMaterial = new StandardMaterial(\"\", scene);\r\n            redColoredMaterial.disableLighting = true;\r\n            redColoredMaterial.emissiveColor = Color3.Red().scale(0.5);\r\n            xAxis = AxisDragGizmo._CreateArrow(scene, redColoredMaterial, lineThickness);\r\n        }\r\n\r\n        if (!yAxis) {\r\n            const greenColoredMaterial = new StandardMaterial(\"\", scene);\r\n            greenColoredMaterial.disableLighting = true;\r\n            greenColoredMaterial.emissiveColor = Color3.Green().scale(0.5);\r\n            yAxis = AxisDragGizmo._CreateArrow(scene, greenColoredMaterial, lineThickness);\r\n        }\r\n\r\n        if (!zAxis) {\r\n            const blueColoredMaterial = new StandardMaterial(\"\", scene);\r\n            blueColoredMaterial.disableLighting = true;\r\n            blueColoredMaterial.emissiveColor = Color3.Blue().scale(0.5);\r\n            zAxis = AxisDragGizmo._CreateArrow(scene, blueColoredMaterial, lineThickness);\r\n        }\r\n\r\n        this._xAxis = xAxis;\r\n        this._xAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\r\n        this._yAxis = yAxis;\r\n        this._yAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\r\n        this._zAxis = zAxis;\r\n        this._zAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\r\n\r\n        if (renderingGroupId != null) {\r\n            AxesViewer._SetRenderingGroupId(this._xAxis, renderingGroupId);\r\n            AxesViewer._SetRenderingGroupId(this._yAxis, renderingGroupId);\r\n            AxesViewer._SetRenderingGroupId(this._zAxis, renderingGroupId);\r\n        }\r\n\r\n        this.scene = scene;\r\n        this.update(new Vector3(), Vector3.Right(), Vector3.Up(), Vector3.Forward());\r\n    }\r\n\r\n    /**\r\n     * Force the viewer to update\r\n     * @param position defines the position of the viewer\r\n     * @param xaxis defines the x axis of the viewer\r\n     * @param yaxis defines the y axis of the viewer\r\n     * @param zaxis defines the z axis of the viewer\r\n     */\r\n    public update(position: Vector3, xaxis: Vector3, yaxis: Vector3, zaxis: Vector3): void {\r\n        this._xAxis.position.copyFrom(position);\r\n        this._xAxis.setDirection(xaxis);\r\n        this._xAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\r\n\r\n        this._yAxis.position.copyFrom(position);\r\n        this._yAxis.setDirection(yaxis);\r\n        this._yAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\r\n\r\n        this._zAxis.position.copyFrom(position);\r\n        this._zAxis.setDirection(zaxis);\r\n        this._zAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of this axes viewer.\r\n     * @returns a new axes viewer with instanced meshes\r\n     */\r\n    public createInstance(): AxesViewer {\r\n        const xAxis = AxisDragGizmo._CreateArrowInstance(this.scene!, this._xAxis);\r\n        const yAxis = AxisDragGizmo._CreateArrowInstance(this.scene!, this._yAxis);\r\n        const zAxis = AxisDragGizmo._CreateArrowInstance(this.scene!, this._zAxis);\r\n        const axesViewer = new AxesViewer(this.scene!, this.scaleLines, null, xAxis, yAxis, zAxis);\r\n        axesViewer._instanced = true;\r\n        return axesViewer;\r\n    }\r\n\r\n    /** Releases resources */\r\n    public dispose() {\r\n        if (this._xAxis) {\r\n            this._xAxis.dispose(false, !this._instanced);\r\n        }\r\n\r\n        if (this._yAxis) {\r\n            this._yAxis.dispose(false, !this._instanced);\r\n        }\r\n\r\n        if (this._zAxis) {\r\n            this._zAxis.dispose(false, !this._instanced);\r\n        }\r\n\r\n        this.scene = null;\r\n    }\r\n\r\n    private static _SetRenderingGroupId(node: TransformNode, id: number) {\r\n        node.getChildMeshes().forEach((mesh) => {\r\n            mesh.renderingGroupId = id;\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}