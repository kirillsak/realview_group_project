{"ast":null,"code":"import { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/fxaa.fragment.js\";\nimport \"../Shaders/fxaa.vertex.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * Fxaa post process\n * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#fxaa\n */\nexport class FxaaPostProcess extends PostProcess {\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"FxaaPostProcess\" string\n   */\n  getClassName() {\n    return \"FxaaPostProcess\";\n  }\n  constructor(name, options, camera = null, samplingMode, engine, reusable, textureType = 0) {\n    super(name, \"fxaa\", [\"texelSize\"], null, options, camera, samplingMode || Texture.BILINEAR_SAMPLINGMODE, engine, reusable, null, textureType, \"fxaa\", undefined, true);\n    const defines = this._getDefines();\n    this.updateEffect(defines);\n    this.onApplyObservable.add(effect => {\n      const texelSize = this.texelSize;\n      effect.setFloat2(\"texelSize\", texelSize.x, texelSize.y);\n    });\n  }\n  _getDefines() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return null;\n    }\n    const glInfo = engine.getGlInfo();\n    if (glInfo && glInfo.renderer && glInfo.renderer.toLowerCase().indexOf(\"mali\") > -1) {\n      return \"#define MALI 1\\n\";\n    }\n    return null;\n  }\n  /**\n   * @internal\n   */\n  static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(() => {\n      return new FxaaPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  }\n}\nRegisterClass(\"BABYLON.FxaaPostProcess\", FxaaPostProcess);","map":{"version":3,"mappings":"AAGA,SAASA,OAAO,QAAQ,kCAAgC;AAExD,SAASC,WAAW,QAAQ,kBAAgB;AAI5C,OAAO,6BAA2B;AAClC,OAAO,2BAAyB;AAChC,SAASC,aAAa,QAAQ,sBAAoB;AAClD,SAASC,mBAAmB,QAAQ,uBAAqB;AAGzD;;;;AAIA,OAAM,MAAOC,eAAgB,SAAQH,WAAW;EAC5C;;;;EAIOI,YAAY;IACf,OAAO,iBAAiB;EAC5B;EAEAC,YACIC,IAAY,EACZC,OAAoC,EACpCC,SAA2B,IAAI,EAC/BC,YAAqB,EACrBC,MAAe,EACfC,QAAkB,EAClBC,cAAsB;IAEtB,KAAK,CAACN,IAAI,EAAE,MAAM,EAAE,CAAC,WAAW,CAAC,EAAE,IAAI,EAAEC,OAAO,EAAEC,MAAM,EAAEC,YAAY,IAAIV,OAAO,CAACc,qBAAqB,EAAEH,MAAM,EAAEC,QAAQ,EAAE,IAAI,EAAEC,WAAW,EAAE,MAAM,EAAEE,SAAS,EAAE,IAAI,CAAC;IAEtK,MAAMC,OAAO,GAAG,IAAI,CAACC,WAAW,EAAE;IAClC,IAAI,CAACC,YAAY,CAACF,OAAO,CAAC;IAE1B,IAAI,CAACG,iBAAiB,CAACC,GAAG,CAAEC,MAAc,IAAI;MAC1C,MAAMC,SAAS,GAAG,IAAI,CAACA,SAAS;MAChCD,MAAM,CAACE,SAAS,CAAC,WAAW,EAAED,SAAS,CAACE,CAAC,EAAEF,SAAS,CAACG,CAAC,CAAC;IAC3D,CAAC,CAAC;EACN;EAEQR,WAAW;IACf,MAAMN,MAAM,GAAG,IAAI,CAACe,SAAS,EAAE;IAC/B,IAAI,CAACf,MAAM,EAAE;MACT,OAAO,IAAI;;IAGf,MAAMgB,MAAM,GAAGhB,MAAM,CAACiB,SAAS,EAAE;IACjC,IAAID,MAAM,IAAIA,MAAM,CAACE,QAAQ,IAAIF,MAAM,CAACE,QAAQ,CAACC,WAAW,EAAE,CAACC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;MACjF,OAAO,kBAAkB;;IAG7B,OAAO,IAAI;EACf;EAEA;;;EAGO,OAAOC,MAAM,CAACC,iBAAsB,EAAEC,YAAoB,EAAEC,KAAY,EAAEC,OAAe;IAC5F,OAAOjC,mBAAmB,CAACkC,KAAK,CAC5B,MAAK;MACD,OAAO,IAAIjC,eAAe,CACtB6B,iBAAiB,CAAC1B,IAAI,EACtB0B,iBAAiB,CAACzB,OAAO,EACzB0B,YAAY,EACZD,iBAAiB,CAACK,wBAAwB,EAC1CH,KAAK,CAACT,SAAS,EAAE,EACjBO,iBAAiB,CAACrB,QAAQ,CAC7B;IACL,CAAC,EACDqB,iBAAiB,EACjBE,KAAK,EACLC,OAAO,CACV;EACL;;AAGJlC,aAAa,CAAC,yBAAyB,EAAEE,eAAe,CAAC","names":["Texture","PostProcess","RegisterClass","SerializationHelper","FxaaPostProcess","getClassName","constructor","name","options","camera","samplingMode","engine","reusable","textureType","BILINEAR_SAMPLINGMODE","undefined","defines","_getDefines","updateEffect","onApplyObservable","add","effect","texelSize","setFloat2","x","y","getEngine","glInfo","getGlInfo","renderer","toLowerCase","indexOf","_Parse","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/fxaaPostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/fxaa.fragment\";\r\nimport \"../Shaders/fxaa.vertex\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { SerializationHelper } from \"../Misc/decorators\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n/**\r\n * Fxaa post process\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#fxaa\r\n */\r\nexport class FxaaPostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"FxaaPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"FxaaPostProcess\";\r\n    }\r\n\r\n    constructor(\r\n        name: string,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera> = null,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT\r\n    ) {\r\n        super(name, \"fxaa\", [\"texelSize\"], null, options, camera, samplingMode || Texture.BILINEAR_SAMPLINGMODE, engine, reusable, null, textureType, \"fxaa\", undefined, true);\r\n\r\n        const defines = this._getDefines();\r\n        this.updateEffect(defines);\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            const texelSize = this.texelSize;\r\n            effect.setFloat2(\"texelSize\", texelSize.x, texelSize.y);\r\n        });\r\n    }\r\n\r\n    private _getDefines(): Nullable<string> {\r\n        const engine = this.getEngine();\r\n        if (!engine) {\r\n            return null;\r\n        }\r\n\r\n        const glInfo = engine.getGlInfo();\r\n        if (glInfo && glInfo.renderer && glInfo.renderer.toLowerCase().indexOf(\"mali\") > -1) {\r\n            return \"#define MALI 1\\n\";\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new FxaaPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.FxaaPostProcess\", FxaaPostProcess);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}