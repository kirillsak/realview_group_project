{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { UniformBuffer } from \"../../Materials/uniformBuffer.js\";\nimport { WebGPUShaderProcessor } from \"./webgpuShaderProcessor.js\";\n/** @internal */\nexport class WebGPUPipelineContext {\n  constructor(shaderProcessingContext, engine) {\n    this._name = \"unnamed\";\n    this.shaderProcessingContext = shaderProcessingContext;\n    this._leftOverUniformsByName = {};\n    this.engine = engine;\n  }\n  get isAsync() {\n    return false;\n  }\n  get isReady() {\n    if (this.stages) {\n      return true;\n    }\n    return false;\n  }\n  _handlesSpectorRebuildCallback() {\n    // Nothing to do yet for spector.\n  }\n  _fillEffectInformation(effect, uniformBuffersNames, uniformsNames, uniforms, samplerList, samplers, attributesNames, attributes) {\n    const engine = this.engine;\n    // Prevent Memory Leak by reducing the number of string, refer to the string instead of copy.\n    effect._fragmentSourceCode = \"\";\n    effect._vertexSourceCode = \"\";\n    // this._fragmentSourceCodeOverride = \"\";\n    // this._vertexSourceCodeOverride = \"\";\n    const foundSamplers = this.shaderProcessingContext.availableTextures;\n    let index;\n    for (index = 0; index < samplerList.length; index++) {\n      const name = samplerList[index];\n      const sampler = foundSamplers[samplerList[index]];\n      if (sampler == null || sampler == undefined) {\n        samplerList.splice(index, 1);\n        index--;\n      } else {\n        samplers[name] = index;\n      }\n    }\n    for (const attr of engine.getAttributes(this, attributesNames)) {\n      attributes.push(attr);\n    }\n    // Build the uniform layout for the left over uniforms.\n    this.buildUniformLayout();\n    const attributeNamesFromEffect = [];\n    const attributeLocationsFromEffect = [];\n    for (index = 0; index < attributesNames.length; index++) {\n      const location = attributes[index];\n      if (location >= 0) {\n        attributeNamesFromEffect.push(attributesNames[index]);\n        attributeLocationsFromEffect.push(location);\n      }\n    }\n    this.shaderProcessingContext.attributeNamesFromEffect = attributeNamesFromEffect;\n    this.shaderProcessingContext.attributeLocationsFromEffect = attributeLocationsFromEffect;\n  }\n  /** @internal */\n  /**\n   * Build the uniform buffer used in the material.\n   */\n  buildUniformLayout() {\n    if (!this.shaderProcessingContext.leftOverUniforms.length) {\n      return;\n    }\n    this.uniformBuffer = new UniformBuffer(this.engine, undefined, undefined, \"leftOver-\" + this._name);\n    for (const leftOverUniform of this.shaderProcessingContext.leftOverUniforms) {\n      const type = leftOverUniform.type.replace(/^(.*?)(<.*>)?$/, \"$1\");\n      const size = WebGPUShaderProcessor.UniformSizes[type];\n      this.uniformBuffer.addUniform(leftOverUniform.name, size, leftOverUniform.length);\n      this._leftOverUniformsByName[leftOverUniform.name] = leftOverUniform.type;\n    }\n    this.uniformBuffer.create();\n  }\n  /**\n   * Release all associated resources.\n   **/\n  dispose() {\n    if (this.uniformBuffer) {\n      this.uniformBuffer.dispose();\n    }\n  }\n  /**\n   * Sets an integer value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param value Value to be set.\n   */\n  setInt(uniformName, value) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n    this.uniformBuffer.updateInt(uniformName, value);\n  }\n  /**\n   * Sets an int2 value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First int in int2.\n   * @param y Second int in int2.\n   */\n  setInt2(uniformName, x, y) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n    this.uniformBuffer.updateInt2(uniformName, x, y);\n  }\n  /**\n   * Sets an int3 value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First int in int3.\n   * @param y Second int in int3.\n   * @param z Third int in int3.\n   */\n  setInt3(uniformName, x, y, z) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n    this.uniformBuffer.updateInt3(uniformName, x, y, z);\n  }\n  /**\n   * Sets an int4 value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First int in int4.\n   * @param y Second int in int4.\n   * @param z Third int in int4.\n   * @param w Fourth int in int4.\n   */\n  setInt4(uniformName, x, y, z, w) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n    this.uniformBuffer.updateInt4(uniformName, x, y, z, w);\n  }\n  /**\n   * Sets an int array on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setIntArray(uniformName, array) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n    this.uniformBuffer.updateIntArray(uniformName, array);\n  }\n  /**\n   * Sets an int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setIntArray2(uniformName, array) {\n    this.setIntArray(uniformName, array);\n  }\n  /**\n   * Sets an int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setIntArray3(uniformName, array) {\n    this.setIntArray(uniformName, array);\n  }\n  /**\n   * Sets an int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setIntArray4(uniformName, array) {\n    this.setIntArray(uniformName, array);\n  }\n  /**\n   * Sets an unsigned integer value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param value Value to be set.\n   */\n  setUInt(uniformName, value) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n    this.uniformBuffer.updateUInt(uniformName, value);\n  }\n  /**\n   * Sets an unsigned int2 value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First unsigned int in uint2.\n   * @param y Second unsigned int in uint2.\n   */\n  setUInt2(uniformName, x, y) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n    this.uniformBuffer.updateUInt2(uniformName, x, y);\n  }\n  /**\n   * Sets an unsigned int3 value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First unsigned int in uint3.\n   * @param y Second unsigned int in uint3.\n   * @param z Third unsigned int in uint3.\n   */\n  setUInt3(uniformName, x, y, z) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n    this.uniformBuffer.updateUInt3(uniformName, x, y, z);\n  }\n  /**\n   * Sets an unsigned int4 value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First unsigned int in uint4.\n   * @param y Second unsigned int in uint4.\n   * @param z Third unsigned int in uint4.\n   * @param w Fourth unsigned int in uint4.\n   */\n  setUInt4(uniformName, x, y, z, w) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n    this.uniformBuffer.updateUInt4(uniformName, x, y, z, w);\n  }\n  /**\n   * Sets an unsigned int array on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setUIntArray(uniformName, array) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n    this.uniformBuffer.updateUIntArray(uniformName, array);\n  }\n  /**\n   * Sets an unsigned int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setUIntArray2(uniformName, array) {\n    this.setUIntArray(uniformName, array);\n  }\n  /**\n   * Sets an unsigned int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setUIntArray3(uniformName, array) {\n    this.setUIntArray(uniformName, array);\n  }\n  /**\n   * Sets an unsigned int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setUIntArray4(uniformName, array) {\n    this.setUIntArray(uniformName, array);\n  }\n  /**\n   * Sets an array on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setArray(uniformName, array) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n    this.uniformBuffer.updateArray(uniformName, array);\n  }\n  /**\n   * Sets an array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setArray2(uniformName, array) {\n    this.setArray(uniformName, array);\n  }\n  /**\n   * Sets an array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n  setArray3(uniformName, array) {\n    this.setArray(uniformName, array);\n  }\n  /**\n   * Sets an array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setArray4(uniformName, array) {\n    this.setArray(uniformName, array);\n  }\n  /**\n   * Sets matrices on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param matrices matrices to be set.\n   */\n  setMatrices(uniformName, matrices) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n    this.uniformBuffer.updateMatrices(uniformName, matrices);\n  }\n  /**\n   * Sets matrix on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param matrix matrix to be set.\n   */\n  setMatrix(uniformName, matrix) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n    this.uniformBuffer.updateMatrix(uniformName, matrix);\n  }\n  /**\n   * Sets a 3x3 matrix on a uniform variable. (Specified as [1,2,3,4,5,6,7,8,9] will result in [1,2,3][4,5,6][7,8,9] matrix)\n   * @param uniformName Name of the variable.\n   * @param matrix matrix to be set.\n   */\n  setMatrix3x3(uniformName, matrix) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n    this.uniformBuffer.updateMatrix3x3(uniformName, matrix);\n  }\n  /**\n   * Sets a 2x2 matrix on a uniform variable. (Specified as [1,2,3,4] will result in [1,2][3,4] matrix)\n   * @param uniformName Name of the variable.\n   * @param matrix matrix to be set.\n   */\n  setMatrix2x2(uniformName, matrix) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n    this.uniformBuffer.updateMatrix2x2(uniformName, matrix);\n  }\n  /**\n   * Sets a float on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param value value to be set.\n   * @returns this effect.\n   */\n  setFloat(uniformName, value) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n    this.uniformBuffer.updateFloat(uniformName, value);\n  }\n  /**\n   * Sets a Vector2 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param vector2 vector2 to be set.\n   */\n  setVector2(uniformName, vector2) {\n    this.setFloat2(uniformName, vector2.x, vector2.y);\n  }\n  /**\n   * Sets a float2 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First float in float2.\n   * @param y Second float in float2.\n   */\n  setFloat2(uniformName, x, y) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n    this.uniformBuffer.updateFloat2(uniformName, x, y);\n  }\n  /**\n   * Sets a Vector3 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param vector3 Value to be set.\n   */\n  setVector3(uniformName, vector3) {\n    this.setFloat3(uniformName, vector3.x, vector3.y, vector3.z);\n  }\n  /**\n   * Sets a float3 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First float in float3.\n   * @param y Second float in float3.\n   * @param z Third float in float3.\n   */\n  setFloat3(uniformName, x, y, z) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n    this.uniformBuffer.updateFloat3(uniformName, x, y, z);\n  }\n  /**\n   * Sets a Vector4 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param vector4 Value to be set.\n   */\n  setVector4(uniformName, vector4) {\n    this.setFloat4(uniformName, vector4.x, vector4.y, vector4.z, vector4.w);\n  }\n  /**\n   * Sets a Quaternion on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param quaternion Value to be set.\n   */\n  setQuaternion(uniformName, quaternion) {\n    this.setFloat4(uniformName, quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n  }\n  /**\n   * Sets a float4 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First float in float4.\n   * @param y Second float in float4.\n   * @param z Third float in float4.\n   * @param w Fourth float in float4.\n   * @returns this effect.\n   */\n  setFloat4(uniformName, x, y, z, w) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n    this.uniformBuffer.updateFloat4(uniformName, x, y, z, w);\n  }\n  /**\n   * Sets a Color3 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param color3 Value to be set.\n   */\n  setColor3(uniformName, color3) {\n    this.setFloat3(uniformName, color3.r, color3.g, color3.b);\n  }\n  /**\n   * Sets a Color4 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param color3 Value to be set.\n   * @param alpha Alpha value to be set.\n   */\n  setColor4(uniformName, color3, alpha) {\n    this.setFloat4(uniformName, color3.r, color3.g, color3.b, alpha);\n  }\n  /**\n   * Sets a Color4 on a uniform variable\n   * @param uniformName defines the name of the variable\n   * @param color4 defines the value to be set\n   */\n  setDirectColor4(uniformName, color4) {\n    this.setFloat4(uniformName, color4.r, color4.g, color4.b, color4.a);\n  }\n  _getVertexShaderCode() {\n    var _a;\n    return (_a = this.sources) === null || _a === void 0 ? void 0 : _a.vertex;\n  }\n  _getFragmentShaderCode() {\n    var _a;\n    return (_a = this.sources) === null || _a === void 0 ? void 0 : _a.fragment;\n  }\n}","map":{"version":3,"mappings":"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","names":["UniformBuffer","WebGPUShaderProcessor","WebGPUPipelineContext","constructor","shaderProcessingContext","engine","_name","_leftOverUniformsByName","isAsync","isReady","stages","_handlesSpectorRebuildCallback","_fillEffectInformation","effect","uniformBuffersNames","uniformsNames","uniforms","samplerList","samplers","attributesNames","attributes","_fragmentSourceCode","_vertexSourceCode","foundSamplers","availableTextures","index","length","name","sampler","undefined","splice","attr","getAttributes","push","buildUniformLayout","attributeNamesFromEffect","attributeLocationsFromEffect","location","leftOverUniforms","uniformBuffer","leftOverUniform","type","replace","size","UniformSizes","addUniform","create","dispose","setInt","uniformName","value","updateInt","setInt2","x","y","updateInt2","setInt3","z","updateInt3","setInt4","w","updateInt4","setIntArray","array","updateIntArray","setIntArray2","setIntArray3","setIntArray4","setUInt","updateUInt","setUInt2","updateUInt2","setUInt3","updateUInt3","setUInt4","updateUInt4","setUIntArray","updateUIntArray","setUIntArray2","setUIntArray3","setUIntArray4","setArray","updateArray","setArray2","setArray3","setArray4","setMatrices","matrices","updateMatrices","setMatrix","matrix","updateMatrix","setMatrix3x3","updateMatrix3x3","setMatrix2x2","updateMatrix2x2","setFloat","updateFloat","setVector2","vector2","setFloat2","updateFloat2","setVector3","vector3","setFloat3","updateFloat3","setVector4","vector4","setFloat4","setQuaternion","quaternion","updateFloat4","setColor3","color3","r","g","b","setColor4","alpha","setDirectColor4","color4","a","_getVertexShaderCode","sources","vertex","_getFragmentShaderCode","fragment"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/WebGPU/webgpuPipelineContext.ts"],"sourcesContent":["import type { IPipelineContext } from \"../IPipelineContext\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { WebGPUEngine } from \"../webgpuEngine\";\r\nimport type { Effect } from \"../../Materials/effect\";\r\nimport type { WebGPUShaderProcessingContext } from \"./webgpuShaderProcessingContext\";\r\nimport { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\nimport type { IMatrixLike, IVector2Like, IVector3Like, IVector4Like, IColor3Like, IColor4Like, IQuaternionLike } from \"../../Maths/math.like\";\r\nimport { WebGPUShaderProcessor } from \"./webgpuShaderProcessor\";\r\n\r\n/** @internal */\r\nexport interface IWebGPURenderPipelineStageDescriptor {\r\n    vertexStage: GPUProgrammableStage;\r\n    fragmentStage?: GPUProgrammableStage;\r\n}\r\n\r\n/** @internal */\r\nexport class WebGPUPipelineContext implements IPipelineContext {\r\n    public engine: WebGPUEngine;\r\n\r\n    public shaderProcessingContext: WebGPUShaderProcessingContext;\r\n\r\n    protected _leftOverUniformsByName: { [name: string]: string };\r\n\r\n    public sources: {\r\n        vertex: string;\r\n        fragment: string;\r\n        rawVertex: string;\r\n        rawFragment: string;\r\n    };\r\n\r\n    public stages: Nullable<IWebGPURenderPipelineStageDescriptor>;\r\n\r\n    public bindGroupLayouts: GPUBindGroupLayout[];\r\n\r\n    /**\r\n     * Stores the left-over uniform buffer\r\n     */\r\n    public uniformBuffer: Nullable<UniformBuffer>;\r\n\r\n    // Default implementation.\r\n    public onCompiled?: () => void;\r\n\r\n    public get isAsync() {\r\n        return false;\r\n    }\r\n\r\n    public get isReady(): boolean {\r\n        if (this.stages) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @internal */\r\n    public _name: string;\r\n\r\n    constructor(shaderProcessingContext: WebGPUShaderProcessingContext, engine: WebGPUEngine) {\r\n        this._name = \"unnamed\";\r\n        this.shaderProcessingContext = shaderProcessingContext;\r\n        this._leftOverUniformsByName = {};\r\n        this.engine = engine;\r\n    }\r\n\r\n    public _handlesSpectorRebuildCallback(): void {\r\n        // Nothing to do yet for spector.\r\n    }\r\n\r\n    public _fillEffectInformation(\r\n        effect: Effect,\r\n        uniformBuffersNames: { [key: string]: number },\r\n        uniformsNames: string[],\r\n        uniforms: { [key: string]: Nullable<WebGLUniformLocation> },\r\n        samplerList: string[],\r\n        samplers: { [key: string]: number },\r\n        attributesNames: string[],\r\n        attributes: number[]\r\n    ) {\r\n        const engine = this.engine;\r\n\r\n        // Prevent Memory Leak by reducing the number of string, refer to the string instead of copy.\r\n        effect._fragmentSourceCode = \"\";\r\n        effect._vertexSourceCode = \"\";\r\n        // this._fragmentSourceCodeOverride = \"\";\r\n        // this._vertexSourceCodeOverride = \"\";\r\n\r\n        const foundSamplers = this.shaderProcessingContext.availableTextures;\r\n        let index: number;\r\n        for (index = 0; index < samplerList.length; index++) {\r\n            const name = samplerList[index];\r\n            const sampler = foundSamplers[samplerList[index]];\r\n\r\n            if (sampler == null || sampler == undefined) {\r\n                samplerList.splice(index, 1);\r\n                index--;\r\n            } else {\r\n                samplers[name] = index;\r\n            }\r\n        }\r\n\r\n        for (const attr of engine.getAttributes(this, attributesNames)) {\r\n            attributes.push(attr);\r\n        }\r\n\r\n        // Build the uniform layout for the left over uniforms.\r\n        this.buildUniformLayout();\r\n\r\n        const attributeNamesFromEffect: string[] = [];\r\n        const attributeLocationsFromEffect: number[] = [];\r\n        for (index = 0; index < attributesNames.length; index++) {\r\n            const location = attributes[index];\r\n            if (location >= 0) {\r\n                attributeNamesFromEffect.push(attributesNames[index]);\r\n                attributeLocationsFromEffect.push(location);\r\n            }\r\n        }\r\n        this.shaderProcessingContext.attributeNamesFromEffect = attributeNamesFromEffect;\r\n        this.shaderProcessingContext.attributeLocationsFromEffect = attributeLocationsFromEffect;\r\n    }\r\n\r\n    /** @internal */\r\n    /**\r\n     * Build the uniform buffer used in the material.\r\n     */\r\n    public buildUniformLayout(): void {\r\n        if (!this.shaderProcessingContext.leftOverUniforms.length) {\r\n            return;\r\n        }\r\n\r\n        this.uniformBuffer = new UniformBuffer(this.engine, undefined, undefined, \"leftOver-\" + this._name);\r\n\r\n        for (const leftOverUniform of this.shaderProcessingContext.leftOverUniforms) {\r\n            const type = leftOverUniform.type.replace(/^(.*?)(<.*>)?$/, \"$1\");\r\n            const size = WebGPUShaderProcessor.UniformSizes[type];\r\n            this.uniformBuffer.addUniform(leftOverUniform.name, size, leftOverUniform.length);\r\n            this._leftOverUniformsByName[leftOverUniform.name] = leftOverUniform.type;\r\n        }\r\n\r\n        this.uniformBuffer.create();\r\n    }\r\n\r\n    /**\r\n     * Release all associated resources.\r\n     **/\r\n    public dispose() {\r\n        if (this.uniformBuffer) {\r\n            this.uniformBuffer.dispose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets an integer value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param value Value to be set.\r\n     */\r\n    public setInt(uniformName: string, value: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateInt(uniformName, value);\r\n    }\r\n\r\n    /**\r\n     * Sets an int2 value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First int in int2.\r\n     * @param y Second int in int2.\r\n     */\r\n    public setInt2(uniformName: string, x: number, y: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateInt2(uniformName, x, y);\r\n    }\r\n\r\n    /**\r\n     * Sets an int3 value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First int in int3.\r\n     * @param y Second int in int3.\r\n     * @param z Third int in int3.\r\n     */\r\n    public setInt3(uniformName: string, x: number, y: number, z: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateInt3(uniformName, x, y, z);\r\n    }\r\n\r\n    /**\r\n     * Sets an int4 value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First int in int4.\r\n     * @param y Second int in int4.\r\n     * @param z Third int in int4.\r\n     * @param w Fourth int in int4.\r\n     */\r\n    public setInt4(uniformName: string, x: number, y: number, z: number, w: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateInt4(uniformName, x, y, z, w);\r\n    }\r\n\r\n    /**\r\n     * Sets an int array on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setIntArray(uniformName: string, array: Int32Array): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateIntArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setIntArray2(uniformName: string, array: Int32Array): void {\r\n        this.setIntArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setIntArray3(uniformName: string, array: Int32Array): void {\r\n        this.setIntArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setIntArray4(uniformName: string, array: Int32Array): void {\r\n        this.setIntArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an unsigned integer value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param value Value to be set.\r\n     */\r\n    public setUInt(uniformName: string, value: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateUInt(uniformName, value);\r\n    }\r\n\r\n    /**\r\n     * Sets an unsigned int2 value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First unsigned int in uint2.\r\n     * @param y Second unsigned int in uint2.\r\n     */\r\n    public setUInt2(uniformName: string, x: number, y: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateUInt2(uniformName, x, y);\r\n    }\r\n\r\n    /**\r\n     * Sets an unsigned int3 value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First unsigned int in uint3.\r\n     * @param y Second unsigned int in uint3.\r\n     * @param z Third unsigned int in uint3.\r\n     */\r\n    public setUInt3(uniformName: string, x: number, y: number, z: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateUInt3(uniformName, x, y, z);\r\n    }\r\n\r\n    /**\r\n     * Sets an unsigned int4 value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First unsigned int in uint4.\r\n     * @param y Second unsigned int in uint4.\r\n     * @param z Third unsigned int in uint4.\r\n     * @param w Fourth unsigned int in uint4.\r\n     */\r\n    public setUInt4(uniformName: string, x: number, y: number, z: number, w: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateUInt4(uniformName, x, y, z, w);\r\n    }\r\n\r\n    /**\r\n     * Sets an unsigned int array on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setUIntArray(uniformName: string, array: Uint32Array): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateUIntArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an unsigned int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setUIntArray2(uniformName: string, array: Uint32Array): void {\r\n        this.setUIntArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an unsigned int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setUIntArray3(uniformName: string, array: Uint32Array): void {\r\n        this.setUIntArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an unsigned int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setUIntArray4(uniformName: string, array: Uint32Array): void {\r\n        this.setUIntArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an array on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setArray(uniformName: string, array: number[]): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setArray2(uniformName: string, array: number[]): void {\r\n        this.setArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setArray3(uniformName: string, array: number[]): void {\r\n        this.setArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setArray4(uniformName: string, array: number[]): void {\r\n        this.setArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets matrices on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param matrices matrices to be set.\r\n     */\r\n    public setMatrices(uniformName: string, matrices: Float32Array): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateMatrices(uniformName, matrices);\r\n    }\r\n\r\n    /**\r\n     * Sets matrix on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param matrix matrix to be set.\r\n     */\r\n    public setMatrix(uniformName: string, matrix: IMatrixLike): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateMatrix(uniformName, matrix);\r\n    }\r\n\r\n    /**\r\n     * Sets a 3x3 matrix on a uniform variable. (Specified as [1,2,3,4,5,6,7,8,9] will result in [1,2,3][4,5,6][7,8,9] matrix)\r\n     * @param uniformName Name of the variable.\r\n     * @param matrix matrix to be set.\r\n     */\r\n    public setMatrix3x3(uniformName: string, matrix: Float32Array): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateMatrix3x3(uniformName, matrix);\r\n    }\r\n\r\n    /**\r\n     * Sets a 2x2 matrix on a uniform variable. (Specified as [1,2,3,4] will result in [1,2][3,4] matrix)\r\n     * @param uniformName Name of the variable.\r\n     * @param matrix matrix to be set.\r\n     */\r\n    public setMatrix2x2(uniformName: string, matrix: Float32Array): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateMatrix2x2(uniformName, matrix);\r\n    }\r\n\r\n    /**\r\n     * Sets a float on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param value value to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setFloat(uniformName: string, value: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateFloat(uniformName, value);\r\n    }\r\n\r\n    /**\r\n     * Sets a Vector2 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param vector2 vector2 to be set.\r\n     */\r\n    public setVector2(uniformName: string, vector2: IVector2Like): void {\r\n        this.setFloat2(uniformName, vector2.x, vector2.y);\r\n    }\r\n\r\n    /**\r\n     * Sets a float2 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First float in float2.\r\n     * @param y Second float in float2.\r\n     */\r\n    public setFloat2(uniformName: string, x: number, y: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateFloat2(uniformName, x, y);\r\n    }\r\n\r\n    /**\r\n     * Sets a Vector3 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param vector3 Value to be set.\r\n     */\r\n    public setVector3(uniformName: string, vector3: IVector3Like): void {\r\n        this.setFloat3(uniformName, vector3.x, vector3.y, vector3.z);\r\n    }\r\n\r\n    /**\r\n     * Sets a float3 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First float in float3.\r\n     * @param y Second float in float3.\r\n     * @param z Third float in float3.\r\n     */\r\n    public setFloat3(uniformName: string, x: number, y: number, z: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateFloat3(uniformName, x, y, z);\r\n    }\r\n\r\n    /**\r\n     * Sets a Vector4 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param vector4 Value to be set.\r\n     */\r\n    public setVector4(uniformName: string, vector4: IVector4Like): void {\r\n        this.setFloat4(uniformName, vector4.x, vector4.y, vector4.z, vector4.w);\r\n    }\r\n\r\n    /**\r\n     * Sets a Quaternion on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param quaternion Value to be set.\r\n     */\r\n    public setQuaternion(uniformName: string, quaternion: IQuaternionLike): void {\r\n        this.setFloat4(uniformName, quaternion.x, quaternion.y, quaternion.z, quaternion.w);\r\n    }\r\n\r\n    /**\r\n     * Sets a float4 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First float in float4.\r\n     * @param y Second float in float4.\r\n     * @param z Third float in float4.\r\n     * @param w Fourth float in float4.\r\n     * @returns this effect.\r\n     */\r\n    public setFloat4(uniformName: string, x: number, y: number, z: number, w: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateFloat4(uniformName, x, y, z, w);\r\n    }\r\n\r\n    /**\r\n     * Sets a Color3 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param color3 Value to be set.\r\n     */\r\n    public setColor3(uniformName: string, color3: IColor3Like): void {\r\n        this.setFloat3(uniformName, color3.r, color3.g, color3.b);\r\n    }\r\n\r\n    /**\r\n     * Sets a Color4 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param color3 Value to be set.\r\n     * @param alpha Alpha value to be set.\r\n     */\r\n    public setColor4(uniformName: string, color3: IColor3Like, alpha: number): void {\r\n        this.setFloat4(uniformName, color3.r, color3.g, color3.b, alpha);\r\n    }\r\n\r\n    /**\r\n     * Sets a Color4 on a uniform variable\r\n     * @param uniformName defines the name of the variable\r\n     * @param color4 defines the value to be set\r\n     */\r\n    public setDirectColor4(uniformName: string, color4: IColor4Like): void {\r\n        this.setFloat4(uniformName, color4.r, color4.g, color4.b, color4.a);\r\n    }\r\n\r\n    public _getVertexShaderCode(): string | null {\r\n        return this.sources?.vertex;\r\n    }\r\n\r\n    public _getFragmentShaderCode(): string | null {\r\n        return this.sources?.fragment;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}