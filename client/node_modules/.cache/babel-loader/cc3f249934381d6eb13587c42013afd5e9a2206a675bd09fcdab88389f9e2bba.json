{"ast":null,"code":"/** @internal */\nexport var ConstraintAxisLimitMode;\n(function (ConstraintAxisLimitMode) {\n  ConstraintAxisLimitMode[ConstraintAxisLimitMode[\"FREE\"] = 0] = \"FREE\";\n  ConstraintAxisLimitMode[ConstraintAxisLimitMode[\"LIMITED\"] = 1] = \"LIMITED\";\n  ConstraintAxisLimitMode[ConstraintAxisLimitMode[\"LOCKED\"] = 2] = \"LOCKED\";\n  ConstraintAxisLimitMode[ConstraintAxisLimitMode[\"NONE\"] = 3] = \"NONE\";\n})(ConstraintAxisLimitMode || (ConstraintAxisLimitMode = {}));\n/** @internal */\nexport var ConstraintAxis;\n(function (ConstraintAxis) {\n  ConstraintAxis[ConstraintAxis[\"LINEAR_X\"] = 0] = \"LINEAR_X\";\n  ConstraintAxis[ConstraintAxis[\"LINEAR_Y\"] = 1] = \"LINEAR_Y\";\n  ConstraintAxis[ConstraintAxis[\"LINEAR_Z\"] = 2] = \"LINEAR_Z\";\n  ConstraintAxis[ConstraintAxis[\"ANGULAR_X\"] = 3] = \"ANGULAR_X\";\n  ConstraintAxis[ConstraintAxis[\"ANGULAR_Y\"] = 4] = \"ANGULAR_Y\";\n  ConstraintAxis[ConstraintAxis[\"ANGULAR_Z\"] = 5] = \"ANGULAR_Z\";\n  ConstraintAxis[ConstraintAxis[\"LINEAR_DISTANCE\"] = 6] = \"LINEAR_DISTANCE\";\n})(ConstraintAxis || (ConstraintAxis = {}));\n/** @internal */\nexport var ConstraintType;\n(function (ConstraintType) {\n  ConstraintType[ConstraintType[\"BALL_AND_SOCKET\"] = 0] = \"BALL_AND_SOCKET\";\n  ConstraintType[ConstraintType[\"DISTANCE\"] = 1] = \"DISTANCE\";\n  ConstraintType[ConstraintType[\"HINGE\"] = 2] = \"HINGE\";\n  ConstraintType[ConstraintType[\"SLIDER\"] = 3] = \"SLIDER\";\n  ConstraintType[ConstraintType[\"LOCK\"] = 4] = \"LOCK\";\n})(ConstraintType || (ConstraintType = {}));\n/** @internal */\nexport var ShapeType;\n(function (ShapeType) {\n  ShapeType[ShapeType[\"SPHERE\"] = 0] = \"SPHERE\";\n  ShapeType[ShapeType[\"CAPSULE\"] = 1] = \"CAPSULE\";\n  ShapeType[ShapeType[\"CYLINDER\"] = 2] = \"CYLINDER\";\n  ShapeType[ShapeType[\"BOX\"] = 3] = \"BOX\";\n  ShapeType[ShapeType[\"CONVEX_HULL\"] = 4] = \"CONVEX_HULL\";\n  ShapeType[ShapeType[\"CONTAINER\"] = 5] = \"CONTAINER\";\n  ShapeType[ShapeType[\"MESH\"] = 6] = \"MESH\";\n  ShapeType[ShapeType[\"HEIGHTFIELD\"] = 7] = \"HEIGHTFIELD\";\n})(ShapeType || (ShapeType = {}));\n/** @internal */\nexport var ConstraintMotorType;\n(function (ConstraintMotorType) {\n  ConstraintMotorType[ConstraintMotorType[\"NONE\"] = 0] = \"NONE\";\n  ConstraintMotorType[ConstraintMotorType[\"VELOCITY\"] = 1] = \"VELOCITY\";\n  ConstraintMotorType[ConstraintMotorType[\"POSITION\"] = 2] = \"POSITION\";\n})(ConstraintMotorType || (ConstraintMotorType = {}));","map":{"version":3,"mappings":"AAUA;AACA,WAAYA,uBAKX;AALD,WAAYA,uBAAuB;EAC/BA,qEAAI;EACJA,2EAAO;EACPA,yEAAM;EACNA,qEAAI;AACR,CAAC,EALWA,uBAAuB,KAAvBA,uBAAuB;AAOnC;AACA,WAAYC,cAQX;AARD,WAAYA,cAAc;EACtBA,2DAAQ;EACRA,2DAAQ;EACRA,2DAAQ;EACRA,6DAAS;EACTA,6DAAS;EACTA,6DAAS;EACTA,yEAAe;AACnB,CAAC,EARWA,cAAc,KAAdA,cAAc;AAU1B;AACA,WAAYC,cAMX;AAND,WAAYA,cAAc;EACtBA,yEAAe;EACfA,2DAAQ;EACRA,qDAAK;EACLA,uDAAM;EACNA,mDAAI;AACR,CAAC,EANWA,cAAc,KAAdA,cAAc;AAQ1B;AACA,WAAYC,SASX;AATD,WAAYA,SAAS;EACjBA,6CAAM;EACNA,+CAAO;EACPA,iDAAQ;EACRA,uCAAG;EACHA,uDAAW;EACXA,mDAAS;EACTA,yCAAI;EACJA,uDAAW;AACf,CAAC,EATWA,SAAS,KAATA,SAAS;AAWrB;AACA,WAAYC,mBAIX;AAJD,WAAYA,mBAAmB;EAC3BA,6DAAI;EACJA,qEAAQ;EACRA,qEAAQ;AACZ,CAAC,EAJWA,mBAAmB,KAAnBA,mBAAmB","names":["ConstraintAxisLimitMode","ConstraintAxis","ConstraintType","ShapeType","ConstraintMotorType"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Physics/v2/IPhysicsEnginePlugin.ts"],"sourcesContent":["import type { Vector3, Quaternion } from \"../../Maths/math.vector\";\r\nimport type { PhysicsRaycastResult } from \"../physicsRaycastResult\";\r\nimport type { PhysicsBody } from \"./physicsBody\";\r\nimport type { PhysicsShape } from \"./physicsShape\";\r\nimport type { PhysicsConstraint } from \"./physicsConstraint\";\r\nimport type { BoundingBox } from \"../../Culling/boundingBox\";\r\nimport type { TransformNode } from \"../../Meshes/transformNode\";\r\nimport type { PhysicsMaterial } from \"./physicsMaterial\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\n\r\n/** @internal */\r\nexport enum ConstraintAxisLimitMode {\r\n    FREE,\r\n    LIMITED,\r\n    LOCKED,\r\n    NONE,\r\n}\r\n\r\n/** @internal */\r\nexport enum ConstraintAxis {\r\n    LINEAR_X,\r\n    LINEAR_Y,\r\n    LINEAR_Z,\r\n    ANGULAR_X,\r\n    ANGULAR_Y,\r\n    ANGULAR_Z,\r\n    LINEAR_DISTANCE,\r\n}\r\n\r\n/** @internal */\r\nexport enum ConstraintType {\r\n    BALL_AND_SOCKET,\r\n    DISTANCE,\r\n    HINGE,\r\n    SLIDER,\r\n    LOCK,\r\n}\r\n\r\n/** @internal */\r\nexport enum ShapeType {\r\n    SPHERE,\r\n    CAPSULE,\r\n    CYLINDER,\r\n    BOX,\r\n    CONVEX_HULL,\r\n    CONTAINER,\r\n    MESH,\r\n    HEIGHTFIELD,\r\n}\r\n\r\n/** @internal */\r\nexport enum ConstraintMotorType {\r\n    NONE,\r\n    VELOCITY,\r\n    POSITION,\r\n}\r\n\r\n/** @internal */\r\nexport interface PhysicsShapeParameters {\r\n    center?: Vector3;\r\n    radius?: number;\r\n    pointA?: Vector3;\r\n    pointB?: Vector3;\r\n    rotation?: Quaternion;\r\n    extents?: Vector3;\r\n    mesh?: Mesh;\r\n    includeChildMeshes?: boolean;\r\n}\r\n\r\n/** @internal */\r\nexport interface PhysicsConstraintParameters {\r\n    pivotA?: Vector3;\r\n    pivotB?: Vector3;\r\n    axisA?: Vector3;\r\n    axisB?: Vector3;\r\n}\r\n\r\n/**\r\n *\r\n */\r\n/** @internal */\r\nexport interface MassProperties {\r\n    /**\r\n     *\r\n     */\r\n    centerOfMass: Vector3;\r\n    /**\r\n     *\r\n     */\r\n    mass: number;\r\n    /**\r\n     *\r\n     */\r\n    intertia: Vector3;\r\n    /**\r\n     *\r\n     */\r\n    inertiaOrientation: Quaternion;\r\n}\r\n\r\n/** @internal */\r\nexport interface IPhysicsEnginePluginV2 {\r\n    /**\r\n     *\r\n     */\r\n    world: any;\r\n    /**\r\n     *\r\n     */\r\n    name: string;\r\n    setGravity(gravity: Vector3): void;\r\n    setTimeStep(timeStep: number): void;\r\n    getTimeStep(): number;\r\n    executeStep(delta: number, bodies: Array<PhysicsBody>): void; //not forgetting pre and post events\r\n    getPluginVersion(): number;\r\n\r\n    // body\r\n    initBody(body: PhysicsBody, position: Vector3, orientation: Quaternion): void;\r\n    initBodyInstances(body: PhysicsBody, mesh: Mesh): void;\r\n    sync(body: PhysicsBody): void;\r\n    syncTransform(body: PhysicsBody, transformNode: TransformNode): void;\r\n    setShape(body: PhysicsBody, shape: PhysicsShape): void;\r\n    getShape(body: PhysicsBody): PhysicsShape;\r\n    setFilterGroup(body: PhysicsBody, group: number): void;\r\n    getFilterGroup(body: PhysicsBody): number;\r\n    setEventMask(body: PhysicsBody, eventMask: number): void;\r\n    getEventMask(body: PhysicsBody): number;\r\n    setMassProperties(body: PhysicsBody, massProps: MassProperties): void;\r\n    getMassProperties(body: PhysicsBody): MassProperties;\r\n    setLinearDamping(body: PhysicsBody, damping: number): void;\r\n    getLinearDamping(body: PhysicsBody): number;\r\n    setAngularDamping(body: PhysicsBody, damping: number): void;\r\n    getAngularDamping(body: PhysicsBody): number;\r\n    setLinearVelocity(body: PhysicsBody, linVel: Vector3): void;\r\n    getLinearVelocityToRef(body: PhysicsBody, linVel: Vector3): void;\r\n    applyImpulse(body: PhysicsBody, location: Vector3, impulse: Vector3): void;\r\n    setAngularVelocity(body: PhysicsBody, angVel: Vector3): void;\r\n    getAngularVelocityToRef(body: PhysicsBody, angVel: Vector3): void;\r\n    getBodyGeometry(body: PhysicsBody): {};\r\n    disposeBody(body: PhysicsBody): void;\r\n\r\n    // shape\r\n    initShape(shape: PhysicsShape, type: ShapeType, options: PhysicsShapeParameters): void;\r\n    setFilterLayer(shape: PhysicsShape, layer: number): void;\r\n    getFilterLayer(shape: PhysicsShape): number;\r\n    setMaterial(shape: PhysicsShape, material: PhysicsMaterial): void;\r\n    getMaterial(shape: PhysicsShape): PhysicsMaterial;\r\n    setDensity(shape: PhysicsShape, density: number): void;\r\n    getDensity(shape: PhysicsShape): number;\r\n    addChild(shape: PhysicsShape, newChild: PhysicsShape, childTransform: TransformNode): void;\r\n    removeChild(shape: PhysicsShape, childIndex: number): void;\r\n    getNumChildren(shape: PhysicsShape): number;\r\n    getBoundingBox(shape: PhysicsShape): BoundingBox;\r\n    disposeShape(shape: PhysicsShape): void;\r\n\r\n    // material\r\n    initMaterial(material: PhysicsMaterial): void;\r\n    setFriction(material: PhysicsMaterial, friction: number): void;\r\n    getFriction(material: PhysicsMaterial): number;\r\n    setRestitution(material: PhysicsMaterial, restitution: number): void;\r\n    getRestitution(material: PhysicsMaterial): number;\r\n    disposeMaterial(material: PhysicsMaterial): void;\r\n\r\n    // constraint\r\n    initConstraint(constraint: PhysicsConstraint, type: ConstraintType, options: PhysicsConstraintParameters): void;\r\n    setParentBody(constraint: PhysicsConstraint, body: PhysicsBody): void;\r\n    getParentBody(constraint: PhysicsConstraint): PhysicsBody;\r\n    setChildBody(constraint: PhysicsConstraint, body: PhysicsBody): void;\r\n    getChildBody(constraint: PhysicsConstraint): PhysicsBody;\r\n    setAnchorInParent(constraint: PhysicsConstraint, pivot: Vector3, axisX: Vector3, axisY: Vector3): void;\r\n    setAnchorInChild(constraint: PhysicsConstraint, pivot: Vector3, axisX: Vector3, axisY: Vector3): void;\r\n    setEnabled(constraint: PhysicsConstraint, isEnabled: boolean): void;\r\n    getEnabled(constraint: PhysicsConstraint): boolean;\r\n    setCollisionsEnabled(constraint: PhysicsConstraint, isEnabled: boolean): void;\r\n    getCollisionsEnabled(constraint: PhysicsConstraint): boolean;\r\n    setAxisFriction(constraint: PhysicsConstraint, axis: ConstraintAxis, friction: number): void;\r\n    getAxisFriction(constraint: PhysicsConstraint, axis: ConstraintAxis): number;\r\n    setAxisMode(constraint: PhysicsConstraint, axis: ConstraintAxis, limitMode: ConstraintAxisLimitMode): void;\r\n    getAxisMode(constraint: PhysicsConstraint, axis: ConstraintAxis): ConstraintAxisLimitMode;\r\n    setAxisMinLimit(constraint: PhysicsConstraint, axis: ConstraintAxis, minLimit: number): void;\r\n    getAxisMinLimit(constraint: PhysicsConstraint, axis: ConstraintAxis): number;\r\n    setAxisMaxLimit(constraint: PhysicsConstraint, axis: ConstraintAxis, limit: number): void;\r\n    getAxisMaxLimit(constraint: PhysicsConstraint, axis: ConstraintAxis): number;\r\n    setAxisMotorType(constraint: PhysicsConstraint, axis: ConstraintAxis, motorType: ConstraintMotorType): void;\r\n    getAxisMotorType(constraint: PhysicsConstraint, axis: ConstraintAxis): ConstraintMotorType;\r\n    setAxisMotorTarget(constraint: PhysicsConstraint, axis: ConstraintAxis, target: number): void;\r\n    getAxisMotorTarget(constraint: PhysicsConstraint, axis: ConstraintAxis): number;\r\n    setAxisMotorMaxForce(constraint: PhysicsConstraint, axis: ConstraintAxis, maxForce: number): void;\r\n    getAxisMotorMaxForce(constraint: PhysicsConstraint, axis: ConstraintAxis): number;\r\n    disposeConstraint(constraint: PhysicsConstraint): void;\r\n\r\n    // raycast\r\n    raycast(from: Vector3, to: Vector3, result: PhysicsRaycastResult): void;\r\n\r\n    dispose(): void;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}