{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { MaterialHelper } from \"../../../materialHelper.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport \"../../../../Shaders/ShadersInclude/fogFragmentDeclaration.js\";\n/**\n * Block used to add support for scene fog\n */\nexport class FogBlock extends NodeMaterialBlock {\n  /**\n   * Create a new FogBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.VertexAndFragment, false);\n    // Vertex\n    this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\n    this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Vertex);\n    // Fragment\n    this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect, false, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"fogColor\", NodeMaterialBlockConnectionPointTypes.AutoDetect, false, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n    this.input.addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Color3 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Color4);\n    this.fogColor.addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Color3 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Color4);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"FogBlock\";\n  }\n  /**\n   * Gets the world position input component\n   */\n  get worldPosition() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the view input component\n   */\n  get view() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the color input component\n   */\n  get input() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the fog color input component\n   */\n  get fogColor() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  autoConfigure(material) {\n    if (!this.view.isConnected) {\n      let viewInput = material.getInputBlockByPredicate(b => b.systemValue === NodeMaterialSystemValues.View);\n      if (!viewInput) {\n        viewInput = new InputBlock(\"view\");\n        viewInput.setAsSystemValue(NodeMaterialSystemValues.View);\n      }\n      viewInput.output.connectTo(this.view);\n    }\n    if (!this.fogColor.isConnected) {\n      let fogColorInput = material.getInputBlockByPredicate(b => b.systemValue === NodeMaterialSystemValues.FogColor);\n      if (!fogColorInput) {\n        fogColorInput = new InputBlock(\"fogColor\", undefined, NodeMaterialBlockConnectionPointTypes.Color3);\n        fogColorInput.setAsSystemValue(NodeMaterialSystemValues.FogColor);\n      }\n      fogColorInput.output.connectTo(this.fogColor);\n    }\n  }\n  prepareDefines(mesh, nodeMaterial, defines) {\n    const scene = mesh.getScene();\n    defines.setValue(\"FOG\", nodeMaterial.fogEnabled && MaterialHelper.GetFogState(mesh, scene));\n  }\n  bind(effect, nodeMaterial, mesh) {\n    if (!mesh) {\n      return;\n    }\n    const scene = mesh.getScene();\n    effect.setFloat4(this._fogParameters, scene.fogMode, scene.fogStart, scene.fogEnd, scene.fogDensity);\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    if (state.target === NodeMaterialBlockTargets.Fragment) {\n      state.sharedData.blocksWithDefines.push(this);\n      state.sharedData.bindableBlocks.push(this);\n      state._emitFunctionFromInclude(\"fogFragmentDeclaration\", `//${this.name}`, {\n        removeUniforms: true,\n        removeVaryings: true,\n        removeIfDef: false,\n        replaceStrings: [{\n          search: /float CalcFogFactor\\(\\)/,\n          replace: \"float CalcFogFactor(vec3 vFogDistance, vec4 vFogInfos)\"\n        }]\n      });\n      const tempFogVariablename = state._getFreeVariableName(\"fog\");\n      const color = this.input;\n      const fogColor = this.fogColor;\n      this._fogParameters = state._getFreeVariableName(\"fogParameters\");\n      const output = this._outputs[0];\n      state._emitUniformFromString(this._fogParameters, \"vec4\");\n      state.compilationString += `#ifdef FOG\\r\\n`;\n      state.compilationString += `float ${tempFogVariablename} = CalcFogFactor(${this._fogDistanceName}, ${this._fogParameters});\\r\\n`;\n      state.compilationString += this._declareOutput(output, state) + ` = ${tempFogVariablename} * ${color.associatedVariableName}.rgb + (1.0 - ${tempFogVariablename}) * ${fogColor.associatedVariableName}.rgb;\\r\\n`;\n      state.compilationString += `#else\\r\\n${this._declareOutput(output, state)} =  ${color.associatedVariableName}.rgb;\\r\\n`;\n      state.compilationString += `#endif\\r\\n`;\n    } else {\n      const worldPos = this.worldPosition;\n      const view = this.view;\n      this._fogDistanceName = state._getFreeVariableName(\"vFogDistance\");\n      state._emitVaryingFromString(this._fogDistanceName, \"vec3\");\n      state.compilationString += `${this._fogDistanceName} = (${view.associatedVariableName} * ${worldPos.associatedVariableName}).xyz;\\r\\n`;\n    }\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.FogBlock\", FogBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialSystemValues","NodeMaterialBlockTargets","MaterialHelper","InputBlock","RegisterClass","FogBlock","constructor","name","VertexAndFragment","registerInput","Vector4","Vertex","Matrix","AutoDetect","Fragment","registerOutput","Color3","input","addExcludedConnectionPointFromAllowedTypes","Vector3","Color4","fogColor","getClassName","worldPosition","_inputs","view","output","_outputs","autoConfigure","material","isConnected","viewInput","getInputBlockByPredicate","b","systemValue","View","setAsSystemValue","connectTo","fogColorInput","FogColor","undefined","prepareDefines","mesh","nodeMaterial","defines","scene","getScene","setValue","fogEnabled","GetFogState","bind","effect","setFloat4","_fogParameters","fogMode","fogStart","fogEnd","fogDensity","_buildBlock","state","target","sharedData","blocksWithDefines","push","bindableBlocks","_emitFunctionFromInclude","removeUniforms","removeVaryings","removeIfDef","replaceStrings","search","replace","tempFogVariablename","_getFreeVariableName","color","_emitUniformFromString","compilationString","_fogDistanceName","_declareOutput","associatedVariableName","worldPos","_emitVaryingFromString"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/Dual/fogBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { Mesh } from \"../../../../Meshes/mesh\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport { MaterialHelper } from \"../../../materialHelper\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n\r\nimport \"../../../../Shaders/ShadersInclude/fogFragmentDeclaration\";\r\n\r\n/**\r\n * Block used to add support for scene fog\r\n */\r\nexport class FogBlock extends NodeMaterialBlock {\r\n    private _fogDistanceName: string;\r\n    private _fogParameters: string;\r\n\r\n    /**\r\n     * Create a new FogBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.VertexAndFragment, false);\r\n\r\n        // Vertex\r\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\r\n        this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Vertex);\r\n\r\n        // Fragment\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"fogColor\", NodeMaterialBlockConnectionPointTypes.AutoDetect, false, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.input.addExcludedConnectionPointFromAllowedTypes(\r\n            NodeMaterialBlockConnectionPointTypes.Color3 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Color4\r\n        );\r\n        this.fogColor.addExcludedConnectionPointFromAllowedTypes(\r\n            NodeMaterialBlockConnectionPointTypes.Color3 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Color4\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"FogBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the world position input component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the view input component\r\n     */\r\n    public get view(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the color input component\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the fog color input component\r\n     */\r\n    public get fogColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.view.isConnected) {\r\n            let viewInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.View);\r\n\r\n            if (!viewInput) {\r\n                viewInput = new InputBlock(\"view\");\r\n                viewInput.setAsSystemValue(NodeMaterialSystemValues.View);\r\n            }\r\n            viewInput.output.connectTo(this.view);\r\n        }\r\n        if (!this.fogColor.isConnected) {\r\n            let fogColorInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.FogColor);\r\n\r\n            if (!fogColorInput) {\r\n                fogColorInput = new InputBlock(\"fogColor\", undefined, NodeMaterialBlockConnectionPointTypes.Color3);\r\n                fogColorInput.setAsSystemValue(NodeMaterialSystemValues.FogColor);\r\n            }\r\n            fogColorInput.output.connectTo(this.fogColor);\r\n        }\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        const scene = mesh.getScene();\r\n        defines.setValue(\"FOG\", nodeMaterial.fogEnabled && MaterialHelper.GetFogState(mesh, scene));\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        const scene = mesh.getScene();\r\n        effect.setFloat4(this._fogParameters, scene.fogMode, scene.fogStart, scene.fogEnd, scene.fogDensity);\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.sharedData.blocksWithDefines.push(this);\r\n            state.sharedData.bindableBlocks.push(this);\r\n\r\n            state._emitFunctionFromInclude(\"fogFragmentDeclaration\", `//${this.name}`, {\r\n                removeUniforms: true,\r\n                removeVaryings: true,\r\n                removeIfDef: false,\r\n                replaceStrings: [{ search: /float CalcFogFactor\\(\\)/, replace: \"float CalcFogFactor(vec3 vFogDistance, vec4 vFogInfos)\" }],\r\n            });\r\n\r\n            const tempFogVariablename = state._getFreeVariableName(\"fog\");\r\n            const color = this.input;\r\n            const fogColor = this.fogColor;\r\n            this._fogParameters = state._getFreeVariableName(\"fogParameters\");\r\n            const output = this._outputs[0];\r\n\r\n            state._emitUniformFromString(this._fogParameters, \"vec4\");\r\n\r\n            state.compilationString += `#ifdef FOG\\r\\n`;\r\n            state.compilationString += `float ${tempFogVariablename} = CalcFogFactor(${this._fogDistanceName}, ${this._fogParameters});\\r\\n`;\r\n            state.compilationString +=\r\n                this._declareOutput(output, state) +\r\n                ` = ${tempFogVariablename} * ${color.associatedVariableName}.rgb + (1.0 - ${tempFogVariablename}) * ${fogColor.associatedVariableName}.rgb;\\r\\n`;\r\n            state.compilationString += `#else\\r\\n${this._declareOutput(output, state)} =  ${color.associatedVariableName}.rgb;\\r\\n`;\r\n            state.compilationString += `#endif\\r\\n`;\r\n        } else {\r\n            const worldPos = this.worldPosition;\r\n            const view = this.view;\r\n            this._fogDistanceName = state._getFreeVariableName(\"vFogDistance\");\r\n            state._emitVaryingFromString(this._fogDistanceName, \"vec3\");\r\n            state.compilationString += `${this._fogDistanceName} = (${view.associatedVariableName} * ${worldPos.associatedVariableName}).xyz;\\r\\n`;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.FogBlock\", FogBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}