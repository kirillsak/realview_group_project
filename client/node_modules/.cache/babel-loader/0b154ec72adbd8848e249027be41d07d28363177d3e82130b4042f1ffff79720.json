{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\n/**\n * A cursor which tracks a point on a path\n */\nexport class PathCursor {\n  /**\n   * Initializes the path cursor\n   * @param _path The path to track\n   */\n  constructor(_path) {\n    this._path = _path;\n    /**\n     * Stores path cursor callbacks for when an onchange event is triggered\n     */\n    this._onchange = new Array();\n    /**\n     * The value of the path cursor\n     */\n    this.value = 0;\n    /**\n     * The animation array of the path cursor\n     */\n    this.animations = new Array();\n  }\n  /**\n   * Gets the cursor point on the path\n   * @returns A point on the path cursor at the cursor location\n   */\n  getPoint() {\n    const point = this._path.getPointAtLengthPosition(this.value);\n    return new Vector3(point.x, 0, point.y);\n  }\n  /**\n   * Moves the cursor ahead by the step amount\n   * @param step The amount to move the cursor forward\n   * @returns This path cursor\n   */\n  moveAhead(step = 0.002) {\n    this.move(step);\n    return this;\n  }\n  /**\n   * Moves the cursor behind by the step amount\n   * @param step The amount to move the cursor back\n   * @returns This path cursor\n   */\n  moveBack(step = 0.002) {\n    this.move(-step);\n    return this;\n  }\n  /**\n   * Moves the cursor by the step amount\n   * If the step amount is greater than one, an exception is thrown\n   * @param step The amount to move the cursor\n   * @returns This path cursor\n   */\n  move(step) {\n    if (Math.abs(step) > 1) {\n      throw \"step size should be less than 1.\";\n    }\n    this.value += step;\n    this._ensureLimits();\n    this._raiseOnChange();\n    return this;\n  }\n  /**\n   * Ensures that the value is limited between zero and one\n   * @returns This path cursor\n   */\n  _ensureLimits() {\n    while (this.value > 1) {\n      this.value -= 1;\n    }\n    while (this.value < 0) {\n      this.value += 1;\n    }\n    return this;\n  }\n  /**\n   * Runs onchange callbacks on change (used by the animation engine)\n   * @returns This path cursor\n   */\n  _raiseOnChange() {\n    this._onchange.forEach(f => f(this));\n    return this;\n  }\n  /**\n   * Executes a function on change\n   * @param f A path cursor onchange callback\n   * @returns This path cursor\n   */\n  onchange(f) {\n    this._onchange.push(f);\n    return this;\n  }\n}","map":{"version":3,"mappings":";AAAA,SAASA,OAAO,QAAQ,yBAAuB;AAG/C;;;AAGA,OAAM,MAAOC,UAAU;EAgBnB;;;;EAIAC,YAAoBC,KAAY;IAAZ,UAAK,GAALA,KAAK;IAnBzB;;;IAGQ,cAAS,GAAG,IAAIC,KAAK,EAAgC;IAE7D;;;IAGA,UAAK,GAAW,CAAC;IAEjB;;;IAGA,eAAU,GAAG,IAAIA,KAAK,EAAa;EAMA;EAEnC;;;;EAIOC,QAAQ;IACX,MAAMC,KAAK,GAAG,IAAI,CAACH,KAAK,CAACI,wBAAwB,CAAC,IAAI,CAACC,KAAK,CAAC;IAC7D,OAAO,IAAIR,OAAO,CAACM,KAAK,CAACG,CAAC,EAAE,CAAC,EAAEH,KAAK,CAACI,CAAC,CAAC;EAC3C;EAEA;;;;;EAKOC,SAAS,CAACC,OAAe,KAAK;IACjC,IAAI,CAACC,IAAI,CAACD,IAAI,CAAC;IAEf,OAAO,IAAI;EACf;EAEA;;;;;EAKOE,QAAQ,CAACF,OAAe,KAAK;IAChC,IAAI,CAACC,IAAI,CAAC,CAACD,IAAI,CAAC;IAEhB,OAAO,IAAI;EACf;EAEA;;;;;;EAMOC,IAAI,CAACD,IAAY;IACpB,IAAIG,IAAI,CAACC,GAAG,CAACJ,IAAI,CAAC,GAAG,CAAC,EAAE;MACpB,MAAM,kCAAkC;;IAG5C,IAAI,CAACJ,KAAK,IAAII,IAAI;IAClB,IAAI,CAACK,aAAa,EAAE;IACpB,IAAI,CAACC,cAAc,EAAE;IAErB,OAAO,IAAI;EACf;EAEA;;;;EAIQD,aAAa;IACjB,OAAO,IAAI,CAACT,KAAK,GAAG,CAAC,EAAE;MACnB,IAAI,CAACA,KAAK,IAAI,CAAC;;IAEnB,OAAO,IAAI,CAACA,KAAK,GAAG,CAAC,EAAE;MACnB,IAAI,CAACA,KAAK,IAAI,CAAC;;IAGnB,OAAO,IAAI;EACf;EAEA;;;;EAIQU,cAAc;IAClB,IAAI,CAACC,SAAS,CAACC,OAAO,CAAEC,CAAC,IAAKA,CAAC,CAAC,IAAI,CAAC,CAAC;IAEtC,OAAO,IAAI;EACf;EAEA;;;;;EAKOC,QAAQ,CAACD,CAA+B;IAC3C,IAAI,CAACF,SAAS,CAACI,IAAI,CAACF,CAAC,CAAC;IAEtB,OAAO,IAAI;EACf","names":["Vector3","PathCursor","constructor","_path","Array","getPoint","point","getPointAtLengthPosition","value","x","y","moveAhead","step","move","moveBack","Math","abs","_ensureLimits","_raiseOnChange","_onchange","forEach","f","onchange","push"],"sourceRoot":"","sources":["../../../../lts/core/generated/Animations/pathCursor.ts"],"sourcesContent":["import { Vector3 } from \"../Maths/math.vector\";\r\nimport type { Path2 } from \"../Maths/math.path\";\r\n\r\n/**\r\n * A cursor which tracks a point on a path\r\n */\r\nexport class PathCursor {\r\n    /**\r\n     * Stores path cursor callbacks for when an onchange event is triggered\r\n     */\r\n    private _onchange = new Array<(cursor: PathCursor) => void>();\r\n\r\n    /**\r\n     * The value of the path cursor\r\n     */\r\n    value: number = 0;\r\n\r\n    /**\r\n     * The animation array of the path cursor\r\n     */\r\n    animations = new Array<Animation>();\r\n\r\n    /**\r\n     * Initializes the path cursor\r\n     * @param _path The path to track\r\n     */\r\n    constructor(private _path: Path2) {}\r\n\r\n    /**\r\n     * Gets the cursor point on the path\r\n     * @returns A point on the path cursor at the cursor location\r\n     */\r\n    public getPoint(): Vector3 {\r\n        const point = this._path.getPointAtLengthPosition(this.value);\r\n        return new Vector3(point.x, 0, point.y);\r\n    }\r\n\r\n    /**\r\n     * Moves the cursor ahead by the step amount\r\n     * @param step The amount to move the cursor forward\r\n     * @returns This path cursor\r\n     */\r\n    public moveAhead(step: number = 0.002): PathCursor {\r\n        this.move(step);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Moves the cursor behind by the step amount\r\n     * @param step The amount to move the cursor back\r\n     * @returns This path cursor\r\n     */\r\n    public moveBack(step: number = 0.002): PathCursor {\r\n        this.move(-step);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Moves the cursor by the step amount\r\n     * If the step amount is greater than one, an exception is thrown\r\n     * @param step The amount to move the cursor\r\n     * @returns This path cursor\r\n     */\r\n    public move(step: number): PathCursor {\r\n        if (Math.abs(step) > 1) {\r\n            throw \"step size should be less than 1.\";\r\n        }\r\n\r\n        this.value += step;\r\n        this._ensureLimits();\r\n        this._raiseOnChange();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Ensures that the value is limited between zero and one\r\n     * @returns This path cursor\r\n     */\r\n    private _ensureLimits(): PathCursor {\r\n        while (this.value > 1) {\r\n            this.value -= 1;\r\n        }\r\n        while (this.value < 0) {\r\n            this.value += 1;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Runs onchange callbacks on change (used by the animation engine)\r\n     * @returns This path cursor\r\n     */\r\n    private _raiseOnChange(): PathCursor {\r\n        this._onchange.forEach((f) => f(this));\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Executes a function on change\r\n     * @param f A path cursor onchange callback\r\n     * @returns This path cursor\r\n     */\r\n    public onchange(f: (cursor: PathCursor) => void): PathCursor {\r\n        this._onchange.push(f);\r\n\r\n        return this;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}