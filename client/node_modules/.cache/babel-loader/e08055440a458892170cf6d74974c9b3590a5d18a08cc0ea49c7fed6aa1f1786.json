{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { serialize } from \"../Misc/decorators.js\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector.js\";\nimport { Node } from \"../node.js\";\nimport { Light } from \"./light.js\";\nimport { ShadowLight } from \"./shadowLight.js\";\nNode.AddNodeConstructor(\"Light_Type_0\", (name, scene) => {\n  return () => new PointLight(name, Vector3.Zero(), scene);\n});\n/**\n * A point light is a light defined by an unique point in world space.\n * The light is emitted in every direction from this point.\n * A good example of a point light is a standard light bulb.\n * Documentation: https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\n */\nexport class PointLight extends ShadowLight {\n  /**\n   * Creates a PointLight object from the passed name and position (Vector3) and adds it in the scene.\n   * A PointLight emits the light in every direction.\n   * It can cast shadows.\n   * If the scene camera is already defined and you want to set your PointLight at the camera position, just set it :\n   * ```javascript\n   * var pointLight = new PointLight(\"pl\", camera.position, scene);\n   * ```\n   * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\n   * @param name The light friendly name\n   * @param position The position of the point light in the scene\n   * @param scene The scene the lights belongs to\n   */\n  constructor(name, position, scene) {\n    super(name, scene);\n    this._shadowAngle = Math.PI / 2;\n    this.position = position;\n  }\n  /**\n   * Getter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\n   * This specifies what angle the shadow will use to be created.\n   *\n   * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\n   */\n  get shadowAngle() {\n    return this._shadowAngle;\n  }\n  /**\n   * Setter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\n   * This specifies what angle the shadow will use to be created.\n   *\n   * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\n   */\n  set shadowAngle(value) {\n    this._shadowAngle = value;\n    this.forceProjectionMatrixCompute();\n  }\n  /**\n   * Gets the direction if it has been set.\n   * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\n   */\n  get direction() {\n    return this._direction;\n  }\n  /**\n   * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\n   */\n  set direction(value) {\n    const previousNeedCube = this.needCube();\n    this._direction = value;\n    if (this.needCube() !== previousNeedCube && this._shadowGenerators) {\n      const iterator = this._shadowGenerators.values();\n      for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\n        const shadowGenerator = key.value;\n        shadowGenerator.recreateShadowMap();\n      }\n    }\n  }\n  /**\n   * Returns the string \"PointLight\"\n   * @returns the class name\n   */\n  getClassName() {\n    return \"PointLight\";\n  }\n  /**\n   * Returns the integer 0.\n   * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\n   */\n  getTypeID() {\n    return Light.LIGHTTYPEID_POINTLIGHT;\n  }\n  /**\n   * Specifies whether or not the shadowmap should be a cube texture.\n   * @returns true if the shadowmap needs to be a cube texture.\n   */\n  needCube() {\n    return !this.direction;\n  }\n  /**\n   * Returns a new Vector3 aligned with the PointLight cube system according to the passed cube face index (integer).\n   * @param faceIndex The index of the face we are computed the direction to generate shadow\n   * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\n   */\n  getShadowDirection(faceIndex) {\n    if (this.direction) {\n      return super.getShadowDirection(faceIndex);\n    } else {\n      switch (faceIndex) {\n        case 0:\n          return new Vector3(1.0, 0.0, 0.0);\n        case 1:\n          return new Vector3(-1.0, 0.0, 0.0);\n        case 2:\n          return new Vector3(0.0, -1.0, 0.0);\n        case 3:\n          return new Vector3(0.0, 1.0, 0.0);\n        case 4:\n          return new Vector3(0.0, 0.0, 1.0);\n        case 5:\n          return new Vector3(0.0, 0.0, -1.0);\n      }\n    }\n    return Vector3.Zero();\n  }\n  /**\n   * Sets the passed matrix \"matrix\" as a left-handed perspective projection matrix with the following settings :\n   * - fov = PI / 2\n   * - aspect ratio : 1.0\n   * - z-near and far equal to the active camera minZ and maxZ.\n   * Returns the PointLight.\n   * @param matrix\n   * @param viewMatrix\n   * @param renderList\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _setDefaultShadowProjectionMatrix(matrix, viewMatrix, renderList) {\n    const activeCamera = this.getScene().activeCamera;\n    if (!activeCamera) {\n      return;\n    }\n    const minZ = this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\n    const maxZ = this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\n    const useReverseDepthBuffer = this.getScene().getEngine().useReverseDepthBuffer;\n    Matrix.PerspectiveFovLHToRef(this.shadowAngle, 1.0, useReverseDepthBuffer ? maxZ : minZ, useReverseDepthBuffer ? minZ : maxZ, matrix, true, this._scene.getEngine().isNDCHalfZRange, undefined, useReverseDepthBuffer);\n  }\n  _buildUniformLayout() {\n    this._uniformBuffer.addUniform(\"vLightData\", 4);\n    this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\n    this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\n    this._uniformBuffer.addUniform(\"vLightFalloff\", 4);\n    this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\n    this._uniformBuffer.addUniform(\"depthValues\", 2);\n    this._uniformBuffer.create();\n  }\n  /**\n   * Sets the passed Effect \"effect\" with the PointLight transformed position (or position, if none) and passed name (string).\n   * @param effect The effect to update\n   * @param lightIndex The index of the light in the effect to update\n   * @returns The point light\n   */\n  transferToEffect(effect, lightIndex) {\n    if (this.computeTransformedInformation()) {\n      this._uniformBuffer.updateFloat4(\"vLightData\", this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z, 0.0, lightIndex);\n    } else {\n      this._uniformBuffer.updateFloat4(\"vLightData\", this.position.x, this.position.y, this.position.z, 0, lightIndex);\n    }\n    this._uniformBuffer.updateFloat4(\"vLightFalloff\", this.range, this._inverseSquaredRange, 0, 0, lightIndex);\n    return this;\n  }\n  transferToNodeMaterialEffect(effect, lightDataUniformName) {\n    if (this.computeTransformedInformation()) {\n      effect.setFloat3(lightDataUniformName, this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z);\n    } else {\n      effect.setFloat3(lightDataUniformName, this.position.x, this.position.y, this.position.z);\n    }\n    return this;\n  }\n  /**\n   * Prepares the list of defines specific to the light type.\n   * @param defines the list of defines\n   * @param lightIndex defines the index of the light for the effect\n   */\n  prepareLightSpecificDefines(defines, lightIndex) {\n    defines[\"POINTLIGHT\" + lightIndex] = true;\n  }\n}\n__decorate([serialize()], PointLight.prototype, \"shadowAngle\", null);","map":{"version":3,"mappings":"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","names":["serialize","Matrix","Vector3","Node","Light","ShadowLight","AddNodeConstructor","name","scene","PointLight","Zero","constructor","position","Math","PI","shadowAngle","_shadowAngle","value","forceProjectionMatrixCompute","direction","_direction","previousNeedCube","needCube","_shadowGenerators","iterator","values","key","next","done","shadowGenerator","recreateShadowMap","getClassName","getTypeID","LIGHTTYPEID_POINTLIGHT","getShadowDirection","faceIndex","_setDefaultShadowProjectionMatrix","matrix","viewMatrix","renderList","activeCamera","getScene","minZ","shadowMinZ","undefined","maxZ","shadowMaxZ","useReverseDepthBuffer","getEngine","PerspectiveFovLHToRef","_scene","isNDCHalfZRange","_buildUniformLayout","_uniformBuffer","addUniform","create","transferToEffect","effect","lightIndex","computeTransformedInformation","updateFloat4","transformedPosition","x","y","z","range","_inverseSquaredRange","transferToNodeMaterialEffect","lightDataUniformName","setFloat3","prepareLightSpecificDefines","defines","__decorate"],"sourceRoot":"","sources":["../../../../lts/core/generated/Lights/pointLight.ts"],"sourcesContent":["import { serialize } from \"../Misc/decorators\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Light } from \"./light\";\r\nimport { ShadowLight } from \"./shadowLight\";\r\nimport type { Effect } from \"../Materials/effect\";\r\n\r\nNode.AddNodeConstructor(\"Light_Type_0\", (name, scene) => {\r\n    return () => new PointLight(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * A point light is a light defined by an unique point in world space.\r\n * The light is emitted in every direction from this point.\r\n * A good example of a point light is a standard light bulb.\r\n * Documentation: https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n */\r\nexport class PointLight extends ShadowLight {\r\n    private _shadowAngle = Math.PI / 2;\r\n    /**\r\n     * Getter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     * This specifies what angle the shadow will use to be created.\r\n     *\r\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\r\n     */\r\n    @serialize()\r\n    public get shadowAngle(): number {\r\n        return this._shadowAngle;\r\n    }\r\n    /**\r\n     * Setter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     * This specifies what angle the shadow will use to be created.\r\n     *\r\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\r\n     */\r\n    public set shadowAngle(value: number) {\r\n        this._shadowAngle = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    /**\r\n     * Gets the direction if it has been set.\r\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     */\r\n    public get direction(): Vector3 {\r\n        return this._direction;\r\n    }\r\n\r\n    /**\r\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     */\r\n    public set direction(value: Vector3) {\r\n        const previousNeedCube = this.needCube();\r\n        this._direction = value;\r\n        if (this.needCube() !== previousNeedCube && this._shadowGenerators) {\r\n            const iterator = this._shadowGenerators.values();\r\n            for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                const shadowGenerator = key.value;\r\n                shadowGenerator.recreateShadowMap();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a PointLight object from the passed name and position (Vector3) and adds it in the scene.\r\n     * A PointLight emits the light in every direction.\r\n     * It can cast shadows.\r\n     * If the scene camera is already defined and you want to set your PointLight at the camera position, just set it :\r\n     * ```javascript\r\n     * var pointLight = new PointLight(\"pl\", camera.position, scene);\r\n     * ```\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     * @param name The light friendly name\r\n     * @param position The position of the point light in the scene\r\n     * @param scene The scene the lights belongs to\r\n     */\r\n    constructor(name: string, position: Vector3, scene: Scene) {\r\n        super(name, scene);\r\n        this.position = position;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"PointLight\"\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"PointLight\";\r\n    }\r\n\r\n    /**\r\n     * Returns the integer 0.\r\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n     */\r\n    public getTypeID(): number {\r\n        return Light.LIGHTTYPEID_POINTLIGHT;\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not the shadowmap should be a cube texture.\r\n     * @returns true if the shadowmap needs to be a cube texture.\r\n     */\r\n    public needCube(): boolean {\r\n        return !this.direction;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 aligned with the PointLight cube system according to the passed cube face index (integer).\r\n     * @param faceIndex The index of the face we are computed the direction to generate shadow\r\n     * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\r\n     */\r\n    public getShadowDirection(faceIndex?: number): Vector3 {\r\n        if (this.direction) {\r\n            return super.getShadowDirection(faceIndex);\r\n        } else {\r\n            switch (faceIndex) {\r\n                case 0:\r\n                    return new Vector3(1.0, 0.0, 0.0);\r\n                case 1:\r\n                    return new Vector3(-1.0, 0.0, 0.0);\r\n                case 2:\r\n                    return new Vector3(0.0, -1.0, 0.0);\r\n                case 3:\r\n                    return new Vector3(0.0, 1.0, 0.0);\r\n                case 4:\r\n                    return new Vector3(0.0, 0.0, 1.0);\r\n                case 5:\r\n                    return new Vector3(0.0, 0.0, -1.0);\r\n            }\r\n        }\r\n\r\n        return Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Sets the passed matrix \"matrix\" as a left-handed perspective projection matrix with the following settings :\r\n     * - fov = PI / 2\r\n     * - aspect ratio : 1.0\r\n     * - z-near and far equal to the active camera minZ and maxZ.\r\n     * Returns the PointLight.\r\n     * @param matrix\r\n     * @param viewMatrix\r\n     * @param renderList\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): void {\r\n        const activeCamera = this.getScene().activeCamera;\r\n\r\n        if (!activeCamera) {\r\n            return;\r\n        }\r\n\r\n        const minZ = this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\r\n        const maxZ = this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\r\n\r\n        const useReverseDepthBuffer = this.getScene().getEngine().useReverseDepthBuffer;\r\n\r\n        Matrix.PerspectiveFovLHToRef(\r\n            this.shadowAngle,\r\n            1.0,\r\n            useReverseDepthBuffer ? maxZ : minZ,\r\n            useReverseDepthBuffer ? minZ : maxZ,\r\n            matrix,\r\n            true,\r\n            this._scene.getEngine().isNDCHalfZRange,\r\n            undefined,\r\n            useReverseDepthBuffer\r\n        );\r\n    }\r\n\r\n    protected _buildUniformLayout(): void {\r\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightFalloff\", 4);\r\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\r\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\r\n        this._uniformBuffer.create();\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect \"effect\" with the PointLight transformed position (or position, if none) and passed name (string).\r\n     * @param effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The point light\r\n     */\r\n    public transferToEffect(effect: Effect, lightIndex: string): PointLight {\r\n        if (this.computeTransformedInformation()) {\r\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z, 0.0, lightIndex);\r\n        } else {\r\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.position.x, this.position.y, this.position.z, 0, lightIndex);\r\n        }\r\n\r\n        this._uniformBuffer.updateFloat4(\"vLightFalloff\", this.range, this._inverseSquaredRange, 0, 0, lightIndex);\r\n        return this;\r\n    }\r\n\r\n    public transferToNodeMaterialEffect(effect: Effect, lightDataUniformName: string) {\r\n        if (this.computeTransformedInformation()) {\r\n            effect.setFloat3(lightDataUniformName, this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z);\r\n        } else {\r\n            effect.setFloat3(lightDataUniformName, this.position.x, this.position.y, this.position.z);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public prepareLightSpecificDefines(defines: any, lightIndex: number): void {\r\n        defines[\"POINTLIGHT\" + lightIndex] = true;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}