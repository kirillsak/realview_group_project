{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { TextureSampler } from \"./textureSampler.js\";\n/**\n * Defines the source of the internal texture\n */\nexport var InternalTextureSource;\n(function (InternalTextureSource) {\n  /**\n   * The source of the texture data is unknown\n   */\n  InternalTextureSource[InternalTextureSource[\"Unknown\"] = 0] = \"Unknown\";\n  /**\n   * Texture data comes from an URL\n   */\n  InternalTextureSource[InternalTextureSource[\"Url\"] = 1] = \"Url\";\n  /**\n   * Texture data is only used for temporary storage\n   */\n  InternalTextureSource[InternalTextureSource[\"Temp\"] = 2] = \"Temp\";\n  /**\n   * Texture data comes from raw data (ArrayBuffer)\n   */\n  InternalTextureSource[InternalTextureSource[\"Raw\"] = 3] = \"Raw\";\n  /**\n   * Texture content is dynamic (video or dynamic texture)\n   */\n  InternalTextureSource[InternalTextureSource[\"Dynamic\"] = 4] = \"Dynamic\";\n  /**\n   * Texture content is generated by rendering to it\n   */\n  InternalTextureSource[InternalTextureSource[\"RenderTarget\"] = 5] = \"RenderTarget\";\n  /**\n   * Texture content is part of a multi render target process\n   */\n  InternalTextureSource[InternalTextureSource[\"MultiRenderTarget\"] = 6] = \"MultiRenderTarget\";\n  /**\n   * Texture data comes from a cube data file\n   */\n  InternalTextureSource[InternalTextureSource[\"Cube\"] = 7] = \"Cube\";\n  /**\n   * Texture data comes from a raw cube data\n   */\n  InternalTextureSource[InternalTextureSource[\"CubeRaw\"] = 8] = \"CubeRaw\";\n  /**\n   * Texture data come from a prefiltered cube data file\n   */\n  InternalTextureSource[InternalTextureSource[\"CubePrefiltered\"] = 9] = \"CubePrefiltered\";\n  /**\n   * Texture content is raw 3D data\n   */\n  InternalTextureSource[InternalTextureSource[\"Raw3D\"] = 10] = \"Raw3D\";\n  /**\n   * Texture content is raw 2D array data\n   */\n  InternalTextureSource[InternalTextureSource[\"Raw2DArray\"] = 11] = \"Raw2DArray\";\n  /**\n   * Texture content is a depth/stencil texture\n   */\n  InternalTextureSource[InternalTextureSource[\"DepthStencil\"] = 12] = \"DepthStencil\";\n  /**\n   * Texture data comes from a raw cube data encoded with RGBD\n   */\n  InternalTextureSource[InternalTextureSource[\"CubeRawRGBD\"] = 13] = \"CubeRawRGBD\";\n  /**\n   * Texture content is a depth texture\n   */\n  InternalTextureSource[InternalTextureSource[\"Depth\"] = 14] = \"Depth\";\n})(InternalTextureSource || (InternalTextureSource = {}));\n/**\n * Class used to store data associated with WebGL texture data for the engine\n * This class should not be used directly\n */\nexport class InternalTexture extends TextureSampler {\n  /**\n   * Creates a new InternalTexture\n   * @param engine defines the engine to use\n   * @param source defines the type of data that will be used\n   * @param delayAllocation if the texture allocation should be delayed (default: false)\n   */\n  constructor(engine, source, delayAllocation = false) {\n    super();\n    /**\n     * Defines if the texture is ready\n     */\n    this.isReady = false;\n    /**\n     * Defines if the texture is a cube texture\n     */\n    this.isCube = false;\n    /**\n     * Defines if the texture contains 3D data\n     */\n    this.is3D = false;\n    /**\n     * Defines if the texture contains 2D array data\n     */\n    this.is2DArray = false;\n    /**\n     * Defines if the texture contains multiview data\n     */\n    this.isMultiview = false;\n    /**\n     * Gets the URL used to load this texture\n     */\n    this.url = \"\";\n    /**\n     * Gets a boolean indicating if the texture needs mipmaps generation\n     */\n    this.generateMipMaps = false;\n    /**\n     * Gets the number of samples used by the texture (WebGL2+ only)\n     */\n    this.samples = 0;\n    /**\n     * Gets the type of the texture (int, float...)\n     */\n    this.type = -1;\n    /**\n     * Gets the format of the texture (RGB, RGBA...)\n     */\n    this.format = -1;\n    /**\n     * Observable called when the texture is loaded\n     */\n    this.onLoadedObservable = new Observable();\n    /**\n     * Observable called when the texture load is raising an error\n     */\n    this.onErrorObservable = new Observable();\n    /**\n     * If this callback is defined it will be called instead of the default _rebuild function\n     */\n    this.onRebuildCallback = null;\n    /**\n     * Gets the width of the texture\n     */\n    this.width = 0;\n    /**\n     * Gets the height of the texture\n     */\n    this.height = 0;\n    /**\n     * Gets the depth of the texture\n     */\n    this.depth = 0;\n    /**\n     * Gets the initial width of the texture (It could be rescaled if the current system does not support non power of two textures)\n     */\n    this.baseWidth = 0;\n    /**\n     * Gets the initial height of the texture (It could be rescaled if the current system does not support non power of two textures)\n     */\n    this.baseHeight = 0;\n    /**\n     * Gets the initial depth of the texture (It could be rescaled if the current system does not support non power of two textures)\n     */\n    this.baseDepth = 0;\n    /**\n     * Gets a boolean indicating if the texture is inverted on Y axis\n     */\n    this.invertY = false;\n    // Private\n    /** @internal */\n    this._invertVScale = false;\n    /** @internal */\n    this._associatedChannel = -1;\n    /** @internal */\n    this._source = InternalTextureSource.Unknown;\n    /** @internal */\n    this._buffer = null;\n    /** @internal */\n    this._bufferView = null;\n    /** @internal */\n    this._bufferViewArray = null;\n    /** @internal */\n    this._bufferViewArrayArray = null;\n    /** @internal */\n    this._size = 0;\n    /** @internal */\n    this._extension = \"\";\n    /** @internal */\n    this._files = null;\n    /** @internal */\n    this._workingCanvas = null;\n    /** @internal */\n    this._workingContext = null;\n    /** @internal */\n    this._cachedCoordinatesMode = null;\n    /** @internal */\n    this._isDisabled = false;\n    /** @internal */\n    this._compression = null;\n    /** @internal */\n    this._sphericalPolynomial = null;\n    /** @internal */\n    this._sphericalPolynomialPromise = null;\n    /** @internal */\n    this._sphericalPolynomialComputed = false;\n    /** @internal */\n    this._lodGenerationScale = 0;\n    /** @internal */\n    this._lodGenerationOffset = 0;\n    /** @internal */\n    this._useSRGBBuffer = false;\n    // The following three fields helps sharing generated fixed LODs for texture filtering\n    // In environment not supporting the textureLOD extension like EDGE. They are for internal use only.\n    // They are at the level of the gl texture to benefit from the cache.\n    /** @internal */\n    this._lodTextureHigh = null;\n    /** @internal */\n    this._lodTextureMid = null;\n    /** @internal */\n    this._lodTextureLow = null;\n    /** @internal */\n    this._isRGBD = false;\n    /** @internal */\n    this._linearSpecularLOD = false;\n    /** @internal */\n    this._irradianceTexture = null;\n    /** @internal */\n    this._hardwareTexture = null;\n    /** @internal */\n    this._maxLodLevel = null;\n    /** @internal */\n    this._references = 1;\n    /** @internal */\n    this._gammaSpace = null;\n    this._engine = engine;\n    this._source = source;\n    this._uniqueId = InternalTexture._Counter++;\n    if (!delayAllocation) {\n      this._hardwareTexture = engine._createHardwareTexture();\n    }\n  }\n  /**\n   * Gets a boolean indicating if the texture uses mipmaps\n   * TODO implements useMipMaps as a separate setting from generateMipMaps\n   */\n  get useMipMaps() {\n    return this.generateMipMaps;\n  }\n  set useMipMaps(value) {\n    this.generateMipMaps = value;\n  }\n  /** Gets the unique id of the internal texture */\n  get uniqueId() {\n    return this._uniqueId;\n  }\n  /** @internal */\n  _setUniqueId(id) {\n    this._uniqueId = id;\n  }\n  /**\n   * Gets the Engine the texture belongs to.\n   * @returns The babylon engine\n   */\n  getEngine() {\n    return this._engine;\n  }\n  /**\n   * Gets the data source type of the texture\n   */\n  get source() {\n    return this._source;\n  }\n  /**\n   * Increments the number of references (ie. the number of Texture that point to it)\n   */\n  incrementReferences() {\n    this._references++;\n  }\n  /**\n   * Change the size of the texture (not the size of the content)\n   * @param width defines the new width\n   * @param height defines the new height\n   * @param depth defines the new depth (1 by default)\n   */\n  updateSize(width, height, depth = 1) {\n    this._engine.updateTextureDimensions(this, width, height, depth);\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.baseWidth = width;\n    this.baseHeight = height;\n    this.baseDepth = depth;\n    this._size = width * height * depth;\n  }\n  /** @internal */\n  _rebuild() {\n    var _a;\n    this.isReady = false;\n    this._cachedCoordinatesMode = null;\n    this._cachedWrapU = null;\n    this._cachedWrapV = null;\n    this._cachedWrapR = null;\n    this._cachedAnisotropicFilteringLevel = null;\n    if (this.onRebuildCallback) {\n      const data = this.onRebuildCallback(this);\n      const swapAndSetIsReady = proxyInternalTexture => {\n        proxyInternalTexture._swapAndDie(this, false);\n        this.isReady = data.isReady;\n      };\n      if (data.isAsync) {\n        data.proxy.then(swapAndSetIsReady);\n      } else {\n        swapAndSetIsReady(data.proxy);\n      }\n      return;\n    }\n    let proxy;\n    switch (this.source) {\n      case InternalTextureSource.Temp:\n        break;\n      case InternalTextureSource.Url:\n        proxy = this._engine.createTexture((_a = this._originalUrl) !== null && _a !== void 0 ? _a : this.url, !this.generateMipMaps, this.invertY, null, this.samplingMode,\n        // Do not use Proxy here as it could be fully synchronous\n        // and proxy would be undefined.\n        temp => {\n          temp._swapAndDie(this, false);\n          this.isReady = true;\n        }, null, this._buffer, undefined, this.format, this._extension, undefined, undefined, undefined, this._useSRGBBuffer);\n        return;\n      case InternalTextureSource.Raw:\n        proxy = this._engine.createRawTexture(this._bufferView, this.baseWidth, this.baseHeight, this.format, this.generateMipMaps, this.invertY, this.samplingMode, this._compression, this.type, undefined, this._useSRGBBuffer);\n        proxy._swapAndDie(this, false);\n        this.isReady = true;\n        break;\n      case InternalTextureSource.Raw3D:\n        proxy = this._engine.createRawTexture3D(this._bufferView, this.baseWidth, this.baseHeight, this.baseDepth, this.format, this.generateMipMaps, this.invertY, this.samplingMode, this._compression, this.type);\n        proxy._swapAndDie(this, false);\n        this.isReady = true;\n        break;\n      case InternalTextureSource.Raw2DArray:\n        proxy = this._engine.createRawTexture2DArray(this._bufferView, this.baseWidth, this.baseHeight, this.baseDepth, this.format, this.generateMipMaps, this.invertY, this.samplingMode, this._compression, this.type);\n        proxy._swapAndDie(this, false);\n        this.isReady = true;\n        break;\n      case InternalTextureSource.Dynamic:\n        proxy = this._engine.createDynamicTexture(this.baseWidth, this.baseHeight, this.generateMipMaps, this.samplingMode);\n        proxy._swapAndDie(this, false);\n        this._engine.updateDynamicTexture(this, this._engine.getRenderingCanvas(), this.invertY, undefined, undefined, true);\n        // The engine will make sure to update content so no need to flag it as isReady = true\n        break;\n      case InternalTextureSource.Cube:\n        proxy = this._engine.createCubeTexture(this.url, null, this._files, !this.generateMipMaps, () => {\n          proxy._swapAndDie(this, false);\n          this.isReady = true;\n        }, null, this.format, this._extension, false, 0, 0, null, undefined, this._useSRGBBuffer);\n        return;\n      case InternalTextureSource.CubeRaw:\n        proxy = this._engine.createRawCubeTexture(this._bufferViewArray, this.width, this.format, this.type, this.generateMipMaps, this.invertY, this.samplingMode, this._compression);\n        proxy._swapAndDie(this, false);\n        this.isReady = true;\n        break;\n      case InternalTextureSource.CubeRawRGBD:\n        // This case is being handeled by the environment texture tools and is not a part of the rebuild process.\n        // To use CubeRawRGBD use updateRGBDAsync on the cube texture.\n        return;\n      case InternalTextureSource.CubePrefiltered:\n        proxy = this._engine.createPrefilteredCubeTexture(this.url, null, this._lodGenerationScale, this._lodGenerationOffset, proxy => {\n          if (proxy) {\n            proxy._swapAndDie(this, false);\n          }\n          this.isReady = true;\n        }, null, this.format, this._extension);\n        proxy._sphericalPolynomial = this._sphericalPolynomial;\n        return;\n    }\n  }\n  /**\n   * @internal\n   */\n  _swapAndDie(target, swapAll = true) {\n    // TODO what about refcount on target?\n    var _a;\n    (_a = this._hardwareTexture) === null || _a === void 0 ? void 0 : _a.setUsage(target._source, this.generateMipMaps, this.isCube, this.width, this.height);\n    target._hardwareTexture = this._hardwareTexture;\n    if (swapAll) {\n      target._isRGBD = this._isRGBD;\n    }\n    if (this._lodTextureHigh) {\n      if (target._lodTextureHigh) {\n        target._lodTextureHigh.dispose();\n      }\n      target._lodTextureHigh = this._lodTextureHigh;\n    }\n    if (this._lodTextureMid) {\n      if (target._lodTextureMid) {\n        target._lodTextureMid.dispose();\n      }\n      target._lodTextureMid = this._lodTextureMid;\n    }\n    if (this._lodTextureLow) {\n      if (target._lodTextureLow) {\n        target._lodTextureLow.dispose();\n      }\n      target._lodTextureLow = this._lodTextureLow;\n    }\n    if (this._irradianceTexture) {\n      if (target._irradianceTexture) {\n        target._irradianceTexture.dispose();\n      }\n      target._irradianceTexture = this._irradianceTexture;\n    }\n    const cache = this._engine.getLoadedTexturesCache();\n    let index = cache.indexOf(this);\n    if (index !== -1) {\n      cache.splice(index, 1);\n    }\n    index = cache.indexOf(target);\n    if (index === -1) {\n      cache.push(target);\n    }\n  }\n  /**\n   * Dispose the current allocated resources\n   */\n  dispose() {\n    this._references--;\n    this.onLoadedObservable.clear();\n    this.onErrorObservable.clear();\n    if (this._references === 0) {\n      this._engine._releaseTexture(this);\n      this._hardwareTexture = null;\n    }\n  }\n}\n/** @internal */\nInternalTexture._Counter = 0;","map":{"version":3,"mappings":"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","names":["Observable","TextureSampler","InternalTextureSource","InternalTexture","constructor","engine","source","delayAllocation","Unknown","_engine","_source","_uniqueId","_Counter","_hardwareTexture","_createHardwareTexture","useMipMaps","generateMipMaps","value","uniqueId","_setUniqueId","id","getEngine","incrementReferences","_references","updateSize","width","height","depth","updateTextureDimensions","baseWidth","baseHeight","baseDepth","_size","_rebuild","isReady","_cachedCoordinatesMode","_cachedWrapU","_cachedWrapV","_cachedWrapR","_cachedAnisotropicFilteringLevel","onRebuildCallback","data","swapAndSetIsReady","proxyInternalTexture","_swapAndDie","isAsync","proxy","then","Temp","Url","createTexture","_originalUrl","url","invertY","samplingMode","temp","_buffer","undefined","format","_extension","_useSRGBBuffer","Raw","createRawTexture","_bufferView","_compression","type","Raw3D","createRawTexture3D","Raw2DArray","createRawTexture2DArray","Dynamic","createDynamicTexture","updateDynamicTexture","getRenderingCanvas","Cube","createCubeTexture","_files","CubeRaw","createRawCubeTexture","_bufferViewArray","CubeRawRGBD","CubePrefiltered","createPrefilteredCubeTexture","_lodGenerationScale","_lodGenerationOffset","_sphericalPolynomial","target","swapAll","setUsage","isCube","_isRGBD","_lodTextureHigh","dispose","_lodTextureMid","_lodTextureLow","_irradianceTexture","cache","getLoadedTexturesCache","index","indexOf","splice","push","onLoadedObservable","clear","onErrorObservable","_releaseTexture"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/Textures/internalTexture.ts"],"sourcesContent":["import { Observable } from \"../../Misc/observable\";\r\nimport type { Nullable, int } from \"../../types\";\r\nimport type { ICanvas, ICanvasRenderingContext } from \"../../Engines/ICanvas\";\r\nimport type { HardwareTextureWrapper } from \"./hardwareTextureWrapper\";\r\nimport { TextureSampler } from \"./textureSampler\";\r\n\r\ndeclare type ThinEngine = import(\"../../Engines/thinEngine\").ThinEngine;\r\ndeclare type BaseTexture = import(\"../../Materials/Textures/baseTexture\").BaseTexture;\r\ndeclare type SphericalPolynomial = import(\"../../Maths/sphericalPolynomial\").SphericalPolynomial;\r\n\r\n/**\r\n * Defines the source of the internal texture\r\n */\r\nexport enum InternalTextureSource {\r\n    /**\r\n     * The source of the texture data is unknown\r\n     */\r\n    Unknown,\r\n    /**\r\n     * Texture data comes from an URL\r\n     */\r\n    Url,\r\n    /**\r\n     * Texture data is only used for temporary storage\r\n     */\r\n    Temp,\r\n    /**\r\n     * Texture data comes from raw data (ArrayBuffer)\r\n     */\r\n    Raw,\r\n    /**\r\n     * Texture content is dynamic (video or dynamic texture)\r\n     */\r\n    Dynamic,\r\n    /**\r\n     * Texture content is generated by rendering to it\r\n     */\r\n    RenderTarget,\r\n    /**\r\n     * Texture content is part of a multi render target process\r\n     */\r\n    MultiRenderTarget,\r\n    /**\r\n     * Texture data comes from a cube data file\r\n     */\r\n    Cube,\r\n    /**\r\n     * Texture data comes from a raw cube data\r\n     */\r\n    CubeRaw,\r\n    /**\r\n     * Texture data come from a prefiltered cube data file\r\n     */\r\n    CubePrefiltered,\r\n    /**\r\n     * Texture content is raw 3D data\r\n     */\r\n    Raw3D,\r\n    /**\r\n     * Texture content is raw 2D array data\r\n     */\r\n    Raw2DArray,\r\n    /**\r\n     * Texture content is a depth/stencil texture\r\n     */\r\n    DepthStencil,\r\n    /**\r\n     * Texture data comes from a raw cube data encoded with RGBD\r\n     */\r\n    CubeRawRGBD,\r\n    /**\r\n     * Texture content is a depth texture\r\n     */\r\n    Depth,\r\n}\r\n\r\n/**\r\n * Class used to store data associated with WebGL texture data for the engine\r\n * This class should not be used directly\r\n */\r\nexport class InternalTexture extends TextureSampler {\r\n    /**\r\n     * Defines if the texture is ready\r\n     */\r\n    public isReady: boolean = false;\r\n    /**\r\n     * Defines if the texture is a cube texture\r\n     */\r\n    public isCube: boolean = false;\r\n    /**\r\n     * Defines if the texture contains 3D data\r\n     */\r\n    public is3D: boolean = false;\r\n    /**\r\n     * Defines if the texture contains 2D array data\r\n     */\r\n    public is2DArray: boolean = false;\r\n    /**\r\n     * Defines if the texture contains multiview data\r\n     */\r\n    public isMultiview: boolean = false;\r\n    /**\r\n     * Gets the URL used to load this texture\r\n     */\r\n    public url: string = \"\";\r\n    /** @internal */\r\n    public _originalUrl: string; // not empty only if different from url\r\n    /**\r\n     * Gets a boolean indicating if the texture needs mipmaps generation\r\n     */\r\n    public generateMipMaps: boolean = false;\r\n    /**\r\n     * Gets a boolean indicating if the texture uses mipmaps\r\n     * TODO implements useMipMaps as a separate setting from generateMipMaps\r\n     */\r\n    public get useMipMaps() {\r\n        return this.generateMipMaps;\r\n    }\r\n    public set useMipMaps(value: boolean) {\r\n        this.generateMipMaps = value;\r\n    }\r\n    /**\r\n     * Gets the number of samples used by the texture (WebGL2+ only)\r\n     */\r\n    public samples: number = 0;\r\n    /**\r\n     * Gets the type of the texture (int, float...)\r\n     */\r\n    public type: number = -1;\r\n    /**\r\n     * Gets the format of the texture (RGB, RGBA...)\r\n     */\r\n    public format: number = -1;\r\n    /**\r\n     * Observable called when the texture is loaded\r\n     */\r\n    public onLoadedObservable = new Observable<InternalTexture>();\r\n    /**\r\n     * Observable called when the texture load is raising an error\r\n     */\r\n    public onErrorObservable = new Observable<Partial<{ message: string; exception: any }>>();\r\n    /**\r\n     * If this callback is defined it will be called instead of the default _rebuild function\r\n     */\r\n    public onRebuildCallback: Nullable<\r\n        (internalTexture: InternalTexture) => {\r\n            proxy: Nullable<InternalTexture | Promise<InternalTexture>>;\r\n            isReady: boolean;\r\n            isAsync: boolean;\r\n        }\r\n    > = null;\r\n    /**\r\n     * Gets the width of the texture\r\n     */\r\n    public width: number = 0;\r\n    /**\r\n     * Gets the height of the texture\r\n     */\r\n    public height: number = 0;\r\n    /**\r\n     * Gets the depth of the texture\r\n     */\r\n    public depth: number = 0;\r\n    /**\r\n     * Gets the initial width of the texture (It could be rescaled if the current system does not support non power of two textures)\r\n     */\r\n    public baseWidth: number = 0;\r\n    /**\r\n     * Gets the initial height of the texture (It could be rescaled if the current system does not support non power of two textures)\r\n     */\r\n    public baseHeight: number = 0;\r\n    /**\r\n     * Gets the initial depth of the texture (It could be rescaled if the current system does not support non power of two textures)\r\n     */\r\n    public baseDepth: number = 0;\r\n    /**\r\n     * Gets a boolean indicating if the texture is inverted on Y axis\r\n     */\r\n    public invertY: boolean = false;\r\n\r\n    // Private\r\n    /** @internal */\r\n    public _invertVScale = false;\r\n    /** @internal */\r\n    public _associatedChannel = -1;\r\n    /** @internal */\r\n    public _source = InternalTextureSource.Unknown;\r\n    /** @internal */\r\n    public _buffer: Nullable<string | ArrayBuffer | ArrayBufferView | HTMLImageElement | Blob | ImageBitmap> = null;\r\n    /** @internal */\r\n    public _bufferView: Nullable<ArrayBufferView> = null;\r\n    /** @internal */\r\n    public _bufferViewArray: Nullable<ArrayBufferView[]> = null;\r\n    /** @internal */\r\n    public _bufferViewArrayArray: Nullable<ArrayBufferView[][]> = null;\r\n    /** @internal */\r\n    public _size: number = 0;\r\n    /** @internal */\r\n    public _extension: string = \"\";\r\n    /** @internal */\r\n    public _files: Nullable<string[]> = null;\r\n    /** @internal */\r\n    public _workingCanvas: Nullable<ICanvas> = null;\r\n    /** @internal */\r\n    public _workingContext: Nullable<ICanvasRenderingContext> = null;\r\n    /** @internal */\r\n    public _cachedCoordinatesMode: Nullable<number> = null;\r\n    /** @internal */\r\n    public _isDisabled: boolean = false;\r\n    /** @internal */\r\n    public _compression: Nullable<string> = null;\r\n    /** @internal */\r\n    public _sphericalPolynomial: Nullable<SphericalPolynomial> = null;\r\n    /** @internal */\r\n    public _sphericalPolynomialPromise: Nullable<Promise<SphericalPolynomial>> = null;\r\n    /** @internal */\r\n    public _sphericalPolynomialComputed = false;\r\n    /** @internal */\r\n    public _lodGenerationScale: number = 0;\r\n    /** @internal */\r\n    public _lodGenerationOffset: number = 0;\r\n    /** @internal */\r\n    public _useSRGBBuffer: boolean = false;\r\n\r\n    // The following three fields helps sharing generated fixed LODs for texture filtering\r\n    // In environment not supporting the textureLOD extension like EDGE. They are for internal use only.\r\n    // They are at the level of the gl texture to benefit from the cache.\r\n    /** @internal */\r\n    public _lodTextureHigh: Nullable<BaseTexture> = null;\r\n    /** @internal */\r\n    public _lodTextureMid: Nullable<BaseTexture> = null;\r\n    /** @internal */\r\n    public _lodTextureLow: Nullable<BaseTexture> = null;\r\n    /** @internal */\r\n    public _isRGBD: boolean = false;\r\n\r\n    /** @internal */\r\n    public _linearSpecularLOD: boolean = false;\r\n    /** @internal */\r\n    public _irradianceTexture: Nullable<BaseTexture> = null;\r\n\r\n    /** @internal */\r\n    public _hardwareTexture: Nullable<HardwareTextureWrapper> = null;\r\n\r\n    /** @internal */\r\n    public _maxLodLevel: Nullable<number> = null;\r\n\r\n    /** @internal */\r\n    public _references: number = 1;\r\n\r\n    /** @internal */\r\n    public _gammaSpace: Nullable<boolean> = null;\r\n\r\n    private _engine: ThinEngine;\r\n    private _uniqueId: number;\r\n\r\n    /** @internal */\r\n    public static _Counter = 0;\r\n\r\n    /** Gets the unique id of the internal texture */\r\n    public get uniqueId() {\r\n        return this._uniqueId;\r\n    }\r\n\r\n    /** @internal */\r\n    public _setUniqueId(id: number) {\r\n        this._uniqueId = id;\r\n    }\r\n\r\n    /**\r\n     * Gets the Engine the texture belongs to.\r\n     * @returns The babylon engine\r\n     */\r\n    public getEngine(): ThinEngine {\r\n        return this._engine;\r\n    }\r\n\r\n    /**\r\n     * Gets the data source type of the texture\r\n     */\r\n    public get source(): InternalTextureSource {\r\n        return this._source;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InternalTexture\r\n     * @param engine defines the engine to use\r\n     * @param source defines the type of data that will be used\r\n     * @param delayAllocation if the texture allocation should be delayed (default: false)\r\n     */\r\n    constructor(engine: ThinEngine, source: InternalTextureSource, delayAllocation = false) {\r\n        super();\r\n\r\n        this._engine = engine;\r\n        this._source = source;\r\n        this._uniqueId = InternalTexture._Counter++;\r\n\r\n        if (!delayAllocation) {\r\n            this._hardwareTexture = engine._createHardwareTexture();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increments the number of references (ie. the number of Texture that point to it)\r\n     */\r\n    public incrementReferences(): void {\r\n        this._references++;\r\n    }\r\n\r\n    /**\r\n     * Change the size of the texture (not the size of the content)\r\n     * @param width defines the new width\r\n     * @param height defines the new height\r\n     * @param depth defines the new depth (1 by default)\r\n     */\r\n    public updateSize(width: int, height: int, depth: int = 1): void {\r\n        this._engine.updateTextureDimensions(this, width, height, depth);\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n        this.depth = depth;\r\n\r\n        this.baseWidth = width;\r\n        this.baseHeight = height;\r\n        this.baseDepth = depth;\r\n\r\n        this._size = width * height * depth;\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild(): void {\r\n        this.isReady = false;\r\n        this._cachedCoordinatesMode = null;\r\n        this._cachedWrapU = null;\r\n        this._cachedWrapV = null;\r\n        this._cachedWrapR = null;\r\n        this._cachedAnisotropicFilteringLevel = null;\r\n        if (this.onRebuildCallback) {\r\n            const data = this.onRebuildCallback(this);\r\n            const swapAndSetIsReady = (proxyInternalTexture: InternalTexture) => {\r\n                proxyInternalTexture._swapAndDie(this, false);\r\n                this.isReady = data.isReady;\r\n            };\r\n            if (data.isAsync) {\r\n                (data.proxy as Promise<InternalTexture>).then(swapAndSetIsReady);\r\n            } else {\r\n                swapAndSetIsReady(data.proxy as InternalTexture);\r\n            }\r\n            return;\r\n        }\r\n\r\n        let proxy: InternalTexture;\r\n        switch (this.source) {\r\n            case InternalTextureSource.Temp:\r\n                break;\r\n\r\n            case InternalTextureSource.Url:\r\n                proxy = this._engine.createTexture(\r\n                    this._originalUrl ?? this.url,\r\n                    !this.generateMipMaps,\r\n                    this.invertY,\r\n                    null,\r\n                    this.samplingMode,\r\n                    // Do not use Proxy here as it could be fully synchronous\r\n                    // and proxy would be undefined.\r\n                    (temp) => {\r\n                        temp._swapAndDie(this, false);\r\n                        this.isReady = true;\r\n                    },\r\n                    null,\r\n                    this._buffer,\r\n                    undefined,\r\n                    this.format,\r\n                    this._extension,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    this._useSRGBBuffer\r\n                );\r\n                return;\r\n\r\n            case InternalTextureSource.Raw:\r\n                proxy = this._engine.createRawTexture(\r\n                    this._bufferView,\r\n                    this.baseWidth,\r\n                    this.baseHeight,\r\n                    this.format,\r\n                    this.generateMipMaps,\r\n                    this.invertY,\r\n                    this.samplingMode,\r\n                    this._compression,\r\n                    this.type,\r\n                    undefined,\r\n                    this._useSRGBBuffer\r\n                );\r\n                proxy._swapAndDie(this, false);\r\n\r\n                this.isReady = true;\r\n                break;\r\n\r\n            case InternalTextureSource.Raw3D:\r\n                proxy = this._engine.createRawTexture3D(\r\n                    this._bufferView,\r\n                    this.baseWidth,\r\n                    this.baseHeight,\r\n                    this.baseDepth,\r\n                    this.format,\r\n                    this.generateMipMaps,\r\n                    this.invertY,\r\n                    this.samplingMode,\r\n                    this._compression,\r\n                    this.type\r\n                );\r\n                proxy._swapAndDie(this, false);\r\n\r\n                this.isReady = true;\r\n                break;\r\n\r\n            case InternalTextureSource.Raw2DArray:\r\n                proxy = this._engine.createRawTexture2DArray(\r\n                    this._bufferView,\r\n                    this.baseWidth,\r\n                    this.baseHeight,\r\n                    this.baseDepth,\r\n                    this.format,\r\n                    this.generateMipMaps,\r\n                    this.invertY,\r\n                    this.samplingMode,\r\n                    this._compression,\r\n                    this.type\r\n                );\r\n                proxy._swapAndDie(this, false);\r\n\r\n                this.isReady = true;\r\n                break;\r\n\r\n            case InternalTextureSource.Dynamic:\r\n                proxy = this._engine.createDynamicTexture(this.baseWidth, this.baseHeight, this.generateMipMaps, this.samplingMode);\r\n                proxy._swapAndDie(this, false);\r\n                this._engine.updateDynamicTexture(this, this._engine.getRenderingCanvas()!, this.invertY, undefined, undefined, true);\r\n\r\n                // The engine will make sure to update content so no need to flag it as isReady = true\r\n                break;\r\n\r\n            case InternalTextureSource.Cube:\r\n                proxy = this._engine.createCubeTexture(\r\n                    this.url,\r\n                    null,\r\n                    this._files,\r\n                    !this.generateMipMaps,\r\n                    () => {\r\n                        proxy._swapAndDie(this, false);\r\n                        this.isReady = true;\r\n                    },\r\n                    null,\r\n                    this.format,\r\n                    this._extension,\r\n                    false,\r\n                    0,\r\n                    0,\r\n                    null,\r\n                    undefined,\r\n                    this._useSRGBBuffer\r\n                );\r\n                return;\r\n\r\n            case InternalTextureSource.CubeRaw:\r\n                proxy = this._engine.createRawCubeTexture(\r\n                    this._bufferViewArray!,\r\n                    this.width,\r\n                    this.format,\r\n                    this.type,\r\n                    this.generateMipMaps,\r\n                    this.invertY,\r\n                    this.samplingMode,\r\n                    this._compression\r\n                );\r\n                proxy._swapAndDie(this, false);\r\n                this.isReady = true;\r\n                break;\r\n\r\n            case InternalTextureSource.CubeRawRGBD:\r\n                // This case is being handeled by the environment texture tools and is not a part of the rebuild process.\r\n                // To use CubeRawRGBD use updateRGBDAsync on the cube texture.\r\n                return;\r\n\r\n            case InternalTextureSource.CubePrefiltered:\r\n                proxy = this._engine.createPrefilteredCubeTexture(\r\n                    this.url,\r\n                    null,\r\n                    this._lodGenerationScale,\r\n                    this._lodGenerationOffset,\r\n                    (proxy) => {\r\n                        if (proxy) {\r\n                            proxy._swapAndDie(this, false);\r\n                        }\r\n                        this.isReady = true;\r\n                    },\r\n                    null,\r\n                    this.format,\r\n                    this._extension\r\n                );\r\n                proxy._sphericalPolynomial = this._sphericalPolynomial;\r\n                return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _swapAndDie(target: InternalTexture, swapAll = true): void {\r\n        // TODO what about refcount on target?\r\n\r\n        this._hardwareTexture?.setUsage(target._source, this.generateMipMaps, this.isCube, this.width, this.height);\r\n\r\n        target._hardwareTexture = this._hardwareTexture;\r\n        if (swapAll) {\r\n            target._isRGBD = this._isRGBD;\r\n        }\r\n\r\n        if (this._lodTextureHigh) {\r\n            if (target._lodTextureHigh) {\r\n                target._lodTextureHigh.dispose();\r\n            }\r\n            target._lodTextureHigh = this._lodTextureHigh;\r\n        }\r\n\r\n        if (this._lodTextureMid) {\r\n            if (target._lodTextureMid) {\r\n                target._lodTextureMid.dispose();\r\n            }\r\n            target._lodTextureMid = this._lodTextureMid;\r\n        }\r\n\r\n        if (this._lodTextureLow) {\r\n            if (target._lodTextureLow) {\r\n                target._lodTextureLow.dispose();\r\n            }\r\n            target._lodTextureLow = this._lodTextureLow;\r\n        }\r\n\r\n        if (this._irradianceTexture) {\r\n            if (target._irradianceTexture) {\r\n                target._irradianceTexture.dispose();\r\n            }\r\n            target._irradianceTexture = this._irradianceTexture;\r\n        }\r\n\r\n        const cache = this._engine.getLoadedTexturesCache();\r\n        let index = cache.indexOf(this);\r\n        if (index !== -1) {\r\n            cache.splice(index, 1);\r\n        }\r\n\r\n        index = cache.indexOf(target);\r\n        if (index === -1) {\r\n            cache.push(target);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the current allocated resources\r\n     */\r\n    public dispose(): void {\r\n        this._references--;\r\n        this.onLoadedObservable.clear();\r\n        this.onErrorObservable.clear();\r\n        if (this._references === 0) {\r\n            this._engine._releaseTexture(this);\r\n            this._hardwareTexture = null;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}