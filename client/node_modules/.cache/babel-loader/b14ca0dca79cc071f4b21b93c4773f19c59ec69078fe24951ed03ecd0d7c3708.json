{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nconst NAME = \"KHR_materials_iridescence\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_iridescence/README.md)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_materials_iridescence {\n  /**\n   * @internal\n   */\n  constructor(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n    this.order = 195;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @internal */\n  dispose() {\n    this._loader = null;\n  }\n  /**\n   * @internal\n   */\n  loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, (extensionContext, extension) => {\n      const promises = new Array();\n      promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n      promises.push(this._loadIridescencePropertiesAsync(extensionContext, extension, babylonMaterial));\n      return Promise.all(promises).then(() => {});\n    });\n  }\n  _loadIridescencePropertiesAsync(context, properties, babylonMaterial) {\n    var _a, _b, _c, _d, _e;\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(`${context}: Material type not supported`);\n    }\n    const promises = new Array();\n    babylonMaterial.iridescence.isEnabled = true;\n    babylonMaterial.iridescence.intensity = (_a = properties.iridescenceFactor) !== null && _a !== void 0 ? _a : 0;\n    babylonMaterial.iridescence.indexOfRefraction = (_c = (_b = properties.iridescenceIor) !== null && _b !== void 0 ? _b : properties.iridescenceIOR) !== null && _c !== void 0 ? _c : 1.3;\n    babylonMaterial.iridescence.minimumThickness = (_d = properties.iridescenceThicknessMinimum) !== null && _d !== void 0 ? _d : 100;\n    babylonMaterial.iridescence.maximumThickness = (_e = properties.iridescenceThicknessMaximum) !== null && _e !== void 0 ? _e : 400;\n    if (properties.iridescenceTexture) {\n      promises.push(this._loader.loadTextureInfoAsync(`${context}/iridescenceTexture`, properties.iridescenceTexture, texture => {\n        texture.name = `${babylonMaterial.name} (Iridescence Intensity)`;\n        babylonMaterial.iridescence.texture = texture;\n      }));\n    }\n    if (properties.iridescenceThicknessTexture) {\n      promises.push(this._loader.loadTextureInfoAsync(`${context}/iridescenceThicknessTexture`, properties.iridescenceThicknessTexture, texture => {\n        texture.name = `${babylonMaterial.name} (Iridescence Thickness)`;\n        babylonMaterial.iridescence.thicknessTexture = texture;\n      }));\n    }\n    return Promise.all(promises).then(() => {});\n  }\n}\nGLTFLoader.RegisterExtension(NAME, loader => new KHR_materials_iridescence(loader));","map":{"version":3,"mappings":"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","names":["PBRMaterial","GLTFLoader","NAME","KHR_materials_iridescence","constructor","loader","_loader","enabled","isExtensionUsed","dispose","loadMaterialPropertiesAsync","context","material","babylonMaterial","LoadExtensionAsync","name","extensionContext","extension","promises","Array","push","_loadIridescencePropertiesAsync","Promise","all","then","properties","Error","iridescence","isEnabled","intensity","iridescenceFactor","indexOfRefraction","iridescenceIor","iridescenceIOR","minimumThickness","iridescenceThicknessMinimum","maximumThickness","iridescenceThicknessMaximum","iridescenceTexture","loadTextureInfoAsync","texture","iridescenceThicknessTexture","thicknessTexture","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_materials_iridescence.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsIridescence } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_materials_iridescence\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_iridescence/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_iridescence implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 195;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsIridescence>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadIridescencePropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadIridescencePropertiesAsync(context: string, properties: IKHRMaterialsIridescence, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        babylonMaterial.iridescence.isEnabled = true;\r\n\r\n        babylonMaterial.iridescence.intensity = properties.iridescenceFactor ?? 0;\r\n        babylonMaterial.iridescence.indexOfRefraction = properties.iridescenceIor ?? (properties as any).iridescenceIOR ?? 1.3;\r\n        babylonMaterial.iridescence.minimumThickness = properties.iridescenceThicknessMinimum ?? 100;\r\n        babylonMaterial.iridescence.maximumThickness = properties.iridescenceThicknessMaximum ?? 400;\r\n\r\n        if (properties.iridescenceTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/iridescenceTexture`, properties.iridescenceTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Iridescence Intensity)`;\r\n                    babylonMaterial.iridescence.texture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.iridescenceThicknessTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/iridescenceThicknessTexture`, properties.iridescenceThicknessTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Iridescence Thickness)`;\r\n                    babylonMaterial.iridescence.thicknessTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_iridescence(loader));\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}