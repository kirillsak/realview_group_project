{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../tslib.es6.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Manage the keyboard inputs to control the movement of a follow camera.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\n */\nexport class FollowCameraKeyboardMoveInput {\n  constructor() {\n    /**\n     * Defines the list of key codes associated with the up action (increase heightOffset)\n     */\n    this.keysHeightOffsetIncr = [38];\n    /**\n     * Defines the list of key codes associated with the down action (decrease heightOffset)\n     */\n    this.keysHeightOffsetDecr = [40];\n    /**\n     * Defines whether the Alt modifier key is required to move up/down (alter heightOffset)\n     */\n    this.keysHeightOffsetModifierAlt = false;\n    /**\n     * Defines whether the Ctrl modifier key is required to move up/down (alter heightOffset)\n     */\n    this.keysHeightOffsetModifierCtrl = false;\n    /**\n     * Defines whether the Shift modifier key is required to move up/down (alter heightOffset)\n     */\n    this.keysHeightOffsetModifierShift = false;\n    /**\n     * Defines the list of key codes associated with the left action (increase rotationOffset)\n     */\n    this.keysRotationOffsetIncr = [37];\n    /**\n     * Defines the list of key codes associated with the right action (decrease rotationOffset)\n     */\n    this.keysRotationOffsetDecr = [39];\n    /**\n     * Defines whether the Alt modifier key is required to move left/right (alter rotationOffset)\n     */\n    this.keysRotationOffsetModifierAlt = false;\n    /**\n     * Defines whether the Ctrl modifier key is required to move left/right (alter rotationOffset)\n     */\n    this.keysRotationOffsetModifierCtrl = false;\n    /**\n     * Defines whether the Shift modifier key is required to move left/right (alter rotationOffset)\n     */\n    this.keysRotationOffsetModifierShift = false;\n    /**\n     * Defines the list of key codes associated with the zoom-in action (decrease radius)\n     */\n    this.keysRadiusIncr = [40];\n    /**\n     * Defines the list of key codes associated with the zoom-out action (increase radius)\n     */\n    this.keysRadiusDecr = [38];\n    /**\n     * Defines whether the Alt modifier key is required to zoom in/out (alter radius value)\n     */\n    this.keysRadiusModifierAlt = true;\n    /**\n     * Defines whether the Ctrl modifier key is required to zoom in/out (alter radius value)\n     */\n    this.keysRadiusModifierCtrl = false;\n    /**\n     * Defines whether the Shift modifier key is required to zoom in/out (alter radius value)\n     */\n    this.keysRadiusModifierShift = false;\n    /**\n     * Defines the rate of change of heightOffset.\n     */\n    this.heightSensibility = 1;\n    /**\n     * Defines the rate of change of rotationOffset.\n     */\n    this.rotationSensibility = 1;\n    /**\n     * Defines the rate of change of radius.\n     */\n    this.radiusSensibility = 1;\n    this._keys = new Array();\n  }\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n   */\n  attachControl(noPreventDefault) {\n    // eslint-disable-next-line prefer-rest-params\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n    if (this._onCanvasBlurObserver) {\n      return;\n    }\n    this._scene = this.camera.getScene();\n    this._engine = this._scene.getEngine();\n    this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(() => {\n      this._keys.length = 0;\n    });\n    this._onKeyboardObserver = this._scene.onKeyboardObservable.add(info => {\n      const evt = info.event;\n      if (!evt.metaKey) {\n        if (info.type === KeyboardEventTypes.KEYDOWN) {\n          this._ctrlPressed = evt.ctrlKey;\n          this._altPressed = evt.altKey;\n          this._shiftPressed = evt.shiftKey;\n          if (this.keysHeightOffsetIncr.indexOf(evt.keyCode) !== -1 || this.keysHeightOffsetDecr.indexOf(evt.keyCode) !== -1 || this.keysRotationOffsetIncr.indexOf(evt.keyCode) !== -1 || this.keysRotationOffsetDecr.indexOf(evt.keyCode) !== -1 || this.keysRadiusIncr.indexOf(evt.keyCode) !== -1 || this.keysRadiusDecr.indexOf(evt.keyCode) !== -1) {\n            const index = this._keys.indexOf(evt.keyCode);\n            if (index === -1) {\n              this._keys.push(evt.keyCode);\n            }\n            if (evt.preventDefault) {\n              if (!noPreventDefault) {\n                evt.preventDefault();\n              }\n            }\n          }\n        } else {\n          if (this.keysHeightOffsetIncr.indexOf(evt.keyCode) !== -1 || this.keysHeightOffsetDecr.indexOf(evt.keyCode) !== -1 || this.keysRotationOffsetIncr.indexOf(evt.keyCode) !== -1 || this.keysRotationOffsetDecr.indexOf(evt.keyCode) !== -1 || this.keysRadiusIncr.indexOf(evt.keyCode) !== -1 || this.keysRadiusDecr.indexOf(evt.keyCode) !== -1) {\n            const index = this._keys.indexOf(evt.keyCode);\n            if (index >= 0) {\n              this._keys.splice(index, 1);\n            }\n            if (evt.preventDefault) {\n              if (!noPreventDefault) {\n                evt.preventDefault();\n              }\n            }\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n  detachControl() {\n    if (this._scene) {\n      if (this._onKeyboardObserver) {\n        this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\n      }\n      if (this._onCanvasBlurObserver) {\n        this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\n      }\n      this._onKeyboardObserver = null;\n      this._onCanvasBlurObserver = null;\n    }\n    this._keys.length = 0;\n  }\n  /**\n   * Update the current camera state depending on the inputs that have been used this frame.\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n   */\n  checkInputs() {\n    if (this._onKeyboardObserver) {\n      this._keys.forEach(keyCode => {\n        if (this.keysHeightOffsetIncr.indexOf(keyCode) !== -1 && this._modifierHeightOffset()) {\n          this.camera.heightOffset += this.heightSensibility;\n        } else if (this.keysHeightOffsetDecr.indexOf(keyCode) !== -1 && this._modifierHeightOffset()) {\n          this.camera.heightOffset -= this.heightSensibility;\n        } else if (this.keysRotationOffsetIncr.indexOf(keyCode) !== -1 && this._modifierRotationOffset()) {\n          this.camera.rotationOffset += this.rotationSensibility;\n          this.camera.rotationOffset %= 360;\n        } else if (this.keysRotationOffsetDecr.indexOf(keyCode) !== -1 && this._modifierRotationOffset()) {\n          this.camera.rotationOffset -= this.rotationSensibility;\n          this.camera.rotationOffset %= 360;\n        } else if (this.keysRadiusIncr.indexOf(keyCode) !== -1 && this._modifierRadius()) {\n          this.camera.radius += this.radiusSensibility;\n        } else if (this.keysRadiusDecr.indexOf(keyCode) !== -1 && this._modifierRadius()) {\n          this.camera.radius -= this.radiusSensibility;\n        }\n      });\n    }\n  }\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n  getClassName() {\n    return \"FollowCameraKeyboardMoveInput\";\n  }\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n  getSimpleName() {\n    return \"keyboard\";\n  }\n  /**\n   * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\n   * allow modification of the heightOffset value.\n   */\n  _modifierHeightOffset() {\n    return this.keysHeightOffsetModifierAlt === this._altPressed && this.keysHeightOffsetModifierCtrl === this._ctrlPressed && this.keysHeightOffsetModifierShift === this._shiftPressed;\n  }\n  /**\n   * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\n   * allow modification of the rotationOffset value.\n   */\n  _modifierRotationOffset() {\n    return this.keysRotationOffsetModifierAlt === this._altPressed && this.keysRotationOffsetModifierCtrl === this._ctrlPressed && this.keysRotationOffsetModifierShift === this._shiftPressed;\n  }\n  /**\n   * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\n   * allow modification of the radius value.\n   */\n  _modifierRadius() {\n    return this.keysRadiusModifierAlt === this._altPressed && this.keysRadiusModifierCtrl === this._ctrlPressed && this.keysRadiusModifierShift === this._shiftPressed;\n  }\n}\n__decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetIncr\", void 0);\n__decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetDecr\", void 0);\n__decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetModifierAlt\", void 0);\n__decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetModifierCtrl\", void 0);\n__decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetModifierShift\", void 0);\n__decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetIncr\", void 0);\n__decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetDecr\", void 0);\n__decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetModifierAlt\", void 0);\n__decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetModifierCtrl\", void 0);\n__decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetModifierShift\", void 0);\n__decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusIncr\", void 0);\n__decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusDecr\", void 0);\n__decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusModifierAlt\", void 0);\n__decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusModifierCtrl\", void 0);\n__decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusModifierShift\", void 0);\n__decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"heightSensibility\", void 0);\n__decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"rotationSensibility\", void 0);\n__decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"radiusSensibility\", void 0);\nCameraInputTypes[\"FollowCameraKeyboardMoveInput\"] = FollowCameraKeyboardMoveInput;","map":{"version":3,"mappings":"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","names":["CameraInputTypes","serialize","KeyboardEventTypes","Tools","FollowCameraKeyboardMoveInput","constructor","Array","attachControl","noPreventDefault","BackCompatCameraNoPreventDefault","arguments","_onCanvasBlurObserver","_scene","camera","getScene","_engine","getEngine","onCanvasBlurObservable","add","_keys","length","_onKeyboardObserver","onKeyboardObservable","info","evt","event","metaKey","type","KEYDOWN","_ctrlPressed","ctrlKey","_altPressed","altKey","_shiftPressed","shiftKey","keysHeightOffsetIncr","indexOf","keyCode","keysHeightOffsetDecr","keysRotationOffsetIncr","keysRotationOffsetDecr","keysRadiusIncr","keysRadiusDecr","index","push","preventDefault","splice","detachControl","remove","checkInputs","forEach","_modifierHeightOffset","heightOffset","heightSensibility","_modifierRotationOffset","rotationOffset","rotationSensibility","_modifierRadius","radius","radiusSensibility","getClassName","getSimpleName","keysHeightOffsetModifierAlt","keysHeightOffsetModifierCtrl","keysHeightOffsetModifierShift","keysRotationOffsetModifierAlt","keysRotationOffsetModifierCtrl","keysRotationOffsetModifierShift","keysRadiusModifierAlt","keysRadiusModifierCtrl","keysRadiusModifierShift","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/Inputs/followCameraKeyboardMoveInput.ts"],"sourcesContent":["import type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { FollowCamera } from \"../../Cameras/followCamera\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport type { Engine } from \"../../Engines/engine\";\r\nimport type { KeyboardInfo } from \"../../Events/keyboardEvents\";\r\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n\r\n/**\r\n * Manage the keyboard inputs to control the movement of a follow camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class FollowCameraKeyboardMoveInput implements ICameraInput<FollowCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FollowCamera;\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the up action (increase heightOffset)\r\n     */\r\n    @serialize()\r\n    public keysHeightOffsetIncr = [38];\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the down action (decrease heightOffset)\r\n     */\r\n    @serialize()\r\n    public keysHeightOffsetDecr = [40];\r\n\r\n    /**\r\n     * Defines whether the Alt modifier key is required to move up/down (alter heightOffset)\r\n     */\r\n    @serialize()\r\n    public keysHeightOffsetModifierAlt: boolean = false;\r\n\r\n    /**\r\n     * Defines whether the Ctrl modifier key is required to move up/down (alter heightOffset)\r\n     */\r\n    @serialize()\r\n    public keysHeightOffsetModifierCtrl: boolean = false;\r\n\r\n    /**\r\n     * Defines whether the Shift modifier key is required to move up/down (alter heightOffset)\r\n     */\r\n    @serialize()\r\n    public keysHeightOffsetModifierShift: boolean = false;\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the left action (increase rotationOffset)\r\n     */\r\n    @serialize()\r\n    public keysRotationOffsetIncr = [37];\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the right action (decrease rotationOffset)\r\n     */\r\n    @serialize()\r\n    public keysRotationOffsetDecr = [39];\r\n\r\n    /**\r\n     * Defines whether the Alt modifier key is required to move left/right (alter rotationOffset)\r\n     */\r\n    @serialize()\r\n    public keysRotationOffsetModifierAlt: boolean = false;\r\n\r\n    /**\r\n     * Defines whether the Ctrl modifier key is required to move left/right (alter rotationOffset)\r\n     */\r\n    @serialize()\r\n    public keysRotationOffsetModifierCtrl: boolean = false;\r\n\r\n    /**\r\n     * Defines whether the Shift modifier key is required to move left/right (alter rotationOffset)\r\n     */\r\n    @serialize()\r\n    public keysRotationOffsetModifierShift: boolean = false;\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the zoom-in action (decrease radius)\r\n     */\r\n    @serialize()\r\n    public keysRadiusIncr = [40];\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the zoom-out action (increase radius)\r\n     */\r\n    @serialize()\r\n    public keysRadiusDecr = [38];\r\n\r\n    /**\r\n     * Defines whether the Alt modifier key is required to zoom in/out (alter radius value)\r\n     */\r\n    @serialize()\r\n    public keysRadiusModifierAlt: boolean = true;\r\n\r\n    /**\r\n     * Defines whether the Ctrl modifier key is required to zoom in/out (alter radius value)\r\n     */\r\n    @serialize()\r\n    public keysRadiusModifierCtrl: boolean = false;\r\n\r\n    /**\r\n     * Defines whether the Shift modifier key is required to zoom in/out (alter radius value)\r\n     */\r\n    @serialize()\r\n    public keysRadiusModifierShift: boolean = false;\r\n\r\n    /**\r\n     * Defines the rate of change of heightOffset.\r\n     */\r\n    @serialize()\r\n    public heightSensibility: number = 1;\r\n\r\n    /**\r\n     * Defines the rate of change of rotationOffset.\r\n     */\r\n    @serialize()\r\n    public rotationSensibility: number = 1;\r\n\r\n    /**\r\n     * Defines the rate of change of radius.\r\n     */\r\n    @serialize()\r\n    public radiusSensibility: number = 1;\r\n\r\n    private _keys = new Array<number>();\r\n    private _ctrlPressed: boolean;\r\n    private _altPressed: boolean;\r\n    private _shiftPressed: boolean;\r\n    private _onCanvasBlurObserver: Nullable<Observer<Engine>>;\r\n    private _onKeyboardObserver: Nullable<Observer<KeyboardInfo>>;\r\n    private _engine: Engine;\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        if (this._onCanvasBlurObserver) {\r\n            return;\r\n        }\r\n\r\n        this._scene = this.camera.getScene();\r\n        this._engine = this._scene.getEngine();\r\n\r\n        this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(() => {\r\n            this._keys.length = 0;\r\n        });\r\n\r\n        this._onKeyboardObserver = this._scene.onKeyboardObservable.add((info) => {\r\n            const evt = info.event;\r\n            if (!evt.metaKey) {\r\n                if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                    this._ctrlPressed = evt.ctrlKey;\r\n                    this._altPressed = evt.altKey;\r\n                    this._shiftPressed = evt.shiftKey;\r\n\r\n                    if (\r\n                        this.keysHeightOffsetIncr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysHeightOffsetDecr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotationOffsetIncr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotationOffsetDecr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRadiusIncr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRadiusDecr.indexOf(evt.keyCode) !== -1\r\n                    ) {\r\n                        const index = this._keys.indexOf(evt.keyCode);\r\n\r\n                        if (index === -1) {\r\n                            this._keys.push(evt.keyCode);\r\n                        }\r\n\r\n                        if (evt.preventDefault) {\r\n                            if (!noPreventDefault) {\r\n                                evt.preventDefault();\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (\r\n                        this.keysHeightOffsetIncr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysHeightOffsetDecr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotationOffsetIncr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotationOffsetDecr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRadiusIncr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRadiusDecr.indexOf(evt.keyCode) !== -1\r\n                    ) {\r\n                        const index = this._keys.indexOf(evt.keyCode);\r\n\r\n                        if (index >= 0) {\r\n                            this._keys.splice(index, 1);\r\n                        }\r\n\r\n                        if (evt.preventDefault) {\r\n                            if (!noPreventDefault) {\r\n                                evt.preventDefault();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        if (this._scene) {\r\n            if (this._onKeyboardObserver) {\r\n                this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\r\n            }\r\n            if (this._onCanvasBlurObserver) {\r\n                this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\r\n            }\r\n            this._onKeyboardObserver = null;\r\n            this._onCanvasBlurObserver = null;\r\n        }\r\n\r\n        this._keys.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this._onKeyboardObserver) {\r\n            this._keys.forEach((keyCode) => {\r\n                if (this.keysHeightOffsetIncr.indexOf(keyCode) !== -1 && this._modifierHeightOffset()) {\r\n                    this.camera.heightOffset += this.heightSensibility;\r\n                } else if (this.keysHeightOffsetDecr.indexOf(keyCode) !== -1 && this._modifierHeightOffset()) {\r\n                    this.camera.heightOffset -= this.heightSensibility;\r\n                } else if (this.keysRotationOffsetIncr.indexOf(keyCode) !== -1 && this._modifierRotationOffset()) {\r\n                    this.camera.rotationOffset += this.rotationSensibility;\r\n                    this.camera.rotationOffset %= 360;\r\n                } else if (this.keysRotationOffsetDecr.indexOf(keyCode) !== -1 && this._modifierRotationOffset()) {\r\n                    this.camera.rotationOffset -= this.rotationSensibility;\r\n                    this.camera.rotationOffset %= 360;\r\n                } else if (this.keysRadiusIncr.indexOf(keyCode) !== -1 && this._modifierRadius()) {\r\n                    this.camera.radius += this.radiusSensibility;\r\n                } else if (this.keysRadiusDecr.indexOf(keyCode) !== -1 && this._modifierRadius()) {\r\n                    this.camera.radius -= this.radiusSensibility;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FollowCameraKeyboardMoveInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"keyboard\";\r\n    }\r\n\r\n    /**\r\n     * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\r\n     * allow modification of the heightOffset value.\r\n     */\r\n    private _modifierHeightOffset(): boolean {\r\n        return (\r\n            this.keysHeightOffsetModifierAlt === this._altPressed &&\r\n            this.keysHeightOffsetModifierCtrl === this._ctrlPressed &&\r\n            this.keysHeightOffsetModifierShift === this._shiftPressed\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\r\n     * allow modification of the rotationOffset value.\r\n     */\r\n    private _modifierRotationOffset(): boolean {\r\n        return (\r\n            this.keysRotationOffsetModifierAlt === this._altPressed &&\r\n            this.keysRotationOffsetModifierCtrl === this._ctrlPressed &&\r\n            this.keysRotationOffsetModifierShift === this._shiftPressed\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\r\n     * allow modification of the radius value.\r\n     */\r\n    private _modifierRadius(): boolean {\r\n        return this.keysRadiusModifierAlt === this._altPressed && this.keysRadiusModifierCtrl === this._ctrlPressed && this.keysRadiusModifierShift === this._shiftPressed;\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FollowCameraKeyboardMoveInput\"] = FollowCameraKeyboardMoveInput;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}