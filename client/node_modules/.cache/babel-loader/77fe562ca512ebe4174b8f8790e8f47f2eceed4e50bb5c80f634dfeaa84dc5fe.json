{"ast":null,"code":"import { Texture } from \"./texture.js\";\nimport \"../../Engines/Extensions/engine.rawTexture.js\";\n/**\n * Class used to store 2D array textures containing user data\n */\nexport class RawTexture2DArray extends Texture {\n  /**\n   * Create a new RawTexture2DArray\n   * @param data defines the data of the texture\n   * @param width defines the width of the texture\n   * @param height defines the height of the texture\n   * @param depth defines the number of layers of the texture\n   * @param format defines the texture format to use\n   * @param scene defines the hosting scene\n   * @param generateMipMaps defines a boolean indicating if mip levels should be generated (true by default)\n   * @param invertY defines if texture must be stored with Y axis inverted\n   * @param samplingMode defines the sampling mode to use (Texture.TRILINEAR_SAMPLINGMODE by default)\n   * @param textureType defines the texture Type (Engine.TEXTURETYPE_UNSIGNED_INT, Engine.TEXTURETYPE_FLOAT...)\n   */\n  constructor(data, width, height, depth, /** Gets or sets the texture format to use */\n  format, scene, generateMipMaps = true, invertY = false, samplingMode = Texture.TRILINEAR_SAMPLINGMODE, textureType = 0) {\n    super(null, scene, !generateMipMaps, invertY);\n    this.format = format;\n    this._texture = scene.getEngine().createRawTexture2DArray(data, width, height, depth, format, generateMipMaps, invertY, samplingMode, null, textureType);\n    this._depth = depth;\n    this.is2DArray = true;\n  }\n  /**\n   * Gets the number of layers of the texture\n   */\n  get depth() {\n    return this._depth;\n  }\n  /**\n   * Update the texture with new data\n   * @param data defines the data to store in the texture\n   */\n  update(data) {\n    if (!this._texture) {\n      return;\n    }\n    this._getEngine().updateRawTexture2DArray(this._texture, data, this._texture.format, this._texture.invertY, null, this._texture.type);\n  }\n  /**\n   * Creates a RGBA texture from some data.\n   * @param data Define the texture data\n   * @param width Define the width of the texture\n   * @param height Define the height of the texture\n   * @param depth defines the number of layers of the texture\n   * @param scene defines the scene the texture will belong to\n   * @param generateMipMaps Define whether or not to create mip maps for the texture\n   * @param invertY define if the data should be flipped on Y when uploaded to the GPU\n   * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\n   * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\n   * @returns the RGBA texture\n   */\n  static CreateRGBATexture(data, width, height, depth, scene, generateMipMaps = true, invertY = false, samplingMode = 3, type = 0) {\n    return new RawTexture2DArray(data, width, height, depth, 5, scene, generateMipMaps, invertY, samplingMode, type);\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAO,QAAQ,cAAY;AAEpC,OAAO,+CAA6C;AAIpD;;;AAGA,OAAM,MAAOC,iBAAkB,SAAQD,OAAO;EAU1C;;;;;;;;;;;;;EAaAE,YACIC,IAAqB,EACrBC,KAAa,EACbC,MAAc,EACdC,KAAa,EACb;EACOC,MAAc,EACrBC,KAAY,EACZC,kBAA2B,IAAI,EAC/BC,UAAmB,KAAK,EACxBC,eAAuBX,OAAO,CAACY,sBAAsB,EACrDC,WAAW,GAAG;IAEd,KAAK,CAAC,IAAI,EAAEL,KAAK,EAAE,CAACC,eAAe,EAAEC,OAAO,CAAC;IAPtC,WAAM,GAANH,MAAM;IASb,IAAI,CAACO,QAAQ,GAAGN,KAAK,CAACO,SAAS,EAAE,CAACC,uBAAuB,CAACb,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEE,eAAe,EAAEC,OAAO,EAAEC,YAAY,EAAE,IAAI,EAAEE,WAAW,CAAC;IAExJ,IAAI,CAACI,MAAM,GAAGX,KAAK;IACnB,IAAI,CAACY,SAAS,GAAG,IAAI;EACzB;EAvCA;;;EAGA,IAAWZ,KAAK;IACZ,OAAO,IAAI,CAACW,MAAM;EACtB;EAoCA;;;;EAIOE,MAAM,CAAChB,IAAqB;IAC/B,IAAI,CAAC,IAAI,CAACW,QAAQ,EAAE;MAChB;;IAEJ,IAAI,CAACM,UAAU,EAAG,CAACC,uBAAuB,CAAC,IAAI,CAACP,QAAQ,EAAEX,IAAI,EAAE,IAAI,CAACW,QAAQ,CAACP,MAAM,EAAE,IAAI,CAACO,QAAS,CAACJ,OAAO,EAAE,IAAI,EAAE,IAAI,CAACI,QAAQ,CAACQ,IAAI,CAAC;EAC3I;EAEA;;;;;;;;;;;;;EAaO,OAAOC,iBAAiB,CAC3BpB,IAAqB,EACrBC,KAAa,EACbC,MAAc,EACdC,KAAa,EACbE,KAAY,EACZC,kBAA2B,IAAI,EAC/BC,UAAmB,KAAK,EACxBC,eAAuB,UAAU;IAGjC,OAAO,IAAIV,iBAAiB,CAACE,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAE,UAAUG,wBAAoB,EAAKE,YAAE,MAAiB;EACnH","names":["Texture","RawTexture2DArray","constructor","data","width","height","depth","format","scene","generateMipMaps","invertY","samplingMode","TRILINEAR_SAMPLINGMODE","textureType","_texture","getEngine","createRawTexture2DArray","_depth","is2DArray","update","_getEngine","updateRawTexture2DArray","type","CreateRGBATexture"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/Textures/rawTexture2DArray.ts"],"sourcesContent":["import { Texture } from \"./texture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport \"../../Engines/Extensions/engine.rawTexture\";\r\n\r\ndeclare type Scene = import(\"../../scene\").Scene;\r\n\r\n/**\r\n * Class used to store 2D array textures containing user data\r\n */\r\nexport class RawTexture2DArray extends Texture {\r\n    private _depth: number;\r\n\r\n    /**\r\n     * Gets the number of layers of the texture\r\n     */\r\n    public get depth() {\r\n        return this._depth;\r\n    }\r\n\r\n    /**\r\n     * Create a new RawTexture2DArray\r\n     * @param data defines the data of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param depth defines the number of layers of the texture\r\n     * @param format defines the texture format to use\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mip levels should be generated (true by default)\r\n     * @param invertY defines if texture must be stored with Y axis inverted\r\n     * @param samplingMode defines the sampling mode to use (Texture.TRILINEAR_SAMPLINGMODE by default)\r\n     * @param textureType defines the texture Type (Engine.TEXTURETYPE_UNSIGNED_INT, Engine.TEXTURETYPE_FLOAT...)\r\n     */\r\n    constructor(\r\n        data: ArrayBufferView,\r\n        width: number,\r\n        height: number,\r\n        depth: number,\r\n        /** Gets or sets the texture format to use */\r\n        public format: number,\r\n        scene: Scene,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE,\r\n        textureType = Constants.TEXTURETYPE_UNSIGNED_INT\r\n    ) {\r\n        super(null, scene, !generateMipMaps, invertY);\r\n\r\n        this._texture = scene.getEngine().createRawTexture2DArray(data, width, height, depth, format, generateMipMaps, invertY, samplingMode, null, textureType);\r\n\r\n        this._depth = depth;\r\n        this.is2DArray = true;\r\n    }\r\n\r\n    /**\r\n     * Update the texture with new data\r\n     * @param data defines the data to store in the texture\r\n     */\r\n    public update(data: ArrayBufferView): void {\r\n        if (!this._texture) {\r\n            return;\r\n        }\r\n        this._getEngine()!.updateRawTexture2DArray(this._texture, data, this._texture.format, this._texture!.invertY, null, this._texture.type);\r\n    }\r\n\r\n    /**\r\n     * Creates a RGBA texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param depth defines the number of layers of the texture\r\n     * @param scene defines the scene the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @returns the RGBA texture\r\n     */\r\n    public static CreateRGBATexture(\r\n        data: ArrayBufferView,\r\n        width: number,\r\n        height: number,\r\n        depth: number,\r\n        scene: Scene,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_UNSIGNED_INT\r\n    ): RawTexture2DArray {\r\n        return new RawTexture2DArray(data, width, height, depth, Constants.TEXTUREFORMAT_RGBA, scene, generateMipMaps, invertY, samplingMode, type);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}