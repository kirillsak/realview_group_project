{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable @typescript-eslint/naming-convention */\n/** @internal */\nexport class ShaderDefineExpression {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isTrue(preprocessors) {\n    return true;\n  }\n  static postfixToInfix(postfix) {\n    const stack = [];\n    for (const c of postfix) {\n      if (ShaderDefineExpression._OperatorPriority[c] === undefined) {\n        stack.push(c);\n      } else {\n        const v1 = stack[stack.length - 1],\n          v2 = stack[stack.length - 2];\n        stack.length -= 2;\n        stack.push(`(${v2}${c}${v1})`);\n      }\n    }\n    return stack[stack.length - 1];\n  }\n  static infixToPostfix(infix) {\n    const result = [];\n    let stackIdx = -1;\n    const pushOperand = () => {\n      operand = operand.trim();\n      if (operand !== \"\") {\n        result.push(operand);\n        operand = \"\";\n      }\n    };\n    const push = s => {\n      if (stackIdx < ShaderDefineExpression._Stack.length - 1) {\n        ShaderDefineExpression._Stack[++stackIdx] = s;\n      }\n    };\n    const peek = () => ShaderDefineExpression._Stack[stackIdx];\n    const pop = () => stackIdx === -1 ? \"!!INVALID EXPRESSION!!\" : ShaderDefineExpression._Stack[stackIdx--];\n    let idx = 0,\n      operand = \"\";\n    while (idx < infix.length) {\n      const c = infix.charAt(idx),\n        token = idx < infix.length - 1 ? infix.substr(idx, 2) : \"\";\n      if (c === \"(\") {\n        operand = \"\";\n        push(c);\n      } else if (c === \")\") {\n        pushOperand();\n        while (stackIdx !== -1 && peek() !== \"(\") {\n          result.push(pop());\n        }\n        pop();\n      } else if (ShaderDefineExpression._OperatorPriority[token] > 1) {\n        pushOperand();\n        while (stackIdx !== -1 && ShaderDefineExpression._OperatorPriority[peek()] >= ShaderDefineExpression._OperatorPriority[token]) {\n          result.push(pop());\n        }\n        push(token);\n        idx++;\n      } else {\n        operand += c;\n      }\n      idx++;\n    }\n    pushOperand();\n    while (stackIdx !== -1) {\n      if (peek() === \"(\") {\n        pop();\n      } else {\n        result.push(pop());\n      }\n    }\n    return result;\n  }\n}\nShaderDefineExpression._OperatorPriority = {\n  \")\": 0,\n  \"(\": 1,\n  \"||\": 2,\n  \"&&\": 3\n};\nShaderDefineExpression._Stack = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAM,MAAOA,sBAAsB;EAC/B;EACOC,MAAM,CAACC,aAAwC;IAClD,OAAO,IAAI;EACf;EAWO,OAAOC,cAAc,CAACC,OAAiB;IAC1C,MAAMC,KAAK,GAAa,EAAE;IAE1B,KAAK,MAAMC,CAAC,IAAIF,OAAO,EAAE;MACrB,IAAIJ,sBAAsB,CAACO,iBAAiB,CAACD,CAAC,CAAC,KAAKE,SAAS,EAAE;QAC3DH,KAAK,CAACI,IAAI,CAACH,CAAC,CAAC;OAChB,MAAM;QACH,MAAMI,EAAE,GAAGL,KAAK,CAACA,KAAK,CAACM,MAAM,GAAG,CAAC,CAAC;UAC9BC,EAAE,GAAGP,KAAK,CAACA,KAAK,CAACM,MAAM,GAAG,CAAC,CAAC;QAEhCN,KAAK,CAACM,MAAM,IAAI,CAAC;QACjBN,KAAK,CAACI,IAAI,CAAC,IAAIG,EAAE,GAAGN,CAAC,GAAGI,EAAE,GAAG,CAAC;;;IAItC,OAAOL,KAAK,CAACA,KAAK,CAACM,MAAM,GAAG,CAAC,CAAC;EAClC;EAEO,OAAOE,cAAc,CAACC,KAAa;IACtC,MAAMC,MAAM,GAAa,EAAE;IAE3B,IAAIC,QAAQ,GAAG,CAAC,CAAC;IAEjB,MAAMC,WAAW,GAAG,MAAK;MACrBC,OAAO,GAAGA,OAAO,CAACC,IAAI,EAAE;MACxB,IAAID,OAAO,KAAK,EAAE,EAAE;QAChBH,MAAM,CAACN,IAAI,CAACS,OAAO,CAAC;QACpBA,OAAO,GAAG,EAAE;;IAEpB,CAAC;IAED,MAAMT,IAAI,GAAIW,CAAS,IAAI;MACvB,IAAIJ,QAAQ,GAAGhB,sBAAsB,CAACqB,MAAM,CAACV,MAAM,GAAG,CAAC,EAAE;QACrDX,sBAAsB,CAACqB,MAAM,CAAC,EAAEL,QAAQ,CAAC,GAAGI,CAAC;;IAErD,CAAC;IAED,MAAME,IAAI,GAAG,MAAMtB,sBAAsB,CAACqB,MAAM,CAACL,QAAQ,CAAC;IAE1D,MAAMO,GAAG,GAAG,MAAOP,QAAQ,KAAK,CAAC,CAAC,GAAG,wBAAwB,GAAGhB,sBAAsB,CAACqB,MAAM,CAACL,QAAQ,EAAE,CAAE;IAE1G,IAAIQ,GAAG,GAAG,CAAC;MACPN,OAAO,GAAG,EAAE;IAEhB,OAAOM,GAAG,GAAGV,KAAK,CAACH,MAAM,EAAE;MACvB,MAAML,CAAC,GAAGQ,KAAK,CAACW,MAAM,CAACD,GAAG,CAAC;QACvBE,KAAK,GAAGF,GAAG,GAAGV,KAAK,CAACH,MAAM,GAAG,CAAC,GAAGG,KAAK,CAACa,MAAM,CAACH,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE;MAE9D,IAAIlB,CAAC,KAAK,GAAG,EAAE;QACXY,OAAO,GAAG,EAAE;QACZT,IAAI,CAACH,CAAC,CAAC;OACV,MAAM,IAAIA,CAAC,KAAK,GAAG,EAAE;QAClBW,WAAW,EAAE;QACb,OAAOD,QAAQ,KAAK,CAAC,CAAC,IAAIM,IAAI,EAAE,KAAK,GAAG,EAAE;UACtCP,MAAM,CAACN,IAAI,CAACc,GAAG,EAAE,CAAC;;QAEtBA,GAAG,EAAE;OACR,MAAM,IAAIvB,sBAAsB,CAACO,iBAAiB,CAACmB,KAAK,CAAC,GAAG,CAAC,EAAE;QAC5DT,WAAW,EAAE;QACb,OAAOD,QAAQ,KAAK,CAAC,CAAC,IAAIhB,sBAAsB,CAACO,iBAAiB,CAACe,IAAI,EAAE,CAAC,IAAItB,sBAAsB,CAACO,iBAAiB,CAACmB,KAAK,CAAC,EAAE;UAC3HX,MAAM,CAACN,IAAI,CAACc,GAAG,EAAE,CAAC;;QAEtBd,IAAI,CAACiB,KAAK,CAAC;QACXF,GAAG,EAAE;OACR,MAAM;QACHN,OAAO,IAAIZ,CAAC;;MAEhBkB,GAAG,EAAE;;IAGTP,WAAW,EAAE;IAEb,OAAOD,QAAQ,KAAK,CAAC,CAAC,EAAE;MACpB,IAAIM,IAAI,EAAE,KAAK,GAAG,EAAE;QAChBC,GAAG,EAAE;OACR,MAAM;QACHR,MAAM,CAACN,IAAI,CAACc,GAAG,EAAE,CAAC;;;IAI1B,OAAOR,MAAM;EACjB;;AA1Fef,wCAAiB,GAA+B;EAC3D,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,IAAI,EAAE,CAAC;EACP,IAAI,EAAE;CACT;AAEcA,6BAAM,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC","names":["ShaderDefineExpression","isTrue","preprocessors","postfixToInfix","postfix","stack","c","_OperatorPriority","undefined","push","v1","length","v2","infixToPostfix","infix","result","stackIdx","pushOperand","operand","trim","s","_Stack","peek","pop","idx","charAt","token","substr"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/Processors/Expressions/shaderDefineExpression.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\n/** @internal */\r\nexport class ShaderDefineExpression {\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public isTrue(preprocessors: { [key: string]: string }): boolean {\r\n        return true;\r\n    }\r\n\r\n    private static _OperatorPriority: { [name: string]: number } = {\r\n        \")\": 0,\r\n        \"(\": 1,\r\n        \"||\": 2,\r\n        \"&&\": 3,\r\n    };\r\n\r\n    private static _Stack = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\r\n\r\n    public static postfixToInfix(postfix: string[]): string {\r\n        const stack: string[] = [];\r\n\r\n        for (const c of postfix) {\r\n            if (ShaderDefineExpression._OperatorPriority[c] === undefined) {\r\n                stack.push(c);\r\n            } else {\r\n                const v1 = stack[stack.length - 1],\r\n                    v2 = stack[stack.length - 2];\r\n\r\n                stack.length -= 2;\r\n                stack.push(`(${v2}${c}${v1})`);\r\n            }\r\n        }\r\n\r\n        return stack[stack.length - 1];\r\n    }\r\n\r\n    public static infixToPostfix(infix: string): string[] {\r\n        const result: string[] = [];\r\n\r\n        let stackIdx = -1;\r\n\r\n        const pushOperand = () => {\r\n            operand = operand.trim();\r\n            if (operand !== \"\") {\r\n                result.push(operand);\r\n                operand = \"\";\r\n            }\r\n        };\r\n\r\n        const push = (s: string) => {\r\n            if (stackIdx < ShaderDefineExpression._Stack.length - 1) {\r\n                ShaderDefineExpression._Stack[++stackIdx] = s;\r\n            }\r\n        };\r\n\r\n        const peek = () => ShaderDefineExpression._Stack[stackIdx];\r\n\r\n        const pop = () => (stackIdx === -1 ? \"!!INVALID EXPRESSION!!\" : ShaderDefineExpression._Stack[stackIdx--]);\r\n\r\n        let idx = 0,\r\n            operand = \"\";\r\n\r\n        while (idx < infix.length) {\r\n            const c = infix.charAt(idx),\r\n                token = idx < infix.length - 1 ? infix.substr(idx, 2) : \"\";\r\n\r\n            if (c === \"(\") {\r\n                operand = \"\";\r\n                push(c);\r\n            } else if (c === \")\") {\r\n                pushOperand();\r\n                while (stackIdx !== -1 && peek() !== \"(\") {\r\n                    result.push(pop());\r\n                }\r\n                pop();\r\n            } else if (ShaderDefineExpression._OperatorPriority[token] > 1) {\r\n                pushOperand();\r\n                while (stackIdx !== -1 && ShaderDefineExpression._OperatorPriority[peek()] >= ShaderDefineExpression._OperatorPriority[token]) {\r\n                    result.push(pop());\r\n                }\r\n                push(token);\r\n                idx++;\r\n            } else {\r\n                operand += c;\r\n            }\r\n            idx++;\r\n        }\r\n\r\n        pushOperand();\r\n\r\n        while (stackIdx !== -1) {\r\n            if (peek() === \"(\") {\r\n                pop();\r\n            } else {\r\n                result.push(pop());\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}