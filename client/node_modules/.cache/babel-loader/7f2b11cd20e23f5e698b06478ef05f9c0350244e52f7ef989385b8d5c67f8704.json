{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { AbstractScene } from \"../abstractScene.js\";\nimport { LensFlareSystem } from \"./lensFlareSystem.js\";\n// Adds the parser to the scene parsers.\nAbstractScene.AddParser(SceneComponentConstants.NAME_LENSFLARESYSTEM, (parsedData, scene, container, rootUrl) => {\n  // Lens flares\n  if (parsedData.lensFlareSystems !== undefined && parsedData.lensFlareSystems !== null) {\n    if (!container.lensFlareSystems) {\n      container.lensFlareSystems = new Array();\n    }\n    for (let index = 0, cache = parsedData.lensFlareSystems.length; index < cache; index++) {\n      const parsedLensFlareSystem = parsedData.lensFlareSystems[index];\n      const lf = LensFlareSystem.Parse(parsedLensFlareSystem, scene, rootUrl);\n      container.lensFlareSystems.push(lf);\n    }\n  }\n});\nAbstractScene.prototype.getLensFlareSystemByName = function (name) {\n  for (let index = 0; index < this.lensFlareSystems.length; index++) {\n    if (this.lensFlareSystems[index].name === name) {\n      return this.lensFlareSystems[index];\n    }\n  }\n  return null;\n};\nAbstractScene.prototype.getLensFlareSystemById = function (id) {\n  for (let index = 0; index < this.lensFlareSystems.length; index++) {\n    if (this.lensFlareSystems[index].id === id) {\n      return this.lensFlareSystems[index];\n    }\n  }\n  return null;\n};\nAbstractScene.prototype.getLensFlareSystemByID = function (id) {\n  return this.getLensFlareSystemById(id);\n};\nAbstractScene.prototype.removeLensFlareSystem = function (toRemove) {\n  const index = this.lensFlareSystems.indexOf(toRemove);\n  if (index !== -1) {\n    this.lensFlareSystems.splice(index, 1);\n  }\n  return index;\n};\nAbstractScene.prototype.addLensFlareSystem = function (newLensFlareSystem) {\n  this.lensFlareSystems.push(newLensFlareSystem);\n};\n/**\n * Defines the lens flare scene component responsible to manage any lens flares\n * in a given scene.\n */\nexport class LensFlareSystemSceneComponent {\n  /**\n   * Creates a new instance of the component for the given scene\n   * @param scene Defines the scene to register the component in\n   */\n  constructor(scene) {\n    /**\n     * The component name helpful to identify the component in the list of scene components.\n     */\n    this.name = SceneComponentConstants.NAME_LENSFLARESYSTEM;\n    this.scene = scene;\n    scene.lensFlareSystems = new Array();\n  }\n  /**\n   * Registers the component in a given scene\n   */\n  register() {\n    this.scene._afterCameraDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_LENSFLARESYSTEM, this, this._draw);\n  }\n  /**\n   * Rebuilds the elements related to this component in case of\n   * context lost for instance.\n   */\n  rebuild() {\n    for (let index = 0; index < this.scene.lensFlareSystems.length; index++) {\n      this.scene.lensFlareSystems[index].rebuild();\n    }\n  }\n  /**\n   * Adds all the elements from the container to the scene\n   * @param container the container holding the elements\n   */\n  addFromContainer(container) {\n    if (!container.lensFlareSystems) {\n      return;\n    }\n    container.lensFlareSystems.forEach(o => {\n      this.scene.addLensFlareSystem(o);\n    });\n  }\n  /**\n   * Removes all the elements in the container from the scene\n   * @param container contains the elements to remove\n   * @param dispose if the removed element should be disposed (default: false)\n   */\n  removeFromContainer(container, dispose) {\n    if (!container.lensFlareSystems) {\n      return;\n    }\n    container.lensFlareSystems.forEach(o => {\n      this.scene.removeLensFlareSystem(o);\n      if (dispose) {\n        o.dispose();\n      }\n    });\n  }\n  /**\n   * Serializes the component data to the specified json object\n   * @param serializationObject The object to serialize to\n   */\n  serialize(serializationObject) {\n    // Lens flares\n    serializationObject.lensFlareSystems = [];\n    const lensFlareSystems = this.scene.lensFlareSystems;\n    for (const lensFlareSystem of lensFlareSystems) {\n      serializationObject.lensFlareSystems.push(lensFlareSystem.serialize());\n    }\n  }\n  /**\n   * Disposes the component and the associated resources.\n   */\n  dispose() {\n    const lensFlareSystems = this.scene.lensFlareSystems;\n    while (lensFlareSystems.length) {\n      lensFlareSystems[0].dispose();\n    }\n  }\n  _draw(camera) {\n    // Lens flares\n    if (this.scene.lensFlaresEnabled) {\n      const lensFlareSystems = this.scene.lensFlareSystems;\n      Tools.StartPerformanceCounter(\"Lens flares\", lensFlareSystems.length > 0);\n      for (const lensFlareSystem of lensFlareSystems) {\n        if ((camera.layerMask & lensFlareSystem.layerMask) !== 0) {\n          lensFlareSystem.render();\n        }\n      }\n      Tools.EndPerformanceCounter(\"Lens flares\", lensFlareSystems.length > 0);\n    }\n  }\n}\nLensFlareSystem._SceneComponentInitialization = scene => {\n  let component = scene._getComponent(SceneComponentConstants.NAME_LENSFLARESYSTEM);\n  if (!component) {\n    component = new LensFlareSystemSceneComponent(scene);\n    scene._addComponent(component);\n  }\n};","map":{"version":3,"mappings":"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","names":["Tools","SceneComponentConstants","AbstractScene","LensFlareSystem","AddParser","NAME_LENSFLARESYSTEM","parsedData","scene","container","rootUrl","lensFlareSystems","undefined","Array","index","cache","length","parsedLensFlareSystem","lf","Parse","push","prototype","getLensFlareSystemByName","name","getLensFlareSystemById","id","getLensFlareSystemByID","removeLensFlareSystem","toRemove","indexOf","splice","addLensFlareSystem","newLensFlareSystem","LensFlareSystemSceneComponent","constructor","register","_afterCameraDrawStage","registerStep","STEP_AFTERCAMERADRAW_LENSFLARESYSTEM","_draw","rebuild","addFromContainer","forEach","o","removeFromContainer","dispose","serialize","serializationObject","lensFlareSystem","camera","lensFlaresEnabled","StartPerformanceCounter","layerMask","render","EndPerformanceCounter","_SceneComponentInitialization","component","_getComponent","_addComponent"],"sourceRoot":"","sources":["../../../../lts/core/generated/LensFlares/lensFlareSystemSceneComponent.ts"],"sourcesContent":["import { Tools } from \"../Misc/tools\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { ISceneSerializableComponent } from \"../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport { AbstractScene } from \"../abstractScene\";\r\nimport type { AssetContainer } from \"../assetContainer\";\r\nimport { LensFlareSystem } from \"./lensFlareSystem\";\r\n// Adds the parser to the scene parsers.\r\nAbstractScene.AddParser(SceneComponentConstants.NAME_LENSFLARESYSTEM, (parsedData: any, scene: Scene, container: AssetContainer, rootUrl: string) => {\r\n    // Lens flares\r\n    if (parsedData.lensFlareSystems !== undefined && parsedData.lensFlareSystems !== null) {\r\n        if (!container.lensFlareSystems) {\r\n            container.lensFlareSystems = new Array<LensFlareSystem>();\r\n        }\r\n\r\n        for (let index = 0, cache = parsedData.lensFlareSystems.length; index < cache; index++) {\r\n            const parsedLensFlareSystem = parsedData.lensFlareSystems[index];\r\n            const lf = LensFlareSystem.Parse(parsedLensFlareSystem, scene, rootUrl);\r\n            container.lensFlareSystems.push(lf);\r\n        }\r\n    }\r\n});\r\n\r\ndeclare module \"../abstractScene\" {\r\n    export interface AbstractScene {\r\n        /**\r\n         * The list of lens flare system added to the scene\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/lenseFlare\r\n         */\r\n        lensFlareSystems: Array<LensFlareSystem>;\r\n\r\n        /**\r\n         * Removes the given lens flare system from this scene.\r\n         * @param toRemove The lens flare system to remove\r\n         * @returns The index of the removed lens flare system\r\n         */\r\n        removeLensFlareSystem(toRemove: LensFlareSystem): number;\r\n\r\n        /**\r\n         * Adds the given lens flare system to this scene\r\n         * @param newLensFlareSystem The lens flare system to add\r\n         */\r\n        addLensFlareSystem(newLensFlareSystem: LensFlareSystem): void;\r\n\r\n        /**\r\n         * Gets a lens flare system using its name\r\n         * @param name defines the name to look for\r\n         * @returns the lens flare system or null if not found\r\n         */\r\n        getLensFlareSystemByName(name: string): Nullable<LensFlareSystem>;\r\n\r\n        /**\r\n         * Gets a lens flare system using its Id\r\n         * @param id defines the Id to look for\r\n         * @returns the lens flare system or null if not found\r\n         * @deprecated Please use getLensFlareSystemById instead\r\n         */\r\n        getLensFlareSystemByID(id: string): Nullable<LensFlareSystem>;\r\n\r\n        /**\r\n         * Gets a lens flare system using its Id\r\n         * @param id defines the Id to look for\r\n         * @returns the lens flare system or null if not found\r\n         */\r\n        getLensFlareSystemById(id: string): Nullable<LensFlareSystem>;\r\n    }\r\n}\r\n\r\nAbstractScene.prototype.getLensFlareSystemByName = function (name: string): Nullable<LensFlareSystem> {\r\n    for (let index = 0; index < this.lensFlareSystems.length; index++) {\r\n        if (this.lensFlareSystems[index].name === name) {\r\n            return this.lensFlareSystems[index];\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nAbstractScene.prototype.getLensFlareSystemById = function (id: string): Nullable<LensFlareSystem> {\r\n    for (let index = 0; index < this.lensFlareSystems.length; index++) {\r\n        if (this.lensFlareSystems[index].id === id) {\r\n            return this.lensFlareSystems[index];\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nAbstractScene.prototype.getLensFlareSystemByID = function (id: string): Nullable<LensFlareSystem> {\r\n    return this.getLensFlareSystemById(id);\r\n};\r\n\r\nAbstractScene.prototype.removeLensFlareSystem = function (toRemove: LensFlareSystem): number {\r\n    const index = this.lensFlareSystems.indexOf(toRemove);\r\n    if (index !== -1) {\r\n        this.lensFlareSystems.splice(index, 1);\r\n    }\r\n    return index;\r\n};\r\n\r\nAbstractScene.prototype.addLensFlareSystem = function (newLensFlareSystem: LensFlareSystem): void {\r\n    this.lensFlareSystems.push(newLensFlareSystem);\r\n};\r\n\r\n/**\r\n * Defines the lens flare scene component responsible to manage any lens flares\r\n * in a given scene.\r\n */\r\nexport class LensFlareSystemSceneComponent implements ISceneSerializableComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_LENSFLARESYSTEM;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n\r\n        scene.lensFlareSystems = new Array<LensFlareSystem>();\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._afterCameraDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_LENSFLARESYSTEM, this, this._draw);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        for (let index = 0; index < this.scene.lensFlareSystems.length; index++) {\r\n            this.scene.lensFlareSystems[index].rebuild();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds all the elements from the container to the scene\r\n     * @param container the container holding the elements\r\n     */\r\n    public addFromContainer(container: AbstractScene): void {\r\n        if (!container.lensFlareSystems) {\r\n            return;\r\n        }\r\n        container.lensFlareSystems.forEach((o) => {\r\n            this.scene.addLensFlareSystem(o);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes all the elements in the container from the scene\r\n     * @param container contains the elements to remove\r\n     * @param dispose if the removed element should be disposed (default: false)\r\n     */\r\n    public removeFromContainer(container: AbstractScene, dispose?: boolean): void {\r\n        if (!container.lensFlareSystems) {\r\n            return;\r\n        }\r\n        container.lensFlareSystems.forEach((o) => {\r\n            this.scene.removeLensFlareSystem(o);\r\n            if (dispose) {\r\n                o.dispose();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Serializes the component data to the specified json object\r\n     * @param serializationObject The object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        // Lens flares\r\n        serializationObject.lensFlareSystems = [];\r\n        const lensFlareSystems = this.scene.lensFlareSystems;\r\n        for (const lensFlareSystem of lensFlareSystems) {\r\n            serializationObject.lensFlareSystems.push(lensFlareSystem.serialize());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources.\r\n     */\r\n    public dispose(): void {\r\n        const lensFlareSystems = this.scene.lensFlareSystems;\r\n        while (lensFlareSystems.length) {\r\n            lensFlareSystems[0].dispose();\r\n        }\r\n    }\r\n\r\n    private _draw(camera: Camera): void {\r\n        // Lens flares\r\n        if (this.scene.lensFlaresEnabled) {\r\n            const lensFlareSystems = this.scene.lensFlareSystems;\r\n            Tools.StartPerformanceCounter(\"Lens flares\", lensFlareSystems.length > 0);\r\n            for (const lensFlareSystem of lensFlareSystems) {\r\n                if ((camera.layerMask & lensFlareSystem.layerMask) !== 0) {\r\n                    lensFlareSystem.render();\r\n                }\r\n            }\r\n            Tools.EndPerformanceCounter(\"Lens flares\", lensFlareSystems.length > 0);\r\n        }\r\n    }\r\n}\r\n\r\nLensFlareSystem._SceneComponentInitialization = (scene: Scene) => {\r\n    let component = scene._getComponent(SceneComponentConstants.NAME_LENSFLARESYSTEM) as LensFlareSystemSceneComponent;\r\n    if (!component) {\r\n        component = new LensFlareSystemSceneComponent(scene);\r\n        scene._addComponent(component);\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}