{"ast":null,"code":"import { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/depthOfFieldMerge.fragment.js\";\n/**\n * Options to be set when merging outputs from the default pipeline.\n */\nexport class DepthOfFieldMergePostProcessOptions {}\n/**\n * The DepthOfFieldMergePostProcess merges blurred images with the original based on the values of the circle of confusion.\n */\nexport class DepthOfFieldMergePostProcess extends PostProcess {\n  /**\n   * Creates a new instance of DepthOfFieldMergePostProcess\n   * @param name The name of the effect.\n   * @param originalFromInput Post process which's input will be used for the merge.\n   * @param circleOfConfusion Circle of confusion post process which's output will be used to blur each pixel.\n   * @param _blurSteps Blur post processes from low to high which will be mixed with the original image.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType Type of textures used when performing the post process. (default: 0)\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n   */\n  constructor(name, originalFromInput, circleOfConfusion, _blurSteps, options, camera, samplingMode, engine, reusable, textureType = 0, blockCompilation = false) {\n    super(name, \"depthOfFieldMerge\", [], [\"circleOfConfusionSampler\", \"blurStep0\", \"blurStep1\", \"blurStep2\"], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, true);\n    this._blurSteps = _blurSteps;\n    this.externalTextureSamplerBinding = true;\n    this.onApplyObservable.add(effect => {\n      effect.setTextureFromPostProcess(\"textureSampler\", originalFromInput);\n      effect.setTextureFromPostProcessOutput(\"circleOfConfusionSampler\", circleOfConfusion);\n      _blurSteps.forEach((step, index) => {\n        effect.setTextureFromPostProcessOutput(\"blurStep\" + (_blurSteps.length - index - 1), step);\n      });\n    });\n    if (!blockCompilation) {\n      this.updateEffect();\n    }\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"DepthOfFieldMergePostProcess\" string\n   */\n  getClassName() {\n    return \"DepthOfFieldMergePostProcess\";\n  }\n  /**\n   * Updates the effect with the current post process compile time values and recompiles the shader.\n   * @param defines Define statements that should be added at the beginning of the shader. (default: null)\n   * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\n   * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\n   * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\n   * @param onCompiled Called when the shader has been compiled.\n   * @param onError Called if there is an error when compiling a shader.\n   */\n  updateEffect(defines = null, uniforms = null, samplers = null, indexParameters, onCompiled, onError) {\n    if (!defines) {\n      defines = \"\";\n      defines += \"#define BLUR_LEVEL \" + (this._blurSteps.length - 1) + \"\\n\";\n    }\n    super.updateEffect(defines, uniforms, samplers, indexParameters, onCompiled, onError);\n  }\n}","map":{"version":3,"mappings":"AAIA,SAASA,WAAW,QAAQ,kBAAgB;AAI5C,OAAO,0CAAwC;AAE/C;;;AAGA,OAAM,MAAOC,mCAAmC;AAqBhD;;;AAGA,OAAM,MAAOC,4BAA6B,SAAQF,WAAW;EASzD;;;;;;;;;;;;;;EAcAG,YACIC,IAAY,EACZC,iBAA8B,EAC9BC,iBAA8B,EACtBC,UAA8B,EACtCC,OAAoC,EACpCC,MAAwB,EACxBC,YAAqB,EACrBC,MAAe,EACfC,QAAkB,EAClBC,WAAW,GAAG,mBAAU;IAGxB,KAAK,CACDT,IAAI,EACJ,mBAAmB,EACnB,EAAE,EACF,CAAC,0BAA0B,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC,EACnEI,OAAO,EACPC,MAAM,EACNC,YAAY,EACZC,MAAM,EACNC,QAAQ,EACR,IAAI,EACJC,WAAW,EACXC,SAAS,EACT,IAAI,EACJ,IAAI,CACP;IAxBO,eAAU,GAAVP,UAAU;IAyBlB,IAAI,CAACQ,6BAA6B,GAAG,IAAI;IACzC,IAAI,CAACC,iBAAiB,CAACC,GAAG,CAAEC,MAAc,IAAI;MAC1CA,MAAM,CAACC,yBAAyB,CAAC,gBAAgB,EAAEd,iBAAiB,CAAC;MACrEa,MAAM,CAACE,+BAA+B,CAAC,0BAA0B,EAAEd,iBAAiB,CAAC;MACrFC,UAAU,CAACc,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAI;QAC/BL,MAAM,CAACE,+BAA+B,CAAC,UAAU,IAAIb,UAAU,CAACiB,MAAM,GAAGD,KAAK,GAAG,CAAC,CAAC,EAAED,IAAI,CAAC;MAC9F,CAAC,CAAC;IACN,CAAC,CAAC;IAEF,IAAI,CAACG,gBAAgB,EAAE;MACnB,IAAI,CAACC,YAAY,EAAE;;EAE3B;EA/DA;;;;EAIOC,YAAY;IACf,OAAO,8BAA8B;EACzC;EA2DA;;;;;;;;;EASOD,YAAY,CACfE,UAA4B,IAAI,EAChCC,WAA+B,IAAI,EACnCC,WAA+B,IAAI,EACnCC,eAAqB,EACrBC,UAAqC,EACrCC,OAAkD;IAElD,IAAI,CAACL,OAAO,EAAE;MACVA,OAAO,GAAG,EAAE;MACZA,OAAO,IAAI,qBAAqB,IAAI,IAAI,CAACrB,UAAU,CAACiB,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI;;IAE1E,KAAK,CAACE,YAAY,CAACE,OAAO,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,eAAe,EAAEC,UAAU,EAAEC,OAAO,CAAC;EACzF","names":["PostProcess","DepthOfFieldMergePostProcessOptions","DepthOfFieldMergePostProcess","constructor","name","originalFromInput","circleOfConfusion","_blurSteps","options","camera","samplingMode","engine","reusable","textureType","undefined","externalTextureSamplerBinding","onApplyObservable","add","effect","setTextureFromPostProcess","setTextureFromPostProcessOutput","forEach","step","index","length","blockCompilation","updateEffect","getClassName","defines","uniforms","samplers","indexParameters","onCompiled","onError"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/depthOfFieldMergePostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/depthOfFieldMerge.fragment\";\r\n\r\n/**\r\n * Options to be set when merging outputs from the default pipeline.\r\n */\r\nexport class DepthOfFieldMergePostProcessOptions {\r\n    /**\r\n     * The original image to merge on top of\r\n     */\r\n    public originalFromInput: PostProcess;\r\n    /**\r\n     * Parameters to perform the merge of the depth of field effect\r\n     */\r\n    public depthOfField?: {\r\n        circleOfConfusion: PostProcess;\r\n        blurSteps: Array<PostProcess>;\r\n    };\r\n    /**\r\n     * Parameters to perform the merge of bloom effect\r\n     */\r\n    public bloom?: {\r\n        blurred: PostProcess;\r\n        weight: number;\r\n    };\r\n}\r\n\r\n/**\r\n * The DepthOfFieldMergePostProcess merges blurred images with the original based on the values of the circle of confusion.\r\n */\r\nexport class DepthOfFieldMergePostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"DepthOfFieldMergePostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"DepthOfFieldMergePostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of DepthOfFieldMergePostProcess\r\n     * @param name The name of the effect.\r\n     * @param originalFromInput Post process which's input will be used for the merge.\r\n     * @param circleOfConfusion Circle of confusion post process which's output will be used to blur each pixel.\r\n     * @param _blurSteps Blur post processes from low to high which will be mixed with the original image.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        originalFromInput: PostProcess,\r\n        circleOfConfusion: PostProcess,\r\n        private _blurSteps: Array<PostProcess>,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(\r\n            name,\r\n            \"depthOfFieldMerge\",\r\n            [],\r\n            [\"circleOfConfusionSampler\", \"blurStep0\", \"blurStep1\", \"blurStep2\"],\r\n            options,\r\n            camera,\r\n            samplingMode,\r\n            engine,\r\n            reusable,\r\n            null,\r\n            textureType,\r\n            undefined,\r\n            null,\r\n            true\r\n        );\r\n        this.externalTextureSamplerBinding = true;\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setTextureFromPostProcess(\"textureSampler\", originalFromInput);\r\n            effect.setTextureFromPostProcessOutput(\"circleOfConfusionSampler\", circleOfConfusion);\r\n            _blurSteps.forEach((step, index) => {\r\n                effect.setTextureFromPostProcessOutput(\"blurStep\" + (_blurSteps.length - index - 1), step);\r\n            });\r\n        });\r\n\r\n        if (!blockCompilation) {\r\n            this.updateEffect();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the effect with the current post process compile time values and recompiles the shader.\r\n     * @param defines Define statements that should be added at the beginning of the shader. (default: null)\r\n     * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\r\n     * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\r\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\r\n     * @param onCompiled Called when the shader has been compiled.\r\n     * @param onError Called if there is an error when compiling a shader.\r\n     */\r\n    public updateEffect(\r\n        defines: Nullable<string> = null,\r\n        uniforms: Nullable<string[]> = null,\r\n        samplers: Nullable<string[]> = null,\r\n        indexParameters?: any,\r\n        onCompiled?: (effect: Effect) => void,\r\n        onError?: (effect: Effect, errors: string) => void\r\n    ) {\r\n        if (!defines) {\r\n            defines = \"\";\r\n            defines += \"#define BLUR_LEVEL \" + (this._blurSteps.length - 1) + \"\\n\";\r\n        }\r\n        super.updateEffect(defines, uniforms, samplers, indexParameters, onCompiled, onError);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}