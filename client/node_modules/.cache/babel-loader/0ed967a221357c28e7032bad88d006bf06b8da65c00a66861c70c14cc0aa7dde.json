{"ast":null,"code":"import { Vector2 } from \"../Maths/math.vector.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/vrDistortionCorrection.fragment.js\";\n/**\n * VRDistortionCorrectionPostProcess used for mobile VR\n */\nexport class VRDistortionCorrectionPostProcess extends PostProcess {\n  /**\n   * Initializes the VRDistortionCorrectionPostProcess\n   * @param name The name of the effect.\n   * @param camera The camera to apply the render pass to.\n   * @param isRightEye If this is for the right eye distortion\n   * @param vrMetrics All the required metrics for the VR camera\n   */\n  constructor(name, camera, isRightEye, vrMetrics) {\n    super(name, \"vrDistortionCorrection\", [\"LensCenter\", \"Scale\", \"ScaleIn\", \"HmdWarpParam\"], null, vrMetrics.postProcessScaleFactor, camera, Texture.BILINEAR_SAMPLINGMODE);\n    this._isRightEye = isRightEye;\n    this._distortionFactors = vrMetrics.distortionK;\n    this._postProcessScaleFactor = vrMetrics.postProcessScaleFactor;\n    this._lensCenterOffset = vrMetrics.lensCenterOffset;\n    this.adaptScaleToCurrentViewport = true;\n    this.onSizeChangedObservable.add(() => {\n      this._scaleIn = new Vector2(2, 2 / this.aspectRatio);\n      this._scaleFactor = new Vector2(0.5 * (1 / this._postProcessScaleFactor), 0.5 * (1 / this._postProcessScaleFactor) * this.aspectRatio);\n      this._lensCenter = new Vector2(this._isRightEye ? 0.5 - this._lensCenterOffset * 0.5 : 0.5 + this._lensCenterOffset * 0.5, 0.5);\n    });\n    this.onApplyObservable.add(effect => {\n      effect.setFloat2(\"LensCenter\", this._lensCenter.x, this._lensCenter.y);\n      effect.setFloat2(\"Scale\", this._scaleFactor.x, this._scaleFactor.y);\n      effect.setFloat2(\"ScaleIn\", this._scaleIn.x, this._scaleIn.y);\n      effect.setFloat4(\"HmdWarpParam\", this._distortionFactors[0], this._distortionFactors[1], this._distortionFactors[2], this._distortionFactors[3]);\n    });\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"VRDistortionCorrectionPostProcess\" string\n   */\n  getClassName() {\n    return \"VRDistortionCorrectionPostProcess\";\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAO,QAAQ,yBAAuB;AAI/C,SAASC,OAAO,QAAQ,kCAAgC;AACxD,SAASC,WAAW,QAAQ,kBAAgB;AAE5C,OAAO,+CAA6C;AAGpD;;;AAGA,OAAM,MAAOC,iCAAkC,SAAQD,WAAW;EAiB9D;;;;;;;EAOAE,YAAYC,IAAY,EAAEC,MAAwB,EAAEC,UAAmB,EAAEC,SAA0B;IAC/F,KAAK,CAACH,IAAI,EAAE,wBAAwB,EAAE,CAAC,YAAY,EAAE,OAAO,EAAE,SAAS,EAAE,cAAc,CAAC,EAAE,IAAI,EAAEG,SAAS,CAACC,sBAAsB,EAAEH,MAAM,EAAEL,OAAO,CAACS,qBAAqB,CAAC;IAExK,IAAI,CAACC,WAAW,GAAGJ,UAAU;IAC7B,IAAI,CAACK,kBAAkB,GAAGJ,SAAS,CAACK,WAAW;IAC/C,IAAI,CAACC,uBAAuB,GAAGN,SAAS,CAACC,sBAAsB;IAC/D,IAAI,CAACM,iBAAiB,GAAGP,SAAS,CAACQ,gBAAgB;IACnD,IAAI,CAACC,2BAA2B,GAAG,IAAI;IAEvC,IAAI,CAACC,uBAAuB,CAACC,GAAG,CAAC,MAAK;MAClC,IAAI,CAACC,QAAQ,GAAG,IAAIpB,OAAO,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAACqB,WAAW,CAAC;MACpD,IAAI,CAACC,YAAY,GAAG,IAAItB,OAAO,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAACc,uBAAuB,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,IAAI,CAACA,uBAAuB,CAAC,GAAG,IAAI,CAACO,WAAW,CAAC;MACtI,IAAI,CAACE,WAAW,GAAG,IAAIvB,OAAO,CAAC,IAAI,CAACW,WAAW,GAAG,GAAG,GAAG,IAAI,CAACI,iBAAiB,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAACA,iBAAiB,GAAG,GAAG,EAAE,GAAG,CAAC;IACnI,CAAC,CAAC;IACF,IAAI,CAACS,iBAAiB,CAACL,GAAG,CAAEM,MAAc,IAAI;MAC1CA,MAAM,CAACC,SAAS,CAAC,YAAY,EAAE,IAAI,CAACH,WAAW,CAACI,CAAC,EAAE,IAAI,CAACJ,WAAW,CAACK,CAAC,CAAC;MACtEH,MAAM,CAACC,SAAS,CAAC,OAAO,EAAE,IAAI,CAACJ,YAAY,CAACK,CAAC,EAAE,IAAI,CAACL,YAAY,CAACM,CAAC,CAAC;MACnEH,MAAM,CAACC,SAAS,CAAC,SAAS,EAAE,IAAI,CAACN,QAAQ,CAACO,CAAC,EAAE,IAAI,CAACP,QAAQ,CAACQ,CAAC,CAAC;MAC7DH,MAAM,CAACI,SAAS,CAAC,cAAc,EAAE,IAAI,CAACjB,kBAAkB,CAAC,CAAC,CAAC,EAAE,IAAI,CAACA,kBAAkB,CAAC,CAAC,CAAC,EAAE,IAAI,CAACA,kBAAkB,CAAC,CAAC,CAAC,EAAE,IAAI,CAACA,kBAAkB,CAAC,CAAC,CAAC,CAAC;IACpJ,CAAC,CAAC;EACN;EAnCA;;;;EAIOkB,YAAY;IACf,OAAO,mCAAmC;EAC9C","names":["Vector2","Texture","PostProcess","VRDistortionCorrectionPostProcess","constructor","name","camera","isRightEye","vrMetrics","postProcessScaleFactor","BILINEAR_SAMPLINGMODE","_isRightEye","_distortionFactors","distortionK","_postProcessScaleFactor","_lensCenterOffset","lensCenterOffset","adaptScaleToCurrentViewport","onSizeChangedObservable","add","_scaleIn","aspectRatio","_scaleFactor","_lensCenter","onApplyObservable","effect","setFloat2","x","y","setFloat4","getClassName"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/vrDistortionCorrectionPostProcess.ts"],"sourcesContent":["import { Vector2 } from \"../Maths/math.vector\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { VRCameraMetrics } from \"../Cameras/VR/vrCameraMetrics\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { PostProcess } from \"./postProcess\";\r\n\r\nimport \"../Shaders/vrDistortionCorrection.fragment\";\r\nimport type { Nullable } from \"../types\";\r\n\r\n/**\r\n * VRDistortionCorrectionPostProcess used for mobile VR\r\n */\r\nexport class VRDistortionCorrectionPostProcess extends PostProcess {\r\n    private _isRightEye: boolean;\r\n    private _distortionFactors: number[];\r\n    private _postProcessScaleFactor: number;\r\n    private _lensCenterOffset: number;\r\n    private _scaleIn: Vector2;\r\n    private _scaleFactor: Vector2;\r\n    private _lensCenter: Vector2;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"VRDistortionCorrectionPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"VRDistortionCorrectionPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Initializes the VRDistortionCorrectionPostProcess\r\n     * @param name The name of the effect.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param isRightEye If this is for the right eye distortion\r\n     * @param vrMetrics All the required metrics for the VR camera\r\n     */\r\n    constructor(name: string, camera: Nullable<Camera>, isRightEye: boolean, vrMetrics: VRCameraMetrics) {\r\n        super(name, \"vrDistortionCorrection\", [\"LensCenter\", \"Scale\", \"ScaleIn\", \"HmdWarpParam\"], null, vrMetrics.postProcessScaleFactor, camera, Texture.BILINEAR_SAMPLINGMODE);\r\n\r\n        this._isRightEye = isRightEye;\r\n        this._distortionFactors = vrMetrics.distortionK;\r\n        this._postProcessScaleFactor = vrMetrics.postProcessScaleFactor;\r\n        this._lensCenterOffset = vrMetrics.lensCenterOffset;\r\n        this.adaptScaleToCurrentViewport = true;\r\n\r\n        this.onSizeChangedObservable.add(() => {\r\n            this._scaleIn = new Vector2(2, 2 / this.aspectRatio);\r\n            this._scaleFactor = new Vector2(0.5 * (1 / this._postProcessScaleFactor), 0.5 * (1 / this._postProcessScaleFactor) * this.aspectRatio);\r\n            this._lensCenter = new Vector2(this._isRightEye ? 0.5 - this._lensCenterOffset * 0.5 : 0.5 + this._lensCenterOffset * 0.5, 0.5);\r\n        });\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setFloat2(\"LensCenter\", this._lensCenter.x, this._lensCenter.y);\r\n            effect.setFloat2(\"Scale\", this._scaleFactor.x, this._scaleFactor.y);\r\n            effect.setFloat2(\"ScaleIn\", this._scaleIn.x, this._scaleIn.y);\r\n            effect.setFloat4(\"HmdWarpParam\", this._distortionFactors[0], this._distortionFactors[1], this._distortionFactors[2], this._distortionFactors[3]);\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}