{"ast":null,"code":"import { GLTFLoader, ArrayItem } from \"../glTFLoader.js\";\nconst NAME = \"EXT_texture_webp\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_texture_webp/README.md)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class EXT_texture_webp {\n  /**\n   * @internal\n   */\n  constructor(loader) {\n    /** The name of this extension. */\n    this.name = NAME;\n    this._loader = loader;\n    this.enabled = loader.isExtensionUsed(NAME);\n  }\n  /** @internal */\n  dispose() {\n    this._loader = null;\n  }\n  /**\n   * @internal\n   */\n  _loadTextureAsync(context, texture, assign) {\n    return GLTFLoader.LoadExtensionAsync(context, texture, this.name, (extensionContext, extension) => {\n      const sampler = texture.sampler == undefined ? GLTFLoader.DefaultSampler : ArrayItem.Get(`${context}/sampler`, this._loader.gltf.samplers, texture.sampler);\n      const image = ArrayItem.Get(`${extensionContext}/source`, this._loader.gltf.images, extension.source);\n      return this._loader._createTextureAsync(context, sampler, image, babylonTexture => {\n        assign(babylonTexture);\n      }, undefined, !texture._textureInfo.nonColorData);\n    });\n  }\n}\nGLTFLoader.RegisterExtension(NAME, loader => new EXT_texture_webp(loader));","map":{"version":3,"mappings":"AACA,SAASA,UAAU,EAAEC,SAAS,QAAQ,kBAAgB;AAMtD,MAAMC,IAAI,GAAG,kBAAkB;AAE/B;;;AAGA;AACA,OAAM,MAAOC,gBAAgB;EASzB;;;EAGAC,YAAYC,MAAkB;IAX9B;IACgB,SAAI,GAAGH,IAAI;IAWvB,IAAI,CAACI,OAAO,GAAGD,MAAM;IACrB,IAAI,CAACE,OAAO,GAAGF,MAAM,CAACG,eAAe,CAACN,IAAI,CAAC;EAC/C;EAEA;EACOO,OAAO;IACT,IAAI,CAACH,OAAe,GAAG,IAAI;EAChC;EAEA;;;EAGOI,iBAAiB,CAACC,OAAe,EAAEC,OAAiB,EAAEC,MAA6C;IACtG,OAAOb,UAAU,CAACc,kBAAkB,CAA+BH,OAAO,EAAEC,OAAO,EAAE,IAAI,CAACG,IAAI,EAAE,CAACC,gBAAgB,EAAEC,SAAS,KAAI;MAC5H,MAAMC,OAAO,GAAGN,OAAO,CAACM,OAAO,IAAIC,SAAS,GAAGnB,UAAU,CAACoB,cAAc,GAAGnB,SAAS,CAACoB,GAAG,CAAC,GAAGV,OAAO,UAAU,EAAE,IAAI,CAACL,OAAO,CAACgB,IAAI,CAACC,QAAQ,EAAEX,OAAO,CAACM,OAAO,CAAC;MAC3J,MAAMM,KAAK,GAAGvB,SAAS,CAACoB,GAAG,CAAC,GAAGL,gBAAgB,SAAS,EAAE,IAAI,CAACV,OAAO,CAACgB,IAAI,CAACG,MAAM,EAAER,SAAS,CAACS,MAAM,CAAC;MACrG,OAAO,IAAI,CAACpB,OAAO,CAACqB,mBAAmB,CACnChB,OAAO,EACPO,OAAO,EACPM,KAAK,EACJI,cAAc,IAAI;QACff,MAAM,CAACe,cAAc,CAAC;MAC1B,CAAC,EACDT,SAAS,EACT,CAACP,OAAO,CAACiB,YAAY,CAACC,YAAY,CACrC;IACL,CAAC,CAAC;EACN;;AAGJ9B,UAAU,CAAC+B,iBAAiB,CAAC7B,IAAI,EAAGG,MAAM,IAAK,IAAIF,gBAAgB,CAACE,MAAM,CAAC,CAAC","names":["GLTFLoader","ArrayItem","NAME","EXT_texture_webp","constructor","loader","_loader","enabled","isExtensionUsed","dispose","_loadTextureAsync","context","texture","assign","LoadExtensionAsync","name","extensionContext","extension","sampler","undefined","DefaultSampler","Get","gltf","samplers","image","images","source","_createTextureAsync","babylonTexture","_textureInfo","nonColorData","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../lts/loaders/generated/glTF/2.0/Extensions/EXT_texture_webp.ts"],"sourcesContent":["import type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport type { ITexture } from \"../glTFLoaderInterfaces\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { IEXTTextureWebP } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"EXT_texture_webp\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_texture_webp/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_texture_webp implements IGLTFLoaderExtension {\r\n    /** The name of this extension. */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled. */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadTextureAsync(context: string, texture: ITexture, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTTextureWebP, BaseTexture>(context, texture, this.name, (extensionContext, extension) => {\r\n            const sampler = texture.sampler == undefined ? GLTFLoader.DefaultSampler : ArrayItem.Get(`${context}/sampler`, this._loader.gltf.samplers, texture.sampler);\r\n            const image = ArrayItem.Get(`${extensionContext}/source`, this._loader.gltf.images, extension.source);\r\n            return this._loader._createTextureAsync(\r\n                context,\r\n                sampler,\r\n                image,\r\n                (babylonTexture) => {\r\n                    assign(babylonTexture);\r\n                },\r\n                undefined,\r\n                !texture._textureInfo.nonColorData\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new EXT_texture_webp(loader));\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}