{"ast":null,"code":"import { ShaderDefineExpression } from \"../shaderDefineExpression.js\";\n/** @internal */\nexport class ShaderDefineArithmeticOperator extends ShaderDefineExpression {\n  constructor(define, operand, testValue) {\n    super();\n    this.define = define;\n    this.operand = operand;\n    this.testValue = testValue;\n  }\n  isTrue(preprocessors) {\n    let value = preprocessors[this.define];\n    if (value === undefined) {\n      value = this.define;\n    }\n    let condition = false;\n    const left = parseInt(value);\n    const right = parseInt(this.testValue);\n    switch (this.operand) {\n      case \">\":\n        condition = left > right;\n        break;\n      case \"<\":\n        condition = left < right;\n        break;\n      case \"<=\":\n        condition = left <= right;\n        break;\n      case \">=\":\n        condition = left >= right;\n        break;\n      case \"==\":\n        condition = left === right;\n        break;\n    }\n    return condition;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,sBAAsB,QAAQ,8BAA4B;AAEnE;AACA,OAAM,MAAOC,8BAA+B,SAAQD,sBAAsB;EACtEE,YAA0BC,MAAc,EAASC,OAAe,EAASC,SAAiB;IACtF,KAAK,EAAE;IADe,WAAM,GAANF,MAAM;IAAiB,YAAO,GAAPC,OAAO;IAAiB,cAAS,GAATC,SAAS;EAElF;EAEOC,MAAM,CAACC,aAAwC;IAClD,IAAIC,KAAK,GAAGD,aAAa,CAAC,IAAI,CAACJ,MAAM,CAAC;IAEtC,IAAIK,KAAK,KAAKC,SAAS,EAAE;MACrBD,KAAK,GAAG,IAAI,CAACL,MAAM;;IAGvB,IAAIO,SAAS,GAAG,KAAK;IACrB,MAAMC,IAAI,GAAGC,QAAQ,CAACJ,KAAK,CAAC;IAC5B,MAAMK,KAAK,GAAGD,QAAQ,CAAC,IAAI,CAACP,SAAS,CAAC;IAEtC,QAAQ,IAAI,CAACD,OAAO;MAChB,KAAK,GAAG;QACJM,SAAS,GAAGC,IAAI,GAAGE,KAAK;QACxB;MACJ,KAAK,GAAG;QACJH,SAAS,GAAGC,IAAI,GAAGE,KAAK;QACxB;MACJ,KAAK,IAAI;QACLH,SAAS,GAAGC,IAAI,IAAIE,KAAK;QACzB;MACJ,KAAK,IAAI;QACLH,SAAS,GAAGC,IAAI,IAAIE,KAAK;QACzB;MACJ,KAAK,IAAI;QACLH,SAAS,GAAGC,IAAI,KAAKE,KAAK;QAC1B;IAAM;IAGd,OAAOH,SAAS;EACpB","names":["ShaderDefineExpression","ShaderDefineArithmeticOperator","constructor","define","operand","testValue","isTrue","preprocessors","value","undefined","condition","left","parseInt","right"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Engines/Processors/Expressions/Operators/shaderDefineArithmeticOperator.ts"],"sourcesContent":["import { ShaderDefineExpression } from \"../shaderDefineExpression\";\r\n\r\n/** @internal */\r\nexport class ShaderDefineArithmeticOperator extends ShaderDefineExpression {\r\n    public constructor(public define: string, public operand: string, public testValue: string) {\r\n        super();\r\n    }\r\n\r\n    public isTrue(preprocessors: { [key: string]: string }) {\r\n        let value = preprocessors[this.define];\r\n\r\n        if (value === undefined) {\r\n            value = this.define;\r\n        }\r\n\r\n        let condition = false;\r\n        const left = parseInt(value);\r\n        const right = parseInt(this.testValue);\r\n\r\n        switch (this.operand) {\r\n            case \">\":\r\n                condition = left > right;\r\n                break;\r\n            case \"<\":\r\n                condition = left < right;\r\n                break;\r\n            case \"<=\":\r\n                condition = left <= right;\r\n                break;\r\n            case \">=\":\r\n                condition = left >= right;\r\n                break;\r\n            case \"==\":\r\n                condition = left === right;\r\n                break;\r\n        }\r\n\r\n        return condition;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}