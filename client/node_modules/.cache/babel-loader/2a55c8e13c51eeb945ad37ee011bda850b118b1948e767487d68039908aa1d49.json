{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\n/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Checks for a matching suffix at the end of a string (for ES5 and lower)\n * @param str Source string\n * @param suffix Suffix to search for in the source string\n * @returns Boolean indicating whether the suffix was found (true) or not (false)\n * @deprecated Please use native string function instead\n */\nexport const EndsWith = (str, suffix) => {\n  return str.endsWith(suffix);\n};\n/**\n * Checks for a matching suffix at the beginning of a string (for ES5 and lower)\n * @param str Source string\n * @param suffix Suffix to search for in the source string\n * @returns Boolean indicating whether the suffix was found (true) or not (false)\n * @deprecated Please use native string function instead\n */\nexport const StartsWith = (str, suffix) => {\n  if (!str) {\n    return false;\n  }\n  return str.startsWith(suffix);\n};\n/**\n * Decodes a buffer into a string\n * @param buffer The buffer to decode\n * @returns The decoded string\n */\nexport const Decode = buffer => {\n  if (typeof TextDecoder !== \"undefined\") {\n    return new TextDecoder().decode(buffer);\n  }\n  let result = \"\";\n  for (let i = 0; i < buffer.byteLength; i++) {\n    result += String.fromCharCode(buffer[i]);\n  }\n  return result;\n};\n/**\n * Encode a buffer to a base64 string\n * @param buffer defines the buffer to encode\n * @returns the encoded string\n */\nexport const EncodeArrayBufferToBase64 = buffer => {\n  const keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  let output = \"\";\n  let chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n  let i = 0;\n  const bytes = ArrayBuffer.isView(buffer) ? new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength) : new Uint8Array(buffer);\n  while (i < bytes.length) {\n    chr1 = bytes[i++];\n    chr2 = i < bytes.length ? bytes[i++] : Number.NaN;\n    chr3 = i < bytes.length ? bytes[i++] : Number.NaN;\n    enc1 = chr1 >> 2;\n    enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n    enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n    enc4 = chr3 & 63;\n    if (isNaN(chr2)) {\n      enc3 = enc4 = 64;\n    } else if (isNaN(chr3)) {\n      enc4 = 64;\n    }\n    output += keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);\n  }\n  return output;\n};\n/**\n * Converts a given base64 string as an ASCII encoded stream of data\n * @param base64Data The base64 encoded string to decode\n * @returns Decoded ASCII string\n */\nexport const DecodeBase64ToString = base64Data => {\n  return atob(base64Data);\n};\n/**\n * Converts a given base64 string into an ArrayBuffer of raw byte data\n * @param base64Data The base64 encoded string to decode\n * @returns ArrayBuffer of byte data\n */\nexport const DecodeBase64ToBinary = base64Data => {\n  const decodedString = DecodeBase64ToString(base64Data);\n  const bufferLength = decodedString.length;\n  const bufferView = new Uint8Array(new ArrayBuffer(bufferLength));\n  for (let i = 0; i < bufferLength; i++) {\n    bufferView[i] = decodedString.charCodeAt(i);\n  }\n  return bufferView.buffer;\n};\n/**\n * Converts a number to string and pads with preceding zeroes until it is of specified length.\n * @param num the number to convert and pad\n * @param length the expected length of the string\n * @returns the padded string\n */\nexport const PadNumber = (num, length) => {\n  let str = String(num);\n  while (str.length < length) {\n    str = \"0\" + str;\n  }\n  return str;\n};\n/**\n * Helper to manipulate strings\n */\nexport const StringTools = {\n  EndsWith,\n  StartsWith,\n  Decode,\n  EncodeArrayBufferToBase64,\n  DecodeBase64ToString,\n  DecodeBase64ToBinary,\n  PadNumber\n};","map":{"version":3,"mappings":"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","names":["EndsWith","str","suffix","endsWith","StartsWith","startsWith","Decode","buffer","TextDecoder","decode","result","i","byteLength","String","fromCharCode","EncodeArrayBufferToBase64","keyStr","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","bytes","ArrayBuffer","isView","Uint8Array","byteOffset","length","Number","NaN","isNaN","charAt","DecodeBase64ToString","base64Data","atob","DecodeBase64ToBinary","decodedString","bufferLength","bufferView","charCodeAt","PadNumber","num","StringTools"],"sourceRoot":"","sources":["../../../../lts/core/generated/Misc/stringTools.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\n\r\n/**\r\n * Checks for a matching suffix at the end of a string (for ES5 and lower)\r\n * @param str Source string\r\n * @param suffix Suffix to search for in the source string\r\n * @returns Boolean indicating whether the suffix was found (true) or not (false)\r\n * @deprecated Please use native string function instead\r\n */\r\nexport const EndsWith = (str: string, suffix: string): boolean => {\r\n    return str.endsWith(suffix);\r\n};\r\n\r\n/**\r\n * Checks for a matching suffix at the beginning of a string (for ES5 and lower)\r\n * @param str Source string\r\n * @param suffix Suffix to search for in the source string\r\n * @returns Boolean indicating whether the suffix was found (true) or not (false)\r\n * @deprecated Please use native string function instead\r\n */\r\nexport const StartsWith = (str: string, suffix: string): boolean => {\r\n    if (!str) {\r\n        return false;\r\n    }\r\n    return str.startsWith(suffix);\r\n};\r\n\r\n/**\r\n * Decodes a buffer into a string\r\n * @param buffer The buffer to decode\r\n * @returns The decoded string\r\n */\r\nexport const Decode = (buffer: Uint8Array | Uint16Array): string => {\r\n    if (typeof TextDecoder !== \"undefined\") {\r\n        return new TextDecoder().decode(buffer);\r\n    }\r\n\r\n    let result = \"\";\r\n    for (let i = 0; i < buffer.byteLength; i++) {\r\n        result += String.fromCharCode(buffer[i]);\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Encode a buffer to a base64 string\r\n * @param buffer defines the buffer to encode\r\n * @returns the encoded string\r\n */\r\nexport const EncodeArrayBufferToBase64 = (buffer: ArrayBuffer | ArrayBufferView): string => {\r\n    const keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\n    let output = \"\";\r\n    let chr1, chr2, chr3, enc1, enc2, enc3, enc4;\r\n    let i = 0;\r\n    const bytes = ArrayBuffer.isView(buffer) ? new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength) : new Uint8Array(buffer);\r\n\r\n    while (i < bytes.length) {\r\n        chr1 = bytes[i++];\r\n        chr2 = i < bytes.length ? bytes[i++] : Number.NaN;\r\n        chr3 = i < bytes.length ? bytes[i++] : Number.NaN;\r\n\r\n        enc1 = chr1 >> 2;\r\n        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n        enc4 = chr3 & 63;\r\n\r\n        if (isNaN(chr2)) {\r\n            enc3 = enc4 = 64;\r\n        } else if (isNaN(chr3)) {\r\n            enc4 = 64;\r\n        }\r\n        output += keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);\r\n    }\r\n\r\n    return output;\r\n};\r\n\r\n/**\r\n * Converts a given base64 string as an ASCII encoded stream of data\r\n * @param base64Data The base64 encoded string to decode\r\n * @returns Decoded ASCII string\r\n */\r\nexport const DecodeBase64ToString = (base64Data: string): string => {\r\n    return atob(base64Data);\r\n};\r\n\r\n/**\r\n * Converts a given base64 string into an ArrayBuffer of raw byte data\r\n * @param base64Data The base64 encoded string to decode\r\n * @returns ArrayBuffer of byte data\r\n */\r\nexport const DecodeBase64ToBinary = (base64Data: string): ArrayBuffer => {\r\n    const decodedString = DecodeBase64ToString(base64Data);\r\n    const bufferLength = decodedString.length;\r\n    const bufferView = new Uint8Array(new ArrayBuffer(bufferLength));\r\n\r\n    for (let i = 0; i < bufferLength; i++) {\r\n        bufferView[i] = decodedString.charCodeAt(i);\r\n    }\r\n\r\n    return bufferView.buffer;\r\n};\r\n\r\n/**\r\n * Converts a number to string and pads with preceding zeroes until it is of specified length.\r\n * @param num the number to convert and pad\r\n * @param length the expected length of the string\r\n * @returns the padded string\r\n */\r\nexport const PadNumber = (num: number, length: number): string => {\r\n    let str = String(num);\r\n    while (str.length < length) {\r\n        str = \"0\" + str;\r\n    }\r\n    return str;\r\n};\r\n/**\r\n * Helper to manipulate strings\r\n */\r\nexport const StringTools = {\r\n    EndsWith,\r\n    StartsWith,\r\n    Decode,\r\n    EncodeArrayBufferToBase64,\r\n    DecodeBase64ToString,\r\n    DecodeBase64ToBinary,\r\n    PadNumber,\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}