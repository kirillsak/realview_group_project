{"ast":null,"code":"/**\n * Class used to represent a viewport on screen\n */\nexport class Viewport {\n  /**\n   * Creates a Viewport object located at (x, y) and sized (width, height)\n   * @param x defines viewport left coordinate\n   * @param y defines viewport top coordinate\n   * @param width defines the viewport width\n   * @param height defines the viewport height\n   */\n  constructor( /** viewport left coordinate */\n  x, /** viewport top coordinate */\n  y, /**viewport width */\n  width, /** viewport height */\n  height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n  /**\n   * Creates a new viewport using absolute sizing (from 0-> width, 0-> height instead of 0->1)\n   * @param renderWidth defines the rendering width\n   * @param renderHeight defines the rendering height\n   * @returns a new Viewport\n   */\n  toGlobal(renderWidth, renderHeight) {\n    return new Viewport(this.x * renderWidth, this.y * renderHeight, this.width * renderWidth, this.height * renderHeight);\n  }\n  /**\n   * Stores absolute viewport value into a target viewport (from 0-> width, 0-> height instead of 0->1)\n   * @param renderWidth defines the rendering width\n   * @param renderHeight defines the rendering height\n   * @param ref defines the target viewport\n   * @returns the current viewport\n   */\n  toGlobalToRef(renderWidth, renderHeight, ref) {\n    ref.x = this.x * renderWidth;\n    ref.y = this.y * renderHeight;\n    ref.width = this.width * renderWidth;\n    ref.height = this.height * renderHeight;\n    return this;\n  }\n  /**\n   * Returns a new Viewport copied from the current one\n   * @returns a new Viewport\n   */\n  clone() {\n    return new Viewport(this.x, this.y, this.width, this.height);\n  }\n}","map":{"version":3,"mappings":"AAAA;;;AAGA,OAAM,MAAOA,QAAQ;EACjB;;;;;;;EAOAC,aACI;EACOC,CAAS,EAChB;EACOC,CAAS,EAChB;EACOC,KAAa,EACpB;EACOC,MAAc;IANd,MAAC,GAADH,CAAC;IAED,MAAC,GAADC,CAAC;IAED,UAAK,GAALC,KAAK;IAEL,WAAM,GAANC,MAAM;EACd;EAEH;;;;;;EAMOC,QAAQ,CAACC,WAAmB,EAAEC,YAAoB;IACrD,OAAO,IAAIR,QAAQ,CAAC,IAAI,CAACE,CAAC,GAAGK,WAAW,EAAE,IAAI,CAACJ,CAAC,GAAGK,YAAY,EAAE,IAAI,CAACJ,KAAK,GAAGG,WAAW,EAAE,IAAI,CAACF,MAAM,GAAGG,YAAY,CAAC;EAC1H;EAEA;;;;;;;EAOOC,aAAa,CAACF,WAAmB,EAAEC,YAAoB,EAAEE,GAAa;IACzEA,GAAG,CAACR,CAAC,GAAG,IAAI,CAACA,CAAC,GAAGK,WAAW;IAC5BG,GAAG,CAACP,CAAC,GAAG,IAAI,CAACA,CAAC,GAAGK,YAAY;IAC7BE,GAAG,CAACN,KAAK,GAAG,IAAI,CAACA,KAAK,GAAGG,WAAW;IACpCG,GAAG,CAACL,MAAM,GAAG,IAAI,CAACA,MAAM,GAAGG,YAAY;IACvC,OAAO,IAAI;EACf;EAEA;;;;EAIOG,KAAK;IACR,OAAO,IAAIX,QAAQ,CAAC,IAAI,CAACE,CAAC,EAAE,IAAI,CAACC,CAAC,EAAE,IAAI,CAACC,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;EAChE","names":["Viewport","constructor","x","y","width","height","toGlobal","renderWidth","renderHeight","toGlobalToRef","ref","clone"],"sourceRoot":"","sources":["../../../../lts/core/generated/Maths/math.viewport.ts"],"sourcesContent":["/**\r\n * Class used to represent a viewport on screen\r\n */\r\nexport class Viewport {\r\n    /**\r\n     * Creates a Viewport object located at (x, y) and sized (width, height)\r\n     * @param x defines viewport left coordinate\r\n     * @param y defines viewport top coordinate\r\n     * @param width defines the viewport width\r\n     * @param height defines the viewport height\r\n     */\r\n    constructor(\r\n        /** viewport left coordinate */\r\n        public x: number,\r\n        /** viewport top coordinate */\r\n        public y: number,\r\n        /**viewport width */\r\n        public width: number,\r\n        /** viewport height */\r\n        public height: number\r\n    ) {}\r\n\r\n    /**\r\n     * Creates a new viewport using absolute sizing (from 0-> width, 0-> height instead of 0->1)\r\n     * @param renderWidth defines the rendering width\r\n     * @param renderHeight defines the rendering height\r\n     * @returns a new Viewport\r\n     */\r\n    public toGlobal(renderWidth: number, renderHeight: number): Viewport {\r\n        return new Viewport(this.x * renderWidth, this.y * renderHeight, this.width * renderWidth, this.height * renderHeight);\r\n    }\r\n\r\n    /**\r\n     * Stores absolute viewport value into a target viewport (from 0-> width, 0-> height instead of 0->1)\r\n     * @param renderWidth defines the rendering width\r\n     * @param renderHeight defines the rendering height\r\n     * @param ref defines the target viewport\r\n     * @returns the current viewport\r\n     */\r\n    public toGlobalToRef(renderWidth: number, renderHeight: number, ref: Viewport): Viewport {\r\n        ref.x = this.x * renderWidth;\r\n        ref.y = this.y * renderHeight;\r\n        ref.width = this.width * renderWidth;\r\n        ref.height = this.height * renderHeight;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Viewport copied from the current one\r\n     * @returns a new Viewport\r\n     */\r\n    public clone(): Viewport {\r\n        return new Viewport(this.x, this.y, this.width, this.height);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}