{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ThinEngine } from \"../../Engines/thinEngine.js\";\nimport { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nThinEngine.prototype.createDynamicTexture = function (width, height, generateMipMaps, samplingMode) {\n  const texture = new InternalTexture(this, InternalTextureSource.Dynamic);\n  texture.baseWidth = width;\n  texture.baseHeight = height;\n  if (generateMipMaps) {\n    width = this.needPOTTextures ? ThinEngine.GetExponentOfTwo(width, this._caps.maxTextureSize) : width;\n    height = this.needPOTTextures ? ThinEngine.GetExponentOfTwo(height, this._caps.maxTextureSize) : height;\n  }\n  //  this.resetTextureCache();\n  texture.width = width;\n  texture.height = height;\n  texture.isReady = false;\n  texture.generateMipMaps = generateMipMaps;\n  texture.samplingMode = samplingMode;\n  this.updateTextureSamplingMode(samplingMode, texture);\n  this._internalTexturesCache.push(texture);\n  return texture;\n};\nThinEngine.prototype.updateDynamicTexture = function (texture, source, invertY, premulAlpha = false, format, forceBindTexture = false,\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nallowGPUOptimization = false) {\n  if (!texture) {\n    return;\n  }\n  const gl = this._gl;\n  const target = gl.TEXTURE_2D;\n  const wasPreviouslyBound = this._bindTextureDirectly(target, texture, true, forceBindTexture);\n  this._unpackFlipY(invertY === undefined ? texture.invertY : invertY);\n  if (premulAlpha) {\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);\n  }\n  const textureType = this._getWebGLTextureType(texture.type);\n  const glformat = this._getInternalFormat(format ? format : texture.format);\n  const internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, glformat);\n  gl.texImage2D(target, 0, internalFormat, glformat, textureType, source);\n  if (texture.generateMipMaps) {\n    gl.generateMipmap(target);\n  }\n  if (!wasPreviouslyBound) {\n    this._bindTextureDirectly(target, null);\n  }\n  if (premulAlpha) {\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n  }\n  texture.isReady = true;\n};","map":{"version":3,"mappings":"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","names":["ThinEngine","InternalTexture","InternalTextureSource","prototype","createDynamicTexture","width","height","generateMipMaps","samplingMode","texture","Dynamic","baseWidth","baseHeight","needPOTTextures","GetExponentOfTwo","_caps","maxTextureSize","isReady","updateTextureSamplingMode","_internalTexturesCache","push","updateDynamicTexture","source","invertY","premulAlpha","format","forceBindTexture","allowGPUOptimization","gl","_gl","target","TEXTURE_2D","wasPreviouslyBound","_bindTextureDirectly","_unpackFlipY","undefined","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","textureType","_getWebGLTextureType","type","glformat","_getInternalFormat","internalFormat","_getRGBABufferInternalSizedFormat","texImage2D","generateMipmap"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/Extensions/engine.dynamicTexture.ts"],"sourcesContent":["import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { ICanvas } from \"../ICanvas\";\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Creates a dynamic texture\r\n         * @param width defines the width of the texture\r\n         * @param height defines the height of the texture\r\n         * @param generateMipMaps defines if the engine should generate the mip levels\r\n         * @param samplingMode defines the required sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n         * @returns the dynamic texture inside an InternalTexture\r\n         */\r\n        createDynamicTexture(width: number, height: number, generateMipMaps: boolean, samplingMode: number): InternalTexture;\r\n\r\n        /**\r\n         * Update the content of a dynamic texture\r\n         * @param texture defines the texture to update\r\n         * @param source defines the source containing the data\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @param premulAlpha defines if alpha is stored as premultiplied\r\n         * @param format defines the format of the data\r\n         * @param forceBindTexture if the texture should be forced to be bound eg. after a graphics context loss (Default: false)\r\n         * @param allowGPUOptimization true to allow some specific GPU optimizations (subject to engine feature \"allowGPUOptimizationsForGUI\" being true)\r\n         */\r\n        updateDynamicTexture(\r\n            texture: Nullable<InternalTexture>,\r\n            source: ImageBitmap | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | OffscreenCanvas | ICanvas,\r\n            invertY?: boolean,\r\n            premulAlpha?: boolean,\r\n            format?: number,\r\n            forceBindTexture?: boolean,\r\n            allowGPUOptimization?: boolean\r\n        ): void;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.createDynamicTexture = function (width: number, height: number, generateMipMaps: boolean, samplingMode: number): InternalTexture {\r\n    const texture = new InternalTexture(this, InternalTextureSource.Dynamic);\r\n    texture.baseWidth = width;\r\n    texture.baseHeight = height;\r\n\r\n    if (generateMipMaps) {\r\n        width = this.needPOTTextures ? ThinEngine.GetExponentOfTwo(width, this._caps.maxTextureSize) : width;\r\n        height = this.needPOTTextures ? ThinEngine.GetExponentOfTwo(height, this._caps.maxTextureSize) : height;\r\n    }\r\n\r\n    //  this.resetTextureCache();\r\n    texture.width = width;\r\n    texture.height = height;\r\n    texture.isReady = false;\r\n    texture.generateMipMaps = generateMipMaps;\r\n    texture.samplingMode = samplingMode;\r\n\r\n    this.updateTextureSamplingMode(samplingMode, texture);\r\n\r\n    this._internalTexturesCache.push(texture);\r\n\r\n    return texture;\r\n};\r\n\r\nThinEngine.prototype.updateDynamicTexture = function (\r\n    texture: Nullable<InternalTexture>,\r\n    source: ImageBitmap | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | OffscreenCanvas,\r\n    invertY?: boolean,\r\n    premulAlpha: boolean = false,\r\n    format?: number,\r\n    forceBindTexture: boolean = false,\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    allowGPUOptimization: boolean = false\r\n): void {\r\n    if (!texture) {\r\n        return;\r\n    }\r\n\r\n    const gl = this._gl;\r\n    const target = gl.TEXTURE_2D;\r\n\r\n    const wasPreviouslyBound = this._bindTextureDirectly(target, texture, true, forceBindTexture);\r\n\r\n    this._unpackFlipY(invertY === undefined ? texture.invertY : invertY);\r\n\r\n    if (premulAlpha) {\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);\r\n    }\r\n\r\n    const textureType = this._getWebGLTextureType(texture.type);\r\n    const glformat = this._getInternalFormat(format ? format : texture.format);\r\n    const internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, glformat);\r\n\r\n    gl.texImage2D(target, 0, internalFormat, glformat, textureType, source as TexImageSource);\r\n\r\n    if (texture.generateMipMaps) {\r\n        gl.generateMipmap(target);\r\n    }\r\n\r\n    if (!wasPreviouslyBound) {\r\n        this._bindTextureDirectly(target, null);\r\n    }\r\n\r\n    if (premulAlpha) {\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\r\n    }\r\n\r\n    texture.isReady = true;\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}