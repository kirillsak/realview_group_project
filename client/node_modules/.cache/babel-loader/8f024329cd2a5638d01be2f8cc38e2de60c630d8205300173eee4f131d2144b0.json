{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Tools } from \"./tools.js\";\n/**\n * This can help with recording videos from BabylonJS.\n * This is based on the available WebRTC functionalities of the browser.\n *\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/renderToVideo\n */\nexport class VideoRecorder {\n  /**\n   * Create a new VideoCapture object which can help converting what you see in Babylon to a video file.\n   * @param engine Defines the BabylonJS Engine you wish to record.\n   * @param options Defines options that can be used to customize the capture.\n   */\n  constructor(engine, options = {}) {\n    if (!VideoRecorder.IsSupported(engine)) {\n      throw \"Your browser does not support recording so far.\";\n    }\n    const canvas = engine.getRenderingCanvas();\n    if (!canvas) {\n      throw \"The babylon engine must have a canvas to be recorded\";\n    }\n    this._canvas = canvas;\n    this._canvas.isRecording = false;\n    this._options = {\n      ...VideoRecorder._DefaultOptions,\n      ...options\n    };\n    const stream = this._canvas.captureStream(this._options.fps);\n    if (this._options.audioTracks) {\n      for (const track of this._options.audioTracks) {\n        stream.addTrack(track);\n      }\n    }\n    this._mediaRecorder = new MediaRecorder(stream, {\n      mimeType: this._options.mimeType\n    });\n    this._mediaRecorder.ondataavailable = this._handleDataAvailable.bind(this);\n    this._mediaRecorder.onerror = this._handleError.bind(this);\n    this._mediaRecorder.onstop = this._handleStop.bind(this);\n  }\n  /**\n   * Returns whether or not the VideoRecorder is available in your browser.\n   * @param engine Defines the Babylon Engine.\n   * @returns true if supported otherwise false.\n   */\n  static IsSupported(engine) {\n    const canvas = engine.getRenderingCanvas();\n    return !!canvas && typeof canvas.captureStream === \"function\";\n  }\n  /**\n   * True when a recording is already in progress.\n   */\n  get isRecording() {\n    return !!this._canvas && this._canvas.isRecording;\n  }\n  /**\n   * Stops the current recording before the default capture timeout passed in the startRecording function.\n   */\n  stopRecording() {\n    if (!this._canvas || !this._mediaRecorder) {\n      return;\n    }\n    if (!this.isRecording) {\n      return;\n    }\n    this._canvas.isRecording = false;\n    this._mediaRecorder.stop();\n  }\n  /**\n   * Starts recording the canvas for a max duration specified in parameters.\n   * @param fileName Defines the name of the file to be downloaded when the recording stop.\n   * If null no automatic download will start and you can rely on the promise to get the data back.\n   * @param maxDuration Defines the maximum recording time in seconds.\n   * It defaults to 7 seconds. A value of zero will not stop automatically, you would need to call stopRecording manually.\n   * @returns A promise callback at the end of the recording with the video data in Blob.\n   */\n  startRecording(fileName = \"babylonjs.webm\", maxDuration = 7) {\n    if (!this._canvas || !this._mediaRecorder) {\n      throw \"Recorder has already been disposed\";\n    }\n    if (this.isRecording) {\n      throw \"Recording already in progress\";\n    }\n    if (maxDuration > 0) {\n      setTimeout(() => {\n        this.stopRecording();\n      }, maxDuration * 1000);\n    }\n    this._fileName = fileName;\n    this._recordedChunks = [];\n    this._resolve = null;\n    this._reject = null;\n    this._canvas.isRecording = true;\n    this._mediaRecorder.start(this._options.recordChunckSize);\n    return new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n  /**\n   * Releases internal resources used during the recording.\n   */\n  dispose() {\n    this._canvas = null;\n    this._mediaRecorder = null;\n    this._recordedChunks = [];\n    this._fileName = null;\n    this._resolve = null;\n    this._reject = null;\n  }\n  _handleDataAvailable(event) {\n    if (event.data.size > 0) {\n      this._recordedChunks.push(event.data);\n    }\n  }\n  _handleError(event) {\n    this.stopRecording();\n    if (this._reject) {\n      this._reject(event.error);\n    } else {\n      throw new event.error();\n    }\n  }\n  _handleStop() {\n    this.stopRecording();\n    const superBuffer = new Blob(this._recordedChunks);\n    if (this._resolve) {\n      this._resolve(superBuffer);\n    }\n    window.URL.createObjectURL(superBuffer);\n    if (this._fileName) {\n      Tools.Download(superBuffer, this._fileName);\n    }\n  }\n}\nVideoRecorder._DefaultOptions = {\n  mimeType: \"video/webm\",\n  fps: 25,\n  recordChunckSize: 3000\n};","map":{"version":3,"mappings":"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","names":["Tools","VideoRecorder","constructor","engine","options","IsSupported","canvas","getRenderingCanvas","_canvas","isRecording","_options","_DefaultOptions","stream","captureStream","fps","audioTracks","track","addTrack","_mediaRecorder","MediaRecorder","mimeType","ondataavailable","_handleDataAvailable","bind","onerror","_handleError","onstop","_handleStop","stopRecording","stop","startRecording","fileName","maxDuration","setTimeout","_fileName","_recordedChunks","_resolve","_reject","start","recordChunckSize","Promise","resolve","reject","dispose","event","data","size","push","error","superBuffer","Blob","window","URL","createObjectURL","Download"],"sourceRoot":"","sources":["../../../../lts/core/generated/Misc/videoRecorder.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\n/* eslint-disable no-var */\r\nimport type { Nullable } from \"../types\";\r\nimport { Tools } from \"./tools\";\r\nimport type { Engine } from \"../Engines/engine\";\r\n\r\ninterface MediaRecorder {\r\n    /** Starts recording */\r\n    start(timeSlice: number): void;\r\n    /** Stops recording */\r\n    stop(): void;\r\n\r\n    /** Event raised when an error arised. */\r\n    onerror: (event: ErrorEvent) => void;\r\n    /** Event raised when the recording stops. */\r\n    onstop: (event: Event) => void;\r\n    /** Event raised when a new chunk of data is available and should be tracked. */\r\n    ondataavailable: (event: Event) => void;\r\n}\r\n\r\ninterface MediaRecorderOptions {\r\n    /** The mime type you want to use as the recording container for the new MediaRecorder. */\r\n    mimeType?: string;\r\n    /** The chosen bitrate for the audio component of the media. */\r\n    audioBitsPerSecond?: number;\r\n    /** The chosen bitrate for the video component of the media. */\r\n    videoBitsPerSecond?: number;\r\n    /** The chosen bitrate for the audio and video components of the media. This can be specified instead of the above two properties.\r\n     * If this is specified along with one or the other of the above properties, this will be used for the one that isn't specified. */\r\n    bitsPerSecond?: number;\r\n}\r\n\r\ninterface MediaRecorderConstructor {\r\n    /**\r\n     * A reference to the prototype.\r\n     */\r\n    readonly prototype: MediaRecorder;\r\n\r\n    /**\r\n     * Creates a new MediaRecorder.\r\n     * @param stream Defines the stream to record.\r\n     * @param options Defines the options for the recorder available in the type MediaRecorderOptions.\r\n     */\r\n    new (stream: MediaStream, options?: MediaRecorderOptions): MediaRecorder;\r\n}\r\n\r\n/**\r\n * MediaRecorder object available in some browsers.\r\n */\r\ndeclare var MediaRecorder: MediaRecorderConstructor;\r\n\r\n/**\r\n * This represents the different options available for the video capture.\r\n */\r\nexport interface VideoRecorderOptions {\r\n    /** Defines the mime type of the video. */\r\n    mimeType: string;\r\n    /** Defines the FPS the video should be recorded at. */\r\n    fps: number;\r\n    /** Defines the chunk size for the recording data. */\r\n    recordChunckSize: number;\r\n    /** The audio tracks to attach to the recording. */\r\n    audioTracks?: MediaStreamTrack[];\r\n}\r\n\r\n/**\r\n * This can help with recording videos from BabylonJS.\r\n * This is based on the available WebRTC functionalities of the browser.\r\n *\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/renderToVideo\r\n */\r\nexport class VideoRecorder {\r\n    private static readonly _DefaultOptions = {\r\n        mimeType: \"video/webm\",\r\n        fps: 25,\r\n        recordChunckSize: 3000,\r\n    };\r\n\r\n    /**\r\n     * Returns whether or not the VideoRecorder is available in your browser.\r\n     * @param engine Defines the Babylon Engine.\r\n     * @returns true if supported otherwise false.\r\n     */\r\n    public static IsSupported(engine: Engine): boolean {\r\n        const canvas = engine.getRenderingCanvas();\r\n        return !!canvas && typeof (<any>canvas).captureStream === \"function\";\r\n    }\r\n\r\n    private readonly _options: VideoRecorderOptions;\r\n    private _canvas: Nullable<HTMLCanvasElement>;\r\n    private _mediaRecorder: Nullable<MediaRecorder>;\r\n\r\n    private _recordedChunks: any[];\r\n    private _fileName: Nullable<string>;\r\n    private _resolve: Nullable<(blob: Blob) => void>;\r\n    private _reject: Nullable<(error: any) => void>;\r\n\r\n    /**\r\n     * True when a recording is already in progress.\r\n     */\r\n    public get isRecording(): boolean {\r\n        return !!this._canvas && this._canvas.isRecording;\r\n    }\r\n\r\n    /**\r\n     * Create a new VideoCapture object which can help converting what you see in Babylon to a video file.\r\n     * @param engine Defines the BabylonJS Engine you wish to record.\r\n     * @param options Defines options that can be used to customize the capture.\r\n     */\r\n    constructor(engine: Engine, options: Partial<VideoRecorderOptions> = {}) {\r\n        if (!VideoRecorder.IsSupported(engine)) {\r\n            throw \"Your browser does not support recording so far.\";\r\n        }\r\n\r\n        const canvas = engine.getRenderingCanvas();\r\n        if (!canvas) {\r\n            throw \"The babylon engine must have a canvas to be recorded\";\r\n        }\r\n\r\n        this._canvas = canvas;\r\n        this._canvas.isRecording = false;\r\n\r\n        this._options = {\r\n            ...VideoRecorder._DefaultOptions,\r\n            ...options,\r\n        };\r\n\r\n        const stream = this._canvas.captureStream(this._options.fps);\r\n        if (this._options.audioTracks) {\r\n            for (const track of this._options.audioTracks) {\r\n                stream.addTrack(track);\r\n            }\r\n        }\r\n\r\n        this._mediaRecorder = new MediaRecorder(stream, { mimeType: this._options.mimeType });\r\n        this._mediaRecorder.ondataavailable = this._handleDataAvailable.bind(this);\r\n        this._mediaRecorder.onerror = this._handleError.bind(this);\r\n        this._mediaRecorder.onstop = this._handleStop.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Stops the current recording before the default capture timeout passed in the startRecording function.\r\n     */\r\n    public stopRecording(): void {\r\n        if (!this._canvas || !this._mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        if (!this.isRecording) {\r\n            return;\r\n        }\r\n\r\n        this._canvas.isRecording = false;\r\n        this._mediaRecorder.stop();\r\n    }\r\n\r\n    /**\r\n     * Starts recording the canvas for a max duration specified in parameters.\r\n     * @param fileName Defines the name of the file to be downloaded when the recording stop.\r\n     * If null no automatic download will start and you can rely on the promise to get the data back.\r\n     * @param maxDuration Defines the maximum recording time in seconds.\r\n     * It defaults to 7 seconds. A value of zero will not stop automatically, you would need to call stopRecording manually.\r\n     * @returns A promise callback at the end of the recording with the video data in Blob.\r\n     */\r\n    public startRecording(fileName: Nullable<string> = \"babylonjs.webm\", maxDuration = 7): Promise<Blob> {\r\n        if (!this._canvas || !this._mediaRecorder) {\r\n            throw \"Recorder has already been disposed\";\r\n        }\r\n\r\n        if (this.isRecording) {\r\n            throw \"Recording already in progress\";\r\n        }\r\n\r\n        if (maxDuration > 0) {\r\n            setTimeout(() => {\r\n                this.stopRecording();\r\n            }, maxDuration * 1000);\r\n        }\r\n\r\n        this._fileName = fileName;\r\n        this._recordedChunks = [];\r\n        this._resolve = null;\r\n        this._reject = null;\r\n\r\n        this._canvas.isRecording = true;\r\n        this._mediaRecorder.start(this._options.recordChunckSize);\r\n\r\n        return new Promise<Blob>((resolve, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Releases internal resources used during the recording.\r\n     */\r\n    public dispose() {\r\n        this._canvas = null;\r\n        this._mediaRecorder = null;\r\n\r\n        this._recordedChunks = [];\r\n        this._fileName = null;\r\n        this._resolve = null;\r\n        this._reject = null;\r\n    }\r\n\r\n    private _handleDataAvailable(event: any): void {\r\n        if (event.data.size > 0) {\r\n            this._recordedChunks.push(event.data);\r\n        }\r\n    }\r\n\r\n    private _handleError(event: ErrorEvent): void {\r\n        this.stopRecording();\r\n\r\n        if (this._reject) {\r\n            this._reject(event.error);\r\n        } else {\r\n            throw new event.error();\r\n        }\r\n    }\r\n\r\n    private _handleStop(): void {\r\n        this.stopRecording();\r\n\r\n        const superBuffer = new Blob(this._recordedChunks);\r\n        if (this._resolve) {\r\n            this._resolve(superBuffer);\r\n        }\r\n\r\n        window.URL.createObjectURL(superBuffer);\r\n\r\n        if (this._fileName) {\r\n            Tools.Download(superBuffer, this._fileName);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}