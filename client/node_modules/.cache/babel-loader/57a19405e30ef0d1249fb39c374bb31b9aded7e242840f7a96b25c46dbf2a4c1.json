{"ast":null,"code":"import { WebXRFeatureName, WebXRFeaturesManager } from \"../webXRFeaturesManager.js\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature.js\";\nimport { WebXRLayerRenderTargetTextureProvider } from \"../webXRRenderTargetTextureProvider.js\";\nimport { WebXRLayerWrapper } from \"../webXRLayerWrapper.js\";\nimport { WebXRWebGLLayerWrapper } from \"../webXRWebGLLayer.js\";\n/**\n * Wraps xr composition layers.\n * @internal\n */\nexport class WebXRCompositionLayerWrapper extends WebXRLayerWrapper {\n  constructor(getWidth, getHeight, layer, layerType, isMultiview, createRTTProvider) {\n    super(getWidth, getHeight, layer, layerType, createRTTProvider);\n    this.getWidth = getWidth;\n    this.getHeight = getHeight;\n    this.layer = layer;\n    this.layerType = layerType;\n    this.isMultiview = isMultiview;\n    this.createRTTProvider = createRTTProvider;\n  }\n}\n/**\n * Provides render target textures and other important rendering information for a given XRCompositionLayer.\n * @internal\n */\nclass WebXRCompositionLayerRenderTargetTextureProvider extends WebXRLayerRenderTargetTextureProvider {\n  constructor(_xrSessionManager, _xrWebGLBinding, layerWrapper) {\n    super(_xrSessionManager.scene, layerWrapper);\n    this._xrSessionManager = _xrSessionManager;\n    this._xrWebGLBinding = _xrWebGLBinding;\n    this.layerWrapper = layerWrapper;\n    this._lastSubImages = new Map();\n    this._compositionLayer = layerWrapper.layer;\n  }\n  _getRenderTargetForSubImage(subImage, eye) {\n    const lastSubImage = this._lastSubImages.get(eye);\n    const eyeIndex = eye == \"left\" ? 0 : 1;\n    if (!this._renderTargetTextures[eyeIndex] || (lastSubImage === null || lastSubImage === void 0 ? void 0 : lastSubImage.textureWidth) !== subImage.textureWidth || (lastSubImage === null || lastSubImage === void 0 ? void 0 : lastSubImage.textureHeight) != subImage.textureHeight) {\n      this._renderTargetTextures[eyeIndex] = this._createRenderTargetTexture(subImage.textureWidth, subImage.textureHeight, null, subImage.colorTexture, subImage.depthStencilTexture, this.layerWrapper.isMultiview);\n      this._framebufferDimensions = {\n        framebufferWidth: subImage.textureWidth,\n        framebufferHeight: subImage.textureHeight\n      };\n    }\n    this._lastSubImages.set(eye, subImage);\n    return this._renderTargetTextures[eyeIndex];\n  }\n  _getSubImageForEye(eye) {\n    const currentFrame = this._xrSessionManager.currentFrame;\n    if (currentFrame) {\n      return this._xrWebGLBinding.getSubImage(this._compositionLayer, currentFrame, eye);\n    }\n    return null;\n  }\n  getRenderTargetTextureForEye(eye) {\n    const subImage = this._getSubImageForEye(eye);\n    if (subImage) {\n      return this._getRenderTargetForSubImage(subImage, eye);\n    }\n    return null;\n  }\n  getRenderTargetTextureForView(view) {\n    return this.getRenderTargetTextureForEye(view.eye);\n  }\n  _setViewportForSubImage(viewport, subImage) {\n    const textureWidth = subImage.textureWidth;\n    const textureHeight = subImage.textureHeight;\n    const xrViewport = subImage.viewport;\n    viewport.x = xrViewport.x / textureWidth;\n    viewport.y = xrViewport.y / textureHeight;\n    viewport.width = xrViewport.width / textureWidth;\n    viewport.height = xrViewport.height / textureHeight;\n  }\n  trySetViewportForView(viewport, view) {\n    const subImage = this._lastSubImages.get(view.eye) || this._getSubImageForEye(view.eye);\n    if (subImage) {\n      this._setViewportForSubImage(viewport, subImage);\n      return true;\n    }\n    return false;\n  }\n}\n/**\n * Wraps xr projection layers.\n * @internal\n */\nexport class WebXRProjectionLayerWrapper extends WebXRCompositionLayerWrapper {\n  constructor(layer, isMultiview, xrGLBinding) {\n    super(() => layer.textureWidth, () => layer.textureHeight, layer, \"XRProjectionLayer\", isMultiview, sessionManager => new WebXRProjectionLayerRenderTargetTextureProvider(sessionManager, xrGLBinding, this));\n    this.layer = layer;\n  }\n}\n/**\n * Provides render target textures and other important rendering information for a given XRProjectionLayer.\n * @internal\n */\nclass WebXRProjectionLayerRenderTargetTextureProvider extends WebXRCompositionLayerRenderTargetTextureProvider {\n  constructor(_xrSessionManager, _xrWebGLBinding, layerWrapper) {\n    super(_xrSessionManager, _xrWebGLBinding, layerWrapper);\n    this.layerWrapper = layerWrapper;\n    this._projectionLayer = layerWrapper.layer;\n  }\n  _getSubImageForView(view) {\n    return this._xrWebGLBinding.getViewSubImage(this._projectionLayer, view);\n  }\n  getRenderTargetTextureForView(view) {\n    return this._getRenderTargetForSubImage(this._getSubImageForView(view), view.eye);\n  }\n  getRenderTargetTextureForEye(eye) {\n    const lastSubImage = this._lastSubImages.get(eye);\n    if (lastSubImage) {\n      return this._getRenderTargetForSubImage(lastSubImage, eye);\n    }\n    return null;\n  }\n  trySetViewportForView(viewport, view) {\n    const subImage = this._lastSubImages.get(view.eye) || this._getSubImageForView(view);\n    if (subImage) {\n      this._setViewportForSubImage(viewport, subImage);\n      return true;\n    }\n    return false;\n  }\n}\nconst defaultXRWebGLLayerInit = {};\nconst defaultXRProjectionLayerInit = {\n  textureType: \"texture\",\n  colorFormat: 0x1908 /* WebGLRenderingContext.RGBA */,\n  depthFormat: 0x88f0 /* WebGLRenderingContext.DEPTH24_STENCIL8 */,\n  scaleFactor: 1.0\n};\n/**\n * Exposes the WebXR Layers API.\n */\nexport class WebXRLayers extends WebXRAbstractFeature {\n  constructor(_xrSessionManager, _options = {}) {\n    super(_xrSessionManager);\n    this._options = _options;\n    /**\n     * Already-created layers\n     */\n    this._existingLayers = [];\n    this.xrNativeFeatureName = \"layers\";\n  }\n  /**\n   * Attach this feature.\n   * Will usually be called by the features manager.\n   *\n   * @returns true if successful.\n   */\n  attach() {\n    if (!super.attach()) {\n      return false;\n    }\n    const engine = this._xrSessionManager.scene.getEngine();\n    this._glContext = engine._gl;\n    this._xrWebGLBinding = new XRWebGLBinding(this._xrSessionManager.session, this._glContext);\n    this._existingLayers.length = 0;\n    const projectionLayerInit = {\n      ...defaultXRProjectionLayerInit\n    };\n    const projectionLayerMultiview = this._options.preferMultiviewOnInit && engine.getCaps().multiview;\n    if (projectionLayerMultiview) {\n      projectionLayerInit.textureType = \"texture-array\";\n    }\n    this.addXRSessionLayer(this.createProjectionLayer(projectionLayerInit, projectionLayerMultiview));\n    return true;\n  }\n  detach() {\n    if (!super.detach()) {\n      return false;\n    }\n    this._existingLayers.length = 0;\n    return true;\n  }\n  /**\n   * Creates a new XRWebGLLayer.\n   * @param params an object providing configuration options for the new XRWebGLLayer\n   * @returns the XRWebGLLayer\n   */\n  createXRWebGLLayer(params = defaultXRWebGLLayerInit) {\n    const layer = new XRWebGLLayer(this._xrSessionManager.session, this._glContext, params);\n    return new WebXRWebGLLayerWrapper(layer);\n  }\n  /**\n   * Creates a new XRProjectionLayer.\n   * @param params an object providing configuration options for the new XRProjectionLayer.\n   * @param multiview whether the projection layer should render with multiview.\n   * @returns the projection layer\n   */\n  createProjectionLayer(params = defaultXRProjectionLayerInit, multiview = false) {\n    if (multiview && params.textureType !== \"texture-array\") {\n      throw new Error(\"Projection layers can only be made multiview if they use texture arrays. Set the textureType parameter to 'texture-array'.\");\n    }\n    // TODO (rgerd): Support RTT's that are bound to sub-images in the texture array.\n    if (!multiview && params.textureType === \"texture-array\") {\n      throw new Error(\"We currently only support multiview rendering when the textureType parameter is set to 'texture-array'.\");\n    }\n    const projLayer = this._xrWebGLBinding.createProjectionLayer(params);\n    return new WebXRProjectionLayerWrapper(projLayer, multiview, this._xrWebGLBinding);\n  }\n  /**\n   * Add a new layer to the already-existing list of layers\n   * @param wrappedLayer the new layer to add to the existing ones\n   */\n  addXRSessionLayer(wrappedLayer) {\n    this.setXRSessionLayers([...this._existingLayers, wrappedLayer]);\n  }\n  /**\n   * Sets the layers to be used by the XR session.\n   * Note that you must call this function with any layers you wish to render to\n   * since it adds them to the XR session's render state\n   * (replacing any layers that were added in a previous call to setXRSessionLayers or updateRenderState).\n   * This method also sets up the session manager's render target texture provider\n   * as the first layer in the array, which feeds the WebXR camera(s) attached to the session.\n   * @param wrappedLayers An array of WebXRLayerWrapper, usually returned from the WebXRLayers createLayer functions.\n   */\n  setXRSessionLayers(wrappedLayers) {\n    this._existingLayers = wrappedLayers;\n    const renderStateInit = {\n      ...this._xrSessionManager.session.renderState\n    };\n    // Clear out the layer-related fields.\n    renderStateInit.baseLayer = undefined;\n    renderStateInit.layers = wrappedLayers.map(wrappedLayer => wrappedLayer.layer);\n    this._xrSessionManager.updateRenderState(renderStateInit);\n    this._xrSessionManager._setBaseLayerWrapper(wrappedLayers.length > 0 ? wrappedLayers[0] : null);\n  }\n  isCompatible() {\n    // TODO (rgerd): Add native support.\n    return !this._xrSessionManager.isNative && typeof XRWebGLBinding !== \"undefined\" && !!XRWebGLBinding.prototype.createProjectionLayer;\n  }\n  /**\n   * Dispose this feature and all of the resources attached.\n   */\n  dispose() {\n    super.dispose();\n  }\n  _onXRFrame(_xrFrame) {\n    /* empty */\n  }\n}\n/**\n * The module's name\n */\nWebXRLayers.Name = WebXRFeatureName.LAYERS;\n/**\n * The (Babylon) version of this module.\n * This is an integer representing the implementation version.\n * This number does not correspond to the WebXR specs version\n */\nWebXRLayers.Version = 1;\n//register the plugin\nWebXRFeaturesManager.AddWebXRFeature(WebXRLayers.Name, (xrSessionManager, options) => {\n  return () => new WebXRLayers(xrSessionManager, options);\n}, WebXRLayers.Version, false);","map":{"version":3,"mappings":"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","names":["WebXRFeatureName","WebXRFeaturesManager","WebXRAbstractFeature","WebXRLayerRenderTargetTextureProvider","WebXRLayerWrapper","WebXRWebGLLayerWrapper","WebXRCompositionLayerWrapper","constructor","getWidth","getHeight","layer","layerType","isMultiview","createRTTProvider","WebXRCompositionLayerRenderTargetTextureProvider","_xrSessionManager","_xrWebGLBinding","layerWrapper","scene","Map","_compositionLayer","_getRenderTargetForSubImage","subImage","eye","lastSubImage","_lastSubImages","get","eyeIndex","_renderTargetTextures","textureWidth","textureHeight","_createRenderTargetTexture","colorTexture","depthStencilTexture","_framebufferDimensions","framebufferWidth","framebufferHeight","set","_getSubImageForEye","currentFrame","getSubImage","getRenderTargetTextureForEye","getRenderTargetTextureForView","view","_setViewportForSubImage","viewport","xrViewport","x","y","width","height","trySetViewportForView","WebXRProjectionLayerWrapper","xrGLBinding","sessionManager","WebXRProjectionLayerRenderTargetTextureProvider","_projectionLayer","_getSubImageForView","getViewSubImage","defaultXRWebGLLayerInit","defaultXRProjectionLayerInit","textureType","colorFormat","depthFormat","scaleFactor","WebXRLayers","_options","xrNativeFeatureName","attach","engine","getEngine","_glContext","_gl","XRWebGLBinding","session","_existingLayers","length","projectionLayerInit","projectionLayerMultiview","preferMultiviewOnInit","getCaps","multiview","addXRSessionLayer","createProjectionLayer","detach","createXRWebGLLayer","params","XRWebGLLayer","Error","projLayer","wrappedLayer","setXRSessionLayers","wrappedLayers","renderStateInit","renderState","baseLayer","undefined","layers","map","updateRenderState","_setBaseLayerWrapper","isCompatible","isNative","prototype","dispose","_onXRFrame","_xrFrame","LAYERS","AddWebXRFeature","Name","xrSessionManager","options","Version"],"sourceRoot":"","sources":["../../../../../lts/core/generated/XR/features/WebXRLayers.ts"],"sourcesContent":["import { WebXRFeatureName, WebXRFeaturesManager } from \"../webXRFeaturesManager\";\r\nimport type { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { WebXRLayerRenderTargetTextureProvider } from \"../webXRRenderTargetTextureProvider\";\r\nimport type { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\nimport type { WebXRLayerType } from \"../webXRLayerWrapper\";\r\nimport { WebXRLayerWrapper } from \"../webXRLayerWrapper\";\r\nimport type { Viewport } from \"../../Maths/math.viewport\";\r\nimport { WebXRWebGLLayerWrapper } from \"../webXRWebGLLayer\";\r\n\r\n/**\r\n * Wraps xr composition layers.\r\n * @internal\r\n */\r\nexport class WebXRCompositionLayerWrapper extends WebXRLayerWrapper {\r\n    constructor(\r\n        public getWidth: () => number,\r\n        public getHeight: () => number,\r\n        public readonly layer: XRCompositionLayer,\r\n        public readonly layerType: WebXRLayerType,\r\n        public readonly isMultiview: boolean,\r\n        public createRTTProvider: (xrSessionManager: WebXRSessionManager) => WebXRLayerRenderTargetTextureProvider\r\n    ) {\r\n        super(getWidth, getHeight, layer, layerType, createRTTProvider);\r\n    }\r\n}\r\n\r\n/**\r\n * Provides render target textures and other important rendering information for a given XRCompositionLayer.\r\n * @internal\r\n */\r\nclass WebXRCompositionLayerRenderTargetTextureProvider extends WebXRLayerRenderTargetTextureProvider {\r\n    protected _lastSubImages = new Map<XREye, XRWebGLSubImage>();\r\n    private _compositionLayer: XRCompositionLayer;\r\n\r\n    constructor(\r\n        protected readonly _xrSessionManager: WebXRSessionManager,\r\n        protected readonly _xrWebGLBinding: XRWebGLBinding,\r\n        public readonly layerWrapper: WebXRCompositionLayerWrapper\r\n    ) {\r\n        super(_xrSessionManager.scene, layerWrapper);\r\n        this._compositionLayer = layerWrapper.layer;\r\n    }\r\n\r\n    protected _getRenderTargetForSubImage(subImage: XRWebGLSubImage, eye: XREye) {\r\n        const lastSubImage = this._lastSubImages.get(eye);\r\n        const eyeIndex = eye == \"left\" ? 0 : 1;\r\n        if (!this._renderTargetTextures[eyeIndex] || lastSubImage?.textureWidth !== subImage.textureWidth || lastSubImage?.textureHeight != subImage.textureHeight) {\r\n            this._renderTargetTextures[eyeIndex] = this._createRenderTargetTexture(\r\n                subImage.textureWidth,\r\n                subImage.textureHeight,\r\n                null,\r\n                subImage.colorTexture,\r\n                subImage.depthStencilTexture,\r\n                this.layerWrapper.isMultiview\r\n            );\r\n\r\n            this._framebufferDimensions = {\r\n                framebufferWidth: subImage.textureWidth,\r\n                framebufferHeight: subImage.textureHeight,\r\n            };\r\n        }\r\n\r\n        this._lastSubImages.set(eye, subImage);\r\n\r\n        return this._renderTargetTextures[eyeIndex];\r\n    }\r\n\r\n    private _getSubImageForEye(eye: XREye): Nullable<XRWebGLSubImage> {\r\n        const currentFrame = this._xrSessionManager.currentFrame;\r\n        if (currentFrame) {\r\n            return this._xrWebGLBinding.getSubImage(this._compositionLayer, currentFrame, eye);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getRenderTargetTextureForEye(eye: XREye): Nullable<RenderTargetTexture> {\r\n        const subImage = this._getSubImageForEye(eye);\r\n        if (subImage) {\r\n            return this._getRenderTargetForSubImage(subImage, eye);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getRenderTargetTextureForView(view: XRView): Nullable<RenderTargetTexture> {\r\n        return this.getRenderTargetTextureForEye(view.eye);\r\n    }\r\n\r\n    protected _setViewportForSubImage(viewport: Viewport, subImage: XRWebGLSubImage) {\r\n        const textureWidth = subImage.textureWidth;\r\n        const textureHeight = subImage.textureHeight;\r\n        const xrViewport = subImage.viewport;\r\n        viewport.x = xrViewport.x / textureWidth;\r\n        viewport.y = xrViewport.y / textureHeight;\r\n        viewport.width = xrViewport.width / textureWidth;\r\n        viewport.height = xrViewport.height / textureHeight;\r\n    }\r\n\r\n    public trySetViewportForView(viewport: Viewport, view: XRView): boolean {\r\n        const subImage = this._lastSubImages.get(view.eye) || this._getSubImageForEye(view.eye);\r\n        if (subImage) {\r\n            this._setViewportForSubImage(viewport, subImage);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Wraps xr projection layers.\r\n * @internal\r\n */\r\nexport class WebXRProjectionLayerWrapper extends WebXRCompositionLayerWrapper {\r\n    constructor(public readonly layer: XRProjectionLayer, isMultiview: boolean, xrGLBinding: XRWebGLBinding) {\r\n        super(\r\n            () => layer.textureWidth,\r\n            () => layer.textureHeight,\r\n            layer,\r\n            \"XRProjectionLayer\",\r\n            isMultiview,\r\n            (sessionManager) => new WebXRProjectionLayerRenderTargetTextureProvider(sessionManager, xrGLBinding, this)\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Provides render target textures and other important rendering information for a given XRProjectionLayer.\r\n * @internal\r\n */\r\nclass WebXRProjectionLayerRenderTargetTextureProvider extends WebXRCompositionLayerRenderTargetTextureProvider {\r\n    private readonly _projectionLayer: XRProjectionLayer;\r\n\r\n    constructor(_xrSessionManager: WebXRSessionManager, _xrWebGLBinding: XRWebGLBinding, public readonly layerWrapper: WebXRProjectionLayerWrapper) {\r\n        super(_xrSessionManager, _xrWebGLBinding, layerWrapper);\r\n        this._projectionLayer = layerWrapper.layer;\r\n    }\r\n\r\n    private _getSubImageForView(view: XRView): XRWebGLSubImage {\r\n        return this._xrWebGLBinding.getViewSubImage(this._projectionLayer, view);\r\n    }\r\n\r\n    public getRenderTargetTextureForView(view: XRView): Nullable<RenderTargetTexture> {\r\n        return this._getRenderTargetForSubImage(this._getSubImageForView(view), view.eye);\r\n    }\r\n\r\n    public getRenderTargetTextureForEye(eye: XREye): Nullable<RenderTargetTexture> {\r\n        const lastSubImage = this._lastSubImages.get(eye);\r\n        if (lastSubImage) {\r\n            return this._getRenderTargetForSubImage(lastSubImage, eye);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public trySetViewportForView(viewport: Viewport, view: XRView): boolean {\r\n        const subImage = this._lastSubImages.get(view.eye) || this._getSubImageForView(view);\r\n        if (subImage) {\r\n            this._setViewportForSubImage(viewport, subImage);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nconst defaultXRWebGLLayerInit: XRWebGLLayerInit = {};\r\n\r\nconst defaultXRProjectionLayerInit: XRProjectionLayerInit = {\r\n    textureType: \"texture\",\r\n    colorFormat: 0x1908 /* WebGLRenderingContext.RGBA */,\r\n    depthFormat: 0x88f0 /* WebGLRenderingContext.DEPTH24_STENCIL8 */,\r\n    scaleFactor: 1.0,\r\n};\r\n\r\n/**\r\n * Configuration options of the layers feature\r\n */\r\nexport interface IWebXRLayersOptions {\r\n    /**\r\n     * Whether to try initializing the base projection layer as a multiview render target, if multiview is supported.\r\n     * Defaults to false.\r\n     */\r\n    preferMultiviewOnInit?: boolean;\r\n}\r\n\r\n/**\r\n * Exposes the WebXR Layers API.\r\n */\r\nexport class WebXRLayers extends WebXRAbstractFeature {\r\n    /**\r\n     * The module's name\r\n     */\r\n    public static readonly Name = WebXRFeatureName.LAYERS;\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number does not correspond to the WebXR specs version\r\n     */\r\n    public static readonly Version = 1;\r\n    /**\r\n     * Already-created layers\r\n     */\r\n    private _existingLayers: WebXRLayerWrapper[] = [];\r\n\r\n    private _glContext: WebGLRenderingContext | WebGL2RenderingContext;\r\n    private _xrWebGLBinding: XRWebGLBinding;\r\n\r\n    constructor(_xrSessionManager: WebXRSessionManager, private readonly _options: IWebXRLayersOptions = {}) {\r\n        super(_xrSessionManager);\r\n        this.xrNativeFeatureName = \"layers\";\r\n    }\r\n\r\n    /**\r\n     * Attach this feature.\r\n     * Will usually be called by the features manager.\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public attach(): boolean {\r\n        if (!super.attach()) {\r\n            return false;\r\n        }\r\n\r\n        const engine = this._xrSessionManager.scene.getEngine();\r\n        this._glContext = engine._gl;\r\n        this._xrWebGLBinding = new XRWebGLBinding(this._xrSessionManager.session, this._glContext);\r\n        this._existingLayers.length = 0;\r\n\r\n        const projectionLayerInit = { ...defaultXRProjectionLayerInit };\r\n        const projectionLayerMultiview = this._options.preferMultiviewOnInit && engine.getCaps().multiview;\r\n        if (projectionLayerMultiview) {\r\n            projectionLayerInit.textureType = \"texture-array\";\r\n        }\r\n        this.addXRSessionLayer(this.createProjectionLayer(projectionLayerInit, projectionLayerMultiview));\r\n\r\n        return true;\r\n    }\r\n\r\n    public detach(): boolean {\r\n        if (!super.detach()) {\r\n            return false;\r\n        }\r\n        this._existingLayers.length = 0;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a new XRWebGLLayer.\r\n     * @param params an object providing configuration options for the new XRWebGLLayer\r\n     * @returns the XRWebGLLayer\r\n     */\r\n    public createXRWebGLLayer(params = defaultXRWebGLLayerInit): WebXRWebGLLayerWrapper {\r\n        const layer = new XRWebGLLayer(this._xrSessionManager.session, this._glContext, params);\r\n        return new WebXRWebGLLayerWrapper(layer);\r\n    }\r\n\r\n    /**\r\n     * Creates a new XRProjectionLayer.\r\n     * @param params an object providing configuration options for the new XRProjectionLayer.\r\n     * @param multiview whether the projection layer should render with multiview.\r\n     * @returns the projection layer\r\n     */\r\n    public createProjectionLayer(params = defaultXRProjectionLayerInit, multiview = false): WebXRProjectionLayerWrapper {\r\n        if (multiview && params.textureType !== \"texture-array\") {\r\n            throw new Error(\"Projection layers can only be made multiview if they use texture arrays. Set the textureType parameter to 'texture-array'.\");\r\n        }\r\n\r\n        // TODO (rgerd): Support RTT's that are bound to sub-images in the texture array.\r\n        if (!multiview && params.textureType === \"texture-array\") {\r\n            throw new Error(\"We currently only support multiview rendering when the textureType parameter is set to 'texture-array'.\");\r\n        }\r\n\r\n        const projLayer = this._xrWebGLBinding.createProjectionLayer(params);\r\n        return new WebXRProjectionLayerWrapper(projLayer, multiview, this._xrWebGLBinding);\r\n    }\r\n\r\n    /**\r\n     * Add a new layer to the already-existing list of layers\r\n     * @param wrappedLayer the new layer to add to the existing ones\r\n     */\r\n    public addXRSessionLayer(wrappedLayer: WebXRLayerWrapper) {\r\n        this.setXRSessionLayers([...this._existingLayers, wrappedLayer]);\r\n    }\r\n\r\n    /**\r\n     * Sets the layers to be used by the XR session.\r\n     * Note that you must call this function with any layers you wish to render to\r\n     * since it adds them to the XR session's render state\r\n     * (replacing any layers that were added in a previous call to setXRSessionLayers or updateRenderState).\r\n     * This method also sets up the session manager's render target texture provider\r\n     * as the first layer in the array, which feeds the WebXR camera(s) attached to the session.\r\n     * @param wrappedLayers An array of WebXRLayerWrapper, usually returned from the WebXRLayers createLayer functions.\r\n     */\r\n    public setXRSessionLayers(wrappedLayers: Array<WebXRLayerWrapper>): void {\r\n        this._existingLayers = wrappedLayers;\r\n        const renderStateInit: XRRenderStateInit = { ...this._xrSessionManager.session.renderState };\r\n        // Clear out the layer-related fields.\r\n        renderStateInit.baseLayer = undefined;\r\n        renderStateInit.layers = wrappedLayers.map((wrappedLayer) => wrappedLayer.layer);\r\n        this._xrSessionManager.updateRenderState(renderStateInit);\r\n        this._xrSessionManager._setBaseLayerWrapper(wrappedLayers.length > 0 ? wrappedLayers[0] : null);\r\n    }\r\n\r\n    public isCompatible(): boolean {\r\n        // TODO (rgerd): Add native support.\r\n        return !this._xrSessionManager.isNative && typeof XRWebGLBinding !== \"undefined\" && !!XRWebGLBinding.prototype.createProjectionLayer;\r\n    }\r\n\r\n    /**\r\n     * Dispose this feature and all of the resources attached.\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n    }\r\n\r\n    protected _onXRFrame(_xrFrame: XRFrame): void {\r\n        /* empty */\r\n    }\r\n}\r\n\r\n//register the plugin\r\nWebXRFeaturesManager.AddWebXRFeature(\r\n    WebXRLayers.Name,\r\n    (xrSessionManager, options) => {\r\n        return () => new WebXRLayers(xrSessionManager, options);\r\n    },\r\n    WebXRLayers.Version,\r\n    false\r\n);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}