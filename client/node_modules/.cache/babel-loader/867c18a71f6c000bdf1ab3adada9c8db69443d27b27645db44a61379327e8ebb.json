{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Observable } from \"./observable.js\";\nimport { runCoroutineAsync, inlineScheduler } from \"./coroutine.js\";\nfunction CreateObservableScheduler(observable) {\n  const coroutines = new Array();\n  const onSteps = new Array();\n  const onErrors = new Array();\n  const observer = observable.add(() => {\n    const count = coroutines.length;\n    for (let i = 0; i < count; i++) {\n      inlineScheduler(coroutines.shift(), onSteps.shift(), onErrors.shift());\n    }\n  });\n  const scheduler = (coroutine, onStep, onError) => {\n    coroutines.push(coroutine);\n    onSteps.push(onStep);\n    onErrors.push(onError);\n  };\n  return {\n    scheduler: scheduler,\n    dispose: () => {\n      observable.remove(observer);\n    }\n  };\n}\nObservable.prototype.runCoroutineAsync = function (coroutine) {\n  if (!this._coroutineScheduler) {\n    const schedulerAndDispose = CreateObservableScheduler(this);\n    this._coroutineScheduler = schedulerAndDispose.scheduler;\n    this._coroutineSchedulerDispose = schedulerAndDispose.dispose;\n  }\n  return runCoroutineAsync(coroutine, this._coroutineScheduler);\n};\nObservable.prototype.cancelAllCoroutines = function () {\n  if (this._coroutineSchedulerDispose) {\n    this._coroutineSchedulerDispose();\n  }\n  this._coroutineScheduler = undefined;\n  this._coroutineSchedulerDispose = undefined;\n};","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,iBAAe;AAE1C,SAASC,iBAAiB,EAAEC,eAAe,QAAQ,gBAAc;AAEjE,SAASC,yBAAyB,CAAIC,UAA2B;EAC7D,MAAMC,UAAU,GAAG,IAAIC,KAAK,EAAqB;EACjD,MAAMC,OAAO,GAAG,IAAID,KAAK,EAA0C;EACnE,MAAME,QAAQ,GAAG,IAAIF,KAAK,EAA4B;EAEtD,MAAMG,QAAQ,GAAGL,UAAU,CAACM,GAAG,CAAC,MAAK;IACjC,MAAMC,KAAK,GAAGN,UAAU,CAACO,MAAM;IAC/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,EAAEE,CAAC,EAAE,EAAE;MAC5BX,eAAe,CAACG,UAAU,CAACS,KAAK,EAAG,EAAEP,OAAO,CAACO,KAAK,EAAG,EAAEN,QAAQ,CAACM,KAAK,EAAG,CAAC;;EAEjF,CAAC,CAAC;EAEF,MAAMC,SAAS,GAAG,CAACC,SAA4B,EAAEC,MAA8C,EAAEC,OAAiC,KAAI;IAClIb,UAAU,CAACc,IAAI,CAACH,SAAS,CAAC;IAC1BT,OAAO,CAACY,IAAI,CAACF,MAAM,CAAC;IACpBT,QAAQ,CAACW,IAAI,CAACD,OAAO,CAAC;EAC1B,CAAC;EAED,OAAO;IACHH,SAAS,EAAEA,SAAS;IACpBK,OAAO,EAAE,MAAK;MACVhB,UAAU,CAACiB,MAAM,CAACZ,QAAQ,CAAC;IAC/B;GACH;AACL;AA6BAT,UAAU,CAACsB,SAAS,CAACrB,iBAAiB,GAAG,UAAUe,SAA+B;EAC9E,IAAI,CAAC,IAAI,CAACO,mBAAmB,EAAE;IAC3B,MAAMC,mBAAmB,GAAGrB,yBAAyB,CAAO,IAAI,CAAC;IACjE,IAAI,CAACoB,mBAAmB,GAAGC,mBAAmB,CAACT,SAAS;IACxD,IAAI,CAACU,0BAA0B,GAAGD,mBAAmB,CAACJ,OAAO;;EAGjE,OAAOnB,iBAAiB,CAACe,SAAS,EAAE,IAAI,CAACO,mBAAmB,CAAC;AACjE,CAAC;AAEDvB,UAAU,CAACsB,SAAS,CAACI,mBAAmB,GAAG;EACvC,IAAI,IAAI,CAACD,0BAA0B,EAAE;IACjC,IAAI,CAACA,0BAA0B,EAAE;;EAErC,IAAI,CAACF,mBAAmB,GAAGI,SAAS;EACpC,IAAI,CAACF,0BAA0B,GAAGE,SAAS;AAC/C,CAAC","names":["Observable","runCoroutineAsync","inlineScheduler","CreateObservableScheduler","observable","coroutines","Array","onSteps","onErrors","observer","add","count","length","i","shift","scheduler","coroutine","onStep","onError","push","dispose","remove","prototype","_coroutineScheduler","schedulerAndDispose","_coroutineSchedulerDispose","cancelAllCoroutines","undefined"],"sourceRoot":"","sources":["../../../../lts/core/generated/Misc/observableCoroutine.ts"],"sourcesContent":["import { Observable } from \"./observable\";\r\nimport type { AsyncCoroutine, CoroutineStep, CoroutineScheduler } from \"./coroutine\";\r\nimport { runCoroutineAsync, inlineScheduler } from \"./coroutine\";\r\n\r\nfunction CreateObservableScheduler<T>(observable: Observable<any>): { scheduler: CoroutineScheduler<T>; dispose: () => void } {\r\n    const coroutines = new Array<AsyncCoroutine<T>>();\r\n    const onSteps = new Array<(stepResult: CoroutineStep<T>) => void>();\r\n    const onErrors = new Array<(stepError: any) => void>();\r\n\r\n    const observer = observable.add(() => {\r\n        const count = coroutines.length;\r\n        for (let i = 0; i < count; i++) {\r\n            inlineScheduler(coroutines.shift()!, onSteps.shift()!, onErrors.shift()!);\r\n        }\r\n    });\r\n\r\n    const scheduler = (coroutine: AsyncCoroutine<T>, onStep: (stepResult: CoroutineStep<T>) => void, onError: (stepError: any) => void) => {\r\n        coroutines.push(coroutine);\r\n        onSteps.push(onStep);\r\n        onErrors.push(onError);\r\n    };\r\n\r\n    return {\r\n        scheduler: scheduler,\r\n        dispose: () => {\r\n            observable.remove(observer);\r\n        },\r\n    };\r\n}\r\n\r\ndeclare module \"./observable\" {\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    export interface Observable<T> {\r\n        /**\r\n         * Internal observable-based coroutine scheduler instance.\r\n         */\r\n        _coroutineScheduler?: CoroutineScheduler<void>;\r\n\r\n        /**\r\n         * Internal disposal method for observable-based coroutine scheduler instance.\r\n         */\r\n        _coroutineSchedulerDispose?: () => void;\r\n\r\n        /**\r\n         * Runs a coroutine asynchronously on this observable\r\n         * @param coroutine the iterator resulting from having started the coroutine\r\n         * @returns a promise which will be resolved when the coroutine finishes or rejected if the coroutine is cancelled\r\n         */\r\n        runCoroutineAsync(coroutine: AsyncCoroutine<void>): Promise<void>;\r\n\r\n        /**\r\n         * Cancels all coroutines currently running on this observable\r\n         */\r\n        cancelAllCoroutines(): void;\r\n    }\r\n}\r\n\r\nObservable.prototype.runCoroutineAsync = function (coroutine: AsyncCoroutine<void>) {\r\n    if (!this._coroutineScheduler) {\r\n        const schedulerAndDispose = CreateObservableScheduler<void>(this);\r\n        this._coroutineScheduler = schedulerAndDispose.scheduler;\r\n        this._coroutineSchedulerDispose = schedulerAndDispose.dispose;\r\n    }\r\n\r\n    return runCoroutineAsync(coroutine, this._coroutineScheduler);\r\n};\r\n\r\nObservable.prototype.cancelAllCoroutines = function () {\r\n    if (this._coroutineSchedulerDispose) {\r\n        this._coroutineSchedulerDispose();\r\n    }\r\n    this._coroutineScheduler = undefined;\r\n    this._coroutineSchedulerDispose = undefined;\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}