{"ast":null,"code":"import { GLTFLoader } from \"../glTFLoader.js\";\nconst NAME = \"KHR_xmp_json_ld\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_xmp_json_ld/README.md)\n * @since 5.0.0\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_xmp_json_ld {\n  /**\n   * @internal\n   */\n  constructor(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n    this.order = 100;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @internal */\n  dispose() {\n    this._loader = null;\n  }\n  /**\n   * Called after the loader state changes to LOADING.\n   */\n  onLoading() {\n    var _a, _b, _c;\n    if (this._loader.rootBabylonMesh === null) {\n      return;\n    }\n    const xmp_gltf = (_a = this._loader.gltf.extensions) === null || _a === void 0 ? void 0 : _a.KHR_xmp_json_ld;\n    const xmp_node = (_c = (_b = this._loader.gltf.asset) === null || _b === void 0 ? void 0 : _b.extensions) === null || _c === void 0 ? void 0 : _c.KHR_xmp_json_ld;\n    if (xmp_gltf && xmp_node) {\n      const packet = +xmp_node.packet;\n      if (xmp_gltf.packets && packet < xmp_gltf.packets.length) {\n        this._loader.rootBabylonMesh.metadata = this._loader.rootBabylonMesh.metadata || {};\n        this._loader.rootBabylonMesh.metadata.xmp = xmp_gltf.packets[packet];\n      }\n    }\n  }\n}\nGLTFLoader.RegisterExtension(NAME, loader => new KHR_xmp_json_ld(loader));","map":{"version":3,"mappings":"AACA,SAASA,UAAU,QAAQ,kBAAgB;AAG3C,MAAMC,IAAI,GAAG,iBAAiB;AAE9B;;;;AAIA;AACA,OAAM,MAAOC,eAAe;EAkBxB;;;EAGAC,YAAYC,MAAkB;IApB9B;;;IAGgB,SAAI,GAAGH,IAAI;IAO3B;;;IAGO,UAAK,GAAG,GAAG;IAQd,IAAI,CAACI,OAAO,GAAGD,MAAM;IACrB,IAAI,CAACE,OAAO,GAAG,IAAI,CAACD,OAAO,CAACE,eAAe,CAACN,IAAI,CAAC;EACrD;EAEA;EACOO,OAAO;IACT,IAAI,CAACH,OAAe,GAAG,IAAI;EAChC;EAEA;;;EAGOI,SAAS;;IACZ,IAAI,IAAI,CAACJ,OAAO,CAACK,eAAe,KAAK,IAAI,EAAE;MACvC;;IAGJ,MAAMC,QAAQ,GAAG,UAAI,CAACN,OAAO,CAACO,IAAI,CAACC,UAAU,0CAAEX,eAAqC;IACpF,MAAMY,QAAQ,GAAG,gBAAI,CAACT,OAAO,CAACO,IAAI,CAACG,KAAK,0CAAEF,UAAU,0CAAEX,eAAqC;IAC3F,IAAIS,QAAQ,IAAIG,QAAQ,EAAE;MACtB,MAAME,MAAM,GAAG,CAACF,QAAQ,CAACE,MAAM;MAC/B,IAAIL,QAAQ,CAACM,OAAO,IAAID,MAAM,GAAGL,QAAQ,CAACM,OAAO,CAACC,MAAM,EAAE;QACtD,IAAI,CAACb,OAAO,CAACK,eAAe,CAACS,QAAQ,GAAG,IAAI,CAACd,OAAO,CAACK,eAAe,CAACS,QAAQ,IAAI,EAAE;QACnF,IAAI,CAACd,OAAO,CAACK,eAAe,CAACS,QAAQ,CAACC,GAAG,GAAGT,QAAQ,CAACM,OAAO,CAACD,MAAM,CAAC;;;EAGhF;;AAGJhB,UAAU,CAACqB,iBAAiB,CAACpB,IAAI,EAAGG,MAAM,IAAK,IAAIF,eAAe,CAACE,MAAM,CAAC,CAAC","names":["GLTFLoader","NAME","KHR_xmp_json_ld","constructor","loader","_loader","enabled","isExtensionUsed","dispose","onLoading","rootBabylonMesh","xmp_gltf","gltf","extensions","xmp_node","asset","packet","packets","length","metadata","xmp","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_xmp_json_ld.ts"],"sourcesContent":["import type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRXmpJsonLd_Gltf, IKHRXmpJsonLd_Node } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_xmp_json_ld\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_xmp_json_ld/README.md)\r\n * @since 5.0.0\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_xmp_json_ld implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 100;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * Called after the loader state changes to LOADING.\r\n     */\r\n    public onLoading(): void {\r\n        if (this._loader.rootBabylonMesh === null) {\r\n            return;\r\n        }\r\n\r\n        const xmp_gltf = this._loader.gltf.extensions?.KHR_xmp_json_ld as IKHRXmpJsonLd_Gltf;\r\n        const xmp_node = this._loader.gltf.asset?.extensions?.KHR_xmp_json_ld as IKHRXmpJsonLd_Node;\r\n        if (xmp_gltf && xmp_node) {\r\n            const packet = +xmp_node.packet;\r\n            if (xmp_gltf.packets && packet < xmp_gltf.packets.length) {\r\n                this._loader.rootBabylonMesh.metadata = this._loader.rootBabylonMesh.metadata || {};\r\n                this._loader.rootBabylonMesh.metadata.xmp = xmp_gltf.packets[packet];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_xmp_json_ld(loader));\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}