{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * Configuration needed for prepass-capable materials\n */\nexport class PrePassConfiguration {\n  constructor() {\n    /**\n     * Previous world matrices of meshes carrying this material\n     * Used for computing velocity\n     */\n    this.previousWorldMatrices = {};\n    /**\n     * Previous bones of meshes carrying this material\n     * Used for computing velocity\n     */\n    this.previousBones = {};\n  }\n  /**\n   * Add the required uniforms to the current list.\n   * @param uniforms defines the current uniform list.\n   */\n  static AddUniforms(uniforms) {\n    uniforms.push(\"previousWorld\", \"previousViewProjection\", \"mPreviousBones\");\n  }\n  /**\n   * Add the required samplers to the current list.\n   * @param samplers defines the current sampler list.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static AddSamplers(samplers) {\n    // pass\n  }\n  /**\n   * Binds the material data.\n   * @param effect defines the effect to update\n   * @param scene defines the scene the material belongs to.\n   * @param mesh The mesh\n   * @param world World matrix of this mesh\n   * @param isFrozen Is the material frozen\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  bindForSubMesh(effect, scene, mesh, world, isFrozen) {\n    if (scene.prePassRenderer && scene.prePassRenderer.enabled && scene.prePassRenderer.currentRTisSceneRT) {\n      if (scene.prePassRenderer.getIndex(2) !== -1) {\n        if (!this.previousWorldMatrices[mesh.uniqueId]) {\n          this.previousWorldMatrices[mesh.uniqueId] = world.clone();\n        }\n        if (!this.previousViewProjection) {\n          this.previousViewProjection = scene.getTransformMatrix().clone();\n          this.currentViewProjection = scene.getTransformMatrix().clone();\n        }\n        const engine = scene.getEngine();\n        if (this.currentViewProjection.updateFlag !== scene.getTransformMatrix().updateFlag) {\n          // First update of the prepass configuration for this rendering pass\n          this._lastUpdateFrameId = engine.frameId;\n          this.previousViewProjection.copyFrom(this.currentViewProjection);\n          this.currentViewProjection.copyFrom(scene.getTransformMatrix());\n        } else if (this._lastUpdateFrameId !== engine.frameId) {\n          // The scene transformation did not change from the previous frame (so no camera motion), we must update previousViewProjection accordingly\n          this._lastUpdateFrameId = engine.frameId;\n          this.previousViewProjection.copyFrom(this.currentViewProjection);\n        }\n        effect.setMatrix(\"previousWorld\", this.previousWorldMatrices[mesh.uniqueId]);\n        effect.setMatrix(\"previousViewProjection\", this.previousViewProjection);\n        this.previousWorldMatrices[mesh.uniqueId] = world.clone();\n      }\n    }\n  }\n}","map":{"version":3,"mappings":";AAMA;;;AAGA,OAAM,MAAOA,oBAAoB;EAAjCC;IACI;;;;IAIO,0BAAqB,GAAgC,EAAE;IAW9D;;;;IAIO,kBAAa,GAAsC,EAAE;EA8DhE;EA1DI;;;;EAIO,OAAOC,WAAW,CAACC,QAAkB;IACxCA,QAAQ,CAACC,IAAI,CAAC,eAAe,EAAE,wBAAwB,EAAE,gBAAgB,CAAC;EAC9E;EAEA;;;;EAIA;EACO,OAAOC,WAAW,CAACC,QAAkB;IACxC;EAAA;EAGJ;;;;;;;;EAQA;EACOC,cAAc,CAACC,MAAc,EAAEC,KAAY,EAAEC,IAAU,EAAEC,KAAa,EAAEC,QAAiB;IAC5F,IAAIH,KAAK,CAACI,eAAe,IAAIJ,KAAK,CAACI,eAAe,CAACC,OAAO,IAAIL,KAAK,CAACI,eAAe,CAACE,kBAAkB,EAAE;MACpG,IAAIN,KAAK,CAACI,eAAe,CAACG,QAAQ,CAAC,SAAS,EAAC;QACzC,IAAI,CAAC,IAAI,CAACC,qBAAqB,CAACP,IAAI,CAACQ,QAAQ,CAAC,EAAE;UAC5C,IAAI,CAACD,qBAAqB,CAACP,IAAI,CAACQ,QAAQ,CAAC,GAAGP,KAAK,CAACQ,KAAK,EAAE;;QAG7D,IAAI,CAAC,IAAI,CAACC,sBAAsB,EAAE;UAC9B,IAAI,CAACA,sBAAsB,GAAGX,KAAK,CAACY,kBAAkB,EAAE,CAACF,KAAK,EAAE;UAChE,IAAI,CAACG,qBAAqB,GAAGb,KAAK,CAACY,kBAAkB,EAAE,CAACF,KAAK,EAAE;;QAGnE,MAAMI,MAAM,GAAGd,KAAK,CAACe,SAAS,EAAE;QAEhC,IAAI,IAAI,CAACF,qBAAqB,CAACG,UAAU,KAAKhB,KAAK,CAACY,kBAAkB,EAAE,CAACI,UAAU,EAAE;UACjF;UACA,IAAI,CAACC,kBAAkB,GAAGH,MAAM,CAACI,OAAO;UACxC,IAAI,CAACP,sBAAsB,CAACQ,QAAQ,CAAC,IAAI,CAACN,qBAAqB,CAAC;UAChE,IAAI,CAACA,qBAAqB,CAACM,QAAQ,CAACnB,KAAK,CAACY,kBAAkB,EAAE,CAAC;SAClE,MAAM,IAAI,IAAI,CAACK,kBAAkB,KAAKH,MAAM,CAACI,OAAO,EAAE;UACnD;UACA,IAAI,CAACD,kBAAkB,GAAGH,MAAM,CAACI,OAAO;UACxC,IAAI,CAACP,sBAAsB,CAACQ,QAAQ,CAAC,IAAI,CAACN,qBAAqB,CAAC;;QAGpEd,MAAM,CAACqB,SAAS,CAAC,eAAe,EAAE,IAAI,CAACZ,qBAAqB,CAACP,IAAI,CAACQ,QAAQ,CAAC,CAAC;QAC5EV,MAAM,CAACqB,SAAS,CAAC,wBAAwB,EAAE,IAAI,CAACT,sBAAsB,CAAC;QAEvE,IAAI,CAACH,qBAAqB,CAACP,IAAI,CAACQ,QAAQ,CAAC,GAAGP,KAAK,CAACQ,KAAK,EAAE;;;EAGrE","names":["PrePassConfiguration","constructor","AddUniforms","uniforms","push","AddSamplers","samplers","bindForSubMesh","effect","scene","mesh","world","isFrozen","prePassRenderer","enabled","currentRTisSceneRT","getIndex","previousWorldMatrices","uniqueId","clone","previousViewProjection","getTransformMatrix","currentViewProjection","engine","getEngine","updateFlag","_lastUpdateFrameId","frameId","copyFrom","setMatrix"],"sourceRoot":"","sources":["../../../../lts/core/generated/Materials/prePassConfiguration.ts"],"sourcesContent":["import type { Matrix } from \"../Maths/math.vector\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * Configuration needed for prepass-capable materials\r\n */\r\nexport class PrePassConfiguration {\r\n    /**\r\n     * Previous world matrices of meshes carrying this material\r\n     * Used for computing velocity\r\n     */\r\n    public previousWorldMatrices: { [index: number]: Matrix } = {};\r\n    /**\r\n     * Previous view project matrix\r\n     * Used for computing velocity\r\n     */\r\n    public previousViewProjection: Matrix;\r\n    /**\r\n     * Current view projection matrix\r\n     * Used for computing velocity\r\n     */\r\n    public currentViewProjection: Matrix;\r\n    /**\r\n     * Previous bones of meshes carrying this material\r\n     * Used for computing velocity\r\n     */\r\n    public previousBones: { [index: number]: Float32Array } = {};\r\n\r\n    private _lastUpdateFrameId: number;\r\n\r\n    /**\r\n     * Add the required uniforms to the current list.\r\n     * @param uniforms defines the current uniform list.\r\n     */\r\n    public static AddUniforms(uniforms: string[]): void {\r\n        uniforms.push(\"previousWorld\", \"previousViewProjection\", \"mPreviousBones\");\r\n    }\r\n\r\n    /**\r\n     * Add the required samplers to the current list.\r\n     * @param samplers defines the current sampler list.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static AddSamplers(samplers: string[]): void {\r\n        // pass\r\n    }\r\n\r\n    /**\r\n     * Binds the material data.\r\n     * @param effect defines the effect to update\r\n     * @param scene defines the scene the material belongs to.\r\n     * @param mesh The mesh\r\n     * @param world World matrix of this mesh\r\n     * @param isFrozen Is the material frozen\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public bindForSubMesh(effect: Effect, scene: Scene, mesh: Mesh, world: Matrix, isFrozen: boolean): void {\r\n        if (scene.prePassRenderer && scene.prePassRenderer.enabled && scene.prePassRenderer.currentRTisSceneRT) {\r\n            if (scene.prePassRenderer.getIndex(Constants.PREPASS_VELOCITY_TEXTURE_TYPE) !== -1) {\r\n                if (!this.previousWorldMatrices[mesh.uniqueId]) {\r\n                    this.previousWorldMatrices[mesh.uniqueId] = world.clone();\r\n                }\r\n\r\n                if (!this.previousViewProjection) {\r\n                    this.previousViewProjection = scene.getTransformMatrix().clone();\r\n                    this.currentViewProjection = scene.getTransformMatrix().clone();\r\n                }\r\n\r\n                const engine = scene.getEngine();\r\n\r\n                if (this.currentViewProjection.updateFlag !== scene.getTransformMatrix().updateFlag) {\r\n                    // First update of the prepass configuration for this rendering pass\r\n                    this._lastUpdateFrameId = engine.frameId;\r\n                    this.previousViewProjection.copyFrom(this.currentViewProjection);\r\n                    this.currentViewProjection.copyFrom(scene.getTransformMatrix());\r\n                } else if (this._lastUpdateFrameId !== engine.frameId) {\r\n                    // The scene transformation did not change from the previous frame (so no camera motion), we must update previousViewProjection accordingly\r\n                    this._lastUpdateFrameId = engine.frameId;\r\n                    this.previousViewProjection.copyFrom(this.currentViewProjection);\r\n                }\r\n\r\n                effect.setMatrix(\"previousWorld\", this.previousWorldMatrices[mesh.uniqueId]);\r\n                effect.setMatrix(\"previousViewProjection\", this.previousViewProjection);\r\n\r\n                this.previousWorldMatrices[mesh.uniqueId] = world.clone();\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}