{"ast":null,"code":"import { RenderTargetTexture } from \"../Textures/renderTargetTexture.js\";\n\n/**\n * Renders to multiple views with a single draw call\n * @see https://www.khronos.org/registry/webgl/extensions/OVR_multiview2/\n */\nexport class MultiviewRenderTarget extends RenderTargetTexture {\n  set samples(value) {\n    // We override this setter because multisampling is handled by framebufferTextureMultisampleMultiviewOVR\n    this._samples = value;\n  }\n  get samples() {\n    return this._samples;\n  }\n  /**\n   * Creates a multiview render target\n   * @param scene scene used with the render target\n   * @param size the size of the render target (used for each view)\n   */\n  constructor(scene, size = 512) {\n    super(\"multiview rtt\", size, scene, false, true, 0, false, undefined, false, false, true, undefined, true);\n    this._renderTarget = this.getScene().getEngine().createMultiviewRenderTargetTexture(this.getRenderWidth(), this.getRenderHeight());\n    this._texture = this._renderTarget.texture;\n    this._texture.isMultiview = true;\n    this._texture.format = 5;\n    this.samples = this._getEngine().getCaps().maxSamples || this.samples;\n    this._texture.samples = this._samples;\n  }\n  /**\n   * @internal\n   */\n  _bindFrameBuffer() {\n    if (!this._renderTarget) {\n      return;\n    }\n    this.getScene().getEngine().bindMultiviewFramebuffer(this._renderTarget);\n  }\n  /**\n   * Gets the number of views the corresponding to the texture (eg. a MultiviewRenderTarget will have > 1)\n   * @returns the view count\n   */\n  getViewCount() {\n    return 2;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,mBAAmB,QAAQ,oCAAkC;;AAItE;;;;AAIA,OAAM,MAAOC,qBAAsB,SAAQD,mBAAmB;EAC1D,IAAWE,OAAO,CAACC,KAAa;IAC5B;IACA,IAAI,CAACC,QAAQ,GAAGD,KAAK;EACzB;EAEA,IAAWD,OAAO;IACd,OAAO,IAAI,CAACE,QAAQ;EACxB;EAEA;;;;;EAKAC,YAAYC,KAAa,EAAEC,OAAuE,GAAG;IACjG,KAAK,CAAC,eAAe,EAAEA,IAAI,EAAED,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,UAAUE,yBAAwB,IAAE,EAAKA,SAAE,EAAS,IAAE;IACvG,IAAI,CAACC,aAAa,GAAG,IAAI,CAACC,QAAQ,EAAG,CAACC,SAAS,EAAE,CAACC,kCAAkC,CAAC,IAAI,CAACC,cAAc,EAAE,EAAE,IAAI,CAACC,eAAe,EAAE,CAAC;IACnI,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACN,aAAa,CAACO,OAAQ;IAC3C,IAAI,CAACD,QAAQ,CAACE,WAAW,GAAG,IAAI;IAChC,IAAI,CAACF,QAAQ,CAACG,MAAM,GAAG;IACvB,IAAI,CAAChB,OAAO,GAAG,IAAI,CAACiB,UAAU,EAAG,CAACC,OAAO,EAAE,CAACC,UAAU,IAAI,IAAI,CAACnB,OAAO;IACtE,IAAI,CAACa,QAAQ,CAACb,OAAO,GAAG,IAAI,CAACE,QAAQ;EACzC;EAEA;;;EAGOkB,gBAAgB;IACnB,IAAI,CAAC,IAAI,CAACb,aAAa,EAAE;MACrB;;IAEJ,IAAI,CAACC,QAAQ,EAAG,CAACC,SAAS,EAAE,CAACY,wBAAwB,CAAC,IAAI,CAACd,aAAa,CAAC;EAC7E;EAEA;;;;EAIOe,YAAY;IACf,OAAO,CAAC;EACZ","names":["RenderTargetTexture","MultiviewRenderTarget","samples","value","_samples","constructor","scene","size","undefined","_renderTarget","getScene","getEngine","createMultiviewRenderTargetTexture","getRenderWidth","getRenderHeight","_texture","texture","isMultiview","format","_getEngine","getCaps","maxSamples","_bindFrameBuffer","bindMultiviewFramebuffer","getViewCount"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/Textures/MultiviewRenderTarget.ts"],"sourcesContent":["import { RenderTargetTexture } from \"../Textures/renderTargetTexture\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Constants } from \"../../Engines/constants\";\r\n\r\n/**\r\n * Renders to multiple views with a single draw call\r\n * @see https://www.khronos.org/registry/webgl/extensions/OVR_multiview2/\r\n */\r\nexport class MultiviewRenderTarget extends RenderTargetTexture {\r\n    public set samples(value: number) {\r\n        // We override this setter because multisampling is handled by framebufferTextureMultisampleMultiviewOVR\r\n        this._samples = value;\r\n    }\r\n\r\n    public get samples(): number {\r\n        return this._samples;\r\n    }\r\n\r\n    /**\r\n     * Creates a multiview render target\r\n     * @param scene scene used with the render target\r\n     * @param size the size of the render target (used for each view)\r\n     */\r\n    constructor(scene?: Scene, size: number | { width: number; height: number } | { ratio: number } = 512) {\r\n        super(\"multiview rtt\", size, scene, false, true, Constants.TEXTURETYPE_UNSIGNED_INT, false, undefined, false, false, true, undefined, true);\r\n        this._renderTarget = this.getScene()!.getEngine().createMultiviewRenderTargetTexture(this.getRenderWidth(), this.getRenderHeight());\r\n        this._texture = this._renderTarget.texture!;\r\n        this._texture.isMultiview = true;\r\n        this._texture.format = Constants.TEXTUREFORMAT_RGBA;\r\n        this.samples = this._getEngine()!.getCaps().maxSamples || this.samples;\r\n        this._texture.samples = this._samples;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _bindFrameBuffer() {\r\n        if (!this._renderTarget) {\r\n            return;\r\n        }\r\n        this.getScene()!.getEngine().bindMultiviewFramebuffer(this._renderTarget);\r\n    }\r\n\r\n    /**\r\n     * Gets the number of views the corresponding to the texture (eg. a MultiviewRenderTarget will have > 1)\r\n     * @returns the view count\r\n     */\r\n    public getViewCount() {\r\n        return 2;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}