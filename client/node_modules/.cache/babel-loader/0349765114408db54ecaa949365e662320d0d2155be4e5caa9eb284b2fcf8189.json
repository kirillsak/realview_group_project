{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nconst NAME = \"KHR_materials_volume\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_volume/README.md)\n * @since 5.0.0\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_materials_volume {\n  /**\n   * @internal\n   */\n  constructor(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n    this.order = 173;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n    if (this.enabled) {\n      // We need to disable instance usage because the attenuation factor depends on the node scale of each individual mesh\n      this._loader._disableInstancedMesh++;\n    }\n  }\n  /** @internal */\n  dispose() {\n    if (this.enabled) {\n      this._loader._disableInstancedMesh--;\n    }\n    this._loader = null;\n  }\n  /**\n   * @internal\n   */\n  loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, (extensionContext, extension) => {\n      const promises = new Array();\n      promises.push(this._loader.loadMaterialBasePropertiesAsync(context, material, babylonMaterial));\n      promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n      promises.push(this._loadVolumePropertiesAsync(extensionContext, material, babylonMaterial, extension));\n      return Promise.all(promises).then(() => {});\n    });\n  }\n  _loadVolumePropertiesAsync(context, material, babylonMaterial, extension) {\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(`${context}: Material type not supported`);\n    }\n    // If transparency isn't enabled already, this extension shouldn't do anything.\n    // i.e. it requires either the KHR_materials_transmission or KHR_materials_translucency extensions.\n    if (!babylonMaterial.subSurface.isRefractionEnabled && !babylonMaterial.subSurface.isTranslucencyEnabled || !extension.thicknessFactor) {\n      return Promise.resolve();\n    }\n    // IOR in this extension only affects interior.\n    babylonMaterial.subSurface.volumeIndexOfRefraction = babylonMaterial.indexOfRefraction;\n    const attenuationDistance = extension.attenuationDistance !== undefined ? extension.attenuationDistance : Number.MAX_VALUE;\n    babylonMaterial.subSurface.tintColorAtDistance = attenuationDistance;\n    if (extension.attenuationColor !== undefined && extension.attenuationColor.length == 3) {\n      babylonMaterial.subSurface.tintColor.copyFromFloats(extension.attenuationColor[0], extension.attenuationColor[1], extension.attenuationColor[2]);\n    }\n    babylonMaterial.subSurface.minimumThickness = 0.0;\n    babylonMaterial.subSurface.maximumThickness = extension.thicknessFactor;\n    babylonMaterial.subSurface.useThicknessAsDepth = true;\n    if (extension.thicknessTexture) {\n      extension.thicknessTexture.nonColorData = true;\n      return this._loader.loadTextureInfoAsync(`${context}/thicknessTexture`, extension.thicknessTexture).then(texture => {\n        babylonMaterial.subSurface.thicknessTexture = texture;\n        babylonMaterial.subSurface.useGltfStyleTextures = true;\n      });\n    } else {\n      return Promise.resolve();\n    }\n  }\n}\nGLTFLoader.RegisterExtension(NAME, loader => new KHR_materials_volume(loader));","map":{"version":3,"mappings":"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","names":["PBRMaterial","GLTFLoader","NAME","KHR_materials_volume","constructor","loader","_loader","enabled","isExtensionUsed","_disableInstancedMesh","dispose","loadMaterialPropertiesAsync","context","material","babylonMaterial","LoadExtensionAsync","name","extensionContext","extension","promises","Array","push","loadMaterialBasePropertiesAsync","_loadVolumePropertiesAsync","Promise","all","then","Error","subSurface","isRefractionEnabled","isTranslucencyEnabled","thicknessFactor","resolve","volumeIndexOfRefraction","indexOfRefraction","attenuationDistance","undefined","Number","MAX_VALUE","tintColorAtDistance","attenuationColor","length","tintColor","copyFromFloats","minimumThickness","maximumThickness","useThicknessAsDepth","thicknessTexture","nonColorData","loadTextureInfoAsync","texture","useGltfStyleTextures","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_materials_volume.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsVolume } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_materials_volume\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_volume/README.md)\r\n * @since 5.0.0\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_volume implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 173;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n        if (this.enabled) {\r\n            // We need to disable instance usage because the attenuation factor depends on the node scale of each individual mesh\r\n            this._loader._disableInstancedMesh++;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        if (this.enabled) {\r\n            this._loader._disableInstancedMesh--;\r\n        }\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsVolume>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialBasePropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadVolumePropertiesAsync(extensionContext, material, babylonMaterial, extension));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadVolumePropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material, extension: IKHRMaterialsVolume): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        // If transparency isn't enabled already, this extension shouldn't do anything.\r\n        // i.e. it requires either the KHR_materials_transmission or KHR_materials_translucency extensions.\r\n        if ((!babylonMaterial.subSurface.isRefractionEnabled && !babylonMaterial.subSurface.isTranslucencyEnabled) || !extension.thicknessFactor) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        // IOR in this extension only affects interior.\r\n        babylonMaterial.subSurface.volumeIndexOfRefraction = babylonMaterial.indexOfRefraction;\r\n        const attenuationDistance = extension.attenuationDistance !== undefined ? extension.attenuationDistance : Number.MAX_VALUE;\r\n        babylonMaterial.subSurface.tintColorAtDistance = attenuationDistance;\r\n        if (extension.attenuationColor !== undefined && extension.attenuationColor.length == 3) {\r\n            babylonMaterial.subSurface.tintColor.copyFromFloats(extension.attenuationColor[0], extension.attenuationColor[1], extension.attenuationColor[2]);\r\n        }\r\n\r\n        babylonMaterial.subSurface.minimumThickness = 0.0;\r\n        babylonMaterial.subSurface.maximumThickness = extension.thicknessFactor;\r\n        babylonMaterial.subSurface.useThicknessAsDepth = true;\r\n        if (extension.thicknessTexture) {\r\n            (extension.thicknessTexture as ITextureInfo).nonColorData = true;\r\n            return this._loader.loadTextureInfoAsync(`${context}/thicknessTexture`, extension.thicknessTexture).then((texture: BaseTexture) => {\r\n                babylonMaterial.subSurface.thicknessTexture = texture;\r\n                babylonMaterial.subSurface.useGltfStyleTextures = true;\r\n            });\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_volume(loader));\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}