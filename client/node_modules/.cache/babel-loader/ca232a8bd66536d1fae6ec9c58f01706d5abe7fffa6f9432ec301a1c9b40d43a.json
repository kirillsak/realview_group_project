{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/grain.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The GrainPostProcess adds noise to the image at mid luminance levels\n */\nexport class GrainPostProcess extends PostProcess {\n  /**\n   * Creates a new instance of @see GrainPostProcess\n   * @param name The name of the effect.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType Type of textures used when performing the post process. (default: 0)\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n   */\n  constructor(name, options, camera, samplingMode, engine, reusable, textureType = 0, blockCompilation = false) {\n    super(name, \"grain\", [\"intensity\", \"animatedSeed\"], [], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\n    /**\n     * The intensity of the grain added (default: 30)\n     */\n    this.intensity = 30;\n    /**\n     * If the grain should be randomized on every frame\n     */\n    this.animated = false;\n    this.onApplyObservable.add(effect => {\n      effect.setFloat(\"intensity\", this.intensity);\n      effect.setFloat(\"animatedSeed\", this.animated ? Math.random() + 1 : 1);\n    });\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"GrainPostProcess\" string\n   */\n  getClassName() {\n    return \"GrainPostProcess\";\n  }\n  /**\n   * @internal\n   */\n  static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(() => {\n      return new GrainPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  }\n}\n__decorate([serialize()], GrainPostProcess.prototype, \"intensity\", void 0);\n__decorate([serialize()], GrainPostProcess.prototype, \"animated\", void 0);\nRegisterClass(\"BABYLON.GrainPostProcess\", GrainPostProcess);","map":{"version":3,"mappings":";AAIA,SAASA,WAAW,QAAQ,kBAAgB;AAI5C,OAAO,8BAA4B;AACnC,SAASC,aAAa,QAAQ,sBAAoB;AAClD,SAASC,SAAS,EAAEC,mBAAmB,QAAQ,uBAAqB;AAIpE;;;AAGA,OAAM,MAAOC,gBAAiB,SAAQJ,WAAW;EAoB7C;;;;;;;;;;;EAWAK,YACIC,IAAY,EACZC,OAAoC,EACpCC,MAAwB,EACxBC,YAAqB,EACrBC,MAAe,EACfC,QAAkB,EAClBC,cAAsB,mBAAU;IAGhC,KAAK,CAACN,IAAI,EAAE,OAAO,EAAE,CAAC,WAAW,EAAE,cAAc,CAAC,EAAE,EAAE,EAAEC,OAAO,EAAEC,MAAM,EAAEC,YAAY,EAAEC,MAAM,EAAEC,QAAQ,EAAE,IAAI,EAAEC,WAAW,EAAEC,SAAS,EAAE,IAAI,EAAEC,gBAAgB,CAAC;IAxClK;;;IAIO,cAAS,GAAW,EAAE;IAC7B;;;IAIO,aAAQ,GAAY,KAAK;IAgC5B,IAAI,CAACC,iBAAiB,CAACC,GAAG,CAAEC,MAAc,IAAI;MAC1CA,MAAM,CAACC,QAAQ,CAAC,WAAW,EAAE,IAAI,CAACC,SAAS,CAAC;MAC5CF,MAAM,CAACC,QAAQ,CAAC,cAAc,EAAE,IAAI,CAACE,QAAQ,GAAGC,IAAI,CAACC,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;IAC1E,CAAC,CAAC;EACN;EAlCA;;;;EAIOC,YAAY;IACf,OAAO,kBAAkB;EAC7B;EA8BA;;;EAGO,OAAOC,MAAM,CAACC,iBAAsB,EAAEC,YAAoB,EAAEC,KAAY,EAAEC,OAAe;IAC5F,OAAOzB,mBAAmB,CAAC0B,KAAK,CAC5B,MAAK;MACD,OAAO,IAAIzB,gBAAgB,CACvBqB,iBAAiB,CAACnB,IAAI,EACtBmB,iBAAiB,CAAClB,OAAO,EACzBmB,YAAY,EACZD,iBAAiB,CAACK,wBAAwB,EAC1CH,KAAK,CAACI,SAAS,EAAE,EACjBN,iBAAiB,CAACd,QAAQ,CAC7B;IACL,CAAC,EACDc,iBAAiB,EACjBE,KAAK,EACLC,OAAO,CACV;EACL;;AA9DAI,YADC9B,SAAS,EAAE,mDACkB;AAK9B8B,YADC9B,SAAS,EAAE,kDACqB;AA4DrCD,aAAa,CAAC,0BAA0B,EAAEG,gBAAgB,CAAC","names":["PostProcess","RegisterClass","serialize","SerializationHelper","GrainPostProcess","constructor","name","options","camera","samplingMode","engine","reusable","textureType","undefined","blockCompilation","onApplyObservable","add","effect","setFloat","intensity","animated","Math","random","getClassName","_Parse","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","getEngine","__decorate"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/grainPostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/grain.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize, SerializationHelper } from \"../Misc/decorators\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The GrainPostProcess adds noise to the image at mid luminance levels\r\n */\r\nexport class GrainPostProcess extends PostProcess {\r\n    /**\r\n     * The intensity of the grain added (default: 30)\r\n     */\r\n    @serialize()\r\n    public intensity: number = 30;\r\n    /**\r\n     * If the grain should be randomized on every frame\r\n     */\r\n    @serialize()\r\n    public animated: boolean = false;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"GrainPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"GrainPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of @see GrainPostProcess\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(name, \"grain\", [\"intensity\", \"animatedSeed\"], [], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setFloat(\"intensity\", this.intensity);\r\n            effect.setFloat(\"animatedSeed\", this.animated ? Math.random() + 1 : 1);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new GrainPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GrainPostProcess\", GrainPostProcess);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}