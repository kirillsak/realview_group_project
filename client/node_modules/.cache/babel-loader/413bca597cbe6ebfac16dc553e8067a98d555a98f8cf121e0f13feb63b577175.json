{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { ArcRotateCamera } from \"../Cameras/arcRotateCamera.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3, Color4 } from \"../Maths/math.color.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { BaseTexture } from \"../Materials/Textures/baseTexture.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { MirrorTexture } from \"../Materials/Textures/mirrorTexture.js\";\nimport { CubeTexture } from \"../Materials/Textures/cubeTexture.js\";\nimport { BackgroundMaterial } from \"../Materials/Background/backgroundMaterial.js\";\nimport { CreatePlane } from \"../Meshes/Builders/planeBuilder.js\";\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder.js\";\nimport { Plane } from \"../Maths/math.plane.js\";\n/**\n * The Environment helper class can be used to add a fully featured none expensive background to your scene.\n * It includes by default a skybox and a ground relying on the BackgroundMaterial.\n * It also helps with the default setup of your imageProcessing configuration.\n */\nexport class EnvironmentHelper {\n  /**\n   * constructor\n   * @param options Defines the options we want to customize the helper\n   * @param scene The scene to add the material to\n   */\n  constructor(options, scene) {\n    this._errorHandler = (message, exception) => {\n      this.onErrorObservable.notifyObservers({\n        message: message,\n        exception: exception\n      });\n    };\n    this._options = {\n      ...EnvironmentHelper._GetDefaultOptions(),\n      ...options\n    };\n    this._scene = scene;\n    this.onErrorObservable = new Observable();\n    this._setupBackground();\n    this._setupImageProcessing();\n  }\n  /**\n   * Creates the default options for the helper.\n   */\n  static _GetDefaultOptions() {\n    return {\n      createGround: true,\n      groundSize: 15,\n      groundTexture: this._GroundTextureCDNUrl,\n      groundColor: new Color3(0.2, 0.2, 0.3).toLinearSpace().scale(3),\n      groundOpacity: 0.9,\n      enableGroundShadow: true,\n      groundShadowLevel: 0.5,\n      enableGroundMirror: false,\n      groundMirrorSizeRatio: 0.3,\n      groundMirrorBlurKernel: 64,\n      groundMirrorAmount: 1,\n      groundMirrorFresnelWeight: 1,\n      groundMirrorFallOffDistance: 0,\n      groundMirrorTextureType: 0,\n      groundYBias: 0.00001,\n      createSkybox: true,\n      skyboxSize: 20,\n      skyboxTexture: this._SkyboxTextureCDNUrl,\n      skyboxColor: new Color3(0.2, 0.2, 0.3).toLinearSpace().scale(3),\n      backgroundYRotation: 0,\n      sizeAuto: true,\n      rootPosition: Vector3.Zero(),\n      setupImageProcessing: true,\n      environmentTexture: this._EnvironmentTextureCDNUrl,\n      cameraExposure: 0.8,\n      cameraContrast: 1.2,\n      toneMappingEnabled: true\n    };\n  }\n  /**\n   * Gets the root mesh created by the helper.\n   */\n  get rootMesh() {\n    return this._rootMesh;\n  }\n  /**\n   * Gets the skybox created by the helper.\n   */\n  get skybox() {\n    return this._skybox;\n  }\n  /**\n   * Gets the skybox texture created by the helper.\n   */\n  get skyboxTexture() {\n    return this._skyboxTexture;\n  }\n  /**\n   * Gets the skybox material created by the helper.\n   */\n  get skyboxMaterial() {\n    return this._skyboxMaterial;\n  }\n  /**\n   * Gets the ground mesh created by the helper.\n   */\n  get ground() {\n    return this._ground;\n  }\n  /**\n   * Gets the ground texture created by the helper.\n   */\n  get groundTexture() {\n    return this._groundTexture;\n  }\n  /**\n   * Gets the ground mirror created by the helper.\n   */\n  get groundMirror() {\n    return this._groundMirror;\n  }\n  /**\n   * Gets the ground mirror render list to helps pushing the meshes\n   * you wish in the ground reflection.\n   */\n  get groundMirrorRenderList() {\n    if (this._groundMirror) {\n      return this._groundMirror.renderList;\n    }\n    return null;\n  }\n  /**\n   * Gets the ground material created by the helper.\n   */\n  get groundMaterial() {\n    return this._groundMaterial;\n  }\n  /**\n   * Updates the background according to the new options\n   * @param options\n   */\n  updateOptions(options) {\n    const newOptions = {\n      ...this._options,\n      ...options\n    };\n    if (this._ground && !newOptions.createGround) {\n      this._ground.dispose();\n      this._ground = null;\n    }\n    if (this._groundMaterial && !newOptions.createGround) {\n      this._groundMaterial.dispose();\n      this._groundMaterial = null;\n    }\n    if (this._groundTexture) {\n      if (this._options.groundTexture != newOptions.groundTexture) {\n        this._groundTexture.dispose();\n        this._groundTexture = null;\n      }\n    }\n    if (this._skybox && !newOptions.createSkybox) {\n      this._skybox.dispose();\n      this._skybox = null;\n    }\n    if (this._skyboxMaterial && !newOptions.createSkybox) {\n      this._skyboxMaterial.dispose();\n      this._skyboxMaterial = null;\n    }\n    if (this._skyboxTexture) {\n      if (this._options.skyboxTexture != newOptions.skyboxTexture) {\n        this._skyboxTexture.dispose();\n        this._skyboxTexture = null;\n      }\n    }\n    if (this._groundMirror && !newOptions.enableGroundMirror) {\n      this._groundMirror.dispose();\n      this._groundMirror = null;\n    }\n    if (this._scene.environmentTexture) {\n      if (this._options.environmentTexture != newOptions.environmentTexture) {\n        this._scene.environmentTexture.dispose();\n      }\n    }\n    this._options = newOptions;\n    this._setupBackground();\n    this._setupImageProcessing();\n  }\n  /**\n   * Sets the primary color of all the available elements.\n   * @param color the main color to affect to the ground and the background\n   */\n  setMainColor(color) {\n    if (this.groundMaterial) {\n      this.groundMaterial.primaryColor = color;\n    }\n    if (this.skyboxMaterial) {\n      this.skyboxMaterial.primaryColor = color;\n    }\n    if (this.groundMirror) {\n      this.groundMirror.clearColor = new Color4(color.r, color.g, color.b, 1.0);\n    }\n  }\n  /**\n   * Setup the image processing according to the specified options.\n   */\n  _setupImageProcessing() {\n    if (this._options.setupImageProcessing) {\n      this._scene.imageProcessingConfiguration.contrast = this._options.cameraContrast;\n      this._scene.imageProcessingConfiguration.exposure = this._options.cameraExposure;\n      this._scene.imageProcessingConfiguration.toneMappingEnabled = this._options.toneMappingEnabled;\n      this._setupEnvironmentTexture();\n    }\n  }\n  /**\n   * Setup the environment texture according to the specified options.\n   */\n  _setupEnvironmentTexture() {\n    if (this._scene.environmentTexture) {\n      return;\n    }\n    if (this._options.environmentTexture instanceof BaseTexture) {\n      this._scene.environmentTexture = this._options.environmentTexture;\n      return;\n    }\n    const environmentTexture = CubeTexture.CreateFromPrefilteredData(this._options.environmentTexture, this._scene);\n    this._scene.environmentTexture = environmentTexture;\n  }\n  /**\n   * Setup the background according to the specified options.\n   */\n  _setupBackground() {\n    if (!this._rootMesh) {\n      this._rootMesh = new Mesh(\"BackgroundHelper\", this._scene);\n    }\n    this._rootMesh.rotation.y = this._options.backgroundYRotation;\n    const sceneSize = this._getSceneSize();\n    if (this._options.createGround) {\n      this._setupGround(sceneSize);\n      this._setupGroundMaterial();\n      this._setupGroundDiffuseTexture();\n      if (this._options.enableGroundMirror) {\n        this._setupGroundMirrorTexture(sceneSize);\n      }\n      this._setupMirrorInGroundMaterial();\n    }\n    if (this._options.createSkybox) {\n      this._setupSkybox(sceneSize);\n      this._setupSkyboxMaterial();\n      this._setupSkyboxReflectionTexture();\n    }\n    this._rootMesh.position.x = sceneSize.rootPosition.x;\n    this._rootMesh.position.z = sceneSize.rootPosition.z;\n    this._rootMesh.position.y = sceneSize.rootPosition.y;\n  }\n  /**\n   * Get the scene sizes according to the setup.\n   */\n  _getSceneSize() {\n    let groundSize = this._options.groundSize;\n    let skyboxSize = this._options.skyboxSize;\n    let rootPosition = this._options.rootPosition;\n    if (!this._scene.meshes || this._scene.meshes.length === 1) {\n      // 1 only means the root of the helper.\n      return {\n        groundSize,\n        skyboxSize,\n        rootPosition\n      };\n    }\n    const sceneExtends = this._scene.getWorldExtends(mesh => {\n      return mesh !== this._ground && mesh !== this._rootMesh && mesh !== this._skybox;\n    });\n    const sceneDiagonal = sceneExtends.max.subtract(sceneExtends.min);\n    if (this._options.sizeAuto) {\n      if (this._scene.activeCamera instanceof ArcRotateCamera && this._scene.activeCamera.upperRadiusLimit) {\n        groundSize = this._scene.activeCamera.upperRadiusLimit * 2;\n        skyboxSize = groundSize;\n      }\n      const sceneDiagonalLenght = sceneDiagonal.length();\n      if (sceneDiagonalLenght > groundSize) {\n        groundSize = sceneDiagonalLenght * 2;\n        skyboxSize = groundSize;\n      }\n      // 10 % bigger.\n      groundSize *= 1.1;\n      skyboxSize *= 1.5;\n      rootPosition = sceneExtends.min.add(sceneDiagonal.scale(0.5));\n      rootPosition.y = sceneExtends.min.y - this._options.groundYBias;\n    }\n    return {\n      groundSize,\n      skyboxSize,\n      rootPosition\n    };\n  }\n  /**\n   * Setup the ground according to the specified options.\n   * @param sceneSize\n   */\n  _setupGround(sceneSize) {\n    if (!this._ground || this._ground.isDisposed()) {\n      this._ground = CreatePlane(\"BackgroundPlane\", {\n        size: sceneSize.groundSize\n      }, this._scene);\n      this._ground.rotation.x = Math.PI / 2; // Face up by default.\n      this._ground.parent = this._rootMesh;\n      this._ground.onDisposeObservable.add(() => {\n        this._ground = null;\n      });\n    }\n    this._ground.receiveShadows = this._options.enableGroundShadow;\n  }\n  /**\n   * Setup the ground material according to the specified options.\n   */\n  _setupGroundMaterial() {\n    if (!this._groundMaterial) {\n      this._groundMaterial = new BackgroundMaterial(\"BackgroundPlaneMaterial\", this._scene);\n    }\n    this._groundMaterial.alpha = this._options.groundOpacity;\n    this._groundMaterial.alphaMode = 8;\n    this._groundMaterial.shadowLevel = this._options.groundShadowLevel;\n    this._groundMaterial.primaryColor = this._options.groundColor;\n    this._groundMaterial.useRGBColor = false;\n    this._groundMaterial.enableNoise = true;\n    if (this._ground) {\n      this._ground.material = this._groundMaterial;\n    }\n  }\n  /**\n   * Setup the ground diffuse texture according to the specified options.\n   */\n  _setupGroundDiffuseTexture() {\n    if (!this._groundMaterial) {\n      return;\n    }\n    if (this._groundTexture) {\n      return;\n    }\n    if (this._options.groundTexture instanceof BaseTexture) {\n      this._groundMaterial.diffuseTexture = this._options.groundTexture;\n      return;\n    }\n    this._groundTexture = new Texture(this._options.groundTexture, this._scene, undefined, undefined, undefined, undefined, this._errorHandler);\n    this._groundTexture.gammaSpace = false;\n    this._groundTexture.hasAlpha = true;\n    this._groundMaterial.diffuseTexture = this._groundTexture;\n  }\n  /**\n   * Setup the ground mirror texture according to the specified options.\n   * @param sceneSize\n   */\n  _setupGroundMirrorTexture(sceneSize) {\n    const wrapping = Texture.CLAMP_ADDRESSMODE;\n    if (!this._groundMirror) {\n      this._groundMirror = new MirrorTexture(\"BackgroundPlaneMirrorTexture\", {\n        ratio: this._options.groundMirrorSizeRatio\n      }, this._scene, false, this._options.groundMirrorTextureType, Texture.BILINEAR_SAMPLINGMODE, true);\n      this._groundMirror.mirrorPlane = new Plane(0, -1, 0, sceneSize.rootPosition.y);\n      this._groundMirror.anisotropicFilteringLevel = 1;\n      this._groundMirror.wrapU = wrapping;\n      this._groundMirror.wrapV = wrapping;\n      if (this._groundMirror.renderList) {\n        for (let i = 0; i < this._scene.meshes.length; i++) {\n          const mesh = this._scene.meshes[i];\n          if (mesh !== this._ground && mesh !== this._skybox && mesh !== this._rootMesh) {\n            this._groundMirror.renderList.push(mesh);\n          }\n        }\n      }\n    }\n    const gammaGround = this._options.groundColor.toGammaSpace();\n    this._groundMirror.clearColor = new Color4(gammaGround.r, gammaGround.g, gammaGround.b, 1);\n    this._groundMirror.adaptiveBlurKernel = this._options.groundMirrorBlurKernel;\n  }\n  /**\n   * Setup the ground to receive the mirror texture.\n   */\n  _setupMirrorInGroundMaterial() {\n    if (this._groundMaterial) {\n      this._groundMaterial.reflectionTexture = this._groundMirror;\n      this._groundMaterial.reflectionFresnel = true;\n      this._groundMaterial.reflectionAmount = this._options.groundMirrorAmount;\n      this._groundMaterial.reflectionStandardFresnelWeight = this._options.groundMirrorFresnelWeight;\n      this._groundMaterial.reflectionFalloffDistance = this._options.groundMirrorFallOffDistance;\n    }\n  }\n  /**\n   * Setup the skybox according to the specified options.\n   * @param sceneSize\n   */\n  _setupSkybox(sceneSize) {\n    if (!this._skybox || this._skybox.isDisposed()) {\n      this._skybox = CreateBox(\"BackgroundSkybox\", {\n        size: sceneSize.skyboxSize,\n        sideOrientation: Mesh.BACKSIDE\n      }, this._scene);\n      this._skybox.onDisposeObservable.add(() => {\n        this._skybox = null;\n      });\n    }\n    this._skybox.parent = this._rootMesh;\n  }\n  /**\n   * Setup the skybox material according to the specified options.\n   */\n  _setupSkyboxMaterial() {\n    if (!this._skybox) {\n      return;\n    }\n    if (!this._skyboxMaterial) {\n      this._skyboxMaterial = new BackgroundMaterial(\"BackgroundSkyboxMaterial\", this._scene);\n    }\n    this._skyboxMaterial.useRGBColor = false;\n    this._skyboxMaterial.primaryColor = this._options.skyboxColor;\n    this._skyboxMaterial.enableNoise = true;\n    this._skybox.material = this._skyboxMaterial;\n  }\n  /**\n   * Setup the skybox reflection texture according to the specified options.\n   */\n  _setupSkyboxReflectionTexture() {\n    if (!this._skyboxMaterial) {\n      return;\n    }\n    if (this._skyboxTexture) {\n      return;\n    }\n    if (this._options.skyboxTexture instanceof BaseTexture) {\n      this._skyboxMaterial.reflectionTexture = this._options.skyboxTexture;\n      return;\n    }\n    this._skyboxTexture = new CubeTexture(this._options.skyboxTexture, this._scene, undefined, undefined, undefined, undefined, this._errorHandler);\n    this._skyboxTexture.coordinatesMode = Texture.SKYBOX_MODE;\n    this._skyboxTexture.gammaSpace = false;\n    this._skyboxMaterial.reflectionTexture = this._skyboxTexture;\n  }\n  /**\n   * Dispose all the elements created by the Helper.\n   */\n  dispose() {\n    if (this._groundMaterial) {\n      this._groundMaterial.dispose(true, true);\n    }\n    if (this._skyboxMaterial) {\n      this._skyboxMaterial.dispose(true, true);\n    }\n    this._rootMesh.dispose(false);\n  }\n}\n/**\n * Default ground texture URL.\n */\nEnvironmentHelper._GroundTextureCDNUrl = \"https://assets.babylonjs.com/environments/backgroundGround.png\";\n/**\n * Default skybox texture URL.\n */\nEnvironmentHelper._SkyboxTextureCDNUrl = \"https://assets.babylonjs.com/environments/backgroundSkybox.dds\";\n/**\n * Default environment texture URL.\n */\nEnvironmentHelper._EnvironmentTextureCDNUrl = \"https://assets.babylonjs.com/environments/environmentSpecular.env\";","map":{"version":3,"mappings":"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","names":["Observable","ArcRotateCamera","Vector3","Color3","Color4","Mesh","BaseTexture","Texture","MirrorTexture","CubeTexture","BackgroundMaterial","CreatePlane","CreateBox","Plane","EnvironmentHelper","constructor","options","scene","message","exception","onErrorObservable","notifyObservers","_options","_GetDefaultOptions","_scene","_setupBackground","_setupImageProcessing","createGround","groundSize","groundTexture","_GroundTextureCDNUrl","groundColor","toLinearSpace","scale","groundOpacity","enableGroundShadow","groundShadowLevel","enableGroundMirror","groundMirrorSizeRatio","groundMirrorBlurKernel","groundMirrorAmount","groundMirrorFresnelWeight","groundMirrorFallOffDistance","groundMirrorTextureType","groundYBias","createSkybox","skyboxSize","skyboxTexture","_SkyboxTextureCDNUrl","skyboxColor","backgroundYRotation","sizeAuto","rootPosition","Zero","setupImageProcessing","environmentTexture","_EnvironmentTextureCDNUrl","cameraExposure","cameraContrast","toneMappingEnabled","rootMesh","_rootMesh","skybox","_skybox","_skyboxTexture","skyboxMaterial","_skyboxMaterial","ground","_ground","_groundTexture","groundMirror","_groundMirror","groundMirrorRenderList","renderList","groundMaterial","_groundMaterial","updateOptions","newOptions","dispose","setMainColor","color","primaryColor","clearColor","r","g","b","imageProcessingConfiguration","contrast","exposure","_setupEnvironmentTexture","CreateFromPrefilteredData","rotation","y","sceneSize","_getSceneSize","_setupGround","_setupGroundMaterial","_setupGroundDiffuseTexture","_setupGroundMirrorTexture","_setupMirrorInGroundMaterial","_setupSkybox","_setupSkyboxMaterial","_setupSkyboxReflectionTexture","position","x","z","meshes","length","sceneExtends","getWorldExtends","mesh","sceneDiagonal","max","subtract","min","activeCamera","upperRadiusLimit","sceneDiagonalLenght","add","isDisposed","size","Math","PI","parent","onDisposeObservable","receiveShadows","alpha","alphaMode","shadowLevel","useRGBColor","enableNoise","material","diffuseTexture","undefined","_errorHandler","gammaSpace","hasAlpha","wrapping","CLAMP_ADDRESSMODE","ratio","BILINEAR_SAMPLINGMODE","mirrorPlane","anisotropicFilteringLevel","wrapU","wrapV","i","push","gammaGround","toGammaSpace","adaptiveBlurKernel","reflectionTexture","reflectionFresnel","reflectionAmount","reflectionStandardFresnelWeight","reflectionFalloffDistance","sideOrientation","BACKSIDE","coordinatesMode","SKYBOX_MODE"],"sourceRoot":"","sources":["../../../../lts/core/generated/Helpers/environmentHelper.ts"],"sourcesContent":["import { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport { ArcRotateCamera } from \"../Cameras/arcRotateCamera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { MirrorTexture } from \"../Materials/Textures/mirrorTexture\";\r\nimport { CubeTexture } from \"../Materials/Textures/cubeTexture\";\r\nimport { BackgroundMaterial } from \"../Materials/Background/backgroundMaterial\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport { CreatePlane } from \"../Meshes/Builders/planeBuilder\";\r\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder\";\r\nimport { Plane } from \"../Maths/math.plane\";\r\n\r\n/**\r\n * Represents the different options available during the creation of\r\n * a Environment helper.\r\n *\r\n * This can control the default ground, skybox and image processing setup of your scene.\r\n */\r\nexport interface IEnvironmentHelperOptions {\r\n    /**\r\n     * Specifies whether or not to create a ground.\r\n     * True by default.\r\n     */\r\n    createGround: boolean;\r\n    /**\r\n     * Specifies the ground size.\r\n     * 15 by default.\r\n     */\r\n    groundSize: number;\r\n    /**\r\n     * The texture used on the ground for the main color.\r\n     * Comes from the BabylonJS CDN by default.\r\n     *\r\n     * Remarks: Can be either a texture or a url.\r\n     */\r\n    groundTexture: string | BaseTexture;\r\n    /**\r\n     * The color mixed in the ground texture by default.\r\n     * BabylonJS clearColor by default.\r\n     */\r\n    groundColor: Color3;\r\n    /**\r\n     * Specifies the ground opacity.\r\n     * 1 by default.\r\n     */\r\n    groundOpacity: number;\r\n    /**\r\n     * Enables the ground to receive shadows.\r\n     * True by default.\r\n     */\r\n    enableGroundShadow: boolean;\r\n    /**\r\n     * Helps preventing the shadow to be fully black on the ground.\r\n     * 0.5 by default.\r\n     */\r\n    groundShadowLevel: number;\r\n    /**\r\n     * Creates a mirror texture attach to the ground.\r\n     * false by default.\r\n     */\r\n    enableGroundMirror: boolean;\r\n    /**\r\n     * Specifies the ground mirror size ratio.\r\n     * 0.3 by default as the default kernel is 64.\r\n     */\r\n    groundMirrorSizeRatio: number;\r\n    /**\r\n     * Specifies the ground mirror blur kernel size.\r\n     * 64 by default.\r\n     */\r\n    groundMirrorBlurKernel: number;\r\n    /**\r\n     * Specifies the ground mirror visibility amount.\r\n     * 1 by default\r\n     */\r\n    groundMirrorAmount: number;\r\n    /**\r\n     * Specifies the ground mirror reflectance weight.\r\n     * This uses the standard weight of the background material to setup the fresnel effect\r\n     * of the mirror.\r\n     * 1 by default.\r\n     */\r\n    groundMirrorFresnelWeight: number;\r\n    /**\r\n     * Specifies the ground mirror Falloff distance.\r\n     * This can helps reducing the size of the reflection.\r\n     * 0 by Default.\r\n     */\r\n    groundMirrorFallOffDistance: number;\r\n    /**\r\n     * Specifies the ground mirror texture type.\r\n     * Unsigned Int by Default.\r\n     */\r\n    groundMirrorTextureType: number;\r\n    /**\r\n     * Specifies a bias applied to the ground vertical position to prevent z-fighting with\r\n     * the shown objects.\r\n     */\r\n    groundYBias: number;\r\n\r\n    /**\r\n     * Specifies whether or not to create a skybox.\r\n     * True by default.\r\n     */\r\n    createSkybox: boolean;\r\n    /**\r\n     * Specifies the skybox size.\r\n     * 20 by default.\r\n     */\r\n    skyboxSize: number;\r\n    /**\r\n     * The texture used on the skybox for the main color.\r\n     * Comes from the BabylonJS CDN by default.\r\n     *\r\n     * Remarks: Can be either a texture or a url.\r\n     */\r\n    skyboxTexture: string | BaseTexture;\r\n    /**\r\n     * The color mixed in the skybox texture by default.\r\n     * BabylonJS clearColor by default.\r\n     */\r\n    skyboxColor: Color3;\r\n\r\n    /**\r\n     * The background rotation around the Y axis of the scene.\r\n     * This helps aligning the key lights of your scene with the background.\r\n     * 0 by default.\r\n     */\r\n    backgroundYRotation: number;\r\n\r\n    /**\r\n     * Compute automatically the size of the elements to best fit with the scene.\r\n     */\r\n    sizeAuto: boolean;\r\n\r\n    /**\r\n     * Default position of the rootMesh if autoSize is not true.\r\n     */\r\n    rootPosition: Vector3;\r\n\r\n    /**\r\n     * Sets up the image processing in the scene.\r\n     * true by default.\r\n     */\r\n    setupImageProcessing: boolean;\r\n\r\n    /**\r\n     * The texture used as your environment texture in the scene.\r\n     * Comes from the BabylonJS CDN by default and in use if setupImageProcessing is true.\r\n     *\r\n     * Remarks: Can be either a texture or a url.\r\n     */\r\n    environmentTexture: string | BaseTexture;\r\n\r\n    /**\r\n     * The value of the exposure to apply to the scene.\r\n     * 0.6 by default if setupImageProcessing is true.\r\n     */\r\n    cameraExposure: number;\r\n\r\n    /**\r\n     * The value of the contrast to apply to the scene.\r\n     * 1.6 by default if setupImageProcessing is true.\r\n     */\r\n    cameraContrast: number;\r\n\r\n    /**\r\n     * Specifies whether or not tonemapping should be enabled in the scene.\r\n     * true by default if setupImageProcessing is true.\r\n     */\r\n    toneMappingEnabled: boolean;\r\n}\r\n\r\ninterface ISceneSize {\r\n    groundSize: number;\r\n    skyboxSize: number;\r\n    rootPosition: Vector3;\r\n}\r\n\r\n/**\r\n * The Environment helper class can be used to add a fully featured none expensive background to your scene.\r\n * It includes by default a skybox and a ground relying on the BackgroundMaterial.\r\n * It also helps with the default setup of your imageProcessing configuration.\r\n */\r\nexport class EnvironmentHelper {\r\n    /**\r\n     * Default ground texture URL.\r\n     */\r\n    private static _GroundTextureCDNUrl = \"https://assets.babylonjs.com/environments/backgroundGround.png\";\r\n\r\n    /**\r\n     * Default skybox texture URL.\r\n     */\r\n    private static _SkyboxTextureCDNUrl = \"https://assets.babylonjs.com/environments/backgroundSkybox.dds\";\r\n\r\n    /**\r\n     * Default environment texture URL.\r\n     */\r\n    private static _EnvironmentTextureCDNUrl = \"https://assets.babylonjs.com/environments/environmentSpecular.env\";\r\n\r\n    /**\r\n     * Creates the default options for the helper.\r\n     */\r\n    private static _GetDefaultOptions(): IEnvironmentHelperOptions {\r\n        return {\r\n            createGround: true,\r\n            groundSize: 15,\r\n            groundTexture: this._GroundTextureCDNUrl,\r\n            groundColor: new Color3(0.2, 0.2, 0.3).toLinearSpace().scale(3),\r\n            groundOpacity: 0.9,\r\n            enableGroundShadow: true,\r\n            groundShadowLevel: 0.5,\r\n\r\n            enableGroundMirror: false,\r\n            groundMirrorSizeRatio: 0.3,\r\n            groundMirrorBlurKernel: 64,\r\n            groundMirrorAmount: 1,\r\n            groundMirrorFresnelWeight: 1,\r\n            groundMirrorFallOffDistance: 0,\r\n            groundMirrorTextureType: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n\r\n            groundYBias: 0.00001,\r\n\r\n            createSkybox: true,\r\n            skyboxSize: 20,\r\n            skyboxTexture: this._SkyboxTextureCDNUrl,\r\n            skyboxColor: new Color3(0.2, 0.2, 0.3).toLinearSpace().scale(3),\r\n\r\n            backgroundYRotation: 0,\r\n            sizeAuto: true,\r\n            rootPosition: Vector3.Zero(),\r\n\r\n            setupImageProcessing: true,\r\n            environmentTexture: this._EnvironmentTextureCDNUrl,\r\n            cameraExposure: 0.8,\r\n            cameraContrast: 1.2,\r\n            toneMappingEnabled: true,\r\n        };\r\n    }\r\n\r\n    private _rootMesh: Mesh;\r\n    /**\r\n     * Gets the root mesh created by the helper.\r\n     */\r\n    public get rootMesh(): Mesh {\r\n        return this._rootMesh;\r\n    }\r\n\r\n    private _skybox: Nullable<Mesh>;\r\n    /**\r\n     * Gets the skybox created by the helper.\r\n     */\r\n    public get skybox(): Nullable<Mesh> {\r\n        return this._skybox;\r\n    }\r\n\r\n    private _skyboxTexture: Nullable<BaseTexture>;\r\n    /**\r\n     * Gets the skybox texture created by the helper.\r\n     */\r\n    public get skyboxTexture(): Nullable<BaseTexture> {\r\n        return this._skyboxTexture;\r\n    }\r\n\r\n    private _skyboxMaterial: Nullable<BackgroundMaterial>;\r\n    /**\r\n     * Gets the skybox material created by the helper.\r\n     */\r\n    public get skyboxMaterial(): Nullable<BackgroundMaterial> {\r\n        return this._skyboxMaterial;\r\n    }\r\n\r\n    private _ground: Nullable<Mesh>;\r\n    /**\r\n     * Gets the ground mesh created by the helper.\r\n     */\r\n    public get ground(): Nullable<Mesh> {\r\n        return this._ground;\r\n    }\r\n\r\n    private _groundTexture: Nullable<BaseTexture>;\r\n    /**\r\n     * Gets the ground texture created by the helper.\r\n     */\r\n    public get groundTexture(): Nullable<BaseTexture> {\r\n        return this._groundTexture;\r\n    }\r\n\r\n    private _groundMirror: Nullable<MirrorTexture>;\r\n    /**\r\n     * Gets the ground mirror created by the helper.\r\n     */\r\n    public get groundMirror(): Nullable<MirrorTexture> {\r\n        return this._groundMirror;\r\n    }\r\n\r\n    /**\r\n     * Gets the ground mirror render list to helps pushing the meshes\r\n     * you wish in the ground reflection.\r\n     */\r\n    public get groundMirrorRenderList(): Nullable<AbstractMesh[]> {\r\n        if (this._groundMirror) {\r\n            return this._groundMirror.renderList;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private _groundMaterial: Nullable<BackgroundMaterial>;\r\n    /**\r\n     * Gets the ground material created by the helper.\r\n     */\r\n    public get groundMaterial(): Nullable<BackgroundMaterial> {\r\n        return this._groundMaterial;\r\n    }\r\n\r\n    /**\r\n     * Stores the creation options.\r\n     */\r\n    private readonly _scene: Scene;\r\n    private _options: IEnvironmentHelperOptions;\r\n\r\n    /**\r\n     * This observable will be notified with any error during the creation of the environment,\r\n     * mainly texture creation errors.\r\n     */\r\n    public onErrorObservable: Observable<{ message?: string; exception?: any }>;\r\n\r\n    /**\r\n     * constructor\r\n     * @param options Defines the options we want to customize the helper\r\n     * @param scene The scene to add the material to\r\n     */\r\n    constructor(options: Partial<IEnvironmentHelperOptions>, scene: Scene) {\r\n        this._options = {\r\n            ...EnvironmentHelper._GetDefaultOptions(),\r\n            ...options,\r\n        };\r\n        this._scene = scene;\r\n        this.onErrorObservable = new Observable();\r\n\r\n        this._setupBackground();\r\n        this._setupImageProcessing();\r\n    }\r\n\r\n    /**\r\n     * Updates the background according to the new options\r\n     * @param options\r\n     */\r\n    public updateOptions(options: Partial<IEnvironmentHelperOptions>) {\r\n        const newOptions = {\r\n            ...this._options,\r\n            ...options,\r\n        };\r\n\r\n        if (this._ground && !newOptions.createGround) {\r\n            this._ground.dispose();\r\n            this._ground = null;\r\n        }\r\n\r\n        if (this._groundMaterial && !newOptions.createGround) {\r\n            this._groundMaterial.dispose();\r\n            this._groundMaterial = null;\r\n        }\r\n\r\n        if (this._groundTexture) {\r\n            if (this._options.groundTexture != newOptions.groundTexture) {\r\n                this._groundTexture.dispose();\r\n                this._groundTexture = null;\r\n            }\r\n        }\r\n\r\n        if (this._skybox && !newOptions.createSkybox) {\r\n            this._skybox.dispose();\r\n            this._skybox = null;\r\n        }\r\n\r\n        if (this._skyboxMaterial && !newOptions.createSkybox) {\r\n            this._skyboxMaterial.dispose();\r\n            this._skyboxMaterial = null;\r\n        }\r\n\r\n        if (this._skyboxTexture) {\r\n            if (this._options.skyboxTexture != newOptions.skyboxTexture) {\r\n                this._skyboxTexture.dispose();\r\n                this._skyboxTexture = null;\r\n            }\r\n        }\r\n\r\n        if (this._groundMirror && !newOptions.enableGroundMirror) {\r\n            this._groundMirror.dispose();\r\n            this._groundMirror = null;\r\n        }\r\n\r\n        if (this._scene.environmentTexture) {\r\n            if (this._options.environmentTexture != newOptions.environmentTexture) {\r\n                this._scene.environmentTexture.dispose();\r\n            }\r\n        }\r\n\r\n        this._options = newOptions;\r\n\r\n        this._setupBackground();\r\n        this._setupImageProcessing();\r\n    }\r\n\r\n    /**\r\n     * Sets the primary color of all the available elements.\r\n     * @param color the main color to affect to the ground and the background\r\n     */\r\n    public setMainColor(color: Color3): void {\r\n        if (this.groundMaterial) {\r\n            this.groundMaterial.primaryColor = color;\r\n        }\r\n\r\n        if (this.skyboxMaterial) {\r\n            this.skyboxMaterial.primaryColor = color;\r\n        }\r\n\r\n        if (this.groundMirror) {\r\n            this.groundMirror.clearColor = new Color4(color.r, color.g, color.b, 1.0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup the image processing according to the specified options.\r\n     */\r\n    private _setupImageProcessing(): void {\r\n        if (this._options.setupImageProcessing) {\r\n            this._scene.imageProcessingConfiguration.contrast = this._options.cameraContrast;\r\n            this._scene.imageProcessingConfiguration.exposure = this._options.cameraExposure;\r\n            this._scene.imageProcessingConfiguration.toneMappingEnabled = this._options.toneMappingEnabled;\r\n            this._setupEnvironmentTexture();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup the environment texture according to the specified options.\r\n     */\r\n    private _setupEnvironmentTexture(): void {\r\n        if (this._scene.environmentTexture) {\r\n            return;\r\n        }\r\n\r\n        if (this._options.environmentTexture instanceof BaseTexture) {\r\n            this._scene.environmentTexture = this._options.environmentTexture;\r\n            return;\r\n        }\r\n\r\n        const environmentTexture = CubeTexture.CreateFromPrefilteredData(this._options.environmentTexture, this._scene);\r\n        this._scene.environmentTexture = environmentTexture;\r\n    }\r\n\r\n    /**\r\n     * Setup the background according to the specified options.\r\n     */\r\n    private _setupBackground(): void {\r\n        if (!this._rootMesh) {\r\n            this._rootMesh = new Mesh(\"BackgroundHelper\", this._scene);\r\n        }\r\n        this._rootMesh.rotation.y = this._options.backgroundYRotation;\r\n\r\n        const sceneSize = this._getSceneSize();\r\n        if (this._options.createGround) {\r\n            this._setupGround(sceneSize);\r\n            this._setupGroundMaterial();\r\n            this._setupGroundDiffuseTexture();\r\n\r\n            if (this._options.enableGroundMirror) {\r\n                this._setupGroundMirrorTexture(sceneSize);\r\n            }\r\n            this._setupMirrorInGroundMaterial();\r\n        }\r\n\r\n        if (this._options.createSkybox) {\r\n            this._setupSkybox(sceneSize);\r\n            this._setupSkyboxMaterial();\r\n            this._setupSkyboxReflectionTexture();\r\n        }\r\n\r\n        this._rootMesh.position.x = sceneSize.rootPosition.x;\r\n        this._rootMesh.position.z = sceneSize.rootPosition.z;\r\n        this._rootMesh.position.y = sceneSize.rootPosition.y;\r\n    }\r\n\r\n    /**\r\n     * Get the scene sizes according to the setup.\r\n     */\r\n    private _getSceneSize(): ISceneSize {\r\n        let groundSize = this._options.groundSize;\r\n        let skyboxSize = this._options.skyboxSize;\r\n        let rootPosition = this._options.rootPosition;\r\n        if (!this._scene.meshes || this._scene.meshes.length === 1) {\r\n            // 1 only means the root of the helper.\r\n            return { groundSize, skyboxSize, rootPosition };\r\n        }\r\n\r\n        const sceneExtends = this._scene.getWorldExtends((mesh) => {\r\n            return mesh !== this._ground && mesh !== this._rootMesh && mesh !== this._skybox;\r\n        });\r\n        const sceneDiagonal = sceneExtends.max.subtract(sceneExtends.min);\r\n\r\n        if (this._options.sizeAuto) {\r\n            if (this._scene.activeCamera instanceof ArcRotateCamera && this._scene.activeCamera.upperRadiusLimit) {\r\n                groundSize = this._scene.activeCamera.upperRadiusLimit * 2;\r\n                skyboxSize = groundSize;\r\n            }\r\n\r\n            const sceneDiagonalLenght = sceneDiagonal.length();\r\n            if (sceneDiagonalLenght > groundSize) {\r\n                groundSize = sceneDiagonalLenght * 2;\r\n                skyboxSize = groundSize;\r\n            }\r\n\r\n            // 10 % bigger.\r\n            groundSize *= 1.1;\r\n            skyboxSize *= 1.5;\r\n            rootPosition = sceneExtends.min.add(sceneDiagonal.scale(0.5));\r\n            rootPosition.y = sceneExtends.min.y - this._options.groundYBias;\r\n        }\r\n\r\n        return { groundSize, skyboxSize, rootPosition };\r\n    }\r\n\r\n    /**\r\n     * Setup the ground according to the specified options.\r\n     * @param sceneSize\r\n     */\r\n    private _setupGround(sceneSize: ISceneSize): void {\r\n        if (!this._ground || this._ground.isDisposed()) {\r\n            this._ground = CreatePlane(\"BackgroundPlane\", { size: sceneSize.groundSize }, this._scene);\r\n            this._ground.rotation.x = Math.PI / 2; // Face up by default.\r\n            this._ground.parent = this._rootMesh;\r\n            this._ground.onDisposeObservable.add(() => {\r\n                this._ground = null;\r\n            });\r\n        }\r\n\r\n        this._ground.receiveShadows = this._options.enableGroundShadow;\r\n    }\r\n\r\n    /**\r\n     * Setup the ground material according to the specified options.\r\n     */\r\n    private _setupGroundMaterial(): void {\r\n        if (!this._groundMaterial) {\r\n            this._groundMaterial = new BackgroundMaterial(\"BackgroundPlaneMaterial\", this._scene);\r\n        }\r\n        this._groundMaterial.alpha = this._options.groundOpacity;\r\n        this._groundMaterial.alphaMode = Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\r\n        this._groundMaterial.shadowLevel = this._options.groundShadowLevel;\r\n        this._groundMaterial.primaryColor = this._options.groundColor;\r\n        this._groundMaterial.useRGBColor = false;\r\n        this._groundMaterial.enableNoise = true;\r\n\r\n        if (this._ground) {\r\n            this._ground.material = this._groundMaterial;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup the ground diffuse texture according to the specified options.\r\n     */\r\n    private _setupGroundDiffuseTexture(): void {\r\n        if (!this._groundMaterial) {\r\n            return;\r\n        }\r\n\r\n        if (this._groundTexture) {\r\n            return;\r\n        }\r\n\r\n        if (this._options.groundTexture instanceof BaseTexture) {\r\n            this._groundMaterial.diffuseTexture = this._options.groundTexture;\r\n            return;\r\n        }\r\n\r\n        this._groundTexture = new Texture(this._options.groundTexture, this._scene, undefined, undefined, undefined, undefined, this._errorHandler);\r\n        this._groundTexture.gammaSpace = false;\r\n        this._groundTexture.hasAlpha = true;\r\n        this._groundMaterial.diffuseTexture = this._groundTexture;\r\n    }\r\n\r\n    /**\r\n     * Setup the ground mirror texture according to the specified options.\r\n     * @param sceneSize\r\n     */\r\n    private _setupGroundMirrorTexture(sceneSize: ISceneSize): void {\r\n        const wrapping = Texture.CLAMP_ADDRESSMODE;\r\n        if (!this._groundMirror) {\r\n            this._groundMirror = new MirrorTexture(\r\n                \"BackgroundPlaneMirrorTexture\",\r\n                { ratio: this._options.groundMirrorSizeRatio },\r\n                this._scene,\r\n                false,\r\n                this._options.groundMirrorTextureType,\r\n                Texture.BILINEAR_SAMPLINGMODE,\r\n                true\r\n            );\r\n            this._groundMirror.mirrorPlane = new Plane(0, -1, 0, sceneSize.rootPosition.y);\r\n            this._groundMirror.anisotropicFilteringLevel = 1;\r\n            this._groundMirror.wrapU = wrapping;\r\n            this._groundMirror.wrapV = wrapping;\r\n\r\n            if (this._groundMirror.renderList) {\r\n                for (let i = 0; i < this._scene.meshes.length; i++) {\r\n                    const mesh = this._scene.meshes[i];\r\n                    if (mesh !== this._ground && mesh !== this._skybox && mesh !== this._rootMesh) {\r\n                        this._groundMirror.renderList.push(mesh);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const gammaGround = this._options.groundColor.toGammaSpace();\r\n        this._groundMirror.clearColor = new Color4(gammaGround.r, gammaGround.g, gammaGround.b, 1);\r\n        this._groundMirror.adaptiveBlurKernel = this._options.groundMirrorBlurKernel;\r\n    }\r\n\r\n    /**\r\n     * Setup the ground to receive the mirror texture.\r\n     */\r\n    private _setupMirrorInGroundMaterial(): void {\r\n        if (this._groundMaterial) {\r\n            this._groundMaterial.reflectionTexture = this._groundMirror;\r\n            this._groundMaterial.reflectionFresnel = true;\r\n            this._groundMaterial.reflectionAmount = this._options.groundMirrorAmount;\r\n            this._groundMaterial.reflectionStandardFresnelWeight = this._options.groundMirrorFresnelWeight;\r\n            this._groundMaterial.reflectionFalloffDistance = this._options.groundMirrorFallOffDistance;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup the skybox according to the specified options.\r\n     * @param sceneSize\r\n     */\r\n    private _setupSkybox(sceneSize: ISceneSize): void {\r\n        if (!this._skybox || this._skybox.isDisposed()) {\r\n            this._skybox = CreateBox(\"BackgroundSkybox\", { size: sceneSize.skyboxSize, sideOrientation: Mesh.BACKSIDE }, this._scene);\r\n            this._skybox.onDisposeObservable.add(() => {\r\n                this._skybox = null;\r\n            });\r\n        }\r\n        this._skybox.parent = this._rootMesh;\r\n    }\r\n\r\n    /**\r\n     * Setup the skybox material according to the specified options.\r\n     */\r\n    private _setupSkyboxMaterial(): void {\r\n        if (!this._skybox) {\r\n            return;\r\n        }\r\n\r\n        if (!this._skyboxMaterial) {\r\n            this._skyboxMaterial = new BackgroundMaterial(\"BackgroundSkyboxMaterial\", this._scene);\r\n        }\r\n        this._skyboxMaterial.useRGBColor = false;\r\n        this._skyboxMaterial.primaryColor = this._options.skyboxColor;\r\n        this._skyboxMaterial.enableNoise = true;\r\n\r\n        this._skybox.material = this._skyboxMaterial;\r\n    }\r\n\r\n    /**\r\n     * Setup the skybox reflection texture according to the specified options.\r\n     */\r\n    private _setupSkyboxReflectionTexture(): void {\r\n        if (!this._skyboxMaterial) {\r\n            return;\r\n        }\r\n\r\n        if (this._skyboxTexture) {\r\n            return;\r\n        }\r\n\r\n        if (this._options.skyboxTexture instanceof BaseTexture) {\r\n            this._skyboxMaterial.reflectionTexture = this._options.skyboxTexture;\r\n            return;\r\n        }\r\n\r\n        this._skyboxTexture = new CubeTexture(this._options.skyboxTexture, this._scene, undefined, undefined, undefined, undefined, this._errorHandler);\r\n        this._skyboxTexture.coordinatesMode = Texture.SKYBOX_MODE;\r\n        this._skyboxTexture.gammaSpace = false;\r\n        this._skyboxMaterial.reflectionTexture = this._skyboxTexture;\r\n    }\r\n\r\n    private _errorHandler = (message?: string, exception?: any) => {\r\n        this.onErrorObservable.notifyObservers({ message: message, exception: exception });\r\n    };\r\n\r\n    /**\r\n     * Dispose all the elements created by the Helper.\r\n     */\r\n    public dispose(): void {\r\n        if (this._groundMaterial) {\r\n            this._groundMaterial.dispose(true, true);\r\n        }\r\n        if (this._skyboxMaterial) {\r\n            this._skyboxMaterial.dispose(true, true);\r\n        }\r\n        this._rootMesh.dispose(false);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}