{"ast":null,"code":"import { Vector3, Matrix } from \"../Maths/math.vector.js\";\n/**\n * Class containing a set of static utilities functions for managing Pivots\n * @internal\n */\nexport class PivotTools {\n  /**\n   * @internal\n   */\n  static _RemoveAndStorePivotPoint(mesh) {\n    if (mesh && PivotTools._PivotCached === 0) {\n      // Save old pivot and set pivot to 0,0,0\n      mesh.getPivotPointToRef(PivotTools._OldPivotPoint);\n      PivotTools._PivotPostMultiplyPivotMatrix = mesh._postMultiplyPivotMatrix;\n      if (!PivotTools._OldPivotPoint.equalsToFloats(0, 0, 0)) {\n        mesh.setPivotMatrix(Matrix.IdentityReadOnly);\n        PivotTools._OldPivotPoint.subtractToRef(mesh.getPivotPoint(), PivotTools._PivotTranslation);\n        PivotTools._PivotTmpVector.copyFromFloats(1, 1, 1);\n        PivotTools._PivotTmpVector.subtractInPlace(mesh.scaling);\n        PivotTools._PivotTmpVector.multiplyInPlace(PivotTools._PivotTranslation);\n        mesh.position.addInPlace(PivotTools._PivotTmpVector);\n      }\n    }\n    PivotTools._PivotCached++;\n  }\n  /**\n   * @internal\n   */\n  static _RestorePivotPoint(mesh) {\n    if (mesh && !PivotTools._OldPivotPoint.equalsToFloats(0, 0, 0) && PivotTools._PivotCached === 1) {\n      mesh.setPivotPoint(PivotTools._OldPivotPoint);\n      mesh._postMultiplyPivotMatrix = PivotTools._PivotPostMultiplyPivotMatrix;\n      PivotTools._PivotTmpVector.copyFromFloats(1, 1, 1);\n      PivotTools._PivotTmpVector.subtractInPlace(mesh.scaling);\n      PivotTools._PivotTmpVector.multiplyInPlace(PivotTools._PivotTranslation);\n      mesh.position.subtractInPlace(PivotTools._PivotTmpVector);\n    }\n    this._PivotCached--;\n  }\n}\n// Stores the state of the pivot cache (_oldPivotPoint, _pivotTranslation)\n// store/remove pivot point should only be applied during their outermost calls\nPivotTools._PivotCached = 0;\nPivotTools._OldPivotPoint = new Vector3();\nPivotTools._PivotTranslation = new Vector3();\nPivotTools._PivotTmpVector = new Vector3();\nPivotTools._PivotPostMultiplyPivotMatrix = false;","map":{"version":3,"mappings":"AAAA,SAASA,OAAO,EAAEC,MAAM,QAAQ,yBAAuB;AAGvD;;;;AAIA,OAAM,MAAOC,UAAU;EAQnB;;;EAGO,OAAOC,yBAAyB,CAACC,IAAmB;IACvD,IAAIA,IAAI,IAAIF,UAAU,CAACG,YAAY,KAAK,CAAC,EAAE;MACvC;MACAD,IAAI,CAACE,kBAAkB,CAACJ,UAAU,CAACK,cAAc,CAAC;MAClDL,UAAU,CAACM,6BAA6B,GAAGJ,IAAI,CAACK,wBAAwB;MACxE,IAAI,CAACP,UAAU,CAACK,cAAc,CAACG,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;QACpDN,IAAI,CAACO,cAAc,CAACV,MAAM,CAACW,gBAAgB,CAAC;QAC5CV,UAAU,CAACK,cAAc,CAACM,aAAa,CAACT,IAAI,CAACU,aAAa,EAAE,EAAEZ,UAAU,CAACa,iBAAiB,CAAC;QAC3Fb,UAAU,CAACc,eAAe,CAACC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAClDf,UAAU,CAACc,eAAe,CAACE,eAAe,CAACd,IAAI,CAACe,OAAO,CAAC;QACxDjB,UAAU,CAACc,eAAe,CAACI,eAAe,CAAClB,UAAU,CAACa,iBAAiB,CAAC;QACxEX,IAAI,CAACiB,QAAQ,CAACC,UAAU,CAACpB,UAAU,CAACc,eAAe,CAAC;;;IAG5Dd,UAAU,CAACG,YAAY,EAAE;EAC7B;EACA;;;EAGO,OAAOkB,kBAAkB,CAACnB,IAAmB;IAChD,IAAIA,IAAI,IAAI,CAACF,UAAU,CAACK,cAAc,CAACG,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,IAAIR,UAAU,CAACG,YAAY,KAAK,CAAC,EAAE;MAC7FD,IAAI,CAACoB,aAAa,CAACtB,UAAU,CAACK,cAAc,CAAC;MAC7CH,IAAI,CAACK,wBAAwB,GAAGP,UAAU,CAACM,6BAA6B;MACxEN,UAAU,CAACc,eAAe,CAACC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAClDf,UAAU,CAACc,eAAe,CAACE,eAAe,CAACd,IAAI,CAACe,OAAO,CAAC;MACxDjB,UAAU,CAACc,eAAe,CAACI,eAAe,CAAClB,UAAU,CAACa,iBAAiB,CAAC;MACxEX,IAAI,CAACiB,QAAQ,CAACH,eAAe,CAAChB,UAAU,CAACc,eAAe,CAAC;;IAE7D,IAAI,CAACX,YAAY,EAAE;EACvB;;AAvCA;AACA;AACeH,uBAAY,GAAG,CAAC;AAChBA,yBAAc,GAAG,IAAIF,OAAO,EAAE;AAC9BE,4BAAiB,GAAG,IAAIF,OAAO,EAAE;AACjCE,0BAAe,GAAG,IAAIF,OAAO,EAAE;AAC/BE,wCAA6B,GAAG,KAAK","names":["Vector3","Matrix","PivotTools","_RemoveAndStorePivotPoint","mesh","_PivotCached","getPivotPointToRef","_OldPivotPoint","_PivotPostMultiplyPivotMatrix","_postMultiplyPivotMatrix","equalsToFloats","setPivotMatrix","IdentityReadOnly","subtractToRef","getPivotPoint","_PivotTranslation","_PivotTmpVector","copyFromFloats","subtractInPlace","scaling","multiplyInPlace","position","addInPlace","_RestorePivotPoint","setPivotPoint"],"sourceRoot":"","sources":["../../../../lts/core/generated/Misc/pivotTools.ts"],"sourcesContent":["import { Vector3, Matrix } from \"../Maths/math.vector\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\n\r\n/**\r\n * Class containing a set of static utilities functions for managing Pivots\r\n * @internal\r\n */\r\nexport class PivotTools {\r\n    // Stores the state of the pivot cache (_oldPivotPoint, _pivotTranslation)\r\n    // store/remove pivot point should only be applied during their outermost calls\r\n    private static _PivotCached = 0;\r\n    private static _OldPivotPoint = new Vector3();\r\n    private static _PivotTranslation = new Vector3();\r\n    private static _PivotTmpVector = new Vector3();\r\n    private static _PivotPostMultiplyPivotMatrix = false;\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _RemoveAndStorePivotPoint(mesh: TransformNode) {\r\n        if (mesh && PivotTools._PivotCached === 0) {\r\n            // Save old pivot and set pivot to 0,0,0\r\n            mesh.getPivotPointToRef(PivotTools._OldPivotPoint);\r\n            PivotTools._PivotPostMultiplyPivotMatrix = mesh._postMultiplyPivotMatrix;\r\n            if (!PivotTools._OldPivotPoint.equalsToFloats(0, 0, 0)) {\r\n                mesh.setPivotMatrix(Matrix.IdentityReadOnly);\r\n                PivotTools._OldPivotPoint.subtractToRef(mesh.getPivotPoint(), PivotTools._PivotTranslation);\r\n                PivotTools._PivotTmpVector.copyFromFloats(1, 1, 1);\r\n                PivotTools._PivotTmpVector.subtractInPlace(mesh.scaling);\r\n                PivotTools._PivotTmpVector.multiplyInPlace(PivotTools._PivotTranslation);\r\n                mesh.position.addInPlace(PivotTools._PivotTmpVector);\r\n            }\r\n        }\r\n        PivotTools._PivotCached++;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _RestorePivotPoint(mesh: TransformNode) {\r\n        if (mesh && !PivotTools._OldPivotPoint.equalsToFloats(0, 0, 0) && PivotTools._PivotCached === 1) {\r\n            mesh.setPivotPoint(PivotTools._OldPivotPoint);\r\n            mesh._postMultiplyPivotMatrix = PivotTools._PivotPostMultiplyPivotMatrix;\r\n            PivotTools._PivotTmpVector.copyFromFloats(1, 1, 1);\r\n            PivotTools._PivotTmpVector.subtractInPlace(mesh.scaling);\r\n            PivotTools._PivotTmpVector.multiplyInPlace(PivotTools._PivotTranslation);\r\n            mesh.position.subtractInPlace(PivotTools._PivotTmpVector);\r\n        }\r\n        this._PivotCached--;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}