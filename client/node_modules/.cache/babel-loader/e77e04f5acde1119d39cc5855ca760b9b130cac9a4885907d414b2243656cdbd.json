{"ast":null,"code":"import { Camera } from \"../../Cameras/camera.js\";\nimport { DeviceOrientationCamera } from \"../../Cameras/deviceOrientationCamera.js\";\nimport { VRCameraMetrics } from \"./vrCameraMetrics.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setVRRigMode } from \"../RigModes/vrRigMode.js\";\nNode.AddNodeConstructor(\"VRDeviceOrientationFreeCamera\", (name, scene) => {\n  return () => new VRDeviceOrientationFreeCamera(name, Vector3.Zero(), scene);\n});\n/**\n * Camera used to simulate VR rendering (based on FreeCamera)\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#vr-device-orientation-cameras\n */\nexport class VRDeviceOrientationFreeCamera extends DeviceOrientationCamera {\n  /**\n   * Creates a new VRDeviceOrientationFreeCamera\n   * @param name defines camera name\n   * @param position defines the start position of the camera\n   * @param scene defines the scene the camera belongs to\n   * @param compensateDistortion defines if the camera needs to compensate the lens distortion\n   * @param vrCameraMetrics defines the vr metrics associated to the camera\n   */\n  constructor(name, position, scene, compensateDistortion = true, vrCameraMetrics = VRCameraMetrics.GetDefault()) {\n    super(name, position, scene);\n    this._setRigMode = setVRRigMode.bind(null, this);\n    vrCameraMetrics.compensateDistortion = compensateDistortion;\n    this.setCameraRigMode(Camera.RIG_MODE_VR, {\n      vrCameraMetrics: vrCameraMetrics\n    });\n  }\n  /**\n   * Gets camera class name\n   * @returns VRDeviceOrientationFreeCamera\n   */\n  getClassName() {\n    return \"VRDeviceOrientationFreeCamera\";\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAQ,yBAAuB;AAC9C,SAASC,uBAAuB,QAAQ,0CAAwC;AAChF,SAASC,eAAe,QAAQ,sBAAoB;AAEpD,SAASC,OAAO,QAAQ,4BAA0B;AAClD,SAASC,IAAI,QAAQ,eAAa;AAClC,SAASC,YAAY,QAAQ,0BAAwB;AAErDD,IAAI,CAACE,kBAAkB,CAAC,+BAA+B,EAAE,CAACC,IAAI,EAAEC,KAAK,KAAI;EACrE,OAAO,MAAM,IAAIC,6BAA6B,CAACF,IAAI,EAAEJ,OAAO,CAACO,IAAI,EAAE,EAAEF,KAAK,CAAC;AAC/E,CAAC,CAAC;AAEF;;;;AAIA,OAAM,MAAOC,6BAA8B,SAAQR,uBAAuB;EACtE;;;;;;;;EAQAU,YAAYJ,IAAY,EAAEK,QAAiB,EAAEJ,KAAa,EAAEK,oBAAoB,GAAG,IAAI,EAAEC,kBAAmCZ,eAAe,CAACa,UAAU,EAAE;IACpJ,KAAK,CAACR,IAAI,EAAEK,QAAQ,EAAEJ,KAAK,CAAC;IActB,gBAAW,GAAGH,YAAY,CAACW,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;IAZjDF,eAAe,CAACD,oBAAoB,GAAGA,oBAAoB;IAC3D,IAAI,CAACI,gBAAgB,CAACjB,MAAM,CAACkB,WAAW,EAAE;MAAEJ,eAAe,EAAEA;IAAe,CAAE,CAAC;EACnF;EAEA;;;;EAIOK,YAAY;IACf,OAAO,+BAA+B;EAC1C","names":["Camera","DeviceOrientationCamera","VRCameraMetrics","Vector3","Node","setVRRigMode","AddNodeConstructor","name","scene","VRDeviceOrientationFreeCamera","Zero","constructor","position","compensateDistortion","vrCameraMetrics","GetDefault","bind","setCameraRigMode","RIG_MODE_VR","getClassName"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/VR/vrDeviceOrientationFreeCamera.ts"],"sourcesContent":["import { Camera } from \"../../Cameras/camera\";\r\nimport { DeviceOrientationCamera } from \"../../Cameras/deviceOrientationCamera\";\r\nimport { VRCameraMetrics } from \"./vrCameraMetrics\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Node } from \"../../node\";\r\nimport { setVRRigMode } from \"../RigModes/vrRigMode\";\r\n\r\nNode.AddNodeConstructor(\"VRDeviceOrientationFreeCamera\", (name, scene) => {\r\n    return () => new VRDeviceOrientationFreeCamera(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * Camera used to simulate VR rendering (based on FreeCamera)\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#vr-device-orientation-cameras\r\n */\r\nexport class VRDeviceOrientationFreeCamera extends DeviceOrientationCamera {\r\n    /**\r\n     * Creates a new VRDeviceOrientationFreeCamera\r\n     * @param name defines camera name\r\n     * @param position defines the start position of the camera\r\n     * @param scene defines the scene the camera belongs to\r\n     * @param compensateDistortion defines if the camera needs to compensate the lens distortion\r\n     * @param vrCameraMetrics defines the vr metrics associated to the camera\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene, compensateDistortion = true, vrCameraMetrics: VRCameraMetrics = VRCameraMetrics.GetDefault()) {\r\n        super(name, position, scene);\r\n\r\n        vrCameraMetrics.compensateDistortion = compensateDistortion;\r\n        this.setCameraRigMode(Camera.RIG_MODE_VR, { vrCameraMetrics: vrCameraMetrics });\r\n    }\r\n\r\n    /**\r\n     * Gets camera class name\r\n     * @returns VRDeviceOrientationFreeCamera\r\n     */\r\n    public getClassName(): string {\r\n        return \"VRDeviceOrientationFreeCamera\";\r\n    }\r\n\r\n    protected _setRigMode = setVRRigMode.bind(null, this);\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}