{"ast":null,"code":"import { RenderTargetWrapper } from \"../renderTargetWrapper.js\";\n/** @internal */\nexport class WebGLRenderTargetWrapper extends RenderTargetWrapper {\n  constructor(isMulti, isCube, size, engine, context) {\n    super(isMulti, isCube, size, engine);\n    this._framebuffer = null;\n    this._depthStencilBuffer = null;\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    this._MSAAFramebuffer = null;\n    // Multiview\n    this._colorTextureArray = null;\n    this._depthStencilTextureArray = null;\n    this._context = context;\n  }\n  _cloneRenderTargetWrapper() {\n    let rtw = null;\n    if (this._colorTextureArray && this._depthStencilTextureArray) {\n      rtw = this._engine.createMultiviewRenderTargetTexture(this.width, this.height);\n      rtw.texture.isReady = true;\n    } else {\n      rtw = super._cloneRenderTargetWrapper();\n    }\n    return rtw;\n  }\n  _swapRenderTargetWrapper(target) {\n    super._swapRenderTargetWrapper(target);\n    target._framebuffer = this._framebuffer;\n    target._depthStencilBuffer = this._depthStencilBuffer;\n    target._MSAAFramebuffer = this._MSAAFramebuffer;\n    target._colorTextureArray = this._colorTextureArray;\n    target._depthStencilTextureArray = this._depthStencilTextureArray;\n    this._framebuffer = this._depthStencilBuffer = this._MSAAFramebuffer = this._colorTextureArray = this._depthStencilTextureArray = null;\n  }\n  /**\n   * Shares the depth buffer of this render target with another render target.\n   * @internal\n   * @param renderTarget Destination renderTarget\n   */\n  _shareDepth(renderTarget) {\n    super._shareDepth(renderTarget);\n    const gl = this._context;\n    const depthbuffer = this._depthStencilBuffer;\n    const framebuffer = renderTarget._MSAAFramebuffer || renderTarget._framebuffer;\n    if (renderTarget._depthStencilBuffer) {\n      gl.deleteRenderbuffer(renderTarget._depthStencilBuffer);\n    }\n    renderTarget._depthStencilBuffer = this._depthStencilBuffer;\n    this._engine._bindUnboundFramebuffer(framebuffer);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthbuffer);\n    this._engine._bindUnboundFramebuffer(null);\n  }\n  /**\n   * Binds a texture to this render target on a specific attachment\n   * @param texture The texture to bind to the framebuffer\n   * @param attachmentIndex Index of the attachment\n   * @param faceIndex The face of the texture to render to in case of cube texture\n   * @param lodLevel defines the lod level to bind to the frame buffer\n   */\n  _bindTextureRenderTarget(texture, attachmentIndex = 0, faceIndex = -1, lodLevel = 0) {\n    if (!texture._hardwareTexture) {\n      return;\n    }\n    const gl = this._context;\n    const framebuffer = this._framebuffer;\n    const currentFB = this._engine._currentFramebuffer;\n    this._engine._bindUnboundFramebuffer(framebuffer);\n    const attachment = gl[this._engine.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + attachmentIndex : \"COLOR_ATTACHMENT\" + attachmentIndex + \"_WEBGL\"];\n    const target = faceIndex !== -1 ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D;\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, target, texture._hardwareTexture.underlyingResource, lodLevel);\n    this._engine._bindUnboundFramebuffer(currentFB);\n  }\n  /**\n   * Set a texture in the textures array\n   * @param texture the texture to set\n   * @param index the index in the textures array to set\n   * @param disposePrevious If this function should dispose the previous texture\n   */\n  setTexture(texture, index = 0, disposePrevious = true) {\n    super.setTexture(texture, index, disposePrevious);\n    this._bindTextureRenderTarget(texture, index);\n  }\n  dispose(disposeOnlyFramebuffers = false) {\n    const gl = this._context;\n    if (!disposeOnlyFramebuffers) {\n      if (this._colorTextureArray) {\n        this._context.deleteTexture(this._colorTextureArray);\n        this._colorTextureArray = null;\n      }\n      if (this._depthStencilTextureArray) {\n        this._context.deleteTexture(this._depthStencilTextureArray);\n        this._depthStencilTextureArray = null;\n      }\n    }\n    if (this._framebuffer) {\n      gl.deleteFramebuffer(this._framebuffer);\n      this._framebuffer = null;\n    }\n    if (this._depthStencilBuffer) {\n      gl.deleteRenderbuffer(this._depthStencilBuffer);\n      this._depthStencilBuffer = null;\n    }\n    if (this._MSAAFramebuffer) {\n      gl.deleteFramebuffer(this._MSAAFramebuffer);\n      this._MSAAFramebuffer = null;\n    }\n    super.dispose(disposeOnlyFramebuffers);\n  }\n}","map":{"version":3,"mappings":"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","names":["RenderTargetWrapper","WebGLRenderTargetWrapper","constructor","isMulti","isCube","size","engine","context","_context","_cloneRenderTargetWrapper","rtw","_colorTextureArray","_depthStencilTextureArray","_engine","createMultiviewRenderTargetTexture","width","height","texture","isReady","_swapRenderTargetWrapper","target","_framebuffer","_depthStencilBuffer","_MSAAFramebuffer","_shareDepth","renderTarget","gl","depthbuffer","framebuffer","deleteRenderbuffer","_bindUnboundFramebuffer","framebufferRenderbuffer","FRAMEBUFFER","DEPTH_ATTACHMENT","RENDERBUFFER","_bindTextureRenderTarget","attachmentIndex","faceIndex","lodLevel","_hardwareTexture","currentFB","_currentFramebuffer","attachment","webGLVersion","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_2D","framebufferTexture2D","underlyingResource","setTexture","index","disposePrevious","dispose","disposeOnlyFramebuffers","deleteTexture","deleteFramebuffer"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/WebGL/webGLRenderTargetWrapper.ts"],"sourcesContent":["import type { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\nimport type { TextureSize } from \"../../Materials/Textures/textureCreationOptions\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Engine } from \"../engine\";\r\nimport { RenderTargetWrapper } from \"../renderTargetWrapper\";\r\nimport type { ThinEngine } from \"../thinEngine\";\r\n\r\n/** @internal */\r\nexport class WebGLRenderTargetWrapper extends RenderTargetWrapper {\r\n    private _context: WebGLRenderingContext;\r\n\r\n    public _framebuffer: Nullable<WebGLFramebuffer> = null;\r\n    public _depthStencilBuffer: Nullable<WebGLRenderbuffer> = null;\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public _MSAAFramebuffer: Nullable<WebGLFramebuffer> = null;\r\n\r\n    // Multiview\r\n    public _colorTextureArray: Nullable<WebGLTexture> = null;\r\n    public _depthStencilTextureArray: Nullable<WebGLTexture> = null;\r\n\r\n    constructor(isMulti: boolean, isCube: boolean, size: TextureSize, engine: ThinEngine, context: WebGLRenderingContext) {\r\n        super(isMulti, isCube, size, engine);\r\n\r\n        this._context = context;\r\n    }\r\n\r\n    protected _cloneRenderTargetWrapper(): Nullable<RenderTargetWrapper> {\r\n        let rtw: Nullable<RenderTargetWrapper> = null;\r\n\r\n        if (this._colorTextureArray && this._depthStencilTextureArray) {\r\n            rtw = (this._engine as Engine).createMultiviewRenderTargetTexture(this.width, this.height);\r\n            rtw.texture!.isReady = true;\r\n        } else {\r\n            rtw = super._cloneRenderTargetWrapper();\r\n        }\r\n\r\n        return rtw;\r\n    }\r\n\r\n    protected _swapRenderTargetWrapper(target: WebGLRenderTargetWrapper): void {\r\n        super._swapRenderTargetWrapper(target);\r\n\r\n        target._framebuffer = this._framebuffer;\r\n        target._depthStencilBuffer = this._depthStencilBuffer;\r\n        target._MSAAFramebuffer = this._MSAAFramebuffer;\r\n        target._colorTextureArray = this._colorTextureArray;\r\n        target._depthStencilTextureArray = this._depthStencilTextureArray;\r\n\r\n        this._framebuffer = this._depthStencilBuffer = this._MSAAFramebuffer = this._colorTextureArray = this._depthStencilTextureArray = null;\r\n    }\r\n\r\n    /**\r\n     * Shares the depth buffer of this render target with another render target.\r\n     * @internal\r\n     * @param renderTarget Destination renderTarget\r\n     */\r\n    public _shareDepth(renderTarget: WebGLRenderTargetWrapper): void {\r\n        super._shareDepth(renderTarget);\r\n\r\n        const gl = this._context;\r\n        const depthbuffer = this._depthStencilBuffer;\r\n        const framebuffer = renderTarget._MSAAFramebuffer || renderTarget._framebuffer;\r\n\r\n        if (renderTarget._depthStencilBuffer) {\r\n            gl.deleteRenderbuffer(renderTarget._depthStencilBuffer);\r\n        }\r\n        renderTarget._depthStencilBuffer = this._depthStencilBuffer;\r\n\r\n        this._engine._bindUnboundFramebuffer(framebuffer);\r\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthbuffer);\r\n        this._engine._bindUnboundFramebuffer(null);\r\n    }\r\n\r\n    /**\r\n     * Binds a texture to this render target on a specific attachment\r\n     * @param texture The texture to bind to the framebuffer\r\n     * @param attachmentIndex Index of the attachment\r\n     * @param faceIndex The face of the texture to render to in case of cube texture\r\n     * @param lodLevel defines the lod level to bind to the frame buffer\r\n     */\r\n    private _bindTextureRenderTarget(texture: InternalTexture, attachmentIndex: number = 0, faceIndex: number = -1, lodLevel: number = 0) {\r\n        if (!texture._hardwareTexture) {\r\n            return;\r\n        }\r\n\r\n        const gl = this._context;\r\n        const framebuffer = this._framebuffer;\r\n\r\n        const currentFB = this._engine._currentFramebuffer;\r\n        this._engine._bindUnboundFramebuffer(framebuffer);\r\n        const attachment = (<any>gl)[this._engine.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + attachmentIndex : \"COLOR_ATTACHMENT\" + attachmentIndex + \"_WEBGL\"];\r\n        const target = faceIndex !== -1 ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D;\r\n\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, target, texture._hardwareTexture.underlyingResource, lodLevel);\r\n        this._engine._bindUnboundFramebuffer(currentFB);\r\n    }\r\n\r\n    /**\r\n     * Set a texture in the textures array\r\n     * @param texture the texture to set\r\n     * @param index the index in the textures array to set\r\n     * @param disposePrevious If this function should dispose the previous texture\r\n     */\r\n    public setTexture(texture: InternalTexture, index: number = 0, disposePrevious: boolean = true) {\r\n        super.setTexture(texture, index, disposePrevious);\r\n        this._bindTextureRenderTarget(texture, index);\r\n    }\r\n\r\n    public dispose(disposeOnlyFramebuffers = false): void {\r\n        const gl = this._context;\r\n\r\n        if (!disposeOnlyFramebuffers) {\r\n            if (this._colorTextureArray) {\r\n                this._context.deleteTexture(this._colorTextureArray);\r\n                this._colorTextureArray = null;\r\n            }\r\n            if (this._depthStencilTextureArray) {\r\n                this._context.deleteTexture(this._depthStencilTextureArray);\r\n                this._depthStencilTextureArray = null;\r\n            }\r\n        }\r\n\r\n        if (this._framebuffer) {\r\n            gl.deleteFramebuffer(this._framebuffer);\r\n            this._framebuffer = null;\r\n        }\r\n\r\n        if (this._depthStencilBuffer) {\r\n            gl.deleteRenderbuffer(this._depthStencilBuffer);\r\n            this._depthStencilBuffer = null;\r\n        }\r\n\r\n        if (this._MSAAFramebuffer) {\r\n            gl.deleteFramebuffer(this._MSAAFramebuffer);\r\n            this._MSAAFramebuffer = null;\r\n        }\r\n\r\n        super.dispose(disposeOnlyFramebuffers);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}