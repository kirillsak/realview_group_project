{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Engine } from \"../engine.js\";\nfunction transformTextureUrl(url) {\n  const excludeFn = entry => {\n    const strRegExPattern = \"\\\\b\" + entry + \"\\\\b\";\n    return url && (url === entry || url.match(new RegExp(strRegExPattern, \"g\")));\n  };\n  if (this._excludedCompressedTextures && this._excludedCompressedTextures.some(excludeFn)) {\n    return url;\n  }\n  const lastDot = url.lastIndexOf(\".\");\n  const lastQuestionMark = url.lastIndexOf(\"?\");\n  const querystring = lastQuestionMark > -1 ? url.substring(lastQuestionMark, url.length) : \"\";\n  return (lastDot > -1 ? url.substring(0, lastDot) : url) + this._textureFormatInUse + querystring;\n}\nObject.defineProperty(Engine.prototype, \"texturesSupported\", {\n  get: function () {\n    // Intelligently add supported compressed formats in order to check for.\n    // Check for ASTC support first as it is most powerful and to be very cross platform.\n    // Next PVRTC & DXT, which are probably superior to ETC1/2.\n    // Likely no hardware which supports both PVR & DXT, so order matters little.\n    // ETC2 is newer and handles ETC1 (no alpha capability), so check for first.\n    const texturesSupported = new Array();\n    if (this._caps.astc) {\n      texturesSupported.push(\"-astc.ktx\");\n    }\n    if (this._caps.s3tc) {\n      texturesSupported.push(\"-dxt.ktx\");\n    }\n    if (this._caps.pvrtc) {\n      texturesSupported.push(\"-pvrtc.ktx\");\n    }\n    if (this._caps.etc2) {\n      texturesSupported.push(\"-etc2.ktx\");\n    }\n    if (this._caps.etc1) {\n      texturesSupported.push(\"-etc1.ktx\");\n    }\n    return texturesSupported;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Engine.prototype, \"textureFormatInUse\", {\n  get: function () {\n    return this._textureFormatInUse || null;\n  },\n  enumerable: true,\n  configurable: true\n});\nEngine.prototype.setCompressedTextureExclusions = function (skippedFiles) {\n  this._excludedCompressedTextures = skippedFiles;\n};\nEngine.prototype.setTextureFormatToUse = function (formatsAvailable) {\n  const texturesSupported = this.texturesSupported;\n  for (let i = 0, len1 = texturesSupported.length; i < len1; i++) {\n    for (let j = 0, len2 = formatsAvailable.length; j < len2; j++) {\n      if (texturesSupported[i] === formatsAvailable[j].toLowerCase()) {\n        this._transformTextureUrl = transformTextureUrl.bind(this);\n        return this._textureFormatInUse = texturesSupported[i];\n      }\n    }\n  }\n  // actively set format to nothing, to allow this to be called more than once\n  // and possibly fail the 2nd time\n  this._textureFormatInUse = \"\";\n  this._transformTextureUrl = null;\n  return null;\n};","map":{"version":3,"mappings":"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","names":["Engine","transformTextureUrl","url","excludeFn","entry","strRegExPattern","match","RegExp","_excludedCompressedTextures","some","lastDot","lastIndexOf","lastQuestionMark","querystring","substring","length","_textureFormatInUse","Object","defineProperty","prototype","get","texturesSupported","Array","_caps","astc","push","s3tc","pvrtc","etc2","etc1","enumerable","configurable","setCompressedTextureExclusions","skippedFiles","setTextureFormatToUse","formatsAvailable","i","len1","j","len2","toLowerCase","_transformTextureUrl","bind"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/Extensions/engine.textureSelector.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { Engine } from \"../engine\";\r\n\r\ndeclare module \"../../Engines/engine\" {\r\n    export interface Engine {\r\n        /** @internal */\r\n        _excludedCompressedTextures: string[];\r\n\r\n        /** @internal */\r\n        _textureFormatInUse: string;\r\n\r\n        /**\r\n         * Gets the list of texture formats supported\r\n         */\r\n        readonly texturesSupported: Array<string>;\r\n\r\n        /**\r\n         * Gets the texture format in use\r\n         */\r\n        readonly textureFormatInUse: Nullable<string>;\r\n\r\n        /**\r\n         * Set the compressed texture extensions or file names to skip.\r\n         *\r\n         * @param skippedFiles defines the list of those texture files you want to skip\r\n         * Example: [\".dds\", \".env\", \"myfile.png\"]\r\n         */\r\n        setCompressedTextureExclusions(skippedFiles: Array<string>): void;\r\n\r\n        /**\r\n         * Set the compressed texture format to use, based on the formats you have, and the formats\r\n         * supported by the hardware / browser.\r\n         *\r\n         * Khronos Texture Container (.ktx) files are used to support this.  This format has the\r\n         * advantage of being specifically designed for OpenGL.  Header elements directly correspond\r\n         * to API arguments needed to compressed textures.  This puts the burden on the container\r\n         * generator to house the arcane code for determining these for current & future formats.\r\n         *\r\n         * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\r\n         * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\r\n         *\r\n         * Note: The result of this call is not taken into account when a texture is base64.\r\n         *\r\n         * @param formatsAvailable defines the list of those format families you have created\r\n         * on your server.  Syntax: '-' + format family + '.ktx'.  (Case and order do not matter.)\r\n         *\r\n         * Current families are astc, dxt, pvrtc, etc2, & etc1.\r\n         * @returns The extension selected.\r\n         */\r\n        setTextureFormatToUse(formatsAvailable: Array<string>): Nullable<string>;\r\n    }\r\n}\r\n\r\nfunction transformTextureUrl(this: Engine, url: string): string {\r\n    const excludeFn = (entry: string) => {\r\n        const strRegExPattern: string = \"\\\\b\" + entry + \"\\\\b\";\r\n        return url && (url === entry || url.match(new RegExp(strRegExPattern, \"g\")));\r\n    };\r\n\r\n    if (this._excludedCompressedTextures && this._excludedCompressedTextures.some(excludeFn)) {\r\n        return url;\r\n    }\r\n\r\n    const lastDot = url.lastIndexOf(\".\");\r\n    const lastQuestionMark = url.lastIndexOf(\"?\");\r\n    const querystring = lastQuestionMark > -1 ? url.substring(lastQuestionMark, url.length) : \"\";\r\n    return (lastDot > -1 ? url.substring(0, lastDot) : url) + this._textureFormatInUse + querystring;\r\n}\r\n\r\nObject.defineProperty(Engine.prototype, \"texturesSupported\", {\r\n    get: function (this: Engine) {\r\n        // Intelligently add supported compressed formats in order to check for.\r\n        // Check for ASTC support first as it is most powerful and to be very cross platform.\r\n        // Next PVRTC & DXT, which are probably superior to ETC1/2.\r\n        // Likely no hardware which supports both PVR & DXT, so order matters little.\r\n        // ETC2 is newer and handles ETC1 (no alpha capability), so check for first.\r\n        const texturesSupported = new Array<string>();\r\n        if (this._caps.astc) {\r\n            texturesSupported.push(\"-astc.ktx\");\r\n        }\r\n        if (this._caps.s3tc) {\r\n            texturesSupported.push(\"-dxt.ktx\");\r\n        }\r\n        if (this._caps.pvrtc) {\r\n            texturesSupported.push(\"-pvrtc.ktx\");\r\n        }\r\n        if (this._caps.etc2) {\r\n            texturesSupported.push(\"-etc2.ktx\");\r\n        }\r\n        if (this._caps.etc1) {\r\n            texturesSupported.push(\"-etc1.ktx\");\r\n        }\r\n        return texturesSupported;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nObject.defineProperty(Engine.prototype, \"textureFormatInUse\", {\r\n    get: function (this: Engine) {\r\n        return this._textureFormatInUse || null;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nEngine.prototype.setCompressedTextureExclusions = function (skippedFiles: Array<string>): void {\r\n    this._excludedCompressedTextures = skippedFiles;\r\n};\r\n\r\nEngine.prototype.setTextureFormatToUse = function (formatsAvailable: Array<string>): Nullable<string> {\r\n    const texturesSupported = this.texturesSupported;\r\n    for (let i = 0, len1 = texturesSupported.length; i < len1; i++) {\r\n        for (let j = 0, len2 = formatsAvailable.length; j < len2; j++) {\r\n            if (texturesSupported[i] === formatsAvailable[j].toLowerCase()) {\r\n                this._transformTextureUrl = transformTextureUrl.bind(this);\r\n                return (this._textureFormatInUse = texturesSupported[i]);\r\n            }\r\n        }\r\n    }\r\n    // actively set format to nothing, to allow this to be called more than once\r\n    // and possibly fail the 2nd time\r\n    this._textureFormatInUse = \"\";\r\n    this._transformTextureUrl = null;\r\n    return null;\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}