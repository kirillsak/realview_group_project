{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\nconst NAME = \"KHR_materials_sheen\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_sheen/README.md)\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#BNIZX6#4)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_materials_sheen {\n  /**\n   * @internal\n   */\n  constructor(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n    this.order = 190;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @internal */\n  dispose() {\n    this._loader = null;\n  }\n  /**\n   * @internal\n   */\n  loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, (extensionContext, extension) => {\n      const promises = new Array();\n      promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n      promises.push(this._loadSheenPropertiesAsync(extensionContext, extension, babylonMaterial));\n      return Promise.all(promises).then(() => {});\n    });\n  }\n  _loadSheenPropertiesAsync(context, properties, babylonMaterial) {\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(`${context}: Material type not supported`);\n    }\n    const promises = new Array();\n    babylonMaterial.sheen.isEnabled = true;\n    babylonMaterial.sheen.intensity = 1;\n    if (properties.sheenColorFactor != undefined) {\n      babylonMaterial.sheen.color = Color3.FromArray(properties.sheenColorFactor);\n    } else {\n      babylonMaterial.sheen.color = Color3.Black();\n    }\n    if (properties.sheenColorTexture) {\n      promises.push(this._loader.loadTextureInfoAsync(`${context}/sheenColorTexture`, properties.sheenColorTexture, texture => {\n        texture.name = `${babylonMaterial.name} (Sheen Color)`;\n        babylonMaterial.sheen.texture = texture;\n      }));\n    }\n    if (properties.sheenRoughnessFactor !== undefined) {\n      babylonMaterial.sheen.roughness = properties.sheenRoughnessFactor;\n    } else {\n      babylonMaterial.sheen.roughness = 0;\n    }\n    if (properties.sheenRoughnessTexture) {\n      properties.sheenRoughnessTexture.nonColorData = true;\n      promises.push(this._loader.loadTextureInfoAsync(`${context}/sheenRoughnessTexture`, properties.sheenRoughnessTexture, texture => {\n        texture.name = `${babylonMaterial.name} (Sheen Roughness)`;\n        babylonMaterial.sheen.textureRoughness = texture;\n      }));\n    }\n    babylonMaterial.sheen.albedoScaling = true;\n    babylonMaterial.sheen.useRoughnessFromMainTexture = false;\n    return Promise.all(promises).then(() => {});\n  }\n}\nGLTFLoader.RegisterExtension(NAME, loader => new KHR_materials_sheen(loader));","map":{"version":3,"mappings":"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","names":["PBRMaterial","GLTFLoader","Color3","NAME","KHR_materials_sheen","constructor","loader","_loader","enabled","isExtensionUsed","dispose","loadMaterialPropertiesAsync","context","material","babylonMaterial","LoadExtensionAsync","name","extensionContext","extension","promises","Array","push","_loadSheenPropertiesAsync","Promise","all","then","properties","Error","sheen","isEnabled","intensity","sheenColorFactor","undefined","color","FromArray","Black","sheenColorTexture","loadTextureInfoAsync","texture","sheenRoughnessFactor","roughness","sheenRoughnessTexture","nonColorData","textureRoughness","albedoScaling","useRoughnessFromMainTexture","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_materials_sheen.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { IKHRMaterialsSheen } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_materials_sheen\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_sheen/README.md)\r\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#BNIZX6#4)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_sheen implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 190;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsSheen>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadSheenPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadSheenPropertiesAsync(context: string, properties: IKHRMaterialsSheen, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        babylonMaterial.sheen.isEnabled = true;\r\n        babylonMaterial.sheen.intensity = 1;\r\n\r\n        if (properties.sheenColorFactor != undefined) {\r\n            babylonMaterial.sheen.color = Color3.FromArray(properties.sheenColorFactor);\r\n        } else {\r\n            babylonMaterial.sheen.color = Color3.Black();\r\n        }\r\n\r\n        if (properties.sheenColorTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/sheenColorTexture`, properties.sheenColorTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Sheen Color)`;\r\n                    babylonMaterial.sheen.texture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.sheenRoughnessFactor !== undefined) {\r\n            babylonMaterial.sheen.roughness = properties.sheenRoughnessFactor;\r\n        } else {\r\n            babylonMaterial.sheen.roughness = 0;\r\n        }\r\n\r\n        if (properties.sheenRoughnessTexture) {\r\n            (properties.sheenRoughnessTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/sheenRoughnessTexture`, properties.sheenRoughnessTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Sheen Roughness)`;\r\n                    babylonMaterial.sheen.textureRoughness = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        babylonMaterial.sheen.albedoScaling = true;\r\n        babylonMaterial.sheen.useRoughnessFromMainTexture = false;\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_sheen(loader));\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}