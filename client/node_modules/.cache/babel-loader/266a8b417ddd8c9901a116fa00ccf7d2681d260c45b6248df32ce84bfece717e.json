{"ast":null,"code":"/**\n * Class for storing data to local storage if available or in-memory storage otherwise\n */\nexport class DataStorage {\n  static _GetStorage() {\n    try {\n      localStorage.setItem(\"test\", \"\");\n      localStorage.removeItem(\"test\");\n      return localStorage;\n    } catch (_a) {\n      const inMemoryStorage = {};\n      return {\n        getItem: key => {\n          const value = inMemoryStorage[key];\n          return value === undefined ? null : value;\n        },\n        setItem: (key, value) => {\n          inMemoryStorage[key] = value;\n        }\n      };\n    }\n  }\n  /**\n   * Reads a string from the data storage\n   * @param key The key to read\n   * @param defaultValue The value if the key doesn't exist\n   * @returns The string value\n   */\n  static ReadString(key, defaultValue) {\n    const value = this._Storage.getItem(key);\n    return value !== null ? value : defaultValue;\n  }\n  /**\n   * Writes a string to the data storage\n   * @param key The key to write\n   * @param value The value to write\n   */\n  static WriteString(key, value) {\n    this._Storage.setItem(key, value);\n  }\n  /**\n   * Reads a boolean from the data storage\n   * @param key The key to read\n   * @param defaultValue The value if the key doesn't exist\n   * @returns The boolean value\n   */\n  static ReadBoolean(key, defaultValue) {\n    const value = this._Storage.getItem(key);\n    return value !== null ? value === \"true\" : defaultValue;\n  }\n  /**\n   * Writes a boolean to the data storage\n   * @param key The key to write\n   * @param value The value to write\n   */\n  static WriteBoolean(key, value) {\n    this._Storage.setItem(key, value ? \"true\" : \"false\");\n  }\n  /**\n   * Reads a number from the data storage\n   * @param key The key to read\n   * @param defaultValue The value if the key doesn't exist\n   * @returns The number value\n   */\n  static ReadNumber(key, defaultValue) {\n    const value = this._Storage.getItem(key);\n    return value !== null ? parseFloat(value) : defaultValue;\n  }\n  /**\n   * Writes a number to the data storage\n   * @param key The key to write\n   * @param value The value to write\n   */\n  static WriteNumber(key, value) {\n    this._Storage.setItem(key, value.toString());\n  }\n}\nDataStorage._Storage = DataStorage._GetStorage();","map":{"version":3,"mappings":"AAKA;;;AAGA,OAAM,MAAOA,WAAW;EAGZ,OAAOC,WAAW;IACtB,IAAI;MACAC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;MAChCD,YAAY,CAACE,UAAU,CAAC,MAAM,CAAC;MAC/B,OAAOF,YAAY;KACtB,CAAC,WAAM;MACJ,MAAMG,eAAe,GAA8B,EAAE;MACrD,OAAO;QACHC,OAAO,EAAGC,GAAG,IAAI;UACb,MAAMC,KAAK,GAAGH,eAAe,CAACE,GAAG,CAAC;UAClC,OAAOC,KAAK,KAAKC,SAAS,GAAG,IAAI,GAAGD,KAAK;QAC7C,CAAC;QACDL,OAAO,EAAE,CAACI,GAAG,EAAEC,KAAK,KAAI;UACpBH,eAAe,CAACE,GAAG,CAAC,GAAGC,KAAK;QAChC;OACH;;EAET;EAEA;;;;;;EAMO,OAAOE,UAAU,CAACH,GAAW,EAAEI,YAAoB;IACtD,MAAMH,KAAK,GAAG,IAAI,CAACI,QAAQ,CAACN,OAAO,CAACC,GAAG,CAAC;IACxC,OAAOC,KAAK,KAAK,IAAI,GAAGA,KAAK,GAAGG,YAAY;EAChD;EAEA;;;;;EAKO,OAAOE,WAAW,CAACN,GAAW,EAAEC,KAAa;IAChD,IAAI,CAACI,QAAQ,CAACT,OAAO,CAACI,GAAG,EAAEC,KAAK,CAAC;EACrC;EAEA;;;;;;EAMO,OAAOM,WAAW,CAACP,GAAW,EAAEI,YAAqB;IACxD,MAAMH,KAAK,GAAG,IAAI,CAACI,QAAQ,CAACN,OAAO,CAACC,GAAG,CAAC;IACxC,OAAOC,KAAK,KAAK,IAAI,GAAGA,KAAK,KAAK,MAAM,GAAGG,YAAY;EAC3D;EAEA;;;;;EAKO,OAAOI,YAAY,CAACR,GAAW,EAAEC,KAAc;IAClD,IAAI,CAACI,QAAQ,CAACT,OAAO,CAACI,GAAG,EAAEC,KAAK,GAAG,MAAM,GAAG,OAAO,CAAC;EACxD;EAEA;;;;;;EAMO,OAAOQ,UAAU,CAACT,GAAW,EAAEI,YAAoB;IACtD,MAAMH,KAAK,GAAG,IAAI,CAACI,QAAQ,CAACN,OAAO,CAACC,GAAG,CAAC;IACxC,OAAOC,KAAK,KAAK,IAAI,GAAGS,UAAU,CAACT,KAAK,CAAC,GAAGG,YAAY;EAC5D;EAEA;;;;;EAKO,OAAOO,WAAW,CAACX,GAAW,EAAEC,KAAa;IAChD,IAAI,CAACI,QAAQ,CAACT,OAAO,CAACI,GAAG,EAAEC,KAAK,CAACW,QAAQ,EAAE,CAAC;EAChD;;AA/EenB,oBAAQ,GAAaA,WAAW,CAACC,WAAW,EAAE","names":["DataStorage","_GetStorage","localStorage","setItem","removeItem","inMemoryStorage","getItem","key","value","undefined","ReadString","defaultValue","_Storage","WriteString","ReadBoolean","WriteBoolean","ReadNumber","parseFloat","WriteNumber","toString"],"sourceRoot":"","sources":["../../../../lts/core/generated/Misc/dataStorage.ts"],"sourcesContent":["interface IStorage {\r\n    getItem: (key: string) => string | null;\r\n    setItem: (key: string, value: string) => void;\r\n}\r\n\r\n/**\r\n * Class for storing data to local storage if available or in-memory storage otherwise\r\n */\r\nexport class DataStorage {\r\n    private static _Storage: IStorage = DataStorage._GetStorage();\r\n\r\n    private static _GetStorage(): IStorage {\r\n        try {\r\n            localStorage.setItem(\"test\", \"\");\r\n            localStorage.removeItem(\"test\");\r\n            return localStorage;\r\n        } catch {\r\n            const inMemoryStorage: { [key: string]: string } = {};\r\n            return {\r\n                getItem: (key) => {\r\n                    const value = inMemoryStorage[key];\r\n                    return value === undefined ? null : value;\r\n                },\r\n                setItem: (key, value) => {\r\n                    inMemoryStorage[key] = value;\r\n                },\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reads a string from the data storage\r\n     * @param key The key to read\r\n     * @param defaultValue The value if the key doesn't exist\r\n     * @returns The string value\r\n     */\r\n    public static ReadString(key: string, defaultValue: string): string {\r\n        const value = this._Storage.getItem(key);\r\n        return value !== null ? value : defaultValue;\r\n    }\r\n\r\n    /**\r\n     * Writes a string to the data storage\r\n     * @param key The key to write\r\n     * @param value The value to write\r\n     */\r\n    public static WriteString(key: string, value: string): void {\r\n        this._Storage.setItem(key, value);\r\n    }\r\n\r\n    /**\r\n     * Reads a boolean from the data storage\r\n     * @param key The key to read\r\n     * @param defaultValue The value if the key doesn't exist\r\n     * @returns The boolean value\r\n     */\r\n    public static ReadBoolean(key: string, defaultValue: boolean): boolean {\r\n        const value = this._Storage.getItem(key);\r\n        return value !== null ? value === \"true\" : defaultValue;\r\n    }\r\n\r\n    /**\r\n     * Writes a boolean to the data storage\r\n     * @param key The key to write\r\n     * @param value The value to write\r\n     */\r\n    public static WriteBoolean(key: string, value: boolean) {\r\n        this._Storage.setItem(key, value ? \"true\" : \"false\");\r\n    }\r\n\r\n    /**\r\n     * Reads a number from the data storage\r\n     * @param key The key to read\r\n     * @param defaultValue The value if the key doesn't exist\r\n     * @returns The number value\r\n     */\r\n    public static ReadNumber(key: string, defaultValue: number): number {\r\n        const value = this._Storage.getItem(key);\r\n        return value !== null ? parseFloat(value) : defaultValue;\r\n    }\r\n\r\n    /**\r\n     * Writes a number to the data storage\r\n     * @param key The key to write\r\n     * @param value The value to write\r\n     */\r\n    public static WriteNumber(key: string, value: number) {\r\n        this._Storage.setItem(key, value.toString());\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}