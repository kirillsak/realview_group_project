{"ast":null,"code":"import { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Block used to discard a pixel if a value is smaller than a cutoff\n */\nexport class DiscardBlock extends NodeMaterialBlock {\n  /**\n   * Create a new DiscardBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Fragment, true);\n    this.registerInput(\"value\", NodeMaterialBlockConnectionPointTypes.Float, true);\n    this.registerInput(\"cutoff\", NodeMaterialBlockConnectionPointTypes.Float, true);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"DiscardBlock\";\n  }\n  /**\n   * Gets the color input component\n   */\n  get value() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the cutoff input component\n   */\n  get cutoff() {\n    return this._inputs[1];\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    state.sharedData.hints.needAlphaTesting = true;\n    if (!this.cutoff.isConnected || !this.value.isConnected) {\n      return;\n    }\n    state.compilationString += `if (${this.value.associatedVariableName} < ${this.cutoff.associatedVariableName}) discard;\\r\\n`;\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.DiscardBlock\", DiscardBlock);","map":{"version":3,"mappings":"AAAA,SAASA,iBAAiB,QAAQ,4BAA0B;AAC5D,SAASC,qCAAqC,QAAQ,sDAAoD;AAE1G,SAASC,wBAAwB,QAAQ,yCAAuC;AAEhF,SAASC,aAAa,QAAQ,+BAA6B;AAC3D;;;AAGA,OAAM,MAAOC,YAAa,SAAQJ,iBAAiB;EAC/C;;;;EAIAK,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,EAAEJ,wBAAwB,CAACK,QAAQ,EAAE,IAAI,CAAC;IAEpD,IAAI,CAACC,aAAa,CAAC,OAAO,EAAEP,qCAAqC,CAACQ,KAAK,EAAE,IAAI,CAAC;IAC9E,IAAI,CAACD,aAAa,CAAC,QAAQ,EAAEP,qCAAqC,CAACQ,KAAK,EAAE,IAAI,CAAC;EACnF;EAEA;;;;EAIOC,YAAY;IACf,OAAO,cAAc;EACzB;EAEA;;;EAGA,IAAWC,KAAK;IACZ,OAAO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWC,MAAM;IACb,OAAO,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEUE,WAAW,CAACC,KAA6B;IAC/C,KAAK,CAACD,WAAW,CAACC,KAAK,CAAC;IAExBA,KAAK,CAACC,UAAU,CAACC,KAAK,CAACC,gBAAgB,GAAG,IAAI;IAE9C,IAAI,CAAC,IAAI,CAACL,MAAM,CAACM,WAAW,IAAI,CAAC,IAAI,CAACR,KAAK,CAACQ,WAAW,EAAE;MACrD;;IAGJJ,KAAK,CAACK,iBAAiB,IAAI,OAAO,IAAI,CAACT,KAAK,CAACU,sBAAsB,MAAM,IAAI,CAACR,MAAM,CAACQ,sBAAsB,gBAAgB;IAE3H,OAAO,IAAI;EACf;;AAGJlB,aAAa,CAAC,sBAAsB,EAAEC,YAAY,CAAC","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","DiscardBlock","constructor","name","Fragment","registerInput","Float","getClassName","value","_inputs","cutoff","_buildBlock","state","sharedData","hints","needAlphaTesting","isConnected","compilationString","associatedVariableName"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/Fragment/discardBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n/**\r\n * Block used to discard a pixel if a value is smaller than a cutoff\r\n */\r\nexport class DiscardBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new DiscardBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment, true);\r\n\r\n        this.registerInput(\"value\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"cutoff\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"DiscardBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the color input component\r\n     */\r\n    public get value(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the cutoff input component\r\n     */\r\n    public get cutoff(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        state.sharedData.hints.needAlphaTesting = true;\r\n\r\n        if (!this.cutoff.isConnected || !this.value.isConnected) {\r\n            return;\r\n        }\r\n\r\n        state.compilationString += `if (${this.value.associatedVariableName} < ${this.cutoff.associatedVariableName}) discard;\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.DiscardBlock\", DiscardBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}