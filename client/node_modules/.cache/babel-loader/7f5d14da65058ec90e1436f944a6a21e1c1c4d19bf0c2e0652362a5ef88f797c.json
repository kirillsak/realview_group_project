{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Scene } from \"../../scene.js\";\nimport { SceneComponentConstants } from \"../../sceneComponent.js\";\nimport { FluidRenderingObjectParticleSystem } from \"./fluidRenderingObjectParticleSystem.js\";\nimport { FluidRenderingTargetRenderer } from \"./fluidRenderingTargetRenderer.js\";\nimport { FluidRenderingObjectCustomParticles } from \"./fluidRenderingObjectCustomParticles.js\";\nimport { FluidRenderingDepthTextureCopy } from \"./fluidRenderingDepthTextureCopy.js\";\nimport \"../../Shaders/fluidRenderingParticleDepth.vertex.js\";\nimport \"../../Shaders/fluidRenderingParticleDepth.fragment.js\";\nimport \"../../Shaders/fluidRenderingParticleThickness.vertex.js\";\nimport \"../../Shaders/fluidRenderingParticleThickness.fragment.js\";\nimport \"../../Shaders/fluidRenderingParticleDiffuse.vertex.js\";\nimport \"../../Shaders/fluidRenderingParticleDiffuse.fragment.js\";\nimport \"../../Shaders/fluidRenderingBilateralBlur.fragment.js\";\nimport \"../../Shaders/fluidRenderingStandardBlur.fragment.js\";\nimport \"../../Shaders/fluidRenderingRender.fragment.js\";\nObject.defineProperty(Scene.prototype, \"fluidRenderer\", {\n  get: function () {\n    return this._fluidRenderer;\n  },\n  set: function (value) {\n    this._fluidRenderer = value;\n  },\n  enumerable: true,\n  configurable: true\n});\nScene.prototype.enableFluidRenderer = function () {\n  if (this._fluidRenderer) {\n    return this._fluidRenderer;\n  }\n  this._fluidRenderer = new FluidRenderer(this);\n  return this._fluidRenderer;\n};\nScene.prototype.disableFluidRenderer = function () {\n  var _a;\n  (_a = this._fluidRenderer) === null || _a === void 0 ? void 0 : _a.dispose();\n  this._fluidRenderer = null;\n};\nfunction IsParticleSystemObject(obj) {\n  return !!obj.particleSystem;\n}\n/**\n * Defines the fluid renderer scene component responsible to render objects as fluids\n */\nexport class FluidRendererSceneComponent {\n  /**\n   * Creates a new instance of the component for the given scene\n   * @param scene Defines the scene to register the component in\n   */\n  constructor(scene) {\n    /**\n     * The component name helpful to identify the component in the list of scene components.\n     */\n    this.name = SceneComponentConstants.NAME_FLUIDRENDERER;\n    this.scene = scene;\n  }\n  /**\n   * Registers the component in a given scene\n   */\n  register() {\n    this.scene._gatherActiveCameraRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERACTIVECAMERARENDERTARGETS_FLUIDRENDERER, this, this._gatherActiveCameraRenderTargets);\n    this.scene._afterCameraDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_FLUIDRENDERER, this, this._afterCameraDraw);\n  }\n  _gatherActiveCameraRenderTargets(_renderTargets) {\n    var _a;\n    (_a = this.scene.fluidRenderer) === null || _a === void 0 ? void 0 : _a._prepareRendering();\n  }\n  _afterCameraDraw(camera) {\n    var _a;\n    (_a = this.scene.fluidRenderer) === null || _a === void 0 ? void 0 : _a._render(camera);\n  }\n  /**\n   * Rebuilds the elements related to this component in case of\n   * context lost for instance.\n   */\n  rebuild() {\n    if (this.scene._fluidRenderer) {\n      // Release resources first\n      this.scene.disableFluidRenderer();\n      // Re-enable\n      this.scene.enableFluidRenderer();\n    }\n  }\n  /**\n   * Disposes the component and the associated resources\n   */\n  dispose() {\n    this.scene.disableFluidRenderer();\n  }\n}\n/**\n * Class responsible for fluid rendering.\n * It is implementing the method described in https://developer.download.nvidia.com/presentations/2010/gdc/Direct3D_Effects.pdf\n */\nexport class FluidRenderer {\n  /**\n   * Initializes the class\n   * @param scene Scene in which the objects are part of\n   */\n  constructor(scene) {\n    this._scene = scene;\n    this._engine = scene.getEngine();\n    this._onEngineResizeObserver = null;\n    this.renderObjects = [];\n    this.targetRenderers = [];\n    this._cameras = new Map();\n    FluidRenderer._SceneComponentInitialization(this._scene);\n    this._onEngineResizeObserver = this._engine.onResizeObservable.add(() => {\n      this._initialize();\n    });\n  }\n  /** @internal */\n  static _SceneComponentInitialization(scene) {\n    let component = scene._getComponent(SceneComponentConstants.NAME_FLUIDRENDERER);\n    if (!component) {\n      component = new FluidRendererSceneComponent(scene);\n      scene._addComponent(component);\n    }\n  }\n  /**\n   * Reinitializes the class\n   * Can be used if you change the object priority (FluidRenderingObject.priority), to make sure the objects are rendered in the right order\n   */\n  recreate() {\n    this._sortRenderingObjects();\n    this._initialize();\n  }\n  /**\n   * Gets the render object corresponding to a particle system (null if the particle system is not rendered as a fluid)\n   * @param ps The particle system\n   * @returns the render object corresponding to this particle system if any, otherwise null\n   */\n  getRenderObjectFromParticleSystem(ps) {\n    const index = this._getParticleSystemIndex(ps);\n    return index !== -1 ? this.renderObjects[index] : null;\n  }\n  /**\n   * Adds a particle system to the fluid renderer.\n   * Note that you should not normally call this method directly, as you can simply use the renderAsFluid property of the ParticleSystem/GPUParticleSystem class\n   * @param ps particle system\n   * @param generateDiffuseTexture True if you want to generate a diffuse texture from the particle system and use it as part of the fluid rendering (default: false)\n   * @param targetRenderer The target renderer used to display the particle system as a fluid. If not provided, the method will create a new one\n   * @param camera The camera used by the target renderer (if the target renderer is created by the method)\n   * @returns the render object corresponding to the particle system\n   */\n  addParticleSystem(ps, generateDiffuseTexture, targetRenderer, camera) {\n    const object = new FluidRenderingObjectParticleSystem(this._scene, ps);\n    object.onParticleSizeChanged.add(this._setParticleSizeForRenderTargets.bind(this));\n    if (!targetRenderer) {\n      targetRenderer = new FluidRenderingTargetRenderer(this._scene, camera);\n      this.targetRenderers.push(targetRenderer);\n    }\n    if (!targetRenderer._onUseVelocityChanged.hasObservers()) {\n      targetRenderer._onUseVelocityChanged.add(this._setUseVelocityForRenderObject.bind(this));\n    }\n    if (generateDiffuseTexture !== undefined) {\n      targetRenderer.generateDiffuseTexture = generateDiffuseTexture;\n    }\n    const renderObject = {\n      object,\n      targetRenderer\n    };\n    this.renderObjects.push(renderObject);\n    this._sortRenderingObjects();\n    this._setParticleSizeForRenderTargets();\n    return renderObject;\n  }\n  /**\n   * Adds a custom particle set to the fluid renderer.\n   * @param buffers The list of buffers (should contain at least a \"position\" buffer!)\n   * @param numParticles Number of particles in each buffer\n   * @param generateDiffuseTexture True if you want to generate a diffuse texture from buffers and use it as part of the fluid rendering (default: false). For the texture to be generated correctly, you need a \"color\" buffer in the set!\n   * @param targetRenderer The target renderer used to display the particle system as a fluid. If not provided, the method will create a new one\n   * @param camera The camera used by the target renderer (if the target renderer is created by the method)\n   * @returns the render object corresponding to the custom particle set\n   */\n  addCustomParticles(buffers, numParticles, generateDiffuseTexture, targetRenderer, camera) {\n    const object = new FluidRenderingObjectCustomParticles(this._scene, buffers, numParticles);\n    object.onParticleSizeChanged.add(this._setParticleSizeForRenderTargets.bind(this));\n    if (!targetRenderer) {\n      targetRenderer = new FluidRenderingTargetRenderer(this._scene, camera);\n      this.targetRenderers.push(targetRenderer);\n    }\n    if (!targetRenderer._onUseVelocityChanged.hasObservers()) {\n      targetRenderer._onUseVelocityChanged.add(this._setUseVelocityForRenderObject.bind(this));\n    }\n    if (generateDiffuseTexture !== undefined) {\n      targetRenderer.generateDiffuseTexture = generateDiffuseTexture;\n    }\n    const renderObject = {\n      object,\n      targetRenderer\n    };\n    this.renderObjects.push(renderObject);\n    this._sortRenderingObjects();\n    this._setParticleSizeForRenderTargets();\n    return renderObject;\n  }\n  /**\n   * Removes a render object from the fluid renderer\n   * @param renderObject the render object to remove\n   * @param removeUnusedTargetRenderer True to remove/dispose of the target renderer if it's not used anymore (default: true)\n   * @returns True if the render object has been found and released, else false\n   */\n  removeRenderObject(renderObject, removeUnusedTargetRenderer = true) {\n    const index = this.renderObjects.indexOf(renderObject);\n    if (index === -1) {\n      return false;\n    }\n    renderObject.object.dispose();\n    this.renderObjects.splice(index, 1);\n    if (removeUnusedTargetRenderer && this._removeUnusedTargetRenderers()) {\n      this._initialize();\n    } else {\n      this._setParticleSizeForRenderTargets();\n    }\n    return true;\n  }\n  _sortRenderingObjects() {\n    this.renderObjects.sort((a, b) => {\n      return a.object.priority < b.object.priority ? -1 : a.object.priority > b.object.priority ? 1 : 0;\n    });\n  }\n  _removeUnusedTargetRenderers() {\n    const indexes = {};\n    for (let i = 0; i < this.renderObjects.length; ++i) {\n      const targetRenderer = this.renderObjects[i].targetRenderer;\n      indexes[this.targetRenderers.indexOf(targetRenderer)] = true;\n    }\n    let removed = false;\n    const newList = [];\n    for (let i = 0; i < this.targetRenderers.length; ++i) {\n      if (!indexes[i]) {\n        this.targetRenderers[i].dispose();\n        removed = true;\n      } else {\n        newList.push(this.targetRenderers[i]);\n      }\n    }\n    if (removed) {\n      this.targetRenderers.length = 0;\n      this.targetRenderers.push(...newList);\n    }\n    return removed;\n  }\n  _getParticleSystemIndex(ps) {\n    for (let i = 0; i < this.renderObjects.length; ++i) {\n      const obj = this.renderObjects[i].object;\n      if (IsParticleSystemObject(obj) && obj.particleSystem === ps) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  _initialize() {\n    for (let i = 0; i < this.targetRenderers.length; ++i) {\n      this.targetRenderers[i].dispose();\n    }\n    const cameras = new Map();\n    for (let i = 0; i < this.targetRenderers.length; ++i) {\n      const targetRenderer = this.targetRenderers[i];\n      targetRenderer._initialize();\n      if (targetRenderer.camera && targetRenderer._renderPostProcess) {\n        let list = cameras.get(targetRenderer.camera);\n        if (!list) {\n          list = [[], {}];\n          cameras.set(targetRenderer.camera, list);\n        }\n        list[0].push(targetRenderer);\n        targetRenderer.camera.attachPostProcess(targetRenderer._renderPostProcess, i);\n      }\n    }\n    let iterator = cameras.keys();\n    for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\n      const camera = key.value;\n      const list = cameras.get(camera);\n      const firstPostProcess = camera._getFirstPostProcess();\n      if (!firstPostProcess) {\n        continue;\n      }\n      const [targetRenderers, copyDepthTextures] = list;\n      firstPostProcess.onSizeChangedObservable.add(() => {\n        var _a;\n        if (!firstPostProcess.inputTexture.depthStencilTexture) {\n          firstPostProcess.inputTexture.createDepthStencilTexture(0, true, this._engine.isStencilEnable, targetRenderers[0].samples);\n        }\n        for (const targetRenderer of targetRenderers) {\n          const thicknessRT = (_a = targetRenderer._thicknessRenderTarget) === null || _a === void 0 ? void 0 : _a.renderTarget;\n          const thicknessTexture = thicknessRT === null || thicknessRT === void 0 ? void 0 : thicknessRT.texture;\n          if (thicknessRT && thicknessTexture) {\n            const key = thicknessTexture.width + \"_\" + thicknessTexture.height;\n            let copyDepthTexture = copyDepthTextures[key];\n            if (!copyDepthTexture) {\n              copyDepthTexture = copyDepthTextures[key] = new FluidRenderingDepthTextureCopy(this._engine, thicknessTexture.width, thicknessTexture.height);\n            }\n            copyDepthTexture.depthRTWrapper._shareDepth(thicknessRT);\n          }\n        }\n      });\n    }\n    // Dispose the CopyDepthTexture instances that we don't need anymore\n    iterator = this._cameras.keys();\n    for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\n      const camera = key.value;\n      const list = this._cameras.get(camera);\n      const copyDepthTextures = list[1];\n      const list2 = cameras.get(camera);\n      if (!list2) {\n        for (const key in copyDepthTextures) {\n          copyDepthTextures[key].dispose();\n        }\n      } else {\n        for (const key in copyDepthTextures) {\n          if (!list2[1][key]) {\n            copyDepthTextures[key].dispose();\n          }\n        }\n      }\n    }\n    this._cameras.clear();\n    this._cameras = cameras;\n    this._setParticleSizeForRenderTargets();\n  }\n  _setParticleSizeForRenderTargets() {\n    const particleSizes = new Map();\n    for (let i = 0; i < this.renderObjects.length; ++i) {\n      const renderingObject = this.renderObjects[i];\n      let curSize = particleSizes.get(renderingObject.targetRenderer);\n      if (curSize === undefined) {\n        curSize = 0;\n      }\n      particleSizes.set(renderingObject.targetRenderer, Math.max(curSize, renderingObject.object.particleSize));\n    }\n    particleSizes.forEach((particleSize, targetRenderer) => {\n      if (targetRenderer._depthRenderTarget) {\n        targetRenderer._depthRenderTarget.particleSize = particleSize;\n      }\n    });\n  }\n  _setUseVelocityForRenderObject() {\n    for (const renderingObject of this.renderObjects) {\n      renderingObject.object.useVelocity = renderingObject.targetRenderer.useVelocity;\n    }\n  }\n  /** @internal */\n  _prepareRendering() {\n    for (const renderer of this.targetRenderers) {\n      if (renderer.needInitialization) {\n        this._initialize();\n        return;\n      }\n    }\n  }\n  /** @internal */\n  _render(forCamera) {\n    var _a;\n    for (let i = 0; i < this.targetRenderers.length; ++i) {\n      if (!forCamera || this.targetRenderers[i].camera === forCamera) {\n        this.targetRenderers[i]._clearTargets();\n      }\n    }\n    const iterator = this._cameras.keys();\n    for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\n      const camera = key.value;\n      const list = this._cameras.get(camera);\n      if (forCamera && camera !== forCamera) {\n        continue;\n      }\n      const firstPostProcess = camera._getFirstPostProcess();\n      if (!firstPostProcess) {\n        continue;\n      }\n      const sourceCopyDepth = (_a = firstPostProcess.inputTexture) === null || _a === void 0 ? void 0 : _a.depthStencilTexture;\n      if (sourceCopyDepth) {\n        const [targetRenderers, copyDepthTextures] = list;\n        for (const targetRenderer of targetRenderers) {\n          targetRenderer._bgDepthTexture = sourceCopyDepth;\n        }\n        for (const key in copyDepthTextures) {\n          copyDepthTextures[key].copy(sourceCopyDepth);\n        }\n      }\n    }\n    for (let i = 0; i < this.renderObjects.length; ++i) {\n      const renderingObject = this.renderObjects[i];\n      if (!forCamera || renderingObject.targetRenderer.camera === forCamera) {\n        renderingObject.targetRenderer._render(renderingObject.object);\n      }\n    }\n  }\n  /**\n   * Disposes of all the ressources used by the class\n   */\n  dispose() {\n    this._engine.onResizeObservable.remove(this._onEngineResizeObserver);\n    this._onEngineResizeObserver = null;\n    for (let i = 0; i < this.renderObjects.length; ++i) {\n      this.renderObjects[i].object.dispose();\n    }\n    for (let i = 0; i < this.targetRenderers.length; ++i) {\n      this.targetRenderers[i].dispose();\n    }\n    this._cameras.forEach(list => {\n      const copyDepthTextures = list[1];\n      for (const key in copyDepthTextures) {\n        copyDepthTextures[key].dispose();\n      }\n    });\n    this.renderObjects = [];\n    this.targetRenderers = [];\n    this._cameras.clear();\n  }\n}","map":{"version":3,"mappings":"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","names":["Scene","SceneComponentConstants","FluidRenderingObjectParticleSystem","FluidRenderingTargetRenderer","FluidRenderingObjectCustomParticles","FluidRenderingDepthTextureCopy","Object","defineProperty","prototype","get","_fluidRenderer","set","value","enumerable","configurable","enableFluidRenderer","FluidRenderer","disableFluidRenderer","dispose","IsParticleSystemObject","obj","particleSystem","FluidRendererSceneComponent","constructor","scene","NAME_FLUIDRENDERER","register","_gatherActiveCameraRenderTargetsStage","registerStep","STEP_GATHERACTIVECAMERARENDERTARGETS_FLUIDRENDERER","_gatherActiveCameraRenderTargets","_afterCameraDrawStage","STEP_AFTERCAMERADRAW_FLUIDRENDERER","_afterCameraDraw","_renderTargets","fluidRenderer","_prepareRendering","camera","_render","rebuild","_scene","_engine","getEngine","_onEngineResizeObserver","renderObjects","targetRenderers","_cameras","Map","_SceneComponentInitialization","onResizeObservable","add","_initialize","component","_getComponent","_addComponent","recreate","_sortRenderingObjects","getRenderObjectFromParticleSystem","ps","index","_getParticleSystemIndex","addParticleSystem","generateDiffuseTexture","targetRenderer","object","onParticleSizeChanged","_setParticleSizeForRenderTargets","bind","push","_onUseVelocityChanged","hasObservers","_setUseVelocityForRenderObject","undefined","renderObject","addCustomParticles","buffers","numParticles","removeRenderObject","removeUnusedTargetRenderer","indexOf","splice","_removeUnusedTargetRenderers","sort","a","b","priority","indexes","i","length","removed","newList","cameras","_renderPostProcess","list","attachPostProcess","iterator","keys","key","next","done","firstPostProcess","_getFirstPostProcess","copyDepthTextures","onSizeChangedObservable","inputTexture","depthStencilTexture","createDepthStencilTexture","isStencilEnable","samples","thicknessRT","_thicknessRenderTarget","renderTarget","thicknessTexture","texture","width","height","copyDepthTexture","depthRTWrapper","_shareDepth","list2","clear","particleSizes","renderingObject","curSize","Math","max","particleSize","forEach","_depthRenderTarget","useVelocity","renderer","needInitialization","forCamera","_clearTargets","sourceCopyDepth","_bgDepthTexture","copy","remove"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Rendering/fluidRenderer/fluidRenderer.ts"],"sourcesContent":["import { Scene } from \"core/scene\";\r\nimport type { Engine } from \"core/Engines/engine\";\r\nimport type { FloatArray, Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport type { IParticleSystem } from \"core/Particles/IParticleSystem\";\r\nimport type { ISceneComponent } from \"core/sceneComponent\";\r\nimport { SceneComponentConstants } from \"core/sceneComponent\";\r\nimport type { SmartArrayNoDuplicate } from \"core/Misc/smartArray\";\r\nimport type { RenderTargetTexture } from \"core/Materials/Textures/renderTargetTexture\";\r\n\r\nimport type { FluidRenderingObject } from \"./fluidRenderingObject\";\r\nimport { FluidRenderingObjectParticleSystem } from \"./fluidRenderingObjectParticleSystem\";\r\nimport { FluidRenderingTargetRenderer } from \"./fluidRenderingTargetRenderer\";\r\nimport { FluidRenderingObjectCustomParticles } from \"./fluidRenderingObjectCustomParticles\";\r\nimport { FluidRenderingDepthTextureCopy } from \"./fluidRenderingDepthTextureCopy\";\r\n\r\nimport \"../../Shaders/fluidRenderingParticleDepth.vertex\";\r\nimport \"../../Shaders/fluidRenderingParticleDepth.fragment\";\r\nimport \"../../Shaders/fluidRenderingParticleThickness.vertex\";\r\nimport \"../../Shaders/fluidRenderingParticleThickness.fragment\";\r\nimport \"../../Shaders/fluidRenderingParticleDiffuse.vertex\";\r\nimport \"../../Shaders/fluidRenderingParticleDiffuse.fragment\";\r\nimport \"../../Shaders/fluidRenderingBilateralBlur.fragment\";\r\nimport \"../../Shaders/fluidRenderingStandardBlur.fragment\";\r\nimport \"../../Shaders/fluidRenderingRender.fragment\";\r\n\r\ndeclare module \"core/abstractScene\" {\r\n    export interface AbstractScene {\r\n        /** @internal (Backing field) */\r\n        _fluidRenderer: Nullable<FluidRenderer>;\r\n\r\n        /**\r\n         * Gets or Sets the fluid renderer associated to the scene.\r\n         */\r\n        fluidRenderer: Nullable<FluidRenderer>;\r\n\r\n        /**\r\n         * Enables the fluid renderer and associates it with the scene\r\n         * @returns the FluidRenderer\r\n         */\r\n        enableFluidRenderer(): Nullable<FluidRenderer>;\r\n\r\n        /**\r\n         * Disables the fluid renderer associated with the scene\r\n         */\r\n        disableFluidRenderer(): void;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Scene.prototype, \"fluidRenderer\", {\r\n    get: function (this: Scene) {\r\n        return this._fluidRenderer;\r\n    },\r\n    set: function (this: Scene, value: Nullable<FluidRenderer>) {\r\n        this._fluidRenderer = value;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nScene.prototype.enableFluidRenderer = function (): Nullable<FluidRenderer> {\r\n    if (this._fluidRenderer) {\r\n        return this._fluidRenderer;\r\n    }\r\n\r\n    this._fluidRenderer = new FluidRenderer(this);\r\n\r\n    return this._fluidRenderer;\r\n};\r\n\r\nScene.prototype.disableFluidRenderer = function (): void {\r\n    this._fluidRenderer?.dispose();\r\n    this._fluidRenderer = null;\r\n};\r\n\r\ntype CameraMapForFluidRendering = [Array<FluidRenderingTargetRenderer>, { [key: string]: FluidRenderingDepthTextureCopy }];\r\n\r\nfunction IsParticleSystemObject(obj: FluidRenderingObject): obj is FluidRenderingObjectParticleSystem {\r\n    return !!(obj as FluidRenderingObjectParticleSystem).particleSystem;\r\n}\r\n\r\n/**\r\n * Defines the fluid renderer scene component responsible to render objects as fluids\r\n */\r\nexport class FluidRendererSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_FLUIDRENDERER;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._gatherActiveCameraRenderTargetsStage.registerStep(\r\n            SceneComponentConstants.STEP_GATHERACTIVECAMERARENDERTARGETS_FLUIDRENDERER,\r\n            this,\r\n            this._gatherActiveCameraRenderTargets\r\n        );\r\n        this.scene._afterCameraDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_FLUIDRENDERER, this, this._afterCameraDraw);\r\n    }\r\n\r\n    private _gatherActiveCameraRenderTargets(_renderTargets: SmartArrayNoDuplicate<RenderTargetTexture>): void {\r\n        this.scene.fluidRenderer?._prepareRendering();\r\n    }\r\n\r\n    private _afterCameraDraw(camera: Camera) {\r\n        this.scene.fluidRenderer?._render(camera);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        if (this.scene._fluidRenderer) {\r\n            // Release resources first\r\n            this.scene.disableFluidRenderer();\r\n\r\n            // Re-enable\r\n            this.scene.enableFluidRenderer();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources\r\n     */\r\n    public dispose(): void {\r\n        this.scene.disableFluidRenderer();\r\n    }\r\n}\r\n\r\n/**\r\n * An object rendered as a fluid.\r\n * It consists of the object itself as well as the render target renderer (which is used to generate the textures (render target) needed for fluid rendering)\r\n */\r\nexport interface IFluidRenderingRenderObject {\r\n    /** object rendered as a fluid */\r\n    object: FluidRenderingObject;\r\n    /** target renderer used to render the fluid object */\r\n    targetRenderer: FluidRenderingTargetRenderer;\r\n}\r\n\r\n/**\r\n * Class responsible for fluid rendering.\r\n * It is implementing the method described in https://developer.download.nvidia.com/presentations/2010/gdc/Direct3D_Effects.pdf\r\n */\r\nexport class FluidRenderer {\r\n    /** @internal */\r\n    public static _SceneComponentInitialization(scene: Scene) {\r\n        let component = scene._getComponent(SceneComponentConstants.NAME_FLUIDRENDERER) as FluidRendererSceneComponent;\r\n        if (!component) {\r\n            component = new FluidRendererSceneComponent(scene);\r\n            scene._addComponent(component);\r\n        }\r\n    }\r\n\r\n    private _scene: Scene;\r\n    private _engine: Engine;\r\n    private _onEngineResizeObserver: Nullable<Observer<Engine>>;\r\n    private _cameras: Map<Camera, CameraMapForFluidRendering>;\r\n\r\n    /** Retrieves all the render objects managed by the class */\r\n    public readonly renderObjects: Array<IFluidRenderingRenderObject>;\r\n\r\n    /** Retrieves all the render target renderers managed by the class */\r\n    public readonly targetRenderers: FluidRenderingTargetRenderer[];\r\n\r\n    /**\r\n     * Initializes the class\r\n     * @param scene Scene in which the objects are part of\r\n     */\r\n    constructor(scene: Scene) {\r\n        this._scene = scene;\r\n        this._engine = scene.getEngine();\r\n        this._onEngineResizeObserver = null;\r\n        this.renderObjects = [];\r\n        this.targetRenderers = [];\r\n        this._cameras = new Map();\r\n\r\n        FluidRenderer._SceneComponentInitialization(this._scene);\r\n\r\n        this._onEngineResizeObserver = this._engine.onResizeObservable.add(() => {\r\n            this._initialize();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reinitializes the class\r\n     * Can be used if you change the object priority (FluidRenderingObject.priority), to make sure the objects are rendered in the right order\r\n     */\r\n    public recreate(): void {\r\n        this._sortRenderingObjects();\r\n        this._initialize();\r\n    }\r\n\r\n    /**\r\n     * Gets the render object corresponding to a particle system (null if the particle system is not rendered as a fluid)\r\n     * @param ps The particle system\r\n     * @returns the render object corresponding to this particle system if any, otherwise null\r\n     */\r\n    public getRenderObjectFromParticleSystem(ps: IParticleSystem): Nullable<IFluidRenderingRenderObject> {\r\n        const index = this._getParticleSystemIndex(ps);\r\n        return index !== -1 ? this.renderObjects[index] : null;\r\n    }\r\n\r\n    /**\r\n     * Adds a particle system to the fluid renderer.\r\n     * Note that you should not normally call this method directly, as you can simply use the renderAsFluid property of the ParticleSystem/GPUParticleSystem class\r\n     * @param ps particle system\r\n     * @param generateDiffuseTexture True if you want to generate a diffuse texture from the particle system and use it as part of the fluid rendering (default: false)\r\n     * @param targetRenderer The target renderer used to display the particle system as a fluid. If not provided, the method will create a new one\r\n     * @param camera The camera used by the target renderer (if the target renderer is created by the method)\r\n     * @returns the render object corresponding to the particle system\r\n     */\r\n    public addParticleSystem(ps: IParticleSystem, generateDiffuseTexture?: boolean, targetRenderer?: FluidRenderingTargetRenderer, camera?: Camera): IFluidRenderingRenderObject {\r\n        const object = new FluidRenderingObjectParticleSystem(this._scene, ps);\r\n\r\n        object.onParticleSizeChanged.add(this._setParticleSizeForRenderTargets.bind(this));\r\n\r\n        if (!targetRenderer) {\r\n            targetRenderer = new FluidRenderingTargetRenderer(this._scene, camera);\r\n            this.targetRenderers.push(targetRenderer);\r\n        }\r\n\r\n        if (!targetRenderer._onUseVelocityChanged.hasObservers()) {\r\n            targetRenderer._onUseVelocityChanged.add(this._setUseVelocityForRenderObject.bind(this));\r\n        }\r\n\r\n        if (generateDiffuseTexture !== undefined) {\r\n            targetRenderer.generateDiffuseTexture = generateDiffuseTexture;\r\n        }\r\n\r\n        const renderObject = { object, targetRenderer };\r\n\r\n        this.renderObjects.push(renderObject);\r\n\r\n        this._sortRenderingObjects();\r\n\r\n        this._setParticleSizeForRenderTargets();\r\n\r\n        return renderObject;\r\n    }\r\n\r\n    /**\r\n     * Adds a custom particle set to the fluid renderer.\r\n     * @param buffers The list of buffers (should contain at least a \"position\" buffer!)\r\n     * @param numParticles Number of particles in each buffer\r\n     * @param generateDiffuseTexture True if you want to generate a diffuse texture from buffers and use it as part of the fluid rendering (default: false). For the texture to be generated correctly, you need a \"color\" buffer in the set!\r\n     * @param targetRenderer The target renderer used to display the particle system as a fluid. If not provided, the method will create a new one\r\n     * @param camera The camera used by the target renderer (if the target renderer is created by the method)\r\n     * @returns the render object corresponding to the custom particle set\r\n     */\r\n    public addCustomParticles(\r\n        buffers: { [key: string]: FloatArray },\r\n        numParticles: number,\r\n        generateDiffuseTexture?: boolean,\r\n        targetRenderer?: FluidRenderingTargetRenderer,\r\n        camera?: Camera\r\n    ): IFluidRenderingRenderObject {\r\n        const object = new FluidRenderingObjectCustomParticles(this._scene, buffers, numParticles);\r\n\r\n        object.onParticleSizeChanged.add(this._setParticleSizeForRenderTargets.bind(this));\r\n\r\n        if (!targetRenderer) {\r\n            targetRenderer = new FluidRenderingTargetRenderer(this._scene, camera);\r\n            this.targetRenderers.push(targetRenderer);\r\n        }\r\n\r\n        if (!targetRenderer._onUseVelocityChanged.hasObservers()) {\r\n            targetRenderer._onUseVelocityChanged.add(this._setUseVelocityForRenderObject.bind(this));\r\n        }\r\n\r\n        if (generateDiffuseTexture !== undefined) {\r\n            targetRenderer.generateDiffuseTexture = generateDiffuseTexture;\r\n        }\r\n\r\n        const renderObject = { object, targetRenderer };\r\n\r\n        this.renderObjects.push(renderObject);\r\n\r\n        this._sortRenderingObjects();\r\n\r\n        this._setParticleSizeForRenderTargets();\r\n\r\n        return renderObject;\r\n    }\r\n\r\n    /**\r\n     * Removes a render object from the fluid renderer\r\n     * @param renderObject the render object to remove\r\n     * @param removeUnusedTargetRenderer True to remove/dispose of the target renderer if it's not used anymore (default: true)\r\n     * @returns True if the render object has been found and released, else false\r\n     */\r\n    public removeRenderObject(renderObject: IFluidRenderingRenderObject, removeUnusedTargetRenderer = true): boolean {\r\n        const index = this.renderObjects.indexOf(renderObject);\r\n        if (index === -1) {\r\n            return false;\r\n        }\r\n\r\n        renderObject.object.dispose();\r\n\r\n        this.renderObjects.splice(index, 1);\r\n\r\n        if (removeUnusedTargetRenderer && this._removeUnusedTargetRenderers()) {\r\n            this._initialize();\r\n        } else {\r\n            this._setParticleSizeForRenderTargets();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private _sortRenderingObjects(): void {\r\n        this.renderObjects.sort((a, b) => {\r\n            return a.object.priority < b.object.priority ? -1 : a.object.priority > b.object.priority ? 1 : 0;\r\n        });\r\n    }\r\n\r\n    private _removeUnusedTargetRenderers(): boolean {\r\n        const indexes: { [id: number]: boolean } = {};\r\n\r\n        for (let i = 0; i < this.renderObjects.length; ++i) {\r\n            const targetRenderer = this.renderObjects[i].targetRenderer;\r\n            indexes[this.targetRenderers.indexOf(targetRenderer)] = true;\r\n        }\r\n\r\n        let removed = false;\r\n        const newList: Array<FluidRenderingTargetRenderer> = [];\r\n        for (let i = 0; i < this.targetRenderers.length; ++i) {\r\n            if (!indexes[i]) {\r\n                this.targetRenderers[i].dispose();\r\n                removed = true;\r\n            } else {\r\n                newList.push(this.targetRenderers[i]);\r\n            }\r\n        }\r\n\r\n        if (removed) {\r\n            this.targetRenderers.length = 0;\r\n            this.targetRenderers.push(...newList);\r\n        }\r\n\r\n        return removed;\r\n    }\r\n\r\n    private _getParticleSystemIndex(ps: IParticleSystem): number {\r\n        for (let i = 0; i < this.renderObjects.length; ++i) {\r\n            const obj = this.renderObjects[i].object;\r\n            if (IsParticleSystemObject(obj) && obj.particleSystem === ps) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    private _initialize(): void {\r\n        for (let i = 0; i < this.targetRenderers.length; ++i) {\r\n            this.targetRenderers[i].dispose();\r\n        }\r\n\r\n        const cameras: Map<Camera, CameraMapForFluidRendering> = new Map();\r\n\r\n        for (let i = 0; i < this.targetRenderers.length; ++i) {\r\n            const targetRenderer = this.targetRenderers[i];\r\n\r\n            targetRenderer._initialize();\r\n\r\n            if (targetRenderer.camera && targetRenderer._renderPostProcess) {\r\n                let list = cameras.get(targetRenderer.camera);\r\n                if (!list) {\r\n                    list = [[], {}];\r\n                    cameras.set(targetRenderer.camera, list);\r\n                }\r\n                list[0].push(targetRenderer);\r\n                targetRenderer.camera.attachPostProcess(targetRenderer._renderPostProcess, i);\r\n            }\r\n        }\r\n\r\n        let iterator = cameras.keys();\r\n        for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n            const camera = key.value;\r\n            const list = cameras.get(camera)!;\r\n\r\n            const firstPostProcess = camera._getFirstPostProcess();\r\n            if (!firstPostProcess) {\r\n                continue;\r\n            }\r\n\r\n            const [targetRenderers, copyDepthTextures] = list;\r\n\r\n            firstPostProcess.onSizeChangedObservable.add(() => {\r\n                if (!firstPostProcess.inputTexture.depthStencilTexture) {\r\n                    firstPostProcess.inputTexture.createDepthStencilTexture(0, true, this._engine.isStencilEnable, targetRenderers[0].samples);\r\n                }\r\n                for (const targetRenderer of targetRenderers) {\r\n                    const thicknessRT = targetRenderer._thicknessRenderTarget?.renderTarget;\r\n                    const thicknessTexture = thicknessRT?.texture;\r\n                    if (thicknessRT && thicknessTexture) {\r\n                        const key = thicknessTexture.width + \"_\" + thicknessTexture.height;\r\n                        let copyDepthTexture = copyDepthTextures[key];\r\n                        if (!copyDepthTexture) {\r\n                            copyDepthTexture = copyDepthTextures[key] = new FluidRenderingDepthTextureCopy(this._engine, thicknessTexture.width, thicknessTexture.height);\r\n                        }\r\n                        copyDepthTexture.depthRTWrapper._shareDepth(thicknessRT);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        // Dispose the CopyDepthTexture instances that we don't need anymore\r\n        iterator = this._cameras.keys();\r\n        for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n            const camera = key.value;\r\n            const list = this._cameras.get(camera)!;\r\n\r\n            const copyDepthTextures = list[1];\r\n\r\n            const list2 = cameras.get(camera);\r\n            if (!list2) {\r\n                for (const key in copyDepthTextures) {\r\n                    copyDepthTextures[key].dispose();\r\n                }\r\n            } else {\r\n                for (const key in copyDepthTextures) {\r\n                    if (!list2[1][key]) {\r\n                        copyDepthTextures[key].dispose();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._cameras.clear();\r\n        this._cameras = cameras;\r\n\r\n        this._setParticleSizeForRenderTargets();\r\n    }\r\n\r\n    private _setParticleSizeForRenderTargets(): void {\r\n        const particleSizes = new Map<FluidRenderingTargetRenderer, number>();\r\n\r\n        for (let i = 0; i < this.renderObjects.length; ++i) {\r\n            const renderingObject = this.renderObjects[i];\r\n            let curSize = particleSizes.get(renderingObject.targetRenderer);\r\n            if (curSize === undefined) {\r\n                curSize = 0;\r\n            }\r\n            particleSizes.set(renderingObject.targetRenderer, Math.max(curSize, renderingObject.object.particleSize));\r\n        }\r\n\r\n        particleSizes.forEach((particleSize, targetRenderer) => {\r\n            if (targetRenderer._depthRenderTarget) {\r\n                targetRenderer._depthRenderTarget.particleSize = particleSize;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _setUseVelocityForRenderObject(): void {\r\n        for (const renderingObject of this.renderObjects) {\r\n            renderingObject.object.useVelocity = renderingObject.targetRenderer.useVelocity;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _prepareRendering(): void {\r\n        for (const renderer of this.targetRenderers) {\r\n            if (renderer.needInitialization) {\r\n                this._initialize();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _render(forCamera?: Camera): void {\r\n        for (let i = 0; i < this.targetRenderers.length; ++i) {\r\n            if (!forCamera || this.targetRenderers[i].camera === forCamera) {\r\n                this.targetRenderers[i]._clearTargets();\r\n            }\r\n        }\r\n\r\n        const iterator = this._cameras.keys();\r\n        for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n            const camera = key.value;\r\n            const list = this._cameras.get(camera)!;\r\n            if (forCamera && camera !== forCamera) {\r\n                continue;\r\n            }\r\n\r\n            const firstPostProcess = camera._getFirstPostProcess();\r\n            if (!firstPostProcess) {\r\n                continue;\r\n            }\r\n\r\n            const sourceCopyDepth = firstPostProcess.inputTexture?.depthStencilTexture;\r\n            if (sourceCopyDepth) {\r\n                const [targetRenderers, copyDepthTextures] = list;\r\n                for (const targetRenderer of targetRenderers) {\r\n                    targetRenderer._bgDepthTexture = sourceCopyDepth;\r\n                }\r\n                for (const key in copyDepthTextures) {\r\n                    copyDepthTextures[key].copy(sourceCopyDepth);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.renderObjects.length; ++i) {\r\n            const renderingObject = this.renderObjects[i];\r\n            if (!forCamera || renderingObject.targetRenderer.camera === forCamera) {\r\n                renderingObject.targetRenderer._render(renderingObject.object);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes of all the ressources used by the class\r\n     */\r\n    public dispose(): void {\r\n        this._engine.onResizeObservable.remove(this._onEngineResizeObserver);\r\n        this._onEngineResizeObserver = null;\r\n\r\n        for (let i = 0; i < this.renderObjects.length; ++i) {\r\n            this.renderObjects[i].object.dispose();\r\n        }\r\n\r\n        for (let i = 0; i < this.targetRenderers.length; ++i) {\r\n            this.targetRenderers[i].dispose();\r\n        }\r\n\r\n        this._cameras.forEach((list) => {\r\n            const copyDepthTextures = list[1];\r\n            for (const key in copyDepthTextures) {\r\n                copyDepthTextures[key].dispose();\r\n            }\r\n        });\r\n\r\n        (this.renderObjects as Array<IFluidRenderingRenderObject>) = [];\r\n        (this.targetRenderers as FluidRenderingTargetRenderer[]) = [];\r\n        this._cameras.clear();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}