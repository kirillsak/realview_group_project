{"ast":null,"code":"import { Observable } from \"../../Misc/observable.js\";\n/**\n * This class represents a single component (for example button or thumbstick) of a motion controller\n */\nexport class WebXRControllerComponent {\n  /**\n   * Creates a new component for a motion controller.\n   * It is created by the motion controller itself\n   *\n   * @param id the id of this component\n   * @param type the type of the component\n   * @param _buttonIndex index in the buttons array of the gamepad\n   * @param _axesIndices indices of the values in the axes array of the gamepad\n   */\n  constructor(\n  /**\n   * the id of this component\n   */\n  id,\n  /**\n   * the type of the component\n   */\n  type, _buttonIndex = -1, _axesIndices = []) {\n    this.id = id;\n    this.type = type;\n    this._buttonIndex = _buttonIndex;\n    this._axesIndices = _axesIndices;\n    this._axes = {\n      x: 0,\n      y: 0\n    };\n    this._changes = {};\n    this._currentValue = 0;\n    this._hasChanges = false;\n    this._pressed = false;\n    this._touched = false;\n    /**\n     * If axes are available for this component (like a touchpad or thumbstick) the observers will be notified when\n     * the axes data changes\n     */\n    this.onAxisValueChangedObservable = new Observable();\n    /**\n     * Observers registered here will be triggered when the state of a button changes\n     * State change is either pressed / touched / value\n     */\n    this.onButtonStateChangedObservable = new Observable();\n  }\n  /**\n   * The current axes data. If this component has no axes it will still return an object { x: 0, y: 0 }\n   */\n  get axes() {\n    return this._axes;\n  }\n  /**\n   * Get the changes. Elements will be populated only if they changed with their previous and current value\n   */\n  get changes() {\n    return this._changes;\n  }\n  /**\n   * Return whether or not the component changed the last frame\n   */\n  get hasChanges() {\n    return this._hasChanges;\n  }\n  /**\n   * is the button currently pressed\n   */\n  get pressed() {\n    return this._pressed;\n  }\n  /**\n   * is the button currently touched\n   */\n  get touched() {\n    return this._touched;\n  }\n  /**\n   * Get the current value of this component\n   */\n  get value() {\n    return this._currentValue;\n  }\n  /**\n   * Dispose this component\n   */\n  dispose() {\n    this.onAxisValueChangedObservable.clear();\n    this.onButtonStateChangedObservable.clear();\n  }\n  /**\n   * Are there axes correlating to this component\n   * @returns true is axes data is available\n   */\n  isAxes() {\n    return this._axesIndices.length !== 0;\n  }\n  /**\n   * Is this component a button (hence - pressable)\n   * @returns true if can be pressed\n   */\n  isButton() {\n    return this._buttonIndex !== -1;\n  }\n  /**\n   * update this component using the gamepad object it is in. Called on every frame\n   * @param nativeController the native gamepad controller object\n   */\n  update(nativeController) {\n    let buttonUpdated = false;\n    let axesUpdate = false;\n    this._hasChanges = false;\n    this._changes = {};\n    if (this.isButton()) {\n      const button = nativeController.buttons[this._buttonIndex];\n      // defensive, in case a profile was forced\n      if (!button) {\n        return;\n      }\n      if (this._currentValue !== button.value) {\n        this.changes.value = {\n          current: button.value,\n          previous: this._currentValue\n        };\n        buttonUpdated = true;\n        this._currentValue = button.value;\n      }\n      if (this._touched !== button.touched) {\n        this.changes.touched = {\n          current: button.touched,\n          previous: this._touched\n        };\n        buttonUpdated = true;\n        this._touched = button.touched;\n      }\n      if (this._pressed !== button.pressed) {\n        this.changes.pressed = {\n          current: button.pressed,\n          previous: this._pressed\n        };\n        buttonUpdated = true;\n        this._pressed = button.pressed;\n      }\n    }\n    if (this.isAxes()) {\n      if (this._axes.x !== nativeController.axes[this._axesIndices[0]]) {\n        this.changes.axes = {\n          current: {\n            x: nativeController.axes[this._axesIndices[0]],\n            y: this._axes.y\n          },\n          previous: {\n            x: this._axes.x,\n            y: this._axes.y\n          }\n        };\n        this._axes.x = nativeController.axes[this._axesIndices[0]];\n        axesUpdate = true;\n      }\n      if (this._axes.y !== nativeController.axes[this._axesIndices[1]]) {\n        if (this.changes.axes) {\n          this.changes.axes.current.y = nativeController.axes[this._axesIndices[1]];\n        } else {\n          this.changes.axes = {\n            current: {\n              x: this._axes.x,\n              y: nativeController.axes[this._axesIndices[1]]\n            },\n            previous: {\n              x: this._axes.x,\n              y: this._axes.y\n            }\n          };\n        }\n        this._axes.y = nativeController.axes[this._axesIndices[1]];\n        axesUpdate = true;\n      }\n    }\n    if (buttonUpdated) {\n      this._hasChanges = true;\n      this.onButtonStateChangedObservable.notifyObservers(this);\n    }\n    if (axesUpdate) {\n      this._hasChanges = true;\n      this.onAxisValueChangedObservable.notifyObservers(this._axes);\n    }\n  }\n}\n/**\n * button component type\n */\nWebXRControllerComponent.BUTTON_TYPE = \"button\";\n/**\n * squeeze component type\n */\nWebXRControllerComponent.SQUEEZE_TYPE = \"squeeze\";\n/**\n * Thumbstick component type\n */\nWebXRControllerComponent.THUMBSTICK_TYPE = \"thumbstick\";\n/**\n * Touchpad component type\n */\nWebXRControllerComponent.TOUCHPAD_TYPE = \"touchpad\";\n/**\n * trigger component type\n */\nWebXRControllerComponent.TRIGGER_TYPE = \"trigger\";","map":{"version":3,"mappings":"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","names":["Observable","WebXRControllerComponent","constructor","id","type","_buttonIndex","_axesIndices","x","y","axes","_axes","changes","_changes","hasChanges","_hasChanges","pressed","_pressed","touched","_touched","value","_currentValue","dispose","onAxisValueChangedObservable","clear","onButtonStateChangedObservable","isAxes","length","isButton","update","nativeController","buttonUpdated","axesUpdate","button","buttons","current","previous","notifyObservers"],"sourceRoot":"","sources":["../../../../../lts/core/generated/XR/motionController/webXRControllerComponent.ts"],"sourcesContent":["import type { IMinimalMotionControllerObject, MotionControllerComponentType } from \"./webXRAbstractMotionController\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { IDisposable } from \"../../scene\";\r\n\r\n/**\r\n * X-Y values for axes in WebXR\r\n */\r\nexport interface IWebXRMotionControllerAxesValue {\r\n    /**\r\n     * The value of the x axis\r\n     */\r\n    x: number;\r\n    /**\r\n     * The value of the y-axis\r\n     */\r\n    y: number;\r\n}\r\n\r\n/**\r\n * changed / previous values for the values of this component\r\n */\r\nexport interface IWebXRMotionControllerComponentChangesValues<T> {\r\n    /**\r\n     * current (this frame) value\r\n     */\r\n    current: T;\r\n    /**\r\n     * previous (last change) value\r\n     */\r\n    previous: T;\r\n}\r\n\r\n/**\r\n * Represents changes in the component between current frame and last values recorded\r\n */\r\nexport interface IWebXRMotionControllerComponentChanges {\r\n    /**\r\n     * will be populated with previous and current values if axes changed\r\n     */\r\n    axes?: IWebXRMotionControllerComponentChangesValues<IWebXRMotionControllerAxesValue>;\r\n    /**\r\n     * will be populated with previous and current values if pressed changed\r\n     */\r\n    pressed?: IWebXRMotionControllerComponentChangesValues<boolean>;\r\n    /**\r\n     * will be populated with previous and current values if touched changed\r\n     */\r\n    touched?: IWebXRMotionControllerComponentChangesValues<boolean>;\r\n    /**\r\n     * will be populated with previous and current values if value changed\r\n     */\r\n    value?: IWebXRMotionControllerComponentChangesValues<number>;\r\n}\r\n/**\r\n * This class represents a single component (for example button or thumbstick) of a motion controller\r\n */\r\nexport class WebXRControllerComponent implements IDisposable {\r\n    private _axes: IWebXRMotionControllerAxesValue = {\r\n        x: 0,\r\n        y: 0,\r\n    };\r\n    private _changes: IWebXRMotionControllerComponentChanges = {};\r\n    private _currentValue: number = 0;\r\n    private _hasChanges: boolean = false;\r\n    private _pressed: boolean = false;\r\n    private _touched: boolean = false;\r\n\r\n    /**\r\n     * button component type\r\n     */\r\n    public static BUTTON_TYPE: MotionControllerComponentType = \"button\";\r\n    /**\r\n     * squeeze component type\r\n     */\r\n    public static SQUEEZE_TYPE: MotionControllerComponentType = \"squeeze\";\r\n    /**\r\n     * Thumbstick component type\r\n     */\r\n    public static THUMBSTICK_TYPE: MotionControllerComponentType = \"thumbstick\";\r\n    /**\r\n     * Touchpad component type\r\n     */\r\n    public static TOUCHPAD_TYPE: MotionControllerComponentType = \"touchpad\";\r\n    /**\r\n     * trigger component type\r\n     */\r\n    public static TRIGGER_TYPE: MotionControllerComponentType = \"trigger\";\r\n\r\n    /**\r\n     * If axes are available for this component (like a touchpad or thumbstick) the observers will be notified when\r\n     * the axes data changes\r\n     */\r\n    public onAxisValueChangedObservable: Observable<{ x: number; y: number }> = new Observable();\r\n    /**\r\n     * Observers registered here will be triggered when the state of a button changes\r\n     * State change is either pressed / touched / value\r\n     */\r\n    public onButtonStateChangedObservable: Observable<WebXRControllerComponent> = new Observable();\r\n\r\n    /**\r\n     * Creates a new component for a motion controller.\r\n     * It is created by the motion controller itself\r\n     *\r\n     * @param id the id of this component\r\n     * @param type the type of the component\r\n     * @param _buttonIndex index in the buttons array of the gamepad\r\n     * @param _axesIndices indices of the values in the axes array of the gamepad\r\n     */\r\n    constructor(\r\n        /**\r\n         * the id of this component\r\n         */\r\n        public id: string,\r\n        /**\r\n         * the type of the component\r\n         */\r\n        public type: MotionControllerComponentType,\r\n        private _buttonIndex: number = -1,\r\n        private _axesIndices: number[] = []\r\n    ) {}\r\n\r\n    /**\r\n     * The current axes data. If this component has no axes it will still return an object { x: 0, y: 0 }\r\n     */\r\n    public get axes(): IWebXRMotionControllerAxesValue {\r\n        return this._axes;\r\n    }\r\n\r\n    /**\r\n     * Get the changes. Elements will be populated only if they changed with their previous and current value\r\n     */\r\n    public get changes(): IWebXRMotionControllerComponentChanges {\r\n        return this._changes;\r\n    }\r\n\r\n    /**\r\n     * Return whether or not the component changed the last frame\r\n     */\r\n    public get hasChanges(): boolean {\r\n        return this._hasChanges;\r\n    }\r\n\r\n    /**\r\n     * is the button currently pressed\r\n     */\r\n    public get pressed(): boolean {\r\n        return this._pressed;\r\n    }\r\n\r\n    /**\r\n     * is the button currently touched\r\n     */\r\n    public get touched(): boolean {\r\n        return this._touched;\r\n    }\r\n\r\n    /**\r\n     * Get the current value of this component\r\n     */\r\n    public get value(): number {\r\n        return this._currentValue;\r\n    }\r\n\r\n    /**\r\n     * Dispose this component\r\n     */\r\n    public dispose(): void {\r\n        this.onAxisValueChangedObservable.clear();\r\n        this.onButtonStateChangedObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Are there axes correlating to this component\r\n     * @returns true is axes data is available\r\n     */\r\n    public isAxes(): boolean {\r\n        return this._axesIndices.length !== 0;\r\n    }\r\n\r\n    /**\r\n     * Is this component a button (hence - pressable)\r\n     * @returns true if can be pressed\r\n     */\r\n    public isButton(): boolean {\r\n        return this._buttonIndex !== -1;\r\n    }\r\n\r\n    /**\r\n     * update this component using the gamepad object it is in. Called on every frame\r\n     * @param nativeController the native gamepad controller object\r\n     */\r\n    public update(nativeController: IMinimalMotionControllerObject) {\r\n        let buttonUpdated = false;\r\n        let axesUpdate = false;\r\n        this._hasChanges = false;\r\n        this._changes = {};\r\n\r\n        if (this.isButton()) {\r\n            const button = nativeController.buttons[this._buttonIndex];\r\n            // defensive, in case a profile was forced\r\n            if (!button) {\r\n                return;\r\n            }\r\n            if (this._currentValue !== button.value) {\r\n                this.changes.value = {\r\n                    current: button.value,\r\n                    previous: this._currentValue,\r\n                };\r\n                buttonUpdated = true;\r\n                this._currentValue = button.value;\r\n            }\r\n            if (this._touched !== button.touched) {\r\n                this.changes.touched = {\r\n                    current: button.touched,\r\n                    previous: this._touched,\r\n                };\r\n                buttonUpdated = true;\r\n                this._touched = button.touched;\r\n            }\r\n            if (this._pressed !== button.pressed) {\r\n                this.changes.pressed = {\r\n                    current: button.pressed,\r\n                    previous: this._pressed,\r\n                };\r\n                buttonUpdated = true;\r\n                this._pressed = button.pressed;\r\n            }\r\n        }\r\n\r\n        if (this.isAxes()) {\r\n            if (this._axes.x !== nativeController.axes[this._axesIndices[0]]) {\r\n                this.changes.axes = {\r\n                    current: {\r\n                        x: nativeController.axes[this._axesIndices[0]],\r\n                        y: this._axes.y,\r\n                    },\r\n                    previous: {\r\n                        x: this._axes.x,\r\n                        y: this._axes.y,\r\n                    },\r\n                };\r\n                this._axes.x = nativeController.axes[this._axesIndices[0]];\r\n                axesUpdate = true;\r\n            }\r\n\r\n            if (this._axes.y !== nativeController.axes[this._axesIndices[1]]) {\r\n                if (this.changes.axes) {\r\n                    this.changes.axes.current.y = nativeController.axes[this._axesIndices[1]];\r\n                } else {\r\n                    this.changes.axes = {\r\n                        current: {\r\n                            x: this._axes.x,\r\n                            y: nativeController.axes[this._axesIndices[1]],\r\n                        },\r\n                        previous: {\r\n                            x: this._axes.x,\r\n                            y: this._axes.y,\r\n                        },\r\n                    };\r\n                }\r\n                this._axes.y = nativeController.axes[this._axesIndices[1]];\r\n                axesUpdate = true;\r\n            }\r\n        }\r\n\r\n        if (buttonUpdated) {\r\n            this._hasChanges = true;\r\n            this.onButtonStateChangedObservable.notifyObservers(this);\r\n        }\r\n        if (axesUpdate) {\r\n            this._hasChanges = true;\r\n            this.onAxisValueChangedObservable.notifyObservers(this._axes);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}