{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { SmartArray } from \"../Misc/smartArray.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { MorphTarget } from \"./morphTarget.js\";\nimport { RawTexture2DArray } from \"../Materials/Textures/rawTexture2DArray.js\";\n/**\n * This class is used to deform meshes using morphing between different targets\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/morphTargets\n */\nexport class MorphTargetManager {\n  /**\n   * Creates a new MorphTargetManager\n   * @param scene defines the current scene\n   */\n  constructor(scene = null) {\n    this._targets = new Array();\n    this._targetInfluenceChangedObservers = new Array();\n    this._targetDataLayoutChangedObservers = new Array();\n    this._activeTargets = new SmartArray(16);\n    this._supportsNormals = false;\n    this._supportsTangents = false;\n    this._supportsUVs = false;\n    this._vertexCount = 0;\n    this._textureVertexStride = 0;\n    this._textureWidth = 0;\n    this._textureHeight = 1;\n    this._uniqueId = 0;\n    this._tempInfluences = new Array();\n    this._canUseTextureForTargets = false;\n    this._blockCounter = 0;\n    /** @internal */\n    this._parentContainer = null;\n    /**\n     * Gets or sets a boolean indicating if influencers must be optimized (eg. recompiling the shader if less influencers are used)\n     */\n    this.optimizeInfluencers = true;\n    /**\n     * Gets or sets a boolean indicating if normals must be morphed\n     */\n    this.enableNormalMorphing = true;\n    /**\n     * Gets or sets a boolean indicating if tangents must be morphed\n     */\n    this.enableTangentMorphing = true;\n    /**\n     * Gets or sets a boolean indicating if UV must be morphed\n     */\n    this.enableUVMorphing = true;\n    this._useTextureToStoreTargets = true;\n    if (!scene) {\n      scene = EngineStore.LastCreatedScene;\n    }\n    this._scene = scene;\n    if (this._scene) {\n      this._scene.morphTargetManagers.push(this);\n      this._uniqueId = this._scene.getUniqueId();\n      const engineCaps = this._scene.getEngine().getCaps();\n      this._canUseTextureForTargets = engineCaps.canUseGLVertexID && engineCaps.textureFloat && engineCaps.maxVertexTextureImageUnits > 0 && engineCaps.texture2DArrayMaxLayerCount > 1;\n    }\n  }\n  /**\n   * Sets a boolean indicating that adding new target or updating an existing target will not update the underlying data buffers\n   */\n  set areUpdatesFrozen(block) {\n    if (block) {\n      this._blockCounter++;\n    } else {\n      this._blockCounter--;\n      if (this._blockCounter <= 0) {\n        this._blockCounter = 0;\n        this._syncActiveTargets(true);\n      }\n    }\n  }\n  get areUpdatesFrozen() {\n    return this._blockCounter > 0;\n  }\n  /**\n   * Gets the unique ID of this manager\n   */\n  get uniqueId() {\n    return this._uniqueId;\n  }\n  /**\n   * Gets the number of vertices handled by this manager\n   */\n  get vertexCount() {\n    return this._vertexCount;\n  }\n  /**\n   * Gets a boolean indicating if this manager supports morphing of normals\n   */\n  get supportsNormals() {\n    return this._supportsNormals && this.enableNormalMorphing;\n  }\n  /**\n   * Gets a boolean indicating if this manager supports morphing of tangents\n   */\n  get supportsTangents() {\n    return this._supportsTangents && this.enableTangentMorphing;\n  }\n  /**\n   * Gets a boolean indicating if this manager supports morphing of texture coordinates\n   */\n  get supportsUVs() {\n    return this._supportsUVs && this.enableUVMorphing;\n  }\n  /**\n   * Gets the number of targets stored in this manager\n   */\n  get numTargets() {\n    return this._targets.length;\n  }\n  /**\n   * Gets the number of influencers (ie. the number of targets with influences > 0)\n   */\n  get numInfluencers() {\n    return this._activeTargets.length;\n  }\n  /**\n   * Gets the list of influences (one per target)\n   */\n  get influences() {\n    return this._influences;\n  }\n  /**\n   * Gets or sets a boolean indicating that targets should be stored as a texture instead of using vertex attributes (default is true).\n   * Please note that this option is not available if the hardware does not support it\n   */\n  get useTextureToStoreTargets() {\n    return this._useTextureToStoreTargets;\n  }\n  set useTextureToStoreTargets(value) {\n    this._useTextureToStoreTargets = value;\n  }\n  /**\n   * Gets a boolean indicating that the targets are stored into a texture (instead of as attributes)\n   */\n  get isUsingTextureForTargets() {\n    return MorphTargetManager.EnableTextureStorage && this.useTextureToStoreTargets && this._canUseTextureForTargets;\n  }\n  /**\n   * Gets the active target at specified index. An active target is a target with an influence > 0\n   * @param index defines the index to check\n   * @returns the requested target\n   */\n  getActiveTarget(index) {\n    return this._activeTargets.data[index];\n  }\n  /**\n   * Gets the target at specified index\n   * @param index defines the index to check\n   * @returns the requested target\n   */\n  getTarget(index) {\n    return this._targets[index];\n  }\n  /**\n   * Add a new target to this manager\n   * @param target defines the target to add\n   */\n  addTarget(target) {\n    this._targets.push(target);\n    this._targetInfluenceChangedObservers.push(target.onInfluenceChanged.add(needUpdate => {\n      this._syncActiveTargets(needUpdate);\n    }));\n    this._targetDataLayoutChangedObservers.push(target._onDataLayoutChanged.add(() => {\n      this._syncActiveTargets(true);\n    }));\n    this._syncActiveTargets(true);\n  }\n  /**\n   * Removes a target from the manager\n   * @param target defines the target to remove\n   */\n  removeTarget(target) {\n    const index = this._targets.indexOf(target);\n    if (index >= 0) {\n      this._targets.splice(index, 1);\n      target.onInfluenceChanged.remove(this._targetInfluenceChangedObservers.splice(index, 1)[0]);\n      target._onDataLayoutChanged.remove(this._targetDataLayoutChangedObservers.splice(index, 1)[0]);\n      this._syncActiveTargets(true);\n    }\n  }\n  /**\n   * @internal\n   */\n  _bind(effect) {\n    effect.setFloat3(\"morphTargetTextureInfo\", this._textureVertexStride, this._textureWidth, this._textureHeight);\n    effect.setFloatArray(\"morphTargetTextureIndices\", this._morphTargetTextureIndices);\n    effect.setTexture(\"morphTargets\", this._targetStoreTexture);\n  }\n  /**\n   * Clone the current manager\n   * @returns a new MorphTargetManager\n   */\n  clone() {\n    const copy = new MorphTargetManager(this._scene);\n    for (const target of this._targets) {\n      copy.addTarget(target.clone());\n    }\n    copy.enableNormalMorphing = this.enableNormalMorphing;\n    copy.enableTangentMorphing = this.enableTangentMorphing;\n    copy.enableUVMorphing = this.enableUVMorphing;\n    return copy;\n  }\n  /**\n   * Serializes the current manager into a Serialization object\n   * @returns the serialized object\n   */\n  serialize() {\n    const serializationObject = {};\n    serializationObject.id = this.uniqueId;\n    serializationObject.targets = [];\n    for (const target of this._targets) {\n      serializationObject.targets.push(target.serialize());\n    }\n    return serializationObject;\n  }\n  _syncActiveTargets(needUpdate) {\n    if (this.areUpdatesFrozen) {\n      return;\n    }\n    let influenceCount = 0;\n    this._activeTargets.reset();\n    this._supportsNormals = true;\n    this._supportsTangents = true;\n    this._supportsUVs = true;\n    this._vertexCount = 0;\n    if (!this._morphTargetTextureIndices || this._morphTargetTextureIndices.length !== this._targets.length) {\n      this._morphTargetTextureIndices = new Float32Array(this._targets.length);\n    }\n    let targetIndex = -1;\n    for (const target of this._targets) {\n      targetIndex++;\n      if (target.influence === 0 && this.optimizeInfluencers) {\n        continue;\n      }\n      this._activeTargets.push(target);\n      this._morphTargetTextureIndices[influenceCount] = targetIndex;\n      this._tempInfluences[influenceCount++] = target.influence;\n      this._supportsNormals = this._supportsNormals && target.hasNormals;\n      this._supportsTangents = this._supportsTangents && target.hasTangents;\n      this._supportsUVs = this._supportsUVs && target.hasUVs;\n      const positions = target.getPositions();\n      if (positions) {\n        const vertexCount = positions.length / 3;\n        if (this._vertexCount === 0) {\n          this._vertexCount = vertexCount;\n        } else if (this._vertexCount !== vertexCount) {\n          Logger.Error(\"Incompatible target. Targets must all have the same vertices count.\");\n          return;\n        }\n      }\n    }\n    if (!this._influences || this._influences.length !== influenceCount) {\n      this._influences = new Float32Array(influenceCount);\n    }\n    for (let index = 0; index < influenceCount; index++) {\n      this._influences[index] = this._tempInfluences[index];\n    }\n    if (needUpdate) {\n      this.synchronize();\n    }\n  }\n  /**\n   * Synchronize the targets with all the meshes using this morph target manager\n   */\n  synchronize() {\n    if (!this._scene || this.areUpdatesFrozen) {\n      return;\n    }\n    if (this.isUsingTextureForTargets && this._vertexCount) {\n      this._textureVertexStride = 1;\n      if (this._supportsNormals) {\n        this._textureVertexStride++;\n      }\n      if (this._supportsTangents) {\n        this._textureVertexStride++;\n      }\n      if (this._supportsUVs) {\n        this._textureVertexStride++;\n      }\n      this._textureWidth = this._vertexCount * this._textureVertexStride;\n      this._textureHeight = 1;\n      const maxTextureSize = this._scene.getEngine().getCaps().maxTextureSize;\n      if (this._textureWidth > maxTextureSize) {\n        this._textureHeight = Math.ceil(this._textureWidth / maxTextureSize);\n        this._textureWidth = maxTextureSize;\n      }\n      let mustUpdateTexture = true;\n      if (this._targetStoreTexture) {\n        const textureSize = this._targetStoreTexture.getSize();\n        if (textureSize.width === this._textureWidth && textureSize.height === this._textureHeight && this._targetStoreTexture.depth === this._targets.length) {\n          mustUpdateTexture = false;\n        }\n      }\n      if (mustUpdateTexture) {\n        if (this._targetStoreTexture) {\n          this._targetStoreTexture.dispose();\n        }\n        const targetCount = this._targets.length;\n        const data = new Float32Array(targetCount * this._textureWidth * this._textureHeight * 4);\n        let offset = 0;\n        for (let index = 0; index < targetCount; index++) {\n          const target = this._targets[index];\n          const positions = target.getPositions();\n          const normals = target.getNormals();\n          const uvs = target.getUVs();\n          const tangents = target.getTangents();\n          if (!positions) {\n            if (index === 0) {\n              Logger.Error(\"Invalid morph target. Target must have positions.\");\n            }\n            return;\n          }\n          offset = index * this._textureWidth * this._textureHeight * 4;\n          for (let vertex = 0; vertex < this._vertexCount; vertex++) {\n            data[offset] = positions[vertex * 3];\n            data[offset + 1] = positions[vertex * 3 + 1];\n            data[offset + 2] = positions[vertex * 3 + 2];\n            offset += 4;\n            if (normals) {\n              data[offset] = normals[vertex * 3];\n              data[offset + 1] = normals[vertex * 3 + 1];\n              data[offset + 2] = normals[vertex * 3 + 2];\n              offset += 4;\n            }\n            if (uvs) {\n              data[offset] = uvs[vertex * 2];\n              data[offset + 1] = uvs[vertex * 2 + 1];\n              offset += 4;\n            }\n            if (tangents) {\n              data[offset] = tangents[vertex * 3];\n              data[offset + 1] = tangents[vertex * 3 + 1];\n              data[offset + 2] = tangents[vertex * 3 + 2];\n              offset += 4;\n            }\n          }\n        }\n        this._targetStoreTexture = RawTexture2DArray.CreateRGBATexture(data, this._textureWidth, this._textureHeight, targetCount, this._scene, false, false, 1, 1);\n      }\n    }\n    // Flag meshes as dirty to resync with the active targets\n    for (const mesh of this._scene.meshes) {\n      if (mesh.morphTargetManager === this) {\n        mesh._syncGeometryWithMorphTargetManager();\n      }\n    }\n  }\n  /**\n   * Release all resources\n   */\n  dispose() {\n    if (this._targetStoreTexture) {\n      this._targetStoreTexture.dispose();\n    }\n    this._targetStoreTexture = null;\n    // Remove from scene\n    if (this._scene) {\n      this._scene.removeMorphTargetManager(this);\n      if (this._parentContainer) {\n        const index = this._parentContainer.morphTargetManagers.indexOf(this);\n        if (index > -1) {\n          this._parentContainer.morphTargetManagers.splice(index, 1);\n        }\n        this._parentContainer = null;\n      }\n    }\n  }\n  // Statics\n  /**\n   * Creates a new MorphTargetManager from serialized data\n   * @param serializationObject defines the serialized data\n   * @param scene defines the hosting scene\n   * @returns the new MorphTargetManager\n   */\n  static Parse(serializationObject, scene) {\n    const result = new MorphTargetManager(scene);\n    result._uniqueId = serializationObject.id;\n    for (const targetData of serializationObject.targets) {\n      result.addTarget(MorphTarget.Parse(targetData, scene));\n    }\n    return result;\n  }\n}\n/** Enable storing morph target data into textures when set to true (true by default) */\nMorphTargetManager.EnableTextureStorage = true;","map":{"version":3,"mappings":"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","names":["SmartArray","Logger","EngineStore","MorphTarget","RawTexture2DArray","MorphTargetManager","constructor","scene","Array","LastCreatedScene","_scene","morphTargetManagers","push","_uniqueId","getUniqueId","engineCaps","getEngine","getCaps","_canUseTextureForTargets","canUseGLVertexID","textureFloat","maxVertexTextureImageUnits","texture2DArrayMaxLayerCount","areUpdatesFrozen","block","_blockCounter","_syncActiveTargets","uniqueId","vertexCount","_vertexCount","supportsNormals","_supportsNormals","enableNormalMorphing","supportsTangents","_supportsTangents","enableTangentMorphing","supportsUVs","_supportsUVs","enableUVMorphing","numTargets","_targets","length","numInfluencers","_activeTargets","influences","_influences","useTextureToStoreTargets","_useTextureToStoreTargets","value","isUsingTextureForTargets","EnableTextureStorage","getActiveTarget","index","data","getTarget","addTarget","target","_targetInfluenceChangedObservers","onInfluenceChanged","add","needUpdate","_targetDataLayoutChangedObservers","_onDataLayoutChanged","removeTarget","indexOf","splice","remove","_bind","effect","setFloat3","_textureVertexStride","_textureWidth","_textureHeight","setFloatArray","_morphTargetTextureIndices","setTexture","_targetStoreTexture","clone","copy","serialize","serializationObject","id","targets","influenceCount","reset","Float32Array","targetIndex","influence","optimizeInfluencers","_tempInfluences","hasNormals","hasTangents","hasUVs","positions","getPositions","Error","synchronize","maxTextureSize","Math","ceil","mustUpdateTexture","textureSize","getSize","width","height","depth","dispose","targetCount","offset","normals","getNormals","uvs","getUVs","tangents","getTangents","vertex","CreateRGBATexture","mesh","meshes","morphTargetManager","_syncGeometryWithMorphTargetManager","removeMorphTargetManager","_parentContainer","Parse","result","targetData"],"sourceRoot":"","sources":["../../../../lts/core/generated/Morph/morphTargetManager.ts"],"sourcesContent":["import type { Observer } from \"../Misc/observable\";\r\nimport { SmartArray } from \"../Misc/smartArray\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { IDisposable, Scene } from \"../scene\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { MorphTarget } from \"./morphTarget\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { RawTexture2DArray } from \"../Materials/Textures/rawTexture2DArray\";\r\nimport type { AbstractScene } from \"../abstractScene\";\r\n/**\r\n * This class is used to deform meshes using morphing between different targets\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/morphTargets\r\n */\r\nexport class MorphTargetManager implements IDisposable {\r\n    /** Enable storing morph target data into textures when set to true (true by default) */\r\n    public static EnableTextureStorage = true;\r\n\r\n    private _targets = new Array<MorphTarget>();\r\n    private _targetInfluenceChangedObservers = new Array<Nullable<Observer<boolean>>>();\r\n    private _targetDataLayoutChangedObservers = new Array<Nullable<Observer<void>>>();\r\n    private _activeTargets = new SmartArray<MorphTarget>(16);\r\n    private _scene: Nullable<Scene>;\r\n    private _influences: Float32Array;\r\n    private _morphTargetTextureIndices: Float32Array;\r\n    private _supportsNormals = false;\r\n    private _supportsTangents = false;\r\n    private _supportsUVs = false;\r\n    private _vertexCount = 0;\r\n    private _textureVertexStride = 0;\r\n    private _textureWidth = 0;\r\n    private _textureHeight = 1;\r\n    private _uniqueId = 0;\r\n    private _tempInfluences = new Array<number>();\r\n    private _canUseTextureForTargets = false;\r\n    private _blockCounter = 0;\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<AbstractScene> = null;\r\n\r\n    /** @internal */\r\n    public _targetStoreTexture: Nullable<RawTexture2DArray>;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if influencers must be optimized (eg. recompiling the shader if less influencers are used)\r\n     */\r\n    public optimizeInfluencers = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if normals must be morphed\r\n     */\r\n    public enableNormalMorphing = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if tangents must be morphed\r\n     */\r\n    public enableTangentMorphing = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if UV must be morphed\r\n     */\r\n    public enableUVMorphing = true;\r\n\r\n    /**\r\n     * Sets a boolean indicating that adding new target or updating an existing target will not update the underlying data buffers\r\n     */\r\n    public set areUpdatesFrozen(block: boolean) {\r\n        if (block) {\r\n            this._blockCounter++;\r\n        } else {\r\n            this._blockCounter--;\r\n            if (this._blockCounter <= 0) {\r\n                this._blockCounter = 0;\r\n\r\n                this._syncActiveTargets(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get areUpdatesFrozen() {\r\n        return this._blockCounter > 0;\r\n    }\r\n\r\n    /**\r\n     * Creates a new MorphTargetManager\r\n     * @param scene defines the current scene\r\n     */\r\n    public constructor(scene: Nullable<Scene> = null) {\r\n        if (!scene) {\r\n            scene = EngineStore.LastCreatedScene;\r\n        }\r\n\r\n        this._scene = scene;\r\n\r\n        if (this._scene) {\r\n            this._scene.morphTargetManagers.push(this);\r\n\r\n            this._uniqueId = this._scene.getUniqueId();\r\n\r\n            const engineCaps = this._scene.getEngine().getCaps();\r\n            this._canUseTextureForTargets =\r\n                engineCaps.canUseGLVertexID && engineCaps.textureFloat && engineCaps.maxVertexTextureImageUnits > 0 && engineCaps.texture2DArrayMaxLayerCount > 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the unique ID of this manager\r\n     */\r\n    public get uniqueId(): number {\r\n        return this._uniqueId;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of vertices handled by this manager\r\n     */\r\n    public get vertexCount(): number {\r\n        return this._vertexCount;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager supports morphing of normals\r\n     */\r\n    public get supportsNormals(): boolean {\r\n        return this._supportsNormals && this.enableNormalMorphing;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager supports morphing of tangents\r\n     */\r\n    public get supportsTangents(): boolean {\r\n        return this._supportsTangents && this.enableTangentMorphing;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager supports morphing of texture coordinates\r\n     */\r\n    public get supportsUVs(): boolean {\r\n        return this._supportsUVs && this.enableUVMorphing;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of targets stored in this manager\r\n     */\r\n    public get numTargets(): number {\r\n        return this._targets.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of influencers (ie. the number of targets with influences > 0)\r\n     */\r\n    public get numInfluencers(): number {\r\n        return this._activeTargets.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of influences (one per target)\r\n     */\r\n    public get influences(): Float32Array {\r\n        return this._influences;\r\n    }\r\n\r\n    private _useTextureToStoreTargets = true;\r\n    /**\r\n     * Gets or sets a boolean indicating that targets should be stored as a texture instead of using vertex attributes (default is true).\r\n     * Please note that this option is not available if the hardware does not support it\r\n     */\r\n    public get useTextureToStoreTargets(): boolean {\r\n        return this._useTextureToStoreTargets;\r\n    }\r\n\r\n    public set useTextureToStoreTargets(value: boolean) {\r\n        this._useTextureToStoreTargets = value;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the targets are stored into a texture (instead of as attributes)\r\n     */\r\n    public get isUsingTextureForTargets() {\r\n        return MorphTargetManager.EnableTextureStorage && this.useTextureToStoreTargets && this._canUseTextureForTargets;\r\n    }\r\n\r\n    /**\r\n     * Gets the active target at specified index. An active target is a target with an influence > 0\r\n     * @param index defines the index to check\r\n     * @returns the requested target\r\n     */\r\n    public getActiveTarget(index: number): MorphTarget {\r\n        return this._activeTargets.data[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the target at specified index\r\n     * @param index defines the index to check\r\n     * @returns the requested target\r\n     */\r\n    public getTarget(index: number): MorphTarget {\r\n        return this._targets[index];\r\n    }\r\n\r\n    /**\r\n     * Add a new target to this manager\r\n     * @param target defines the target to add\r\n     */\r\n    public addTarget(target: MorphTarget): void {\r\n        this._targets.push(target);\r\n        this._targetInfluenceChangedObservers.push(\r\n            target.onInfluenceChanged.add((needUpdate) => {\r\n                this._syncActiveTargets(needUpdate);\r\n            })\r\n        );\r\n        this._targetDataLayoutChangedObservers.push(\r\n            target._onDataLayoutChanged.add(() => {\r\n                this._syncActiveTargets(true);\r\n            })\r\n        );\r\n        this._syncActiveTargets(true);\r\n    }\r\n\r\n    /**\r\n     * Removes a target from the manager\r\n     * @param target defines the target to remove\r\n     */\r\n    public removeTarget(target: MorphTarget): void {\r\n        const index = this._targets.indexOf(target);\r\n        if (index >= 0) {\r\n            this._targets.splice(index, 1);\r\n\r\n            target.onInfluenceChanged.remove(this._targetInfluenceChangedObservers.splice(index, 1)[0]);\r\n            target._onDataLayoutChanged.remove(this._targetDataLayoutChangedObservers.splice(index, 1)[0]);\r\n            this._syncActiveTargets(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _bind(effect: Effect) {\r\n        effect.setFloat3(\"morphTargetTextureInfo\", this._textureVertexStride, this._textureWidth, this._textureHeight);\r\n        effect.setFloatArray(\"morphTargetTextureIndices\", this._morphTargetTextureIndices);\r\n        effect.setTexture(\"morphTargets\", this._targetStoreTexture);\r\n    }\r\n\r\n    /**\r\n     * Clone the current manager\r\n     * @returns a new MorphTargetManager\r\n     */\r\n    public clone(): MorphTargetManager {\r\n        const copy = new MorphTargetManager(this._scene);\r\n\r\n        for (const target of this._targets) {\r\n            copy.addTarget(target.clone());\r\n        }\r\n\r\n        copy.enableNormalMorphing = this.enableNormalMorphing;\r\n        copy.enableTangentMorphing = this.enableTangentMorphing;\r\n        copy.enableUVMorphing = this.enableUVMorphing;\r\n\r\n        return copy;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current manager into a Serialization object\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.id = this.uniqueId;\r\n\r\n        serializationObject.targets = [];\r\n        for (const target of this._targets) {\r\n            serializationObject.targets.push(target.serialize());\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    private _syncActiveTargets(needUpdate: boolean): void {\r\n        if (this.areUpdatesFrozen) {\r\n            return;\r\n        }\r\n\r\n        let influenceCount = 0;\r\n        this._activeTargets.reset();\r\n        this._supportsNormals = true;\r\n        this._supportsTangents = true;\r\n        this._supportsUVs = true;\r\n        this._vertexCount = 0;\r\n\r\n        if (!this._morphTargetTextureIndices || this._morphTargetTextureIndices.length !== this._targets.length) {\r\n            this._morphTargetTextureIndices = new Float32Array(this._targets.length);\r\n        }\r\n\r\n        let targetIndex = -1;\r\n        for (const target of this._targets) {\r\n            targetIndex++;\r\n            if (target.influence === 0 && this.optimizeInfluencers) {\r\n                continue;\r\n            }\r\n\r\n            this._activeTargets.push(target);\r\n            this._morphTargetTextureIndices[influenceCount] = targetIndex;\r\n            this._tempInfluences[influenceCount++] = target.influence;\r\n\r\n            this._supportsNormals = this._supportsNormals && target.hasNormals;\r\n            this._supportsTangents = this._supportsTangents && target.hasTangents;\r\n            this._supportsUVs = this._supportsUVs && target.hasUVs;\r\n\r\n            const positions = target.getPositions();\r\n            if (positions) {\r\n                const vertexCount = positions.length / 3;\r\n                if (this._vertexCount === 0) {\r\n                    this._vertexCount = vertexCount;\r\n                } else if (this._vertexCount !== vertexCount) {\r\n                    Logger.Error(\"Incompatible target. Targets must all have the same vertices count.\");\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!this._influences || this._influences.length !== influenceCount) {\r\n            this._influences = new Float32Array(influenceCount);\r\n        }\r\n\r\n        for (let index = 0; index < influenceCount; index++) {\r\n            this._influences[index] = this._tempInfluences[index];\r\n        }\r\n\r\n        if (needUpdate) {\r\n            this.synchronize();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Synchronize the targets with all the meshes using this morph target manager\r\n     */\r\n    public synchronize(): void {\r\n        if (!this._scene || this.areUpdatesFrozen) {\r\n            return;\r\n        }\r\n\r\n        if (this.isUsingTextureForTargets && this._vertexCount) {\r\n            this._textureVertexStride = 1;\r\n\r\n            if (this._supportsNormals) {\r\n                this._textureVertexStride++;\r\n            }\r\n\r\n            if (this._supportsTangents) {\r\n                this._textureVertexStride++;\r\n            }\r\n\r\n            if (this._supportsUVs) {\r\n                this._textureVertexStride++;\r\n            }\r\n\r\n            this._textureWidth = this._vertexCount * this._textureVertexStride;\r\n            this._textureHeight = 1;\r\n\r\n            const maxTextureSize = this._scene.getEngine().getCaps().maxTextureSize;\r\n            if (this._textureWidth > maxTextureSize) {\r\n                this._textureHeight = Math.ceil(this._textureWidth / maxTextureSize);\r\n                this._textureWidth = maxTextureSize;\r\n            }\r\n\r\n            let mustUpdateTexture = true;\r\n            if (this._targetStoreTexture) {\r\n                const textureSize = this._targetStoreTexture.getSize();\r\n                if (textureSize.width === this._textureWidth && textureSize.height === this._textureHeight && this._targetStoreTexture.depth === this._targets.length) {\r\n                    mustUpdateTexture = false;\r\n                }\r\n            }\r\n\r\n            if (mustUpdateTexture) {\r\n                if (this._targetStoreTexture) {\r\n                    this._targetStoreTexture.dispose();\r\n                }\r\n\r\n                const targetCount = this._targets.length;\r\n                const data = new Float32Array(targetCount * this._textureWidth * this._textureHeight * 4);\r\n\r\n                let offset = 0;\r\n                for (let index = 0; index < targetCount; index++) {\r\n                    const target = this._targets[index];\r\n\r\n                    const positions = target.getPositions();\r\n                    const normals = target.getNormals();\r\n                    const uvs = target.getUVs();\r\n                    const tangents = target.getTangents();\r\n\r\n                    if (!positions) {\r\n                        if (index === 0) {\r\n                            Logger.Error(\"Invalid morph target. Target must have positions.\");\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    offset = index * this._textureWidth * this._textureHeight * 4;\r\n                    for (let vertex = 0; vertex < this._vertexCount; vertex++) {\r\n                        data[offset] = positions[vertex * 3];\r\n                        data[offset + 1] = positions[vertex * 3 + 1];\r\n                        data[offset + 2] = positions[vertex * 3 + 2];\r\n\r\n                        offset += 4;\r\n\r\n                        if (normals) {\r\n                            data[offset] = normals[vertex * 3];\r\n                            data[offset + 1] = normals[vertex * 3 + 1];\r\n                            data[offset + 2] = normals[vertex * 3 + 2];\r\n                            offset += 4;\r\n                        }\r\n\r\n                        if (uvs) {\r\n                            data[offset] = uvs[vertex * 2];\r\n                            data[offset + 1] = uvs[vertex * 2 + 1];\r\n                            offset += 4;\r\n                        }\r\n\r\n                        if (tangents) {\r\n                            data[offset] = tangents[vertex * 3];\r\n                            data[offset + 1] = tangents[vertex * 3 + 1];\r\n                            data[offset + 2] = tangents[vertex * 3 + 2];\r\n                            offset += 4;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                this._targetStoreTexture = RawTexture2DArray.CreateRGBATexture(\r\n                    data,\r\n                    this._textureWidth,\r\n                    this._textureHeight,\r\n                    targetCount,\r\n                    this._scene,\r\n                    false,\r\n                    false,\r\n                    Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                    Constants.TEXTURETYPE_FLOAT\r\n                );\r\n            }\r\n        }\r\n\r\n        // Flag meshes as dirty to resync with the active targets\r\n        for (const mesh of this._scene.meshes) {\r\n            if ((<any>mesh).morphTargetManager === this) {\r\n                (<Mesh>mesh)._syncGeometryWithMorphTargetManager();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose() {\r\n        if (this._targetStoreTexture) {\r\n            this._targetStoreTexture.dispose();\r\n        }\r\n\r\n        this._targetStoreTexture = null;\r\n\r\n        // Remove from scene\r\n        if (this._scene) {\r\n            this._scene.removeMorphTargetManager(this);\r\n\r\n            if (this._parentContainer) {\r\n                const index = this._parentContainer.morphTargetManagers.indexOf(this);\r\n                if (index > -1) {\r\n                    this._parentContainer.morphTargetManagers.splice(index, 1);\r\n                }\r\n                this._parentContainer = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new MorphTargetManager from serialized data\r\n     * @param serializationObject defines the serialized data\r\n     * @param scene defines the hosting scene\r\n     * @returns the new MorphTargetManager\r\n     */\r\n    public static Parse(serializationObject: any, scene: Scene): MorphTargetManager {\r\n        const result = new MorphTargetManager(scene);\r\n\r\n        result._uniqueId = serializationObject.id;\r\n\r\n        for (const targetData of serializationObject.targets) {\r\n            result.addTarget(MorphTarget.Parse(targetData, scene));\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}