{"ast":null,"code":"import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used as a pass through\n */\nexport class ElbowBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new ElbowBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Neutral);\n    this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n    this._outputs[0]._typeConnectionSource = this._inputs[0];\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"ElbowBlock\";\n  }\n  /**\n   * Gets the input component\n   */\n  get input() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets or sets the target of the block\n   */\n  get target() {\n    const input = this._inputs[0];\n    if (input.isConnected) {\n      const block = input.connectedPoint.ownerBlock;\n      if (block.target !== NodeMaterialBlockTargets.VertexAndFragment) {\n        return block.target;\n      }\n      if (input.connectedPoint.target !== NodeMaterialBlockTargets.VertexAndFragment) {\n        return input.connectedPoint.target;\n      }\n    }\n    return this._target;\n  }\n  set target(value) {\n    if ((this._target & value) !== 0) {\n      return;\n    }\n    this._target = value;\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const output = this._outputs[0];\n    const input = this._inputs[0];\n    state.compilationString += this._declareOutput(output, state) + ` = ${input.associatedVariableName};\\r\\n`;\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.ElbowBlock\", ElbowBlock);","map":{"version":3,"mappings":"AAAA,SAASA,iBAAiB,QAAQ,yBAAuB;AACzD,SAASC,qCAAqC,QAAQ,mDAAiD;AAGvG,SAASC,wBAAwB,QAAQ,sCAAoC;AAC7E,SAASC,aAAa,QAAQ,4BAA0B;AACxD;;;AAGA,OAAM,MAAOC,UAAW,SAAQJ,iBAAiB;EAC7C;;;;EAIAK,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,EAAEJ,wBAAwB,CAACK,OAAO,CAAC;IAE7C,IAAI,CAACC,aAAa,CAAC,OAAO,EAAEP,qCAAqC,CAACQ,UAAU,CAAC;IAC7E,IAAI,CAACC,cAAc,CAAC,QAAQ,EAAET,qCAAqC,CAACU,YAAY,CAAC;IAEjF,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACC,qBAAqB,GAAG,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EAC5D;EAEA;;;;EAIOC,YAAY;IACf,OAAO,YAAY;EACvB;EAEA;;;EAGA,IAAWC,KAAK;IACZ,OAAO,IAAI,CAACF,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWG,MAAM;IACb,OAAO,IAAI,CAACL,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEA;;;EAGA,IAAWM,MAAM;IACb,MAAMF,KAAK,GAAG,IAAI,CAACF,OAAO,CAAC,CAAC,CAAC;IAC7B,IAAIE,KAAK,CAACG,WAAW,EAAE;MACnB,MAAMC,KAAK,GAAGJ,KAAK,CAACK,cAAe,CAACC,UAAU;MAC9C,IAAIF,KAAK,CAACF,MAAM,KAAKhB,wBAAwB,CAACqB,iBAAiB,EAAE;QAC7D,OAAOH,KAAK,CAACF,MAAM;;MAGvB,IAAIF,KAAK,CAACK,cAAe,CAACH,MAAM,KAAKhB,wBAAwB,CAACqB,iBAAiB,EAAE;QAC7E,OAAOP,KAAK,CAACK,cAAe,CAACH,MAAM;;;IAI3C,OAAO,IAAI,CAACM,OAAO;EACvB;EAEA,IAAWN,MAAM,CAACO,KAA+B;IAC7C,IAAI,CAAC,IAAI,CAACD,OAAO,GAAGC,KAAK,MAAM,CAAC,EAAE;MAC9B;;IAEJ,IAAI,CAACD,OAAO,GAAGC,KAAK;EACxB;EAEUC,WAAW,CAACC,KAA6B;IAC/C,KAAK,CAACD,WAAW,CAACC,KAAK,CAAC;IAExB,MAAMV,MAAM,GAAG,IAAI,CAACL,QAAQ,CAAC,CAAC,CAAC;IAC/B,MAAMI,KAAK,GAAG,IAAI,CAACF,OAAO,CAAC,CAAC,CAAC;IAE7Ba,KAAK,CAACC,iBAAiB,IAAI,IAAI,CAACC,cAAc,CAACZ,MAAM,EAAEU,KAAK,CAAC,GAAG,MAAMX,KAAK,CAACc,sBAAsB,OAAO;IAEzG,OAAO,IAAI;EACf;;AAGJ3B,aAAa,CAAC,oBAAoB,EAAEC,UAAU,CAAC","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","ElbowBlock","constructor","name","Neutral","registerInput","AutoDetect","registerOutput","BasedOnInput","_outputs","_typeConnectionSource","_inputs","getClassName","input","output","target","isConnected","block","connectedPoint","ownerBlock","VertexAndFragment","_target","value","_buildBlock","state","compilationString","_declareOutput","associatedVariableName"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Node/Blocks/elbowBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\n/**\r\n * Block used as a pass through\r\n */\r\nexport class ElbowBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new ElbowBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ElbowBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the target of the block\r\n     */\r\n    public get target() {\r\n        const input = this._inputs[0];\r\n        if (input.isConnected) {\r\n            const block = input.connectedPoint!.ownerBlock;\r\n            if (block.target !== NodeMaterialBlockTargets.VertexAndFragment) {\r\n                return block.target;\r\n            }\r\n\r\n            if (input.connectedPoint!.target !== NodeMaterialBlockTargets.VertexAndFragment) {\r\n                return input.connectedPoint!.target;\r\n            }\r\n        }\r\n\r\n        return this._target;\r\n    }\r\n\r\n    public set target(value: NodeMaterialBlockTargets) {\r\n        if ((this._target & value) !== 0) {\r\n            return;\r\n        }\r\n        this._target = value;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const output = this._outputs[0];\r\n        const input = this._inputs[0];\r\n\r\n        state.compilationString += this._declareOutput(output, state) + ` = ${input.associatedVariableName};\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ElbowBlock\", ElbowBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}