{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector.js\";\nimport { Mesh } from \"../mesh.js\";\nimport { VertexData } from \"../mesh.vertexData.js\";\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions.js\";\n/**\n * Creates the VertexData for a torus\n * @param options an object used to set the following optional parameters for the box, required but can be empty\n * * diameter the diameter of the torus, optional default 1\n * * thickness the diameter of the tube forming the torus, optional default 0.5\n * * tessellation the number of prism sides, 3 for a triangular prism, optional, default 24\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n * @param options.diameter\n * @param options.thickness\n * @param options.tessellation\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @returns the VertexData of the torus\n */\nexport function CreateTorusVertexData(options) {\n  const indices = [];\n  const positions = [];\n  const normals = [];\n  const uvs = [];\n  const diameter = options.diameter || 1;\n  const thickness = options.thickness || 0.5;\n  const tessellation = options.tessellation || 16;\n  const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\n  const stride = tessellation + 1;\n  for (let i = 0; i <= tessellation; i++) {\n    const u = i / tessellation;\n    const outerAngle = i * Math.PI * 2.0 / tessellation - Math.PI / 2.0;\n    const transform = Matrix.Translation(diameter / 2.0, 0, 0).multiply(Matrix.RotationY(outerAngle));\n    for (let j = 0; j <= tessellation; j++) {\n      const v = 1 - j / tessellation;\n      const innerAngle = j * Math.PI * 2.0 / tessellation + Math.PI;\n      const dx = Math.cos(innerAngle);\n      const dy = Math.sin(innerAngle);\n      // Create a vertex.\n      let normal = new Vector3(dx, dy, 0);\n      let position = normal.scale(thickness / 2);\n      const textureCoordinate = new Vector2(u, v);\n      position = Vector3.TransformCoordinates(position, transform);\n      normal = Vector3.TransformNormal(normal, transform);\n      positions.push(position.x, position.y, position.z);\n      normals.push(normal.x, normal.y, normal.z);\n      uvs.push(textureCoordinate.x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - textureCoordinate.y : textureCoordinate.y);\n      // And create indices for two triangles.\n      const nextI = (i + 1) % stride;\n      const nextJ = (j + 1) % stride;\n      indices.push(i * stride + j);\n      indices.push(i * stride + nextJ);\n      indices.push(nextI * stride + j);\n      indices.push(i * stride + nextJ);\n      indices.push(nextI * stride + nextJ);\n      indices.push(nextI * stride + j);\n    }\n  }\n  // Sides\n  VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\n  // Result\n  const vertexData = new VertexData();\n  vertexData.indices = indices;\n  vertexData.positions = positions;\n  vertexData.normals = normals;\n  vertexData.uvs = uvs;\n  return vertexData;\n}\n/**\n * Creates a torus mesh\n * * The parameter `diameter` sets the diameter size (float) of the torus (default 1)\n * * The parameter `thickness` sets the diameter size of the tube of the torus (float, default 0.5)\n * * The parameter `tessellation` sets the number of torus sides (positive integer, default 16)\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\n * @param name defines the name of the mesh\n * @param options defines the options used to create the mesh\n * @param options.diameter\n * @param options.thickness\n * @param options.tessellation\n * @param options.updatable\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @param scene defines the hosting scene\n * @returns the torus mesh\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#torus\n */\nexport function CreateTorus(name, options = {}, scene) {\n  const torus = new Mesh(name, scene);\n  options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n  torus._originalBuilderSideOrientation = options.sideOrientation;\n  const vertexData = CreateTorusVertexData(options);\n  vertexData.applyToMesh(torus, options.updatable);\n  return torus;\n}\n/**\n * Class containing static functions to help procedurally build meshes\n * @deprecated use CreateTorus instead\n */\nexport const TorusBuilder = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  CreateTorus\n};\nVertexData.CreateTorus = CreateTorusVertexData;\nMesh.CreateTorus = (name, diameter, thickness, tessellation, scene, updatable, sideOrientation) => {\n  const options = {\n    diameter,\n    thickness,\n    tessellation,\n    sideOrientation,\n    updatable\n  };\n  return CreateTorus(name, options, scene);\n};","map":{"version":3,"mappings":"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","names":["Matrix","Vector3","Vector2","Mesh","VertexData","CompatibilityOptions","CreateTorusVertexData","options","indices","positions","normals","uvs","diameter","thickness","tessellation","sideOrientation","DEFAULTSIDE","stride","i","u","outerAngle","Math","PI","transform","Translation","multiply","RotationY","j","v","innerAngle","dx","cos","dy","sin","normal","position","scale","textureCoordinate","TransformCoordinates","TransformNormal","push","x","y","z","UseOpenGLOrientationForUV","nextI","nextJ","_ComputeSides","frontUVs","backUVs","vertexData","CreateTorus","name","scene","torus","_GetDefaultSideOrientation","_originalBuilderSideOrientation","applyToMesh","updatable","TorusBuilder"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Meshes/Builders/torusBuilder.ts"],"sourcesContent":["import type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for a torus\r\n * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n * * diameter the diameter of the torus, optional default 1\r\n * * thickness the diameter of the tube forming the torus, optional default 0.5\r\n * * tessellation the number of prism sides, 3 for a triangular prism, optional, default 24\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.diameter\r\n * @param options.thickness\r\n * @param options.tessellation\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @returns the VertexData of the torus\r\n */\r\nexport function CreateTorusVertexData(options: { diameter?: number; thickness?: number; tessellation?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 }) {\r\n    const indices = [];\r\n    const positions = [];\r\n    const normals = [];\r\n    const uvs = [];\r\n\r\n    const diameter = options.diameter || 1;\r\n    const thickness = options.thickness || 0.5;\r\n    const tessellation = options.tessellation || 16;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    const stride = tessellation + 1;\r\n\r\n    for (let i = 0; i <= tessellation; i++) {\r\n        const u = i / tessellation;\r\n\r\n        const outerAngle = (i * Math.PI * 2.0) / tessellation - Math.PI / 2.0;\r\n\r\n        const transform = Matrix.Translation(diameter / 2.0, 0, 0).multiply(Matrix.RotationY(outerAngle));\r\n\r\n        for (let j = 0; j <= tessellation; j++) {\r\n            const v = 1 - j / tessellation;\r\n\r\n            const innerAngle = (j * Math.PI * 2.0) / tessellation + Math.PI;\r\n            const dx = Math.cos(innerAngle);\r\n            const dy = Math.sin(innerAngle);\r\n\r\n            // Create a vertex.\r\n            let normal = new Vector3(dx, dy, 0);\r\n            let position = normal.scale(thickness / 2);\r\n            const textureCoordinate = new Vector2(u, v);\r\n\r\n            position = Vector3.TransformCoordinates(position, transform);\r\n            normal = Vector3.TransformNormal(normal, transform);\r\n\r\n            positions.push(position.x, position.y, position.z);\r\n            normals.push(normal.x, normal.y, normal.z);\r\n            uvs.push(textureCoordinate.x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - textureCoordinate.y : textureCoordinate.y);\r\n\r\n            // And create indices for two triangles.\r\n            const nextI = (i + 1) % stride;\r\n            const nextJ = (j + 1) % stride;\r\n\r\n            indices.push(i * stride + j);\r\n            indices.push(i * stride + nextJ);\r\n            indices.push(nextI * stride + j);\r\n\r\n            indices.push(i * stride + nextJ);\r\n            indices.push(nextI * stride + nextJ);\r\n            indices.push(nextI * stride + j);\r\n        }\r\n    }\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a torus mesh\r\n * * The parameter `diameter` sets the diameter size (float) of the torus (default 1)\r\n * * The parameter `thickness` sets the diameter size of the tube of the torus (float, default 0.5)\r\n * * The parameter `tessellation` sets the number of torus sides (positive integer, default 16)\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.diameter\r\n * @param options.thickness\r\n * @param options.tessellation\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param scene defines the hosting scene\r\n * @returns the torus mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#torus\r\n */\r\nexport function CreateTorus(\r\n    name: string,\r\n    options: { diameter?: number; thickness?: number; tessellation?: number; updatable?: boolean; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 } = {},\r\n    scene?: Scene\r\n): Mesh {\r\n    const torus = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    torus._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateTorusVertexData(options);\r\n\r\n    vertexData.applyToMesh(torus, options.updatable);\r\n\r\n    return torus;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use CreateTorus instead\r\n */\r\nexport const TorusBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateTorus,\r\n};\r\n\r\nVertexData.CreateTorus = CreateTorusVertexData;\r\n\r\n(Mesh as any).CreateTorus = (name: string, diameter: number, thickness: number, tessellation: number, scene?: Scene, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        diameter,\r\n        thickness,\r\n        tessellation,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreateTorus(name, options, scene);\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}