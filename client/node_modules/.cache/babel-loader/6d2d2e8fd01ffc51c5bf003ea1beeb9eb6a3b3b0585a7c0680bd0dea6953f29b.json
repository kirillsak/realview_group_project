{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Quaternion, Vector3, Vector2, Matrix } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Animation } from \"./animation.js\";\nimport { Size } from \"../Maths/math.size.js\";\n// Static values to help the garbage collector\n// Quaternion\nconst _staticOffsetValueQuaternion = Object.freeze(new Quaternion(0, 0, 0, 0));\n// Vector3\nconst _staticOffsetValueVector3 = Object.freeze(Vector3.Zero());\n// Vector2\nconst _staticOffsetValueVector2 = Object.freeze(Vector2.Zero());\n// Size\nconst _staticOffsetValueSize = Object.freeze(Size.Zero());\n// Color3\nconst _staticOffsetValueColor3 = Object.freeze(Color3.Black());\n/**\n * Defines a runtime animation\n */\nexport class RuntimeAnimation {\n  /**\n   * Create a new RuntimeAnimation object\n   * @param target defines the target of the animation\n   * @param animation defines the source animation object\n   * @param scene defines the hosting scene\n   * @param host defines the initiating Animatable\n   */\n  constructor(target, animation, scene, host) {\n    this._events = new Array();\n    /**\n     * The current frame of the runtime animation\n     */\n    this._currentFrame = 0;\n    /**\n     * The original value of the runtime animation\n     */\n    this._originalValue = new Array();\n    /**\n     * The original blend value of the runtime animation\n     */\n    this._originalBlendValue = null;\n    /**\n     * The offsets cache of the runtime animation\n     */\n    this._offsetsCache = {};\n    /**\n     * The high limits cache of the runtime animation\n     */\n    this._highLimitsCache = {};\n    /**\n     * Specifies if the runtime animation has been stopped\n     */\n    this._stopped = false;\n    /**\n     * The blending factor of the runtime animation\n     */\n    this._blendingFactor = 0;\n    /**\n     * The current value of the runtime animation\n     */\n    this._currentValue = null;\n    this._currentActiveTarget = null;\n    this._directTarget = null;\n    /**\n     * The target path of the runtime animation\n     */\n    this._targetPath = \"\";\n    /**\n     * The weight of the runtime animation\n     */\n    this._weight = 1.0;\n    /**\n     * The ratio offset of the runtime animation\n     */\n    this._ratioOffset = 0;\n    /**\n     * The previous delay of the runtime animation\n     */\n    this._previousDelay = 0;\n    /**\n     * The previous ratio of the runtime animation\n     */\n    this._previousRatio = 0;\n    this._targetIsArray = false;\n    this._animation = animation;\n    this._target = target;\n    this._scene = scene;\n    this._host = host;\n    this._activeTargets = [];\n    animation._runtimeAnimations.push(this);\n    // State\n    this._animationState = {\n      key: 0,\n      repeatCount: 0,\n      loopMode: this._getCorrectLoopMode()\n    };\n    if (this._animation.dataType === Animation.ANIMATIONTYPE_MATRIX) {\n      this._animationState.workValue = Matrix.Zero();\n    }\n    // Limits\n    this._keys = this._animation.getKeys();\n    this._minFrame = this._keys[0].frame;\n    this._maxFrame = this._keys[this._keys.length - 1].frame;\n    this._minValue = this._keys[0].value;\n    this._maxValue = this._keys[this._keys.length - 1].value;\n    // Add a start key at frame 0 if missing\n    if (this._minFrame !== 0) {\n      const newKey = {\n        frame: 0,\n        value: this._minValue\n      };\n      this._keys.splice(0, 0, newKey);\n    }\n    // Check data\n    if (this._target instanceof Array) {\n      let index = 0;\n      for (const target of this._target) {\n        this._preparePath(target, index);\n        this._getOriginalValues(index);\n        index++;\n      }\n      this._targetIsArray = true;\n    } else {\n      this._preparePath(this._target);\n      this._getOriginalValues();\n      this._targetIsArray = false;\n      this._directTarget = this._activeTargets[0];\n    }\n    // Cloning events locally\n    const events = animation.getEvents();\n    if (events && events.length > 0) {\n      events.forEach(e => {\n        this._events.push(e._clone());\n      });\n    }\n    this._enableBlending = target && target.animationPropertiesOverride ? target.animationPropertiesOverride.enableBlending : this._animation.enableBlending;\n  }\n  /**\n   * Gets the current frame of the runtime animation\n   */\n  get currentFrame() {\n    return this._currentFrame;\n  }\n  /**\n   * Gets the weight of the runtime animation\n   */\n  get weight() {\n    return this._weight;\n  }\n  /**\n   * Gets the current value of the runtime animation\n   */\n  get currentValue() {\n    return this._currentValue;\n  }\n  /**\n   * Gets or sets the target path of the runtime animation\n   */\n  get targetPath() {\n    return this._targetPath;\n  }\n  /**\n   * Gets the actual target of the runtime animation\n   */\n  get target() {\n    return this._currentActiveTarget;\n  }\n  /**\n   * Gets the additive state of the runtime animation\n   */\n  get isAdditive() {\n    return this._host && this._host.isAdditive;\n  }\n  _preparePath(target, targetIndex = 0) {\n    const targetPropertyPath = this._animation.targetPropertyPath;\n    if (targetPropertyPath.length > 1) {\n      let property = target[targetPropertyPath[0]];\n      for (let index = 1; index < targetPropertyPath.length - 1; index++) {\n        property = property[targetPropertyPath[index]];\n      }\n      this._targetPath = targetPropertyPath[targetPropertyPath.length - 1];\n      this._activeTargets[targetIndex] = property;\n    } else {\n      this._targetPath = targetPropertyPath[0];\n      this._activeTargets[targetIndex] = target;\n    }\n  }\n  /**\n   * Gets the animation from the runtime animation\n   */\n  get animation() {\n    return this._animation;\n  }\n  /**\n   * Resets the runtime animation to the beginning\n   * @param restoreOriginal defines whether to restore the target property to the original value\n   */\n  reset(restoreOriginal = false) {\n    if (restoreOriginal) {\n      if (this._target instanceof Array) {\n        let index = 0;\n        for (const target of this._target) {\n          if (this._originalValue[index] !== undefined) {\n            this._setValue(target, this._activeTargets[index], this._originalValue[index], -1, index);\n          }\n          index++;\n        }\n      } else {\n        if (this._originalValue[0] !== undefined) {\n          this._setValue(this._target, this._directTarget, this._originalValue[0], -1, 0);\n        }\n      }\n    }\n    this._offsetsCache = {};\n    this._highLimitsCache = {};\n    this._currentFrame = 0;\n    this._blendingFactor = 0;\n    // Events\n    for (let index = 0; index < this._events.length; index++) {\n      this._events[index].isDone = false;\n    }\n  }\n  /**\n   * Specifies if the runtime animation is stopped\n   * @returns Boolean specifying if the runtime animation is stopped\n   */\n  isStopped() {\n    return this._stopped;\n  }\n  /**\n   * Disposes of the runtime animation\n   */\n  dispose() {\n    const index = this._animation.runtimeAnimations.indexOf(this);\n    if (index > -1) {\n      this._animation.runtimeAnimations.splice(index, 1);\n    }\n  }\n  /**\n   * Apply the interpolated value to the target\n   * @param currentValue defines the value computed by the animation\n   * @param weight defines the weight to apply to this value (Defaults to 1.0)\n   */\n  setValue(currentValue, weight) {\n    if (this._targetIsArray) {\n      for (let index = 0; index < this._target.length; index++) {\n        const target = this._target[index];\n        this._setValue(target, this._activeTargets[index], currentValue, weight, index);\n      }\n      return;\n    }\n    this._setValue(this._target, this._directTarget, currentValue, weight, 0);\n  }\n  _getOriginalValues(targetIndex = 0) {\n    let originalValue;\n    const target = this._activeTargets[targetIndex];\n    if (target.getRestPose && this._targetPath === \"_matrix\") {\n      // For bones\n      originalValue = target.getRestPose();\n    } else {\n      originalValue = target[this._targetPath];\n    }\n    if (originalValue && originalValue.clone) {\n      this._originalValue[targetIndex] = originalValue.clone();\n    } else {\n      this._originalValue[targetIndex] = originalValue;\n    }\n  }\n  _setValue(target, destination, currentValue, weight, targetIndex) {\n    // Set value\n    this._currentActiveTarget = destination;\n    this._weight = weight;\n    if (this._enableBlending && this._blendingFactor <= 1.0) {\n      if (!this._originalBlendValue) {\n        const originalValue = destination[this._targetPath];\n        if (originalValue.clone) {\n          this._originalBlendValue = originalValue.clone();\n        } else {\n          this._originalBlendValue = originalValue;\n        }\n      }\n      if (this._originalBlendValue.m) {\n        // Matrix\n        if (Animation.AllowMatrixDecomposeForInterpolation) {\n          if (this._currentValue) {\n            Matrix.DecomposeLerpToRef(this._originalBlendValue, currentValue, this._blendingFactor, this._currentValue);\n          } else {\n            this._currentValue = Matrix.DecomposeLerp(this._originalBlendValue, currentValue, this._blendingFactor);\n          }\n        } else {\n          if (this._currentValue) {\n            Matrix.LerpToRef(this._originalBlendValue, currentValue, this._blendingFactor, this._currentValue);\n          } else {\n            this._currentValue = Matrix.Lerp(this._originalBlendValue, currentValue, this._blendingFactor);\n          }\n        }\n      } else {\n        this._currentValue = Animation._UniversalLerp(this._originalBlendValue, currentValue, this._blendingFactor);\n      }\n      const blendingSpeed = target && target.animationPropertiesOverride ? target.animationPropertiesOverride.blendingSpeed : this._animation.blendingSpeed;\n      this._blendingFactor += blendingSpeed;\n    } else {\n      if (!this._currentValue) {\n        if (currentValue === null || currentValue === void 0 ? void 0 : currentValue.clone) {\n          this._currentValue = currentValue.clone();\n        } else {\n          this._currentValue = currentValue;\n        }\n      } else if (this._currentValue.copyFrom) {\n        this._currentValue.copyFrom(currentValue);\n      } else {\n        this._currentValue = currentValue;\n      }\n    }\n    if (weight !== -1.0) {\n      this._scene._registerTargetForLateAnimationBinding(this, this._originalValue[targetIndex]);\n    } else {\n      destination[this._targetPath] = this._currentValue;\n    }\n    if (target.markAsDirty) {\n      target.markAsDirty(this._animation.targetProperty);\n    }\n  }\n  /**\n   * Gets the loop pmode of the runtime animation\n   * @returns Loop Mode\n   */\n  _getCorrectLoopMode() {\n    if (this._target && this._target.animationPropertiesOverride) {\n      return this._target.animationPropertiesOverride.loopMode;\n    }\n    return this._animation.loopMode;\n  }\n  /**\n   * Move the current animation to a given frame\n   * @param frame defines the frame to move to\n   */\n  goToFrame(frame) {\n    const keys = this._animation.getKeys();\n    if (frame < keys[0].frame) {\n      frame = keys[0].frame;\n    } else if (frame > keys[keys.length - 1].frame) {\n      frame = keys[keys.length - 1].frame;\n    }\n    // Need to reset animation events\n    const events = this._events;\n    if (events.length) {\n      for (let index = 0; index < events.length; index++) {\n        if (!events[index].onlyOnce) {\n          // reset events in the future\n          events[index].isDone = events[index].frame < frame;\n        }\n      }\n    }\n    this._currentFrame = frame;\n    const currentValue = this._animation._interpolate(frame, this._animationState);\n    this.setValue(currentValue, -1);\n  }\n  /**\n   * @internal Internal use only\n   */\n  _prepareForSpeedRatioChange(newSpeedRatio) {\n    const newRatio = this._previousDelay * (this._animation.framePerSecond * newSpeedRatio) / 1000.0;\n    this._ratioOffset = this._previousRatio - newRatio;\n  }\n  /**\n   * Execute the current animation\n   * @param delay defines the delay to add to the current frame\n   * @param from defines the lower bound of the animation range\n   * @param to defines the upper bound of the animation range\n   * @param loop defines if the current animation must loop\n   * @param speedRatio defines the current speed ratio\n   * @param weight defines the weight of the animation (default is -1 so no weight)\n   * @returns a boolean indicating if the animation is running\n   */\n  animate(delay, from, to, loop, speedRatio, weight = -1.0) {\n    const animation = this._animation;\n    const targetPropertyPath = animation.targetPropertyPath;\n    if (!targetPropertyPath || targetPropertyPath.length < 1) {\n      this._stopped = true;\n      return false;\n    }\n    let returnValue = true;\n    // Check limits\n    if (from < this._minFrame || from > this._maxFrame) {\n      from = this._minFrame;\n    }\n    if (to < this._minFrame || to > this._maxFrame) {\n      to = this._maxFrame;\n    }\n    const range = to - from;\n    let offsetValue;\n    // Compute ratio which represents the frame delta between from and to\n    const ratio = delay * (animation.framePerSecond * speedRatio) / 1000.0 + this._ratioOffset;\n    let highLimitValue = 0;\n    this._previousDelay = delay;\n    this._previousRatio = ratio;\n    if (!loop && to >= from && ratio >= range) {\n      // If we are out of range and not looping get back to caller\n      returnValue = false;\n      highLimitValue = animation._getKeyValue(this._maxValue);\n    } else if (!loop && from >= to && ratio <= range) {\n      returnValue = false;\n      highLimitValue = animation._getKeyValue(this._minValue);\n    } else if (this._animationState.loopMode !== Animation.ANIMATIONLOOPMODE_CYCLE) {\n      const keyOffset = to.toString() + from.toString();\n      if (!this._offsetsCache[keyOffset]) {\n        this._animationState.repeatCount = 0;\n        this._animationState.loopMode = Animation.ANIMATIONLOOPMODE_CYCLE;\n        const fromValue = animation._interpolate(from, this._animationState);\n        const toValue = animation._interpolate(to, this._animationState);\n        this._animationState.loopMode = this._getCorrectLoopMode();\n        switch (animation.dataType) {\n          // Float\n          case Animation.ANIMATIONTYPE_FLOAT:\n            this._offsetsCache[keyOffset] = toValue - fromValue;\n            break;\n          // Quaternion\n          case Animation.ANIMATIONTYPE_QUATERNION:\n            this._offsetsCache[keyOffset] = toValue.subtract(fromValue);\n            break;\n          // Vector3\n          case Animation.ANIMATIONTYPE_VECTOR3:\n            this._offsetsCache[keyOffset] = toValue.subtract(fromValue);\n            break;\n          // Vector2\n          case Animation.ANIMATIONTYPE_VECTOR2:\n            this._offsetsCache[keyOffset] = toValue.subtract(fromValue);\n            break;\n          // Size\n          case Animation.ANIMATIONTYPE_SIZE:\n            this._offsetsCache[keyOffset] = toValue.subtract(fromValue);\n            break;\n          // Color3\n          case Animation.ANIMATIONTYPE_COLOR3:\n            this._offsetsCache[keyOffset] = toValue.subtract(fromValue);\n            break;\n          default:\n            break;\n        }\n        this._highLimitsCache[keyOffset] = toValue;\n      }\n      highLimitValue = this._highLimitsCache[keyOffset];\n      offsetValue = this._offsetsCache[keyOffset];\n    }\n    if (offsetValue === undefined) {\n      switch (animation.dataType) {\n        // Float\n        case Animation.ANIMATIONTYPE_FLOAT:\n          offsetValue = 0;\n          break;\n        // Quaternion\n        case Animation.ANIMATIONTYPE_QUATERNION:\n          offsetValue = _staticOffsetValueQuaternion;\n          break;\n        // Vector3\n        case Animation.ANIMATIONTYPE_VECTOR3:\n          offsetValue = _staticOffsetValueVector3;\n          break;\n        // Vector2\n        case Animation.ANIMATIONTYPE_VECTOR2:\n          offsetValue = _staticOffsetValueVector2;\n          break;\n        // Size\n        case Animation.ANIMATIONTYPE_SIZE:\n          offsetValue = _staticOffsetValueSize;\n          break;\n        // Color3\n        case Animation.ANIMATIONTYPE_COLOR3:\n          offsetValue = _staticOffsetValueColor3;\n      }\n    }\n    // Compute value\n    let currentFrame;\n    if (this._host && this._host.syncRoot) {\n      const syncRoot = this._host.syncRoot;\n      const hostNormalizedFrame = (syncRoot.masterFrame - syncRoot.fromFrame) / (syncRoot.toFrame - syncRoot.fromFrame);\n      currentFrame = from + (to - from) * hostNormalizedFrame;\n    } else {\n      if (ratio > 0 && from > to || ratio < 0 && from < to) {\n        currentFrame = returnValue && range !== 0 ? to + ratio % range : from;\n      } else {\n        currentFrame = returnValue && range !== 0 ? from + ratio % range : to;\n      }\n    }\n    const events = this._events;\n    // Reset event/state if looping\n    if (speedRatio > 0 && this.currentFrame > currentFrame || speedRatio < 0 && this.currentFrame < currentFrame) {\n      this._onLoop();\n      // Need to reset animation events\n      for (let index = 0; index < events.length; index++) {\n        if (!events[index].onlyOnce) {\n          // reset event, the animation is looping\n          events[index].isDone = false;\n        }\n      }\n      this._animationState.key = speedRatio > 0 ? 0 : animation.getKeys().length - 1;\n    }\n    this._currentFrame = currentFrame;\n    this._animationState.repeatCount = range === 0 ? 0 : ratio / range >> 0;\n    this._animationState.highLimitValue = highLimitValue;\n    this._animationState.offsetValue = offsetValue;\n    const currentValue = animation._interpolate(currentFrame, this._animationState);\n    // Set value\n    this.setValue(currentValue, weight);\n    // Check events\n    if (events.length) {\n      for (let index = 0; index < events.length; index++) {\n        // Make sure current frame has passed event frame and that event frame is within the current range\n        // Also, handle both forward and reverse animations\n        if (range > 0 && currentFrame >= events[index].frame && events[index].frame >= from || range < 0 && currentFrame <= events[index].frame && events[index].frame <= from) {\n          const event = events[index];\n          if (!event.isDone) {\n            // If event should be done only once, remove it.\n            if (event.onlyOnce) {\n              events.splice(index, 1);\n              index--;\n            }\n            event.isDone = true;\n            event.action(currentFrame);\n          } // Don't do anything if the event has already be done.\n        }\n      }\n    }\n\n    if (!returnValue) {\n      this._stopped = true;\n    }\n    return returnValue;\n  }\n}","map":{"version":3,"mappings":"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","names":["Quaternion","Vector3","Vector2","Matrix","Color3","Animation","Size","_staticOffsetValueQuaternion","Object","freeze","_staticOffsetValueVector3","Zero","_staticOffsetValueVector2","_staticOffsetValueSize","_staticOffsetValueColor3","Black","RuntimeAnimation","constructor","target","animation","scene","host","Array","_animation","_target","_scene","_host","_activeTargets","_runtimeAnimations","push","_animationState","key","repeatCount","loopMode","_getCorrectLoopMode","dataType","ANIMATIONTYPE_MATRIX","workValue","_keys","getKeys","_minFrame","frame","_maxFrame","length","_minValue","value","_maxValue","newKey","splice","index","_preparePath","_getOriginalValues","_targetIsArray","_directTarget","events","getEvents","forEach","e","_events","_clone","_enableBlending","animationPropertiesOverride","enableBlending","currentFrame","_currentFrame","weight","_weight","currentValue","_currentValue","targetPath","_targetPath","_currentActiveTarget","isAdditive","targetIndex","targetPropertyPath","property","reset","restoreOriginal","_originalValue","undefined","_setValue","_offsetsCache","_highLimitsCache","_blendingFactor","isDone","isStopped","_stopped","dispose","runtimeAnimations","indexOf","setValue","originalValue","getRestPose","clone","destination","_originalBlendValue","m","AllowMatrixDecomposeForInterpolation","DecomposeLerpToRef","DecomposeLerp","LerpToRef","Lerp","_UniversalLerp","blendingSpeed","copyFrom","_registerTargetForLateAnimationBinding","markAsDirty","targetProperty","goToFrame","keys","onlyOnce","_interpolate","_prepareForSpeedRatioChange","newSpeedRatio","newRatio","_previousDelay","framePerSecond","_ratioOffset","_previousRatio","animate","delay","from","to","loop","speedRatio","returnValue","range","offsetValue","ratio","highLimitValue","_getKeyValue","ANIMATIONLOOPMODE_CYCLE","keyOffset","toString","fromValue","toValue","ANIMATIONTYPE_FLOAT","ANIMATIONTYPE_QUATERNION","subtract","ANIMATIONTYPE_VECTOR3","ANIMATIONTYPE_VECTOR2","ANIMATIONTYPE_SIZE","ANIMATIONTYPE_COLOR3","syncRoot","hostNormalizedFrame","masterFrame","fromFrame","toFrame","_onLoop","event","action"],"sourceRoot":"","sources":["../../../../lts/core/generated/Animations/runtimeAnimation.ts"],"sourcesContent":["import type { DeepImmutable, Nullable } from \"../types\";\r\nimport { Quaternion, Vector3, Vector2, Matrix } from \"../Maths/math.vector\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport type { _IAnimationState } from \"./animation\";\r\nimport { Animation } from \"./animation\";\r\nimport type { AnimationEvent } from \"./animationEvent\";\r\n\r\ndeclare type Animatable = import(\"./animatable\").Animatable;\r\n\r\nimport type { Scene } from \"../scene\";\r\nimport type { IAnimationKey } from \"./animationKey\";\r\nimport { Size } from \"../Maths/math.size\";\r\n\r\n// Static values to help the garbage collector\r\n\r\n// Quaternion\r\nconst _staticOffsetValueQuaternion: DeepImmutable<Quaternion> = Object.freeze(new Quaternion(0, 0, 0, 0));\r\n\r\n// Vector3\r\nconst _staticOffsetValueVector3: DeepImmutable<Vector3> = Object.freeze(Vector3.Zero());\r\n\r\n// Vector2\r\nconst _staticOffsetValueVector2: DeepImmutable<Vector2> = Object.freeze(Vector2.Zero());\r\n\r\n// Size\r\nconst _staticOffsetValueSize: DeepImmutable<Size> = Object.freeze(Size.Zero());\r\n\r\n// Color3\r\nconst _staticOffsetValueColor3: DeepImmutable<Color3> = Object.freeze(Color3.Black());\r\n\r\n/**\r\n * Defines a runtime animation\r\n */\r\nexport class RuntimeAnimation {\r\n    private _events = new Array<AnimationEvent>();\r\n\r\n    /**\r\n     * The current frame of the runtime animation\r\n     */\r\n    private _currentFrame: number = 0;\r\n\r\n    /**\r\n     * The animation used by the runtime animation\r\n     */\r\n    private _animation: Animation;\r\n\r\n    /**\r\n     * The target of the runtime animation\r\n     */\r\n    private _target: any;\r\n\r\n    /**\r\n     * The initiating animatable\r\n     */\r\n    private _host: Animatable;\r\n\r\n    /**\r\n     * The original value of the runtime animation\r\n     */\r\n    private _originalValue = new Array<any>();\r\n\r\n    /**\r\n     * The original blend value of the runtime animation\r\n     */\r\n    private _originalBlendValue: Nullable<any> = null;\r\n\r\n    /**\r\n     * The offsets cache of the runtime animation\r\n     */\r\n    private _offsetsCache: { [key: string]: any } = {};\r\n\r\n    /**\r\n     * The high limits cache of the runtime animation\r\n     */\r\n    private _highLimitsCache: { [key: string]: any } = {};\r\n\r\n    /**\r\n     * Specifies if the runtime animation has been stopped\r\n     */\r\n    private _stopped = false;\r\n\r\n    /**\r\n     * The blending factor of the runtime animation\r\n     */\r\n    private _blendingFactor = 0;\r\n\r\n    /**\r\n     * The BabylonJS scene\r\n     */\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * The current value of the runtime animation\r\n     */\r\n    private _currentValue: Nullable<any> = null;\r\n\r\n    /** @internal */\r\n    public _animationState: _IAnimationState;\r\n\r\n    /**\r\n     * The active target of the runtime animation\r\n     */\r\n    private _activeTargets: any[];\r\n    private _currentActiveTarget: Nullable<any> = null;\r\n    private _directTarget: Nullable<any> = null;\r\n\r\n    /**\r\n     * The target path of the runtime animation\r\n     */\r\n    private _targetPath: string = \"\";\r\n\r\n    /**\r\n     * The weight of the runtime animation\r\n     */\r\n    private _weight = 1.0;\r\n\r\n    /**\r\n     * The ratio offset of the runtime animation\r\n     */\r\n    private _ratioOffset = 0;\r\n\r\n    /**\r\n     * The previous delay of the runtime animation\r\n     */\r\n    private _previousDelay: number = 0;\r\n\r\n    /**\r\n     * The previous ratio of the runtime animation\r\n     */\r\n    private _previousRatio: number = 0;\r\n\r\n    private _enableBlending: boolean;\r\n\r\n    private _keys: IAnimationKey[];\r\n    private _minFrame: number;\r\n    private _maxFrame: number;\r\n    private _minValue: any;\r\n    private _maxValue: any;\r\n    private _targetIsArray = false;\r\n\r\n    /**\r\n     * Gets the current frame of the runtime animation\r\n     */\r\n    public get currentFrame(): number {\r\n        return this._currentFrame;\r\n    }\r\n\r\n    /**\r\n     * Gets the weight of the runtime animation\r\n     */\r\n    public get weight(): number {\r\n        return this._weight;\r\n    }\r\n\r\n    /**\r\n     * Gets the current value of the runtime animation\r\n     */\r\n    public get currentValue(): any {\r\n        return this._currentValue;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the target path of the runtime animation\r\n     */\r\n    public get targetPath(): string {\r\n        return this._targetPath;\r\n    }\r\n\r\n    /**\r\n     * Gets the actual target of the runtime animation\r\n     */\r\n    public get target(): any {\r\n        return this._currentActiveTarget;\r\n    }\r\n\r\n    /**\r\n     * Gets the additive state of the runtime animation\r\n     */\r\n    public get isAdditive(): boolean {\r\n        return this._host && this._host.isAdditive;\r\n    }\r\n\r\n    /** @internal */\r\n    public _onLoop: () => void;\r\n\r\n    /**\r\n     * Create a new RuntimeAnimation object\r\n     * @param target defines the target of the animation\r\n     * @param animation defines the source animation object\r\n     * @param scene defines the hosting scene\r\n     * @param host defines the initiating Animatable\r\n     */\r\n    public constructor(target: any, animation: Animation, scene: Scene, host: Animatable) {\r\n        this._animation = animation;\r\n        this._target = target;\r\n        this._scene = scene;\r\n        this._host = host;\r\n        this._activeTargets = [];\r\n\r\n        animation._runtimeAnimations.push(this);\r\n\r\n        // State\r\n        this._animationState = {\r\n            key: 0,\r\n            repeatCount: 0,\r\n            loopMode: this._getCorrectLoopMode(),\r\n        };\r\n\r\n        if (this._animation.dataType === Animation.ANIMATIONTYPE_MATRIX) {\r\n            this._animationState.workValue = Matrix.Zero();\r\n        }\r\n\r\n        // Limits\r\n        this._keys = this._animation.getKeys();\r\n        this._minFrame = this._keys[0].frame;\r\n        this._maxFrame = this._keys[this._keys.length - 1].frame;\r\n        this._minValue = this._keys[0].value;\r\n        this._maxValue = this._keys[this._keys.length - 1].value;\r\n\r\n        // Add a start key at frame 0 if missing\r\n        if (this._minFrame !== 0) {\r\n            const newKey = { frame: 0, value: this._minValue };\r\n            this._keys.splice(0, 0, newKey);\r\n        }\r\n\r\n        // Check data\r\n        if (this._target instanceof Array) {\r\n            let index = 0;\r\n            for (const target of this._target) {\r\n                this._preparePath(target, index);\r\n                this._getOriginalValues(index);\r\n                index++;\r\n            }\r\n            this._targetIsArray = true;\r\n        } else {\r\n            this._preparePath(this._target);\r\n            this._getOriginalValues();\r\n            this._targetIsArray = false;\r\n            this._directTarget = this._activeTargets[0];\r\n        }\r\n\r\n        // Cloning events locally\r\n        const events = animation.getEvents();\r\n        if (events && events.length > 0) {\r\n            events.forEach((e) => {\r\n                this._events.push(e._clone());\r\n            });\r\n        }\r\n\r\n        this._enableBlending = target && target.animationPropertiesOverride ? target.animationPropertiesOverride.enableBlending : this._animation.enableBlending;\r\n    }\r\n\r\n    private _preparePath(target: any, targetIndex = 0) {\r\n        const targetPropertyPath = this._animation.targetPropertyPath;\r\n\r\n        if (targetPropertyPath.length > 1) {\r\n            let property = target[targetPropertyPath[0]];\r\n\r\n            for (let index = 1; index < targetPropertyPath.length - 1; index++) {\r\n                property = property[targetPropertyPath[index]];\r\n            }\r\n\r\n            this._targetPath = targetPropertyPath[targetPropertyPath.length - 1];\r\n            this._activeTargets[targetIndex] = property;\r\n        } else {\r\n            this._targetPath = targetPropertyPath[0];\r\n            this._activeTargets[targetIndex] = target;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the animation from the runtime animation\r\n     */\r\n    public get animation(): Animation {\r\n        return this._animation;\r\n    }\r\n\r\n    /**\r\n     * Resets the runtime animation to the beginning\r\n     * @param restoreOriginal defines whether to restore the target property to the original value\r\n     */\r\n    public reset(restoreOriginal = false): void {\r\n        if (restoreOriginal) {\r\n            if (this._target instanceof Array) {\r\n                let index = 0;\r\n                for (const target of this._target) {\r\n                    if (this._originalValue[index] !== undefined) {\r\n                        this._setValue(target, this._activeTargets[index], this._originalValue[index], -1, index);\r\n                    }\r\n                    index++;\r\n                }\r\n            } else {\r\n                if (this._originalValue[0] !== undefined) {\r\n                    this._setValue(this._target, this._directTarget, this._originalValue[0], -1, 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        this._offsetsCache = {};\r\n        this._highLimitsCache = {};\r\n        this._currentFrame = 0;\r\n        this._blendingFactor = 0;\r\n\r\n        // Events\r\n        for (let index = 0; index < this._events.length; index++) {\r\n            this._events[index].isDone = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies if the runtime animation is stopped\r\n     * @returns Boolean specifying if the runtime animation is stopped\r\n     */\r\n    public isStopped(): boolean {\r\n        return this._stopped;\r\n    }\r\n\r\n    /**\r\n     * Disposes of the runtime animation\r\n     */\r\n    public dispose(): void {\r\n        const index = this._animation.runtimeAnimations.indexOf(this);\r\n\r\n        if (index > -1) {\r\n            this._animation.runtimeAnimations.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply the interpolated value to the target\r\n     * @param currentValue defines the value computed by the animation\r\n     * @param weight defines the weight to apply to this value (Defaults to 1.0)\r\n     */\r\n    public setValue(currentValue: any, weight: number) {\r\n        if (this._targetIsArray) {\r\n            for (let index = 0; index < this._target.length; index++) {\r\n                const target = this._target[index];\r\n                this._setValue(target, this._activeTargets[index], currentValue, weight, index);\r\n            }\r\n            return;\r\n        }\r\n        this._setValue(this._target, this._directTarget, currentValue, weight, 0);\r\n    }\r\n\r\n    private _getOriginalValues(targetIndex = 0) {\r\n        let originalValue: any;\r\n        const target = this._activeTargets[targetIndex];\r\n\r\n        if (target.getRestPose && this._targetPath === \"_matrix\") {\r\n            // For bones\r\n            originalValue = target.getRestPose();\r\n        } else {\r\n            originalValue = target[this._targetPath];\r\n        }\r\n\r\n        if (originalValue && originalValue.clone) {\r\n            this._originalValue[targetIndex] = originalValue.clone();\r\n        } else {\r\n            this._originalValue[targetIndex] = originalValue;\r\n        }\r\n    }\r\n\r\n    private _setValue(target: any, destination: any, currentValue: any, weight: number, targetIndex: number): void {\r\n        // Set value\r\n        this._currentActiveTarget = destination;\r\n\r\n        this._weight = weight;\r\n\r\n        if (this._enableBlending && this._blendingFactor <= 1.0) {\r\n            if (!this._originalBlendValue) {\r\n                const originalValue = destination[this._targetPath];\r\n\r\n                if (originalValue.clone) {\r\n                    this._originalBlendValue = originalValue.clone();\r\n                } else {\r\n                    this._originalBlendValue = originalValue;\r\n                }\r\n            }\r\n\r\n            if (this._originalBlendValue.m) {\r\n                // Matrix\r\n                if (Animation.AllowMatrixDecomposeForInterpolation) {\r\n                    if (this._currentValue) {\r\n                        Matrix.DecomposeLerpToRef(this._originalBlendValue, currentValue, this._blendingFactor, this._currentValue);\r\n                    } else {\r\n                        this._currentValue = Matrix.DecomposeLerp(this._originalBlendValue, currentValue, this._blendingFactor);\r\n                    }\r\n                } else {\r\n                    if (this._currentValue) {\r\n                        Matrix.LerpToRef(this._originalBlendValue, currentValue, this._blendingFactor, this._currentValue);\r\n                    } else {\r\n                        this._currentValue = Matrix.Lerp(this._originalBlendValue, currentValue, this._blendingFactor);\r\n                    }\r\n                }\r\n            } else {\r\n                this._currentValue = Animation._UniversalLerp(this._originalBlendValue, currentValue, this._blendingFactor);\r\n            }\r\n\r\n            const blendingSpeed = target && target.animationPropertiesOverride ? target.animationPropertiesOverride.blendingSpeed : this._animation.blendingSpeed;\r\n            this._blendingFactor += blendingSpeed;\r\n        } else {\r\n            if (!this._currentValue) {\r\n                if (currentValue?.clone) {\r\n                    this._currentValue = currentValue.clone();\r\n                } else {\r\n                    this._currentValue = currentValue;\r\n                }\r\n            } else if (this._currentValue.copyFrom) {\r\n                this._currentValue.copyFrom(currentValue);\r\n            } else {\r\n                this._currentValue = currentValue;\r\n            }\r\n        }\r\n\r\n        if (weight !== -1.0) {\r\n            this._scene._registerTargetForLateAnimationBinding(this, this._originalValue[targetIndex]);\r\n        } else {\r\n            destination[this._targetPath] = this._currentValue;\r\n        }\r\n\r\n        if (target.markAsDirty) {\r\n            target.markAsDirty(this._animation.targetProperty);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the loop pmode of the runtime animation\r\n     * @returns Loop Mode\r\n     */\r\n    private _getCorrectLoopMode(): number | undefined {\r\n        if (this._target && this._target.animationPropertiesOverride) {\r\n            return this._target.animationPropertiesOverride.loopMode;\r\n        }\r\n\r\n        return this._animation.loopMode;\r\n    }\r\n\r\n    /**\r\n     * Move the current animation to a given frame\r\n     * @param frame defines the frame to move to\r\n     */\r\n    public goToFrame(frame: number): void {\r\n        const keys = this._animation.getKeys();\r\n\r\n        if (frame < keys[0].frame) {\r\n            frame = keys[0].frame;\r\n        } else if (frame > keys[keys.length - 1].frame) {\r\n            frame = keys[keys.length - 1].frame;\r\n        }\r\n\r\n        // Need to reset animation events\r\n        const events = this._events;\r\n        if (events.length) {\r\n            for (let index = 0; index < events.length; index++) {\r\n                if (!events[index].onlyOnce) {\r\n                    // reset events in the future\r\n                    events[index].isDone = events[index].frame < frame;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._currentFrame = frame;\r\n        const currentValue = this._animation._interpolate(frame, this._animationState);\r\n\r\n        this.setValue(currentValue, -1);\r\n    }\r\n\r\n    /**\r\n     * @internal Internal use only\r\n     */\r\n    public _prepareForSpeedRatioChange(newSpeedRatio: number): void {\r\n        const newRatio = (this._previousDelay * (this._animation.framePerSecond * newSpeedRatio)) / 1000.0;\r\n\r\n        this._ratioOffset = this._previousRatio - newRatio;\r\n    }\r\n\r\n    /**\r\n     * Execute the current animation\r\n     * @param delay defines the delay to add to the current frame\r\n     * @param from defines the lower bound of the animation range\r\n     * @param to defines the upper bound of the animation range\r\n     * @param loop defines if the current animation must loop\r\n     * @param speedRatio defines the current speed ratio\r\n     * @param weight defines the weight of the animation (default is -1 so no weight)\r\n     * @returns a boolean indicating if the animation is running\r\n     */\r\n    public animate(delay: number, from: number, to: number, loop: boolean, speedRatio: number, weight = -1.0): boolean {\r\n        const animation = this._animation;\r\n        const targetPropertyPath = animation.targetPropertyPath;\r\n        if (!targetPropertyPath || targetPropertyPath.length < 1) {\r\n            this._stopped = true;\r\n            return false;\r\n        }\r\n\r\n        let returnValue = true;\r\n\r\n        // Check limits\r\n        if (from < this._minFrame || from > this._maxFrame) {\r\n            from = this._minFrame;\r\n        }\r\n        if (to < this._minFrame || to > this._maxFrame) {\r\n            to = this._maxFrame;\r\n        }\r\n\r\n        const range = to - from;\r\n        let offsetValue: any;\r\n\r\n        // Compute ratio which represents the frame delta between from and to\r\n        const ratio = (delay * (animation.framePerSecond * speedRatio)) / 1000.0 + this._ratioOffset;\r\n        let highLimitValue = 0;\r\n\r\n        this._previousDelay = delay;\r\n        this._previousRatio = ratio;\r\n\r\n        if (!loop && to >= from && ratio >= range) {\r\n            // If we are out of range and not looping get back to caller\r\n            returnValue = false;\r\n            highLimitValue = animation._getKeyValue(this._maxValue);\r\n        } else if (!loop && from >= to && ratio <= range) {\r\n            returnValue = false;\r\n            highLimitValue = animation._getKeyValue(this._minValue);\r\n        } else if (this._animationState.loopMode !== Animation.ANIMATIONLOOPMODE_CYCLE) {\r\n            const keyOffset = to.toString() + from.toString();\r\n            if (!this._offsetsCache[keyOffset]) {\r\n                this._animationState.repeatCount = 0;\r\n                this._animationState.loopMode = Animation.ANIMATIONLOOPMODE_CYCLE;\r\n                const fromValue = animation._interpolate(from, this._animationState);\r\n                const toValue = animation._interpolate(to, this._animationState);\r\n\r\n                this._animationState.loopMode = this._getCorrectLoopMode();\r\n                switch (animation.dataType) {\r\n                    // Float\r\n                    case Animation.ANIMATIONTYPE_FLOAT:\r\n                        this._offsetsCache[keyOffset] = toValue - fromValue;\r\n                        break;\r\n                    // Quaternion\r\n                    case Animation.ANIMATIONTYPE_QUATERNION:\r\n                        this._offsetsCache[keyOffset] = toValue.subtract(fromValue);\r\n                        break;\r\n                    // Vector3\r\n                    case Animation.ANIMATIONTYPE_VECTOR3:\r\n                        this._offsetsCache[keyOffset] = toValue.subtract(fromValue);\r\n                        break;\r\n                    // Vector2\r\n                    case Animation.ANIMATIONTYPE_VECTOR2:\r\n                        this._offsetsCache[keyOffset] = toValue.subtract(fromValue);\r\n                        break;\r\n                    // Size\r\n                    case Animation.ANIMATIONTYPE_SIZE:\r\n                        this._offsetsCache[keyOffset] = toValue.subtract(fromValue);\r\n                        break;\r\n                    // Color3\r\n                    case Animation.ANIMATIONTYPE_COLOR3:\r\n                        this._offsetsCache[keyOffset] = toValue.subtract(fromValue);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                this._highLimitsCache[keyOffset] = toValue;\r\n            }\r\n\r\n            highLimitValue = this._highLimitsCache[keyOffset];\r\n            offsetValue = this._offsetsCache[keyOffset];\r\n        }\r\n\r\n        if (offsetValue === undefined) {\r\n            switch (animation.dataType) {\r\n                // Float\r\n                case Animation.ANIMATIONTYPE_FLOAT:\r\n                    offsetValue = 0;\r\n                    break;\r\n                // Quaternion\r\n                case Animation.ANIMATIONTYPE_QUATERNION:\r\n                    offsetValue = _staticOffsetValueQuaternion;\r\n                    break;\r\n                // Vector3\r\n                case Animation.ANIMATIONTYPE_VECTOR3:\r\n                    offsetValue = _staticOffsetValueVector3;\r\n                    break;\r\n                // Vector2\r\n                case Animation.ANIMATIONTYPE_VECTOR2:\r\n                    offsetValue = _staticOffsetValueVector2;\r\n                    break;\r\n                // Size\r\n                case Animation.ANIMATIONTYPE_SIZE:\r\n                    offsetValue = _staticOffsetValueSize;\r\n                    break;\r\n                // Color3\r\n                case Animation.ANIMATIONTYPE_COLOR3:\r\n                    offsetValue = _staticOffsetValueColor3;\r\n            }\r\n        }\r\n\r\n        // Compute value\r\n        let currentFrame: number;\r\n\r\n        if (this._host && this._host.syncRoot) {\r\n            const syncRoot = this._host.syncRoot;\r\n            const hostNormalizedFrame = (syncRoot.masterFrame - syncRoot.fromFrame) / (syncRoot.toFrame - syncRoot.fromFrame);\r\n            currentFrame = from + (to - from) * hostNormalizedFrame;\r\n        } else {\r\n            if ((ratio > 0 && from > to) || (ratio < 0 && from < to)) {\r\n                currentFrame = returnValue && range !== 0 ? to + (ratio % range) : from;\r\n            } else {\r\n                currentFrame = returnValue && range !== 0 ? from + (ratio % range) : to;\r\n            }\r\n        }\r\n\r\n        const events = this._events;\r\n\r\n        // Reset event/state if looping\r\n        if ((speedRatio > 0 && this.currentFrame > currentFrame) || (speedRatio < 0 && this.currentFrame < currentFrame)) {\r\n            this._onLoop();\r\n\r\n            // Need to reset animation events\r\n            for (let index = 0; index < events.length; index++) {\r\n                if (!events[index].onlyOnce) {\r\n                    // reset event, the animation is looping\r\n                    events[index].isDone = false;\r\n                }\r\n            }\r\n\r\n            this._animationState.key = speedRatio > 0 ? 0 : animation.getKeys().length - 1;\r\n        }\r\n        this._currentFrame = currentFrame;\r\n        this._animationState.repeatCount = range === 0 ? 0 : (ratio / range) >> 0;\r\n        this._animationState.highLimitValue = highLimitValue;\r\n        this._animationState.offsetValue = offsetValue;\r\n\r\n        const currentValue = animation._interpolate(currentFrame, this._animationState);\r\n\r\n        // Set value\r\n        this.setValue(currentValue, weight);\r\n\r\n        // Check events\r\n        if (events.length) {\r\n            for (let index = 0; index < events.length; index++) {\r\n                // Make sure current frame has passed event frame and that event frame is within the current range\r\n                // Also, handle both forward and reverse animations\r\n                if (\r\n                    (range > 0 && currentFrame >= events[index].frame && events[index].frame >= from) ||\r\n                    (range < 0 && currentFrame <= events[index].frame && events[index].frame <= from)\r\n                ) {\r\n                    const event = events[index];\r\n                    if (!event.isDone) {\r\n                        // If event should be done only once, remove it.\r\n                        if (event.onlyOnce) {\r\n                            events.splice(index, 1);\r\n                            index--;\r\n                        }\r\n                        event.isDone = true;\r\n                        event.action(currentFrame);\r\n                    } // Don't do anything if the event has already be done.\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!returnValue) {\r\n            this._stopped = true;\r\n        }\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}