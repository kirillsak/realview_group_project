{"ast":null,"code":"import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Operations supported by the ConditionalBlock block\n */\nexport var ConditionalBlockConditions;\n(function (ConditionalBlockConditions) {\n  /** Equal */\n  ConditionalBlockConditions[ConditionalBlockConditions[\"Equal\"] = 0] = \"Equal\";\n  /** NotEqual */\n  ConditionalBlockConditions[ConditionalBlockConditions[\"NotEqual\"] = 1] = \"NotEqual\";\n  /** LessThan */\n  ConditionalBlockConditions[ConditionalBlockConditions[\"LessThan\"] = 2] = \"LessThan\";\n  /** GreaterThan */\n  ConditionalBlockConditions[ConditionalBlockConditions[\"GreaterThan\"] = 3] = \"GreaterThan\";\n  /** LessOrEqual */\n  ConditionalBlockConditions[ConditionalBlockConditions[\"LessOrEqual\"] = 4] = \"LessOrEqual\";\n  /** GreaterOrEqual */\n  ConditionalBlockConditions[ConditionalBlockConditions[\"GreaterOrEqual\"] = 5] = \"GreaterOrEqual\";\n  /** Logical Exclusive OR */\n  ConditionalBlockConditions[ConditionalBlockConditions[\"Xor\"] = 6] = \"Xor\";\n  /** Logical Or */\n  ConditionalBlockConditions[ConditionalBlockConditions[\"Or\"] = 7] = \"Or\";\n  /** Logical And */\n  ConditionalBlockConditions[ConditionalBlockConditions[\"And\"] = 8] = \"And\";\n})(ConditionalBlockConditions || (ConditionalBlockConditions = {}));\n/**\n * Block used to apply conditional operation between floats\n * @since 5.0.0\n */\nexport class ConditionalBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new ConditionalBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Neutral);\n    /**\n     * Gets or sets the condition applied by the block\n     */\n    this.condition = ConditionalBlockConditions.LessThan;\n    this.registerInput(\"a\", NodeMaterialBlockConnectionPointTypes.Float);\n    this.registerInput(\"b\", NodeMaterialBlockConnectionPointTypes.Float);\n    this.registerInput(\"true\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\n    this.registerInput(\"false\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n    this._linkConnectionTypes(2, 3);\n    this._outputs[0]._typeConnectionSource = this._inputs[2];\n    this._outputs[0]._defaultConnectionPointType = NodeMaterialBlockConnectionPointTypes.Float;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"ConditionalBlock\";\n  }\n  /**\n   * Gets the first operand component\n   */\n  get a() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the second operand component\n   */\n  get b() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the value to return if condition is true\n   */\n  get true() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the value to return if condition is false\n   */\n  get false() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const output = this._outputs[0];\n    const trueStatement = this.true.isConnected ? this.true.associatedVariableName : \"1.0\";\n    const falseStatement = this.false.isConnected ? this.false.associatedVariableName : \"0.0\";\n    switch (this.condition) {\n      case ConditionalBlockConditions.Equal:\n        {\n          state.compilationString += this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} == ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\n          break;\n        }\n      case ConditionalBlockConditions.NotEqual:\n        {\n          state.compilationString += this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} != ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\n          break;\n        }\n      case ConditionalBlockConditions.LessThan:\n        {\n          state.compilationString += this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} < ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\n          break;\n        }\n      case ConditionalBlockConditions.LessOrEqual:\n        {\n          state.compilationString += this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} <= ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\n          break;\n        }\n      case ConditionalBlockConditions.GreaterThan:\n        {\n          state.compilationString += this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} > ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\n          break;\n        }\n      case ConditionalBlockConditions.GreaterOrEqual:\n        {\n          state.compilationString += this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} >= ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\n          break;\n        }\n      case ConditionalBlockConditions.Xor:\n        {\n          state.compilationString += this._declareOutput(output, state) + ` = (mod(${this.a.associatedVariableName} + ${this.b.associatedVariableName}, 2.0) > 0.0) ? ${trueStatement} : ${falseStatement};\\r\\n`;\n          break;\n        }\n      case ConditionalBlockConditions.Or:\n        {\n          state.compilationString += this._declareOutput(output, state) + ` = (min(${this.a.associatedVariableName} + ${this.b.associatedVariableName}, 1.0) > 0.0) ? ${trueStatement} : ${falseStatement};\\r\\n`;\n          break;\n        }\n      case ConditionalBlockConditions.And:\n        {\n          state.compilationString += this._declareOutput(output, state) + ` = (${this.a.associatedVariableName} * ${this.b.associatedVariableName} > 0.0)  ? ${trueStatement} : ${falseStatement};\\r\\n`;\n          break;\n        }\n    }\n    return this;\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.condition = this.condition;\n    return serializationObject;\n  }\n  _deserialize(serializationObject, scene, rootUrl) {\n    super._deserialize(serializationObject, scene, rootUrl);\n    this.condition = serializationObject.condition;\n  }\n  _dumpPropertiesCode() {\n    const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.condition = BABYLON.ConditionalBlockConditions.${ConditionalBlockConditions[this.condition]};\\r\\n`;\n    return codeString;\n  }\n}\nRegisterClass(\"BABYLON.ConditionalBlock\", ConditionalBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","ConditionalBlockConditions","ConditionalBlock","constructor","name","Neutral","LessThan","registerInput","Float","AutoDetect","registerOutput","BasedOnInput","_linkConnectionTypes","_outputs","_typeConnectionSource","_inputs","_defaultConnectionPointType","getClassName","a","b","true","false","output","_buildBlock","state","trueStatement","isConnected","associatedVariableName","falseStatement","condition","Equal","compilationString","_declareOutput","NotEqual","LessOrEqual","GreaterThan","GreaterOrEqual","Xor","Or","And","serialize","serializationObject","_deserialize","scene","rootUrl","_dumpPropertiesCode","codeString","_codeVariableName"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Node/Blocks/conditionalBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { Scene } from \"../../../scene\";\r\n\r\n/**\r\n * Operations supported by the ConditionalBlock block\r\n */\r\nexport enum ConditionalBlockConditions {\r\n    /** Equal */\r\n    Equal,\r\n    /** NotEqual */\r\n    NotEqual,\r\n    /** LessThan */\r\n    LessThan,\r\n    /** GreaterThan */\r\n    GreaterThan,\r\n    /** LessOrEqual */\r\n    LessOrEqual,\r\n    /** GreaterOrEqual */\r\n    GreaterOrEqual,\r\n    /** Logical Exclusive OR */\r\n    Xor,\r\n    /** Logical Or */\r\n    Or,\r\n    /** Logical And */\r\n    And,\r\n}\r\n\r\n/**\r\n * Block used to apply conditional operation between floats\r\n * @since 5.0.0\r\n */\r\nexport class ConditionalBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Gets or sets the condition applied by the block\r\n     */\r\n    public condition = ConditionalBlockConditions.LessThan;\r\n\r\n    /**\r\n     * Creates a new ConditionalBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"a\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerInput(\"b\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerInput(\"true\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\r\n        this.registerInput(\"false\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._linkConnectionTypes(2, 3);\r\n        this._outputs[0]._typeConnectionSource = this._inputs[2];\r\n        this._outputs[0]._defaultConnectionPointType = NodeMaterialBlockConnectionPointTypes.Float;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ConditionalBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first operand component\r\n     */\r\n    public get a(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the second operand component\r\n     */\r\n    public get b(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the value to return if condition is true\r\n     */\r\n    public get true(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the value to return if condition is false\r\n     */\r\n    public get false(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const output = this._outputs[0];\r\n\r\n        const trueStatement = this.true.isConnected ? this.true.associatedVariableName : \"1.0\";\r\n        const falseStatement = this.false.isConnected ? this.false.associatedVariableName : \"0.0\";\r\n\r\n        switch (this.condition) {\r\n            case ConditionalBlockConditions.Equal: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} == ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.NotEqual: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} != ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.LessThan: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} < ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.LessOrEqual: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} <= ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.GreaterThan: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} > ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.GreaterOrEqual: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} >= ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.Xor: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) +\r\n                    ` = (mod(${this.a.associatedVariableName} + ${this.b.associatedVariableName}, 2.0) > 0.0) ? ${trueStatement} : ${falseStatement};\\r\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.Or: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) +\r\n                    ` = (min(${this.a.associatedVariableName} + ${this.b.associatedVariableName}, 1.0) > 0.0) ? ${trueStatement} : ${falseStatement};\\r\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.And: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) +\r\n                    ` = (${this.a.associatedVariableName} * ${this.b.associatedVariableName} > 0.0)  ? ${trueStatement} : ${falseStatement};\\r\\n`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.condition = this.condition;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.condition = serializationObject.condition;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString =\r\n            super._dumpPropertiesCode() + `${this._codeVariableName}.condition = BABYLON.ConditionalBlockConditions.${ConditionalBlockConditions[this.condition]};\\r\\n`;\r\n        return codeString;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ConditionalBlock\", ConditionalBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}