{"ast":null,"code":"import { DeepCopier } from \"../../Misc/deepCopier.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\n/**\n * Particle emitter emitting particles from a point.\n * It emits the particles randomly between 2 given directions.\n */\nexport class PointParticleEmitter {\n  /**\n   * Creates a new instance PointParticleEmitter\n   */\n  constructor() {\n    /**\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\n     */\n    this.direction1 = new Vector3(0, 1.0, 0);\n    /**\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\n     */\n    this.direction2 = new Vector3(0, 1.0, 0);\n  }\n  /**\n   * Called by the particle System when the direction is computed for the created particle.\n   * @param worldMatrix is the world matrix of the particle system\n   * @param directionToUpdate is the direction vector to update with the result\n   * @param particle is the particle we are computed the direction for\n   * @param isLocal defines if the direction should be set in local space\n   */\n  startDirectionFunction(worldMatrix, directionToUpdate, particle, isLocal) {\n    const randX = Scalar.RandomRange(this.direction1.x, this.direction2.x);\n    const randY = Scalar.RandomRange(this.direction1.y, this.direction2.y);\n    const randZ = Scalar.RandomRange(this.direction1.z, this.direction2.z);\n    if (isLocal) {\n      directionToUpdate.copyFromFloats(randX, randY, randZ);\n      return;\n    }\n    Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\n  }\n  /**\n   * Called by the particle System when the position is computed for the created particle.\n   * @param worldMatrix is the world matrix of the particle system\n   * @param positionToUpdate is the position vector to update with the result\n   * @param particle is the particle we are computed the position for\n   * @param isLocal defines if the position should be set in local space\n   */\n  startPositionFunction(worldMatrix, positionToUpdate, particle, isLocal) {\n    if (isLocal) {\n      positionToUpdate.copyFromFloats(0, 0, 0);\n      return;\n    }\n    Vector3.TransformCoordinatesFromFloatsToRef(0, 0, 0, worldMatrix, positionToUpdate);\n  }\n  /**\n   * Clones the current emitter and returns a copy of it\n   * @returns the new emitter\n   */\n  clone() {\n    const newOne = new PointParticleEmitter();\n    DeepCopier.DeepCopy(this, newOne);\n    return newOne;\n  }\n  /**\n   * Called by the GPUParticleSystem to setup the update shader\n   * @param uboOrEffect defines the update shader\n   */\n  applyToShader(uboOrEffect) {\n    uboOrEffect.setVector3(\"direction1\", this.direction1);\n    uboOrEffect.setVector3(\"direction2\", this.direction2);\n  }\n  /**\n   * Creates the structure of the ubo for this particle emitter\n   * @param ubo ubo to create the structure for\n   */\n  buildUniformLayout(ubo) {\n    ubo.addUniform(\"direction1\", 3);\n    ubo.addUniform(\"direction2\", 3);\n  }\n  /**\n   * Returns a string to use to update the GPU particles update shader\n   * @returns a string containing the defines string\n   */\n  getEffectDefines() {\n    return \"#define POINTEMITTER\";\n  }\n  /**\n   * Returns the string \"PointParticleEmitter\"\n   * @returns a string containing the class name\n   */\n  getClassName() {\n    return \"PointParticleEmitter\";\n  }\n  /**\n   * Serializes the particle system to a JSON object.\n   * @returns the JSON object\n   */\n  serialize() {\n    const serializationObject = {};\n    serializationObject.type = this.getClassName();\n    serializationObject.direction1 = this.direction1.asArray();\n    serializationObject.direction2 = this.direction2.asArray();\n    return serializationObject;\n  }\n  /**\n   * Parse properties from a JSON object\n   * @param serializationObject defines the JSON object\n   */\n  parse(serializationObject) {\n    Vector3.FromArrayToRef(serializationObject.direction1, 0, this.direction1);\n    Vector3.FromArrayToRef(serializationObject.direction2, 0, this.direction2);\n  }\n}","map":{"version":3,"mappings":"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","names":["DeepCopier","Vector3","Scalar","PointParticleEmitter","constructor","startDirectionFunction","worldMatrix","directionToUpdate","particle","isLocal","randX","RandomRange","direction1","x","direction2","randY","y","randZ","z","copyFromFloats","TransformNormalFromFloatsToRef","startPositionFunction","positionToUpdate","TransformCoordinatesFromFloatsToRef","clone","newOne","DeepCopy","applyToShader","uboOrEffect","setVector3","buildUniformLayout","ubo","addUniform","getEffectDefines","getClassName","serialize","serializationObject","type","asArray","parse","FromArrayToRef"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Particles/EmitterTypes/pointParticleEmitter.ts"],"sourcesContent":["import { DeepCopier } from \"../../Misc/deepCopier\";\r\nimport type { Matrix } from \"../../Maths/math.vector\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Scalar } from \"../../Maths/math.scalar\";\r\nimport type { Particle } from \"../../Particles/particle\";\r\nimport type { IParticleEmitterType } from \"./IParticleEmitterType\";\r\nimport type { UniformBufferEffectCommonAccessor } from \"../../Materials/uniformBufferEffectCommonAccessor\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\n/**\r\n * Particle emitter emitting particles from a point.\r\n * It emits the particles randomly between 2 given directions.\r\n */\r\nexport class PointParticleEmitter implements IParticleEmitterType {\r\n    /**\r\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\r\n     */\r\n    public direction1 = new Vector3(0, 1.0, 0);\r\n    /**\r\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\r\n     */\r\n    public direction2 = new Vector3(0, 1.0, 0);\r\n\r\n    /**\r\n     * Creates a new instance PointParticleEmitter\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     * Called by the particle System when the direction is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param directionToUpdate is the direction vector to update with the result\r\n     * @param particle is the particle we are computed the direction for\r\n     * @param isLocal defines if the direction should be set in local space\r\n     */\r\n    public startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        const randX = Scalar.RandomRange(this.direction1.x, this.direction2.x);\r\n        const randY = Scalar.RandomRange(this.direction1.y, this.direction2.y);\r\n        const randZ = Scalar.RandomRange(this.direction1.z, this.direction2.z);\r\n\r\n        if (isLocal) {\r\n            directionToUpdate.copyFromFloats(randX, randY, randZ);\r\n            return;\r\n        }\r\n\r\n        Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Called by the particle System when the position is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param positionToUpdate is the position vector to update with the result\r\n     * @param particle is the particle we are computed the position for\r\n     * @param isLocal defines if the position should be set in local space\r\n     */\r\n    public startPositionFunction(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        if (isLocal) {\r\n            positionToUpdate.copyFromFloats(0, 0, 0);\r\n            return;\r\n        }\r\n        Vector3.TransformCoordinatesFromFloatsToRef(0, 0, 0, worldMatrix, positionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Clones the current emitter and returns a copy of it\r\n     * @returns the new emitter\r\n     */\r\n    public clone(): PointParticleEmitter {\r\n        const newOne = new PointParticleEmitter();\r\n\r\n        DeepCopier.DeepCopy(this, newOne);\r\n\r\n        return newOne;\r\n    }\r\n\r\n    /**\r\n     * Called by the GPUParticleSystem to setup the update shader\r\n     * @param uboOrEffect defines the update shader\r\n     */\r\n    public applyToShader(uboOrEffect: UniformBufferEffectCommonAccessor): void {\r\n        uboOrEffect.setVector3(\"direction1\", this.direction1);\r\n        uboOrEffect.setVector3(\"direction2\", this.direction2);\r\n    }\r\n\r\n    /**\r\n     * Creates the structure of the ubo for this particle emitter\r\n     * @param ubo ubo to create the structure for\r\n     */\r\n    public buildUniformLayout(ubo: UniformBuffer): void {\r\n        ubo.addUniform(\"direction1\", 3);\r\n        ubo.addUniform(\"direction2\", 3);\r\n    }\r\n\r\n    /**\r\n     * Returns a string to use to update the GPU particles update shader\r\n     * @returns a string containing the defines string\r\n     */\r\n    public getEffectDefines(): string {\r\n        return \"#define POINTEMITTER\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"PointParticleEmitter\"\r\n     * @returns a string containing the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"PointParticleEmitter\";\r\n    }\r\n\r\n    /**\r\n     * Serializes the particle system to a JSON object.\r\n     * @returns the JSON object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.type = this.getClassName();\r\n        serializationObject.direction1 = this.direction1.asArray();\r\n        serializationObject.direction2 = this.direction2.asArray();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse properties from a JSON object\r\n     * @param serializationObject defines the JSON object\r\n     */\r\n    public parse(serializationObject: any): void {\r\n        Vector3.FromArrayToRef(serializationObject.direction1, 0, this.direction1);\r\n        Vector3.FromArrayToRef(serializationObject.direction2, 0, this.direction2);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}