{"ast":null,"code":"import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Operations supported by the Trigonometry block\n */\nexport var TrigonometryBlockOperations;\n(function (TrigonometryBlockOperations) {\n  /** Cos */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Cos\"] = 0] = \"Cos\";\n  /** Sin */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Sin\"] = 1] = \"Sin\";\n  /** Abs */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Abs\"] = 2] = \"Abs\";\n  /** Exp */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Exp\"] = 3] = \"Exp\";\n  /** Exp2 */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Exp2\"] = 4] = \"Exp2\";\n  /** Round */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Round\"] = 5] = \"Round\";\n  /** Floor */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Floor\"] = 6] = \"Floor\";\n  /** Ceiling */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Ceiling\"] = 7] = \"Ceiling\";\n  /** Square root */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Sqrt\"] = 8] = \"Sqrt\";\n  /** Log */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Log\"] = 9] = \"Log\";\n  /** Tangent */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Tan\"] = 10] = \"Tan\";\n  /** Arc tangent */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"ArcTan\"] = 11] = \"ArcTan\";\n  /** Arc cosinus */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"ArcCos\"] = 12] = \"ArcCos\";\n  /** Arc sinus */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"ArcSin\"] = 13] = \"ArcSin\";\n  /** Fraction */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Fract\"] = 14] = \"Fract\";\n  /** Sign */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Sign\"] = 15] = \"Sign\";\n  /** To radians (from degrees) */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Radians\"] = 16] = \"Radians\";\n  /** To degrees (from radians) */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Degrees\"] = 17] = \"Degrees\";\n})(TrigonometryBlockOperations || (TrigonometryBlockOperations = {}));\n/**\n * Block used to apply trigonometry operation to floats\n */\nexport class TrigonometryBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new TrigonometryBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Neutral);\n    /**\n     * Gets or sets the operation applied by the block\n     */\n    this.operation = TrigonometryBlockOperations.Cos;\n    this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n    this._outputs[0]._typeConnectionSource = this._inputs[0];\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"TrigonometryBlock\";\n  }\n  /**\n   * Gets the input component\n   */\n  get input() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const output = this._outputs[0];\n    let operation = \"\";\n    switch (this.operation) {\n      case TrigonometryBlockOperations.Cos:\n        {\n          operation = \"cos\";\n          break;\n        }\n      case TrigonometryBlockOperations.Sin:\n        {\n          operation = \"sin\";\n          break;\n        }\n      case TrigonometryBlockOperations.Abs:\n        {\n          operation = \"abs\";\n          break;\n        }\n      case TrigonometryBlockOperations.Exp:\n        {\n          operation = \"exp\";\n          break;\n        }\n      case TrigonometryBlockOperations.Exp2:\n        {\n          operation = \"exp2\";\n          break;\n        }\n      case TrigonometryBlockOperations.Round:\n        {\n          operation = \"round\";\n          break;\n        }\n      case TrigonometryBlockOperations.Floor:\n        {\n          operation = \"floor\";\n          break;\n        }\n      case TrigonometryBlockOperations.Ceiling:\n        {\n          operation = \"ceil\";\n          break;\n        }\n      case TrigonometryBlockOperations.Sqrt:\n        {\n          operation = \"sqrt\";\n          break;\n        }\n      case TrigonometryBlockOperations.Log:\n        {\n          operation = \"log\";\n          break;\n        }\n      case TrigonometryBlockOperations.Tan:\n        {\n          operation = \"tan\";\n          break;\n        }\n      case TrigonometryBlockOperations.ArcTan:\n        {\n          operation = \"atan\";\n          break;\n        }\n      case TrigonometryBlockOperations.ArcCos:\n        {\n          operation = \"acos\";\n          break;\n        }\n      case TrigonometryBlockOperations.ArcSin:\n        {\n          operation = \"asin\";\n          break;\n        }\n      case TrigonometryBlockOperations.Fract:\n        {\n          operation = \"fract\";\n          break;\n        }\n      case TrigonometryBlockOperations.Sign:\n        {\n          operation = \"sign\";\n          break;\n        }\n      case TrigonometryBlockOperations.Radians:\n        {\n          operation = \"radians\";\n          break;\n        }\n      case TrigonometryBlockOperations.Degrees:\n        {\n          operation = \"degrees\";\n          break;\n        }\n    }\n    state.compilationString += this._declareOutput(output, state) + ` = ${operation}(${this.input.associatedVariableName});\\r\\n`;\n    return this;\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.operation = this.operation;\n    return serializationObject;\n  }\n  _deserialize(serializationObject, scene, rootUrl) {\n    super._deserialize(serializationObject, scene, rootUrl);\n    this.operation = serializationObject.operation;\n  }\n  _dumpPropertiesCode() {\n    const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.operation = BABYLON.TrigonometryBlockOperations.${TrigonometryBlockOperations[this.operation]};\\r\\n`;\n    return codeString;\n  }\n}\nRegisterClass(\"BABYLON.TrigonometryBlock\", TrigonometryBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","TrigonometryBlockOperations","TrigonometryBlock","constructor","name","Neutral","Cos","registerInput","AutoDetect","registerOutput","BasedOnInput","_outputs","_typeConnectionSource","_inputs","getClassName","input","output","_buildBlock","state","operation","Sin","Abs","Exp","Exp2","Round","Floor","Ceiling","Sqrt","Log","Tan","ArcTan","ArcCos","ArcSin","Fract","Sign","Radians","Degrees","compilationString","_declareOutput","associatedVariableName","serialize","serializationObject","_deserialize","scene","rootUrl","_dumpPropertiesCode","codeString","_codeVariableName"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Node/Blocks/trigonometryBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { Scene } from \"../../../scene\";\r\n\r\n/**\r\n * Operations supported by the Trigonometry block\r\n */\r\nexport enum TrigonometryBlockOperations {\r\n    /** Cos */\r\n    Cos,\r\n    /** Sin */\r\n    Sin,\r\n    /** Abs */\r\n    Abs,\r\n    /** Exp */\r\n    Exp,\r\n    /** Exp2 */\r\n    Exp2,\r\n    /** Round */\r\n    Round,\r\n    /** Floor */\r\n    Floor,\r\n    /** Ceiling */\r\n    Ceiling,\r\n    /** Square root */\r\n    Sqrt,\r\n    /** Log */\r\n    Log,\r\n    /** Tangent */\r\n    Tan,\r\n    /** Arc tangent */\r\n    ArcTan,\r\n    /** Arc cosinus */\r\n    ArcCos,\r\n    /** Arc sinus */\r\n    ArcSin,\r\n    /** Fraction */\r\n    Fract,\r\n    /** Sign */\r\n    Sign,\r\n    /** To radians (from degrees) */\r\n    Radians,\r\n    /** To degrees (from radians) */\r\n    Degrees,\r\n}\r\n\r\n/**\r\n * Block used to apply trigonometry operation to floats\r\n */\r\nexport class TrigonometryBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Gets or sets the operation applied by the block\r\n     */\r\n    public operation = TrigonometryBlockOperations.Cos;\r\n\r\n    /**\r\n     * Creates a new TrigonometryBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"TrigonometryBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const output = this._outputs[0];\r\n        let operation = \"\";\r\n\r\n        switch (this.operation) {\r\n            case TrigonometryBlockOperations.Cos: {\r\n                operation = \"cos\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Sin: {\r\n                operation = \"sin\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Abs: {\r\n                operation = \"abs\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Exp: {\r\n                operation = \"exp\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Exp2: {\r\n                operation = \"exp2\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Round: {\r\n                operation = \"round\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Floor: {\r\n                operation = \"floor\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Ceiling: {\r\n                operation = \"ceil\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Sqrt: {\r\n                operation = \"sqrt\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Log: {\r\n                operation = \"log\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Tan: {\r\n                operation = \"tan\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.ArcTan: {\r\n                operation = \"atan\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.ArcCos: {\r\n                operation = \"acos\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.ArcSin: {\r\n                operation = \"asin\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Fract: {\r\n                operation = \"fract\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Sign: {\r\n                operation = \"sign\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Radians: {\r\n                operation = \"radians\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Degrees: {\r\n                operation = \"degrees\";\r\n                break;\r\n            }\r\n        }\r\n\r\n        state.compilationString += this._declareOutput(output, state) + ` = ${operation}(${this.input.associatedVariableName});\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.operation = this.operation;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.operation = serializationObject.operation;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString =\r\n            super._dumpPropertiesCode() + `${this._codeVariableName}.operation = BABYLON.TrigonometryBlockOperations.${TrigonometryBlockOperations[this.operation]};\\r\\n`;\r\n        return codeString;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.TrigonometryBlock\", TrigonometryBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}