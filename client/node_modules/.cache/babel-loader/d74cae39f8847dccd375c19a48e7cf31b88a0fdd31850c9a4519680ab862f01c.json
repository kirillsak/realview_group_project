{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { DeviceType } from \"./InputDevices/deviceEnums.js\";\nimport { NativeDeviceInputSystem } from \"./nativeDeviceInputSystem.js\";\nimport { WebDeviceInputSystem } from \"./webDeviceInputSystem.js\";\nimport { DeviceSource } from \"./InputDevices/deviceSource.js\";\n/** @internal */\nexport class InternalDeviceSourceManager {\n  constructor(engine) {\n    this._registeredManagers = new Array();\n    this._refCount = 0;\n    // Public Functions\n    this.registerManager = manager => {\n      for (let deviceType = 0; deviceType < this._devices.length; deviceType++) {\n        const device = this._devices[deviceType];\n        for (const deviceSlotKey in device) {\n          const deviceSlot = +deviceSlotKey;\n          manager._addDevice(new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot));\n        }\n      }\n      this._registeredManagers.push(manager);\n    };\n    this.unregisterManager = manager => {\n      const idx = this._registeredManagers.indexOf(manager);\n      if (idx > -1) {\n        this._registeredManagers.splice(idx, 1);\n      }\n    };\n    const numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\n    this._devices = new Array(numberOfDeviceTypes);\n    const onDeviceConnected = (deviceType, deviceSlot) => {\n      if (!this._devices[deviceType]) {\n        this._devices[deviceType] = new Array();\n      }\n      if (!this._devices[deviceType][deviceSlot]) {\n        this._devices[deviceType][deviceSlot] = deviceSlot;\n      }\n      for (const manager of this._registeredManagers) {\n        const deviceSource = new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot);\n        manager._addDevice(deviceSource);\n      }\n    };\n    const onDeviceDisconnected = (deviceType, deviceSlot) => {\n      var _a;\n      if ((_a = this._devices[deviceType]) === null || _a === void 0 ? void 0 : _a[deviceSlot]) {\n        delete this._devices[deviceType][deviceSlot];\n      }\n      for (const manager of this._registeredManagers) {\n        manager._removeDevice(deviceType, deviceSlot);\n      }\n    };\n    const onInputChanged = (deviceType, deviceSlot, eventData) => {\n      if (eventData) {\n        for (const manager of this._registeredManagers) {\n          manager._onInputChanged(deviceType, deviceSlot, eventData);\n        }\n      }\n    };\n    if (typeof _native !== \"undefined\") {\n      this._deviceInputSystem = new NativeDeviceInputSystem(onDeviceConnected, onDeviceDisconnected, onInputChanged);\n    } else {\n      this._deviceInputSystem = new WebDeviceInputSystem(engine, onDeviceConnected, onDeviceDisconnected, onInputChanged);\n    }\n  }\n  dispose() {\n    this._deviceInputSystem.dispose();\n  }\n}","map":{"version":3,"mappings":";AACA,SAASA,UAAU,QAAQ,+BAA6B;AAGxD,SAASC,uBAAuB,QAAQ,8BAA4B;AACpE,SAASC,oBAAoB,QAAQ,2BAAyB;AAC9D,SAASC,YAAY,QAAQ,gCAA8B;AA6B3D;AACA,OAAM,MAAOC,2BAA2B;EAYpCC,YAAmBC,MAAc;IAJhB,wBAAmB,GAAG,IAAIC,KAAK,EAAsB;IAE/D,cAAS,GAAG,CAAC;IA4CpB;IACgB,oBAAe,GAAIC,OAA2B,IAAU;MACpE,KAAK,IAAIC,UAAU,GAAG,CAAC,EAAEA,UAAU,GAAG,IAAI,CAACC,QAAQ,CAACC,MAAM,EAAEF,UAAU,EAAE,EAAE;QACtE,MAAMG,MAAM,GAAG,IAAI,CAACF,QAAQ,CAACD,UAAU,CAAC;QACxC,KAAK,MAAMI,aAAa,IAAID,MAAM,EAAE;UAChC,MAAME,UAAU,GAAG,CAACD,aAAa;UACjCL,OAAO,CAACO,UAAU,CAAC,IAAIZ,YAAY,CAAC,IAAI,CAACa,kBAAkB,EAAEP,UAAU,EAAEK,UAAU,CAAC,CAAC;;;MAG7F,IAAI,CAACG,mBAAmB,CAACC,IAAI,CAACV,OAAO,CAAC;IAC1C,CAAC;IAEe,sBAAiB,GAAIA,OAA2B,IAAU;MACtE,MAAMW,GAAG,GAAG,IAAI,CAACF,mBAAmB,CAACG,OAAO,CAACZ,OAAO,CAAC;MAErD,IAAIW,GAAG,GAAG,CAAC,CAAC,EAAE;QACV,IAAI,CAACF,mBAAmB,CAACI,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;;IAE/C,CAAC;IA3DG,MAAMG,mBAAmB,GAAGC,MAAM,CAACC,IAAI,CAACxB,UAAU,CAAC,CAACW,MAAM,GAAG,CAAC;IAC9D,IAAI,CAACD,QAAQ,GAAG,IAAIH,KAAK,CAAgBe,mBAAmB,CAAC;IAE7D,MAAMG,iBAAiB,GAAG,CAAChB,UAAsB,EAAEK,UAAkB,KAAI;MACrE,IAAI,CAAC,IAAI,CAACJ,QAAQ,CAACD,UAAU,CAAC,EAAE;QAC5B,IAAI,CAACC,QAAQ,CAACD,UAAU,CAAC,GAAG,IAAIF,KAAK,EAAU;;MAGnD,IAAI,CAAC,IAAI,CAACG,QAAQ,CAACD,UAAU,CAAC,CAACK,UAAU,CAAC,EAAE;QACxC,IAAI,CAACJ,QAAQ,CAACD,UAAU,CAAC,CAACK,UAAU,CAAC,GAAGA,UAAU;;MAEtD,KAAK,MAAMN,OAAO,IAAI,IAAI,CAACS,mBAAmB,EAAE;QAC5C,MAAMS,YAAY,GAAG,IAAIvB,YAAY,CAAC,IAAI,CAACa,kBAAkB,EAAEP,UAAU,EAAEK,UAAU,CAAC;QACtFN,OAAO,CAACO,UAAU,CAACW,YAAY,CAAC;;IAExC,CAAC;IAED,MAAMC,oBAAoB,GAAG,CAAClB,UAAsB,EAAEK,UAAkB,KAAI;;MACxE,IAAI,UAAI,CAACJ,QAAQ,CAACD,UAAU,CAAC,0CAAGK,UAAU,CAAC,EAAE;QACzC,OAAO,IAAI,CAACJ,QAAQ,CAACD,UAAU,CAAC,CAACK,UAAU,CAAC;;MAEhD,KAAK,MAAMN,OAAO,IAAI,IAAI,CAACS,mBAAmB,EAAE;QAC5CT,OAAO,CAACoB,aAAa,CAACnB,UAAU,EAAEK,UAAU,CAAC;;IAErD,CAAC;IAED,MAAMe,cAAc,GAAG,CAACpB,UAAsB,EAAEK,UAAkB,EAAEgB,SAAmB,KAAI;MACvF,IAAIA,SAAS,EAAE;QACX,KAAK,MAAMtB,OAAO,IAAI,IAAI,CAACS,mBAAmB,EAAE;UAC5CT,OAAO,CAACuB,eAAe,CAACtB,UAAU,EAAEK,UAAU,EAAEgB,SAAS,CAAC;;;IAGtE,CAAC;IAED,IAAI,OAAOE,OAAO,KAAK,WAAW,EAAE;MAChC,IAAI,CAAChB,kBAAkB,GAAG,IAAIf,uBAAuB,CAACwB,iBAAiB,EAAEE,oBAAoB,EAAEE,cAAc,CAAC;KACjH,MAAM;MACH,IAAI,CAACb,kBAAkB,GAAG,IAAId,oBAAoB,CAACI,MAAM,EAAEmB,iBAAiB,EAAEE,oBAAoB,EAAEE,cAAc,CAAC;;EAE3H;EAsBOI,OAAO;IACV,IAAI,CAACjB,kBAAkB,CAACiB,OAAO,EAAE;EACrC","names":["DeviceType","NativeDeviceInputSystem","WebDeviceInputSystem","DeviceSource","InternalDeviceSourceManager","constructor","engine","Array","manager","deviceType","_devices","length","device","deviceSlotKey","deviceSlot","_addDevice","_deviceInputSystem","_registeredManagers","push","idx","indexOf","splice","numberOfDeviceTypes","Object","keys","onDeviceConnected","deviceSource","onDeviceDisconnected","_removeDevice","onInputChanged","eventData","_onInputChanged","_native","dispose"],"sourceRoot":"","sources":["../../../../lts/core/generated/DeviceInput/internalDeviceSourceManager.ts"],"sourcesContent":["import type { IDisposable } from \"../scene\";\r\nimport { DeviceType } from \"./InputDevices/deviceEnums\";\r\nimport type { Observable } from \"../Misc/observable\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\nimport { NativeDeviceInputSystem } from \"./nativeDeviceInputSystem\";\r\nimport { WebDeviceInputSystem } from \"./webDeviceInputSystem\";\r\nimport { DeviceSource } from \"./InputDevices/deviceSource\";\r\nimport type { INative } from \"../Engines/Native/nativeInterfaces\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { IUIEvent } from \"../Events/deviceInputEvents\";\r\n\r\ntype Distribute<T> = T extends DeviceType ? DeviceSource<T> : never;\r\n\r\nexport type DeviceSourceType = Distribute<DeviceType>;\r\n\r\ndeclare const _native: INative;\r\n\r\ndeclare module \"../Engines/engine\" {\r\n    interface Engine {\r\n        /** @internal */\r\n        _deviceSourceManager?: InternalDeviceSourceManager;\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport interface IObservableManager {\r\n    onDeviceConnectedObservable: Observable<DeviceSourceType>;\r\n    onDeviceDisconnectedObservable: Observable<DeviceSourceType>;\r\n\r\n    // Functions\r\n    _onInputChanged(deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent): void;\r\n    _addDevice(deviceSource: DeviceSource<DeviceType>): void;\r\n    _removeDevice(deviceType: DeviceType, deviceSlot: number): void;\r\n}\r\n\r\n/** @internal */\r\nexport class InternalDeviceSourceManager implements IDisposable {\r\n    // Public Members\r\n    public readonly _deviceInputSystem: IDeviceInputSystem;\r\n\r\n    // Private Members\r\n    // This is a master list of all device type/slot combos\r\n    private readonly _devices: Array<Array<number>>;\r\n\r\n    private readonly _registeredManagers = new Array<IObservableManager>();\r\n\r\n    public _refCount = 0;\r\n\r\n    public constructor(engine: Engine) {\r\n        const numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\r\n        this._devices = new Array<Array<number>>(numberOfDeviceTypes);\r\n\r\n        const onDeviceConnected = (deviceType: DeviceType, deviceSlot: number) => {\r\n            if (!this._devices[deviceType]) {\r\n                this._devices[deviceType] = new Array<number>();\r\n            }\r\n\r\n            if (!this._devices[deviceType][deviceSlot]) {\r\n                this._devices[deviceType][deviceSlot] = deviceSlot;\r\n            }\r\n            for (const manager of this._registeredManagers) {\r\n                const deviceSource = new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot);\r\n                manager._addDevice(deviceSource);\r\n            }\r\n        };\r\n\r\n        const onDeviceDisconnected = (deviceType: DeviceType, deviceSlot: number) => {\r\n            if (this._devices[deviceType]?.[deviceSlot]) {\r\n                delete this._devices[deviceType][deviceSlot];\r\n            }\r\n            for (const manager of this._registeredManagers) {\r\n                manager._removeDevice(deviceType, deviceSlot);\r\n            }\r\n        };\r\n\r\n        const onInputChanged = (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => {\r\n            if (eventData) {\r\n                for (const manager of this._registeredManagers) {\r\n                    manager._onInputChanged(deviceType, deviceSlot, eventData);\r\n                }\r\n            }\r\n        };\r\n\r\n        if (typeof _native !== \"undefined\") {\r\n            this._deviceInputSystem = new NativeDeviceInputSystem(onDeviceConnected, onDeviceDisconnected, onInputChanged);\r\n        } else {\r\n            this._deviceInputSystem = new WebDeviceInputSystem(engine, onDeviceConnected, onDeviceDisconnected, onInputChanged);\r\n        }\r\n    }\r\n\r\n    // Public Functions\r\n    public readonly registerManager = (manager: IObservableManager): void => {\r\n        for (let deviceType = 0; deviceType < this._devices.length; deviceType++) {\r\n            const device = this._devices[deviceType];\r\n            for (const deviceSlotKey in device) {\r\n                const deviceSlot = +deviceSlotKey;\r\n                manager._addDevice(new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot));\r\n            }\r\n        }\r\n        this._registeredManagers.push(manager);\r\n    };\r\n\r\n    public readonly unregisterManager = (manager: IObservableManager): void => {\r\n        const idx = this._registeredManagers.indexOf(manager);\r\n\r\n        if (idx > -1) {\r\n            this._registeredManagers.splice(idx, 1);\r\n        }\r\n    };\r\n\r\n    public dispose(): void {\r\n        this._deviceInputSystem.dispose();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}