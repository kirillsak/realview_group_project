{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nconst NAME = \"KHR_materials_ior\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_ior/README.md)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_materials_ior {\n  /**\n   * @internal\n   */\n  constructor(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n    this.order = 180;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @internal */\n  dispose() {\n    this._loader = null;\n  }\n  /**\n   * @internal\n   */\n  loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, (extensionContext, extension) => {\n      const promises = new Array();\n      promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n      promises.push(this._loadIorPropertiesAsync(extensionContext, extension, babylonMaterial));\n      return Promise.all(promises).then(() => {});\n    });\n  }\n  _loadIorPropertiesAsync(context, properties, babylonMaterial) {\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(`${context}: Material type not supported`);\n    }\n    if (properties.ior !== undefined) {\n      babylonMaterial.indexOfRefraction = properties.ior;\n    } else {\n      babylonMaterial.indexOfRefraction = KHR_materials_ior._DEFAULT_IOR;\n    }\n    return Promise.resolve();\n  }\n}\n/**\n * Default ior Value from the spec.\n */\nKHR_materials_ior._DEFAULT_IOR = 1.5;\nGLTFLoader.RegisterExtension(NAME, loader => new KHR_materials_ior(loader));","map":{"version":3,"mappings":";AACA,SAASA,WAAW,QAAE;AAKtB,SAASC,UAAU,QAAQ,kBAAgB;AAG3C,MAAMC,IAAI,GAAG,mBAAmB;AAEhC;;;AAGA;AACA,OAAM,MAAOC,iBAAiB;EAuB1B;;;EAGAC,YAAYC,MAAkB;IApB9B;;;IAGgB,SAAI,GAAGH,IAAI;IAO3B;;;IAGO,UAAK,GAAG,GAAG;IAQd,IAAI,CAACI,OAAO,GAAGD,MAAM;IACrB,IAAI,CAACE,OAAO,GAAG,IAAI,CAACD,OAAO,CAACE,eAAe,CAACN,IAAI,CAAC;EACrD;EAEA;EACOO,OAAO;IACT,IAAI,CAACH,OAAe,GAAG,IAAI;EAChC;EAEA;;;EAGOI,2BAA2B,CAACC,OAAe,EAAEC,QAAmB,EAAEC,eAAyB;IAC9F,OAAOZ,UAAU,CAACa,kBAAkB,CAAmBH,OAAO,EAAEC,QAAQ,EAAE,IAAI,CAACG,IAAI,EAAE,CAACC,gBAAgB,EAAEC,SAAS,KAAI;MACjH,MAAMC,QAAQ,GAAG,IAAIC,KAAK,EAAgB;MAC1CD,QAAQ,CAACE,IAAI,CAAC,IAAI,CAACd,OAAO,CAACI,2BAA2B,CAACC,OAAO,EAAEC,QAAQ,EAAEC,eAAe,CAAC,CAAC;MAC3FK,QAAQ,CAACE,IAAI,CAAC,IAAI,CAACC,uBAAuB,CAACL,gBAAgB,EAAEC,SAAS,EAAEJ,eAAe,CAAC,CAAC;MACzF,OAAOS,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC,CAACM,IAAI,CAAC,MAAK,CAAE,CAAC,CAAC;IAC/C,CAAC,CAAC;EACN;EAEQH,uBAAuB,CAACV,OAAe,EAAEc,UAA4B,EAAEZ,eAAyB;IACpG,IAAI,EAAEA,eAAe,YAAYb,WAAW,CAAC,EAAE;MAC3C,MAAM,IAAI0B,KAAK,CAAC,GAAGf,OAAO,+BAA+B,CAAC;;IAG9D,IAAIc,UAAU,CAACE,GAAG,KAAKC,SAAS,EAAE;MAC9Bf,eAAe,CAACgB,iBAAiB,GAAGJ,UAAU,CAACE,GAAG;KACrD,MAAM;MACHd,eAAe,CAACgB,iBAAiB,GAAG1B,iBAAiB,CAAC2B,YAAY;;IAGtE,OAAOR,OAAO,CAACS,OAAO,EAAE;EAC5B;;AA3DA;;;AAGwB5B,8BAAY,GAAG,GAAG;AA2D9CF,UAAU,CAAC+B,iBAAiB,CAAC9B,IAAI,EAAGG,MAAM,IAAK,IAAIF,iBAAiB,CAACE,MAAM,CAAC,CAAC","names":["PBRMaterial","GLTFLoader","NAME","KHR_materials_ior","constructor","loader","_loader","enabled","isExtensionUsed","dispose","loadMaterialPropertiesAsync","context","material","babylonMaterial","LoadExtensionAsync","name","extensionContext","extension","promises","Array","push","_loadIorPropertiesAsync","Promise","all","then","properties","Error","ior","undefined","indexOfRefraction","_DEFAULT_IOR","resolve","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_materials_ior.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsIor } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_materials_ior\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_ior/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_ior implements IGLTFLoaderExtension {\r\n    /**\r\n     * Default ior Value from the spec.\r\n     */\r\n    private static readonly _DEFAULT_IOR = 1.5;\r\n\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 180;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsIor>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadIorPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadIorPropertiesAsync(context: string, properties: IKHRMaterialsIor, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        if (properties.ior !== undefined) {\r\n            babylonMaterial.indexOfRefraction = properties.ior;\r\n        } else {\r\n            babylonMaterial.indexOfRefraction = KHR_materials_ior._DEFAULT_IOR;\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_ior(loader));\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}