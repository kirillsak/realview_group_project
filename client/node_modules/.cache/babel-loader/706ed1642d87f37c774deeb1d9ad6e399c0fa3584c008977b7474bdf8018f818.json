{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { BoundingBox } from \"../../Culling/boundingBox.js\";\n/**\n * Class used to store a cell in an octree\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimizeOctrees\n */\nexport class OctreeBlock {\n  /**\n   * Creates a new block\n   * @param minPoint defines the minimum vector (in world space) of the block's bounding box\n   * @param maxPoint defines the maximum vector (in world space) of the block's bounding box\n   * @param capacity defines the maximum capacity of this block (if capacity is reached the block will be split into sub blocks)\n   * @param depth defines the current depth of this block in the octree\n   * @param maxDepth defines the maximal depth allowed (beyond this value, the capacity is ignored)\n   * @param creationFunc defines a callback to call when an element is added to the block\n   */\n  constructor(minPoint, maxPoint, capacity, depth, maxDepth, creationFunc) {\n    /**\n     * Gets the content of the current block\n     */\n    this.entries = new Array();\n    this._boundingVectors = new Array();\n    this._capacity = capacity;\n    this._depth = depth;\n    this._maxDepth = maxDepth;\n    this._creationFunc = creationFunc;\n    this._minPoint = minPoint;\n    this._maxPoint = maxPoint;\n    this._boundingVectors.push(minPoint.clone());\n    this._boundingVectors.push(maxPoint.clone());\n    this._boundingVectors.push(minPoint.clone());\n    this._boundingVectors[2].x = maxPoint.x;\n    this._boundingVectors.push(minPoint.clone());\n    this._boundingVectors[3].y = maxPoint.y;\n    this._boundingVectors.push(minPoint.clone());\n    this._boundingVectors[4].z = maxPoint.z;\n    this._boundingVectors.push(maxPoint.clone());\n    this._boundingVectors[5].z = minPoint.z;\n    this._boundingVectors.push(maxPoint.clone());\n    this._boundingVectors[6].x = minPoint.x;\n    this._boundingVectors.push(maxPoint.clone());\n    this._boundingVectors[7].y = minPoint.y;\n  }\n  // Property\n  /**\n   * Gets the maximum capacity of this block (if capacity is reached the block will be split into sub blocks)\n   */\n  get capacity() {\n    return this._capacity;\n  }\n  /**\n   * Gets the minimum vector (in world space) of the block's bounding box\n   */\n  get minPoint() {\n    return this._minPoint;\n  }\n  /**\n   * Gets the maximum vector (in world space) of the block's bounding box\n   */\n  get maxPoint() {\n    return this._maxPoint;\n  }\n  // Methods\n  /**\n   * Add a new element to this block\n   * @param entry defines the element to add\n   */\n  addEntry(entry) {\n    if (this.blocks) {\n      for (let index = 0; index < this.blocks.length; index++) {\n        const block = this.blocks[index];\n        block.addEntry(entry);\n      }\n      return;\n    }\n    this._creationFunc(entry, this);\n    if (this.entries.length > this.capacity && this._depth < this._maxDepth) {\n      this.createInnerBlocks();\n    }\n  }\n  /**\n   * Remove an element from this block\n   * @param entry defines the element to remove\n   */\n  removeEntry(entry) {\n    if (this.blocks) {\n      for (let index = 0; index < this.blocks.length; index++) {\n        const block = this.blocks[index];\n        block.removeEntry(entry);\n      }\n      return;\n    }\n    const entryIndex = this.entries.indexOf(entry);\n    if (entryIndex > -1) {\n      this.entries.splice(entryIndex, 1);\n    }\n  }\n  /**\n   * Add an array of elements to this block\n   * @param entries defines the array of elements to add\n   */\n  addEntries(entries) {\n    for (let index = 0; index < entries.length; index++) {\n      const mesh = entries[index];\n      this.addEntry(mesh);\n    }\n  }\n  /**\n   * Test if the current block intersects the frustum planes and if yes, then add its content to the selection array\n   * @param frustumPlanes defines the frustum planes to test\n   * @param selection defines the array to store current content if selection is positive\n   * @param allowDuplicate defines if the selection array can contains duplicated entries\n   */\n  select(frustumPlanes, selection, allowDuplicate) {\n    if (BoundingBox.IsInFrustum(this._boundingVectors, frustumPlanes)) {\n      if (this.blocks) {\n        for (let index = 0; index < this.blocks.length; index++) {\n          const block = this.blocks[index];\n          block.select(frustumPlanes, selection, allowDuplicate);\n        }\n        return;\n      }\n      if (allowDuplicate) {\n        selection.concat(this.entries);\n      } else {\n        selection.concatWithNoDuplicate(this.entries);\n      }\n    }\n  }\n  /**\n   * Test if the current block intersect with the given bounding sphere and if yes, then add its content to the selection array\n   * @param sphereCenter defines the bounding sphere center\n   * @param sphereRadius defines the bounding sphere radius\n   * @param selection defines the array to store current content if selection is positive\n   * @param allowDuplicate defines if the selection array can contains duplicated entries\n   */\n  intersects(sphereCenter, sphereRadius, selection, allowDuplicate) {\n    if (BoundingBox.IntersectsSphere(this._minPoint, this._maxPoint, sphereCenter, sphereRadius)) {\n      if (this.blocks) {\n        for (let index = 0; index < this.blocks.length; index++) {\n          const block = this.blocks[index];\n          block.intersects(sphereCenter, sphereRadius, selection, allowDuplicate);\n        }\n        return;\n      }\n      if (allowDuplicate) {\n        selection.concat(this.entries);\n      } else {\n        selection.concatWithNoDuplicate(this.entries);\n      }\n    }\n  }\n  /**\n   * Test if the current block intersect with the given ray and if yes, then add its content to the selection array\n   * @param ray defines the ray to test with\n   * @param selection defines the array to store current content if selection is positive\n   */\n  intersectsRay(ray, selection) {\n    if (ray.intersectsBoxMinMax(this._minPoint, this._maxPoint)) {\n      if (this.blocks) {\n        for (let index = 0; index < this.blocks.length; index++) {\n          const block = this.blocks[index];\n          block.intersectsRay(ray, selection);\n        }\n        return;\n      }\n      selection.concatWithNoDuplicate(this.entries);\n    }\n  }\n  /**\n   * Subdivide the content into child blocks (this block will then be empty)\n   */\n  createInnerBlocks() {\n    OctreeBlock._CreateBlocks(this._minPoint, this._maxPoint, this.entries, this._capacity, this._depth, this._maxDepth, this, this._creationFunc);\n    this.entries.splice(0);\n  }\n  /**\n   * @internal\n   */\n  static _CreateBlocks(worldMin, worldMax, entries, maxBlockCapacity, currentDepth, maxDepth, target, creationFunc) {\n    target.blocks = new Array();\n    const blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2);\n    // Segmenting space\n    for (let x = 0; x < 2; x++) {\n      for (let y = 0; y < 2; y++) {\n        for (let z = 0; z < 2; z++) {\n          const localMin = worldMin.add(blockSize.multiplyByFloats(x, y, z));\n          const localMax = worldMin.add(blockSize.multiplyByFloats(x + 1, y + 1, z + 1));\n          const block = new OctreeBlock(localMin, localMax, maxBlockCapacity, currentDepth + 1, maxDepth, creationFunc);\n          block.addEntries(entries);\n          target.blocks.push(block);\n        }\n      }\n    }\n  }\n}","map":{"version":3,"mappings":";AACA,SAASA,OAAO,QAAQ,4BAA0B;AAElD,SAASC,WAAW,QAAQ,8BAA4B;AAaxD;;;;AAIA,OAAM,MAAOC,WAAW;EAmBpB;;;;;;;;;EASAC,YAAYC,QAAiB,EAAEC,QAAiB,EAAEC,QAAgB,EAAEC,KAAa,EAAEC,QAAgB,EAAEC,YAAuD;IA3B5J;;;IAGO,YAAO,GAAG,IAAIC,KAAK,EAAK;IAYvB,qBAAgB,GAAG,IAAIA,KAAK,EAAW;IAa3C,IAAI,CAACC,SAAS,GAAGL,QAAQ;IACzB,IAAI,CAACM,MAAM,GAAGL,KAAK;IACnB,IAAI,CAACM,SAAS,GAAGL,QAAQ;IACzB,IAAI,CAACM,aAAa,GAAGL,YAAY;IAEjC,IAAI,CAACM,SAAS,GAAGX,QAAQ;IACzB,IAAI,CAACY,SAAS,GAAGX,QAAQ;IAEzB,IAAI,CAACY,gBAAgB,CAACC,IAAI,CAACd,QAAQ,CAACe,KAAK,EAAE,CAAC;IAC5C,IAAI,CAACF,gBAAgB,CAACC,IAAI,CAACb,QAAQ,CAACc,KAAK,EAAE,CAAC;IAE5C,IAAI,CAACF,gBAAgB,CAACC,IAAI,CAACd,QAAQ,CAACe,KAAK,EAAE,CAAC;IAC5C,IAAI,CAACF,gBAAgB,CAAC,CAAC,CAAC,CAACG,CAAC,GAAGf,QAAQ,CAACe,CAAC;IAEvC,IAAI,CAACH,gBAAgB,CAACC,IAAI,CAACd,QAAQ,CAACe,KAAK,EAAE,CAAC;IAC5C,IAAI,CAACF,gBAAgB,CAAC,CAAC,CAAC,CAACI,CAAC,GAAGhB,QAAQ,CAACgB,CAAC;IAEvC,IAAI,CAACJ,gBAAgB,CAACC,IAAI,CAACd,QAAQ,CAACe,KAAK,EAAE,CAAC;IAC5C,IAAI,CAACF,gBAAgB,CAAC,CAAC,CAAC,CAACK,CAAC,GAAGjB,QAAQ,CAACiB,CAAC;IAEvC,IAAI,CAACL,gBAAgB,CAACC,IAAI,CAACb,QAAQ,CAACc,KAAK,EAAE,CAAC;IAC5C,IAAI,CAACF,gBAAgB,CAAC,CAAC,CAAC,CAACK,CAAC,GAAGlB,QAAQ,CAACkB,CAAC;IAEvC,IAAI,CAACL,gBAAgB,CAACC,IAAI,CAACb,QAAQ,CAACc,KAAK,EAAE,CAAC;IAC5C,IAAI,CAACF,gBAAgB,CAAC,CAAC,CAAC,CAACG,CAAC,GAAGhB,QAAQ,CAACgB,CAAC;IAEvC,IAAI,CAACH,gBAAgB,CAACC,IAAI,CAACb,QAAQ,CAACc,KAAK,EAAE,CAAC;IAC5C,IAAI,CAACF,gBAAgB,CAAC,CAAC,CAAC,CAACI,CAAC,GAAGjB,QAAQ,CAACiB,CAAC;EAC3C;EAEA;EAEA;;;EAGA,IAAWf,QAAQ;IACf,OAAO,IAAI,CAACK,SAAS;EACzB;EAEA;;;EAGA,IAAWP,QAAQ;IACf,OAAO,IAAI,CAACW,SAAS;EACzB;EAEA;;;EAGA,IAAWV,QAAQ;IACf,OAAO,IAAI,CAACW,SAAS;EACzB;EAEA;EAEA;;;;EAIOO,QAAQ,CAACC,KAAQ;IACpB,IAAI,IAAI,CAACC,MAAM,EAAE;MACb,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,IAAI,CAACD,MAAM,CAACE,MAAM,EAAED,KAAK,EAAE,EAAE;QACrD,MAAME,KAAK,GAAG,IAAI,CAACH,MAAM,CAACC,KAAK,CAAC;QAChCE,KAAK,CAACL,QAAQ,CAACC,KAAK,CAAC;;MAEzB;;IAGJ,IAAI,CAACV,aAAa,CAACU,KAAK,EAAE,IAAI,CAAC;IAE/B,IAAI,IAAI,CAACK,OAAO,CAACF,MAAM,GAAG,IAAI,CAACrB,QAAQ,IAAI,IAAI,CAACM,MAAM,GAAG,IAAI,CAACC,SAAS,EAAE;MACrE,IAAI,CAACiB,iBAAiB,EAAE;;EAEhC;EAEA;;;;EAIOC,WAAW,CAACP,KAAQ;IACvB,IAAI,IAAI,CAACC,MAAM,EAAE;MACb,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,IAAI,CAACD,MAAM,CAACE,MAAM,EAAED,KAAK,EAAE,EAAE;QACrD,MAAME,KAAK,GAAG,IAAI,CAACH,MAAM,CAACC,KAAK,CAAC;QAChCE,KAAK,CAACG,WAAW,CAACP,KAAK,CAAC;;MAE5B;;IAGJ,MAAMQ,UAAU,GAAG,IAAI,CAACH,OAAO,CAACI,OAAO,CAACT,KAAK,CAAC;IAE9C,IAAIQ,UAAU,GAAG,CAAC,CAAC,EAAE;MACjB,IAAI,CAACH,OAAO,CAACK,MAAM,CAACF,UAAU,EAAE,CAAC,CAAC;;EAE1C;EAEA;;;;EAIOG,UAAU,CAACN,OAAY;IAC1B,KAAK,IAAIH,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGG,OAAO,CAACF,MAAM,EAAED,KAAK,EAAE,EAAE;MACjD,MAAMU,IAAI,GAAGP,OAAO,CAACH,KAAK,CAAC;MAC3B,IAAI,CAACH,QAAQ,CAACa,IAAI,CAAC;;EAE3B;EAEA;;;;;;EAMOC,MAAM,CAACC,aAAsB,EAAEC,SAAmC,EAAEC,cAAwB;IAC/F,IAAIvC,WAAW,CAACwC,WAAW,CAAC,IAAI,CAACxB,gBAAgB,EAAEqB,aAAa,CAAC,EAAE;MAC/D,IAAI,IAAI,CAACb,MAAM,EAAE;QACb,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,IAAI,CAACD,MAAM,CAACE,MAAM,EAAED,KAAK,EAAE,EAAE;UACrD,MAAME,KAAK,GAAG,IAAI,CAACH,MAAM,CAACC,KAAK,CAAC;UAChCE,KAAK,CAACS,MAAM,CAACC,aAAa,EAAEC,SAAS,EAAEC,cAAc,CAAC;;QAE1D;;MAGJ,IAAIA,cAAc,EAAE;QAChBD,SAAS,CAACG,MAAM,CAAC,IAAI,CAACb,OAAO,CAAC;OACjC,MAAM;QACHU,SAAS,CAACI,qBAAqB,CAAC,IAAI,CAACd,OAAO,CAAC;;;EAGzD;EAEA;;;;;;;EAOOe,UAAU,CAACC,YAAqB,EAAEC,YAAoB,EAAEP,SAAmC,EAAEC,cAAwB;IACxH,IAAIvC,WAAW,CAAC8C,gBAAgB,CAAC,IAAI,CAAChC,SAAS,EAAE,IAAI,CAACC,SAAS,EAAE6B,YAAY,EAAEC,YAAY,CAAC,EAAE;MAC1F,IAAI,IAAI,CAACrB,MAAM,EAAE;QACb,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,IAAI,CAACD,MAAM,CAACE,MAAM,EAAED,KAAK,EAAE,EAAE;UACrD,MAAME,KAAK,GAAG,IAAI,CAACH,MAAM,CAACC,KAAK,CAAC;UAChCE,KAAK,CAACgB,UAAU,CAACC,YAAY,EAAEC,YAAY,EAAEP,SAAS,EAAEC,cAAc,CAAC;;QAE3E;;MAGJ,IAAIA,cAAc,EAAE;QAChBD,SAAS,CAACG,MAAM,CAAC,IAAI,CAACb,OAAO,CAAC;OACjC,MAAM;QACHU,SAAS,CAACI,qBAAqB,CAAC,IAAI,CAACd,OAAO,CAAC;;;EAGzD;EAEA;;;;;EAKOmB,aAAa,CAACC,GAAQ,EAAEV,SAAmC;IAC9D,IAAIU,GAAG,CAACC,mBAAmB,CAAC,IAAI,CAACnC,SAAS,EAAE,IAAI,CAACC,SAAS,CAAC,EAAE;MACzD,IAAI,IAAI,CAACS,MAAM,EAAE;QACb,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,IAAI,CAACD,MAAM,CAACE,MAAM,EAAED,KAAK,EAAE,EAAE;UACrD,MAAME,KAAK,GAAG,IAAI,CAACH,MAAM,CAACC,KAAK,CAAC;UAChCE,KAAK,CAACoB,aAAa,CAACC,GAAG,EAAEV,SAAS,CAAC;;QAEvC;;MAEJA,SAAS,CAACI,qBAAqB,CAAC,IAAI,CAACd,OAAO,CAAC;;EAErD;EAEA;;;EAGOC,iBAAiB;IACpB5B,WAAW,CAACiD,aAAa,CAAC,IAAI,CAACpC,SAAS,EAAE,IAAI,CAACC,SAAS,EAAE,IAAI,CAACa,OAAO,EAAE,IAAI,CAAClB,SAAS,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,SAAS,EAAE,IAAI,EAAE,IAAI,CAACC,aAAa,CAAC;IAC9I,IAAI,CAACe,OAAO,CAACK,MAAM,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGO,OAAOiB,aAAa,CACvBC,QAAiB,EACjBC,QAAiB,EACjBxB,OAAY,EACZyB,gBAAwB,EACxBC,YAAoB,EACpB/C,QAAgB,EAChBgD,MAA2B,EAC3B/C,YAAuD;IAEvD+C,MAAM,CAAC/B,MAAM,GAAG,IAAIf,KAAK,EAAkB;IAC3C,MAAM+C,SAAS,GAAG,IAAIzD,OAAO,CAAC,CAACqD,QAAQ,CAACjC,CAAC,GAAGgC,QAAQ,CAAChC,CAAC,IAAI,CAAC,EAAE,CAACiC,QAAQ,CAAChC,CAAC,GAAG+B,QAAQ,CAAC/B,CAAC,IAAI,CAAC,EAAE,CAACgC,QAAQ,CAAC/B,CAAC,GAAG8B,QAAQ,CAAC9B,CAAC,IAAI,CAAC,CAAC;IAE1H;IACA,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;UACxB,MAAMoC,QAAQ,GAAGN,QAAQ,CAACO,GAAG,CAACF,SAAS,CAACG,gBAAgB,CAACxC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,CAAC;UAClE,MAAMuC,QAAQ,GAAGT,QAAQ,CAACO,GAAG,CAACF,SAAS,CAACG,gBAAgB,CAACxC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,CAAC,CAAC;UAE9E,MAAMM,KAAK,GAAG,IAAI1B,WAAW,CAAIwD,QAAQ,EAAEG,QAAQ,EAAEP,gBAAgB,EAAEC,YAAY,GAAG,CAAC,EAAE/C,QAAQ,EAAEC,YAAY,CAAC;UAChHmB,KAAK,CAACO,UAAU,CAACN,OAAO,CAAC;UACzB2B,MAAM,CAAC/B,MAAM,CAACP,IAAI,CAACU,KAAK,CAAC;;;;EAIzC","names":["Vector3","BoundingBox","OctreeBlock","constructor","minPoint","maxPoint","capacity","depth","maxDepth","creationFunc","Array","_capacity","_depth","_maxDepth","_creationFunc","_minPoint","_maxPoint","_boundingVectors","push","clone","x","y","z","addEntry","entry","blocks","index","length","block","entries","createInnerBlocks","removeEntry","entryIndex","indexOf","splice","addEntries","mesh","select","frustumPlanes","selection","allowDuplicate","IsInFrustum","concat","concatWithNoDuplicate","intersects","sphereCenter","sphereRadius","IntersectsSphere","intersectsRay","ray","intersectsBoxMinMax","_CreateBlocks","worldMin","worldMax","maxBlockCapacity","currentDepth","target","blockSize","localMin","add","multiplyByFloats","localMax"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Culling/Octrees/octreeBlock.ts"],"sourcesContent":["import type { SmartArrayNoDuplicate } from \"../../Misc/smartArray\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { Ray } from \"../../Culling/ray\";\r\nimport { BoundingBox } from \"../../Culling/boundingBox\";\r\nimport type { Plane } from \"../../Maths/math.plane\";\r\n\r\n/**\r\n * Contains an array of blocks representing the octree\r\n */\r\nexport interface IOctreeContainer<T> {\r\n    /**\r\n     * Blocks within the octree\r\n     */\r\n    blocks: Array<OctreeBlock<T>>;\r\n}\r\n\r\n/**\r\n * Class used to store a cell in an octree\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimizeOctrees\r\n */\r\nexport class OctreeBlock<T> {\r\n    /**\r\n     * Gets the content of the current block\r\n     */\r\n    public entries = new Array<T>();\r\n\r\n    /**\r\n     * Gets the list of block children\r\n     */\r\n    public blocks: Array<OctreeBlock<T>>;\r\n\r\n    private _depth: number;\r\n    private _maxDepth: number;\r\n    private _capacity: number;\r\n    private _minPoint: Vector3;\r\n    private _maxPoint: Vector3;\r\n    private _boundingVectors = new Array<Vector3>();\r\n    private _creationFunc: (entry: T, block: OctreeBlock<T>) => void;\r\n\r\n    /**\r\n     * Creates a new block\r\n     * @param minPoint defines the minimum vector (in world space) of the block's bounding box\r\n     * @param maxPoint defines the maximum vector (in world space) of the block's bounding box\r\n     * @param capacity defines the maximum capacity of this block (if capacity is reached the block will be split into sub blocks)\r\n     * @param depth defines the current depth of this block in the octree\r\n     * @param maxDepth defines the maximal depth allowed (beyond this value, the capacity is ignored)\r\n     * @param creationFunc defines a callback to call when an element is added to the block\r\n     */\r\n    constructor(minPoint: Vector3, maxPoint: Vector3, capacity: number, depth: number, maxDepth: number, creationFunc: (entry: T, block: OctreeBlock<T>) => void) {\r\n        this._capacity = capacity;\r\n        this._depth = depth;\r\n        this._maxDepth = maxDepth;\r\n        this._creationFunc = creationFunc;\r\n\r\n        this._minPoint = minPoint;\r\n        this._maxPoint = maxPoint;\r\n\r\n        this._boundingVectors.push(minPoint.clone());\r\n        this._boundingVectors.push(maxPoint.clone());\r\n\r\n        this._boundingVectors.push(minPoint.clone());\r\n        this._boundingVectors[2].x = maxPoint.x;\r\n\r\n        this._boundingVectors.push(minPoint.clone());\r\n        this._boundingVectors[3].y = maxPoint.y;\r\n\r\n        this._boundingVectors.push(minPoint.clone());\r\n        this._boundingVectors[4].z = maxPoint.z;\r\n\r\n        this._boundingVectors.push(maxPoint.clone());\r\n        this._boundingVectors[5].z = minPoint.z;\r\n\r\n        this._boundingVectors.push(maxPoint.clone());\r\n        this._boundingVectors[6].x = minPoint.x;\r\n\r\n        this._boundingVectors.push(maxPoint.clone());\r\n        this._boundingVectors[7].y = minPoint.y;\r\n    }\r\n\r\n    // Property\r\n\r\n    /**\r\n     * Gets the maximum capacity of this block (if capacity is reached the block will be split into sub blocks)\r\n     */\r\n    public get capacity(): number {\r\n        return this._capacity;\r\n    }\r\n\r\n    /**\r\n     * Gets the minimum vector (in world space) of the block's bounding box\r\n     */\r\n    public get minPoint(): Vector3 {\r\n        return this._minPoint;\r\n    }\r\n\r\n    /**\r\n     * Gets the maximum vector (in world space) of the block's bounding box\r\n     */\r\n    public get maxPoint(): Vector3 {\r\n        return this._maxPoint;\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Add a new element to this block\r\n     * @param entry defines the element to add\r\n     */\r\n    public addEntry(entry: T): void {\r\n        if (this.blocks) {\r\n            for (let index = 0; index < this.blocks.length; index++) {\r\n                const block = this.blocks[index];\r\n                block.addEntry(entry);\r\n            }\r\n            return;\r\n        }\r\n\r\n        this._creationFunc(entry, this);\r\n\r\n        if (this.entries.length > this.capacity && this._depth < this._maxDepth) {\r\n            this.createInnerBlocks();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove an element from this block\r\n     * @param entry defines the element to remove\r\n     */\r\n    public removeEntry(entry: T): void {\r\n        if (this.blocks) {\r\n            for (let index = 0; index < this.blocks.length; index++) {\r\n                const block = this.blocks[index];\r\n                block.removeEntry(entry);\r\n            }\r\n            return;\r\n        }\r\n\r\n        const entryIndex = this.entries.indexOf(entry);\r\n\r\n        if (entryIndex > -1) {\r\n            this.entries.splice(entryIndex, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add an array of elements to this block\r\n     * @param entries defines the array of elements to add\r\n     */\r\n    public addEntries(entries: T[]): void {\r\n        for (let index = 0; index < entries.length; index++) {\r\n            const mesh = entries[index];\r\n            this.addEntry(mesh);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test if the current block intersects the frustum planes and if yes, then add its content to the selection array\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @param selection defines the array to store current content if selection is positive\r\n     * @param allowDuplicate defines if the selection array can contains duplicated entries\r\n     */\r\n    public select(frustumPlanes: Plane[], selection: SmartArrayNoDuplicate<T>, allowDuplicate?: boolean): void {\r\n        if (BoundingBox.IsInFrustum(this._boundingVectors, frustumPlanes)) {\r\n            if (this.blocks) {\r\n                for (let index = 0; index < this.blocks.length; index++) {\r\n                    const block = this.blocks[index];\r\n                    block.select(frustumPlanes, selection, allowDuplicate);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (allowDuplicate) {\r\n                selection.concat(this.entries);\r\n            } else {\r\n                selection.concatWithNoDuplicate(this.entries);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test if the current block intersect with the given bounding sphere and if yes, then add its content to the selection array\r\n     * @param sphereCenter defines the bounding sphere center\r\n     * @param sphereRadius defines the bounding sphere radius\r\n     * @param selection defines the array to store current content if selection is positive\r\n     * @param allowDuplicate defines if the selection array can contains duplicated entries\r\n     */\r\n    public intersects(sphereCenter: Vector3, sphereRadius: number, selection: SmartArrayNoDuplicate<T>, allowDuplicate?: boolean): void {\r\n        if (BoundingBox.IntersectsSphere(this._minPoint, this._maxPoint, sphereCenter, sphereRadius)) {\r\n            if (this.blocks) {\r\n                for (let index = 0; index < this.blocks.length; index++) {\r\n                    const block = this.blocks[index];\r\n                    block.intersects(sphereCenter, sphereRadius, selection, allowDuplicate);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (allowDuplicate) {\r\n                selection.concat(this.entries);\r\n            } else {\r\n                selection.concatWithNoDuplicate(this.entries);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test if the current block intersect with the given ray and if yes, then add its content to the selection array\r\n     * @param ray defines the ray to test with\r\n     * @param selection defines the array to store current content if selection is positive\r\n     */\r\n    public intersectsRay(ray: Ray, selection: SmartArrayNoDuplicate<T>): void {\r\n        if (ray.intersectsBoxMinMax(this._minPoint, this._maxPoint)) {\r\n            if (this.blocks) {\r\n                for (let index = 0; index < this.blocks.length; index++) {\r\n                    const block = this.blocks[index];\r\n                    block.intersectsRay(ray, selection);\r\n                }\r\n                return;\r\n            }\r\n            selection.concatWithNoDuplicate(this.entries);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Subdivide the content into child blocks (this block will then be empty)\r\n     */\r\n    public createInnerBlocks(): void {\r\n        OctreeBlock._CreateBlocks(this._minPoint, this._maxPoint, this.entries, this._capacity, this._depth, this._maxDepth, this, this._creationFunc);\r\n        this.entries.splice(0);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _CreateBlocks<T>(\r\n        worldMin: Vector3,\r\n        worldMax: Vector3,\r\n        entries: T[],\r\n        maxBlockCapacity: number,\r\n        currentDepth: number,\r\n        maxDepth: number,\r\n        target: IOctreeContainer<T>,\r\n        creationFunc: (entry: T, block: OctreeBlock<T>) => void\r\n    ): void {\r\n        target.blocks = new Array<OctreeBlock<T>>();\r\n        const blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2);\r\n\r\n        // Segmenting space\r\n        for (let x = 0; x < 2; x++) {\r\n            for (let y = 0; y < 2; y++) {\r\n                for (let z = 0; z < 2; z++) {\r\n                    const localMin = worldMin.add(blockSize.multiplyByFloats(x, y, z));\r\n                    const localMax = worldMin.add(blockSize.multiplyByFloats(x + 1, y + 1, z + 1));\r\n\r\n                    const block = new OctreeBlock<T>(localMin, localMax, maxBlockCapacity, currentDepth + 1, maxDepth, creationFunc);\r\n                    block.addEntries(entries);\r\n                    target.blocks.push(block);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}