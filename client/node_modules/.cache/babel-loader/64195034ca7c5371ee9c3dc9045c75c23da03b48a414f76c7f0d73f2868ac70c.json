{"ast":null,"code":"import { GLTFLoader } from \"../glTFLoader.js\";\nconst NAME = \"ExtrasAsMetadata\";\n/**\n * Store glTF extras (if present) in BJS objects' metadata\n */\nexport class ExtrasAsMetadata {\n  /**\n   * @internal\n   */\n  constructor(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines whether this extension is enabled.\n     */\n    this.enabled = true;\n    this._loader = loader;\n  }\n  _assignExtras(babylonObject, gltfProp) {\n    if (gltfProp.extras && Object.keys(gltfProp.extras).length > 0) {\n      const metadata = babylonObject.metadata = babylonObject.metadata || {};\n      const gltf = metadata.gltf = metadata.gltf || {};\n      gltf.extras = gltfProp.extras;\n    }\n  }\n  /** @internal */\n  dispose() {\n    this._loader = null;\n  }\n  /**\n   * @internal\n   */\n  loadNodeAsync(context, node, assign) {\n    return this._loader.loadNodeAsync(context, node, babylonTransformNode => {\n      this._assignExtras(babylonTransformNode, node);\n      assign(babylonTransformNode);\n    });\n  }\n  /**\n   * @internal\n   */\n  loadCameraAsync(context, camera, assign) {\n    return this._loader.loadCameraAsync(context, camera, babylonCamera => {\n      this._assignExtras(babylonCamera, camera);\n      assign(babylonCamera);\n    });\n  }\n  /**\n   * @internal\n   */\n  createMaterial(context, material, babylonDrawMode) {\n    const babylonMaterial = this._loader.createMaterial(context, material, babylonDrawMode);\n    this._assignExtras(babylonMaterial, material);\n    return babylonMaterial;\n  }\n}\nGLTFLoader.RegisterExtension(NAME, loader => new ExtrasAsMetadata(loader));","map":{"version":3,"mappings":"AAOA,SAASA,UAAU,QAAQ,kBAAgB;AAG3C,MAAMC,IAAI,GAAG,kBAAkB;AAM/B;;;AAGA,OAAM,MAAOC,gBAAgB;EAqBzB;;;EAGAC,YAAmBC,MAAkB;IAvBrC;;;IAGgB,SAAI,GAAGH,IAAI;IAE3B;;;IAGO,YAAO,GAAG,IAAI;IAgBjB,IAAI,CAACI,OAAO,GAAGD,MAAM;EACzB;EAbQE,aAAa,CAACC,aAAiC,EAAEC,QAAmB;IACxE,IAAIA,QAAQ,CAACC,MAAM,IAAIC,MAAM,CAACC,IAAI,CAACH,QAAQ,CAACC,MAAM,CAAC,CAACG,MAAM,GAAG,CAAC,EAAE;MAC5D,MAAMC,QAAQ,GAAIN,aAAa,CAACM,QAAQ,GAAGN,aAAa,CAACM,QAAQ,IAAI,EAAG;MACxE,MAAMC,IAAI,GAAID,QAAQ,CAACC,IAAI,GAAGD,QAAQ,CAACC,IAAI,IAAI,EAAG;MAClDA,IAAI,CAACL,MAAM,GAAGD,QAAQ,CAACC,MAAM;;EAErC;EASA;EACOM,OAAO;IACT,IAAI,CAACV,OAAe,GAAG,IAAI;EAChC;EAEA;;;EAGOW,aAAa,CAACC,OAAe,EAAEC,IAAW,EAAEC,MAAqD;IACpG,OAAO,IAAI,CAACd,OAAO,CAACW,aAAa,CAACC,OAAO,EAAEC,IAAI,EAAGE,oBAAoB,IAAU;MAC5E,IAAI,CAACd,aAAa,CAACc,oBAAoB,EAAEF,IAAI,CAAC;MAC9CC,MAAM,CAACC,oBAAoB,CAAC;IAChC,CAAC,CAAC;EACN;EAEA;;;EAGOC,eAAe,CAACJ,OAAe,EAAEK,MAAe,EAAEH,MAAuC;IAC5F,OAAO,IAAI,CAACd,OAAO,CAACgB,eAAe,CAACJ,OAAO,EAAEK,MAAM,EAAGC,aAAa,IAAU;MACzE,IAAI,CAACjB,aAAa,CAACiB,aAAa,EAAED,MAAM,CAAC;MACzCH,MAAM,CAACI,aAAa,CAAC;IACzB,CAAC,CAAC;EACN;EAEA;;;EAGOC,cAAc,CAACP,OAAe,EAAEQ,QAAmB,EAAEC,eAAuB;IAC/E,MAAMC,eAAe,GAAG,IAAI,CAACtB,OAAO,CAACmB,cAAc,CAACP,OAAO,EAAEQ,QAAQ,EAAEC,eAAe,CAAC;IACvF,IAAI,CAACpB,aAAa,CAACqB,eAAe,EAAEF,QAAQ,CAAC;IAC7C,OAAOE,eAAe;EAC1B;;AAGJ3B,UAAU,CAAC4B,iBAAiB,CAAC3B,IAAI,EAAGG,MAAM,IAA2B,IAAIF,gBAAgB,CAACE,MAAM,CAAC,CAAC","names":["GLTFLoader","NAME","ExtrasAsMetadata","constructor","loader","_loader","_assignExtras","babylonObject","gltfProp","extras","Object","keys","length","metadata","gltf","dispose","loadNodeAsync","context","node","assign","babylonTransformNode","loadCameraAsync","camera","babylonCamera","createMaterial","material","babylonDrawMode","babylonMaterial","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../lts/loaders/generated/glTF/2.0/Extensions/ExtrasAsMetadata.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\n\r\nimport type { IProperty } from \"babylonjs-gltf2interface\";\r\nimport type { INode, ICamera, IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nconst NAME = \"ExtrasAsMetadata\";\r\n\r\ninterface ObjectWithMetadata {\r\n    metadata: any;\r\n}\r\n\r\n/**\r\n * Store glTF extras (if present) in BJS objects' metadata\r\n */\r\nexport class ExtrasAsMetadata implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled = true;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    private _assignExtras(babylonObject: ObjectWithMetadata, gltfProp: IProperty): void {\r\n        if (gltfProp.extras && Object.keys(gltfProp.extras).length > 0) {\r\n            const metadata = (babylonObject.metadata = babylonObject.metadata || {});\r\n            const gltf = (metadata.gltf = metadata.gltf || {});\r\n            gltf.extras = gltfProp.extras;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose(): void {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return this._loader.loadNodeAsync(context, node, (babylonTransformNode): void => {\r\n            this._assignExtras(babylonTransformNode, node);\r\n            assign(babylonTransformNode);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadCameraAsync(context: string, camera: ICamera, assign: (babylonCamera: Camera) => void): Nullable<Promise<Camera>> {\r\n        return this._loader.loadCameraAsync(context, camera, (babylonCamera): void => {\r\n            this._assignExtras(babylonCamera, camera);\r\n            assign(babylonCamera);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public createMaterial(context: string, material: IMaterial, babylonDrawMode: number): Nullable<Material> {\r\n        const babylonMaterial = this._loader.createMaterial(context, material, babylonDrawMode);\r\n        this._assignExtras(babylonMaterial, material);\r\n        return babylonMaterial;\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader): IGLTFLoaderExtension => new ExtrasAsMetadata(loader));\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}