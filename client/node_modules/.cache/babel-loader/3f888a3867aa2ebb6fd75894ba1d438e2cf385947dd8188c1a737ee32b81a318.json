{"ast":null,"code":"/**\n * Physics material class\n * Helps setting friction and restitution that are used to compute responding forces in collision response\n */\nexport class PhysicsMaterial {\n  /**\n   * Constructor of the physics material.\n   * @param friction - The friction of the material.\n   * @param restitution - The restitution of the material.\n   * @param scene - The scene to which the physics engine belongs.\n   *\n   * This code is useful for initializing the physics material with the\n   * given friction, restitution and scene. It also checks if the\n   * physics engine and plugin are available and if the plugin version\n   * is correct. If all conditions are met, it initializes the material\n   * with the physics plugin.\n   */\n  constructor(friction, restitution, scene) {\n    /**\n     * V2 Physics plugin private data for a physics material\n     */\n    this._pluginData = undefined;\n    const physicsEngine = scene.getPhysicsEngine();\n    if (!physicsEngine) {\n      throw new Error(\"No Physics Engine available.\");\n    }\n    if (physicsEngine.getPluginVersion() != 2) {\n      throw new Error(\"Plugin version is incorrect. Expected version 2.\");\n    }\n    const physicsPlugin = physicsEngine.getPhysicsPlugin();\n    if (!physicsPlugin) {\n      throw new Error(\"No Physics Plugin available.\");\n    }\n    this._physicsPlugin = physicsPlugin;\n    this._physicsPlugin.initMaterial(this);\n  }\n  /**\n   * Sets the friction of the physics engine.\n   * @param friction - The friction to set.\n   *\n   * This method is useful for setting the friction of the physics engine, which is important for simulating realistic physics.\n   * The friction determines how much an object will slow down when it is in contact with another object.\n   * This is important for simulating realistic physics, such as when an object slides across a surface.\n   */\n  setFriction(friction) {\n    this._physicsPlugin.setFriction(this, friction);\n  }\n  /**\n   * Gets the friction of the physics engine.\n   *\n   * @returns The friction of the physics engine.\n   *\n   * This method is useful for getting the friction of the physics engine, which is used to calculate the force of friction between two objects.\n   * Knowing the friction of the engine can help to accurately simulate the physical behavior of objects in the engine.\n   */\n  getFriction() {\n    return this._physicsPlugin.getFriction(this);\n  }\n  /**\n   * Sets the restitution of the physics body.\n   * @param restitution A number between 0 and 1 that represents the restitution of the body.\n   *\n   * This method is useful for setting the restitution of a physics body, which is the amount of energy that is retained after a collision.\n   * A restitution of 0 means that no energy is retained, while a restitution of 1 means that all energy is retained.\n   * Setting the restitution of a body can help to create realistic physics simulations.\n   */\n  setRestitution(restitution) {\n    this._physicsPlugin.setRestitution(this, restitution);\n  }\n  /**\n   * Gets the restitution of the physics engine.\n   * @returns The restitution of the physics engine.\n   *\n   * This method is useful for retrieving the restitution of the physics engine, which is the amount of energy that is preserved after two objects collide.\n   * Knowing the restitution of the physics engine can help to accurately simulate the behavior of objects in the physics engine.\n   */\n  getRestitution() {\n    return this._physicsPlugin.getRestitution(this);\n  }\n  /**\n   * Disposes the material.\n   *\n   * This method is useful for cleaning up the material when it is no longer needed.\n   * It calls the disposeMaterial method of the physics plugin, which is responsible for disposing the material and freeing up any resources associated with it.\n   * This ensures that the material is properly disposed of and does not cause any memory leaks.\n   */\n  dispose() {\n    this._physicsPlugin.disposeMaterial(this);\n  }\n}","map":{"version":3,"mappings":"AAGA;;;;AAIA,OAAM,MAAOA,eAAe;EAUxB;;;;;;;;;;;;EAYAC,YAAYC,QAAgB,EAAEC,WAAmB,EAAEC,KAAY;IArB/D;;;IAGO,gBAAW,GAAQC,SAAS;IAmB/B,MAAMC,aAAa,GAAGF,KAAK,CAACG,gBAAgB,EAAE;IAC9C,IAAI,CAACD,aAAa,EAAE;MAChB,MAAM,IAAIE,KAAK,CAAC,8BAA8B,CAAC;;IAEnD,IAAIF,aAAa,CAACG,gBAAgB,EAAE,IAAI,CAAC,EAAE;MACvC,MAAM,IAAID,KAAK,CAAC,kDAAkD,CAAC;;IAEvE,MAAME,aAAa,GAAGJ,aAAa,CAACK,gBAAgB,EAAE;IACtD,IAAI,CAACD,aAAa,EAAE;MAChB,MAAM,IAAIF,KAAK,CAAC,8BAA8B,CAAC;;IAGnD,IAAI,CAACI,cAAc,GAAGF,aAAuC;IAC7D,IAAI,CAACE,cAAc,CAACC,YAAY,CAAC,IAAI,CAAC;EAC1C;EAEA;;;;;;;;EAQOC,WAAW,CAACZ,QAAgB;IAC/B,IAAI,CAACU,cAAc,CAACE,WAAW,CAAC,IAAI,EAAEZ,QAAQ,CAAC;EACnD;EAEA;;;;;;;;EAQOa,WAAW;IACd,OAAO,IAAI,CAACH,cAAc,CAACG,WAAW,CAAC,IAAI,CAAC;EAChD;EAEA;;;;;;;;EAQOC,cAAc,CAACb,WAAmB;IACrC,IAAI,CAACS,cAAc,CAACI,cAAc,CAAC,IAAI,EAAEb,WAAW,CAAC;EACzD;EAEA;;;;;;;EAOOc,cAAc;IACjB,OAAO,IAAI,CAACL,cAAc,CAACK,cAAc,CAAC,IAAI,CAAC;EACnD;EAEA;;;;;;;EAOOC,OAAO;IACV,IAAI,CAACN,cAAc,CAACO,eAAe,CAAC,IAAI,CAAC;EAC7C","names":["PhysicsMaterial","constructor","friction","restitution","scene","undefined","physicsEngine","getPhysicsEngine","Error","getPluginVersion","physicsPlugin","getPhysicsPlugin","_physicsPlugin","initMaterial","setFriction","getFriction","setRestitution","getRestitution","dispose","disposeMaterial"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Physics/v2/physicsMaterial.ts"],"sourcesContent":["import type { Scene } from \"../../scene\";\r\nimport type { IPhysicsEnginePluginV2 } from \"./IPhysicsEnginePlugin\";\r\n\r\n/**\r\n * Physics material class\r\n * Helps setting friction and restitution that are used to compute responding forces in collision response\r\n */\r\nexport class PhysicsMaterial {\r\n    /**\r\n     * V2 Physics plugin private data for a physics material\r\n     */\r\n    public _pluginData: any = undefined;\r\n    /**\r\n     * The V2 plugin used to create and manage this Physics Body\r\n     */\r\n    protected _physicsPlugin: IPhysicsEnginePluginV2;\r\n\r\n    /**\r\n     * Constructor of the physics material.\r\n     * @param friction - The friction of the material.\r\n     * @param restitution - The restitution of the material.\r\n     * @param scene - The scene to which the physics engine belongs.\r\n     *\r\n     * This code is useful for initializing the physics material with the\r\n     * given friction, restitution and scene. It also checks if the\r\n     * physics engine and plugin are available and if the plugin version\r\n     * is correct. If all conditions are met, it initializes the material\r\n     * with the physics plugin.\r\n     */\r\n    constructor(friction: number, restitution: number, scene: Scene) {\r\n        const physicsEngine = scene.getPhysicsEngine();\r\n        if (!physicsEngine) {\r\n            throw new Error(\"No Physics Engine available.\");\r\n        }\r\n        if (physicsEngine.getPluginVersion() != 2) {\r\n            throw new Error(\"Plugin version is incorrect. Expected version 2.\");\r\n        }\r\n        const physicsPlugin = physicsEngine.getPhysicsPlugin();\r\n        if (!physicsPlugin) {\r\n            throw new Error(\"No Physics Plugin available.\");\r\n        }\r\n\r\n        this._physicsPlugin = physicsPlugin as IPhysicsEnginePluginV2;\r\n        this._physicsPlugin.initMaterial(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the friction of the physics engine.\r\n     * @param friction - The friction to set.\r\n     *\r\n     * This method is useful for setting the friction of the physics engine, which is important for simulating realistic physics.\r\n     * The friction determines how much an object will slow down when it is in contact with another object.\r\n     * This is important for simulating realistic physics, such as when an object slides across a surface.\r\n     */\r\n    public setFriction(friction: number): void {\r\n        this._physicsPlugin.setFriction(this, friction);\r\n    }\r\n\r\n    /**\r\n     * Gets the friction of the physics engine.\r\n     *\r\n     * @returns The friction of the physics engine.\r\n     *\r\n     * This method is useful for getting the friction of the physics engine, which is used to calculate the force of friction between two objects.\r\n     * Knowing the friction of the engine can help to accurately simulate the physical behavior of objects in the engine.\r\n     */\r\n    public getFriction(): number {\r\n        return this._physicsPlugin.getFriction(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the restitution of the physics body.\r\n     * @param restitution A number between 0 and 1 that represents the restitution of the body.\r\n     *\r\n     * This method is useful for setting the restitution of a physics body, which is the amount of energy that is retained after a collision.\r\n     * A restitution of 0 means that no energy is retained, while a restitution of 1 means that all energy is retained.\r\n     * Setting the restitution of a body can help to create realistic physics simulations.\r\n     */\r\n    public setRestitution(restitution: number): void {\r\n        this._physicsPlugin.setRestitution(this, restitution);\r\n    }\r\n\r\n    /**\r\n     * Gets the restitution of the physics engine.\r\n     * @returns The restitution of the physics engine.\r\n     *\r\n     * This method is useful for retrieving the restitution of the physics engine, which is the amount of energy that is preserved after two objects collide.\r\n     * Knowing the restitution of the physics engine can help to accurately simulate the behavior of objects in the physics engine.\r\n     */\r\n    public getRestitution(): number {\r\n        return this._physicsPlugin.getRestitution(this);\r\n    }\r\n\r\n    /**\r\n     * Disposes the material.\r\n     *\r\n     * This method is useful for cleaning up the material when it is no longer needed.\r\n     * It calls the disposeMaterial method of the physics plugin, which is responsible for disposing the material and freeing up any resources associated with it.\r\n     * This ensures that the material is properly disposed of and does not cause any memory leaks.\r\n     */\r\n    public dispose(): void {\r\n        this._physicsPlugin.disposeMaterial(this);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}