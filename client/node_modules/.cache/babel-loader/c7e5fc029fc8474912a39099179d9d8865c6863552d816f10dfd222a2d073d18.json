{"ast":null,"code":"// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"pbrBlockAnisotropic\";\nconst shader = `#ifdef ANISOTROPIC\nstruct anisotropicOutParams\n{\nfloat anisotropy;\nvec3 anisotropicTangent;\nvec3 anisotropicBitangent;\nvec3 anisotropicNormal;\n#if DEBUGMODE>0\nvec3 anisotropyMapData;\n#endif\n};\n#define pbr_inline\nvoid anisotropicBlock(\nin vec3 vAnisotropy,\n#ifdef ANISOTROPIC_TEXTURE\nin vec3 anisotropyMapData,\n#endif\nin mat3 TBN,\nin vec3 normalW,\nin vec3 viewDirectionW,\nout anisotropicOutParams outParams\n)\n{\nfloat anisotropy=vAnisotropy.b;\nvec3 anisotropyDirection=vec3(vAnisotropy.xy,0.);\n#ifdef ANISOTROPIC_TEXTURE\nanisotropy*=anisotropyMapData.b;\nanisotropyDirection.rg*=anisotropyMapData.rg*2.0-1.0;\n#if DEBUGMODE>0\noutParams.anisotropyMapData=anisotropyMapData;\n#endif\n#endif\nmat3 anisoTBN=mat3(normalize(TBN[0]),normalize(TBN[1]),normalize(TBN[2]));\nvec3 anisotropicTangent=normalize(anisoTBN*anisotropyDirection);\nvec3 anisotropicBitangent=normalize(cross(anisoTBN[2],anisotropicTangent));\noutParams.anisotropy=anisotropy;\noutParams.anisotropicTangent=anisotropicTangent;\noutParams.anisotropicBitangent=anisotropicBitangent;\noutParams.anisotropicNormal=getAnisotropicBentNormals(anisotropicTangent,anisotropicBitangent,normalW,viewDirectionW,anisotropy);\n}\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const pbrBlockAnisotropic = {\n  name,\n  shader\n};","map":{"version":3,"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,8BAA4B;AAExD,MAAMC,IAAI,GAAG,qBAAqB;AAClC,MAAMC,MAAM,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyCd;AACD;AACAF,WAAW,CAACG,oBAAoB,CAACF,IAAI,CAAC,GAAGC,MAAM;AAC/C;AACA,OAAO,MAAME,mBAAmB,GAAG;EAAEH,IAAI;EAAEC;AAAM,CAAE","names":["ShaderStore","name","shader","IncludesShadersStore","pbrBlockAnisotropic"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Shaders/ShadersInclude/pbrBlockAnisotropic.ts"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"pbrBlockAnisotropic\";\nconst shader = `#ifdef ANISOTROPIC\nstruct anisotropicOutParams\r{\rfloat anisotropy;\rvec3 anisotropicTangent;\rvec3 anisotropicBitangent;\rvec3 anisotropicNormal;\r#if DEBUGMODE>0\nvec3 anisotropyMapData;\r#endif\n};\r#define pbr_inline\nvoid anisotropicBlock(\rin vec3 vAnisotropy,\r#ifdef ANISOTROPIC_TEXTURE\nin vec3 anisotropyMapData,\r#endif\nin mat3 TBN,\rin vec3 normalW,\rin vec3 viewDirectionW,\rout anisotropicOutParams outParams\r)\r{\rfloat anisotropy=vAnisotropy.b;\rvec3 anisotropyDirection=vec3(vAnisotropy.xy,0.);\r#ifdef ANISOTROPIC_TEXTURE\nanisotropy*=anisotropyMapData.b;\ranisotropyDirection.rg*=anisotropyMapData.rg*2.0-1.0;\r#if DEBUGMODE>0\noutParams.anisotropyMapData=anisotropyMapData;\r#endif\n#endif\nmat3 anisoTBN=mat3(normalize(TBN[0]),normalize(TBN[1]),normalize(TBN[2]));\rvec3 anisotropicTangent=normalize(anisoTBN*anisotropyDirection);\rvec3 anisotropicBitangent=normalize(cross(anisoTBN[2],anisotropicTangent));\routParams.anisotropy=anisotropy;\routParams.anisotropicTangent=anisotropicTangent;\routParams.anisotropicBitangent=anisotropicBitangent;\routParams.anisotropicNormal=getAnisotropicBentNormals(anisotropicTangent,anisotropicBitangent,normalW,viewDirectionW,anisotropy);\r}\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const pbrBlockAnisotropic = { name, shader };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}