{"ast":null,"code":"import { InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\n/** @internal */\nexport class WebGPUHardwareTexture {\n  constructor(existingTexture = null) {\n    this.format = WebGPUConstants.TextureFormat.RGBA8Unorm;\n    this.textureUsages = 0;\n    this.textureAdditionalUsages = 0;\n    this._webgpuTexture = existingTexture;\n    this._webgpuMSAATexture = null;\n    this.view = null;\n    this.viewForWriting = null;\n  }\n  get underlyingResource() {\n    return this._webgpuTexture;\n  }\n  get msaaTexture() {\n    return this._webgpuMSAATexture;\n  }\n  set msaaTexture(texture) {\n    this._webgpuMSAATexture = texture;\n  }\n  set(hardwareTexture) {\n    this._webgpuTexture = hardwareTexture;\n  }\n  setUsage(textureSource, generateMipMaps, isCube, width, height) {\n    generateMipMaps = textureSource === InternalTextureSource.RenderTarget ? false : generateMipMaps;\n    this.createView({\n      format: this.format,\n      dimension: isCube ? WebGPUConstants.TextureViewDimension.Cube : WebGPUConstants.TextureViewDimension.E2d,\n      mipLevelCount: generateMipMaps ? Scalar.ILog2(Math.max(width, height)) + 1 : 1,\n      baseArrayLayer: 0,\n      baseMipLevel: 0,\n      arrayLayerCount: isCube ? 6 : 1,\n      aspect: WebGPUConstants.TextureAspect.All\n    });\n  }\n  createView(descriptor, createViewForWriting = false) {\n    this.view = this._webgpuTexture.createView(descriptor);\n    if (createViewForWriting && descriptor) {\n      const saveNumMipMaps = descriptor.mipLevelCount;\n      descriptor.mipLevelCount = 1;\n      this.viewForWriting = this._webgpuTexture.createView(descriptor);\n      descriptor.mipLevelCount = saveNumMipMaps;\n    }\n  }\n  reset() {\n    this._webgpuTexture = null;\n    this._webgpuMSAATexture = null;\n    this.view = null;\n    this.viewForWriting = null;\n  }\n  release() {\n    var _a, _b, _c;\n    (_a = this._webgpuTexture) === null || _a === void 0 ? void 0 : _a.destroy();\n    (_b = this._webgpuMSAATexture) === null || _b === void 0 ? void 0 : _b.destroy();\n    (_c = this._copyInvertYTempTexture) === null || _c === void 0 ? void 0 : _c.destroy();\n    this.reset();\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,qBAAqB,QAAQ,6CAA2C;AACjF,SAASC,MAAM,QAAQ,4BAA0B;AAEjD,OAAO,KAAKC,eAAe,MAAM,sBAAoB;AAIrD;AACA,OAAM,MAAOC,qBAAqB;EAsD9BC,YAAYC,kBAAwC,IAAI;IAJjD,WAAM,GAAqBH,eAAe,CAACI,aAAa,CAACC,UAAU;IACnE,kBAAa,GAAG,CAAC;IACjB,4BAAuB,GAAG,CAAC;IAG9B,IAAI,CAACC,cAAc,GAAGH,eAAe;IACrC,IAAI,CAACI,kBAAkB,GAAG,IAAI;IAC9B,IAAI,CAACC,IAAI,GAAG,IAAI;IAChB,IAAI,CAACC,cAAc,GAAG,IAAI;EAC9B;EAvBA,IAAWC,kBAAkB;IACzB,OAAO,IAAI,CAACJ,cAAc;EAC9B;EAEA,IAAWK,WAAW;IAClB,OAAO,IAAI,CAACJ,kBAAkB;EAClC;EAEA,IAAWI,WAAW,CAACC,OAA6B;IAChD,IAAI,CAACL,kBAAkB,GAAGK,OAAO;EACrC;EAeOC,GAAG,CAACC,eAA2B;IAClC,IAAI,CAACR,cAAc,GAAGQ,eAAe;EACzC;EAEOC,QAAQ,CAACC,aAAqB,EAAEC,eAAwB,EAAEC,MAAe,EAAEC,KAAa,EAAEC,MAAc;IAC3GH,eAAe,GAAGD,aAAa,KAAKlB,qBAAqB,CAACuB,YAAY,GAAG,KAAK,GAAGJ,eAAe;IAEhG,IAAI,CAACK,UAAU,CAAC;MACZC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,SAAS,EAAEN,MAAM,GAAGlB,eAAe,CAACyB,oBAAoB,CAACC,IAAI,GAAG1B,eAAe,CAACyB,oBAAoB,CAACE,GAAG;MACxGC,aAAa,EAAEX,eAAe,GAAGlB,MAAM,CAAC8B,KAAK,CAACC,IAAI,CAACC,GAAG,CAACZ,KAAK,EAAEC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;MAC9EY,cAAc,EAAE,CAAC;MACjBC,YAAY,EAAE,CAAC;MACfC,eAAe,EAAEhB,MAAM,GAAG,CAAC,GAAG,CAAC;MAC/BiB,MAAM,EAAEnC,eAAe,CAACoC,aAAa,CAACC;KACzC,CAAC;EACN;EAEOf,UAAU,CAACgB,UAAqC,EAAEC,oBAAoB,GAAG,KAAK;IACjF,IAAI,CAAC/B,IAAI,GAAG,IAAI,CAACF,cAAe,CAACgB,UAAU,CAACgB,UAAU,CAAC;IACvD,IAAIC,oBAAoB,IAAID,UAAU,EAAE;MACpC,MAAME,cAAc,GAAGF,UAAU,CAACV,aAAa;MAC/CU,UAAU,CAACV,aAAa,GAAG,CAAC;MAC5B,IAAI,CAACnB,cAAc,GAAG,IAAI,CAACH,cAAe,CAACgB,UAAU,CAACgB,UAAU,CAAC;MACjEA,UAAU,CAACV,aAAa,GAAGY,cAAc;;EAEjD;EAEOC,KAAK;IACR,IAAI,CAACnC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,kBAAkB,GAAG,IAAI;IAC9B,IAAI,CAACC,IAAI,GAAG,IAAI;IAChB,IAAI,CAACC,cAAc,GAAG,IAAI;EAC9B;EAEOiC,OAAO;;IACV,UAAI,CAACpC,cAAc,0CAAEqC,OAAO,EAAE;IAC9B,UAAI,CAACpC,kBAAkB,0CAAEoC,OAAO,EAAE;IAClC,UAAI,CAACC,uBAAuB,0CAAED,OAAO,EAAE;IACvC,IAAI,CAACF,KAAK,EAAE;EAChB","names":["InternalTextureSource","Scalar","WebGPUConstants","WebGPUHardwareTexture","constructor","existingTexture","TextureFormat","RGBA8Unorm","_webgpuTexture","_webgpuMSAATexture","view","viewForWriting","underlyingResource","msaaTexture","texture","set","hardwareTexture","setUsage","textureSource","generateMipMaps","isCube","width","height","RenderTarget","createView","format","dimension","TextureViewDimension","Cube","E2d","mipLevelCount","ILog2","Math","max","baseArrayLayer","baseMipLevel","arrayLayerCount","aspect","TextureAspect","All","descriptor","createViewForWriting","saveNumMipMaps","reset","release","destroy","_copyInvertYTempTexture"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/WebGPU/webgpuHardwareTexture.ts"],"sourcesContent":["import type { HardwareTextureWrapper } from \"../../Materials/Textures/hardwareTextureWrapper\";\r\nimport { InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport { Scalar } from \"../../Maths/math.scalar\";\r\nimport type { Nullable } from \"../../types\";\r\nimport * as WebGPUConstants from \"./webgpuConstants\";\r\n\r\ndeclare type WebGPUBundleList = import(\"./webgpuBundleList\").WebGPUBundleList;\r\n\r\n/** @internal */\r\nexport class WebGPUHardwareTexture implements HardwareTextureWrapper {\r\n    /**\r\n     * List of bundles collected in the snapshot rendering mode when the texture is a render target texture\r\n     * The index in this array is the current layer we are rendering into\r\n     * @internal\r\n     */\r\n    public _bundleLists: WebGPUBundleList[];\r\n    /**\r\n     * Current layer we are rendering into when in snapshot rendering mode (if the texture is a render target texture)\r\n     * @internal\r\n     */\r\n    public _currentLayer: number;\r\n\r\n    /**\r\n     * Cache of RenderPassDescriptor and BindGroup used when generating mipmaps (see WebGPUTextureHelper.generateMipmaps)\r\n     * @internal\r\n     */\r\n    public _mipmapGenRenderPassDescr: GPURenderPassDescriptor[][];\r\n    /** @internal */\r\n    public _mipmapGenBindGroup: GPUBindGroup[][];\r\n\r\n    /**\r\n     * Cache for the invertYPreMultiplyAlpha function (see WebGPUTextureHelper)\r\n     * @internal\r\n     */\r\n    public _copyInvertYTempTexture?: GPUTexture;\r\n    /** @internal */\r\n    public _copyInvertYRenderPassDescr: GPURenderPassDescriptor;\r\n    /** @internal */\r\n    public _copyInvertYBindGroup: GPUBindGroup;\r\n    /** @internal */\r\n    public _copyInvertYBindGroupWithOfst: GPUBindGroup;\r\n\r\n    private _webgpuTexture: Nullable<GPUTexture>;\r\n    private _webgpuMSAATexture: Nullable<GPUTexture>;\r\n\r\n    public get underlyingResource(): Nullable<GPUTexture> {\r\n        return this._webgpuTexture;\r\n    }\r\n\r\n    public get msaaTexture(): Nullable<GPUTexture> {\r\n        return this._webgpuMSAATexture;\r\n    }\r\n\r\n    public set msaaTexture(texture: Nullable<GPUTexture>) {\r\n        this._webgpuMSAATexture = texture;\r\n    }\r\n\r\n    public view: Nullable<GPUTextureView>;\r\n    public viewForWriting: Nullable<GPUTextureView>;\r\n    public format: GPUTextureFormat = WebGPUConstants.TextureFormat.RGBA8Unorm;\r\n    public textureUsages = 0;\r\n    public textureAdditionalUsages = 0;\r\n\r\n    constructor(existingTexture: Nullable<GPUTexture> = null) {\r\n        this._webgpuTexture = existingTexture;\r\n        this._webgpuMSAATexture = null;\r\n        this.view = null;\r\n        this.viewForWriting = null;\r\n    }\r\n\r\n    public set(hardwareTexture: GPUTexture): void {\r\n        this._webgpuTexture = hardwareTexture;\r\n    }\r\n\r\n    public setUsage(textureSource: number, generateMipMaps: boolean, isCube: boolean, width: number, height: number): void {\r\n        generateMipMaps = textureSource === InternalTextureSource.RenderTarget ? false : generateMipMaps;\r\n\r\n        this.createView({\r\n            format: this.format,\r\n            dimension: isCube ? WebGPUConstants.TextureViewDimension.Cube : WebGPUConstants.TextureViewDimension.E2d,\r\n            mipLevelCount: generateMipMaps ? Scalar.ILog2(Math.max(width, height)) + 1 : 1,\r\n            baseArrayLayer: 0,\r\n            baseMipLevel: 0,\r\n            arrayLayerCount: isCube ? 6 : 1,\r\n            aspect: WebGPUConstants.TextureAspect.All,\r\n        });\r\n    }\r\n\r\n    public createView(descriptor?: GPUTextureViewDescriptor, createViewForWriting = false): void {\r\n        this.view = this._webgpuTexture!.createView(descriptor);\r\n        if (createViewForWriting && descriptor) {\r\n            const saveNumMipMaps = descriptor.mipLevelCount;\r\n            descriptor.mipLevelCount = 1;\r\n            this.viewForWriting = this._webgpuTexture!.createView(descriptor);\r\n            descriptor.mipLevelCount = saveNumMipMaps;\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        this._webgpuTexture = null;\r\n        this._webgpuMSAATexture = null;\r\n        this.view = null;\r\n        this.viewForWriting = null;\r\n    }\r\n\r\n    public release(): void {\r\n        this._webgpuTexture?.destroy();\r\n        this._webgpuMSAATexture?.destroy();\r\n        this._copyInvertYTempTexture?.destroy();\r\n        this.reset();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}