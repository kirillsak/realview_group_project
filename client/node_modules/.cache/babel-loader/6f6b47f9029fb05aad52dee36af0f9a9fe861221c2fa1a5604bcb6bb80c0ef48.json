{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { DrawWrapper } from \"../Materials/drawWrapper.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\n/**\n * This represents one of the lens effect in a `lensFlareSystem`.\n * It controls one of the individual texture used in the effect.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/lenseFlare\n */\nexport class LensFlare {\n  /**\n   * Instantiates a new Lens Flare.\n   * This represents one of the lens effect in a `lensFlareSystem`.\n   * It controls one of the individual texture used in the effect.\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/lenseFlare\n   * @param size Define the size of the lens flare in the system (a floating value between 0 and 1)\n   * @param position Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\n   * @param color Define the lens color\n   * @param imgUrl Define the lens texture url\n   * @param system Define the `lensFlareSystem` this flare is part of\n   */\n  constructor(\n  /**\n   * Define the size of the lens flare in the system (a floating value between 0 and 1)\n   */\n  size,\n  /**\n   * Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\n   */\n  position, color, imgUrl, system) {\n    this.size = size;\n    this.position = position;\n    /**\n     * Define the alpha mode to render this particular lens.\n     */\n    this.alphaMode = 6;\n    this.color = color || new Color3(1, 1, 1);\n    this.texture = imgUrl ? new Texture(imgUrl, system.getScene(), true) : null;\n    this._system = system;\n    const engine = system.scene.getEngine();\n    this._drawWrapper = new DrawWrapper(engine);\n    this._drawWrapper.effect = engine.createEffect(\"lensFlare\", [VertexBuffer.PositionKind], [\"color\", \"viewportMatrix\"], [\"textureSampler\"], \"\");\n    system.lensFlares.push(this);\n  }\n  /**\n   * Creates a new Lens Flare.\n   * This represents one of the lens effect in a `lensFlareSystem`.\n   * It controls one of the individual texture used in the effect.\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/lenseFlare\n   * @param size Define the size of the lens flare (a floating value between 0 and 1)\n   * @param position Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\n   * @param color Define the lens color\n   * @param imgUrl Define the lens texture url\n   * @param system Define the `lensFlareSystem` this flare is part of\n   * @returns The newly created Lens Flare\n   */\n  static AddFlare(size, position, color, imgUrl, system) {\n    return new LensFlare(size, position, color, imgUrl, system);\n  }\n  /**\n   * Dispose and release the lens flare with its associated resources.\n   */\n  dispose() {\n    if (this.texture) {\n      this.texture.dispose();\n    }\n    // Remove from scene\n    const index = this._system.lensFlares.indexOf(this);\n    this._system.lensFlares.splice(index, 1);\n  }\n}","map":{"version":3,"mappings":";AACA,SAASA,MAAM,QAAQ,wBAAsB;AAC7C,SAASC,OAAO,QAAQ,kCAAgC;AAGxD,SAASC,WAAW,QAAQ,6BAA2B;AACvD,SAASC,YAAY,QAAQ,sBAAoB;AACjD;;;;;AAKA,OAAM,MAAOC,SAAS;EAqClB;;;;;;;;;;;EAWAC;EACI;;;EAGOC,IAAY;EACnB;;;EAGOC,QAAgB,EACvBC,KAAa,EACbC,MAAc,EACdC,MAAuB;IAPhB,SAAI,GAAJJ,IAAI;IAIJ,aAAQ,GAARC,QAAQ;IA7CnB;;;IAGO,cAAS,GAAW;IA+CvB,IAAI,CAACC,KAAK,GAAGA,KAAK,IAAI,IAAIR,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACzC,IAAI,CAACW,OAAO,GAAGF,MAAM,GAAG,IAAIR,OAAO,CAACQ,MAAM,EAAEC,MAAM,CAACE,QAAQ,EAAE,EAAE,IAAI,CAAC,GAAG,IAAI;IAC3E,IAAI,CAACC,OAAO,GAAGH,MAAM;IAErB,MAAMI,MAAM,GAAGJ,MAAM,CAACK,KAAK,CAACC,SAAS,EAAE;IAEvC,IAAI,CAACC,YAAY,GAAG,IAAIf,WAAW,CAACY,MAAM,CAAC;IAE3C,IAAI,CAACG,YAAY,CAACC,MAAM,GAAGJ,MAAM,CAACK,YAAY,CAAC,WAAW,EAAE,CAAChB,YAAY,CAACiB,YAAY,CAAC,EAAE,CAAC,OAAO,EAAE,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,CAAC;IAE7IV,MAAM,CAACW,UAAU,CAACC,IAAI,CAAC,IAAI,CAAC;EAChC;EAnDA;;;;;;;;;;;;EAYO,OAAOC,QAAQ,CAACjB,IAAY,EAAEC,QAAgB,EAAEC,KAAa,EAAEC,MAAc,EAAEC,MAAuB;IACzG,OAAO,IAAIN,SAAS,CAACE,IAAI,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,MAAM,EAAEC,MAAM,CAAC;EAC/D;EAuCA;;;EAGOc,OAAO;IACV,IAAI,IAAI,CAACb,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,CAACa,OAAO,EAAE;;IAG1B;IACA,MAAMC,KAAK,GAAG,IAAI,CAACZ,OAAO,CAACQ,UAAU,CAACK,OAAO,CAAC,IAAI,CAAC;IACnD,IAAI,CAACb,OAAO,CAACQ,UAAU,CAACM,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;EAC5C","names":["Color3","Texture","DrawWrapper","VertexBuffer","LensFlare","constructor","size","position","color","imgUrl","system","texture","getScene","_system","engine","scene","getEngine","_drawWrapper","effect","createEffect","PositionKind","lensFlares","push","AddFlare","dispose","index","indexOf","splice"],"sourceRoot":"","sources":["../../../../lts/core/generated/LensFlares/lensFlare.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { LensFlareSystem } from \"./lensFlareSystem\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { DrawWrapper } from \"../Materials/drawWrapper\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\n/**\r\n * This represents one of the lens effect in a `lensFlareSystem`.\r\n * It controls one of the individual texture used in the effect.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/lenseFlare\r\n */\r\nexport class LensFlare {\r\n    /**\r\n     * Define the lens color.\r\n     */\r\n    public color: Color3;\r\n\r\n    /**\r\n     * Define the lens texture.\r\n     */\r\n    public texture: Nullable<Texture>;\r\n\r\n    /**\r\n     * Define the alpha mode to render this particular lens.\r\n     */\r\n    public alphaMode: number = Constants.ALPHA_ONEONE;\r\n\r\n    /** @internal */\r\n    public _drawWrapper: DrawWrapper;\r\n\r\n    private _system: LensFlareSystem;\r\n\r\n    /**\r\n     * Creates a new Lens Flare.\r\n     * This represents one of the lens effect in a `lensFlareSystem`.\r\n     * It controls one of the individual texture used in the effect.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/lenseFlare\r\n     * @param size Define the size of the lens flare (a floating value between 0 and 1)\r\n     * @param position Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\r\n     * @param color Define the lens color\r\n     * @param imgUrl Define the lens texture url\r\n     * @param system Define the `lensFlareSystem` this flare is part of\r\n     * @returns The newly created Lens Flare\r\n     */\r\n    public static AddFlare(size: number, position: number, color: Color3, imgUrl: string, system: LensFlareSystem): LensFlare {\r\n        return new LensFlare(size, position, color, imgUrl, system);\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new Lens Flare.\r\n     * This represents one of the lens effect in a `lensFlareSystem`.\r\n     * It controls one of the individual texture used in the effect.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/lenseFlare\r\n     * @param size Define the size of the lens flare in the system (a floating value between 0 and 1)\r\n     * @param position Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\r\n     * @param color Define the lens color\r\n     * @param imgUrl Define the lens texture url\r\n     * @param system Define the `lensFlareSystem` this flare is part of\r\n     */\r\n    constructor(\r\n        /**\r\n         * Define the size of the lens flare in the system (a floating value between 0 and 1)\r\n         */\r\n        public size: number,\r\n        /**\r\n         * Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\r\n         */\r\n        public position: number,\r\n        color: Color3,\r\n        imgUrl: string,\r\n        system: LensFlareSystem\r\n    ) {\r\n        this.color = color || new Color3(1, 1, 1);\r\n        this.texture = imgUrl ? new Texture(imgUrl, system.getScene(), true) : null;\r\n        this._system = system;\r\n\r\n        const engine = system.scene.getEngine();\r\n\r\n        this._drawWrapper = new DrawWrapper(engine);\r\n\r\n        this._drawWrapper.effect = engine.createEffect(\"lensFlare\", [VertexBuffer.PositionKind], [\"color\", \"viewportMatrix\"], [\"textureSampler\"], \"\");\r\n\r\n        system.lensFlares.push(this);\r\n    }\r\n\r\n    /**\r\n     * Dispose and release the lens flare with its associated resources.\r\n     */\r\n    public dispose(): void {\r\n        if (this.texture) {\r\n            this.texture.dispose();\r\n        }\r\n\r\n        // Remove from scene\r\n        const index = this._system.lensFlares.indexOf(this);\r\n        this._system.lensFlares.splice(index, 1);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}