{"ast":null,"code":"// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nconst name = \"fluidRenderingBilateralBlurPixelShader\";\nconst shader = `uniform sampler2D textureSampler;\nuniform int maxFilterSize;\nuniform vec2 blurDir;\nuniform float projectedParticleConstant;\nuniform float depthThreshold;\nvarying vec2 vUV;\nvoid main(void) {\nfloat depth=textureLod(textureSampler,vUV,0.).x;\nif (depth>=1e6 || depth<=0.) {\nglFragColor=vec4(vec3(depth),1.);\nreturn;\n}\nint filterSize=min(maxFilterSize,int(ceil(projectedParticleConstant/depth)));\nfloat sigma=float(filterSize)/3.0;\nfloat two_sigma2=2.0*sigma*sigma;\nfloat sigmaDepth=depthThreshold/3.0;\nfloat two_sigmaDepth2=2.0*sigmaDepth*sigmaDepth;\nfloat sum=0.;\nfloat wsum=0.;\nfloat sumVel=0.;\nfor (int x=-filterSize; x<=filterSize; ++x) {\nvec2 coords=vec2(x);\nvec2 sampleDepthVel=textureLod(textureSampler,vUV+coords*blurDir,0.).rg;\nfloat r=dot(coords,coords);\nfloat w=exp(-r/two_sigma2);\nfloat rDepth=sampleDepthVel.r-depth;\nfloat wd=exp(-rDepth*rDepth/two_sigmaDepth2);\nsum+=sampleDepthVel.r*w*wd;\nsumVel+=sampleDepthVel.g*w*wd;\nwsum+=w*wd;\n}\nglFragColor=vec4(sum/wsum,sumVel/wsum,0.,1.);\n}\n`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluidRenderingBilateralBlurPixelShader = {\n  name,\n  shader\n};","map":{"version":3,"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,2BAAyB;AAErD,MAAMC,IAAI,GAAG,wCAAwC;AACrD,MAAMC,MAAM,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiCd;AACD;AACAF,WAAW,CAACG,YAAY,CAACF,IAAI,CAAC,GAAGC,MAAM;AACvC;AACA,OAAO,MAAME,sCAAsC,GAAG;EAAEH,IAAI;EAAEC;AAAM,CAAE","names":["ShaderStore","name","shader","ShadersStore","fluidRenderingBilateralBlurPixelShader"],"sourceRoot":"","sources":["../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"fluidRenderingBilateralBlurPixelShader\";\nconst shader = `uniform sampler2D textureSampler;\runiform int maxFilterSize;\runiform vec2 blurDir;\runiform float projectedParticleConstant;\runiform float depthThreshold;\rvarying vec2 vUV;\rvoid main(void) {\rfloat depth=textureLod(textureSampler,vUV,0.).x;\rif (depth>=1e6 || depth<=0.) {\rglFragColor=vec4(vec3(depth),1.);\rreturn;\r}\rint filterSize=min(maxFilterSize,int(ceil(projectedParticleConstant/depth)));\rfloat sigma=float(filterSize)/3.0;\rfloat two_sigma2=2.0*sigma*sigma;\rfloat sigmaDepth=depthThreshold/3.0;\rfloat two_sigmaDepth2=2.0*sigmaDepth*sigmaDepth;\rfloat sum=0.;\rfloat wsum=0.;\rfloat sumVel=0.;\rfor (int x=-filterSize; x<=filterSize; ++x) {\rvec2 coords=vec2(x);\rvec2 sampleDepthVel=textureLod(textureSampler,vUV+coords*blurDir,0.).rg;\rfloat r=dot(coords,coords);\rfloat w=exp(-r/two_sigma2);\rfloat rDepth=sampleDepthVel.r-depth;\rfloat wd=exp(-rDepth*rDepth/two_sigmaDepth2);\rsum+=sampleDepthVel.r*w*wd;\rsumVel+=sampleDepthVel.g*w*wd;\rwsum+=w*wd;\r}\rglFragColor=vec4(sum/wsum,sumVel/wsum,0.,1.);\r}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluidRenderingBilateralBlurPixelShader = { name, shader };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}