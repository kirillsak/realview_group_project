{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { Vector3 } from \"./math.vector.js\";\nimport { nativeOverride } from \"../Misc/decorators.js\";\n// This helper class is only here so we can apply the nativeOverride decorator to functions.\nclass MathHelpers {\n  static extractMinAndMaxIndexed(positions, indices, indexStart, indexCount, minimum, maximum) {\n    for (let index = indexStart; index < indexStart + indexCount; index++) {\n      const offset = indices[index] * 3;\n      const x = positions[offset];\n      const y = positions[offset + 1];\n      const z = positions[offset + 2];\n      minimum.minimizeInPlaceFromFloats(x, y, z);\n      maximum.maximizeInPlaceFromFloats(x, y, z);\n    }\n  }\n  static extractMinAndMax(positions, start, count, stride, minimum, maximum) {\n    for (let index = start, offset = start * stride; index < start + count; index++, offset += stride) {\n      const x = positions[offset];\n      const y = positions[offset + 1];\n      const z = positions[offset + 2];\n      minimum.minimizeInPlaceFromFloats(x, y, z);\n      maximum.maximizeInPlaceFromFloats(x, y, z);\n    }\n  }\n}\n__decorate([nativeOverride.filter((...[positions, indices]) => !Array.isArray(positions) && !Array.isArray(indices))], MathHelpers, \"extractMinAndMaxIndexed\", null);\n__decorate([nativeOverride.filter((...[positions]) => !Array.isArray(positions))], MathHelpers, \"extractMinAndMax\", null);\n/**\n * Extracts minimum and maximum values from a list of indexed positions\n * @param positions defines the positions to use\n * @param indices defines the indices to the positions\n * @param indexStart defines the start index\n * @param indexCount defines the end index\n * @param bias defines bias value to add to the result\n * @returns minimum and maximum values\n */\nexport function extractMinAndMaxIndexed(positions, indices, indexStart, indexCount, bias = null) {\n  const minimum = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n  const maximum = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n  MathHelpers.extractMinAndMaxIndexed(positions, indices, indexStart, indexCount, minimum, maximum);\n  if (bias) {\n    minimum.x -= minimum.x * bias.x + bias.y;\n    minimum.y -= minimum.y * bias.x + bias.y;\n    minimum.z -= minimum.z * bias.x + bias.y;\n    maximum.x += maximum.x * bias.x + bias.y;\n    maximum.y += maximum.y * bias.x + bias.y;\n    maximum.z += maximum.z * bias.x + bias.y;\n  }\n  return {\n    minimum: minimum,\n    maximum: maximum\n  };\n}\n/**\n * Extracts minimum and maximum values from a list of positions\n * @param positions defines the positions to use\n * @param start defines the start index in the positions array\n * @param count defines the number of positions to handle\n * @param bias defines bias value to add to the result\n * @param stride defines the stride size to use (distance between two positions in the positions array)\n * @returns minimum and maximum values\n */\nexport function extractMinAndMax(positions, start, count, bias = null, stride) {\n  const minimum = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n  const maximum = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n  if (!stride) {\n    stride = 3;\n  }\n  MathHelpers.extractMinAndMax(positions, start, count, stride, minimum, maximum);\n  if (bias) {\n    minimum.x -= minimum.x * bias.x + bias.y;\n    minimum.y -= minimum.y * bias.x + bias.y;\n    minimum.z -= minimum.z * bias.x + bias.y;\n    maximum.x += maximum.x * bias.x + bias.y;\n    maximum.y += maximum.y * bias.x + bias.y;\n    maximum.z += maximum.z * bias.x + bias.y;\n  }\n  return {\n    minimum: minimum,\n    maximum: maximum\n  };\n}","map":{"version":3,"mappings":"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","names":["Vector3","nativeOverride","MathHelpers","extractMinAndMaxIndexed","positions","indices","indexStart","indexCount","minimum","maximum","index","offset","x","y","z","minimizeInPlaceFromFloats","maximizeInPlaceFromFloats","extractMinAndMax","start","count","stride","__decorate","filter","Array","isArray","bias","Number","MAX_VALUE"],"sourceRoot":"","sources":["../../../../lts/core/generated/Maths/math.functions.ts"],"sourcesContent":["import type { FloatArray, Nullable, IndicesArray } from \"../types\";\r\nimport type { Vector2 } from \"./math.vector\";\r\nimport { Vector3 } from \"./math.vector\";\r\nimport { nativeOverride } from \"../Misc/decorators\";\r\n\r\n// This helper class is only here so we can apply the nativeOverride decorator to functions.\r\nclass MathHelpers {\r\n    @nativeOverride.filter((...[positions, indices]: Parameters<typeof MathHelpers.extractMinAndMaxIndexed>) => !Array.isArray(positions) && !Array.isArray(indices))\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static extractMinAndMaxIndexed(positions: FloatArray, indices: IndicesArray, indexStart: number, indexCount: number, minimum: Vector3, maximum: Vector3): void {\r\n        for (let index = indexStart; index < indexStart + indexCount; index++) {\r\n            const offset = indices[index] * 3;\r\n            const x = positions[offset];\r\n            const y = positions[offset + 1];\r\n            const z = positions[offset + 2];\r\n            minimum.minimizeInPlaceFromFloats(x, y, z);\r\n            maximum.maximizeInPlaceFromFloats(x, y, z);\r\n        }\r\n    }\r\n\r\n    @nativeOverride.filter((...[positions]: Parameters<typeof MathHelpers.extractMinAndMax>) => !Array.isArray(positions))\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static extractMinAndMax(positions: FloatArray, start: number, count: number, stride: number, minimum: Vector3, maximum: Vector3): void {\r\n        for (let index = start, offset = start * stride; index < start + count; index++, offset += stride) {\r\n            const x = positions[offset];\r\n            const y = positions[offset + 1];\r\n            const z = positions[offset + 2];\r\n            minimum.minimizeInPlaceFromFloats(x, y, z);\r\n            maximum.maximizeInPlaceFromFloats(x, y, z);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Extracts minimum and maximum values from a list of indexed positions\r\n * @param positions defines the positions to use\r\n * @param indices defines the indices to the positions\r\n * @param indexStart defines the start index\r\n * @param indexCount defines the end index\r\n * @param bias defines bias value to add to the result\r\n * @returns minimum and maximum values\r\n */\r\nexport function extractMinAndMaxIndexed(\r\n    positions: FloatArray,\r\n    indices: IndicesArray,\r\n    indexStart: number,\r\n    indexCount: number,\r\n    bias: Nullable<Vector2> = null\r\n): { minimum: Vector3; maximum: Vector3 } {\r\n    const minimum = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n    const maximum = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n\r\n    MathHelpers.extractMinAndMaxIndexed(positions, indices, indexStart, indexCount, minimum, maximum);\r\n\r\n    if (bias) {\r\n        minimum.x -= minimum.x * bias.x + bias.y;\r\n        minimum.y -= minimum.y * bias.x + bias.y;\r\n        minimum.z -= minimum.z * bias.x + bias.y;\r\n        maximum.x += maximum.x * bias.x + bias.y;\r\n        maximum.y += maximum.y * bias.x + bias.y;\r\n        maximum.z += maximum.z * bias.x + bias.y;\r\n    }\r\n\r\n    return {\r\n        minimum: minimum,\r\n        maximum: maximum,\r\n    };\r\n}\r\n\r\n/**\r\n * Extracts minimum and maximum values from a list of positions\r\n * @param positions defines the positions to use\r\n * @param start defines the start index in the positions array\r\n * @param count defines the number of positions to handle\r\n * @param bias defines bias value to add to the result\r\n * @param stride defines the stride size to use (distance between two positions in the positions array)\r\n * @returns minimum and maximum values\r\n */\r\nexport function extractMinAndMax(positions: FloatArray, start: number, count: number, bias: Nullable<Vector2> = null, stride?: number): { minimum: Vector3; maximum: Vector3 } {\r\n    const minimum = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n    const maximum = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n\r\n    if (!stride) {\r\n        stride = 3;\r\n    }\r\n\r\n    MathHelpers.extractMinAndMax(positions, start, count, stride, minimum, maximum);\r\n\r\n    if (bias) {\r\n        minimum.x -= minimum.x * bias.x + bias.y;\r\n        minimum.y -= minimum.y * bias.x + bias.y;\r\n        minimum.z -= minimum.z * bias.x + bias.y;\r\n        maximum.x += maximum.x * bias.x + bias.y;\r\n        maximum.y += maximum.y * bias.x + bias.y;\r\n        maximum.z += maximum.z * bias.x + bias.y;\r\n    }\r\n\r\n    return {\r\n        minimum: minimum,\r\n        maximum: maximum,\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}