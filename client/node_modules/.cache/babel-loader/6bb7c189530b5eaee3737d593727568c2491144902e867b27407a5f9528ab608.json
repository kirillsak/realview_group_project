{"ast":null,"code":"import { Tools } from \"../../Misc/tools.js\";\n/**\n * Meshopt compression (https://github.com/zeux/meshoptimizer)\n *\n * This class wraps the meshopt library from https://github.com/zeux/meshoptimizer/tree/master/js.\n *\n * **Encoder**\n *\n * The encoder is not currently implemented.\n *\n * **Decoder**\n *\n * By default, the configuration points to a copy of the meshopt files on the Babylon.js preview CDN (e.g. https://preview.babylonjs.com/meshopt_decoder.js).\n *\n * To update the configuration, use the following code:\n * ```javascript\n *     MeshoptCompression.Configuration = {\n *         decoder: {\n *             url: \"<url to the meshopt decoder library>\"\n *         }\n *     };\n * ```\n */\nexport class MeshoptCompression {\n  /**\n   * Constructor\n   */\n  constructor() {\n    const decoder = MeshoptCompression.Configuration.decoder;\n    this._decoderModulePromise = Tools.LoadScriptAsync(Tools.GetAbsoluteUrl(decoder.url)).then(() => {\n      // Wait for WebAssembly compilation before resolving promise\n      return MeshoptDecoder.ready;\n    });\n  }\n  /**\n   * Default instance for the meshoptimizer object.\n   */\n  static get Default() {\n    if (!MeshoptCompression._Default) {\n      MeshoptCompression._Default = new MeshoptCompression();\n    }\n    return MeshoptCompression._Default;\n  }\n  /**\n   * Stop all async operations and release resources.\n   */\n  dispose() {\n    delete this._decoderModulePromise;\n  }\n  /**\n   * Decode meshopt data.\n   * @see https://github.com/zeux/meshoptimizer/tree/master/js#decoder\n   * @param source The input data.\n   * @param count The number of elements.\n   * @param stride The stride in bytes.\n   * @param mode The compression mode.\n   * @param filter The compression filter.\n   * @returns a Promise<Uint8Array> that resolves to the decoded data\n   */\n  decodeGltfBufferAsync(source, count, stride, mode, filter) {\n    return this._decoderModulePromise.then(() => {\n      const result = new Uint8Array(count * stride);\n      MeshoptDecoder.decodeGltfBuffer(result, count, stride, source, mode, filter);\n      return result;\n    });\n  }\n}\n/**\n * The configuration. Defaults to the following:\n * ```javascript\n * decoder: {\n *   url: \"https://preview.babylonjs.com/meshopt_decoder.js\"\n * }\n * ```\n */\nMeshoptCompression.Configuration = {\n  decoder: {\n    url: \"https://preview.babylonjs.com/meshopt_decoder.js\"\n  }\n};\nMeshoptCompression._Default = null;","map":{"version":3,"mappings":"AAAA,SAASA,KAAK,QAAQ,qBAAmB;AAsBzC;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,MAAOC,kBAAkB;EA8B3B;;;EAGAC;IACI,MAAMC,OAAO,GAAGF,kBAAkB,CAACG,aAAa,CAACD,OAAO;IAExD,IAAI,CAACE,qBAAqB,GAAGL,KAAK,CAACM,eAAe,CAACN,KAAK,CAACO,cAAc,CAACJ,OAAO,CAACK,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC,MAAK;MAC5F;MACA,OAAOC,cAAc,CAACC,KAAK;IAC/B,CAAC,CAAC;EACN;EArBA;;;EAGO,WAAWC,OAAO;IACrB,IAAI,CAACX,kBAAkB,CAACY,QAAQ,EAAE;MAC9BZ,kBAAkB,CAACY,QAAQ,GAAG,IAAIZ,kBAAkB,EAAE;;IAG1D,OAAOA,kBAAkB,CAACY,QAAQ;EACtC;EAcA;;;EAGOC,OAAO;IACV,OAAO,IAAI,CAACT,qBAAqB;EACrC;EAEA;;;;;;;;;;EAUOU,qBAAqB,CAACC,MAAkB,EAAEC,KAAa,EAAEC,MAAc,EAAEC,IAA4C,EAAEC,MAAe;IACzI,OAAO,IAAI,CAACf,qBAAsB,CAACI,IAAI,CAAC,MAAK;MACzC,MAAMY,MAAM,GAAG,IAAIC,UAAU,CAACL,KAAK,GAAGC,MAAM,CAAC;MAC7CR,cAAc,CAACa,gBAAgB,CAACF,MAAM,EAAEJ,KAAK,EAAEC,MAAM,EAAEF,MAAM,EAAEG,IAAI,EAAEC,MAAM,CAAC;MAC5E,OAAOC,MAAM;IACjB,CAAC,CAAC;EACN;;AA9DA;;;;;;;;AAQcpB,gCAAa,GAAqC;EAC5DE,OAAO,EAAE;IACLK,GAAG,EAAE;;CAEZ;AAEcP,2BAAQ,GAAiC,IAAI","names":["Tools","MeshoptCompression","constructor","decoder","Configuration","_decoderModulePromise","LoadScriptAsync","GetAbsoluteUrl","url","then","MeshoptDecoder","ready","Default","_Default","dispose","decodeGltfBufferAsync","source","count","stride","mode","filter","result","Uint8Array","decodeGltfBuffer"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Meshes/Compression/meshoptCompression.ts"],"sourcesContent":["import { Tools } from \"../../Misc/tools\";\r\nimport type { IDisposable } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let MeshoptDecoder: any;\r\n\r\n/**\r\n * Configuration for meshoptimizer compression\r\n */\r\nexport interface IMeshoptCompressionConfiguration {\r\n    /**\r\n     * Configuration for the decoder.\r\n     */\r\n    decoder: {\r\n        /**\r\n         * The url to the meshopt decoder library.\r\n         */\r\n        url: string;\r\n    };\r\n}\r\n\r\n/**\r\n * Meshopt compression (https://github.com/zeux/meshoptimizer)\r\n *\r\n * This class wraps the meshopt library from https://github.com/zeux/meshoptimizer/tree/master/js.\r\n *\r\n * **Encoder**\r\n *\r\n * The encoder is not currently implemented.\r\n *\r\n * **Decoder**\r\n *\r\n * By default, the configuration points to a copy of the meshopt files on the Babylon.js preview CDN (e.g. https://preview.babylonjs.com/meshopt_decoder.js).\r\n *\r\n * To update the configuration, use the following code:\r\n * ```javascript\r\n *     MeshoptCompression.Configuration = {\r\n *         decoder: {\r\n *             url: \"<url to the meshopt decoder library>\"\r\n *         }\r\n *     };\r\n * ```\r\n */\r\nexport class MeshoptCompression implements IDisposable {\r\n    private _decoderModulePromise?: Promise<any>;\r\n\r\n    /**\r\n     * The configuration. Defaults to the following:\r\n     * ```javascript\r\n     * decoder: {\r\n     *   url: \"https://preview.babylonjs.com/meshopt_decoder.js\"\r\n     * }\r\n     * ```\r\n     */\r\n    public static Configuration: IMeshoptCompressionConfiguration = {\r\n        decoder: {\r\n            url: \"https://preview.babylonjs.com/meshopt_decoder.js\",\r\n        },\r\n    };\r\n\r\n    private static _Default: Nullable<MeshoptCompression> = null;\r\n\r\n    /**\r\n     * Default instance for the meshoptimizer object.\r\n     */\r\n    public static get Default(): MeshoptCompression {\r\n        if (!MeshoptCompression._Default) {\r\n            MeshoptCompression._Default = new MeshoptCompression();\r\n        }\r\n\r\n        return MeshoptCompression._Default;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() {\r\n        const decoder = MeshoptCompression.Configuration.decoder;\r\n\r\n        this._decoderModulePromise = Tools.LoadScriptAsync(Tools.GetAbsoluteUrl(decoder.url)).then(() => {\r\n            // Wait for WebAssembly compilation before resolving promise\r\n            return MeshoptDecoder.ready;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Stop all async operations and release resources.\r\n     */\r\n    public dispose(): void {\r\n        delete this._decoderModulePromise;\r\n    }\r\n\r\n    /**\r\n     * Decode meshopt data.\r\n     * @see https://github.com/zeux/meshoptimizer/tree/master/js#decoder\r\n     * @param source The input data.\r\n     * @param count The number of elements.\r\n     * @param stride The stride in bytes.\r\n     * @param mode The compression mode.\r\n     * @param filter The compression filter.\r\n     * @returns a Promise<Uint8Array> that resolves to the decoded data\r\n     */\r\n    public decodeGltfBufferAsync(source: Uint8Array, count: number, stride: number, mode: \"ATTRIBUTES\" | \"TRIANGLES\" | \"INDICES\", filter?: string): Promise<Uint8Array> {\r\n        return this._decoderModulePromise!.then(() => {\r\n            const result = new Uint8Array(count * stride);\r\n            MeshoptDecoder.decodeGltfBuffer(result, count, stride, source, mode, filter);\r\n            return result;\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}