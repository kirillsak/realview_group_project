{"ast":null,"code":"import { Tools } from \"../../../Misc/tools.js\";\nimport { SceneComponentConstants } from \"../../../sceneComponent.js\";\n/**\n * Defines the Procedural Texture scene component responsible to manage any Procedural Texture\n * in a given scene.\n */\nexport class ProceduralTextureSceneComponent {\n  /**\n   * Creates a new instance of the component for the given scene\n   * @param scene Defines the scene to register the component in\n   */\n  constructor(scene) {\n    /**\n     * The component name helpful to identify the component in the list of scene components.\n     */\n    this.name = SceneComponentConstants.NAME_PROCEDURALTEXTURE;\n    this.scene = scene;\n    this.scene.proceduralTextures = new Array();\n  }\n  /**\n   * Registers the component in a given scene\n   */\n  register() {\n    this.scene._beforeClearStage.registerStep(SceneComponentConstants.STEP_BEFORECLEAR_PROCEDURALTEXTURE, this, this._beforeClear);\n  }\n  /**\n   * Rebuilds the elements related to this component in case of\n   * context lost for instance.\n   */\n  rebuild() {\n    // Nothing to do here.\n  }\n  /**\n   * Disposes the component and the associated resources.\n   */\n  dispose() {\n    // Nothing to do here.\n  }\n  _beforeClear() {\n    if (this.scene.proceduralTexturesEnabled) {\n      Tools.StartPerformanceCounter(\"Procedural textures\", this.scene.proceduralTextures.length > 0);\n      for (let proceduralIndex = 0; proceduralIndex < this.scene.proceduralTextures.length; proceduralIndex++) {\n        const proceduralTexture = this.scene.proceduralTextures[proceduralIndex];\n        if (proceduralTexture._shouldRender()) {\n          proceduralTexture.render();\n        }\n      }\n      Tools.EndPerformanceCounter(\"Procedural textures\", this.scene.proceduralTextures.length > 0);\n    }\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,KAAK,QAAQ,wBAAsB;AAG5C,SAASC,uBAAuB,QAAQ,4BAA0B;AAalE;;;;AAIA,OAAM,MAAOC,+BAA+B;EAWxC;;;;EAIAC,YAAYC,KAAY;IAdxB;;;IAGgB,SAAI,GAAGH,uBAAuB,CAACI,sBAAsB;IAYjE,IAAI,CAACD,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACA,KAAK,CAACE,kBAAkB,GAAG,IAAIC,KAAK,EAAqB;EAClE;EAEA;;;EAGOC,QAAQ;IACX,IAAI,CAACJ,KAAK,CAACK,iBAAiB,CAACC,YAAY,CAACT,uBAAuB,CAACU,kCAAkC,EAAE,IAAI,EAAE,IAAI,CAACC,YAAY,CAAC;EAClI;EAEA;;;;EAIOC,OAAO;IACV;EAAA;EAGJ;;;EAGOC,OAAO;IACV;EAAA;EAGIF,YAAY;IAChB,IAAI,IAAI,CAACR,KAAK,CAACW,yBAAyB,EAAE;MACtCf,KAAK,CAACgB,uBAAuB,CAAC,qBAAqB,EAAE,IAAI,CAACZ,KAAK,CAACE,kBAAkB,CAACW,MAAM,GAAG,CAAC,CAAC;MAC9F,KAAK,IAAIC,eAAe,GAAG,CAAC,EAAEA,eAAe,GAAG,IAAI,CAACd,KAAK,CAACE,kBAAkB,CAACW,MAAM,EAAEC,eAAe,EAAE,EAAE;QACrG,MAAMC,iBAAiB,GAAG,IAAI,CAACf,KAAK,CAACE,kBAAkB,CAACY,eAAe,CAAC;QACxE,IAAIC,iBAAiB,CAACC,aAAa,EAAE,EAAE;UACnCD,iBAAiB,CAACE,MAAM,EAAE;;;MAGlCrB,KAAK,CAACsB,qBAAqB,CAAC,qBAAqB,EAAE,IAAI,CAAClB,KAAK,CAACE,kBAAkB,CAACW,MAAM,GAAG,CAAC,CAAC;;EAEpG","names":["Tools","SceneComponentConstants","ProceduralTextureSceneComponent","constructor","scene","NAME_PROCEDURALTEXTURE","proceduralTextures","Array","register","_beforeClearStage","registerStep","STEP_BEFORECLEAR_PROCEDURALTEXTURE","_beforeClear","rebuild","dispose","proceduralTexturesEnabled","StartPerformanceCounter","length","proceduralIndex","proceduralTexture","_shouldRender","render","EndPerformanceCounter"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Textures/Procedurals/proceduralTextureSceneComponent.ts"],"sourcesContent":["import { Tools } from \"../../../Misc/tools\";\r\nimport type { Scene } from \"../../../scene\";\r\nimport type { ISceneComponent } from \"../../../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../../../sceneComponent\";\r\n\r\nimport type { ProceduralTexture } from \"./proceduralTexture\";\r\n\r\ndeclare module \"../../../abstractScene\" {\r\n    export interface AbstractScene {\r\n        /**\r\n         * The list of procedural textures added to the scene\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/proceduralTextures\r\n         */\r\n        proceduralTextures: Array<ProceduralTexture>;\r\n    }\r\n}\r\n/**\r\n * Defines the Procedural Texture scene component responsible to manage any Procedural Texture\r\n * in a given scene.\r\n */\r\nexport class ProceduralTextureSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_PROCEDURALTEXTURE;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n        this.scene.proceduralTextures = new Array<ProceduralTexture>();\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._beforeClearStage.registerStep(SceneComponentConstants.STEP_BEFORECLEAR_PROCEDURALTEXTURE, this, this._beforeClear);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do here.\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources.\r\n     */\r\n    public dispose(): void {\r\n        // Nothing to do here.\r\n    }\r\n\r\n    private _beforeClear(): void {\r\n        if (this.scene.proceduralTexturesEnabled) {\r\n            Tools.StartPerformanceCounter(\"Procedural textures\", this.scene.proceduralTextures.length > 0);\r\n            for (let proceduralIndex = 0; proceduralIndex < this.scene.proceduralTextures.length; proceduralIndex++) {\r\n                const proceduralTexture = this.scene.proceduralTextures[proceduralIndex];\r\n                if (proceduralTexture._shouldRender()) {\r\n                    proceduralTexture.render();\r\n                }\r\n            }\r\n            Tools.EndPerformanceCounter(\"Procedural textures\", this.scene.proceduralTextures.length > 0);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}