{"ast":null,"code":"import { Tools } from \"../Misc/tools.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Scene } from \"../scene.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nObject.defineProperty(Scene.prototype, \"debugLayer\", {\n  get: function () {\n    if (!this._debugLayer) {\n      this._debugLayer = new DebugLayer(this);\n    }\n    return this._debugLayer;\n  },\n  enumerable: true,\n  configurable: true\n});\n/**\n * Enum of inspector action tab\n */\nexport var DebugLayerTab;\n(function (DebugLayerTab) {\n  /**\n   * Properties tag (default)\n   */\n  DebugLayerTab[DebugLayerTab[\"Properties\"] = 0] = \"Properties\";\n  /**\n   * Debug tab\n   */\n  DebugLayerTab[DebugLayerTab[\"Debug\"] = 1] = \"Debug\";\n  /**\n   * Statistics tab\n   */\n  DebugLayerTab[DebugLayerTab[\"Statistics\"] = 2] = \"Statistics\";\n  /**\n   * Tools tab\n   */\n  DebugLayerTab[DebugLayerTab[\"Tools\"] = 3] = \"Tools\";\n  /**\n   * Settings tab\n   */\n  DebugLayerTab[DebugLayerTab[\"Settings\"] = 4] = \"Settings\";\n})(DebugLayerTab || (DebugLayerTab = {}));\n/**\n * The debug layer (aka Inspector) is the go to tool in order to better understand\n * what is happening in your scene\n * @see https://doc.babylonjs.com/toolsAndResources/inspector\n */\nexport class DebugLayer {\n  /**\n   * Instantiates a new debug layer.\n   * The debug layer (aka Inspector) is the go to tool in order to better understand\n   * what is happening in your scene\n   * @see https://doc.babylonjs.com/toolsAndResources/inspector\n   * @param scene Defines the scene to inspect\n   */\n  constructor(scene) {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    this.BJSINSPECTOR = this._getGlobalInspector();\n    this._scene = scene || EngineStore.LastCreatedScene;\n    if (!this._scene) {\n      return;\n    }\n    this._scene.onDisposeObservable.add(() => {\n      // Debug layer\n      if (this._scene._debugLayer) {\n        this._scene._debugLayer.hide();\n      }\n    });\n  }\n  /**\n   * Observable triggered when a property is changed through the inspector.\n   */\n  get onPropertyChangedObservable() {\n    if (this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector) {\n      return this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable;\n    }\n    if (!this._onPropertyChangedObservable) {\n      this._onPropertyChangedObservable = new Observable();\n    }\n    return this._onPropertyChangedObservable;\n  }\n  /**\n   * Observable triggered when the selection is changed through the inspector.\n   */\n  get onSelectionChangedObservable() {\n    if (this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector) {\n      return this.BJSINSPECTOR.Inspector.OnSelectionChangeObservable;\n    }\n    if (!this._onSelectionChangedObservable) {\n      this._onSelectionChangedObservable = new Observable();\n    }\n    return this._onSelectionChangedObservable;\n  }\n  /**\n   * Creates the inspector window.\n   * @param config\n   */\n  _createInspector(config) {\n    if (this.isVisible()) {\n      return;\n    }\n    if (this._onPropertyChangedObservable) {\n      for (const observer of this._onPropertyChangedObservable.observers) {\n        this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable.add(observer);\n      }\n      this._onPropertyChangedObservable.clear();\n      this._onPropertyChangedObservable = undefined;\n    }\n    if (this._onSelectionChangedObservable) {\n      for (const observer of this._onSelectionChangedObservable.observers) {\n        this.BJSINSPECTOR.Inspector.OnSelectionChangedObservable.add(observer);\n      }\n      this._onSelectionChangedObservable.clear();\n      this._onSelectionChangedObservable = undefined;\n    }\n    const userOptions = {\n      overlay: false,\n      showExplorer: true,\n      showInspector: true,\n      embedMode: false,\n      handleResize: true,\n      enablePopup: true,\n      ...config\n    };\n    this.BJSINSPECTOR = this.BJSINSPECTOR || this._getGlobalInspector();\n    this.BJSINSPECTOR.Inspector.Show(this._scene, userOptions);\n  }\n  /**\n   * Select a specific entity in the scene explorer and highlight a specific block in that entity property grid\n   * @param entity defines the entity to select\n   * @param lineContainerTitles defines the specific blocks to highlight (could be a string or an array of strings)\n   */\n  select(entity, lineContainerTitles) {\n    if (this.BJSINSPECTOR) {\n      if (lineContainerTitles) {\n        if (Object.prototype.toString.call(lineContainerTitles) == \"[object String]\") {\n          this.BJSINSPECTOR.Inspector.MarkLineContainerTitleForHighlighting(lineContainerTitles);\n        } else {\n          this.BJSINSPECTOR.Inspector.MarkMultipleLineContainerTitlesForHighlighting(lineContainerTitles);\n        }\n      }\n      this.BJSINSPECTOR.Inspector.OnSelectionChangeObservable.notifyObservers(entity);\n    }\n  }\n  /** Get the inspector from bundle or global */\n  _getGlobalInspector() {\n    // UMD Global name detection from Webpack Bundle UMD Name.\n    if (typeof INSPECTOR !== \"undefined\") {\n      return INSPECTOR;\n    }\n    // In case of module let s check the global emitted from the Inspector entry point.\n    if (typeof BABYLON !== \"undefined\" && typeof BABYLON.Inspector !== \"undefined\") {\n      return BABYLON;\n    }\n    return undefined;\n  }\n  /**\n   * Get if the inspector is visible or not.\n   * @returns true if visible otherwise, false\n   */\n  isVisible() {\n    return this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector.IsVisible;\n  }\n  /**\n   * Hide the inspector and close its window.\n   */\n  hide() {\n    if (this.BJSINSPECTOR) {\n      this.BJSINSPECTOR.Inspector.Hide();\n    }\n  }\n  /**\n   * Update the scene in the inspector\n   */\n  setAsActiveScene() {\n    if (this.BJSINSPECTOR) {\n      this.BJSINSPECTOR.Inspector._SetNewScene(this._scene);\n    }\n  }\n  /**\n   * Launch the debugLayer.\n   * @param config Define the configuration of the inspector\n   * @returns a promise fulfilled when the debug layer is visible\n   */\n  show(config) {\n    return new Promise(resolve => {\n      if (typeof this.BJSINSPECTOR == \"undefined\") {\n        const inspectorUrl = config && config.inspectorURL ? config.inspectorURL : DebugLayer.InspectorURL;\n        // Load inspector and add it to the DOM\n        Tools.LoadScript(inspectorUrl, () => {\n          this._createInspector(config);\n          resolve(this);\n        });\n      } else {\n        // Otherwise creates the inspector\n        this._createInspector(config);\n        resolve(this);\n      }\n    });\n  }\n}\n/**\n * Define the url to get the inspector script from.\n * By default it uses the babylonjs CDN.\n * @ignoreNaming\n */\nDebugLayer.InspectorURL = `https://unpkg.com/babylonjs-inspector@${Engine.Version}/babylon.inspector.bundle.js`;","map":{"version":3,"mappings":"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","names":["Tools","Observable","Scene","Engine","EngineStore","Object","defineProperty","prototype","get","_debugLayer","DebugLayer","enumerable","configurable","DebugLayerTab","constructor","scene","_getGlobalInspector","_scene","LastCreatedScene","onDisposeObservable","add","hide","onPropertyChangedObservable","BJSINSPECTOR","Inspector","OnPropertyChangedObservable","_onPropertyChangedObservable","onSelectionChangedObservable","OnSelectionChangeObservable","_onSelectionChangedObservable","_createInspector","config","isVisible","observer","observers","clear","undefined","OnSelectionChangedObservable","userOptions","overlay","showExplorer","showInspector","embedMode","handleResize","enablePopup","Show","select","entity","lineContainerTitles","toString","call","MarkLineContainerTitleForHighlighting","MarkMultipleLineContainerTitlesForHighlighting","notifyObservers","INSPECTOR","BABYLON","IsVisible","Hide","setAsActiveScene","_SetNewScene","show","Promise","resolve","inspectorUrl","inspectorURL","InspectorURL","LoadScript","Version"],"sourceRoot":"","sources":["../../../../lts/core/generated/Debug/debugLayer.ts"],"sourcesContent":["import { Tools } from \"../Misc/tools\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Scene } from \"../scene\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { IInspectable } from \"../Misc/iInspectable\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\n\r\n// declare INSPECTOR namespace for compilation issue\r\ndeclare let INSPECTOR: any;\r\ndeclare let BABYLON: any;\r\n// load the inspector using require, if not present in the global namespace.\r\n\r\n/**\r\n * Interface used to define scene explorer extensibility option\r\n */\r\nexport interface IExplorerExtensibilityOption {\r\n    /**\r\n     * Define the option label\r\n     */\r\n    label: string;\r\n    /**\r\n     * Defines the action to execute on click\r\n     */\r\n    action: (entity: any) => void;\r\n}\r\n\r\n/**\r\n * Defines a group of actions associated with a predicate to use when extending the Inspector scene explorer\r\n */\r\nexport interface IExplorerExtensibilityGroup {\r\n    /**\r\n     * Defines a predicate to test if a given type mut be extended\r\n     */\r\n    predicate: (entity: any) => boolean;\r\n    /**\r\n     * Gets the list of options added to a type\r\n     */\r\n    entries: IExplorerExtensibilityOption[];\r\n}\r\n\r\n/**\r\n * Defines a new node that will be displayed as top level node in the explorer\r\n */\r\nexport interface IExplorerAdditionalChild {\r\n    /**\r\n     * Gets the name of the additional node\r\n     */\r\n    name: string;\r\n    /**\r\n     * Function used to return the class name of the child node\r\n     */\r\n    getClassName(): string;\r\n    /**\r\n     * List of inspectable custom properties (used by the Inspector)\r\n     * @see https://doc.babylonjs.com/toolsAndResources/inspector#extensibility\r\n     */\r\n    inspectableCustomProperties: IInspectable[];\r\n}\r\n\r\n/**\r\n * Defines a new node that will be displayed as top level node in the explorer\r\n */\r\nexport interface IExplorerAdditionalNode {\r\n    /**\r\n     * Gets the name of the additional node\r\n     */\r\n    name: string;\r\n    /**\r\n     * Function used to return the list of child entries\r\n     */\r\n    getContent(): IExplorerAdditionalChild[];\r\n}\r\n\r\n/**\r\n * Interface used to define the options to use to create the Inspector\r\n */\r\nexport interface IInspectorOptions {\r\n    /**\r\n     * Display in overlay mode (default: false)\r\n     */\r\n    overlay?: boolean;\r\n    /**\r\n     * HTML element to use as root (the parent of the rendering canvas will be used as default value)\r\n     */\r\n    globalRoot?: HTMLElement;\r\n    /**\r\n     * Display the Scene explorer\r\n     */\r\n    showExplorer?: boolean;\r\n    /**\r\n     * Display the property inspector\r\n     */\r\n    showInspector?: boolean;\r\n    /**\r\n     * Display in embed mode (both panes on the right)\r\n     */\r\n    embedMode?: boolean;\r\n    /**\r\n     * let the Inspector handles resize of the canvas when panes are resized (default to true)\r\n     */\r\n    handleResize?: boolean;\r\n    /**\r\n     * Allow the panes to popup (default: true)\r\n     */\r\n    enablePopup?: boolean;\r\n    /**\r\n     * Allow the panes to be closed by users (default: true)\r\n     */\r\n    enableClose?: boolean;\r\n    /**\r\n     * Optional list of extensibility entries\r\n     */\r\n    explorerExtensibility?: IExplorerExtensibilityGroup[];\r\n    /**\r\n     * Optional list of additional top level nodes\r\n     */\r\n    additionalNodes?: IExplorerAdditionalNode[];\r\n    /**\r\n     * Optional URL to get the inspector script from (by default it uses the babylonjs CDN).\r\n     */\r\n    inspectorURL?: string;\r\n    /**\r\n     * Optional initial tab (default to DebugLayerTab.Properties)\r\n     */\r\n    initialTab?: DebugLayerTab;\r\n    /**\r\n     * Optional camera to use to render the gizmos from the inspector (default to the scene.activeCamera or the latest from scene.activeCameras)\r\n     */\r\n    gizmoCamera?: Camera;\r\n}\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /**\r\n         * @internal\r\n         * Backing field\r\n         */\r\n        _debugLayer: DebugLayer;\r\n\r\n        /**\r\n         * Gets the debug layer (aka Inspector) associated with the scene\r\n         * @see https://doc.babylonjs.com/toolsAndResources/inspector\r\n         */\r\n        debugLayer: DebugLayer;\r\n    }\r\n}\r\nObject.defineProperty(Scene.prototype, \"debugLayer\", {\r\n    get: function (this: Scene) {\r\n        if (!this._debugLayer) {\r\n            this._debugLayer = new DebugLayer(this);\r\n        }\r\n        return this._debugLayer;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\n/**\r\n * Enum of inspector action tab\r\n */\r\nexport enum DebugLayerTab {\r\n    /**\r\n     * Properties tag (default)\r\n     */\r\n    Properties = 0,\r\n    /**\r\n     * Debug tab\r\n     */\r\n    Debug = 1,\r\n    /**\r\n     * Statistics tab\r\n     */\r\n    Statistics = 2,\r\n    /**\r\n     * Tools tab\r\n     */\r\n    Tools = 3,\r\n    /**\r\n     * Settings tab\r\n     */\r\n    Settings = 4,\r\n}\r\n\r\n/**\r\n * The debug layer (aka Inspector) is the go to tool in order to better understand\r\n * what is happening in your scene\r\n * @see https://doc.babylonjs.com/toolsAndResources/inspector\r\n */\r\nexport class DebugLayer {\r\n    /**\r\n     * Define the url to get the inspector script from.\r\n     * By default it uses the babylonjs CDN.\r\n     * @ignoreNaming\r\n     */\r\n    public static InspectorURL = `https://unpkg.com/babylonjs-inspector@${Engine.Version}/babylon.inspector.bundle.js`;\r\n\r\n    private _scene: Scene;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private BJSINSPECTOR = this._getGlobalInspector();\r\n\r\n    private _onPropertyChangedObservable?: Observable<{ object: any; property: string; value: any; initialValue: any }>;\r\n    /**\r\n     * Observable triggered when a property is changed through the inspector.\r\n     */\r\n    public get onPropertyChangedObservable() {\r\n        if (this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector) {\r\n            return this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable;\r\n        }\r\n\r\n        if (!this._onPropertyChangedObservable) {\r\n            this._onPropertyChangedObservable = new Observable<{ object: any; property: string; value: any; initialValue: any }>();\r\n        }\r\n\r\n        return this._onPropertyChangedObservable;\r\n    }\r\n\r\n    private _onSelectionChangedObservable?: Observable<any>;\r\n    /**\r\n     * Observable triggered when the selection is changed through the inspector.\r\n     */\r\n    public get onSelectionChangedObservable() {\r\n        if (this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector) {\r\n            return this.BJSINSPECTOR.Inspector.OnSelectionChangeObservable;\r\n        }\r\n\r\n        if (!this._onSelectionChangedObservable) {\r\n            this._onSelectionChangedObservable = new Observable<any>();\r\n        }\r\n\r\n        return this._onSelectionChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new debug layer.\r\n     * The debug layer (aka Inspector) is the go to tool in order to better understand\r\n     * what is happening in your scene\r\n     * @see https://doc.babylonjs.com/toolsAndResources/inspector\r\n     * @param scene Defines the scene to inspect\r\n     */\r\n    constructor(scene?: Scene) {\r\n        this._scene = scene || <Scene>EngineStore.LastCreatedScene;\r\n        if (!this._scene) {\r\n            return;\r\n        }\r\n        this._scene.onDisposeObservable.add(() => {\r\n            // Debug layer\r\n            if (this._scene._debugLayer) {\r\n                this._scene._debugLayer.hide();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates the inspector window.\r\n     * @param config\r\n     */\r\n    private _createInspector(config?: Partial<IInspectorOptions>) {\r\n        if (this.isVisible()) {\r\n            return;\r\n        }\r\n\r\n        if (this._onPropertyChangedObservable) {\r\n            for (const observer of this._onPropertyChangedObservable!.observers) {\r\n                this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable.add(observer);\r\n            }\r\n            this._onPropertyChangedObservable.clear();\r\n            this._onPropertyChangedObservable = undefined;\r\n        }\r\n\r\n        if (this._onSelectionChangedObservable) {\r\n            for (const observer of this._onSelectionChangedObservable!.observers) {\r\n                this.BJSINSPECTOR.Inspector.OnSelectionChangedObservable.add(observer);\r\n            }\r\n            this._onSelectionChangedObservable.clear();\r\n            this._onSelectionChangedObservable = undefined;\r\n        }\r\n\r\n        const userOptions: IInspectorOptions = {\r\n            overlay: false,\r\n            showExplorer: true,\r\n            showInspector: true,\r\n            embedMode: false,\r\n            handleResize: true,\r\n            enablePopup: true,\r\n            ...config,\r\n        };\r\n\r\n        this.BJSINSPECTOR = this.BJSINSPECTOR || this._getGlobalInspector();\r\n\r\n        this.BJSINSPECTOR.Inspector.Show(this._scene, userOptions);\r\n    }\r\n\r\n    /**\r\n     * Select a specific entity in the scene explorer and highlight a specific block in that entity property grid\r\n     * @param entity defines the entity to select\r\n     * @param lineContainerTitles defines the specific blocks to highlight (could be a string or an array of strings)\r\n     */\r\n    public select(entity: any, lineContainerTitles?: string | string[]) {\r\n        if (this.BJSINSPECTOR) {\r\n            if (lineContainerTitles) {\r\n                if (Object.prototype.toString.call(lineContainerTitles) == \"[object String]\") {\r\n                    this.BJSINSPECTOR.Inspector.MarkLineContainerTitleForHighlighting(lineContainerTitles);\r\n                } else {\r\n                    this.BJSINSPECTOR.Inspector.MarkMultipleLineContainerTitlesForHighlighting(lineContainerTitles);\r\n                }\r\n            }\r\n            this.BJSINSPECTOR.Inspector.OnSelectionChangeObservable.notifyObservers(entity);\r\n        }\r\n    }\r\n\r\n    /** Get the inspector from bundle or global */\r\n    private _getGlobalInspector(): any {\r\n        // UMD Global name detection from Webpack Bundle UMD Name.\r\n        if (typeof INSPECTOR !== \"undefined\") {\r\n            return INSPECTOR;\r\n        }\r\n\r\n        // In case of module let s check the global emitted from the Inspector entry point.\r\n        if (typeof BABYLON !== \"undefined\" && typeof BABYLON.Inspector !== \"undefined\") {\r\n            return BABYLON;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Get if the inspector is visible or not.\r\n     * @returns true if visible otherwise, false\r\n     */\r\n    public isVisible(): boolean {\r\n        return this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector.IsVisible;\r\n    }\r\n\r\n    /**\r\n     * Hide the inspector and close its window.\r\n     */\r\n    public hide() {\r\n        if (this.BJSINSPECTOR) {\r\n            this.BJSINSPECTOR.Inspector.Hide();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the scene in the inspector\r\n     */\r\n    public setAsActiveScene() {\r\n        if (this.BJSINSPECTOR) {\r\n            this.BJSINSPECTOR.Inspector._SetNewScene(this._scene);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Launch the debugLayer.\r\n     * @param config Define the configuration of the inspector\r\n     * @returns a promise fulfilled when the debug layer is visible\r\n     */\r\n    public show(config?: IInspectorOptions): Promise<DebugLayer> {\r\n        return new Promise((resolve) => {\r\n            if (typeof this.BJSINSPECTOR == \"undefined\") {\r\n                const inspectorUrl = config && config.inspectorURL ? config.inspectorURL : DebugLayer.InspectorURL;\r\n\r\n                // Load inspector and add it to the DOM\r\n                Tools.LoadScript(inspectorUrl, () => {\r\n                    this._createInspector(config);\r\n                    resolve(this);\r\n                });\r\n            } else {\r\n                // Otherwise creates the inspector\r\n                this._createInspector(config);\r\n                resolve(this);\r\n            }\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}