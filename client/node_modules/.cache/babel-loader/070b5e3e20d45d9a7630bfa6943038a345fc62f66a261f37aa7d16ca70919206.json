{"ast":null,"code":"import { PostProcess } from \"./postProcess.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport \"../Shaders/pass.fragment.js\";\nimport \"../Shaders/passCube.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * PassPostProcess which produces an output the same as it's input\n */\nexport class PassPostProcess extends PostProcess {\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"PassPostProcess\" string\n   */\n  getClassName() {\n    return \"PassPostProcess\";\n  }\n  /**\n   * Creates the PassPostProcess\n   * @param name The name of the effect.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType The type of texture to be used when performing the post processing.\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n   */\n  constructor(name, options, camera = null, samplingMode, engine, reusable, textureType = 0, blockCompilation = false) {\n    super(name, \"pass\", null, null, options, camera, samplingMode, engine, reusable, undefined, textureType, undefined, null, blockCompilation);\n  }\n  /**\n   * @internal\n   */\n  static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(() => {\n      return new PassPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, parsedPostProcess._engine, parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  }\n}\nRegisterClass(\"BABYLON.PassPostProcess\", PassPostProcess);\n/**\n * PassCubePostProcess which produces an output the same as it's input (which must be a cube texture)\n */\nexport class PassCubePostProcess extends PostProcess {\n  /**\n   * Creates the PassCubePostProcess\n   * @param name The name of the effect.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType The type of texture to be used when performing the post processing.\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n   */\n  constructor(name, options, camera = null, samplingMode, engine, reusable, textureType = 0, blockCompilation = false) {\n    super(name, \"passCube\", null, null, options, camera, samplingMode, engine, reusable, \"#define POSITIVEX\", textureType, undefined, null, blockCompilation);\n    this._face = 0;\n  }\n  /**\n   * Gets or sets the cube face to display.\n   *  * 0 is +X\n   *  * 1 is -X\n   *  * 2 is +Y\n   *  * 3 is -Y\n   *  * 4 is +Z\n   *  * 5 is -Z\n   */\n  get face() {\n    return this._face;\n  }\n  set face(value) {\n    if (value < 0 || value > 5) {\n      return;\n    }\n    this._face = value;\n    switch (this._face) {\n      case 0:\n        this.updateEffect(\"#define POSITIVEX\");\n        break;\n      case 1:\n        this.updateEffect(\"#define NEGATIVEX\");\n        break;\n      case 2:\n        this.updateEffect(\"#define POSITIVEY\");\n        break;\n      case 3:\n        this.updateEffect(\"#define NEGATIVEY\");\n        break;\n      case 4:\n        this.updateEffect(\"#define POSITIVEZ\");\n        break;\n      case 5:\n        this.updateEffect(\"#define NEGATIVEZ\");\n        break;\n    }\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"PassCubePostProcess\" string\n   */\n  getClassName() {\n    return \"PassCubePostProcess\";\n  }\n  /**\n   * @internal\n   */\n  static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(() => {\n      return new PassCubePostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, parsedPostProcess._engine, parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  }\n}\nEngine._RescalePostProcessFactory = engine => {\n  return new PassPostProcess(\"rescale\", 1, null, 2, engine, false, 0);\n};","map":{"version":3,"mappings":"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","names":["PostProcess","Engine","RegisterClass","SerializationHelper","PassPostProcess","getClassName","constructor","name","options","camera","samplingMode","engine","reusable","textureType","undefined","blockCompilation","_Parse","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","_engine","PassCubePostProcess","face","_face","value","updateEffect","_RescalePostProcessFactory"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/passPostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\nimport \"../Shaders/pass.fragment\";\r\nimport \"../Shaders/passCube.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { SerializationHelper } from \"../Misc/decorators\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * PassPostProcess which produces an output the same as it's input\r\n */\r\nexport class PassPostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"PassPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"PassPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates the PassPostProcess\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType The type of texture to be used when performing the post processing.\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera> = null,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(name, \"pass\", null, null, options, camera, samplingMode, engine, reusable, undefined, textureType, undefined, null, blockCompilation);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new PassPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    parsedPostProcess._engine,\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.PassPostProcess\", PassPostProcess);\r\n\r\n/**\r\n * PassCubePostProcess which produces an output the same as it's input (which must be a cube texture)\r\n */\r\nexport class PassCubePostProcess extends PostProcess {\r\n    private _face = 0;\r\n\r\n    /**\r\n     * Gets or sets the cube face to display.\r\n     *  * 0 is +X\r\n     *  * 1 is -X\r\n     *  * 2 is +Y\r\n     *  * 3 is -Y\r\n     *  * 4 is +Z\r\n     *  * 5 is -Z\r\n     */\r\n    public get face(): number {\r\n        return this._face;\r\n    }\r\n\r\n    public set face(value: number) {\r\n        if (value < 0 || value > 5) {\r\n            return;\r\n        }\r\n\r\n        this._face = value;\r\n        switch (this._face) {\r\n            case 0:\r\n                this.updateEffect(\"#define POSITIVEX\");\r\n                break;\r\n            case 1:\r\n                this.updateEffect(\"#define NEGATIVEX\");\r\n                break;\r\n            case 2:\r\n                this.updateEffect(\"#define POSITIVEY\");\r\n                break;\r\n            case 3:\r\n                this.updateEffect(\"#define NEGATIVEY\");\r\n                break;\r\n            case 4:\r\n                this.updateEffect(\"#define POSITIVEZ\");\r\n                break;\r\n            case 5:\r\n                this.updateEffect(\"#define NEGATIVEZ\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"PassCubePostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"PassCubePostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates the PassCubePostProcess\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType The type of texture to be used when performing the post processing.\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera> = null,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(name, \"passCube\", null, null, options, camera, samplingMode, engine, reusable, \"#define POSITIVEX\", textureType, undefined, null, blockCompilation);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new PassCubePostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    parsedPostProcess._engine,\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nEngine._RescalePostProcessFactory = (engine: Engine) => {\r\n    return new PassPostProcess(\"rescale\", 1, null, Constants.TEXTURE_BILINEAR_SAMPLINGMODE, engine, false, Constants.TEXTURETYPE_UNSIGNED_INT);\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}