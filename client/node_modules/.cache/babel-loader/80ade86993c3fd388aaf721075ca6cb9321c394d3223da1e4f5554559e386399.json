{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { AutoReleaseWorkerPool } from \"./workerPool.js\";\nimport { Tools } from \"./tools.js\";\nfunction getAbsoluteUrlOrNull(url) {\n  return url ? Tools.GetAbsoluteUrl(url) : null;\n}\nfunction applyConfig(urls) {\n  if (urls.wasmUASTCToASTC !== null) {\n    KTX2DECODER.LiteTranscoder_UASTC_ASTC.WasmModuleURL = urls.wasmUASTCToASTC;\n  }\n  if (urls.wasmUASTCToBC7 !== null) {\n    KTX2DECODER.LiteTranscoder_UASTC_BC7.WasmModuleURL = urls.wasmUASTCToBC7;\n  }\n  if (urls.wasmUASTCToRGBA_UNORM !== null) {\n    KTX2DECODER.LiteTranscoder_UASTC_RGBA_UNORM.WasmModuleURL = urls.wasmUASTCToRGBA_UNORM;\n  }\n  if (urls.wasmUASTCToRGBA_SRGB !== null) {\n    KTX2DECODER.LiteTranscoder_UASTC_RGBA_SRGB.WasmModuleURL = urls.wasmUASTCToRGBA_SRGB;\n  }\n  if (urls.wasmUASTCToR8_UNORM !== null) {\n    KTX2DECODER.LiteTranscoder_UASTC_R8_UNORM.WasmModuleURL = urls.wasmUASTCToR8_UNORM;\n  }\n  if (urls.wasmUASTCToRG8_UNORM !== null) {\n    KTX2DECODER.LiteTranscoder_UASTC_RG8_UNORM.WasmModuleURL = urls.wasmUASTCToRG8_UNORM;\n  }\n  if (urls.jsMSCTranscoder !== null) {\n    KTX2DECODER.MSCTranscoder.JSModuleURL = urls.jsMSCTranscoder;\n  }\n  if (urls.wasmMSCTranscoder !== null) {\n    KTX2DECODER.MSCTranscoder.WasmModuleURL = urls.wasmMSCTranscoder;\n  }\n  if (urls.wasmZSTDDecoder !== null) {\n    KTX2DECODER.ZSTDDecoder.WasmModuleURL = urls.wasmZSTDDecoder;\n  }\n}\n/**\n * Class for loading KTX2 files\n */\nexport class KhronosTextureContainer2 {\n  /**\n   * Constructor\n   * @param engine The engine to use\n   * @param numWorkers The number of workers for async operations. Specify `0` to disable web workers and run synchronously in the current context.\n   */\n  constructor(engine, numWorkers = KhronosTextureContainer2.DefaultNumWorkers) {\n    this._engine = engine;\n    KhronosTextureContainer2._Initialize(numWorkers);\n  }\n  static GetDefaultNumWorkers() {\n    if (typeof navigator !== \"object\" || !navigator.hardwareConcurrency) {\n      return 1;\n    }\n    // Use 50% of the available logical processors but capped at 4.\n    return Math.min(Math.floor(navigator.hardwareConcurrency * 0.5), 4);\n  }\n  static _Initialize(numWorkers) {\n    if (KhronosTextureContainer2._WorkerPoolPromise || KhronosTextureContainer2._DecoderModulePromise) {\n      return;\n    }\n    const urls = {\n      jsDecoderModule: Tools.GetAbsoluteUrl(this.URLConfig.jsDecoderModule),\n      wasmUASTCToASTC: getAbsoluteUrlOrNull(this.URLConfig.wasmUASTCToASTC),\n      wasmUASTCToBC7: getAbsoluteUrlOrNull(this.URLConfig.wasmUASTCToBC7),\n      wasmUASTCToRGBA_UNORM: getAbsoluteUrlOrNull(this.URLConfig.wasmUASTCToRGBA_UNORM),\n      wasmUASTCToRGBA_SRGB: getAbsoluteUrlOrNull(this.URLConfig.wasmUASTCToRGBA_SRGB),\n      wasmUASTCToR8_UNORM: getAbsoluteUrlOrNull(this.URLConfig.wasmUASTCToR8_UNORM),\n      wasmUASTCToRG8_UNORM: getAbsoluteUrlOrNull(this.URLConfig.wasmUASTCToRG8_UNORM),\n      jsMSCTranscoder: getAbsoluteUrlOrNull(this.URLConfig.jsMSCTranscoder),\n      wasmMSCTranscoder: getAbsoluteUrlOrNull(this.URLConfig.wasmMSCTranscoder),\n      wasmZSTDDecoder: getAbsoluteUrlOrNull(this.URLConfig.wasmZSTDDecoder)\n    };\n    if (numWorkers && typeof Worker === \"function\" && typeof URL !== \"undefined\") {\n      KhronosTextureContainer2._WorkerPoolPromise = new Promise(resolve => {\n        const workerContent = `${applyConfig}(${workerFunc})()`;\n        const workerBlobUrl = URL.createObjectURL(new Blob([workerContent], {\n          type: \"application/javascript\"\n        }));\n        resolve(new AutoReleaseWorkerPool(numWorkers, () => new Promise((resolve, reject) => {\n          const worker = new Worker(workerBlobUrl);\n          const onError = error => {\n            worker.removeEventListener(\"error\", onError);\n            worker.removeEventListener(\"message\", onMessage);\n            reject(error);\n          };\n          const onMessage = message => {\n            if (message.data.action === \"init\") {\n              worker.removeEventListener(\"error\", onError);\n              worker.removeEventListener(\"message\", onMessage);\n              resolve(worker);\n            }\n          };\n          worker.addEventListener(\"error\", onError);\n          worker.addEventListener(\"message\", onMessage);\n          worker.postMessage({\n            action: \"init\",\n            urls: urls\n          });\n        })));\n      });\n    } else if (typeof KTX2DECODER === \"undefined\") {\n      KhronosTextureContainer2._DecoderModulePromise = Tools.LoadScriptAsync(urls.jsDecoderModule).then(() => {\n        KTX2DECODER.MSCTranscoder.UseFromWorkerThread = false;\n        KTX2DECODER.WASMMemoryManager.LoadBinariesFromCurrentThread = true;\n        applyConfig(urls);\n        return new KTX2DECODER.KTX2Decoder();\n      });\n    } else {\n      KTX2DECODER.MSCTranscoder.UseFromWorkerThread = false;\n      KTX2DECODER.WASMMemoryManager.LoadBinariesFromCurrentThread = true;\n      KhronosTextureContainer2._DecoderModulePromise = Promise.resolve(new KTX2DECODER.KTX2Decoder());\n    }\n  }\n  /**\n   * @internal\n   */\n  uploadAsync(data, internalTexture, options) {\n    const caps = this._engine.getCaps();\n    const compressedTexturesCaps = {\n      astc: !!caps.astc,\n      bptc: !!caps.bptc,\n      s3tc: !!caps.s3tc,\n      pvrtc: !!caps.pvrtc,\n      etc2: !!caps.etc2,\n      etc1: !!caps.etc1\n    };\n    if (KhronosTextureContainer2._WorkerPoolPromise) {\n      return KhronosTextureContainer2._WorkerPoolPromise.then(workerPool => {\n        return new Promise((resolve, reject) => {\n          workerPool.push((worker, onComplete) => {\n            const onError = error => {\n              worker.removeEventListener(\"error\", onError);\n              worker.removeEventListener(\"message\", onMessage);\n              reject(error);\n              onComplete();\n            };\n            const onMessage = message => {\n              if (message.data.action === \"decoded\") {\n                worker.removeEventListener(\"error\", onError);\n                worker.removeEventListener(\"message\", onMessage);\n                if (!message.data.success) {\n                  reject({\n                    message: message.data.msg\n                  });\n                } else {\n                  try {\n                    this._createTexture(message.data.decodedData, internalTexture, options);\n                    resolve();\n                  } catch (err) {\n                    reject({\n                      message: err\n                    });\n                  }\n                }\n                onComplete();\n              }\n            };\n            worker.addEventListener(\"error\", onError);\n            worker.addEventListener(\"message\", onMessage);\n            const dataCopy = new Uint8Array(data.byteLength);\n            dataCopy.set(new Uint8Array(data.buffer, data.byteOffset, data.byteLength));\n            worker.postMessage({\n              action: \"decode\",\n              data: dataCopy,\n              caps: compressedTexturesCaps,\n              options\n            }, [dataCopy.buffer]);\n          });\n        });\n      });\n    } else if (KhronosTextureContainer2._DecoderModulePromise) {\n      return KhronosTextureContainer2._DecoderModulePromise.then(decoder => {\n        return new Promise((resolve, reject) => {\n          decoder.decode(data, caps).then(data => {\n            this._createTexture(data, internalTexture);\n            resolve();\n          }).catch(reason => {\n            reject({\n              message: reason\n            });\n          });\n        });\n      });\n    }\n    throw new Error(\"KTX2 decoder module is not available\");\n  }\n  _createTexture(data /* IEncodedData */, internalTexture, options) {\n    const oglTexture2D = 3553; // gl.TEXTURE_2D\n    this._engine._bindTextureDirectly(oglTexture2D, internalTexture);\n    if (options) {\n      // return back some information about the decoded data\n      options.transcodedFormat = data.transcodedFormat;\n      options.isInGammaSpace = data.isInGammaSpace;\n      options.hasAlpha = data.hasAlpha;\n      options.transcoderName = data.transcoderName;\n    }\n    let isUncompressedFormat = true;\n    switch (data.transcodedFormat) {\n      case 0x8058 /* RGBA8 */:\n        internalTexture.type = 0;\n        internalTexture.format = 5;\n        break;\n      case 0x8229 /* R8 */:\n        internalTexture.type = 0;\n        internalTexture.format = 6;\n        break;\n      case 0x822b /* RG8 */:\n        internalTexture.type = 0;\n        internalTexture.format = 7;\n        break;\n      default:\n        internalTexture.format = data.transcodedFormat;\n        isUncompressedFormat = false;\n        break;\n    }\n    internalTexture._gammaSpace = data.isInGammaSpace;\n    internalTexture.generateMipMaps = data.mipmaps.length > 1;\n    if (data.errors) {\n      throw new Error(\"KTX2 container - could not transcode the data. \" + data.errors);\n    }\n    for (let t = 0; t < data.mipmaps.length; ++t) {\n      const mipmap = data.mipmaps[t];\n      if (!mipmap || !mipmap.data) {\n        throw new Error(\"KTX2 container - could not transcode one of the image\");\n      }\n      if (isUncompressedFormat) {\n        // uncompressed RGBA / R8 / RG8\n        internalTexture.width = mipmap.width; // need to set width/height so that the call to _uploadDataToTextureDirectly uses the right dimensions\n        internalTexture.height = mipmap.height;\n        this._engine._uploadDataToTextureDirectly(internalTexture, mipmap.data, 0, t, undefined, true);\n      } else {\n        this._engine._uploadCompressedDataToTextureDirectly(internalTexture, data.transcodedFormat, mipmap.width, mipmap.height, mipmap.data, 0, t);\n      }\n    }\n    internalTexture._extension = \".ktx2\";\n    internalTexture.width = data.mipmaps[0].width;\n    internalTexture.height = data.mipmaps[0].height;\n    internalTexture.isReady = true;\n    this._engine._bindTextureDirectly(oglTexture2D, null);\n  }\n  /**\n   * Checks if the given data starts with a KTX2 file identifier.\n   * @param data the data to check\n   * @returns true if the data is a KTX2 file or false otherwise\n   */\n  static IsValid(data) {\n    if (data.byteLength >= 12) {\n      // '«', 'K', 'T', 'X', ' ', '2', '0', '»', '\\r', '\\n', '\\x1A', '\\n'\n      const identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\n      if (identifier[0] === 0xab && identifier[1] === 0x4b && identifier[2] === 0x54 && identifier[3] === 0x58 && identifier[4] === 0x20 && identifier[5] === 0x32 && identifier[6] === 0x30 && identifier[7] === 0xbb && identifier[8] === 0x0d && identifier[9] === 0x0a && identifier[10] === 0x1a && identifier[11] === 0x0a) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n/**\n * URLs to use when loading the KTX2 decoder module as well as its dependencies\n * If a url is null, the default url is used (pointing to https://preview.babylonjs.com)\n * Note that jsDecoderModule can't be null and that the other dependencies will only be loaded if necessary\n * Urls you can change:\n *     URLConfig.jsDecoderModule\n *     URLConfig.wasmUASTCToASTC\n *     URLConfig.wasmUASTCToBC7\n *     URLConfig.wasmUASTCToRGBA_UNORM\n *     URLConfig.wasmUASTCToRGBA_SRGB\n *     URLConfig.wasmUASTCToR8_UNORM\n *     URLConfig.wasmUASTCToRG8_UNORM\n *     URLConfig.jsMSCTranscoder\n *     URLConfig.wasmMSCTranscoder\n *     URLConfig.wasmZSTDDecoder\n * You can see their default values in this PG: https://playground.babylonjs.com/#EIJH8L#29\n */\nKhronosTextureContainer2.URLConfig = {\n  jsDecoderModule: \"https://preview.babylonjs.com/babylon.ktx2Decoder.js\",\n  wasmUASTCToASTC: null,\n  wasmUASTCToBC7: null,\n  wasmUASTCToRGBA_UNORM: null,\n  wasmUASTCToRGBA_SRGB: null,\n  wasmUASTCToR8_UNORM: null,\n  wasmUASTCToRG8_UNORM: null,\n  jsMSCTranscoder: null,\n  wasmMSCTranscoder: null,\n  wasmZSTDDecoder: null\n};\n/**\n * Default number of workers used to handle data decoding\n */\nKhronosTextureContainer2.DefaultNumWorkers = KhronosTextureContainer2.GetDefaultNumWorkers();\nfunction workerFunc() {\n  let ktx2Decoder;\n  onmessage = event => {\n    if (!event.data) {\n      return;\n    }\n    switch (event.data.action) {\n      case \"init\":\n        {\n          const urls = event.data.urls;\n          importScripts(urls.jsDecoderModule);\n          applyConfig(urls);\n          ktx2Decoder = new KTX2DECODER.KTX2Decoder();\n          postMessage({\n            action: \"init\"\n          });\n          break;\n        }\n      case \"decode\":\n        ktx2Decoder.decode(event.data.data, event.data.caps, event.data.options).then(data => {\n          const buffers = [];\n          for (let mip = 0; mip < data.mipmaps.length; ++mip) {\n            const mipmap = data.mipmaps[mip];\n            if (mipmap && mipmap.data) {\n              buffers.push(mipmap.data.buffer);\n            }\n          }\n          postMessage({\n            action: \"decoded\",\n            success: true,\n            decodedData: data\n          }, buffers);\n        }).catch(reason => {\n          postMessage({\n            action: \"decoded\",\n            success: false,\n            msg: reason\n          });\n        });\n        break;\n    }\n  };\n}","map":{"version":3,"mappings":"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","names":["AutoReleaseWorkerPool","Tools","getAbsoluteUrlOrNull","url","GetAbsoluteUrl","applyConfig","urls","wasmUASTCToASTC","KTX2DECODER","LiteTranscoder_UASTC_ASTC","WasmModuleURL","wasmUASTCToBC7","LiteTranscoder_UASTC_BC7","wasmUASTCToRGBA_UNORM","LiteTranscoder_UASTC_RGBA_UNORM","wasmUASTCToRGBA_SRGB","LiteTranscoder_UASTC_RGBA_SRGB","wasmUASTCToR8_UNORM","LiteTranscoder_UASTC_R8_UNORM","wasmUASTCToRG8_UNORM","LiteTranscoder_UASTC_RG8_UNORM","jsMSCTranscoder","MSCTranscoder","JSModuleURL","wasmMSCTranscoder","wasmZSTDDecoder","ZSTDDecoder","KhronosTextureContainer2","constructor","engine","numWorkers","DefaultNumWorkers","_engine","_Initialize","GetDefaultNumWorkers","navigator","hardwareConcurrency","Math","min","floor","_WorkerPoolPromise","_DecoderModulePromise","jsDecoderModule","URLConfig","Worker","URL","Promise","resolve","workerContent","workerFunc","workerBlobUrl","createObjectURL","Blob","type","reject","worker","onError","error","removeEventListener","onMessage","message","data","action","addEventListener","postMessage","LoadScriptAsync","then","UseFromWorkerThread","WASMMemoryManager","LoadBinariesFromCurrentThread","KTX2Decoder","uploadAsync","internalTexture","options","caps","getCaps","compressedTexturesCaps","astc","bptc","s3tc","pvrtc","etc2","etc1","workerPool","push","onComplete","success","msg","_createTexture","decodedData","err","dataCopy","Uint8Array","byteLength","set","buffer","byteOffset","decoder","decode","catch","reason","Error","oglTexture2D","_bindTextureDirectly","transcodedFormat","isInGammaSpace","hasAlpha","transcoderName","isUncompressedFormat","format","_gammaSpace","generateMipMaps","mipmaps","length","errors","t","mipmap","width","height","_uploadDataToTextureDirectly","undefined","_uploadCompressedDataToTextureDirectly","_extension","isReady","IsValid","identifier","ktx2Decoder","onmessage","event","importScripts","buffers","mip"],"sourceRoot":"","sources":["../../../../lts/core/generated/Misc/khronosTextureContainer2.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { AutoReleaseWorkerPool } from \"./workerPool\";\r\nimport { Tools } from \"./tools\";\r\nimport type { Nullable } from \"../types\";\r\n\r\ndeclare let KTX2DECODER: any;\r\n\r\nfunction getAbsoluteUrlOrNull(url: Nullable<string>): Nullable<string> {\r\n    return url ? Tools.GetAbsoluteUrl(url) : null;\r\n}\r\n\r\nfunction applyConfig(urls: typeof KhronosTextureContainer2.URLConfig): void {\r\n    if (urls.wasmUASTCToASTC !== null) {\r\n        KTX2DECODER.LiteTranscoder_UASTC_ASTC.WasmModuleURL = urls.wasmUASTCToASTC;\r\n    }\r\n\r\n    if (urls.wasmUASTCToBC7 !== null) {\r\n        KTX2DECODER.LiteTranscoder_UASTC_BC7.WasmModuleURL = urls.wasmUASTCToBC7;\r\n    }\r\n\r\n    if (urls.wasmUASTCToRGBA_UNORM !== null) {\r\n        KTX2DECODER.LiteTranscoder_UASTC_RGBA_UNORM.WasmModuleURL = urls.wasmUASTCToRGBA_UNORM;\r\n    }\r\n\r\n    if (urls.wasmUASTCToRGBA_SRGB !== null) {\r\n        KTX2DECODER.LiteTranscoder_UASTC_RGBA_SRGB.WasmModuleURL = urls.wasmUASTCToRGBA_SRGB;\r\n    }\r\n\r\n    if (urls.wasmUASTCToR8_UNORM !== null) {\r\n        KTX2DECODER.LiteTranscoder_UASTC_R8_UNORM.WasmModuleURL = urls.wasmUASTCToR8_UNORM;\r\n    }\r\n\r\n    if (urls.wasmUASTCToRG8_UNORM !== null) {\r\n        KTX2DECODER.LiteTranscoder_UASTC_RG8_UNORM.WasmModuleURL = urls.wasmUASTCToRG8_UNORM;\r\n    }\r\n\r\n    if (urls.jsMSCTranscoder !== null) {\r\n        KTX2DECODER.MSCTranscoder.JSModuleURL = urls.jsMSCTranscoder;\r\n    }\r\n\r\n    if (urls.wasmMSCTranscoder !== null) {\r\n        KTX2DECODER.MSCTranscoder.WasmModuleURL = urls.wasmMSCTranscoder;\r\n    }\r\n\r\n    if (urls.wasmZSTDDecoder !== null) {\r\n        KTX2DECODER.ZSTDDecoder.WasmModuleURL = urls.wasmZSTDDecoder;\r\n    }\r\n}\r\n\r\n/**\r\n * Class for loading KTX2 files\r\n */\r\nexport class KhronosTextureContainer2 {\r\n    private static _WorkerPoolPromise?: Promise<AutoReleaseWorkerPool>;\r\n    private static _DecoderModulePromise?: Promise<any>;\r\n\r\n    /**\r\n     * URLs to use when loading the KTX2 decoder module as well as its dependencies\r\n     * If a url is null, the default url is used (pointing to https://preview.babylonjs.com)\r\n     * Note that jsDecoderModule can't be null and that the other dependencies will only be loaded if necessary\r\n     * Urls you can change:\r\n     *     URLConfig.jsDecoderModule\r\n     *     URLConfig.wasmUASTCToASTC\r\n     *     URLConfig.wasmUASTCToBC7\r\n     *     URLConfig.wasmUASTCToRGBA_UNORM\r\n     *     URLConfig.wasmUASTCToRGBA_SRGB\r\n     *     URLConfig.wasmUASTCToR8_UNORM\r\n     *     URLConfig.wasmUASTCToRG8_UNORM\r\n     *     URLConfig.jsMSCTranscoder\r\n     *     URLConfig.wasmMSCTranscoder\r\n     *     URLConfig.wasmZSTDDecoder\r\n     * You can see their default values in this PG: https://playground.babylonjs.com/#EIJH8L#29\r\n     */\r\n    public static URLConfig: {\r\n        jsDecoderModule: string;\r\n        wasmUASTCToASTC: Nullable<string>;\r\n        wasmUASTCToBC7: Nullable<string>;\r\n        wasmUASTCToRGBA_UNORM: Nullable<string>;\r\n        wasmUASTCToRGBA_SRGB: Nullable<string>;\r\n        wasmUASTCToR8_UNORM: Nullable<string>;\r\n        wasmUASTCToRG8_UNORM: Nullable<string>;\r\n        jsMSCTranscoder: Nullable<string>;\r\n        wasmMSCTranscoder: Nullable<string>;\r\n        wasmZSTDDecoder: Nullable<string>;\r\n    } = {\r\n        jsDecoderModule: \"https://preview.babylonjs.com/babylon.ktx2Decoder.js\",\r\n        wasmUASTCToASTC: null,\r\n        wasmUASTCToBC7: null,\r\n        wasmUASTCToRGBA_UNORM: null,\r\n        wasmUASTCToRGBA_SRGB: null,\r\n        wasmUASTCToR8_UNORM: null,\r\n        wasmUASTCToRG8_UNORM: null,\r\n        jsMSCTranscoder: null,\r\n        wasmMSCTranscoder: null,\r\n        wasmZSTDDecoder: null,\r\n    };\r\n\r\n    /**\r\n     * Default number of workers used to handle data decoding\r\n     */\r\n    public static DefaultNumWorkers = KhronosTextureContainer2.GetDefaultNumWorkers();\r\n\r\n    private static GetDefaultNumWorkers(): number {\r\n        if (typeof navigator !== \"object\" || !navigator.hardwareConcurrency) {\r\n            return 1;\r\n        }\r\n\r\n        // Use 50% of the available logical processors but capped at 4.\r\n        return Math.min(Math.floor(navigator.hardwareConcurrency * 0.5), 4);\r\n    }\r\n\r\n    private _engine: ThinEngine;\r\n\r\n    private static _Initialize(numWorkers: number): void {\r\n        if (KhronosTextureContainer2._WorkerPoolPromise || KhronosTextureContainer2._DecoderModulePromise) {\r\n            return;\r\n        }\r\n\r\n        const urls = {\r\n            jsDecoderModule: Tools.GetAbsoluteUrl(this.URLConfig.jsDecoderModule),\r\n            wasmUASTCToASTC: getAbsoluteUrlOrNull(this.URLConfig.wasmUASTCToASTC),\r\n            wasmUASTCToBC7: getAbsoluteUrlOrNull(this.URLConfig.wasmUASTCToBC7),\r\n            wasmUASTCToRGBA_UNORM: getAbsoluteUrlOrNull(this.URLConfig.wasmUASTCToRGBA_UNORM),\r\n            wasmUASTCToRGBA_SRGB: getAbsoluteUrlOrNull(this.URLConfig.wasmUASTCToRGBA_SRGB),\r\n            wasmUASTCToR8_UNORM: getAbsoluteUrlOrNull(this.URLConfig.wasmUASTCToR8_UNORM),\r\n            wasmUASTCToRG8_UNORM: getAbsoluteUrlOrNull(this.URLConfig.wasmUASTCToRG8_UNORM),\r\n            jsMSCTranscoder: getAbsoluteUrlOrNull(this.URLConfig.jsMSCTranscoder),\r\n            wasmMSCTranscoder: getAbsoluteUrlOrNull(this.URLConfig.wasmMSCTranscoder),\r\n            wasmZSTDDecoder: getAbsoluteUrlOrNull(this.URLConfig.wasmZSTDDecoder),\r\n        };\r\n\r\n        if (numWorkers && typeof Worker === \"function\" && typeof URL !== \"undefined\") {\r\n            KhronosTextureContainer2._WorkerPoolPromise = new Promise((resolve) => {\r\n                const workerContent = `${applyConfig}(${workerFunc})()`;\r\n                const workerBlobUrl = URL.createObjectURL(new Blob([workerContent], { type: \"application/javascript\" }));\r\n                resolve(\r\n                    new AutoReleaseWorkerPool(\r\n                        numWorkers,\r\n                        () =>\r\n                            new Promise((resolve, reject) => {\r\n                                const worker = new Worker(workerBlobUrl);\r\n\r\n                                const onError = (error: ErrorEvent) => {\r\n                                    worker.removeEventListener(\"error\", onError);\r\n                                    worker.removeEventListener(\"message\", onMessage);\r\n                                    reject(error);\r\n                                };\r\n\r\n                                const onMessage = (message: MessageEvent) => {\r\n                                    if (message.data.action === \"init\") {\r\n                                        worker.removeEventListener(\"error\", onError);\r\n                                        worker.removeEventListener(\"message\", onMessage);\r\n                                        resolve(worker);\r\n                                    }\r\n                                };\r\n\r\n                                worker.addEventListener(\"error\", onError);\r\n                                worker.addEventListener(\"message\", onMessage);\r\n\r\n                                worker.postMessage({\r\n                                    action: \"init\",\r\n                                    urls: urls,\r\n                                });\r\n                            })\r\n                    )\r\n                );\r\n            });\r\n        } else if (typeof KTX2DECODER === \"undefined\") {\r\n            KhronosTextureContainer2._DecoderModulePromise = Tools.LoadScriptAsync(urls.jsDecoderModule).then(() => {\r\n                KTX2DECODER.MSCTranscoder.UseFromWorkerThread = false;\r\n                KTX2DECODER.WASMMemoryManager.LoadBinariesFromCurrentThread = true;\r\n                applyConfig(urls);\r\n                return new KTX2DECODER.KTX2Decoder();\r\n            });\r\n        } else {\r\n            KTX2DECODER.MSCTranscoder.UseFromWorkerThread = false;\r\n            KTX2DECODER.WASMMemoryManager.LoadBinariesFromCurrentThread = true;\r\n            KhronosTextureContainer2._DecoderModulePromise = Promise.resolve(new KTX2DECODER.KTX2Decoder());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     * @param engine The engine to use\r\n     * @param numWorkers The number of workers for async operations. Specify `0` to disable web workers and run synchronously in the current context.\r\n     */\r\n    public constructor(engine: ThinEngine, numWorkers = KhronosTextureContainer2.DefaultNumWorkers) {\r\n        this._engine = engine;\r\n\r\n        KhronosTextureContainer2._Initialize(numWorkers);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public uploadAsync(data: ArrayBufferView, internalTexture: InternalTexture, options?: any): Promise<void> {\r\n        const caps = this._engine.getCaps();\r\n\r\n        const compressedTexturesCaps = {\r\n            astc: !!caps.astc,\r\n            bptc: !!caps.bptc,\r\n            s3tc: !!caps.s3tc,\r\n            pvrtc: !!caps.pvrtc,\r\n            etc2: !!caps.etc2,\r\n            etc1: !!caps.etc1,\r\n        };\r\n\r\n        if (KhronosTextureContainer2._WorkerPoolPromise) {\r\n            return KhronosTextureContainer2._WorkerPoolPromise.then((workerPool) => {\r\n                return new Promise((resolve, reject) => {\r\n                    workerPool.push((worker, onComplete) => {\r\n                        const onError = (error: ErrorEvent) => {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            reject(error);\r\n                            onComplete();\r\n                        };\r\n\r\n                        const onMessage = (message: MessageEvent) => {\r\n                            if (message.data.action === \"decoded\") {\r\n                                worker.removeEventListener(\"error\", onError);\r\n                                worker.removeEventListener(\"message\", onMessage);\r\n                                if (!message.data.success) {\r\n                                    reject({ message: message.data.msg });\r\n                                } else {\r\n                                    try {\r\n                                        this._createTexture(message.data.decodedData, internalTexture, options);\r\n                                        resolve();\r\n                                    } catch (err) {\r\n                                        reject({ message: err });\r\n                                    }\r\n                                }\r\n                                onComplete();\r\n                            }\r\n                        };\r\n\r\n                        worker.addEventListener(\"error\", onError);\r\n                        worker.addEventListener(\"message\", onMessage);\r\n\r\n                        const dataCopy = new Uint8Array(data.byteLength);\r\n                        dataCopy.set(new Uint8Array(data.buffer, data.byteOffset, data.byteLength));\r\n\r\n                        worker.postMessage({ action: \"decode\", data: dataCopy, caps: compressedTexturesCaps, options }, [dataCopy.buffer]);\r\n                    });\r\n                });\r\n            });\r\n        } else if (KhronosTextureContainer2._DecoderModulePromise) {\r\n            return KhronosTextureContainer2._DecoderModulePromise.then((decoder) => {\r\n                return new Promise((resolve, reject) => {\r\n                    decoder\r\n                        .decode(data, caps)\r\n                        .then((data: any) => {\r\n                            this._createTexture(data, internalTexture);\r\n                            resolve();\r\n                        })\r\n                        .catch((reason: any) => {\r\n                            reject({ message: reason });\r\n                        });\r\n                });\r\n            });\r\n        }\r\n\r\n        throw new Error(\"KTX2 decoder module is not available\");\r\n    }\r\n\r\n    protected _createTexture(data: any /* IEncodedData */, internalTexture: InternalTexture, options?: any): void {\r\n        const oglTexture2D = 3553; // gl.TEXTURE_2D\r\n\r\n        this._engine._bindTextureDirectly(oglTexture2D, internalTexture);\r\n\r\n        if (options) {\r\n            // return back some information about the decoded data\r\n            options.transcodedFormat = data.transcodedFormat;\r\n            options.isInGammaSpace = data.isInGammaSpace;\r\n            options.hasAlpha = data.hasAlpha;\r\n            options.transcoderName = data.transcoderName;\r\n        }\r\n\r\n        let isUncompressedFormat = true;\r\n\r\n        switch (data.transcodedFormat) {\r\n            case 0x8058 /* RGBA8 */:\r\n                internalTexture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n                internalTexture.format = Constants.TEXTUREFORMAT_RGBA;\r\n                break;\r\n            case 0x8229 /* R8 */:\r\n                internalTexture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n                internalTexture.format = Constants.TEXTUREFORMAT_R;\r\n                break;\r\n            case 0x822b /* RG8 */:\r\n                internalTexture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n                internalTexture.format = Constants.TEXTUREFORMAT_RG;\r\n                break;\r\n            default:\r\n                internalTexture.format = data.transcodedFormat;\r\n                isUncompressedFormat = false;\r\n                break;\r\n        }\r\n\r\n        internalTexture._gammaSpace = data.isInGammaSpace;\r\n        internalTexture.generateMipMaps = data.mipmaps.length > 1;\r\n\r\n        if (data.errors) {\r\n            throw new Error(\"KTX2 container - could not transcode the data. \" + data.errors);\r\n        }\r\n\r\n        for (let t = 0; t < data.mipmaps.length; ++t) {\r\n            const mipmap = data.mipmaps[t];\r\n\r\n            if (!mipmap || !mipmap.data) {\r\n                throw new Error(\"KTX2 container - could not transcode one of the image\");\r\n            }\r\n\r\n            if (isUncompressedFormat) {\r\n                // uncompressed RGBA / R8 / RG8\r\n                internalTexture.width = mipmap.width; // need to set width/height so that the call to _uploadDataToTextureDirectly uses the right dimensions\r\n                internalTexture.height = mipmap.height;\r\n\r\n                this._engine._uploadDataToTextureDirectly(internalTexture, mipmap.data, 0, t, undefined, true);\r\n            } else {\r\n                this._engine._uploadCompressedDataToTextureDirectly(internalTexture, data.transcodedFormat, mipmap.width, mipmap.height, mipmap.data, 0, t);\r\n            }\r\n        }\r\n\r\n        internalTexture._extension = \".ktx2\";\r\n        internalTexture.width = data.mipmaps[0].width;\r\n        internalTexture.height = data.mipmaps[0].height;\r\n        internalTexture.isReady = true;\r\n\r\n        this._engine._bindTextureDirectly(oglTexture2D, null);\r\n    }\r\n\r\n    /**\r\n     * Checks if the given data starts with a KTX2 file identifier.\r\n     * @param data the data to check\r\n     * @returns true if the data is a KTX2 file or false otherwise\r\n     */\r\n    public static IsValid(data: ArrayBufferView): boolean {\r\n        if (data.byteLength >= 12) {\r\n            // '«', 'K', 'T', 'X', ' ', '2', '0', '»', '\\r', '\\n', '\\x1A', '\\n'\r\n            const identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\r\n            if (\r\n                identifier[0] === 0xab &&\r\n                identifier[1] === 0x4b &&\r\n                identifier[2] === 0x54 &&\r\n                identifier[3] === 0x58 &&\r\n                identifier[4] === 0x20 &&\r\n                identifier[5] === 0x32 &&\r\n                identifier[6] === 0x30 &&\r\n                identifier[7] === 0xbb &&\r\n                identifier[8] === 0x0d &&\r\n                identifier[9] === 0x0a &&\r\n                identifier[10] === 0x1a &&\r\n                identifier[11] === 0x0a\r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\ndeclare function importScripts(...urls: string[]): void;\r\ndeclare function postMessage(message: any, transfer?: any[]): void;\r\n\r\nfunction workerFunc(): void {\r\n    let ktx2Decoder: any;\r\n\r\n    onmessage = (event) => {\r\n        if (!event.data) {\r\n            return;\r\n        }\r\n        switch (event.data.action) {\r\n            case \"init\": {\r\n                const urls = event.data.urls;\r\n                importScripts(urls.jsDecoderModule);\r\n                applyConfig(urls);\r\n                ktx2Decoder = new KTX2DECODER.KTX2Decoder();\r\n                postMessage({ action: \"init\" });\r\n                break;\r\n            }\r\n            case \"decode\":\r\n                ktx2Decoder\r\n                    .decode(event.data.data, event.data.caps, event.data.options)\r\n                    .then((data: any) => {\r\n                        const buffers = [];\r\n                        for (let mip = 0; mip < data.mipmaps.length; ++mip) {\r\n                            const mipmap = data.mipmaps[mip];\r\n                            if (mipmap && mipmap.data) {\r\n                                buffers.push(mipmap.data.buffer);\r\n                            }\r\n                        }\r\n                        postMessage({ action: \"decoded\", success: true, decodedData: data }, buffers);\r\n                    })\r\n                    .catch((reason: any) => {\r\n                        postMessage({ action: \"decoded\", success: false, msg: reason });\r\n                    });\r\n                break;\r\n        }\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}