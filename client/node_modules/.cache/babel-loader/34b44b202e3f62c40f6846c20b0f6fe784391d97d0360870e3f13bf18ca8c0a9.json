{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/bloomMerge.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize } from \"../Misc/decorators.js\";\n/**\n * The BloomMergePostProcess merges blurred images with the original based on the values of the circle of confusion.\n */\nexport class BloomMergePostProcess extends PostProcess {\n  /**\n   * Creates a new instance of @see BloomMergePostProcess\n   * @param name The name of the effect.\n   * @param originalFromInput Post process which's input will be used for the merge.\n   * @param blurred Blurred highlights post process which's output will be used.\n   * @param weight Weight of the bloom to be added to the original input.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType Type of textures used when performing the post process. (default: 0)\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n   */\n  constructor(name, originalFromInput, blurred, /** Weight of the bloom to be added to the original input. */\n  weight, options, camera, samplingMode, engine, reusable, textureType = 0, blockCompilation = false) {\n    super(name, \"bloomMerge\", [\"bloomWeight\"], [\"bloomBlur\"], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, true);\n    /** Weight of the bloom to be added to the original input. */\n    this.weight = 1;\n    this.weight = weight;\n    this.externalTextureSamplerBinding = true;\n    this.onApplyObservable.add(effect => {\n      effect.setTextureFromPostProcess(\"textureSampler\", originalFromInput);\n      effect.setTextureFromPostProcessOutput(\"bloomBlur\", blurred);\n      effect.setFloat(\"bloomWeight\", this.weight);\n    });\n    if (!blockCompilation) {\n      this.updateEffect();\n    }\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"BloomMergePostProcess\" string\n   */\n  getClassName() {\n    return \"BloomMergePostProcess\";\n  }\n}\n__decorate([serialize()], BloomMergePostProcess.prototype, \"weight\", void 0);\nRegisterClass(\"BABYLON.BloomMergePostProcess\", BloomMergePostProcess);","map":{"version":3,"mappings":";AACA,SAASA,WAAW,QAAQ,kBAAgB;AAO5C,OAAO,mCAAiC;AACxC,SAASC,aAAa,QAAQ,sBAAoB;AAClD,SAASC,SAAS,QAAQ,uBAAqB;AAE/C;;;AAGA,OAAM,MAAOC,qBAAsB,SAAQH,WAAW;EAalD;;;;;;;;;;;;;;EAcAI,YACIC,IAAY,EACZC,iBAA8B,EAC9BC,OAAoB,EACpB;EACAC,MAAc,EACdC,OAAoC,EACpCC,MAAwB,EACxBC,YAAqB,EACrBC,MAAe,EACfC,QAAkB,EAClBC,cAAsB,mBAAU;IAGhC,KAAK,CAACT,IAAI,EAAE,YAAY,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,WAAW,CAAC,EAAEI,OAAO,EAAEC,MAAM,EAAEC,YAAY,EAAEC,MAAM,EAAEC,QAAQ,EAAE,IAAI,EAAEC,WAAW,EAAEC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC;IAxCxJ;IAEO,WAAM,GAAG,CAAC;IAuCb,IAAI,CAACP,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACQ,6BAA6B,GAAG,IAAI;IACzC,IAAI,CAACC,iBAAiB,CAACC,GAAG,CAAEC,MAAc,IAAI;MAC1CA,MAAM,CAACC,yBAAyB,CAAC,gBAAgB,EAAEd,iBAAiB,CAAC;MACrEa,MAAM,CAACE,+BAA+B,CAAC,WAAW,EAAEd,OAAO,CAAC;MAC5DY,MAAM,CAACG,QAAQ,CAAC,aAAa,EAAE,IAAI,CAACd,MAAM,CAAC;IAC/C,CAAC,CAAC;IAEF,IAAI,CAACe,gBAAgB,EAAE;MACnB,IAAI,CAACC,YAAY,EAAE;;EAE3B;EAhDA;;;;EAIOC,YAAY;IACf,OAAO,uBAAuB;EAClC;;AARAC,YADCxB,SAAS,EAAE,qDACM;AAqDtBD,aAAa,CAAC,+BAA+B,EAAEE,qBAAqB,CAAC","names":["PostProcess","RegisterClass","serialize","BloomMergePostProcess","constructor","name","originalFromInput","blurred","weight","options","camera","samplingMode","engine","reusable","textureType","undefined","externalTextureSamplerBinding","onApplyObservable","add","effect","setTextureFromPostProcess","setTextureFromPostProcessOutput","setFloat","blockCompilation","updateEffect","getClassName","__decorate"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/bloomMergePostProcess.ts"],"sourcesContent":["import type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/bloomMerge.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize } from \"../Misc/decorators\";\r\n\r\n/**\r\n * The BloomMergePostProcess merges blurred images with the original based on the values of the circle of confusion.\r\n */\r\nexport class BloomMergePostProcess extends PostProcess {\r\n    /** Weight of the bloom to be added to the original input. */\r\n    @serialize()\r\n    public weight = 1;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"BloomMergePostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"BloomMergePostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of @see BloomMergePostProcess\r\n     * @param name The name of the effect.\r\n     * @param originalFromInput Post process which's input will be used for the merge.\r\n     * @param blurred Blurred highlights post process which's output will be used.\r\n     * @param weight Weight of the bloom to be added to the original input.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        originalFromInput: PostProcess,\r\n        blurred: PostProcess,\r\n        /** Weight of the bloom to be added to the original input. */\r\n        weight: number,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(name, \"bloomMerge\", [\"bloomWeight\"], [\"bloomBlur\"], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, true);\r\n        this.weight = weight;\r\n        this.externalTextureSamplerBinding = true;\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setTextureFromPostProcess(\"textureSampler\", originalFromInput);\r\n            effect.setTextureFromPostProcessOutput(\"bloomBlur\", blurred);\r\n            effect.setFloat(\"bloomWeight\", this.weight);\r\n        });\r\n\r\n        if (!blockCompilation) {\r\n            this.updateEffect();\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.BloomMergePostProcess\", BloomMergePostProcess);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}