{"ast":null,"code":"import { NodeMaterialConnectionPoint, NodeMaterialConnectionPointCompatibilityStates } from \"./nodeMaterialBlockConnectionPoint.js\";\n/**\n * Defines a connection point to be used for points with a custom object type\n */\nexport class NodeMaterialConnectionPointCustomObject extends NodeMaterialConnectionPoint {\n  /**\n   * Creates a new connection point\n   * @param name defines the connection point name\n   * @param ownerBlock defines the block hosting this connection point\n   * @param direction defines the direction of the connection point\n   * @param _blockType\n   * @param _blockName\n   */\n  constructor(name, ownerBlock, direction, _blockType, _blockName) {\n    super(name, ownerBlock, direction);\n    this._blockType = _blockType;\n    this._blockName = _blockName;\n    this.needDualDirectionValidation = true;\n  }\n  /**\n   * Gets a number indicating if the current point can be connected to another point\n   * @param connectionPoint defines the other connection point\n   * @returns a number defining the compatibility state\n   */\n  checkCompatibilityState(connectionPoint) {\n    return connectionPoint instanceof NodeMaterialConnectionPointCustomObject && connectionPoint._blockName === this._blockName ? NodeMaterialConnectionPointCompatibilityStates.Compatible : NodeMaterialConnectionPointCompatibilityStates.TypeIncompatible;\n  }\n  /**\n   * Creates a block suitable to be used as an input for this input point.\n   * If null is returned, a block based on the point type will be created.\n   * @returns The returned string parameter is the name of the output point of NodeMaterialBlock (first parameter of the returned array) that can be connected to the input\n   */\n  createCustomInputBlock() {\n    return [new this._blockType(this._blockName), this.name];\n  }\n}","map":{"version":3,"mappings":"AAEA,SAASA,2BAA2B,EAAEC,8CAA8C,QAAQ,uCAAqC;AAGjI;;;AAGA,OAAM,MAAOC,uCAAqE,SAAQF,2BAA2B;EACjH;;;;;;;;EAQAG,YACIC,IAAY,EACZC,UAA6B,EAC7BC,SAA+C,EACvCC,UAAqC,EACrCC,UAAkB;IAE1B,KAAK,CAACJ,IAAI,EAAEC,UAAU,EAAEC,SAAS,CAAC;IAH1B,eAAU,GAAVC,UAAU;IACV,eAAU,GAAVC,UAAU;IAIlB,IAAI,CAACC,2BAA2B,GAAG,IAAI;EAC3C;EAEA;;;;;EAKOC,uBAAuB,CAACC,eAA4C;IACvE,OAAOA,eAAe,YAAYT,uCAAuC,IAAIS,eAAe,CAACH,UAAU,KAAK,IAAI,CAACA,UAAU,GACrHP,8CAA8C,CAACW,UAAU,GACzDX,8CAA8C,CAACY,gBAAgB;EACzE;EAEA;;;;;EAKOC,sBAAsB;IACzB,OAAO,CAAC,IAAI,IAAI,CAACP,UAAU,CAAC,IAAI,CAACC,UAAU,CAAC,EAAE,IAAI,CAACJ,IAAI,CAAC;EAC5D","names":["NodeMaterialConnectionPoint","NodeMaterialConnectionPointCompatibilityStates","NodeMaterialConnectionPointCustomObject","constructor","name","ownerBlock","direction","_blockType","_blockName","needDualDirectionValidation","checkCompatibilityState","connectionPoint","Compatible","TypeIncompatible","createCustomInputBlock"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/Node/nodeMaterialConnectionPointCustomObject.ts"],"sourcesContent":["import type { NodeMaterialBlock } from \"./nodeMaterialBlock\";\r\nimport type { NodeMaterialConnectionPointDirection } from \"./nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialConnectionPoint, NodeMaterialConnectionPointCompatibilityStates } from \"./nodeMaterialBlockConnectionPoint\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n/**\r\n * Defines a connection point to be used for points with a custom object type\r\n */\r\nexport class NodeMaterialConnectionPointCustomObject<T extends NodeMaterialBlock> extends NodeMaterialConnectionPoint {\r\n    /**\r\n     * Creates a new connection point\r\n     * @param name defines the connection point name\r\n     * @param ownerBlock defines the block hosting this connection point\r\n     * @param direction defines the direction of the connection point\r\n     * @param _blockType\r\n     * @param _blockName\r\n     */\r\n    public constructor(\r\n        name: string,\r\n        ownerBlock: NodeMaterialBlock,\r\n        direction: NodeMaterialConnectionPointDirection,\r\n        private _blockType: new (...args: any[]) => T,\r\n        private _blockName: string\r\n    ) {\r\n        super(name, ownerBlock, direction);\r\n\r\n        this.needDualDirectionValidation = true;\r\n    }\r\n\r\n    /**\r\n     * Gets a number indicating if the current point can be connected to another point\r\n     * @param connectionPoint defines the other connection point\r\n     * @returns a number defining the compatibility state\r\n     */\r\n    public checkCompatibilityState(connectionPoint: NodeMaterialConnectionPoint): NodeMaterialConnectionPointCompatibilityStates {\r\n        return connectionPoint instanceof NodeMaterialConnectionPointCustomObject && connectionPoint._blockName === this._blockName\r\n            ? NodeMaterialConnectionPointCompatibilityStates.Compatible\r\n            : NodeMaterialConnectionPointCompatibilityStates.TypeIncompatible;\r\n    }\r\n\r\n    /**\r\n     * Creates a block suitable to be used as an input for this input point.\r\n     * If null is returned, a block based on the point type will be created.\r\n     * @returns The returned string parameter is the name of the output point of NodeMaterialBlock (first parameter of the returned array) that can be connected to the input\r\n     */\r\n    public createCustomInputBlock(): Nullable<[NodeMaterialBlock, string]> {\r\n        return [new this._blockType(this._blockName), this.name];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}