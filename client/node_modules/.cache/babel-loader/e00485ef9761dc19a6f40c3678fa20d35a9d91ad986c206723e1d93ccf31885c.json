{"ast":null,"code":"import { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Block used for the particle blend multiply section\n */\nexport class ParticleBlendMultiplyBlock extends NodeMaterialBlock {\n  /**\n   * Create a new ParticleBlendMultiplyBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Fragment);\n    this._isUnique = true;\n    this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color4, false, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"alphaTexture\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"alphaColor\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"blendColor\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"ParticleBlendMultiplyBlock\";\n  }\n  /**\n   * Gets the color input component\n   */\n  get color() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the alphaTexture input component\n   */\n  get alphaTexture() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the alphaColor input component\n   */\n  get alphaColor() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the blendColor output component\n   */\n  get blendColor() {\n    return this._outputs[0];\n  }\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n  initialize(state) {\n    state._excludeVariableName(\"sourceAlpha\");\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    if (state.target === NodeMaterialBlockTargets.Vertex) {\n      return;\n    }\n    state.compilationString += `\n            #ifdef BLENDMULTIPLYMODE\n                ${this._declareOutput(this.blendColor, state)};\n                float sourceAlpha = ${this.alphaColor.associatedVariableName} * ${this.alphaTexture.associatedVariableName};\n                ${this.blendColor.associatedVariableName}.rgb = ${this.color.associatedVariableName}.rgb * sourceAlpha + vec3(1.0) * (1.0 - sourceAlpha);\n                ${this.blendColor.associatedVariableName}.a = ${this.color.associatedVariableName}.a;\n            #else\n                ${this._declareOutput(this.blendColor, state)} = ${this.color.associatedVariableName};\n            #endif\n        `;\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.ParticleBlendMultiplyBlock\", ParticleBlendMultiplyBlock);","map":{"version":3,"mappings":"AAAA,SAASA,iBAAiB,QAAQ,4BAA0B;AAC5D,SAASC,qCAAqC,QAAQ,sDAAoD;AAE1G,SAASC,wBAAwB,QAAQ,yCAAuC;AAEhF,SAASC,aAAa,QAAQ,+BAA6B;AAE3D;;;AAGA,OAAM,MAAOC,0BAA2B,SAAQJ,iBAAiB;EAC7D;;;;EAIAK,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,EAAEJ,wBAAwB,CAACK,QAAQ,CAAC;IAE9C,IAAI,CAACC,SAAS,GAAG,IAAI;IAErB,IAAI,CAACC,aAAa,CAAC,OAAO,EAAER,qCAAqC,CAACS,MAAM,EAAE,KAAK,EAAER,wBAAwB,CAACK,QAAQ,CAAC;IACnH,IAAI,CAACE,aAAa,CAAC,cAAc,EAAER,qCAAqC,CAACU,KAAK,EAAE,KAAK,EAAET,wBAAwB,CAACK,QAAQ,CAAC;IACzH,IAAI,CAACE,aAAa,CAAC,YAAY,EAAER,qCAAqC,CAACU,KAAK,EAAE,KAAK,EAAET,wBAAwB,CAACK,QAAQ,CAAC;IAEvH,IAAI,CAACK,cAAc,CAAC,YAAY,EAAEX,qCAAqC,CAACS,MAAM,EAAER,wBAAwB,CAACK,QAAQ,CAAC;EACtH;EAEA;;;;EAIOM,YAAY;IACf,OAAO,4BAA4B;EACvC;EAEA;;;EAGA,IAAWC,KAAK;IACZ,OAAO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWC,YAAY;IACnB,OAAO,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWE,UAAU;IACjB,OAAO,IAAI,CAACF,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWG,UAAU;IACjB,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEA;;;;EAIOC,UAAU,CAACC,KAA6B;IAC3CA,KAAK,CAACC,oBAAoB,CAAC,aAAa,CAAC;EAC7C;EAEUC,WAAW,CAACF,KAA6B;IAC/C,KAAK,CAACE,WAAW,CAACF,KAAK,CAAC;IAExB,IAAIA,KAAK,CAACG,MAAM,KAAKtB,wBAAwB,CAACuB,MAAM,EAAE;MAClD;;IAGJJ,KAAK,CAACK,iBAAiB,IAAI;;kBAEjB,IAAI,CAACC,cAAc,CAAC,IAAI,CAACT,UAAU,EAAEG,KAAK,CAAC;sCACvB,IAAI,CAACJ,UAAU,CAACW,sBAAsB,MAAM,IAAI,CAACZ,YAAY,CAACY,sBAAsB;kBACxG,IAAI,CAACV,UAAU,CAACU,sBAAsB,UAAU,IAAI,CAACd,KAAK,CAACc,sBAAsB;kBACjF,IAAI,CAACV,UAAU,CAACU,sBAAsB,QAAQ,IAAI,CAACd,KAAK,CAACc,sBAAsB;;kBAE/E,IAAI,CAACD,cAAc,CAAC,IAAI,CAACT,UAAU,EAAEG,KAAK,CAAC,MAAM,IAAI,CAACP,KAAK,CAACc,sBAAsB;;SAE3F;IAED,OAAO,IAAI;EACf;;AAGJzB,aAAa,CAAC,oCAAoC,EAAEC,0BAA0B,CAAC","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","ParticleBlendMultiplyBlock","constructor","name","Fragment","_isUnique","registerInput","Color4","Float","registerOutput","getClassName","color","_inputs","alphaTexture","alphaColor","blendColor","_outputs","initialize","state","_excludeVariableName","_buildBlock","target","Vertex","compilationString","_declareOutput","associatedVariableName"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/Particle/particleBlendMultiplyBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n\r\n/**\r\n * Block used for the particle blend multiply section\r\n */\r\nexport class ParticleBlendMultiplyBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new ParticleBlendMultiplyBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color4, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"alphaTexture\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"alphaColor\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\"blendColor\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ParticleBlendMultiplyBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the color input component\r\n     */\r\n    public get color(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the alphaTexture input component\r\n     */\r\n    public get alphaTexture(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the alphaColor input component\r\n     */\r\n    public get alphaColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the blendColor output component\r\n     */\r\n    public get blendColor(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"sourceAlpha\");\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Vertex) {\r\n            return;\r\n        }\r\n\r\n        state.compilationString += `\r\n            #ifdef BLENDMULTIPLYMODE\r\n                ${this._declareOutput(this.blendColor, state)};\r\n                float sourceAlpha = ${this.alphaColor.associatedVariableName} * ${this.alphaTexture.associatedVariableName};\r\n                ${this.blendColor.associatedVariableName}.rgb = ${this.color.associatedVariableName}.rgb * sourceAlpha + vec3(1.0) * (1.0 - sourceAlpha);\r\n                ${this.blendColor.associatedVariableName}.a = ${this.color.associatedVariableName}.a;\r\n            #else\r\n                ${this._declareOutput(this.blendColor, state)} = ${this.color.associatedVariableName};\r\n            #endif\r\n        `;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ParticleBlendMultiplyBlock\", ParticleBlendMultiplyBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}