{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { WebGPUCacheRenderPipeline } from \"./webgpuCacheRenderPipeline.js\";\n/** @internal */\nclass NodeState {\n  constructor() {\n    this.values = {};\n  }\n  count() {\n    let countNode = 0,\n      countPipeline = this.pipeline ? 1 : 0;\n    for (const value in this.values) {\n      const node = this.values[value];\n      const [childCountNodes, childCoundPipeline] = node.count();\n      countNode += childCountNodes;\n      countPipeline += childCoundPipeline;\n      countNode++;\n    }\n    return [countNode, countPipeline];\n  }\n}\n/** @internal */\nexport class WebGPUCacheRenderPipelineTree extends WebGPUCacheRenderPipeline {\n  constructor(device, emptyVertexBuffer, useTextureStage) {\n    super(device, emptyVertexBuffer, useTextureStage);\n    this._nodeStack = [];\n    this._nodeStack[0] = WebGPUCacheRenderPipelineTree._Cache;\n  }\n  static GetNodeCounts() {\n    const counts = WebGPUCacheRenderPipelineTree._Cache.count();\n    return {\n      nodeCount: counts[0],\n      pipelineCount: counts[1]\n    };\n  }\n  static _GetPipelines(node, pipelines, curPath, curPathLen) {\n    if (node.pipeline) {\n      const path = curPath.slice();\n      path.length = curPathLen;\n      pipelines.push(path);\n    }\n    for (const value in node.values) {\n      const nnode = node.values[value];\n      curPath[curPathLen] = parseInt(value);\n      WebGPUCacheRenderPipelineTree._GetPipelines(nnode, pipelines, curPath, curPathLen + 1);\n    }\n  }\n  static GetPipelines() {\n    const pipelines = [];\n    WebGPUCacheRenderPipelineTree._GetPipelines(WebGPUCacheRenderPipelineTree._Cache, pipelines, [], 0);\n    return pipelines;\n  }\n  _getRenderPipeline(param) {\n    let node = this._nodeStack[this._stateDirtyLowestIndex];\n    for (let i = this._stateDirtyLowestIndex; i < this._statesLength; ++i) {\n      let nn = node.values[this._states[i]];\n      if (!nn) {\n        nn = new NodeState();\n        node.values[this._states[i]] = nn;\n      }\n      node = nn;\n      this._nodeStack[i + 1] = node;\n    }\n    param.token = node;\n    param.pipeline = node.pipeline;\n  }\n  _setRenderPipeline(param) {\n    param.token.pipeline = param.pipeline;\n  }\n}\nWebGPUCacheRenderPipelineTree._Cache = new NodeState();","map":{"version":3,"mappings":"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","names":["WebGPUCacheRenderPipeline","NodeState","constructor","values","count","countNode","countPipeline","pipeline","value","node","childCountNodes","childCoundPipeline","WebGPUCacheRenderPipelineTree","device","emptyVertexBuffer","useTextureStage","_nodeStack","_Cache","GetNodeCounts","counts","nodeCount","pipelineCount","_GetPipelines","pipelines","curPath","curPathLen","path","slice","length","push","nnode","parseInt","GetPipelines","_getRenderPipeline","param","_stateDirtyLowestIndex","i","_statesLength","nn","_states","token","_setRenderPipeline"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/WebGPU/webgpuCacheRenderPipelineTree.ts"],"sourcesContent":["import type { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { WebGPUCacheRenderPipeline } from \"./webgpuCacheRenderPipeline\";\r\n\r\n/** @internal */\r\nclass NodeState {\r\n    public values: { [id: number]: NodeState };\r\n    public pipeline: GPURenderPipeline;\r\n\r\n    constructor() {\r\n        this.values = {};\r\n    }\r\n\r\n    public count(): [number, number] {\r\n        let countNode = 0,\r\n            countPipeline = this.pipeline ? 1 : 0;\r\n        for (const value in this.values) {\r\n            const node = this.values[value];\r\n            const [childCountNodes, childCoundPipeline] = node!.count();\r\n            countNode += childCountNodes;\r\n            countPipeline += childCoundPipeline;\r\n            countNode++;\r\n        }\r\n        return [countNode, countPipeline];\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport class WebGPUCacheRenderPipelineTree extends WebGPUCacheRenderPipeline {\r\n    private static _Cache: NodeState = new NodeState();\r\n\r\n    private _nodeStack: NodeState[];\r\n\r\n    public static GetNodeCounts(): { nodeCount: number; pipelineCount: number } {\r\n        const counts = WebGPUCacheRenderPipelineTree._Cache.count();\r\n\r\n        return { nodeCount: counts[0], pipelineCount: counts[1] };\r\n    }\r\n\r\n    public static _GetPipelines(node: NodeState, pipelines: Array<Array<number>>, curPath: Array<number>, curPathLen: number): void {\r\n        if (node.pipeline) {\r\n            const path = curPath.slice();\r\n            path.length = curPathLen;\r\n            pipelines.push(path);\r\n        }\r\n        for (const value in node.values) {\r\n            const nnode = node.values[value];\r\n            curPath[curPathLen] = parseInt(value);\r\n            WebGPUCacheRenderPipelineTree._GetPipelines(nnode, pipelines, curPath, curPathLen + 1);\r\n        }\r\n    }\r\n\r\n    public static GetPipelines(): Array<Array<number>> {\r\n        const pipelines: Array<Array<number>> = [];\r\n        WebGPUCacheRenderPipelineTree._GetPipelines(WebGPUCacheRenderPipelineTree._Cache, pipelines, [], 0);\r\n        return pipelines;\r\n    }\r\n\r\n    constructor(device: GPUDevice, emptyVertexBuffer: VertexBuffer, useTextureStage: boolean) {\r\n        super(device, emptyVertexBuffer, useTextureStage);\r\n        this._nodeStack = [];\r\n        this._nodeStack[0] = WebGPUCacheRenderPipelineTree._Cache;\r\n    }\r\n\r\n    protected _getRenderPipeline(param: { token: any; pipeline: Nullable<GPURenderPipeline> }): void {\r\n        let node = this._nodeStack[this._stateDirtyLowestIndex];\r\n        for (let i = this._stateDirtyLowestIndex; i < this._statesLength; ++i) {\r\n            let nn: NodeState | undefined = node!.values[this._states[i]];\r\n            if (!nn) {\r\n                nn = new NodeState();\r\n                node!.values[this._states[i]] = nn;\r\n            }\r\n            node = nn;\r\n            this._nodeStack[i + 1] = node;\r\n        }\r\n\r\n        param.token = node;\r\n        param.pipeline = node.pipeline;\r\n    }\r\n\r\n    protected _setRenderPipeline(param: { token: NodeState; pipeline: Nullable<GPURenderPipeline> }): void {\r\n        param.token.pipeline = param.pipeline!;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}