{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nconst NAME = \"KHR_materials_unlit\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_unlit/README.md)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_materials_unlit {\n  /**\n   * @internal\n   */\n  constructor(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n    this.order = 210;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @internal */\n  dispose() {\n    this._loader = null;\n  }\n  /**\n   * @internal\n   */\n  loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, () => {\n      return this._loadUnlitPropertiesAsync(context, material, babylonMaterial);\n    });\n  }\n  _loadUnlitPropertiesAsync(context, material, babylonMaterial) {\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(`${context}: Material type not supported`);\n    }\n    const promises = new Array();\n    babylonMaterial.unlit = true;\n    const properties = material.pbrMetallicRoughness;\n    if (properties) {\n      if (properties.baseColorFactor) {\n        babylonMaterial.albedoColor = Color3.FromArray(properties.baseColorFactor);\n        babylonMaterial.alpha = properties.baseColorFactor[3];\n      } else {\n        babylonMaterial.albedoColor = Color3.White();\n      }\n      if (properties.baseColorTexture) {\n        promises.push(this._loader.loadTextureInfoAsync(`${context}/baseColorTexture`, properties.baseColorTexture, texture => {\n          texture.name = `${babylonMaterial.name} (Base Color)`;\n          babylonMaterial.albedoTexture = texture;\n        }));\n      }\n    }\n    if (material.doubleSided) {\n      babylonMaterial.backFaceCulling = false;\n      babylonMaterial.twoSidedLighting = true;\n    }\n    this._loader.loadMaterialAlphaProperties(context, material, babylonMaterial);\n    return Promise.all(promises).then(() => {});\n  }\n}\nGLTFLoader.RegisterExtension(NAME, loader => new KHR_materials_unlit(loader));","map":{"version":3,"mappings":";AACA,SAASA,MAAM,QAAE;AACjB,SAASC,WAAW,QAAE;AAKtB,SAASC,UAAU,QAAQ,kBAAgB;AAE3C,MAAMC,IAAI,GAAG,qBAAqB;AAElC;;;AAGA;AACA,OAAM,MAAOC,mBAAmB;EAkB5B;;;EAGAC,YAAYC,MAAkB;IApB9B;;;IAGgB,SAAI,GAAGH,IAAI;IAO3B;;;IAGO,UAAK,GAAG,GAAG;IAQd,IAAI,CAACI,OAAO,GAAGD,MAAM;IACrB,IAAI,CAACE,OAAO,GAAG,IAAI,CAACD,OAAO,CAACE,eAAe,CAACN,IAAI,CAAC;EACrD;EAEA;EACOO,OAAO;IACT,IAAI,CAACH,OAAe,GAAG,IAAI;EAChC;EAEA;;;EAGOI,2BAA2B,CAACC,OAAe,EAAEC,QAAmB,EAAEC,eAAyB;IAC9F,OAAOZ,UAAU,CAACa,kBAAkB,CAACH,OAAO,EAAEC,QAAQ,EAAE,IAAI,CAACG,IAAI,EAAE,MAAK;MACpE,OAAO,IAAI,CAACC,yBAAyB,CAACL,OAAO,EAAEC,QAAQ,EAAEC,eAAe,CAAC;IAC7E,CAAC,CAAC;EACN;EAEQG,yBAAyB,CAACL,OAAe,EAAEC,QAAmB,EAAEC,eAAyB;IAC7F,IAAI,EAAEA,eAAe,YAAYb,WAAW,CAAC,EAAE;MAC3C,MAAM,IAAIiB,KAAK,CAAC,GAAGN,OAAO,+BAA+B,CAAC;;IAG9D,MAAMO,QAAQ,GAAG,IAAIC,KAAK,EAAgB;IAC1CN,eAAe,CAACO,KAAK,GAAG,IAAI;IAE5B,MAAMC,UAAU,GAAGT,QAAQ,CAACU,oBAAoB;IAChD,IAAID,UAAU,EAAE;MACZ,IAAIA,UAAU,CAACE,eAAe,EAAE;QAC5BV,eAAe,CAACW,WAAW,GAAGzB,MAAM,CAAC0B,SAAS,CAACJ,UAAU,CAACE,eAAe,CAAC;QAC1EV,eAAe,CAACa,KAAK,GAAGL,UAAU,CAACE,eAAe,CAAC,CAAC,CAAC;OACxD,MAAM;QACHV,eAAe,CAACW,WAAW,GAAGzB,MAAM,CAAC4B,KAAK,EAAE;;MAGhD,IAAIN,UAAU,CAACO,gBAAgB,EAAE;QAC7BV,QAAQ,CAACW,IAAI,CACT,IAAI,CAACvB,OAAO,CAACwB,oBAAoB,CAAC,GAAGnB,OAAO,mBAAmB,EAAEU,UAAU,CAACO,gBAAgB,EAAGG,OAAO,IAAI;UACtGA,OAAO,CAAChB,IAAI,GAAG,GAAGF,eAAe,CAACE,IAAI,eAAe;UACrDF,eAAe,CAACmB,aAAa,GAAGD,OAAO;QAC3C,CAAC,CAAC,CACL;;;IAIT,IAAInB,QAAQ,CAACqB,WAAW,EAAE;MACtBpB,eAAe,CAACqB,eAAe,GAAG,KAAK;MACvCrB,eAAe,CAACsB,gBAAgB,GAAG,IAAI;;IAG3C,IAAI,CAAC7B,OAAO,CAAC8B,2BAA2B,CAACzB,OAAO,EAAEC,QAAQ,EAAEC,eAAe,CAAC;IAE5E,OAAOwB,OAAO,CAACC,GAAG,CAACpB,QAAQ,CAAC,CAACqB,IAAI,CAAC,MAAK,CAAE,CAAC,CAAC;EAC/C;;AAGJtC,UAAU,CAACuC,iBAAiB,CAACtC,IAAI,EAAGG,MAAM,IAAK,IAAIF,mBAAmB,CAACE,MAAM,CAAC,CAAC","names":["Color3","PBRMaterial","GLTFLoader","NAME","KHR_materials_unlit","constructor","loader","_loader","enabled","isExtensionUsed","dispose","loadMaterialPropertiesAsync","context","material","babylonMaterial","LoadExtensionAsync","name","_loadUnlitPropertiesAsync","Error","promises","Array","unlit","properties","pbrMetallicRoughness","baseColorFactor","albedoColor","FromArray","alpha","White","baseColorTexture","push","loadTextureInfoAsync","texture","albedoTexture","doubleSided","backFaceCulling","twoSidedLighting","loadMaterialAlphaProperties","Promise","all","then","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_materials_unlit.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\n\r\nconst NAME = \"KHR_materials_unlit\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_unlit/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_unlit implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 210;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync(context, material, this.name, () => {\r\n            return this._loadUnlitPropertiesAsync(context, material, babylonMaterial);\r\n        });\r\n    }\r\n\r\n    private _loadUnlitPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n        babylonMaterial.unlit = true;\r\n\r\n        const properties = material.pbrMetallicRoughness;\r\n        if (properties) {\r\n            if (properties.baseColorFactor) {\r\n                babylonMaterial.albedoColor = Color3.FromArray(properties.baseColorFactor);\r\n                babylonMaterial.alpha = properties.baseColorFactor[3];\r\n            } else {\r\n                babylonMaterial.albedoColor = Color3.White();\r\n            }\r\n\r\n            if (properties.baseColorTexture) {\r\n                promises.push(\r\n                    this._loader.loadTextureInfoAsync(`${context}/baseColorTexture`, properties.baseColorTexture, (texture) => {\r\n                        texture.name = `${babylonMaterial.name} (Base Color)`;\r\n                        babylonMaterial.albedoTexture = texture;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n\r\n        if (material.doubleSided) {\r\n            babylonMaterial.backFaceCulling = false;\r\n            babylonMaterial.twoSidedLighting = true;\r\n        }\r\n\r\n        this._loader.loadMaterialAlphaProperties(context, material, babylonMaterial);\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_unlit(loader));\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}