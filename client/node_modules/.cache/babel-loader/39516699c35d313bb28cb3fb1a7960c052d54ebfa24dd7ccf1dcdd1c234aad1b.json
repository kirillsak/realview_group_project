{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../../../tslib.es6.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { MaterialHelper } from \"../../../materialHelper.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { PBRBaseMaterial } from \"../../../PBR/pbrBaseMaterial.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\nimport { SheenBlock } from \"./sheenBlock.js\";\nimport { GetEnvironmentBRDFTexture } from \"../../../../Misc/brdfTextureTools.js\";\nimport { MaterialFlags } from \"../../../materialFlags.js\";\nimport { AnisotropyBlock } from \"./anisotropyBlock.js\";\nimport { ReflectionBlock } from \"./reflectionBlock.js\";\nimport { ClearCoatBlock } from \"./clearCoatBlock.js\";\nimport { IridescenceBlock } from \"./iridescenceBlock.js\";\nimport { SubSurfaceBlock } from \"./subSurfaceBlock.js\";\nimport { Color3, TmpColors } from \"../../../../Maths/math.color.js\";\nconst mapOutputToVariable = {\n  ambientClr: [\"finalAmbient\", \"\"],\n  diffuseDir: [\"finalDiffuse\", \"\"],\n  specularDir: [\"finalSpecularScaled\", \"!defined(UNLIT) && defined(SPECULARTERM)\"],\n  clearcoatDir: [\"finalClearCoatScaled\", \"!defined(UNLIT) && defined(CLEARCOAT)\"],\n  sheenDir: [\"finalSheenScaled\", \"!defined(UNLIT) && defined(SHEEN)\"],\n  diffuseInd: [\"finalIrradiance\", \"!defined(UNLIT) && defined(REFLECTION)\"],\n  specularInd: [\"finalRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION)\"],\n  clearcoatInd: [\"clearcoatOut.finalClearCoatRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION) && defined(CLEARCOAT)\"],\n  sheenInd: [\"sheenOut.finalSheenRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION) && defined(SHEEN) && defined(ENVIRONMENTBRDF)\"],\n  refraction: [\"subSurfaceOut.finalRefraction\", \"!defined(UNLIT) && defined(SS_REFRACTION)\"],\n  lighting: [\"finalColor.rgb\", \"\"],\n  shadow: [\"shadow\", \"\"],\n  alpha: [\"alpha\", \"\"]\n};\n/**\n * Block used to implement the PBR metallic/roughness model\n */\nexport class PBRMetallicRoughnessBlock extends NodeMaterialBlock {\n  /**\n   * Create a new ReflectionBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.VertexAndFragment);\n    this._environmentBRDFTexture = null;\n    this._metallicReflectanceColor = Color3.White();\n    this._metallicF0Factor = 1;\n    /**\n     * Intensity of the direct lights e.g. the four lights available in your scene.\n     * This impacts both the direct diffuse and specular highlights.\n     */\n    this.directIntensity = 1.0;\n    /**\n     * Intensity of the environment e.g. how much the environment will light the object\n     * either through harmonics for rough material or through the reflection for shiny ones.\n     */\n    this.environmentIntensity = 1.0;\n    /**\n     * This is a special control allowing the reduction of the specular highlights coming from the\n     * four lights of the scene. Those highlights may not be needed in full environment lighting.\n     */\n    this.specularIntensity = 1.0;\n    /**\n     * Defines the  falloff type used in this material.\n     * It by default is Physical.\n     */\n    this.lightFalloff = 0;\n    /**\n     * Specifies that alpha test should be used\n     */\n    this.useAlphaTest = false;\n    /**\n     * Defines the alpha limits in alpha test mode.\n     */\n    this.alphaTestCutoff = 0.5;\n    /**\n     * Specifies that alpha blending should be used\n     */\n    this.useAlphaBlending = false;\n    /**\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\n     * A car glass is a good example of that. When the street lights reflects on it you can not see what is behind.\n     */\n    this.useRadianceOverAlpha = true;\n    /**\n     * Specifies that the material will keeps the specular highlights over a transparent surface (only the most luminous ones).\n     * A car glass is a good example of that. When sun reflects on it you can not see what is behind.\n     */\n    this.useSpecularOverAlpha = true;\n    /**\n     * Enables specular anti aliasing in the PBR shader.\n     * It will both interacts on the Geometry for analytical and IBL lighting.\n     * It also prefilter the roughness map based on the bump values.\n     */\n    this.enableSpecularAntiAliasing = false;\n    /**\n     * Enables realtime filtering on the texture.\n     */\n    this.realTimeFiltering = false;\n    /**\n     * Quality switch for realtime filtering\n     */\n    this.realTimeFilteringQuality = 8;\n    /**\n     * Defines if the material uses energy conservation.\n     */\n    this.useEnergyConservation = true;\n    /**\n     * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\n     * too much the area relying on ambient texture to define their ambient occlusion.\n     */\n    this.useRadianceOcclusion = true;\n    /**\n     * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\n     * makes the reflect vector face the model (under horizon).\n     */\n    this.useHorizonOcclusion = true;\n    /**\n     * If set to true, no lighting calculations will be applied.\n     */\n    this.unlit = false;\n    /**\n     * Force normal to face away from face.\n     */\n    this.forceNormalForward = false;\n    /** Indicates that no code should be generated in the vertex shader. Can be useful in some specific circumstances (like when doing ray marching for eg) */\n    this.generateOnlyFragmentCode = false;\n    /**\n     * Defines the material debug mode.\n     * It helps seeing only some components of the material while troubleshooting.\n     */\n    this.debugMode = 0;\n    /**\n     * Specify from where on screen the debug mode should start.\n     * The value goes from -1 (full screen) to 1 (not visible)\n     * It helps with side by side comparison against the final render\n     * This defaults to 0\n     */\n    this.debugLimit = 0;\n    /**\n     * As the default viewing range might not be enough (if the ambient is really small for instance)\n     * You can use the factor to better multiply the final value.\n     */\n    this.debugFactor = 1;\n    this._isUnique = true;\n    this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\n    this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, false);\n    this.registerInput(\"cameraPosition\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"perturbedNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"baseColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"metallic\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"ambientOcc\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"opacity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"ambientColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"reflection\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"reflection\", this, NodeMaterialConnectionPointDirection.Input, ReflectionBlock, \"ReflectionBlock\"));\n    this.registerInput(\"clearcoat\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"clearcoat\", this, NodeMaterialConnectionPointDirection.Input, ClearCoatBlock, \"ClearCoatBlock\"));\n    this.registerInput(\"sheen\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"sheen\", this, NodeMaterialConnectionPointDirection.Input, SheenBlock, \"SheenBlock\"));\n    this.registerInput(\"subsurface\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"subsurface\", this, NodeMaterialConnectionPointDirection.Input, SubSurfaceBlock, \"SubSurfaceBlock\"));\n    this.registerInput(\"anisotropy\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"anisotropy\", this, NodeMaterialConnectionPointDirection.Input, AnisotropyBlock, \"AnisotropyBlock\"));\n    this.registerInput(\"iridescence\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"iridescence\", this, NodeMaterialConnectionPointDirection.Input, IridescenceBlock, \"IridescenceBlock\"));\n    this.registerOutput(\"ambientClr\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"diffuseDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"specularDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"clearcoatDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"sheenDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"diffuseInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"specularInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"clearcoatInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"sheenInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"refraction\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"lighting\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"shadow\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"alpha\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n  }\n  static _OnGenerateOnlyFragmentCodeChanged(block, _propertyName) {\n    const that = block;\n    if (that.worldPosition.isConnected) {\n      that.generateOnlyFragmentCode = !that.generateOnlyFragmentCode;\n      console.error(\"The worldPosition input must not be connected to be able to switch!\");\n      return false;\n    }\n    that._setTarget();\n    return true;\n  }\n  _setTarget() {\n    this._setInitialTarget(this.generateOnlyFragmentCode ? NodeMaterialBlockTargets.Fragment : NodeMaterialBlockTargets.VertexAndFragment);\n    this.getInputByName(\"worldPosition\").target = this.generateOnlyFragmentCode ? NodeMaterialBlockTargets.Fragment : NodeMaterialBlockTargets.Vertex;\n  }\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n  initialize(state) {\n    state._excludeVariableName(\"vLightingIntensity\");\n    state._excludeVariableName(\"geometricNormalW\");\n    state._excludeVariableName(\"normalW\");\n    state._excludeVariableName(\"faceNormal\");\n    state._excludeVariableName(\"albedoOpacityOut\");\n    state._excludeVariableName(\"surfaceAlbedo\");\n    state._excludeVariableName(\"alpha\");\n    state._excludeVariableName(\"aoOut\");\n    state._excludeVariableName(\"baseColor\");\n    state._excludeVariableName(\"reflectivityOut\");\n    state._excludeVariableName(\"microSurface\");\n    state._excludeVariableName(\"roughness\");\n    state._excludeVariableName(\"NdotVUnclamped\");\n    state._excludeVariableName(\"NdotV\");\n    state._excludeVariableName(\"alphaG\");\n    state._excludeVariableName(\"AARoughnessFactors\");\n    state._excludeVariableName(\"environmentBrdf\");\n    state._excludeVariableName(\"ambientMonochrome\");\n    state._excludeVariableName(\"seo\");\n    state._excludeVariableName(\"eho\");\n    state._excludeVariableName(\"environmentRadiance\");\n    state._excludeVariableName(\"irradianceVector\");\n    state._excludeVariableName(\"environmentIrradiance\");\n    state._excludeVariableName(\"diffuseBase\");\n    state._excludeVariableName(\"specularBase\");\n    state._excludeVariableName(\"preInfo\");\n    state._excludeVariableName(\"info\");\n    state._excludeVariableName(\"shadow\");\n    state._excludeVariableName(\"finalDiffuse\");\n    state._excludeVariableName(\"finalAmbient\");\n    state._excludeVariableName(\"ambientOcclusionForDirectDiffuse\");\n    state._excludeVariableName(\"finalColor\");\n    state._excludeVariableName(\"vClipSpacePosition\");\n    state._excludeVariableName(\"vDebugMode\");\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"PBRMetallicRoughnessBlock\";\n  }\n  /**\n   * Gets the world position input component\n   */\n  get worldPosition() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the world normal input component\n   */\n  get worldNormal() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the view matrix parameter\n   */\n  get view() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the camera position input component\n   */\n  get cameraPosition() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the perturbed normal input component\n   */\n  get perturbedNormal() {\n    return this._inputs[4];\n  }\n  /**\n   * Gets the base color input component\n   */\n  get baseColor() {\n    return this._inputs[5];\n  }\n  /**\n   * Gets the metallic input component\n   */\n  get metallic() {\n    return this._inputs[6];\n  }\n  /**\n   * Gets the roughness input component\n   */\n  get roughness() {\n    return this._inputs[7];\n  }\n  /**\n   * Gets the ambient occlusion input component\n   */\n  get ambientOcc() {\n    return this._inputs[8];\n  }\n  /**\n   * Gets the opacity input component\n   */\n  get opacity() {\n    return this._inputs[9];\n  }\n  /**\n   * Gets the index of refraction input component\n   */\n  get indexOfRefraction() {\n    return this._inputs[10];\n  }\n  /**\n   * Gets the ambient color input component\n   */\n  get ambientColor() {\n    return this._inputs[11];\n  }\n  /**\n   * Gets the reflection object parameters\n   */\n  get reflection() {\n    return this._inputs[12];\n  }\n  /**\n   * Gets the clear coat object parameters\n   */\n  get clearcoat() {\n    return this._inputs[13];\n  }\n  /**\n   * Gets the sheen object parameters\n   */\n  get sheen() {\n    return this._inputs[14];\n  }\n  /**\n   * Gets the sub surface object parameters\n   */\n  get subsurface() {\n    return this._inputs[15];\n  }\n  /**\n   * Gets the anisotropy object parameters\n   */\n  get anisotropy() {\n    return this._inputs[16];\n  }\n  /**\n   * Gets the iridescence object parameters\n   */\n  get iridescence() {\n    return this._inputs[17];\n  }\n  /**\n   * Gets the ambient output component\n   */\n  get ambientClr() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets the diffuse output component\n   */\n  get diffuseDir() {\n    return this._outputs[1];\n  }\n  /**\n   * Gets the specular output component\n   */\n  get specularDir() {\n    return this._outputs[2];\n  }\n  /**\n   * Gets the clear coat output component\n   */\n  get clearcoatDir() {\n    return this._outputs[3];\n  }\n  /**\n   * Gets the sheen output component\n   */\n  get sheenDir() {\n    return this._outputs[4];\n  }\n  /**\n   * Gets the indirect diffuse output component\n   */\n  get diffuseInd() {\n    return this._outputs[5];\n  }\n  /**\n   * Gets the indirect specular output component\n   */\n  get specularInd() {\n    return this._outputs[6];\n  }\n  /**\n   * Gets the indirect clear coat output component\n   */\n  get clearcoatInd() {\n    return this._outputs[7];\n  }\n  /**\n   * Gets the indirect sheen output component\n   */\n  get sheenInd() {\n    return this._outputs[8];\n  }\n  /**\n   * Gets the refraction output component\n   */\n  get refraction() {\n    return this._outputs[9];\n  }\n  /**\n   * Gets the global lighting output component\n   */\n  get lighting() {\n    return this._outputs[10];\n  }\n  /**\n   * Gets the shadow output component\n   */\n  get shadow() {\n    return this._outputs[11];\n  }\n  /**\n   * Gets the alpha output component\n   */\n  get alpha() {\n    return this._outputs[12];\n  }\n  autoConfigure(material) {\n    if (!this.cameraPosition.isConnected) {\n      let cameraPositionInput = material.getInputBlockByPredicate(b => b.systemValue === NodeMaterialSystemValues.CameraPosition);\n      if (!cameraPositionInput) {\n        cameraPositionInput = new InputBlock(\"cameraPosition\");\n        cameraPositionInput.setAsSystemValue(NodeMaterialSystemValues.CameraPosition);\n      }\n      cameraPositionInput.output.connectTo(this.cameraPosition);\n    }\n    if (!this.view.isConnected) {\n      let viewInput = material.getInputBlockByPredicate(b => b.systemValue === NodeMaterialSystemValues.View);\n      if (!viewInput) {\n        viewInput = new InputBlock(\"view\");\n        viewInput.setAsSystemValue(NodeMaterialSystemValues.View);\n      }\n      viewInput.output.connectTo(this.view);\n    }\n  }\n  prepareDefines(mesh, nodeMaterial, defines) {\n    // General\n    defines.setValue(\"PBR\", true);\n    defines.setValue(\"METALLICWORKFLOW\", true);\n    defines.setValue(\"DEBUGMODE\", this.debugMode, true);\n    defines.setValue(\"NORMALXYSCALE\", true);\n    defines.setValue(\"BUMP\", this.perturbedNormal.isConnected, true);\n    defines.setValue(\"LODBASEDMICROSFURACE\", this._scene.getEngine().getCaps().textureLOD);\n    // Albedo & Opacity\n    defines.setValue(\"ALBEDO\", false, true);\n    defines.setValue(\"OPACITY\", this.opacity.isConnected, true);\n    // Ambient occlusion\n    defines.setValue(\"AMBIENT\", true, true);\n    defines.setValue(\"AMBIENTINGRAYSCALE\", false, true);\n    // Reflectivity\n    defines.setValue(\"REFLECTIVITY\", false, true);\n    defines.setValue(\"AOSTOREINMETALMAPRED\", false, true);\n    defines.setValue(\"METALLNESSSTOREINMETALMAPBLUE\", false, true);\n    defines.setValue(\"ROUGHNESSSTOREINMETALMAPALPHA\", false, true);\n    defines.setValue(\"ROUGHNESSSTOREINMETALMAPGREEN\", false, true);\n    // Lighting & colors\n    if (this.lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_STANDARD) {\n      defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", false);\n      defines.setValue(\"USEGLTFLIGHTFALLOFF\", false);\n    } else if (this.lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF) {\n      defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", false);\n      defines.setValue(\"USEGLTFLIGHTFALLOFF\", true);\n    } else {\n      defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", true);\n      defines.setValue(\"USEGLTFLIGHTFALLOFF\", false);\n    }\n    // Transparency\n    const alphaTestCutOffString = this.alphaTestCutoff.toString();\n    defines.setValue(\"ALPHABLEND\", this.useAlphaBlending, true);\n    defines.setValue(\"ALPHAFROMALBEDO\", false, true);\n    defines.setValue(\"ALPHATEST\", this.useAlphaTest, true);\n    defines.setValue(\"ALPHATESTVALUE\", alphaTestCutOffString.indexOf(\".\") < 0 ? alphaTestCutOffString + \".\" : alphaTestCutOffString, true);\n    defines.setValue(\"OPACITYRGB\", false, true);\n    // Rendering\n    defines.setValue(\"RADIANCEOVERALPHA\", this.useRadianceOverAlpha, true);\n    defines.setValue(\"SPECULAROVERALPHA\", this.useSpecularOverAlpha, true);\n    defines.setValue(\"SPECULARAA\", this._scene.getEngine().getCaps().standardDerivatives && this.enableSpecularAntiAliasing, true);\n    defines.setValue(\"REALTIME_FILTERING\", this.realTimeFiltering, true);\n    const scene = mesh.getScene();\n    const engine = scene.getEngine();\n    if (engine._features.needTypeSuffixInShaderConstants) {\n      defines.setValue(\"NUM_SAMPLES\", this.realTimeFilteringQuality + \"u\", true);\n    } else {\n      defines.setValue(\"NUM_SAMPLES\", \"\" + this.realTimeFilteringQuality, true);\n    }\n    // Advanced\n    defines.setValue(\"BRDF_V_HEIGHT_CORRELATED\", true);\n    defines.setValue(\"MS_BRDF_ENERGY_CONSERVATION\", this.useEnergyConservation, true);\n    defines.setValue(\"RADIANCEOCCLUSION\", this.useRadianceOcclusion, true);\n    defines.setValue(\"HORIZONOCCLUSION\", this.useHorizonOcclusion, true);\n    defines.setValue(\"UNLIT\", this.unlit, true);\n    defines.setValue(\"FORCENORMALFORWARD\", this.forceNormalForward, true);\n    if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\n      defines.setValue(\"ENVIRONMENTBRDF\", true);\n      defines.setValue(\"ENVIRONMENTBRDF_RGBD\", this._environmentBRDFTexture.isRGBD, true);\n    } else {\n      defines.setValue(\"ENVIRONMENTBRDF\", false);\n      defines.setValue(\"ENVIRONMENTBRDF_RGBD\", false);\n    }\n    if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\n      nodeMaterial.imageProcessingConfiguration.prepareDefines(defines);\n    }\n    if (!defines._areLightsDirty) {\n      return;\n    }\n    if (!this.light) {\n      // Lights\n      MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, nodeMaterial.maxSimultaneousLights);\n      defines._needNormals = true;\n      // Multiview\n      MaterialHelper.PrepareDefinesForMultiview(scene, defines);\n    } else {\n      const state = {\n        needNormals: false,\n        needRebuild: false,\n        lightmapMode: false,\n        shadowEnabled: false,\n        specularEnabled: false\n      };\n      MaterialHelper.PrepareDefinesForLight(scene, mesh, this.light, this._lightId, defines, true, state);\n      if (state.needRebuild) {\n        defines.rebuild();\n      }\n    }\n  }\n  updateUniformsAndSamples(state, nodeMaterial, defines, uniformBuffers) {\n    for (let lightIndex = 0; lightIndex < nodeMaterial.maxSimultaneousLights; lightIndex++) {\n      if (!defines[\"LIGHT\" + lightIndex]) {\n        break;\n      }\n      const onlyUpdateBuffersList = state.uniforms.indexOf(\"vLightData\" + lightIndex) >= 0;\n      MaterialHelper.PrepareUniformsAndSamplersForLight(lightIndex, state.uniforms, state.samplers, defines[\"PROJECTEDLIGHTTEXTURE\" + lightIndex], uniformBuffers, onlyUpdateBuffersList);\n    }\n  }\n  isReady(mesh, nodeMaterial, defines) {\n    if (this._environmentBRDFTexture && !this._environmentBRDFTexture.isReady()) {\n      return false;\n    }\n    if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\n      if (!nodeMaterial.imageProcessingConfiguration.isReady()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  bind(effect, nodeMaterial, mesh) {\n    var _a, _b;\n    if (!mesh) {\n      return;\n    }\n    const scene = mesh.getScene();\n    if (!this.light) {\n      MaterialHelper.BindLights(scene, mesh, effect, true, nodeMaterial.maxSimultaneousLights);\n    } else {\n      MaterialHelper.BindLight(this.light, this._lightId, scene, effect, true);\n    }\n    effect.setTexture(this._environmentBrdfSamplerName, this._environmentBRDFTexture);\n    effect.setFloat2(\"vDebugMode\", this.debugLimit, this.debugFactor);\n    const ambientScene = this._scene.ambientColor;\n    if (ambientScene) {\n      effect.setColor3(\"ambientFromScene\", ambientScene);\n    }\n    const invertNormal = scene.useRightHandedSystem === (scene._mirroredCameraPosition != null);\n    effect.setFloat(this._invertNormalName, invertNormal ? -1 : 1);\n    effect.setFloat4(\"vLightingIntensity\", this.directIntensity, 1, this.environmentIntensity * this._scene.environmentIntensity, this.specularIntensity);\n    // reflectivity bindings\n    const outsideIOR = 1; // consider air as clear coat and other layers would remap in the shader.\n    const ior = (_b = (_a = this.indexOfRefraction.connectInputBlock) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1.5;\n    // We are here deriving our default reflectance from a common value for none metallic surface.\n    // Based of the schlick fresnel approximation model\n    // for dielectrics.\n    const f0 = Math.pow((ior - outsideIOR) / (ior + outsideIOR), 2);\n    // Tweak the default F0 and F90 based on our given setup\n    this._metallicReflectanceColor.scaleToRef(f0 * this._metallicF0Factor, TmpColors.Color3[0]);\n    const metallicF90 = this._metallicF0Factor;\n    effect.setColor4(this._vMetallicReflectanceFactorsName, TmpColors.Color3[0], metallicF90);\n    if (nodeMaterial.imageProcessingConfiguration) {\n      nodeMaterial.imageProcessingConfiguration.bind(effect);\n    }\n  }\n  _injectVertexCode(state) {\n    var _a, _b;\n    const worldPos = this.worldPosition;\n    const comments = `//${this.name}`;\n    // Declaration\n    if (!this.light) {\n      // Emit for all lights\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightVxUboDeclaration\" : \"lightVxFragmentDeclaration\", comments, {\n        repeatKey: \"maxSimultaneousLights\"\n      });\n      this._lightId = 0;\n      state.sharedData.dynamicUniformBlocks.push(this);\n    } else {\n      this._lightId = (state.counters[\"lightCounter\"] !== undefined ? state.counters[\"lightCounter\"] : -1) + 1;\n      state.counters[\"lightCounter\"] = this._lightId;\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightVxUboDeclaration\" : \"lightVxFragmentDeclaration\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }]\n      }, this._lightId.toString());\n    }\n    // Inject code in vertex\n    const worldPosVaryingName = \"v_\" + worldPos.associatedVariableName;\n    if (state._emitVaryingFromString(worldPosVaryingName, \"vec4\")) {\n      state.compilationString += `${worldPosVaryingName} = ${worldPos.associatedVariableName};\\r\\n`;\n    }\n    const reflectionBlock = this.reflection.isConnected ? (_a = this.reflection.connectedPoint) === null || _a === void 0 ? void 0 : _a.ownerBlock : null;\n    if (reflectionBlock) {\n      reflectionBlock.viewConnectionPoint = this.view;\n    }\n    state.compilationString += (_b = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock.handleVertexSide(state)) !== null && _b !== void 0 ? _b : \"\";\n    if (state._emitVaryingFromString(\"vClipSpacePosition\", \"vec4\", \"defined(IGNORE) || DEBUGMODE > 0\")) {\n      state._injectAtEnd += `#if DEBUGMODE > 0\\r\\n`;\n      state._injectAtEnd += `vClipSpacePosition = gl_Position;\\r\\n`;\n      state._injectAtEnd += `#endif\\r\\n`;\n    }\n    if (this.light) {\n      state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }, {\n          search: /worldPos/g,\n          replace: worldPos.associatedVariableName\n        }]\n      });\n    } else {\n      state.compilationString += `vec4 worldPos = ${worldPos.associatedVariableName};\\r\\n`;\n      if (this.view.isConnected) {\n        state.compilationString += `mat4 view = ${this.view.associatedVariableName};\\r\\n`;\n      }\n      state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\n        repeatKey: \"maxSimultaneousLights\"\n      });\n    }\n  }\n  _getAlbedoOpacityCode() {\n    let code = `albedoOpacityOutParams albedoOpacityOut;\\r\\n`;\n    const albedoColor = this.baseColor.isConnected ? this.baseColor.associatedVariableName : \"vec3(1.)\";\n    const opacity = this.opacity.isConnected ? this.opacity.associatedVariableName : \"1.\";\n    code += `albedoOpacityBlock(\n                vec4(${albedoColor}, 1.),\n            #ifdef ALBEDO\n                vec4(1.),\n                vec2(1., 1.),\n            #endif\n            #ifdef OPACITY\n                vec4(${opacity}),\n                vec2(1., 1.),\n            #endif\n                albedoOpacityOut\n            );\n\n            vec3 surfaceAlbedo = albedoOpacityOut.surfaceAlbedo;\n            float alpha = albedoOpacityOut.alpha;\\r\\n`;\n    return code;\n  }\n  _getAmbientOcclusionCode() {\n    let code = `ambientOcclusionOutParams aoOut;\\r\\n`;\n    const ao = this.ambientOcc.isConnected ? this.ambientOcc.associatedVariableName : \"1.\";\n    code += `ambientOcclusionBlock(\n            #ifdef AMBIENT\n                vec3(${ao}),\n                vec4(0., 1.0, 1.0, 0.),\n            #endif\n                aoOut\n            );\\r\\n`;\n    return code;\n  }\n  _getReflectivityCode(state) {\n    let code = `reflectivityOutParams reflectivityOut;\\r\\n`;\n    const aoIntensity = \"1.\";\n    this._vMetallicReflectanceFactorsName = state._getFreeVariableName(\"vMetallicReflectanceFactors\");\n    state._emitUniformFromString(this._vMetallicReflectanceFactorsName, \"vec4\");\n    code += `vec3 baseColor = surfaceAlbedo;\n\n            reflectivityBlock(\n                vec4(${this.metallic.associatedVariableName}, ${this.roughness.associatedVariableName}, 0., 0.),\n            #ifdef METALLICWORKFLOW\n                surfaceAlbedo,\n                ${this._vMetallicReflectanceFactorsName},\n            #endif\n            #ifdef REFLECTIVITY\n                vec3(0., 0., ${aoIntensity}),\n                vec4(1.),\n            #endif\n            #if defined(METALLICWORKFLOW) && defined(REFLECTIVITY)  && defined(AOSTOREINMETALMAPRED)\n                aoOut.ambientOcclusionColor,\n            #endif\n            #ifdef MICROSURFACEMAP\n                microSurfaceTexel, <== not handled!\n            #endif\n                reflectivityOut\n            );\n\n            float microSurface = reflectivityOut.microSurface;\n            float roughness = reflectivityOut.roughness;\n\n            #ifdef METALLICWORKFLOW\n                surfaceAlbedo = reflectivityOut.surfaceAlbedo;\n            #endif\n            #if defined(METALLICWORKFLOW) && defined(REFLECTIVITY) && defined(AOSTOREINMETALMAPRED)\n                aoOut.ambientOcclusionColor = reflectivityOut.ambientOcclusionColor;\n            #endif\\r\\n`;\n    return code;\n  }\n  _buildBlock(state) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16;\n    super._buildBlock(state);\n    this._scene = state.sharedData.scene;\n    if (!this._environmentBRDFTexture) {\n      this._environmentBRDFTexture = GetEnvironmentBRDFTexture(this._scene);\n    }\n    const reflectionBlock = this.reflection.isConnected ? (_a = this.reflection.connectedPoint) === null || _a === void 0 ? void 0 : _a.ownerBlock : null;\n    if (reflectionBlock) {\n      // Need those variables to be setup when calling _injectVertexCode\n      reflectionBlock.worldPositionConnectionPoint = this.worldPosition;\n      reflectionBlock.cameraPositionConnectionPoint = this.cameraPosition;\n      reflectionBlock.worldNormalConnectionPoint = this.worldNormal;\n      reflectionBlock.viewConnectionPoint = this.view;\n    }\n    if (state.target !== NodeMaterialBlockTargets.Fragment) {\n      // Vertex\n      this._injectVertexCode(state);\n      return this;\n    }\n    // Fragment\n    state.sharedData.forcedBindableBlocks.push(this);\n    state.sharedData.blocksWithDefines.push(this);\n    state.sharedData.blockingBlocks.push(this);\n    if (this.generateOnlyFragmentCode) {\n      state.sharedData.dynamicUniformBlocks.push(this);\n    }\n    const comments = `//${this.name}`;\n    const normalShading = this.perturbedNormal;\n    let worldPosVarName = this.worldPosition.associatedVariableName;\n    if (this.generateOnlyFragmentCode) {\n      worldPosVarName = state._getFreeVariableName(\"globalWorldPos\");\n      state._emitFunction(\"pbr_globalworldpos\", `vec3 ${worldPosVarName};\\r\\n`, comments);\n      state.compilationString += `${worldPosVarName} = ${this.worldPosition.associatedVariableName}.xyz;\\r\\n`;\n      state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\n        repeatKey: \"maxSimultaneousLights\",\n        substitutionVars: this.generateOnlyFragmentCode ? `worldPos,${this.worldPosition.associatedVariableName}` : undefined\n      });\n      state.compilationString += `#if DEBUGMODE > 0\\r\\n`;\n      state.compilationString += `vec4 vClipSpacePosition = vec4((vec2(gl_FragCoord.xy) / vec2(1.0)) * 2.0 - 1.0, 0.0, 1.0);\\r\\n`;\n      state.compilationString += `#endif\\r\\n`;\n    } else {\n      worldPosVarName = \"v_\" + worldPosVarName;\n    }\n    this._environmentBrdfSamplerName = state._getFreeVariableName(\"environmentBrdfSampler\");\n    state._emit2DSampler(this._environmentBrdfSamplerName);\n    state.sharedData.hints.needAlphaBlending = state.sharedData.hints.needAlphaBlending || this.useAlphaBlending;\n    state.sharedData.hints.needAlphaTesting = state.sharedData.hints.needAlphaTesting || this.useAlphaTest;\n    state._emitExtension(\"lod\", \"#extension GL_EXT_shader_texture_lod : enable\", \"defined(LODBASEDMICROSFURACE)\");\n    state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\n    state._emitUniformFromString(\"vDebugMode\", \"vec2\", \"defined(IGNORE) || DEBUGMODE > 0\");\n    state._emitUniformFromString(\"ambientFromScene\", \"vec3\");\n    // Image processing uniforms\n    state.uniforms.push(\"exposureLinear\");\n    state.uniforms.push(\"contrast\");\n    state.uniforms.push(\"vInverseScreenSize\");\n    state.uniforms.push(\"vignetteSettings1\");\n    state.uniforms.push(\"vignetteSettings2\");\n    state.uniforms.push(\"vCameraColorCurveNegative\");\n    state.uniforms.push(\"vCameraColorCurveNeutral\");\n    state.uniforms.push(\"vCameraColorCurvePositive\");\n    state.uniforms.push(\"txColorTransform\");\n    state.uniforms.push(\"colorTransformSettings\");\n    state.uniforms.push(\"ditherIntensity\");\n    //\n    // Includes\n    //\n    if (!this.light) {\n      // Emit for all lights\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\n        repeatKey: \"maxSimultaneousLights\",\n        substitutionVars: this.generateOnlyFragmentCode ? \"varying,\" : undefined\n      });\n    } else {\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }]\n      }, this._lightId.toString());\n    }\n    state._emitFunctionFromInclude(\"helperFunctions\", comments);\n    state._emitFunctionFromInclude(\"importanceSampling\", comments);\n    state._emitFunctionFromInclude(\"pbrHelperFunctions\", comments);\n    state._emitFunctionFromInclude(\"imageProcessingDeclaration\", comments);\n    state._emitFunctionFromInclude(\"imageProcessingFunctions\", comments);\n    state._emitFunctionFromInclude(\"shadowsFragmentFunctions\", comments, {\n      replaceStrings: [{\n        search: /vPositionW/g,\n        replace: worldPosVarName + \".xyz\"\n      }]\n    });\n    state._emitFunctionFromInclude(\"pbrDirectLightingSetupFunctions\", comments, {\n      replaceStrings: [{\n        search: /vPositionW/g,\n        replace: worldPosVarName + \".xyz\"\n      }]\n    });\n    state._emitFunctionFromInclude(\"pbrDirectLightingFalloffFunctions\", comments);\n    state._emitFunctionFromInclude(\"pbrBRDFFunctions\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_b = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _b !== void 0 ? _b : \"REFLECTIONMAP_SKYBOX\"\n      }]\n    });\n    state._emitFunctionFromInclude(\"hdrFilteringFunctions\", comments);\n    state._emitFunctionFromInclude(\"pbrDirectLightingFunctions\", comments, {\n      replaceStrings: [{\n        search: /vPositionW/g,\n        replace: worldPosVarName + \".xyz\"\n      }]\n    });\n    state._emitFunctionFromInclude(\"pbrIBLFunctions\", comments);\n    state._emitFunctionFromInclude(\"pbrBlockAlbedoOpacity\", comments);\n    state._emitFunctionFromInclude(\"pbrBlockReflectivity\", comments);\n    state._emitFunctionFromInclude(\"pbrBlockAmbientOcclusion\", comments);\n    state._emitFunctionFromInclude(\"pbrBlockAlphaFresnel\", comments);\n    state._emitFunctionFromInclude(\"pbrBlockAnisotropic\", comments);\n    //\n    // code\n    //\n    state._emitUniformFromString(\"vLightingIntensity\", \"vec4\");\n    if (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock.generateOnlyFragmentCode) {\n      state.compilationString += reflectionBlock.handleVertexSide(state);\n    }\n    // _____________________________ Geometry Information ____________________________\n    this._vNormalWName = state._getFreeVariableName(\"vNormalW\");\n    state.compilationString += `vec4 ${this._vNormalWName} = normalize(${this.worldNormal.associatedVariableName});\\r\\n`;\n    if (state._registerTempVariable(\"viewDirectionW\")) {\n      state.compilationString += `vec3 viewDirectionW = normalize(${this.cameraPosition.associatedVariableName} - ${worldPosVarName}.xyz);\\r\\n`;\n    }\n    state.compilationString += `vec3 geometricNormalW = ${this._vNormalWName}.xyz;\\r\\n`;\n    state.compilationString += `vec3 normalW = ${normalShading.isConnected ? \"normalize(\" + normalShading.associatedVariableName + \".xyz)\" : \"geometricNormalW\"};\\r\\n`;\n    this._invertNormalName = state._getFreeVariableName(\"invertNormal\");\n    state._emitUniformFromString(this._invertNormalName, \"float\");\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockNormalFinal\", comments, {\n      replaceStrings: [{\n        search: /vPositionW/g,\n        replace: worldPosVarName + \".xyz\"\n      }, {\n        search: /vEyePosition.w/g,\n        replace: this._invertNormalName\n      }]\n    });\n    // _____________________________ Albedo & Opacity ______________________________\n    state.compilationString += this._getAlbedoOpacityCode();\n    state.compilationString += state._emitCodeFromInclude(\"depthPrePass\", comments);\n    // _____________________________ AO  _______________________________\n    state.compilationString += this._getAmbientOcclusionCode();\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockLightmapInit\", comments);\n    // _____________________________ UNLIT  _______________________________\n    state.compilationString += `#ifdef UNLIT\n                vec3 diffuseBase = vec3(1., 1., 1.);\n            #else\\r\\n`;\n    // _____________________________ Reflectivity _______________________________\n    state.compilationString += this._getReflectivityCode(state);\n    // _____________________________ Geometry info _________________________________\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockGeometryInfo\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_c = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _c !== void 0 ? _c : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_d = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _d !== void 0 ? _d : \"REFLECTIONMAP_3D\"\n      }]\n    });\n    // _____________________________ Anisotropy _______________________________________\n    const anisotropyBlock = this.anisotropy.isConnected ? (_e = this.anisotropy.connectedPoint) === null || _e === void 0 ? void 0 : _e.ownerBlock : null;\n    if (anisotropyBlock) {\n      anisotropyBlock.worldPositionConnectionPoint = this.worldPosition;\n      anisotropyBlock.worldNormalConnectionPoint = this.worldNormal;\n      state.compilationString += anisotropyBlock.getCode(state, !this.perturbedNormal.isConnected);\n    }\n    // _____________________________ Reflection _______________________________________\n    if (reflectionBlock && reflectionBlock.hasTexture) {\n      state.compilationString += reflectionBlock.getCode(state, anisotropyBlock ? \"anisotropicOut.anisotropicNormal\" : \"normalW\");\n    }\n    state._emitFunctionFromInclude(\"pbrBlockReflection\", comments, {\n      replaceStrings: [{\n        search: /computeReflectionCoords/g,\n        replace: \"computeReflectionCoordsPBR\"\n      }, {\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_f = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _f !== void 0 ? _f : \"REFLECTIONMAP_3D\"\n      }, {\n        search: /REFLECTIONMAP_OPPOSITEZ/g,\n        replace: (_g = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineOppositeZ) !== null && _g !== void 0 ? _g : \"REFLECTIONMAP_OPPOSITEZ\"\n      }, {\n        search: /REFLECTIONMAP_PROJECTION/g,\n        replace: (_h = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineProjectionName) !== null && _h !== void 0 ? _h : \"REFLECTIONMAP_PROJECTION\"\n      }, {\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_j = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _j !== void 0 ? _j : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /LODINREFLECTIONALPHA/g,\n        replace: (_k = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLODReflectionAlpha) !== null && _k !== void 0 ? _k : \"LODINREFLECTIONALPHA\"\n      }, {\n        search: /LINEARSPECULARREFLECTION/g,\n        replace: (_l = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLinearSpecularReflection) !== null && _l !== void 0 ? _l : \"LINEARSPECULARREFLECTION\"\n      }, {\n        search: /vReflectionFilteringInfo/g,\n        replace: (_m = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionFilteringInfoName) !== null && _m !== void 0 ? _m : \"vReflectionFilteringInfo\"\n      }]\n    });\n    // ___________________ Compute Reflectance aka R0 F0 info _________________________\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockReflectance0\", comments, {\n      replaceStrings: [{\n        search: /metallicReflectanceFactors/g,\n        replace: this._vMetallicReflectanceFactorsName\n      }]\n    });\n    // ________________________________ Sheen ______________________________\n    const sheenBlock = this.sheen.isConnected ? (_o = this.sheen.connectedPoint) === null || _o === void 0 ? void 0 : _o.ownerBlock : null;\n    if (sheenBlock) {\n      state.compilationString += sheenBlock.getCode(reflectionBlock);\n    }\n    state._emitFunctionFromInclude(\"pbrBlockSheen\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_p = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _p !== void 0 ? _p : \"REFLECTIONMAP_3D\"\n      }, {\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_q = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _q !== void 0 ? _q : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /LODINREFLECTIONALPHA/g,\n        replace: (_r = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLODReflectionAlpha) !== null && _r !== void 0 ? _r : \"LODINREFLECTIONALPHA\"\n      }, {\n        search: /LINEARSPECULARREFLECTION/g,\n        replace: (_s = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLinearSpecularReflection) !== null && _s !== void 0 ? _s : \"LINEARSPECULARREFLECTION\"\n      }]\n    });\n    // _____________________________ Iridescence _______________________________\n    const iridescenceBlock = this.iridescence.isConnected ? (_t = this.iridescence.connectedPoint) === null || _t === void 0 ? void 0 : _t.ownerBlock : null;\n    state.compilationString += IridescenceBlock.GetCode(iridescenceBlock);\n    state._emitFunctionFromInclude(\"pbrBlockIridescence\", comments, {\n      replaceStrings: []\n    });\n    // _____________________________ Clear Coat ____________________________\n    const clearcoatBlock = this.clearcoat.isConnected ? (_u = this.clearcoat.connectedPoint) === null || _u === void 0 ? void 0 : _u.ownerBlock : null;\n    const generateTBNSpace = !this.perturbedNormal.isConnected && !this.anisotropy.isConnected;\n    const isTangentConnectedToPerturbNormal = this.perturbedNormal.isConnected && ((_w = ((_v = this.perturbedNormal.connectedPoint) === null || _v === void 0 ? void 0 : _v.ownerBlock).worldTangent) === null || _w === void 0 ? void 0 : _w.isConnected);\n    const isTangentConnectedToAnisotropy = this.anisotropy.isConnected && ((_x = this.anisotropy.connectedPoint) === null || _x === void 0 ? void 0 : _x.ownerBlock).worldTangent.isConnected;\n    let vTBNAvailable = isTangentConnectedToPerturbNormal || !this.perturbedNormal.isConnected && isTangentConnectedToAnisotropy;\n    state.compilationString += ClearCoatBlock.GetCode(state, clearcoatBlock, reflectionBlock, worldPosVarName, generateTBNSpace, vTBNAvailable, this.worldNormal.associatedVariableName);\n    if (generateTBNSpace) {\n      vTBNAvailable = (_y = clearcoatBlock === null || clearcoatBlock === void 0 ? void 0 : clearcoatBlock.worldTangent.isConnected) !== null && _y !== void 0 ? _y : false;\n    }\n    state._emitFunctionFromInclude(\"pbrBlockClearcoat\", comments, {\n      replaceStrings: [{\n        search: /computeReflectionCoords/g,\n        replace: \"computeReflectionCoordsPBR\"\n      }, {\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_z = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _z !== void 0 ? _z : \"REFLECTIONMAP_3D\"\n      }, {\n        search: /REFLECTIONMAP_OPPOSITEZ/g,\n        replace: (_0 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineOppositeZ) !== null && _0 !== void 0 ? _0 : \"REFLECTIONMAP_OPPOSITEZ\"\n      }, {\n        search: /REFLECTIONMAP_PROJECTION/g,\n        replace: (_1 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineProjectionName) !== null && _1 !== void 0 ? _1 : \"REFLECTIONMAP_PROJECTION\"\n      }, {\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_2 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _2 !== void 0 ? _2 : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /LODINREFLECTIONALPHA/g,\n        replace: (_3 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLODReflectionAlpha) !== null && _3 !== void 0 ? _3 : \"LODINREFLECTIONALPHA\"\n      }, {\n        search: /LINEARSPECULARREFLECTION/g,\n        replace: (_4 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLinearSpecularReflection) !== null && _4 !== void 0 ? _4 : \"LINEARSPECULARREFLECTION\"\n      }, {\n        search: /defined\\(TANGENT\\)/g,\n        replace: vTBNAvailable ? \"defined(TANGENT)\" : \"defined(IGNORE)\"\n      }]\n    });\n    // _________________________ Specular Environment Reflectance __________________________\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockReflectance\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_5 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _5 !== void 0 ? _5 : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_6 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _6 !== void 0 ? _6 : \"REFLECTIONMAP_3D\"\n      }]\n    });\n    // ___________________________________ SubSurface ______________________________________\n    const subsurfaceBlock = this.subsurface.isConnected ? (_7 = this.subsurface.connectedPoint) === null || _7 === void 0 ? void 0 : _7.ownerBlock : null;\n    const refractionBlock = this.subsurface.isConnected ? (_9 = ((_8 = this.subsurface.connectedPoint) === null || _8 === void 0 ? void 0 : _8.ownerBlock).refraction.connectedPoint) === null || _9 === void 0 ? void 0 : _9.ownerBlock : null;\n    if (refractionBlock) {\n      refractionBlock.viewConnectionPoint = this.view;\n      refractionBlock.indexOfRefractionConnectionPoint = this.indexOfRefraction;\n    }\n    state.compilationString += SubSurfaceBlock.GetCode(state, subsurfaceBlock, reflectionBlock, worldPosVarName);\n    state._emitFunctionFromInclude(\"pbrBlockSubSurface\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_10 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _10 !== void 0 ? _10 : \"REFLECTIONMAP_3D\"\n      }, {\n        search: /REFLECTIONMAP_OPPOSITEZ/g,\n        replace: (_11 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineOppositeZ) !== null && _11 !== void 0 ? _11 : \"REFLECTIONMAP_OPPOSITEZ\"\n      }, {\n        search: /REFLECTIONMAP_PROJECTION/g,\n        replace: (_12 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineProjectionName) !== null && _12 !== void 0 ? _12 : \"REFLECTIONMAP_PROJECTION\"\n      }, {\n        search: /SS_REFRACTIONMAP_3D/g,\n        replace: (_13 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._define3DName) !== null && _13 !== void 0 ? _13 : \"SS_REFRACTIONMAP_3D\"\n      }, {\n        search: /SS_LODINREFRACTIONALPHA/g,\n        replace: (_14 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLODRefractionAlpha) !== null && _14 !== void 0 ? _14 : \"SS_LODINREFRACTIONALPHA\"\n      }, {\n        search: /SS_LINEARSPECULARREFRACTION/g,\n        replace: (_15 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLinearSpecularRefraction) !== null && _15 !== void 0 ? _15 : \"SS_LINEARSPECULARREFRACTION\"\n      }, {\n        search: /SS_REFRACTIONMAP_OPPOSITEZ/g,\n        replace: (_16 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineOppositeZ) !== null && _16 !== void 0 ? _16 : \"SS_REFRACTIONMAP_OPPOSITEZ\"\n      }]\n    });\n    // _____________________________ Direct Lighting Info __________________________________\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockDirectLighting\", comments);\n    if (this.light) {\n      state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }]\n      });\n    } else {\n      state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\n        repeatKey: \"maxSimultaneousLights\"\n      });\n    }\n    // _____________________________ Compute Final Lit Components ________________________\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalLitComponents\", comments);\n    // _____________________________ UNLIT (2) ________________________\n    state.compilationString += `#endif\\r\\n`; // UNLIT\n    // _____________________________ Compute Final Unlit Components ________________________\n    const aoColor = this.ambientColor.isConnected ? this.ambientColor.associatedVariableName : \"vec3(0., 0., 0.)\";\n    let aoDirectLightIntensity = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS.toString();\n    if (aoDirectLightIntensity.indexOf(\".\") === -1) {\n      aoDirectLightIntensity += \".\";\n    }\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalUnlitComponents\", comments, {\n      replaceStrings: [{\n        search: /vec3 finalEmissive[\\s\\S]*?finalEmissive\\*=vLightingIntensity\\.y;/g,\n        replace: \"\"\n      }, {\n        search: /vAmbientColor/g,\n        replace: aoColor + \" * ambientFromScene\"\n      }, {\n        search: /vAmbientInfos\\.w/g,\n        replace: aoDirectLightIntensity\n      }]\n    });\n    // _____________________________ Output Final Color Composition ________________________\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalColorComposition\", comments, {\n      replaceStrings: [{\n        search: /finalEmissive/g,\n        replace: \"vec3(0.)\"\n      }]\n    });\n    // _____________________________ Apply image processing ________________________\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockImageProcessing\", comments, {\n      replaceStrings: [{\n        search: /visibility/g,\n        replace: \"1.\"\n      }]\n    });\n    // _____________________________ Generate debug code ________________________\n    state.compilationString += state._emitCodeFromInclude(\"pbrDebug\", comments, {\n      replaceStrings: [{\n        search: /vNormalW/g,\n        replace: this._vNormalWName\n      }, {\n        search: /vPositionW/g,\n        replace: worldPosVarName\n      }, {\n        search: /albedoTexture\\.rgb;/g,\n        replace: \"vec3(1.);\\r\\ngl_FragColor.rgb = toGammaSpace(gl_FragColor.rgb);\\r\\n\"\n      }]\n    });\n    // _____________________________ Generate end points ________________________\n    for (const output of this._outputs) {\n      if (output.hasEndpoints) {\n        const remap = mapOutputToVariable[output.name];\n        if (remap) {\n          const [varName, conditions] = remap;\n          if (conditions) {\n            state.compilationString += `#if ${conditions}\\r\\n`;\n          }\n          state.compilationString += `${this._declareOutput(output, state)} = ${varName};\\r\\n`;\n          if (conditions) {\n            state.compilationString += `#else\\r\\n`;\n            state.compilationString += `${this._declareOutput(output, state)} = vec3(0.);\\r\\n`;\n            state.compilationString += `#endif\\r\\n`;\n          }\n        } else {\n          console.error(`There's no remapping for the ${output.name} end point! No code generated`);\n        }\n      }\n    }\n    return this;\n  }\n  _dumpPropertiesCode() {\n    let codeString = super._dumpPropertiesCode();\n    codeString += `${this._codeVariableName}.lightFalloff = ${this.lightFalloff};\\r\\n`;\n    codeString += `${this._codeVariableName}.useAlphaTest = ${this.useAlphaTest};\\r\\n`;\n    codeString += `${this._codeVariableName}.alphaTestCutoff = ${this.alphaTestCutoff};\\r\\n`;\n    codeString += `${this._codeVariableName}.useAlphaBlending = ${this.useAlphaBlending};\\r\\n`;\n    codeString += `${this._codeVariableName}.useRadianceOverAlpha = ${this.useRadianceOverAlpha};\\r\\n`;\n    codeString += `${this._codeVariableName}.useSpecularOverAlpha = ${this.useSpecularOverAlpha};\\r\\n`;\n    codeString += `${this._codeVariableName}.enableSpecularAntiAliasing = ${this.enableSpecularAntiAliasing};\\r\\n`;\n    codeString += `${this._codeVariableName}.realTimeFiltering = ${this.realTimeFiltering};\\r\\n`;\n    codeString += `${this._codeVariableName}.realTimeFilteringQuality = ${this.realTimeFilteringQuality};\\r\\n`;\n    codeString += `${this._codeVariableName}.useEnergyConservation = ${this.useEnergyConservation};\\r\\n`;\n    codeString += `${this._codeVariableName}.useRadianceOcclusion = ${this.useRadianceOcclusion};\\r\\n`;\n    codeString += `${this._codeVariableName}.useHorizonOcclusion = ${this.useHorizonOcclusion};\\r\\n`;\n    codeString += `${this._codeVariableName}.unlit = ${this.unlit};\\r\\n`;\n    codeString += `${this._codeVariableName}.forceNormalForward = ${this.forceNormalForward};\\r\\n`;\n    codeString += `${this._codeVariableName}.debugMode = ${this.debugMode};\\r\\n`;\n    codeString += `${this._codeVariableName}.debugLimit = ${this.debugLimit};\\r\\n`;\n    codeString += `${this._codeVariableName}.debugFactor = ${this.debugFactor};\\r\\n`;\n    return codeString;\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    if (this.light) {\n      serializationObject.lightId = this.light.id;\n    }\n    serializationObject.lightFalloff = this.lightFalloff;\n    serializationObject.useAlphaTest = this.useAlphaTest;\n    serializationObject.alphaTestCutoff = this.alphaTestCutoff;\n    serializationObject.useAlphaBlending = this.useAlphaBlending;\n    serializationObject.useRadianceOverAlpha = this.useRadianceOverAlpha;\n    serializationObject.useSpecularOverAlpha = this.useSpecularOverAlpha;\n    serializationObject.enableSpecularAntiAliasing = this.enableSpecularAntiAliasing;\n    serializationObject.realTimeFiltering = this.realTimeFiltering;\n    serializationObject.realTimeFilteringQuality = this.realTimeFilteringQuality;\n    serializationObject.useEnergyConservation = this.useEnergyConservation;\n    serializationObject.useRadianceOcclusion = this.useRadianceOcclusion;\n    serializationObject.useHorizonOcclusion = this.useHorizonOcclusion;\n    serializationObject.unlit = this.unlit;\n    serializationObject.forceNormalForward = this.forceNormalForward;\n    serializationObject.debugMode = this.debugMode;\n    serializationObject.debugLimit = this.debugLimit;\n    serializationObject.debugFactor = this.debugFactor;\n    serializationObject.generateOnlyFragmentCode = this.generateOnlyFragmentCode;\n    return serializationObject;\n  }\n  _deserialize(serializationObject, scene, rootUrl) {\n    var _a, _b;\n    super._deserialize(serializationObject, scene, rootUrl);\n    if (serializationObject.lightId) {\n      this.light = scene.getLightById(serializationObject.lightId);\n    }\n    this.lightFalloff = (_a = serializationObject.lightFalloff) !== null && _a !== void 0 ? _a : 0;\n    this.useAlphaTest = serializationObject.useAlphaTest;\n    this.alphaTestCutoff = serializationObject.alphaTestCutoff;\n    this.useAlphaBlending = serializationObject.useAlphaBlending;\n    this.useRadianceOverAlpha = serializationObject.useRadianceOverAlpha;\n    this.useSpecularOverAlpha = serializationObject.useSpecularOverAlpha;\n    this.enableSpecularAntiAliasing = serializationObject.enableSpecularAntiAliasing;\n    this.realTimeFiltering = !!serializationObject.realTimeFiltering;\n    this.realTimeFilteringQuality = (_b = serializationObject.realTimeFilteringQuality) !== null && _b !== void 0 ? _b : 8;\n    this.useEnergyConservation = serializationObject.useEnergyConservation;\n    this.useRadianceOcclusion = serializationObject.useRadianceOcclusion;\n    this.useHorizonOcclusion = serializationObject.useHorizonOcclusion;\n    this.unlit = serializationObject.unlit;\n    this.forceNormalForward = !!serializationObject.forceNormalForward;\n    this.debugMode = serializationObject.debugMode;\n    this.debugLimit = serializationObject.debugLimit;\n    this.debugFactor = serializationObject.debugFactor;\n    this.generateOnlyFragmentCode = !!serializationObject.generateOnlyFragmentCode;\n    this._setTarget();\n  }\n}\n__decorate([editableInPropertyPage(\"Direct lights\", PropertyTypeForEdition.Float, \"INTENSITY\", {\n  min: 0,\n  max: 1,\n  notifiers: {\n    update: true\n  }\n})], PBRMetallicRoughnessBlock.prototype, \"directIntensity\", void 0);\n__decorate([editableInPropertyPage(\"Environment lights\", PropertyTypeForEdition.Float, \"INTENSITY\", {\n  min: 0,\n  max: 1,\n  notifiers: {\n    update: true\n  }\n})], PBRMetallicRoughnessBlock.prototype, \"environmentIntensity\", void 0);\n__decorate([editableInPropertyPage(\"Specular highlights\", PropertyTypeForEdition.Float, \"INTENSITY\", {\n  min: 0,\n  max: 1,\n  notifiers: {\n    update: true\n  }\n})], PBRMetallicRoughnessBlock.prototype, \"specularIntensity\", void 0);\n__decorate([editableInPropertyPage(\"Light falloff\", PropertyTypeForEdition.List, \"LIGHTING & COLORS\", {\n  notifiers: {\n    update: true\n  },\n  options: [{\n    label: \"Physical\",\n    value: PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL\n  }, {\n    label: \"GLTF\",\n    value: PBRBaseMaterial.LIGHTFALLOFF_GLTF\n  }, {\n    label: \"Standard\",\n    value: PBRBaseMaterial.LIGHTFALLOFF_STANDARD\n  }]\n})], PBRMetallicRoughnessBlock.prototype, \"lightFalloff\", void 0);\n__decorate([editableInPropertyPage(\"Alpha Testing\", PropertyTypeForEdition.Boolean, \"OPACITY\")], PBRMetallicRoughnessBlock.prototype, \"useAlphaTest\", void 0);\n__decorate([editableInPropertyPage(\"Alpha CutOff\", PropertyTypeForEdition.Float, \"OPACITY\", {\n  min: 0,\n  max: 1,\n  notifiers: {\n    update: true\n  }\n})], PBRMetallicRoughnessBlock.prototype, \"alphaTestCutoff\", void 0);\n__decorate([editableInPropertyPage(\"Alpha blending\", PropertyTypeForEdition.Boolean, \"OPACITY\")], PBRMetallicRoughnessBlock.prototype, \"useAlphaBlending\", void 0);\n__decorate([editableInPropertyPage(\"Radiance over alpha\", PropertyTypeForEdition.Boolean, \"RENDERING\", {\n  notifiers: {\n    update: true\n  }\n})], PBRMetallicRoughnessBlock.prototype, \"useRadianceOverAlpha\", void 0);\n__decorate([editableInPropertyPage(\"Specular over alpha\", PropertyTypeForEdition.Boolean, \"RENDERING\", {\n  notifiers: {\n    update: true\n  }\n})], PBRMetallicRoughnessBlock.prototype, \"useSpecularOverAlpha\", void 0);\n__decorate([editableInPropertyPage(\"Specular anti-aliasing\", PropertyTypeForEdition.Boolean, \"RENDERING\", {\n  notifiers: {\n    update: true\n  }\n})], PBRMetallicRoughnessBlock.prototype, \"enableSpecularAntiAliasing\", void 0);\n__decorate([editableInPropertyPage(\"Realtime filtering\", PropertyTypeForEdition.Boolean, \"RENDERING\", {\n  notifiers: {\n    update: true\n  }\n})], PBRMetallicRoughnessBlock.prototype, \"realTimeFiltering\", void 0);\n__decorate([editableInPropertyPage(\"Realtime filtering quality\", PropertyTypeForEdition.List, \"RENDERING\", {\n  notifiers: {\n    update: true\n  },\n  options: [{\n    label: \"Low\",\n    value: 8\n  }, {\n    label: \"Medium\",\n    value: 16\n  }, {\n    label: \"High\",\n    value: 64\n  }]\n})], PBRMetallicRoughnessBlock.prototype, \"realTimeFilteringQuality\", void 0);\n__decorate([editableInPropertyPage(\"Energy Conservation\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n  notifiers: {\n    update: true\n  }\n})], PBRMetallicRoughnessBlock.prototype, \"useEnergyConservation\", void 0);\n__decorate([editableInPropertyPage(\"Radiance occlusion\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n  notifiers: {\n    update: true\n  }\n})], PBRMetallicRoughnessBlock.prototype, \"useRadianceOcclusion\", void 0);\n__decorate([editableInPropertyPage(\"Horizon occlusion\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n  notifiers: {\n    update: true\n  }\n})], PBRMetallicRoughnessBlock.prototype, \"useHorizonOcclusion\", void 0);\n__decorate([editableInPropertyPage(\"Unlit\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n  notifiers: {\n    update: true\n  }\n})], PBRMetallicRoughnessBlock.prototype, \"unlit\", void 0);\n__decorate([editableInPropertyPage(\"Force normal forward\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n  notifiers: {\n    update: true\n  }\n})], PBRMetallicRoughnessBlock.prototype, \"forceNormalForward\", void 0);\n__decorate([editableInPropertyPage(\"Generate only fragment code\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n  notifiers: {\n    rebuild: true,\n    update: true,\n    onValidation: PBRMetallicRoughnessBlock._OnGenerateOnlyFragmentCodeChanged\n  }\n})], PBRMetallicRoughnessBlock.prototype, \"generateOnlyFragmentCode\", void 0);\n__decorate([editableInPropertyPage(\"Debug mode\", PropertyTypeForEdition.List, \"DEBUG\", {\n  notifiers: {\n    update: true\n  },\n  options: [{\n    label: \"None\",\n    value: 0\n  },\n  // Geometry\n  {\n    label: \"Normalized position\",\n    value: 1\n  }, {\n    label: \"Normals\",\n    value: 2\n  }, {\n    label: \"Tangents\",\n    value: 3\n  }, {\n    label: \"Bitangents\",\n    value: 4\n  }, {\n    label: \"Bump Normals\",\n    value: 5\n  },\n  //{ label: \"UV1\", value: 6 },\n  //{ label: \"UV2\", value: 7 },\n  {\n    label: \"ClearCoat Normals\",\n    value: 8\n  }, {\n    label: \"ClearCoat Tangents\",\n    value: 9\n  }, {\n    label: \"ClearCoat Bitangents\",\n    value: 10\n  }, {\n    label: \"Anisotropic Normals\",\n    value: 11\n  }, {\n    label: \"Anisotropic Tangents\",\n    value: 12\n  }, {\n    label: \"Anisotropic Bitangents\",\n    value: 13\n  },\n  // Maps\n  //{ label: \"Emissive Map\", value: 23 },\n  //{ label: \"Light Map\", value: 24 },\n  // Env\n  {\n    label: \"Env Refraction\",\n    value: 40\n  }, {\n    label: \"Env Reflection\",\n    value: 41\n  }, {\n    label: \"Env Clear Coat\",\n    value: 42\n  },\n  // Lighting\n  {\n    label: \"Direct Diffuse\",\n    value: 50\n  }, {\n    label: \"Direct Specular\",\n    value: 51\n  }, {\n    label: \"Direct Clear Coat\",\n    value: 52\n  }, {\n    label: \"Direct Sheen\",\n    value: 53\n  }, {\n    label: \"Env Irradiance\",\n    value: 54\n  },\n  // Lighting Params\n  {\n    label: \"Surface Albedo\",\n    value: 60\n  }, {\n    label: \"Reflectance 0\",\n    value: 61\n  }, {\n    label: \"Metallic\",\n    value: 62\n  }, {\n    label: \"Metallic F0\",\n    value: 71\n  }, {\n    label: \"Roughness\",\n    value: 63\n  }, {\n    label: \"AlphaG\",\n    value: 64\n  }, {\n    label: \"NdotV\",\n    value: 65\n  }, {\n    label: \"ClearCoat Color\",\n    value: 66\n  }, {\n    label: \"ClearCoat Roughness\",\n    value: 67\n  }, {\n    label: \"ClearCoat NdotV\",\n    value: 68\n  }, {\n    label: \"Transmittance\",\n    value: 69\n  }, {\n    label: \"Refraction Transmittance\",\n    value: 70\n  },\n  // Misc\n  {\n    label: \"SEO\",\n    value: 80\n  }, {\n    label: \"EHO\",\n    value: 81\n  }, {\n    label: \"Energy Factor\",\n    value: 82\n  }, {\n    label: \"Specular Reflectance\",\n    value: 83\n  }, {\n    label: \"Clear Coat Reflectance\",\n    value: 84\n  }, {\n    label: \"Sheen Reflectance\",\n    value: 85\n  }, {\n    label: \"Luminance Over Alpha\",\n    value: 86\n  }, {\n    label: \"Alpha\",\n    value: 87\n  }]\n})], PBRMetallicRoughnessBlock.prototype, \"debugMode\", void 0);\n__decorate([editableInPropertyPage(\"Split position\", PropertyTypeForEdition.Float, \"DEBUG\", {\n  min: -1,\n  max: 1,\n  notifiers: {\n    update: true\n  }\n})], PBRMetallicRoughnessBlock.prototype, \"debugLimit\", void 0);\n__decorate([editableInPropertyPage(\"Output factor\", PropertyTypeForEdition.Float, \"DEBUG\", {\n  min: 0,\n  max: 5,\n  notifiers: {\n    update: true\n  }\n})], PBRMetallicRoughnessBlock.prototype, \"debugFactor\", void 0);\nRegisterClass(\"BABYLON.PBRMetallicRoughnessBlock\", PBRMetallicRoughnessBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialConnectionPointDirection","MaterialHelper","NodeMaterialBlockTargets","NodeMaterialSystemValues","InputBlock","RegisterClass","PBRBaseMaterial","editableInPropertyPage","PropertyTypeForEdition","NodeMaterialConnectionPointCustomObject","SheenBlock","GetEnvironmentBRDFTexture","MaterialFlags","AnisotropyBlock","ReflectionBlock","ClearCoatBlock","IridescenceBlock","SubSurfaceBlock","Color3","TmpColors","mapOutputToVariable","ambientClr","diffuseDir","specularDir","clearcoatDir","sheenDir","diffuseInd","specularInd","clearcoatInd","sheenInd","refraction","lighting","shadow","alpha","PBRMetallicRoughnessBlock","constructor","name","VertexAndFragment","White","_isUnique","registerInput","Vector4","Vertex","Fragment","Matrix","Vector3","Float","Object","Input","registerOutput","_OnGenerateOnlyFragmentCodeChanged","block","_propertyName","that","worldPosition","isConnected","generateOnlyFragmentCode","console","error","_setTarget","_setInitialTarget","getInputByName","target","initialize","state","_excludeVariableName","getClassName","_inputs","worldNormal","view","cameraPosition","perturbedNormal","baseColor","metallic","roughness","ambientOcc","opacity","indexOfRefraction","ambientColor","reflection","clearcoat","sheen","subsurface","anisotropy","iridescence","_outputs","autoConfigure","material","cameraPositionInput","getInputBlockByPredicate","b","systemValue","CameraPosition","setAsSystemValue","output","connectTo","viewInput","View","prepareDefines","mesh","nodeMaterial","defines","setValue","debugMode","_scene","getEngine","getCaps","textureLOD","lightFalloff","LIGHTFALLOFF_STANDARD","LIGHTFALLOFF_GLTF","alphaTestCutOffString","alphaTestCutoff","toString","useAlphaBlending","useAlphaTest","indexOf","useRadianceOverAlpha","useSpecularOverAlpha","standardDerivatives","enableSpecularAntiAliasing","realTimeFiltering","scene","getScene","engine","_features","needTypeSuffixInShaderConstants","realTimeFilteringQuality","useEnergyConservation","useRadianceOcclusion","useHorizonOcclusion","unlit","forceNormalForward","_environmentBRDFTexture","ReflectionTextureEnabled","isRGBD","_areImageProcessingDirty","imageProcessingConfiguration","_areLightsDirty","light","PrepareDefinesForLights","maxSimultaneousLights","_needNormals","PrepareDefinesForMultiview","needNormals","needRebuild","lightmapMode","shadowEnabled","specularEnabled","PrepareDefinesForLight","_lightId","rebuild","updateUniformsAndSamples","uniformBuffers","lightIndex","onlyUpdateBuffersList","uniforms","PrepareUniformsAndSamplersForLight","samplers","isReady","bind","effect","BindLights","BindLight","setTexture","_environmentBrdfSamplerName","setFloat2","debugLimit","debugFactor","ambientScene","setColor3","invertNormal","useRightHandedSystem","_mirroredCameraPosition","setFloat","_invertNormalName","setFloat4","directIntensity","environmentIntensity","specularIntensity","outsideIOR","ior","connectInputBlock","value","f0","Math","pow","_metallicReflectanceColor","scaleToRef","_metallicF0Factor","metallicF90","setColor4","_vMetallicReflectanceFactorsName","_injectVertexCode","worldPos","comments","_emitFunctionFromInclude","supportUniformBuffers","repeatKey","sharedData","dynamicUniformBlocks","push","counters","undefined","replaceStrings","search","replace","worldPosVaryingName","associatedVariableName","_emitVaryingFromString","compilationString","reflectionBlock","connectedPoint","ownerBlock","viewConnectionPoint","handleVertexSide","_injectAtEnd","_emitCodeFromInclude","_getAlbedoOpacityCode","code","albedoColor","_getAmbientOcclusionCode","ao","_getReflectivityCode","aoIntensity","_getFreeVariableName","_emitUniformFromString","_buildBlock","worldPositionConnectionPoint","cameraPositionConnectionPoint","worldNormalConnectionPoint","forcedBindableBlocks","blocksWithDefines","blockingBlocks","normalShading","worldPosVarName","_emitFunction","substitutionVars","_emit2DSampler","hints","needAlphaBlending","needAlphaTesting","_emitExtension","_defineSkyboxName","_vNormalWName","_registerTempVariable","_define3DName","anisotropyBlock","getCode","hasTexture","_defineOppositeZ","_defineProjectionName","_defineLODReflectionAlpha","_defineLinearSpecularReflection","_vReflectionFilteringInfoName","sheenBlock","iridescenceBlock","GetCode","clearcoatBlock","generateTBNSpace","isTangentConnectedToPerturbNormal","worldTangent","isTangentConnectedToAnisotropy","vTBNAvailable","subsurfaceBlock","refractionBlock","indexOfRefractionConnectionPoint","_defineLODRefractionAlpha","_defineLinearSpecularRefraction","aoColor","aoDirectLightIntensity","DEFAULT_AO_ON_ANALYTICAL_LIGHTS","hasEndpoints","remap","varName","conditions","_declareOutput","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","lightId","id","_deserialize","rootUrl","getLightById","__decorate","min","max","notifiers","update","List","options","label","LIGHTFALLOFF_PHYSICAL","Boolean","onValidation"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/PBR/pbrMetallicRoughnessBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { MaterialHelper } from \"../../../materialHelper\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport type { Light } from \"../../../../Lights/light\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport type { Mesh } from \"../../../../Meshes/mesh\";\r\nimport { PBRBaseMaterial } from \"../../../PBR/pbrBaseMaterial\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport { SheenBlock } from \"./sheenBlock\";\r\nimport type { BaseTexture } from \"../../../Textures/baseTexture\";\r\nimport { GetEnvironmentBRDFTexture } from \"../../../../Misc/brdfTextureTools\";\r\nimport { MaterialFlags } from \"../../../materialFlags\";\r\nimport { AnisotropyBlock } from \"./anisotropyBlock\";\r\nimport { ReflectionBlock } from \"./reflectionBlock\";\r\nimport { ClearCoatBlock } from \"./clearCoatBlock\";\r\nimport { IridescenceBlock } from \"./iridescenceBlock\";\r\nimport { SubSurfaceBlock } from \"./subSurfaceBlock\";\r\nimport type { RefractionBlock } from \"./refractionBlock\";\r\nimport type { PerturbNormalBlock } from \"../Fragment/perturbNormalBlock\";\r\nimport { Constants } from \"../../../../Engines/constants\";\r\nimport { Color3, TmpColors } from \"../../../../Maths/math.color\";\r\n\r\nconst mapOutputToVariable: { [name: string]: [string, string] } = {\r\n    ambientClr: [\"finalAmbient\", \"\"],\r\n    diffuseDir: [\"finalDiffuse\", \"\"],\r\n    specularDir: [\"finalSpecularScaled\", \"!defined(UNLIT) && defined(SPECULARTERM)\"],\r\n    clearcoatDir: [\"finalClearCoatScaled\", \"!defined(UNLIT) && defined(CLEARCOAT)\"],\r\n    sheenDir: [\"finalSheenScaled\", \"!defined(UNLIT) && defined(SHEEN)\"],\r\n    diffuseInd: [\"finalIrradiance\", \"!defined(UNLIT) && defined(REFLECTION)\"],\r\n    specularInd: [\"finalRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION)\"],\r\n    clearcoatInd: [\"clearcoatOut.finalClearCoatRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION) && defined(CLEARCOAT)\"],\r\n    sheenInd: [\"sheenOut.finalSheenRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION) && defined(SHEEN) && defined(ENVIRONMENTBRDF)\"],\r\n    refraction: [\"subSurfaceOut.finalRefraction\", \"!defined(UNLIT) && defined(SS_REFRACTION)\"],\r\n    lighting: [\"finalColor.rgb\", \"\"],\r\n    shadow: [\"shadow\", \"\"],\r\n    alpha: [\"alpha\", \"\"],\r\n};\r\n\r\n/**\r\n * Block used to implement the PBR metallic/roughness model\r\n */\r\nexport class PBRMetallicRoughnessBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Gets or sets the light associated with this block\r\n     */\r\n    public light: Nullable<Light>;\r\n\r\n    private static _OnGenerateOnlyFragmentCodeChanged(block: NodeMaterialBlock, _propertyName: string): boolean {\r\n        const that = block as PBRMetallicRoughnessBlock;\r\n\r\n        if (that.worldPosition.isConnected) {\r\n            that.generateOnlyFragmentCode = !that.generateOnlyFragmentCode;\r\n            console.error(\"The worldPosition input must not be connected to be able to switch!\");\r\n            return false;\r\n        }\r\n\r\n        that._setTarget();\r\n\r\n        return true;\r\n    }\r\n\r\n    private _setTarget(): void {\r\n        this._setInitialTarget(this.generateOnlyFragmentCode ? NodeMaterialBlockTargets.Fragment : NodeMaterialBlockTargets.VertexAndFragment);\r\n        this.getInputByName(\"worldPosition\")!.target = this.generateOnlyFragmentCode ? NodeMaterialBlockTargets.Fragment : NodeMaterialBlockTargets.Vertex;\r\n    }\r\n\r\n    private _lightId: number;\r\n    private _scene: Scene;\r\n    private _environmentBRDFTexture: Nullable<BaseTexture> = null;\r\n    private _environmentBrdfSamplerName: string;\r\n    private _vNormalWName: string;\r\n    private _invertNormalName: string;\r\n    private _metallicReflectanceColor: Color3 = Color3.White();\r\n    private _metallicF0Factor = 1;\r\n    private _vMetallicReflectanceFactorsName: string;\r\n\r\n    /**\r\n     * Create a new ReflectionBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.VertexAndFragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\r\n        this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, false);\r\n        this.registerInput(\"cameraPosition\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"perturbedNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"baseColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"metallic\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"ambientOcc\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"opacity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"ambientColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\r\n            \"reflection\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            true,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"reflection\", this, NodeMaterialConnectionPointDirection.Input, ReflectionBlock, \"ReflectionBlock\")\r\n        );\r\n        this.registerInput(\r\n            \"clearcoat\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            true,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"clearcoat\", this, NodeMaterialConnectionPointDirection.Input, ClearCoatBlock, \"ClearCoatBlock\")\r\n        );\r\n        this.registerInput(\r\n            \"sheen\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            true,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"sheen\", this, NodeMaterialConnectionPointDirection.Input, SheenBlock, \"SheenBlock\")\r\n        );\r\n        this.registerInput(\r\n            \"subsurface\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            true,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"subsurface\", this, NodeMaterialConnectionPointDirection.Input, SubSurfaceBlock, \"SubSurfaceBlock\")\r\n        );\r\n        this.registerInput(\r\n            \"anisotropy\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            true,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"anisotropy\", this, NodeMaterialConnectionPointDirection.Input, AnisotropyBlock, \"AnisotropyBlock\")\r\n        );\r\n        this.registerInput(\r\n            \"iridescence\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            true,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"iridescence\", this, NodeMaterialConnectionPointDirection.Input, IridescenceBlock, \"IridescenceBlock\")\r\n        );\r\n\r\n        this.registerOutput(\"ambientClr\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"diffuseDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"specularDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"clearcoatDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"sheenDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"diffuseInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"specularInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"clearcoatInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"sheenInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"refraction\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"lighting\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"shadow\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"alpha\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n    }\r\n\r\n    /**\r\n     * Intensity of the direct lights e.g. the four lights available in your scene.\r\n     * This impacts both the direct diffuse and specular highlights.\r\n     */\r\n    @editableInPropertyPage(\"Direct lights\", PropertyTypeForEdition.Float, \"INTENSITY\", { min: 0, max: 1, notifiers: { update: true } })\r\n    public directIntensity: number = 1.0;\r\n\r\n    /**\r\n     * Intensity of the environment e.g. how much the environment will light the object\r\n     * either through harmonics for rough material or through the reflection for shiny ones.\r\n     */\r\n    @editableInPropertyPage(\"Environment lights\", PropertyTypeForEdition.Float, \"INTENSITY\", { min: 0, max: 1, notifiers: { update: true } })\r\n    public environmentIntensity: number = 1.0;\r\n\r\n    /**\r\n     * This is a special control allowing the reduction of the specular highlights coming from the\r\n     * four lights of the scene. Those highlights may not be needed in full environment lighting.\r\n     */\r\n    @editableInPropertyPage(\"Specular highlights\", PropertyTypeForEdition.Float, \"INTENSITY\", { min: 0, max: 1, notifiers: { update: true } })\r\n    public specularIntensity: number = 1.0;\r\n\r\n    /**\r\n     * Defines the  falloff type used in this material.\r\n     * It by default is Physical.\r\n     */\r\n    @editableInPropertyPage(\"Light falloff\", PropertyTypeForEdition.List, \"LIGHTING & COLORS\", {\r\n        notifiers: { update: true },\r\n        options: [\r\n            { label: \"Physical\", value: PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL },\r\n            { label: \"GLTF\", value: PBRBaseMaterial.LIGHTFALLOFF_GLTF },\r\n            { label: \"Standard\", value: PBRBaseMaterial.LIGHTFALLOFF_STANDARD },\r\n        ],\r\n    })\r\n    public lightFalloff = 0;\r\n\r\n    /**\r\n     * Specifies that alpha test should be used\r\n     */\r\n    @editableInPropertyPage(\"Alpha Testing\", PropertyTypeForEdition.Boolean, \"OPACITY\")\r\n    public useAlphaTest: boolean = false;\r\n\r\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     */\r\n    @editableInPropertyPage(\"Alpha CutOff\", PropertyTypeForEdition.Float, \"OPACITY\", { min: 0, max: 1, notifiers: { update: true } })\r\n    public alphaTestCutoff: number = 0.5;\r\n\r\n    /**\r\n     * Specifies that alpha blending should be used\r\n     */\r\n    @editableInPropertyPage(\"Alpha blending\", PropertyTypeForEdition.Boolean, \"OPACITY\")\r\n    public useAlphaBlending: boolean = false;\r\n\r\n    /**\r\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good example of that. When the street lights reflects on it you can not see what is behind.\r\n     */\r\n    @editableInPropertyPage(\"Radiance over alpha\", PropertyTypeForEdition.Boolean, \"RENDERING\", { notifiers: { update: true } })\r\n    public useRadianceOverAlpha: boolean = true;\r\n\r\n    /**\r\n     * Specifies that the material will keeps the specular highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good example of that. When sun reflects on it you can not see what is behind.\r\n     */\r\n    @editableInPropertyPage(\"Specular over alpha\", PropertyTypeForEdition.Boolean, \"RENDERING\", { notifiers: { update: true } })\r\n    public useSpecularOverAlpha: boolean = true;\r\n\r\n    /**\r\n     * Enables specular anti aliasing in the PBR shader.\r\n     * It will both interacts on the Geometry for analytical and IBL lighting.\r\n     * It also prefilter the roughness map based on the bump values.\r\n     */\r\n    @editableInPropertyPage(\"Specular anti-aliasing\", PropertyTypeForEdition.Boolean, \"RENDERING\", { notifiers: { update: true } })\r\n    public enableSpecularAntiAliasing: boolean = false;\r\n\r\n    /**\r\n     * Enables realtime filtering on the texture.\r\n     */\r\n    @editableInPropertyPage(\"Realtime filtering\", PropertyTypeForEdition.Boolean, \"RENDERING\", { notifiers: { update: true } })\r\n    public realTimeFiltering: boolean = false;\r\n\r\n    /**\r\n     * Quality switch for realtime filtering\r\n     */\r\n    @editableInPropertyPage(\"Realtime filtering quality\", PropertyTypeForEdition.List, \"RENDERING\", {\r\n        notifiers: { update: true },\r\n        options: [\r\n            { label: \"Low\", value: Constants.TEXTURE_FILTERING_QUALITY_LOW },\r\n            { label: \"Medium\", value: Constants.TEXTURE_FILTERING_QUALITY_MEDIUM },\r\n            { label: \"High\", value: Constants.TEXTURE_FILTERING_QUALITY_HIGH },\r\n        ],\r\n    })\r\n    public realTimeFilteringQuality = Constants.TEXTURE_FILTERING_QUALITY_LOW;\r\n\r\n    /**\r\n     * Defines if the material uses energy conservation.\r\n     */\r\n    @editableInPropertyPage(\"Energy Conservation\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\r\n    public useEnergyConservation: boolean = true;\r\n\r\n    /**\r\n     * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\r\n     * too much the area relying on ambient texture to define their ambient occlusion.\r\n     */\r\n    @editableInPropertyPage(\"Radiance occlusion\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\r\n    public useRadianceOcclusion: boolean = true;\r\n\r\n    /**\r\n     * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\r\n     * makes the reflect vector face the model (under horizon).\r\n     */\r\n    @editableInPropertyPage(\"Horizon occlusion\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\r\n    public useHorizonOcclusion: boolean = true;\r\n\r\n    /**\r\n     * If set to true, no lighting calculations will be applied.\r\n     */\r\n    @editableInPropertyPage(\"Unlit\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\r\n    public unlit: boolean = false;\r\n\r\n    /**\r\n     * Force normal to face away from face.\r\n     */\r\n    @editableInPropertyPage(\"Force normal forward\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\r\n    public forceNormalForward: boolean = false;\r\n\r\n    /** Indicates that no code should be generated in the vertex shader. Can be useful in some specific circumstances (like when doing ray marching for eg) */\r\n    @editableInPropertyPage(\"Generate only fragment code\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\r\n        notifiers: { rebuild: true, update: true, onValidation: PBRMetallicRoughnessBlock._OnGenerateOnlyFragmentCodeChanged },\r\n    })\r\n    public generateOnlyFragmentCode = false;\r\n\r\n    /**\r\n     * Defines the material debug mode.\r\n     * It helps seeing only some components of the material while troubleshooting.\r\n     */\r\n    @editableInPropertyPage(\"Debug mode\", PropertyTypeForEdition.List, \"DEBUG\", {\r\n        notifiers: { update: true },\r\n        options: [\r\n            { label: \"None\", value: 0 },\r\n            // Geometry\r\n            { label: \"Normalized position\", value: 1 },\r\n            { label: \"Normals\", value: 2 },\r\n            { label: \"Tangents\", value: 3 },\r\n            { label: \"Bitangents\", value: 4 },\r\n            { label: \"Bump Normals\", value: 5 },\r\n            //{ label: \"UV1\", value: 6 },\r\n            //{ label: \"UV2\", value: 7 },\r\n            { label: \"ClearCoat Normals\", value: 8 },\r\n            { label: \"ClearCoat Tangents\", value: 9 },\r\n            { label: \"ClearCoat Bitangents\", value: 10 },\r\n            { label: \"Anisotropic Normals\", value: 11 },\r\n            { label: \"Anisotropic Tangents\", value: 12 },\r\n            { label: \"Anisotropic Bitangents\", value: 13 },\r\n            // Maps\r\n            //{ label: \"Emissive Map\", value: 23 },\r\n            //{ label: \"Light Map\", value: 24 },\r\n            // Env\r\n            { label: \"Env Refraction\", value: 40 },\r\n            { label: \"Env Reflection\", value: 41 },\r\n            { label: \"Env Clear Coat\", value: 42 },\r\n            // Lighting\r\n            { label: \"Direct Diffuse\", value: 50 },\r\n            { label: \"Direct Specular\", value: 51 },\r\n            { label: \"Direct Clear Coat\", value: 52 },\r\n            { label: \"Direct Sheen\", value: 53 },\r\n            { label: \"Env Irradiance\", value: 54 },\r\n            // Lighting Params\r\n            { label: \"Surface Albedo\", value: 60 },\r\n            { label: \"Reflectance 0\", value: 61 },\r\n            { label: \"Metallic\", value: 62 },\r\n            { label: \"Metallic F0\", value: 71 },\r\n            { label: \"Roughness\", value: 63 },\r\n            { label: \"AlphaG\", value: 64 },\r\n            { label: \"NdotV\", value: 65 },\r\n            { label: \"ClearCoat Color\", value: 66 },\r\n            { label: \"ClearCoat Roughness\", value: 67 },\r\n            { label: \"ClearCoat NdotV\", value: 68 },\r\n            { label: \"Transmittance\", value: 69 },\r\n            { label: \"Refraction Transmittance\", value: 70 },\r\n            // Misc\r\n            { label: \"SEO\", value: 80 },\r\n            { label: \"EHO\", value: 81 },\r\n            { label: \"Energy Factor\", value: 82 },\r\n            { label: \"Specular Reflectance\", value: 83 },\r\n            { label: \"Clear Coat Reflectance\", value: 84 },\r\n            { label: \"Sheen Reflectance\", value: 85 },\r\n            { label: \"Luminance Over Alpha\", value: 86 },\r\n            { label: \"Alpha\", value: 87 },\r\n        ],\r\n    })\r\n    public debugMode = 0;\r\n\r\n    /**\r\n     * Specify from where on screen the debug mode should start.\r\n     * The value goes from -1 (full screen) to 1 (not visible)\r\n     * It helps with side by side comparison against the final render\r\n     * This defaults to 0\r\n     */\r\n    @editableInPropertyPage(\"Split position\", PropertyTypeForEdition.Float, \"DEBUG\", { min: -1, max: 1, notifiers: { update: true } })\r\n    public debugLimit = 0;\r\n\r\n    /**\r\n     * As the default viewing range might not be enough (if the ambient is really small for instance)\r\n     * You can use the factor to better multiply the final value.\r\n     */\r\n    @editableInPropertyPage(\"Output factor\", PropertyTypeForEdition.Float, \"DEBUG\", { min: 0, max: 5, notifiers: { update: true } })\r\n    public debugFactor = 1;\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"vLightingIntensity\");\r\n\r\n        state._excludeVariableName(\"geometricNormalW\");\r\n        state._excludeVariableName(\"normalW\");\r\n        state._excludeVariableName(\"faceNormal\");\r\n\r\n        state._excludeVariableName(\"albedoOpacityOut\");\r\n        state._excludeVariableName(\"surfaceAlbedo\");\r\n        state._excludeVariableName(\"alpha\");\r\n\r\n        state._excludeVariableName(\"aoOut\");\r\n\r\n        state._excludeVariableName(\"baseColor\");\r\n        state._excludeVariableName(\"reflectivityOut\");\r\n        state._excludeVariableName(\"microSurface\");\r\n        state._excludeVariableName(\"roughness\");\r\n\r\n        state._excludeVariableName(\"NdotVUnclamped\");\r\n        state._excludeVariableName(\"NdotV\");\r\n        state._excludeVariableName(\"alphaG\");\r\n        state._excludeVariableName(\"AARoughnessFactors\");\r\n        state._excludeVariableName(\"environmentBrdf\");\r\n        state._excludeVariableName(\"ambientMonochrome\");\r\n        state._excludeVariableName(\"seo\");\r\n        state._excludeVariableName(\"eho\");\r\n\r\n        state._excludeVariableName(\"environmentRadiance\");\r\n        state._excludeVariableName(\"irradianceVector\");\r\n        state._excludeVariableName(\"environmentIrradiance\");\r\n\r\n        state._excludeVariableName(\"diffuseBase\");\r\n        state._excludeVariableName(\"specularBase\");\r\n        state._excludeVariableName(\"preInfo\");\r\n        state._excludeVariableName(\"info\");\r\n        state._excludeVariableName(\"shadow\");\r\n\r\n        state._excludeVariableName(\"finalDiffuse\");\r\n        state._excludeVariableName(\"finalAmbient\");\r\n        state._excludeVariableName(\"ambientOcclusionForDirectDiffuse\");\r\n\r\n        state._excludeVariableName(\"finalColor\");\r\n\r\n        state._excludeVariableName(\"vClipSpacePosition\");\r\n        state._excludeVariableName(\"vDebugMode\");\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"PBRMetallicRoughnessBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the world position input component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the world normal input component\r\n     */\r\n    public get worldNormal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the view matrix parameter\r\n     */\r\n    public get view(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the camera position input component\r\n     */\r\n    public get cameraPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the perturbed normal input component\r\n     */\r\n    public get perturbedNormal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the base color input component\r\n     */\r\n    public get baseColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the metallic input component\r\n     */\r\n    public get metallic(): NodeMaterialConnectionPoint {\r\n        return this._inputs[6];\r\n    }\r\n\r\n    /**\r\n     * Gets the roughness input component\r\n     */\r\n    public get roughness(): NodeMaterialConnectionPoint {\r\n        return this._inputs[7];\r\n    }\r\n\r\n    /**\r\n     * Gets the ambient occlusion input component\r\n     */\r\n    public get ambientOcc(): NodeMaterialConnectionPoint {\r\n        return this._inputs[8];\r\n    }\r\n\r\n    /**\r\n     * Gets the opacity input component\r\n     */\r\n    public get opacity(): NodeMaterialConnectionPoint {\r\n        return this._inputs[9];\r\n    }\r\n\r\n    /**\r\n     * Gets the index of refraction input component\r\n     */\r\n    public get indexOfRefraction(): NodeMaterialConnectionPoint {\r\n        return this._inputs[10];\r\n    }\r\n\r\n    /**\r\n     * Gets the ambient color input component\r\n     */\r\n    public get ambientColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[11];\r\n    }\r\n\r\n    /**\r\n     * Gets the reflection object parameters\r\n     */\r\n    public get reflection(): NodeMaterialConnectionPoint {\r\n        return this._inputs[12];\r\n    }\r\n\r\n    /**\r\n     * Gets the clear coat object parameters\r\n     */\r\n    public get clearcoat(): NodeMaterialConnectionPoint {\r\n        return this._inputs[13];\r\n    }\r\n\r\n    /**\r\n     * Gets the sheen object parameters\r\n     */\r\n    public get sheen(): NodeMaterialConnectionPoint {\r\n        return this._inputs[14];\r\n    }\r\n\r\n    /**\r\n     * Gets the sub surface object parameters\r\n     */\r\n    public get subsurface(): NodeMaterialConnectionPoint {\r\n        return this._inputs[15];\r\n    }\r\n\r\n    /**\r\n     * Gets the anisotropy object parameters\r\n     */\r\n    public get anisotropy(): NodeMaterialConnectionPoint {\r\n        return this._inputs[16];\r\n    }\r\n\r\n    /**\r\n     * Gets the iridescence object parameters\r\n     */\r\n    public get iridescence(): NodeMaterialConnectionPoint {\r\n        return this._inputs[17];\r\n    }\r\n\r\n    /**\r\n     * Gets the ambient output component\r\n     */\r\n    public get ambientClr(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the diffuse output component\r\n     */\r\n    public get diffuseDir(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the specular output component\r\n     */\r\n    public get specularDir(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the clear coat output component\r\n     */\r\n    public get clearcoatDir(): NodeMaterialConnectionPoint {\r\n        return this._outputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the sheen output component\r\n     */\r\n    public get sheenDir(): NodeMaterialConnectionPoint {\r\n        return this._outputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the indirect diffuse output component\r\n     */\r\n    public get diffuseInd(): NodeMaterialConnectionPoint {\r\n        return this._outputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the indirect specular output component\r\n     */\r\n    public get specularInd(): NodeMaterialConnectionPoint {\r\n        return this._outputs[6];\r\n    }\r\n\r\n    /**\r\n     * Gets the indirect clear coat output component\r\n     */\r\n    public get clearcoatInd(): NodeMaterialConnectionPoint {\r\n        return this._outputs[7];\r\n    }\r\n\r\n    /**\r\n     * Gets the indirect sheen output component\r\n     */\r\n    public get sheenInd(): NodeMaterialConnectionPoint {\r\n        return this._outputs[8];\r\n    }\r\n\r\n    /**\r\n     * Gets the refraction output component\r\n     */\r\n    public get refraction(): NodeMaterialConnectionPoint {\r\n        return this._outputs[9];\r\n    }\r\n\r\n    /**\r\n     * Gets the global lighting output component\r\n     */\r\n    public get lighting(): NodeMaterialConnectionPoint {\r\n        return this._outputs[10];\r\n    }\r\n\r\n    /**\r\n     * Gets the shadow output component\r\n     */\r\n    public get shadow(): NodeMaterialConnectionPoint {\r\n        return this._outputs[11];\r\n    }\r\n\r\n    /**\r\n     * Gets the alpha output component\r\n     */\r\n    public get alpha(): NodeMaterialConnectionPoint {\r\n        return this._outputs[12];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.cameraPosition.isConnected) {\r\n            let cameraPositionInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.CameraPosition);\r\n\r\n            if (!cameraPositionInput) {\r\n                cameraPositionInput = new InputBlock(\"cameraPosition\");\r\n                cameraPositionInput.setAsSystemValue(NodeMaterialSystemValues.CameraPosition);\r\n            }\r\n            cameraPositionInput.output.connectTo(this.cameraPosition);\r\n        }\r\n\r\n        if (!this.view.isConnected) {\r\n            let viewInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.View);\r\n\r\n            if (!viewInput) {\r\n                viewInput = new InputBlock(\"view\");\r\n                viewInput.setAsSystemValue(NodeMaterialSystemValues.View);\r\n            }\r\n            viewInput.output.connectTo(this.view);\r\n        }\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        // General\r\n        defines.setValue(\"PBR\", true);\r\n        defines.setValue(\"METALLICWORKFLOW\", true);\r\n        defines.setValue(\"DEBUGMODE\", this.debugMode, true);\r\n        defines.setValue(\"NORMALXYSCALE\", true);\r\n        defines.setValue(\"BUMP\", this.perturbedNormal.isConnected, true);\r\n        defines.setValue(\"LODBASEDMICROSFURACE\", this._scene.getEngine().getCaps().textureLOD);\r\n\r\n        // Albedo & Opacity\r\n        defines.setValue(\"ALBEDO\", false, true);\r\n        defines.setValue(\"OPACITY\", this.opacity.isConnected, true);\r\n\r\n        // Ambient occlusion\r\n        defines.setValue(\"AMBIENT\", true, true);\r\n        defines.setValue(\"AMBIENTINGRAYSCALE\", false, true);\r\n\r\n        // Reflectivity\r\n        defines.setValue(\"REFLECTIVITY\", false, true);\r\n        defines.setValue(\"AOSTOREINMETALMAPRED\", false, true);\r\n        defines.setValue(\"METALLNESSSTOREINMETALMAPBLUE\", false, true);\r\n        defines.setValue(\"ROUGHNESSSTOREINMETALMAPALPHA\", false, true);\r\n        defines.setValue(\"ROUGHNESSSTOREINMETALMAPGREEN\", false, true);\r\n\r\n        // Lighting & colors\r\n        if (this.lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_STANDARD) {\r\n            defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", false);\r\n            defines.setValue(\"USEGLTFLIGHTFALLOFF\", false);\r\n        } else if (this.lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF) {\r\n            defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", false);\r\n            defines.setValue(\"USEGLTFLIGHTFALLOFF\", true);\r\n        } else {\r\n            defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", true);\r\n            defines.setValue(\"USEGLTFLIGHTFALLOFF\", false);\r\n        }\r\n\r\n        // Transparency\r\n        const alphaTestCutOffString = this.alphaTestCutoff.toString();\r\n\r\n        defines.setValue(\"ALPHABLEND\", this.useAlphaBlending, true);\r\n        defines.setValue(\"ALPHAFROMALBEDO\", false, true);\r\n        defines.setValue(\"ALPHATEST\", this.useAlphaTest, true);\r\n        defines.setValue(\"ALPHATESTVALUE\", alphaTestCutOffString.indexOf(\".\") < 0 ? alphaTestCutOffString + \".\" : alphaTestCutOffString, true);\r\n        defines.setValue(\"OPACITYRGB\", false, true);\r\n\r\n        // Rendering\r\n        defines.setValue(\"RADIANCEOVERALPHA\", this.useRadianceOverAlpha, true);\r\n        defines.setValue(\"SPECULAROVERALPHA\", this.useSpecularOverAlpha, true);\r\n        defines.setValue(\"SPECULARAA\", this._scene.getEngine().getCaps().standardDerivatives && this.enableSpecularAntiAliasing, true);\r\n        defines.setValue(\"REALTIME_FILTERING\", this.realTimeFiltering, true);\r\n\r\n        const scene = mesh.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        if (engine._features.needTypeSuffixInShaderConstants) {\r\n            defines.setValue(\"NUM_SAMPLES\", this.realTimeFilteringQuality + \"u\", true);\r\n        } else {\r\n            defines.setValue(\"NUM_SAMPLES\", \"\" + this.realTimeFilteringQuality, true);\r\n        }\r\n\r\n        // Advanced\r\n        defines.setValue(\"BRDF_V_HEIGHT_CORRELATED\", true);\r\n        defines.setValue(\"MS_BRDF_ENERGY_CONSERVATION\", this.useEnergyConservation, true);\r\n        defines.setValue(\"RADIANCEOCCLUSION\", this.useRadianceOcclusion, true);\r\n        defines.setValue(\"HORIZONOCCLUSION\", this.useHorizonOcclusion, true);\r\n        defines.setValue(\"UNLIT\", this.unlit, true);\r\n        defines.setValue(\"FORCENORMALFORWARD\", this.forceNormalForward, true);\r\n\r\n        if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n            defines.setValue(\"ENVIRONMENTBRDF\", true);\r\n            defines.setValue(\"ENVIRONMENTBRDF_RGBD\", this._environmentBRDFTexture.isRGBD, true);\r\n        } else {\r\n            defines.setValue(\"ENVIRONMENTBRDF\", false);\r\n            defines.setValue(\"ENVIRONMENTBRDF_RGBD\", false);\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\r\n            nodeMaterial.imageProcessingConfiguration.prepareDefines(defines);\r\n        }\r\n\r\n        if (!defines._areLightsDirty) {\r\n            return;\r\n        }\r\n\r\n        if (!this.light) {\r\n            // Lights\r\n            MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, nodeMaterial.maxSimultaneousLights);\r\n            defines._needNormals = true;\r\n\r\n            // Multiview\r\n            MaterialHelper.PrepareDefinesForMultiview(scene, defines);\r\n        } else {\r\n            const state = {\r\n                needNormals: false,\r\n                needRebuild: false,\r\n                lightmapMode: false,\r\n                shadowEnabled: false,\r\n                specularEnabled: false,\r\n            };\r\n\r\n            MaterialHelper.PrepareDefinesForLight(scene, mesh, this.light, this._lightId, defines, true, state);\r\n\r\n            if (state.needRebuild) {\r\n                defines.rebuild();\r\n            }\r\n        }\r\n    }\r\n\r\n    public updateUniformsAndSamples(state: NodeMaterialBuildState, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines, uniformBuffers: string[]) {\r\n        for (let lightIndex = 0; lightIndex < nodeMaterial.maxSimultaneousLights; lightIndex++) {\r\n            if (!defines[\"LIGHT\" + lightIndex]) {\r\n                break;\r\n            }\r\n            const onlyUpdateBuffersList = state.uniforms.indexOf(\"vLightData\" + lightIndex) >= 0;\r\n            MaterialHelper.PrepareUniformsAndSamplersForLight(\r\n                lightIndex,\r\n                state.uniforms,\r\n                state.samplers,\r\n                defines[\"PROJECTEDLIGHTTEXTURE\" + lightIndex],\r\n                uniformBuffers,\r\n                onlyUpdateBuffersList\r\n            );\r\n        }\r\n    }\r\n\r\n    public isReady(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        if (this._environmentBRDFTexture && !this._environmentBRDFTexture.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\r\n            if (!nodeMaterial.imageProcessingConfiguration.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        const scene = mesh.getScene();\r\n\r\n        if (!this.light) {\r\n            MaterialHelper.BindLights(scene, mesh, effect, true, nodeMaterial.maxSimultaneousLights);\r\n        } else {\r\n            MaterialHelper.BindLight(this.light, this._lightId, scene, effect, true);\r\n        }\r\n\r\n        effect.setTexture(this._environmentBrdfSamplerName, this._environmentBRDFTexture);\r\n\r\n        effect.setFloat2(\"vDebugMode\", this.debugLimit, this.debugFactor);\r\n\r\n        const ambientScene = this._scene.ambientColor;\r\n\r\n        if (ambientScene) {\r\n            effect.setColor3(\"ambientFromScene\", ambientScene);\r\n        }\r\n\r\n        const invertNormal = scene.useRightHandedSystem === (scene._mirroredCameraPosition != null);\r\n\r\n        effect.setFloat(this._invertNormalName, invertNormal ? -1 : 1);\r\n\r\n        effect.setFloat4(\"vLightingIntensity\", this.directIntensity, 1, this.environmentIntensity * this._scene.environmentIntensity, this.specularIntensity);\r\n\r\n        // reflectivity bindings\r\n        const outsideIOR = 1; // consider air as clear coat and other layers would remap in the shader.\r\n        const ior = this.indexOfRefraction.connectInputBlock?.value ?? 1.5;\r\n\r\n        // We are here deriving our default reflectance from a common value for none metallic surface.\r\n        // Based of the schlick fresnel approximation model\r\n        // for dielectrics.\r\n        const f0 = Math.pow((ior - outsideIOR) / (ior + outsideIOR), 2);\r\n\r\n        // Tweak the default F0 and F90 based on our given setup\r\n        this._metallicReflectanceColor.scaleToRef(f0 * this._metallicF0Factor, TmpColors.Color3[0]);\r\n        const metallicF90 = this._metallicF0Factor;\r\n\r\n        effect.setColor4(this._vMetallicReflectanceFactorsName, TmpColors.Color3[0], metallicF90);\r\n\r\n        if (nodeMaterial.imageProcessingConfiguration) {\r\n            nodeMaterial.imageProcessingConfiguration.bind(effect);\r\n        }\r\n    }\r\n\r\n    private _injectVertexCode(state: NodeMaterialBuildState) {\r\n        const worldPos = this.worldPosition;\r\n        const comments = `//${this.name}`;\r\n\r\n        // Declaration\r\n        if (!this.light) {\r\n            // Emit for all lights\r\n            state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightVxUboDeclaration\" : \"lightVxFragmentDeclaration\", comments, {\r\n                repeatKey: \"maxSimultaneousLights\",\r\n            });\r\n            this._lightId = 0;\r\n\r\n            state.sharedData.dynamicUniformBlocks.push(this);\r\n        } else {\r\n            this._lightId = (state.counters[\"lightCounter\"] !== undefined ? state.counters[\"lightCounter\"] : -1) + 1;\r\n            state.counters[\"lightCounter\"] = this._lightId;\r\n\r\n            state._emitFunctionFromInclude(\r\n                state.supportUniformBuffers ? \"lightVxUboDeclaration\" : \"lightVxFragmentDeclaration\",\r\n                comments,\r\n                {\r\n                    replaceStrings: [{ search: /{X}/g, replace: this._lightId.toString() }],\r\n                },\r\n                this._lightId.toString()\r\n            );\r\n        }\r\n\r\n        // Inject code in vertex\r\n        const worldPosVaryingName = \"v_\" + worldPos.associatedVariableName;\r\n        if (state._emitVaryingFromString(worldPosVaryingName, \"vec4\")) {\r\n            state.compilationString += `${worldPosVaryingName} = ${worldPos.associatedVariableName};\\r\\n`;\r\n        }\r\n\r\n        const reflectionBlock = this.reflection.isConnected ? (this.reflection.connectedPoint?.ownerBlock as ReflectionBlock) : null;\r\n\r\n        if (reflectionBlock) {\r\n            reflectionBlock.viewConnectionPoint = this.view;\r\n        }\r\n\r\n        state.compilationString += reflectionBlock?.handleVertexSide(state) ?? \"\";\r\n\r\n        if (state._emitVaryingFromString(\"vClipSpacePosition\", \"vec4\", \"defined(IGNORE) || DEBUGMODE > 0\")) {\r\n            state._injectAtEnd += `#if DEBUGMODE > 0\\r\\n`;\r\n            state._injectAtEnd += `vClipSpacePosition = gl_Position;\\r\\n`;\r\n            state._injectAtEnd += `#endif\\r\\n`;\r\n        }\r\n\r\n        if (this.light) {\r\n            state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\r\n                replaceStrings: [\r\n                    { search: /{X}/g, replace: this._lightId.toString() },\r\n                    { search: /worldPos/g, replace: worldPos.associatedVariableName },\r\n                ],\r\n            });\r\n        } else {\r\n            state.compilationString += `vec4 worldPos = ${worldPos.associatedVariableName};\\r\\n`;\r\n            if (this.view.isConnected) {\r\n                state.compilationString += `mat4 view = ${this.view.associatedVariableName};\\r\\n`;\r\n            }\r\n            state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\r\n                repeatKey: \"maxSimultaneousLights\",\r\n            });\r\n        }\r\n    }\r\n\r\n    private _getAlbedoOpacityCode(): string {\r\n        let code = `albedoOpacityOutParams albedoOpacityOut;\\r\\n`;\r\n\r\n        const albedoColor = this.baseColor.isConnected ? this.baseColor.associatedVariableName : \"vec3(1.)\";\r\n        const opacity = this.opacity.isConnected ? this.opacity.associatedVariableName : \"1.\";\r\n\r\n        code += `albedoOpacityBlock(\r\n                vec4(${albedoColor}, 1.),\r\n            #ifdef ALBEDO\r\n                vec4(1.),\r\n                vec2(1., 1.),\r\n            #endif\r\n            #ifdef OPACITY\r\n                vec4(${opacity}),\r\n                vec2(1., 1.),\r\n            #endif\r\n                albedoOpacityOut\r\n            );\r\n\r\n            vec3 surfaceAlbedo = albedoOpacityOut.surfaceAlbedo;\r\n            float alpha = albedoOpacityOut.alpha;\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    private _getAmbientOcclusionCode(): string {\r\n        let code = `ambientOcclusionOutParams aoOut;\\r\\n`;\r\n\r\n        const ao = this.ambientOcc.isConnected ? this.ambientOcc.associatedVariableName : \"1.\";\r\n\r\n        code += `ambientOcclusionBlock(\r\n            #ifdef AMBIENT\r\n                vec3(${ao}),\r\n                vec4(0., 1.0, 1.0, 0.),\r\n            #endif\r\n                aoOut\r\n            );\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    private _getReflectivityCode(state: NodeMaterialBuildState): string {\r\n        let code = `reflectivityOutParams reflectivityOut;\\r\\n`;\r\n\r\n        const aoIntensity = \"1.\";\r\n\r\n        this._vMetallicReflectanceFactorsName = state._getFreeVariableName(\"vMetallicReflectanceFactors\");\r\n        state._emitUniformFromString(this._vMetallicReflectanceFactorsName, \"vec4\");\r\n\r\n        code += `vec3 baseColor = surfaceAlbedo;\r\n\r\n            reflectivityBlock(\r\n                vec4(${this.metallic.associatedVariableName}, ${this.roughness.associatedVariableName}, 0., 0.),\r\n            #ifdef METALLICWORKFLOW\r\n                surfaceAlbedo,\r\n                ${this._vMetallicReflectanceFactorsName},\r\n            #endif\r\n            #ifdef REFLECTIVITY\r\n                vec3(0., 0., ${aoIntensity}),\r\n                vec4(1.),\r\n            #endif\r\n            #if defined(METALLICWORKFLOW) && defined(REFLECTIVITY)  && defined(AOSTOREINMETALMAPRED)\r\n                aoOut.ambientOcclusionColor,\r\n            #endif\r\n            #ifdef MICROSURFACEMAP\r\n                microSurfaceTexel, <== not handled!\r\n            #endif\r\n                reflectivityOut\r\n            );\r\n\r\n            float microSurface = reflectivityOut.microSurface;\r\n            float roughness = reflectivityOut.roughness;\r\n\r\n            #ifdef METALLICWORKFLOW\r\n                surfaceAlbedo = reflectivityOut.surfaceAlbedo;\r\n            #endif\r\n            #if defined(METALLICWORKFLOW) && defined(REFLECTIVITY) && defined(AOSTOREINMETALMAPRED)\r\n                aoOut.ambientOcclusionColor = reflectivityOut.ambientOcclusionColor;\r\n            #endif\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        this._scene = state.sharedData.scene;\r\n\r\n        if (!this._environmentBRDFTexture) {\r\n            this._environmentBRDFTexture = GetEnvironmentBRDFTexture(this._scene);\r\n        }\r\n\r\n        const reflectionBlock = this.reflection.isConnected ? (this.reflection.connectedPoint?.ownerBlock as ReflectionBlock) : null;\r\n\r\n        if (reflectionBlock) {\r\n            // Need those variables to be setup when calling _injectVertexCode\r\n            reflectionBlock.worldPositionConnectionPoint = this.worldPosition;\r\n            reflectionBlock.cameraPositionConnectionPoint = this.cameraPosition;\r\n            reflectionBlock.worldNormalConnectionPoint = this.worldNormal;\r\n            reflectionBlock.viewConnectionPoint = this.view;\r\n        }\r\n\r\n        if (state.target !== NodeMaterialBlockTargets.Fragment) {\r\n            // Vertex\r\n            this._injectVertexCode(state);\r\n\r\n            return this;\r\n        }\r\n\r\n        // Fragment\r\n        state.sharedData.forcedBindableBlocks.push(this);\r\n        state.sharedData.blocksWithDefines.push(this);\r\n        state.sharedData.blockingBlocks.push(this);\r\n        if (this.generateOnlyFragmentCode) {\r\n            state.sharedData.dynamicUniformBlocks.push(this);\r\n        }\r\n\r\n        const comments = `//${this.name}`;\r\n        const normalShading = this.perturbedNormal;\r\n\r\n        let worldPosVarName = this.worldPosition.associatedVariableName;\r\n        if (this.generateOnlyFragmentCode) {\r\n            worldPosVarName = state._getFreeVariableName(\"globalWorldPos\");\r\n            state._emitFunction(\"pbr_globalworldpos\", `vec3 ${worldPosVarName};\\r\\n`, comments);\r\n            state.compilationString += `${worldPosVarName} = ${this.worldPosition.associatedVariableName}.xyz;\\r\\n`;\r\n\r\n            state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\r\n                repeatKey: \"maxSimultaneousLights\",\r\n                substitutionVars: this.generateOnlyFragmentCode ? `worldPos,${this.worldPosition.associatedVariableName}` : undefined,\r\n            });\r\n\r\n            state.compilationString += `#if DEBUGMODE > 0\\r\\n`;\r\n            state.compilationString += `vec4 vClipSpacePosition = vec4((vec2(gl_FragCoord.xy) / vec2(1.0)) * 2.0 - 1.0, 0.0, 1.0);\\r\\n`;\r\n            state.compilationString += `#endif\\r\\n`;\r\n        } else {\r\n            worldPosVarName = \"v_\" + worldPosVarName;\r\n        }\r\n\r\n        this._environmentBrdfSamplerName = state._getFreeVariableName(\"environmentBrdfSampler\");\r\n\r\n        state._emit2DSampler(this._environmentBrdfSamplerName);\r\n\r\n        state.sharedData.hints.needAlphaBlending = state.sharedData.hints.needAlphaBlending || this.useAlphaBlending;\r\n        state.sharedData.hints.needAlphaTesting = state.sharedData.hints.needAlphaTesting || this.useAlphaTest;\r\n\r\n        state._emitExtension(\"lod\", \"#extension GL_EXT_shader_texture_lod : enable\", \"defined(LODBASEDMICROSFURACE)\");\r\n        state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\r\n\r\n        state._emitUniformFromString(\"vDebugMode\", \"vec2\", \"defined(IGNORE) || DEBUGMODE > 0\");\r\n        state._emitUniformFromString(\"ambientFromScene\", \"vec3\");\r\n\r\n        // Image processing uniforms\r\n        state.uniforms.push(\"exposureLinear\");\r\n        state.uniforms.push(\"contrast\");\r\n        state.uniforms.push(\"vInverseScreenSize\");\r\n        state.uniforms.push(\"vignetteSettings1\");\r\n        state.uniforms.push(\"vignetteSettings2\");\r\n        state.uniforms.push(\"vCameraColorCurveNegative\");\r\n        state.uniforms.push(\"vCameraColorCurveNeutral\");\r\n        state.uniforms.push(\"vCameraColorCurvePositive\");\r\n        state.uniforms.push(\"txColorTransform\");\r\n        state.uniforms.push(\"colorTransformSettings\");\r\n        state.uniforms.push(\"ditherIntensity\");\r\n\r\n        //\r\n        // Includes\r\n        //\r\n        if (!this.light) {\r\n            // Emit for all lights\r\n            state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\r\n                repeatKey: \"maxSimultaneousLights\",\r\n                substitutionVars: this.generateOnlyFragmentCode ? \"varying,\" : undefined,\r\n            });\r\n        } else {\r\n            state._emitFunctionFromInclude(\r\n                state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\",\r\n                comments,\r\n                {\r\n                    replaceStrings: [{ search: /{X}/g, replace: this._lightId.toString() }],\r\n                },\r\n                this._lightId.toString()\r\n            );\r\n        }\r\n\r\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\r\n        state._emitFunctionFromInclude(\"importanceSampling\", comments);\r\n        state._emitFunctionFromInclude(\"pbrHelperFunctions\", comments);\r\n        state._emitFunctionFromInclude(\"imageProcessingDeclaration\", comments);\r\n        state._emitFunctionFromInclude(\"imageProcessingFunctions\", comments);\r\n\r\n        state._emitFunctionFromInclude(\"shadowsFragmentFunctions\", comments, {\r\n            replaceStrings: [{ search: /vPositionW/g, replace: worldPosVarName + \".xyz\" }],\r\n        });\r\n\r\n        state._emitFunctionFromInclude(\"pbrDirectLightingSetupFunctions\", comments, {\r\n            replaceStrings: [{ search: /vPositionW/g, replace: worldPosVarName + \".xyz\" }],\r\n        });\r\n\r\n        state._emitFunctionFromInclude(\"pbrDirectLightingFalloffFunctions\", comments);\r\n        state._emitFunctionFromInclude(\"pbrBRDFFunctions\", comments, {\r\n            replaceStrings: [{ search: /REFLECTIONMAP_SKYBOX/g, replace: reflectionBlock?._defineSkyboxName ?? \"REFLECTIONMAP_SKYBOX\" }],\r\n        });\r\n        state._emitFunctionFromInclude(\"hdrFilteringFunctions\", comments);\r\n\r\n        state._emitFunctionFromInclude(\"pbrDirectLightingFunctions\", comments, {\r\n            replaceStrings: [{ search: /vPositionW/g, replace: worldPosVarName + \".xyz\" }],\r\n        });\r\n\r\n        state._emitFunctionFromInclude(\"pbrIBLFunctions\", comments);\r\n\r\n        state._emitFunctionFromInclude(\"pbrBlockAlbedoOpacity\", comments);\r\n        state._emitFunctionFromInclude(\"pbrBlockReflectivity\", comments);\r\n        state._emitFunctionFromInclude(\"pbrBlockAmbientOcclusion\", comments);\r\n        state._emitFunctionFromInclude(\"pbrBlockAlphaFresnel\", comments);\r\n        state._emitFunctionFromInclude(\"pbrBlockAnisotropic\", comments);\r\n\r\n        //\r\n        // code\r\n        //\r\n\r\n        state._emitUniformFromString(\"vLightingIntensity\", \"vec4\");\r\n\r\n        if (reflectionBlock?.generateOnlyFragmentCode) {\r\n            state.compilationString += reflectionBlock.handleVertexSide(state);\r\n        }\r\n\r\n        // _____________________________ Geometry Information ____________________________\r\n        this._vNormalWName = state._getFreeVariableName(\"vNormalW\");\r\n\r\n        state.compilationString += `vec4 ${this._vNormalWName} = normalize(${this.worldNormal.associatedVariableName});\\r\\n`;\r\n\r\n        if (state._registerTempVariable(\"viewDirectionW\")) {\r\n            state.compilationString += `vec3 viewDirectionW = normalize(${this.cameraPosition.associatedVariableName} - ${worldPosVarName}.xyz);\\r\\n`;\r\n        }\r\n\r\n        state.compilationString += `vec3 geometricNormalW = ${this._vNormalWName}.xyz;\\r\\n`;\r\n\r\n        state.compilationString += `vec3 normalW = ${normalShading.isConnected ? \"normalize(\" + normalShading.associatedVariableName + \".xyz)\" : \"geometricNormalW\"};\\r\\n`;\r\n\r\n        this._invertNormalName = state._getFreeVariableName(\"invertNormal\");\r\n\r\n        state._emitUniformFromString(this._invertNormalName, \"float\");\r\n\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockNormalFinal\", comments, {\r\n            replaceStrings: [\r\n                { search: /vPositionW/g, replace: worldPosVarName + \".xyz\" },\r\n                { search: /vEyePosition.w/g, replace: this._invertNormalName },\r\n            ],\r\n        });\r\n\r\n        // _____________________________ Albedo & Opacity ______________________________\r\n        state.compilationString += this._getAlbedoOpacityCode();\r\n\r\n        state.compilationString += state._emitCodeFromInclude(\"depthPrePass\", comments);\r\n\r\n        // _____________________________ AO  _______________________________\r\n        state.compilationString += this._getAmbientOcclusionCode();\r\n\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockLightmapInit\", comments);\r\n\r\n        // _____________________________ UNLIT  _______________________________\r\n        state.compilationString += `#ifdef UNLIT\r\n                vec3 diffuseBase = vec3(1., 1., 1.);\r\n            #else\\r\\n`;\r\n\r\n        // _____________________________ Reflectivity _______________________________\r\n        state.compilationString += this._getReflectivityCode(state);\r\n\r\n        // _____________________________ Geometry info _________________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockGeometryInfo\", comments, {\r\n            replaceStrings: [\r\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: reflectionBlock?._defineSkyboxName ?? \"REFLECTIONMAP_SKYBOX\" },\r\n                { search: /REFLECTIONMAP_3D/g, replace: reflectionBlock?._define3DName ?? \"REFLECTIONMAP_3D\" },\r\n            ],\r\n        });\r\n\r\n        // _____________________________ Anisotropy _______________________________________\r\n        const anisotropyBlock = this.anisotropy.isConnected ? (this.anisotropy.connectedPoint?.ownerBlock as AnisotropyBlock) : null;\r\n\r\n        if (anisotropyBlock) {\r\n            anisotropyBlock.worldPositionConnectionPoint = this.worldPosition;\r\n            anisotropyBlock.worldNormalConnectionPoint = this.worldNormal;\r\n\r\n            state.compilationString += anisotropyBlock.getCode(state, !this.perturbedNormal.isConnected);\r\n        }\r\n\r\n        // _____________________________ Reflection _______________________________________\r\n        if (reflectionBlock && reflectionBlock.hasTexture) {\r\n            state.compilationString += reflectionBlock.getCode(state, anisotropyBlock ? \"anisotropicOut.anisotropicNormal\" : \"normalW\");\r\n        }\r\n\r\n        state._emitFunctionFromInclude(\"pbrBlockReflection\", comments, {\r\n            replaceStrings: [\r\n                { search: /computeReflectionCoords/g, replace: \"computeReflectionCoordsPBR\" },\r\n                { search: /REFLECTIONMAP_3D/g, replace: reflectionBlock?._define3DName ?? \"REFLECTIONMAP_3D\" },\r\n                { search: /REFLECTIONMAP_OPPOSITEZ/g, replace: reflectionBlock?._defineOppositeZ ?? \"REFLECTIONMAP_OPPOSITEZ\" },\r\n                { search: /REFLECTIONMAP_PROJECTION/g, replace: reflectionBlock?._defineProjectionName ?? \"REFLECTIONMAP_PROJECTION\" },\r\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: reflectionBlock?._defineSkyboxName ?? \"REFLECTIONMAP_SKYBOX\" },\r\n                { search: /LODINREFLECTIONALPHA/g, replace: reflectionBlock?._defineLODReflectionAlpha ?? \"LODINREFLECTIONALPHA\" },\r\n                { search: /LINEARSPECULARREFLECTION/g, replace: reflectionBlock?._defineLinearSpecularReflection ?? \"LINEARSPECULARREFLECTION\" },\r\n                { search: /vReflectionFilteringInfo/g, replace: reflectionBlock?._vReflectionFilteringInfoName ?? \"vReflectionFilteringInfo\" },\r\n            ],\r\n        });\r\n\r\n        // ___________________ Compute Reflectance aka R0 F0 info _________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockReflectance0\", comments, {\r\n            replaceStrings: [{ search: /metallicReflectanceFactors/g, replace: this._vMetallicReflectanceFactorsName }],\r\n        });\r\n        // ________________________________ Sheen ______________________________\r\n        const sheenBlock = this.sheen.isConnected ? (this.sheen.connectedPoint?.ownerBlock as SheenBlock) : null;\r\n\r\n        if (sheenBlock) {\r\n            state.compilationString += sheenBlock.getCode(reflectionBlock);\r\n        }\r\n\r\n        state._emitFunctionFromInclude(\"pbrBlockSheen\", comments, {\r\n            replaceStrings: [\r\n                { search: /REFLECTIONMAP_3D/g, replace: reflectionBlock?._define3DName ?? \"REFLECTIONMAP_3D\" },\r\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: reflectionBlock?._defineSkyboxName ?? \"REFLECTIONMAP_SKYBOX\" },\r\n                { search: /LODINREFLECTIONALPHA/g, replace: reflectionBlock?._defineLODReflectionAlpha ?? \"LODINREFLECTIONALPHA\" },\r\n                { search: /LINEARSPECULARREFLECTION/g, replace: reflectionBlock?._defineLinearSpecularReflection ?? \"LINEARSPECULARREFLECTION\" },\r\n            ],\r\n        });\r\n\r\n        // _____________________________ Iridescence _______________________________\r\n        const iridescenceBlock = this.iridescence.isConnected ? (this.iridescence.connectedPoint?.ownerBlock as IridescenceBlock) : null;\r\n        state.compilationString += IridescenceBlock.GetCode(iridescenceBlock);\r\n\r\n        state._emitFunctionFromInclude(\"pbrBlockIridescence\", comments, {\r\n            replaceStrings: [],\r\n        });\r\n\r\n        // _____________________________ Clear Coat ____________________________\r\n        const clearcoatBlock = this.clearcoat.isConnected ? (this.clearcoat.connectedPoint?.ownerBlock as ClearCoatBlock) : null;\r\n        const generateTBNSpace = !this.perturbedNormal.isConnected && !this.anisotropy.isConnected;\r\n        const isTangentConnectedToPerturbNormal =\r\n            this.perturbedNormal.isConnected && (this.perturbedNormal.connectedPoint?.ownerBlock as PerturbNormalBlock).worldTangent?.isConnected;\r\n        const isTangentConnectedToAnisotropy = this.anisotropy.isConnected && (this.anisotropy.connectedPoint?.ownerBlock as AnisotropyBlock).worldTangent.isConnected;\r\n        let vTBNAvailable = isTangentConnectedToPerturbNormal || (!this.perturbedNormal.isConnected && isTangentConnectedToAnisotropy);\r\n\r\n        state.compilationString += ClearCoatBlock.GetCode(\r\n            state,\r\n            clearcoatBlock,\r\n            reflectionBlock,\r\n            worldPosVarName,\r\n            generateTBNSpace,\r\n            vTBNAvailable,\r\n            this.worldNormal.associatedVariableName\r\n        );\r\n\r\n        if (generateTBNSpace) {\r\n            vTBNAvailable = clearcoatBlock?.worldTangent.isConnected ?? false;\r\n        }\r\n\r\n        state._emitFunctionFromInclude(\"pbrBlockClearcoat\", comments, {\r\n            replaceStrings: [\r\n                { search: /computeReflectionCoords/g, replace: \"computeReflectionCoordsPBR\" },\r\n                { search: /REFLECTIONMAP_3D/g, replace: reflectionBlock?._define3DName ?? \"REFLECTIONMAP_3D\" },\r\n                { search: /REFLECTIONMAP_OPPOSITEZ/g, replace: reflectionBlock?._defineOppositeZ ?? \"REFLECTIONMAP_OPPOSITEZ\" },\r\n                { search: /REFLECTIONMAP_PROJECTION/g, replace: reflectionBlock?._defineProjectionName ?? \"REFLECTIONMAP_PROJECTION\" },\r\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: reflectionBlock?._defineSkyboxName ?? \"REFLECTIONMAP_SKYBOX\" },\r\n                { search: /LODINREFLECTIONALPHA/g, replace: reflectionBlock?._defineLODReflectionAlpha ?? \"LODINREFLECTIONALPHA\" },\r\n                { search: /LINEARSPECULARREFLECTION/g, replace: reflectionBlock?._defineLinearSpecularReflection ?? \"LINEARSPECULARREFLECTION\" },\r\n                { search: /defined\\(TANGENT\\)/g, replace: vTBNAvailable ? \"defined(TANGENT)\" : \"defined(IGNORE)\" },\r\n            ],\r\n        });\r\n\r\n        // _________________________ Specular Environment Reflectance __________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockReflectance\", comments, {\r\n            replaceStrings: [\r\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: reflectionBlock?._defineSkyboxName ?? \"REFLECTIONMAP_SKYBOX\" },\r\n                { search: /REFLECTIONMAP_3D/g, replace: reflectionBlock?._define3DName ?? \"REFLECTIONMAP_3D\" },\r\n            ],\r\n        });\r\n\r\n        // ___________________________________ SubSurface ______________________________________\r\n        const subsurfaceBlock = this.subsurface.isConnected ? (this.subsurface.connectedPoint?.ownerBlock as SubSurfaceBlock) : null;\r\n        const refractionBlock = this.subsurface.isConnected\r\n            ? ((this.subsurface.connectedPoint?.ownerBlock as SubSurfaceBlock).refraction.connectedPoint?.ownerBlock as RefractionBlock)\r\n            : null;\r\n\r\n        if (refractionBlock) {\r\n            refractionBlock.viewConnectionPoint = this.view;\r\n            refractionBlock.indexOfRefractionConnectionPoint = this.indexOfRefraction;\r\n        }\r\n\r\n        state.compilationString += SubSurfaceBlock.GetCode(state, subsurfaceBlock, reflectionBlock, worldPosVarName);\r\n\r\n        state._emitFunctionFromInclude(\"pbrBlockSubSurface\", comments, {\r\n            replaceStrings: [\r\n                { search: /REFLECTIONMAP_3D/g, replace: reflectionBlock?._define3DName ?? \"REFLECTIONMAP_3D\" },\r\n                { search: /REFLECTIONMAP_OPPOSITEZ/g, replace: reflectionBlock?._defineOppositeZ ?? \"REFLECTIONMAP_OPPOSITEZ\" },\r\n                { search: /REFLECTIONMAP_PROJECTION/g, replace: reflectionBlock?._defineProjectionName ?? \"REFLECTIONMAP_PROJECTION\" },\r\n                { search: /SS_REFRACTIONMAP_3D/g, replace: refractionBlock?._define3DName ?? \"SS_REFRACTIONMAP_3D\" },\r\n                { search: /SS_LODINREFRACTIONALPHA/g, replace: refractionBlock?._defineLODRefractionAlpha ?? \"SS_LODINREFRACTIONALPHA\" },\r\n                { search: /SS_LINEARSPECULARREFRACTION/g, replace: refractionBlock?._defineLinearSpecularRefraction ?? \"SS_LINEARSPECULARREFRACTION\" },\r\n                { search: /SS_REFRACTIONMAP_OPPOSITEZ/g, replace: refractionBlock?._defineOppositeZ ?? \"SS_REFRACTIONMAP_OPPOSITEZ\" },\r\n            ],\r\n        });\r\n\r\n        // _____________________________ Direct Lighting Info __________________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockDirectLighting\", comments);\r\n\r\n        if (this.light) {\r\n            state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\r\n                replaceStrings: [{ search: /{X}/g, replace: this._lightId.toString() }],\r\n            });\r\n        } else {\r\n            state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\r\n                repeatKey: \"maxSimultaneousLights\",\r\n            });\r\n        }\r\n\r\n        // _____________________________ Compute Final Lit Components ________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalLitComponents\", comments);\r\n\r\n        // _____________________________ UNLIT (2) ________________________\r\n        state.compilationString += `#endif\\r\\n`; // UNLIT\r\n\r\n        // _____________________________ Compute Final Unlit Components ________________________\r\n        const aoColor = this.ambientColor.isConnected ? this.ambientColor.associatedVariableName : \"vec3(0., 0., 0.)\";\r\n\r\n        let aoDirectLightIntensity = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS.toString();\r\n\r\n        if (aoDirectLightIntensity.indexOf(\".\") === -1) {\r\n            aoDirectLightIntensity += \".\";\r\n        }\r\n\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalUnlitComponents\", comments, {\r\n            replaceStrings: [\r\n                { search: /vec3 finalEmissive[\\s\\S]*?finalEmissive\\*=vLightingIntensity\\.y;/g, replace: \"\" },\r\n                { search: /vAmbientColor/g, replace: aoColor + \" * ambientFromScene\" },\r\n                { search: /vAmbientInfos\\.w/g, replace: aoDirectLightIntensity },\r\n            ],\r\n        });\r\n\r\n        // _____________________________ Output Final Color Composition ________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalColorComposition\", comments, {\r\n            replaceStrings: [{ search: /finalEmissive/g, replace: \"vec3(0.)\" }],\r\n        });\r\n\r\n        // _____________________________ Apply image processing ________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockImageProcessing\", comments, {\r\n            replaceStrings: [{ search: /visibility/g, replace: \"1.\" }],\r\n        });\r\n\r\n        // _____________________________ Generate debug code ________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrDebug\", comments, {\r\n            replaceStrings: [\r\n                { search: /vNormalW/g, replace: this._vNormalWName },\r\n                { search: /vPositionW/g, replace: worldPosVarName },\r\n                { search: /albedoTexture\\.rgb;/g, replace: \"vec3(1.);\\r\\ngl_FragColor.rgb = toGammaSpace(gl_FragColor.rgb);\\r\\n\" },\r\n            ],\r\n        });\r\n\r\n        // _____________________________ Generate end points ________________________\r\n        for (const output of this._outputs) {\r\n            if (output.hasEndpoints) {\r\n                const remap = mapOutputToVariable[output.name];\r\n                if (remap) {\r\n                    const [varName, conditions] = remap;\r\n                    if (conditions) {\r\n                        state.compilationString += `#if ${conditions}\\r\\n`;\r\n                    }\r\n                    state.compilationString += `${this._declareOutput(output, state)} = ${varName};\\r\\n`;\r\n                    if (conditions) {\r\n                        state.compilationString += `#else\\r\\n`;\r\n                        state.compilationString += `${this._declareOutput(output, state)} = vec3(0.);\\r\\n`;\r\n                        state.compilationString += `#endif\\r\\n`;\r\n                    }\r\n                } else {\r\n                    console.error(`There's no remapping for the ${output.name} end point! No code generated`);\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode();\r\n\r\n        codeString += `${this._codeVariableName}.lightFalloff = ${this.lightFalloff};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useAlphaTest = ${this.useAlphaTest};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.alphaTestCutoff = ${this.alphaTestCutoff};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useAlphaBlending = ${this.useAlphaBlending};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useRadianceOverAlpha = ${this.useRadianceOverAlpha};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useSpecularOverAlpha = ${this.useSpecularOverAlpha};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.enableSpecularAntiAliasing = ${this.enableSpecularAntiAliasing};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.realTimeFiltering = ${this.realTimeFiltering};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.realTimeFilteringQuality = ${this.realTimeFilteringQuality};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useEnergyConservation = ${this.useEnergyConservation};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useRadianceOcclusion = ${this.useRadianceOcclusion};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useHorizonOcclusion = ${this.useHorizonOcclusion};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.unlit = ${this.unlit};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.forceNormalForward = ${this.forceNormalForward};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.debugMode = ${this.debugMode};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.debugLimit = ${this.debugLimit};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.debugFactor = ${this.debugFactor};\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        if (this.light) {\r\n            serializationObject.lightId = this.light.id;\r\n        }\r\n\r\n        serializationObject.lightFalloff = this.lightFalloff;\r\n        serializationObject.useAlphaTest = this.useAlphaTest;\r\n        serializationObject.alphaTestCutoff = this.alphaTestCutoff;\r\n        serializationObject.useAlphaBlending = this.useAlphaBlending;\r\n        serializationObject.useRadianceOverAlpha = this.useRadianceOverAlpha;\r\n        serializationObject.useSpecularOverAlpha = this.useSpecularOverAlpha;\r\n        serializationObject.enableSpecularAntiAliasing = this.enableSpecularAntiAliasing;\r\n        serializationObject.realTimeFiltering = this.realTimeFiltering;\r\n        serializationObject.realTimeFilteringQuality = this.realTimeFilteringQuality;\r\n        serializationObject.useEnergyConservation = this.useEnergyConservation;\r\n        serializationObject.useRadianceOcclusion = this.useRadianceOcclusion;\r\n        serializationObject.useHorizonOcclusion = this.useHorizonOcclusion;\r\n        serializationObject.unlit = this.unlit;\r\n        serializationObject.forceNormalForward = this.forceNormalForward;\r\n        serializationObject.debugMode = this.debugMode;\r\n        serializationObject.debugLimit = this.debugLimit;\r\n        serializationObject.debugFactor = this.debugFactor;\r\n        serializationObject.generateOnlyFragmentCode = this.generateOnlyFragmentCode;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        if (serializationObject.lightId) {\r\n            this.light = scene.getLightById(serializationObject.lightId);\r\n        }\r\n\r\n        this.lightFalloff = serializationObject.lightFalloff ?? 0;\r\n        this.useAlphaTest = serializationObject.useAlphaTest;\r\n        this.alphaTestCutoff = serializationObject.alphaTestCutoff;\r\n        this.useAlphaBlending = serializationObject.useAlphaBlending;\r\n        this.useRadianceOverAlpha = serializationObject.useRadianceOverAlpha;\r\n        this.useSpecularOverAlpha = serializationObject.useSpecularOverAlpha;\r\n        this.enableSpecularAntiAliasing = serializationObject.enableSpecularAntiAliasing;\r\n        this.realTimeFiltering = !!serializationObject.realTimeFiltering;\r\n        this.realTimeFilteringQuality = serializationObject.realTimeFilteringQuality ?? Constants.TEXTURE_FILTERING_QUALITY_LOW;\r\n        this.useEnergyConservation = serializationObject.useEnergyConservation;\r\n        this.useRadianceOcclusion = serializationObject.useRadianceOcclusion;\r\n        this.useHorizonOcclusion = serializationObject.useHorizonOcclusion;\r\n        this.unlit = serializationObject.unlit;\r\n        this.forceNormalForward = !!serializationObject.forceNormalForward;\r\n        this.debugMode = serializationObject.debugMode;\r\n        this.debugLimit = serializationObject.debugLimit;\r\n        this.debugFactor = serializationObject.debugFactor;\r\n        this.generateOnlyFragmentCode = !!serializationObject.generateOnlyFragmentCode;\r\n\r\n        this._setTarget();\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.PBRMetallicRoughnessBlock\", PBRMetallicRoughnessBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}