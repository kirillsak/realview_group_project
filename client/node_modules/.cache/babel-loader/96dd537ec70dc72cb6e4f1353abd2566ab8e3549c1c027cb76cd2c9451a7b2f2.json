{"ast":null,"code":"import { VirtualJoystick, JoystickAxis } from \"../../Misc/virtualJoystick.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { Matrix, Vector3 } from \"../../Maths/math.vector.js\";\nimport { FreeCameraInputsManager } from \"../../Cameras/freeCameraInputsManager.js\";\n/**\n * Add virtual joystick input support to the input manager.\n * @returns the current input manager\n */\nFreeCameraInputsManager.prototype.addVirtualJoystick = function () {\n  this.add(new FreeCameraVirtualJoystickInput());\n  return this;\n};\n/**\n * Manage the Virtual Joystick inputs to control the movement of a free camera.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\n */\nexport class FreeCameraVirtualJoystickInput {\n  /**\n   * Gets the left stick of the virtual joystick.\n   * @returns The virtual Joystick\n   */\n  getLeftJoystick() {\n    return this._leftjoystick;\n  }\n  /**\n   * Gets the right stick of the virtual joystick.\n   * @returns The virtual Joystick\n   */\n  getRightJoystick() {\n    return this._rightjoystick;\n  }\n  /**\n   * Update the current camera state depending on the inputs that have been used this frame.\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n   */\n  checkInputs() {\n    if (this._leftjoystick) {\n      const camera = this.camera;\n      const speed = camera._computeLocalCameraSpeed() * 50;\n      const cameraTransform = Matrix.RotationYawPitchRoll(camera.rotation.y, camera.rotation.x, 0);\n      const deltaTransform = Vector3.TransformCoordinates(new Vector3(this._leftjoystick.deltaPosition.x * speed, this._leftjoystick.deltaPosition.y * speed, this._leftjoystick.deltaPosition.z * speed), cameraTransform);\n      camera.cameraDirection = camera.cameraDirection.add(deltaTransform);\n      camera.cameraRotation = camera.cameraRotation.addVector3(this._rightjoystick.deltaPosition);\n      if (!this._leftjoystick.pressed) {\n        this._leftjoystick.deltaPosition = this._leftjoystick.deltaPosition.scale(0.9);\n      }\n      if (!this._rightjoystick.pressed) {\n        this._rightjoystick.deltaPosition = this._rightjoystick.deltaPosition.scale(0.9);\n      }\n    }\n  }\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   */\n  attachControl() {\n    this._leftjoystick = new VirtualJoystick(true);\n    this._leftjoystick.setAxisForUpDown(JoystickAxis.Z);\n    this._leftjoystick.setAxisForLeftRight(JoystickAxis.X);\n    this._leftjoystick.setJoystickSensibility(0.15);\n    this._rightjoystick = new VirtualJoystick(false);\n    this._rightjoystick.setAxisForUpDown(JoystickAxis.X);\n    this._rightjoystick.setAxisForLeftRight(JoystickAxis.Y);\n    this._rightjoystick.reverseUpDown = true;\n    this._rightjoystick.setJoystickSensibility(0.05);\n    this._rightjoystick.setJoystickColor(\"yellow\");\n  }\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n  detachControl() {\n    this._leftjoystick.releaseCanvas();\n    this._rightjoystick.releaseCanvas();\n  }\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n  getClassName() {\n    return \"FreeCameraVirtualJoystickInput\";\n  }\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n  getSimpleName() {\n    return \"virtualJoystick\";\n  }\n}\nCameraInputTypes[\"FreeCameraVirtualJoystickInput\"] = FreeCameraVirtualJoystickInput;","map":{"version":3,"mappings":"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","names":["VirtualJoystick","JoystickAxis","CameraInputTypes","Matrix","Vector3","FreeCameraInputsManager","prototype","addVirtualJoystick","add","FreeCameraVirtualJoystickInput","getLeftJoystick","_leftjoystick","getRightJoystick","_rightjoystick","checkInputs","camera","speed","_computeLocalCameraSpeed","cameraTransform","RotationYawPitchRoll","rotation","y","x","deltaTransform","TransformCoordinates","deltaPosition","z","cameraDirection","cameraRotation","addVector3","pressed","scale","attachControl","setAxisForUpDown","Z","setAxisForLeftRight","X","setJoystickSensibility","Y","reverseUpDown","setJoystickColor","detachControl","releaseCanvas","getClassName","getSimpleName"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/Inputs/freeCameraVirtualJoystickInput.ts"],"sourcesContent":["import { VirtualJoystick, JoystickAxis } from \"../../Misc/virtualJoystick\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { Matrix, Vector3 } from \"../../Maths/math.vector\";\r\nimport { FreeCameraInputsManager } from \"../../Cameras/freeCameraInputsManager\";\r\n\r\n// Module augmentation to abstract virtual joystick from camera.\r\ndeclare module \"../../Cameras/freeCameraInputsManager\" {\r\n    export interface FreeCameraInputsManager {\r\n        /**\r\n         * Add virtual joystick input support to the input manager.\r\n         * @returns the current input manager\r\n         */\r\n        addVirtualJoystick(): FreeCameraInputsManager;\r\n    }\r\n}\r\n\r\n/**\r\n * Add virtual joystick input support to the input manager.\r\n * @returns the current input manager\r\n */\r\nFreeCameraInputsManager.prototype.addVirtualJoystick = function (): FreeCameraInputsManager {\r\n    this.add(new FreeCameraVirtualJoystickInput());\r\n    return this;\r\n};\r\n\r\n/**\r\n * Manage the Virtual Joystick inputs to control the movement of a free camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class FreeCameraVirtualJoystickInput implements ICameraInput<FreeCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FreeCamera;\r\n\r\n    private _leftjoystick: VirtualJoystick;\r\n    private _rightjoystick: VirtualJoystick;\r\n\r\n    /**\r\n     * Gets the left stick of the virtual joystick.\r\n     * @returns The virtual Joystick\r\n     */\r\n    public getLeftJoystick(): VirtualJoystick {\r\n        return this._leftjoystick;\r\n    }\r\n\r\n    /**\r\n     * Gets the right stick of the virtual joystick.\r\n     * @returns The virtual Joystick\r\n     */\r\n    public getRightJoystick(): VirtualJoystick {\r\n        return this._rightjoystick;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs() {\r\n        if (this._leftjoystick) {\r\n            const camera = this.camera;\r\n            const speed = camera._computeLocalCameraSpeed() * 50;\r\n            const cameraTransform = Matrix.RotationYawPitchRoll(camera.rotation.y, camera.rotation.x, 0);\r\n            const deltaTransform = Vector3.TransformCoordinates(\r\n                new Vector3(this._leftjoystick.deltaPosition.x * speed, this._leftjoystick.deltaPosition.y * speed, this._leftjoystick.deltaPosition.z * speed),\r\n                cameraTransform\r\n            );\r\n            camera.cameraDirection = camera.cameraDirection.add(deltaTransform);\r\n            camera.cameraRotation = camera.cameraRotation.addVector3(this._rightjoystick.deltaPosition);\r\n\r\n            if (!this._leftjoystick.pressed) {\r\n                this._leftjoystick.deltaPosition = this._leftjoystick.deltaPosition.scale(0.9);\r\n            }\r\n            if (!this._rightjoystick.pressed) {\r\n                this._rightjoystick.deltaPosition = this._rightjoystick.deltaPosition.scale(0.9);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     */\r\n    public attachControl(): void {\r\n        this._leftjoystick = new VirtualJoystick(true);\r\n        this._leftjoystick.setAxisForUpDown(JoystickAxis.Z);\r\n        this._leftjoystick.setAxisForLeftRight(JoystickAxis.X);\r\n        this._leftjoystick.setJoystickSensibility(0.15);\r\n        this._rightjoystick = new VirtualJoystick(false);\r\n        this._rightjoystick.setAxisForUpDown(JoystickAxis.X);\r\n        this._rightjoystick.setAxisForLeftRight(JoystickAxis.Y);\r\n        this._rightjoystick.reverseUpDown = true;\r\n        this._rightjoystick.setJoystickSensibility(0.05);\r\n        this._rightjoystick.setJoystickColor(\"yellow\");\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        this._leftjoystick.releaseCanvas();\r\n        this._rightjoystick.releaseCanvas();\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraVirtualJoystickInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"virtualJoystick\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraVirtualJoystickInput\"] = FreeCameraVirtualJoystickInput;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}