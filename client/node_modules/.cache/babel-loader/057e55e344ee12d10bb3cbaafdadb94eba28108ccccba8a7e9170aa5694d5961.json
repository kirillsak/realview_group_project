{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/sharpen.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The SharpenPostProcess applies a sharpen kernel to every pixel\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\nexport class SharpenPostProcess extends PostProcess {\n  /**\n   * Creates a new instance ConvolutionPostProcess\n   * @param name The name of the effect.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType Type of textures used when performing the post process. (default: 0)\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n   */\n  constructor(name, options, camera, samplingMode, engine, reusable, textureType = 0, blockCompilation = false) {\n    super(name, \"sharpen\", [\"sharpnessAmounts\", \"screenSize\"], null, options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\n    /**\n     * How much of the original color should be applied. Setting this to 0 will display edge detection. (default: 1)\n     */\n    this.colorAmount = 1.0;\n    /**\n     * How much sharpness should be applied (default: 0.3)\n     */\n    this.edgeAmount = 0.3;\n    this.onApply = effect => {\n      effect.setFloat2(\"screenSize\", this.width, this.height);\n      effect.setFloat2(\"sharpnessAmounts\", this.edgeAmount, this.colorAmount);\n    };\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"SharpenPostProcess\" string\n   */\n  getClassName() {\n    return \"SharpenPostProcess\";\n  }\n  /**\n   * @internal\n   */\n  static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(() => {\n      return new SharpenPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.textureType, parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  }\n}\n__decorate([serialize()], SharpenPostProcess.prototype, \"colorAmount\", void 0);\n__decorate([serialize()], SharpenPostProcess.prototype, \"edgeAmount\", void 0);\nRegisterClass(\"BABYLON.SharpenPostProcess\", SharpenPostProcess);","map":{"version":3,"mappings":";AAIA,SAASA,WAAW,QAAQ,kBAAgB;AAG5C,OAAO,gCAA8B;AACrC,SAASC,aAAa,QAAQ,sBAAoB;AAClD,SAASC,SAAS,EAAEC,mBAAmB,QAAQ,uBAAqB;AAKpE;;;;AAIA,OAAM,MAAOC,kBAAmB,SAAQJ,WAAW;EAoB/C;;;;;;;;;;;EAWAK,YACIC,IAAY,EACZC,OAAoC,EACpCC,MAAwB,EACxBC,YAAqB,EACrBC,MAAe,EACfC,QAAkB,EAClBC,cAAsB,mBAAU;IAGhC,KAAK,CAACN,IAAI,EAAE,SAAS,EAAE,CAAC,kBAAkB,EAAE,YAAY,CAAC,EAAE,IAAI,EAAEC,OAAO,EAAEC,MAAM,EAAEC,YAAY,EAAEC,MAAM,EAAEC,QAAQ,EAAE,IAAI,EAAEC,WAAW,EAAEC,SAAS,EAAE,IAAI,EAAEC,gBAAgB,CAAC;IAxC3K;;;IAIO,gBAAW,GAAW,GAAG;IAChC;;;IAIO,eAAU,GAAW,GAAG;IAiC3B,IAAI,CAACC,OAAO,GAAIC,MAAc,IAAI;MAC9BA,MAAM,CAACC,SAAS,CAAC,YAAY,EAAE,IAAI,CAACC,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;MACvDH,MAAM,CAACC,SAAS,CAAC,kBAAkB,EAAE,IAAI,CAACG,UAAU,EAAE,IAAI,CAACC,WAAW,CAAC;IAC3E,CAAC;EACL;EAnCA;;;;EAIOC,YAAY;IACf,OAAO,oBAAoB;EAC/B;EA+BA;;;EAGO,OAAOC,MAAM,CAACC,iBAAsB,EAAEC,YAAoB,EAAEC,KAAY,EAAEC,OAAe;IAC5F,OAAOxB,mBAAmB,CAACyB,KAAK,CAC5B,MAAK;MACD,OAAO,IAAIxB,kBAAkB,CACzBoB,iBAAiB,CAAClB,IAAI,EACtBkB,iBAAiB,CAACjB,OAAO,EACzBkB,YAAY,EACZD,iBAAiB,CAACK,wBAAwB,EAC1CH,KAAK,CAACI,SAAS,EAAE,EACjBN,iBAAiB,CAACZ,WAAW,EAC7BY,iBAAiB,CAACb,QAAQ,CAC7B;IACL,CAAC,EACDa,iBAAiB,EACjBE,KAAK,EACLC,OAAO,CACV;EACL;;AAhEAI,YADC7B,SAAS,EAAE,uDACqB;AAKjC6B,YADC7B,SAAS,EAAE,sDACoB;AA8DpCD,aAAa,CAAC,4BAA4B,EAAEG,kBAAkB,CAAC","names":["PostProcess","RegisterClass","serialize","SerializationHelper","SharpenPostProcess","constructor","name","options","camera","samplingMode","engine","reusable","textureType","undefined","blockCompilation","onApply","effect","setFloat2","width","height","edgeAmount","colorAmount","getClassName","_Parse","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","getEngine","__decorate"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/sharpenPostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/sharpen.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize, SerializationHelper } from \"../Misc/decorators\";\r\n\r\ndeclare type Engine = import(\"../Engines/engine\").Engine;\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The SharpenPostProcess applies a sharpen kernel to every pixel\r\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n */\r\nexport class SharpenPostProcess extends PostProcess {\r\n    /**\r\n     * How much of the original color should be applied. Setting this to 0 will display edge detection. (default: 1)\r\n     */\r\n    @serialize()\r\n    public colorAmount: number = 1.0;\r\n    /**\r\n     * How much sharpness should be applied (default: 0.3)\r\n     */\r\n    @serialize()\r\n    public edgeAmount: number = 0.3;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"SharpenPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"SharpenPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance ConvolutionPostProcess\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(name, \"sharpen\", [\"sharpnessAmounts\", \"screenSize\"], null, options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\r\n\r\n        this.onApply = (effect: Effect) => {\r\n            effect.setFloat2(\"screenSize\", this.width, this.height);\r\n            effect.setFloat2(\"sharpnessAmounts\", this.edgeAmount, this.colorAmount);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new SharpenPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.textureType,\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.SharpenPostProcess\", SharpenPostProcess);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}