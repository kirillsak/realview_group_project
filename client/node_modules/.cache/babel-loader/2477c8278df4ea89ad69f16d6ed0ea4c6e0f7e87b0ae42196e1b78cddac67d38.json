{"ast":null,"code":"import { Observable } from \"../Misc/observable.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { TransformNode } from \"../Meshes/transformNode.js\";\nimport { CreatePlane } from \"../Meshes/Builders/planeBuilder.js\";\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\n/**\n * Single plane drag gizmo\n */\nexport class PlaneDragGizmo extends Gizmo {\n  /**\n   * Creates a PlaneDragGizmo\n   * @param dragPlaneNormal The axis normal to which the gizmo will be able to drag on\n   * @param color The color of the gizmo\n   * @param gizmoLayer The utility layer the gizmo will be added to\n   * @param parent\n   */\n  constructor(dragPlaneNormal, color = Color3.Gray(), gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer, parent = null) {\n    var _a;\n    super(gizmoLayer);\n    this._pointerObserver = null;\n    /**\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\n     */\n    this.snapDistance = 0;\n    /**\n     * Event that fires each time the gizmo snaps to a new location.\n     * * snapDistance is the the change in distance\n     */\n    this.onSnapObservable = new Observable();\n    this._isEnabled = false;\n    this._parent = null;\n    this._dragging = false;\n    this._parent = parent;\n    // Create Material\n    this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    this._coloredMaterial.diffuseColor = color;\n    this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\n    this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    this._hoverMaterial.diffuseColor = Color3.Yellow();\n    this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    this._disableMaterial.diffuseColor = Color3.Gray();\n    this._disableMaterial.alpha = 0.4;\n    // Build plane mesh on root node\n    this._gizmoMesh = PlaneDragGizmo._CreatePlane(gizmoLayer.utilityLayerScene, this._coloredMaterial);\n    this._gizmoMesh.lookAt(this._rootMesh.position.add(dragPlaneNormal));\n    this._gizmoMesh.scaling.scaleInPlace(1 / 3);\n    this._gizmoMesh.parent = this._rootMesh;\n    let currentSnapDragDistance = 0;\n    const tmpVector = new Vector3();\n    const tmpSnapEvent = {\n      snapDistance: 0\n    };\n    // Add dragPlaneNormal drag behavior to handle events when the gizmo is dragged\n    this.dragBehavior = new PointerDragBehavior({\n      dragPlaneNormal: dragPlaneNormal\n    });\n    this.dragBehavior.moveAttached = false;\n    this._rootMesh.addBehavior(this.dragBehavior);\n    this.dragBehavior.onDragObservable.add(event => {\n      if (this.attachedNode) {\n        this._handlePivot();\n        // Keep world translation and use it to update world transform\n        // if the node has parent, the local transform properties (position, rotation, scale)\n        // will be recomputed in _matrixChanged function\n        // Snapping logic\n        if (this.snapDistance == 0) {\n          this.attachedNode.getWorldMatrix().addTranslationFromFloats(event.delta.x, event.delta.y, event.delta.z);\n        } else {\n          currentSnapDragDistance += event.dragDistance;\n          if (Math.abs(currentSnapDragDistance) > this.snapDistance) {\n            const dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / this.snapDistance);\n            currentSnapDragDistance = currentSnapDragDistance % this.snapDistance;\n            event.delta.normalizeToRef(tmpVector);\n            tmpVector.scaleInPlace(this.snapDistance * dragSteps);\n            this.attachedNode.getWorldMatrix().addTranslationFromFloats(tmpVector.x, tmpVector.y, tmpVector.z);\n            tmpSnapEvent.snapDistance = this.snapDistance * dragSteps;\n            this.onSnapObservable.notifyObservers(tmpSnapEvent);\n          }\n        }\n        this._matrixChanged();\n      }\n    });\n    this.dragBehavior.onDragStartObservable.add(() => {\n      this._dragging = true;\n    });\n    this.dragBehavior.onDragEndObservable.add(() => {\n      this._dragging = false;\n    });\n    const light = gizmoLayer._getSharedGizmoLight();\n    light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._rootMesh.getChildMeshes(false));\n    const cache = {\n      gizmoMeshes: this._gizmoMesh.getChildMeshes(),\n      colliderMeshes: this._gizmoMesh.getChildMeshes(),\n      material: this._coloredMaterial,\n      hoverMaterial: this._hoverMaterial,\n      disableMaterial: this._disableMaterial,\n      active: false,\n      dragBehavior: this.dragBehavior\n    };\n    (_a = this._parent) === null || _a === void 0 ? void 0 : _a.addToAxisCache(this._gizmoMesh, cache);\n    this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add(pointerInfo => {\n      var _a;\n      if (this._customMeshSet) {\n        return;\n      }\n      this._isHovered = !!(cache.colliderMeshes.indexOf((_a = pointerInfo === null || pointerInfo === void 0 ? void 0 : pointerInfo.pickInfo) === null || _a === void 0 ? void 0 : _a.pickedMesh) != -1);\n      if (!this._parent) {\n        const material = cache.dragBehavior.enabled ? this._isHovered || this._dragging ? this._hoverMaterial : this._coloredMaterial : this._disableMaterial;\n        this._setGizmoMeshMaterial(cache.gizmoMeshes, material);\n      }\n    });\n    this.dragBehavior.onEnabledObservable.add(newState => {\n      this._setGizmoMeshMaterial(cache.gizmoMeshes, newState ? this._coloredMaterial : this._disableMaterial);\n    });\n  }\n  /** Default material used to render when gizmo is not disabled or hovered */\n  get coloredMaterial() {\n    return this._coloredMaterial;\n  }\n  /** Material used to render when gizmo is hovered with mouse*/\n  get hoverMaterial() {\n    return this._hoverMaterial;\n  }\n  /** Material used to render when gizmo is disabled. typically grey.*/\n  get disableMaterial() {\n    return this._disableMaterial;\n  }\n  /**\n   * @internal\n   */\n  static _CreatePlane(scene, material) {\n    const plane = new TransformNode(\"plane\", scene);\n    //make sure plane is double sided\n    const dragPlane = CreatePlane(\"dragPlane\", {\n      width: 0.1375,\n      height: 0.1375,\n      sideOrientation: 2\n    }, scene);\n    dragPlane.material = material;\n    dragPlane.parent = plane;\n    return plane;\n  }\n  _attachedNodeChanged(value) {\n    if (this.dragBehavior) {\n      this.dragBehavior.enabled = value ? true : false;\n    }\n  }\n  /**\n   * If the gizmo is enabled\n   */\n  set isEnabled(value) {\n    this._isEnabled = value;\n    if (!value) {\n      this.attachedNode = null;\n    } else {\n      if (this._parent) {\n        this.attachedNode = this._parent.attachedNode;\n      }\n    }\n  }\n  get isEnabled() {\n    return this._isEnabled;\n  }\n  /**\n   * Disposes of the gizmo\n   */\n  dispose() {\n    this.onSnapObservable.clear();\n    this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\n    this.dragBehavior.detach();\n    super.dispose();\n    if (this._gizmoMesh) {\n      this._gizmoMesh.dispose();\n    }\n    [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach(matl => {\n      if (matl) {\n        matl.dispose();\n      }\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Observable","Vector3","Color3","TransformNode","CreatePlane","PointerDragBehavior","Gizmo","UtilityLayerRenderer","StandardMaterial","PlaneDragGizmo","constructor","dragPlaneNormal","color","Gray","gizmoLayer","DefaultUtilityLayer","parent","_parent","_coloredMaterial","utilityLayerScene","diffuseColor","specularColor","subtract","_hoverMaterial","Yellow","_disableMaterial","alpha","_gizmoMesh","_CreatePlane","lookAt","_rootMesh","position","add","scaling","scaleInPlace","currentSnapDragDistance","tmpVector","tmpSnapEvent","snapDistance","dragBehavior","moveAttached","addBehavior","onDragObservable","event","attachedNode","_handlePivot","getWorldMatrix","addTranslationFromFloats","delta","x","y","z","dragDistance","Math","abs","dragSteps","floor","normalizeToRef","onSnapObservable","notifyObservers","_matrixChanged","onDragStartObservable","_dragging","onDragEndObservable","light","_getSharedGizmoLight","includedOnlyMeshes","concat","getChildMeshes","cache","gizmoMeshes","colliderMeshes","material","hoverMaterial","disableMaterial","active","addToAxisCache","_pointerObserver","onPointerObservable","pointerInfo","_customMeshSet","_isHovered","indexOf","pickInfo","pickedMesh","enabled","_setGizmoMeshMaterial","onEnabledObservable","newState","coloredMaterial","scene","plane","dragPlane","width","height","sideOrientation","_attachedNodeChanged","value","isEnabled","_isEnabled","dispose","clear","remove","detach","forEach","matl"],"sourceRoot":"","sources":["../../../../lts/core/generated/Gizmos/planeDragGizmo.ts"],"sourcesContent":["import type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { PointerInfo } from \"../Events/pointerEvents\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { TransformNode } from \"../Meshes/transformNode\";\r\nimport type { Node } from \"../node\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { CreatePlane } from \"../Meshes/Builders/planeBuilder\";\r\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior\";\r\nimport type { GizmoAxisCache, IGizmo } from \"./gizmo\";\r\nimport { Gizmo } from \"./gizmo\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { PositionGizmo } from \"./positionGizmo\";\r\n\r\n/**\r\n * Interface for plane drag gizmo\r\n */\r\nexport interface IPlaneDragGizmo extends IGizmo {\r\n    /** Drag behavior responsible for the gizmos dragging interactions */\r\n    dragBehavior: PointerDragBehavior;\r\n    /** Drag distance in babylon units that the gizmo will snap to when dragged */\r\n    snapDistance: number;\r\n    /**\r\n     * Event that fires each time the gizmo snaps to a new location.\r\n     * * snapDistance is the the change in distance\r\n     */\r\n    onSnapObservable: Observable<{ snapDistance: number }>;\r\n    /** If the gizmo is enabled */\r\n    isEnabled: boolean;\r\n\r\n    /** Default material used to render when gizmo is not disabled or hovered */\r\n    coloredMaterial: StandardMaterial;\r\n    /** Material used to render when gizmo is hovered with mouse*/\r\n    hoverMaterial: StandardMaterial;\r\n    /** Material used to render when gizmo is disabled. typically grey.*/\r\n    disableMaterial: StandardMaterial;\r\n}\r\n\r\n/**\r\n * Single plane drag gizmo\r\n */\r\nexport class PlaneDragGizmo extends Gizmo implements IPlaneDragGizmo {\r\n    /**\r\n     * Drag behavior responsible for the gizmos dragging interactions\r\n     */\r\n    public dragBehavior: PointerDragBehavior;\r\n    protected _pointerObserver: Nullable<Observer<PointerInfo>> = null;\r\n    /**\r\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\r\n     */\r\n    public snapDistance = 0;\r\n    /**\r\n     * Event that fires each time the gizmo snaps to a new location.\r\n     * * snapDistance is the the change in distance\r\n     */\r\n    public onSnapObservable = new Observable<{ snapDistance: number }>();\r\n\r\n    protected _gizmoMesh: TransformNode;\r\n    protected _coloredMaterial: StandardMaterial;\r\n    protected _hoverMaterial: StandardMaterial;\r\n    protected _disableMaterial: StandardMaterial;\r\n\r\n    protected _isEnabled: boolean = false;\r\n    protected _parent: Nullable<PositionGizmo> = null;\r\n    protected _dragging: boolean = false;\r\n\r\n    /** Default material used to render when gizmo is not disabled or hovered */\r\n    public get coloredMaterial() {\r\n        return this._coloredMaterial;\r\n    }\r\n\r\n    /** Material used to render when gizmo is hovered with mouse*/\r\n    public get hoverMaterial() {\r\n        return this._hoverMaterial;\r\n    }\r\n\r\n    /** Material used to render when gizmo is disabled. typically grey.*/\r\n    public get disableMaterial() {\r\n        return this._disableMaterial;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _CreatePlane(scene: Scene, material: StandardMaterial): TransformNode {\r\n        const plane = new TransformNode(\"plane\", scene);\r\n\r\n        //make sure plane is double sided\r\n        const dragPlane = CreatePlane(\"dragPlane\", { width: 0.1375, height: 0.1375, sideOrientation: 2 }, scene);\r\n        dragPlane.material = material;\r\n        dragPlane.parent = plane;\r\n        return plane;\r\n    }\r\n\r\n    /**\r\n     * Creates a PlaneDragGizmo\r\n     * @param dragPlaneNormal The axis normal to which the gizmo will be able to drag on\r\n     * @param color The color of the gizmo\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n     * @param parent\r\n     */\r\n    constructor(\r\n        dragPlaneNormal: Vector3,\r\n        color: Color3 = Color3.Gray(),\r\n        gizmoLayer: UtilityLayerRenderer = UtilityLayerRenderer.DefaultUtilityLayer,\r\n        parent: Nullable<PositionGizmo> = null\r\n    ) {\r\n        super(gizmoLayer);\r\n        this._parent = parent;\r\n        // Create Material\r\n        this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._coloredMaterial.diffuseColor = color;\r\n        this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\r\n\r\n        this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._hoverMaterial.diffuseColor = Color3.Yellow();\r\n\r\n        this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._disableMaterial.diffuseColor = Color3.Gray();\r\n        this._disableMaterial.alpha = 0.4;\r\n\r\n        // Build plane mesh on root node\r\n        this._gizmoMesh = PlaneDragGizmo._CreatePlane(gizmoLayer.utilityLayerScene, this._coloredMaterial);\r\n\r\n        this._gizmoMesh.lookAt(this._rootMesh.position.add(dragPlaneNormal));\r\n        this._gizmoMesh.scaling.scaleInPlace(1 / 3);\r\n        this._gizmoMesh.parent = this._rootMesh;\r\n\r\n        let currentSnapDragDistance = 0;\r\n        const tmpVector = new Vector3();\r\n        const tmpSnapEvent = { snapDistance: 0 };\r\n        // Add dragPlaneNormal drag behavior to handle events when the gizmo is dragged\r\n        this.dragBehavior = new PointerDragBehavior({ dragPlaneNormal: dragPlaneNormal });\r\n        this.dragBehavior.moveAttached = false;\r\n        this._rootMesh.addBehavior(this.dragBehavior);\r\n\r\n        this.dragBehavior.onDragObservable.add((event) => {\r\n            if (this.attachedNode) {\r\n                this._handlePivot();\r\n                // Keep world translation and use it to update world transform\r\n                // if the node has parent, the local transform properties (position, rotation, scale)\r\n                // will be recomputed in _matrixChanged function\r\n\r\n                // Snapping logic\r\n                if (this.snapDistance == 0) {\r\n                    this.attachedNode.getWorldMatrix().addTranslationFromFloats(event.delta.x, event.delta.y, event.delta.z);\r\n                } else {\r\n                    currentSnapDragDistance += event.dragDistance;\r\n                    if (Math.abs(currentSnapDragDistance) > this.snapDistance) {\r\n                        const dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / this.snapDistance);\r\n                        currentSnapDragDistance = currentSnapDragDistance % this.snapDistance;\r\n                        event.delta.normalizeToRef(tmpVector);\r\n                        tmpVector.scaleInPlace(this.snapDistance * dragSteps);\r\n                        this.attachedNode.getWorldMatrix().addTranslationFromFloats(tmpVector.x, tmpVector.y, tmpVector.z);\r\n                        tmpSnapEvent.snapDistance = this.snapDistance * dragSteps;\r\n                        this.onSnapObservable.notifyObservers(tmpSnapEvent);\r\n                    }\r\n                }\r\n                this._matrixChanged();\r\n            }\r\n        });\r\n        this.dragBehavior.onDragStartObservable.add(() => {\r\n            this._dragging = true;\r\n        });\r\n        this.dragBehavior.onDragEndObservable.add(() => {\r\n            this._dragging = false;\r\n        });\r\n\r\n        const light = gizmoLayer._getSharedGizmoLight();\r\n        light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._rootMesh.getChildMeshes(false));\r\n\r\n        const cache: GizmoAxisCache = {\r\n            gizmoMeshes: this._gizmoMesh.getChildMeshes() as Mesh[],\r\n            colliderMeshes: this._gizmoMesh.getChildMeshes() as Mesh[],\r\n            material: this._coloredMaterial,\r\n            hoverMaterial: this._hoverMaterial,\r\n            disableMaterial: this._disableMaterial,\r\n            active: false,\r\n            dragBehavior: this.dragBehavior,\r\n        };\r\n        this._parent?.addToAxisCache(this._gizmoMesh as Mesh, cache);\r\n\r\n        this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add((pointerInfo) => {\r\n            if (this._customMeshSet) {\r\n                return;\r\n            }\r\n            this._isHovered = !!(cache.colliderMeshes.indexOf(<Mesh>pointerInfo?.pickInfo?.pickedMesh) != -1);\r\n            if (!this._parent) {\r\n                const material = cache.dragBehavior.enabled ? (this._isHovered || this._dragging ? this._hoverMaterial : this._coloredMaterial) : this._disableMaterial;\r\n                this._setGizmoMeshMaterial(cache.gizmoMeshes, material);\r\n            }\r\n        });\r\n\r\n        this.dragBehavior.onEnabledObservable.add((newState) => {\r\n            this._setGizmoMeshMaterial(cache.gizmoMeshes, newState ? this._coloredMaterial : this._disableMaterial);\r\n        });\r\n    }\r\n    protected _attachedNodeChanged(value: Nullable<Node>) {\r\n        if (this.dragBehavior) {\r\n            this.dragBehavior.enabled = value ? true : false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the gizmo is enabled\r\n     */\r\n    public set isEnabled(value: boolean) {\r\n        this._isEnabled = value;\r\n        if (!value) {\r\n            this.attachedNode = null;\r\n        } else {\r\n            if (this._parent) {\r\n                this.attachedNode = this._parent.attachedNode;\r\n            }\r\n        }\r\n    }\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n    /**\r\n     * Disposes of the gizmo\r\n     */\r\n    public dispose() {\r\n        this.onSnapObservable.clear();\r\n        this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n        this.dragBehavior.detach();\r\n        super.dispose();\r\n        if (this._gizmoMesh) {\r\n            this._gizmoMesh.dispose();\r\n        }\r\n        [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach((matl) => {\r\n            if (matl) {\r\n                matl.dispose();\r\n            }\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}