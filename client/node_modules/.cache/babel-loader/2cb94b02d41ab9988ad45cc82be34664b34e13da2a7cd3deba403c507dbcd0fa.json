{"ast":null,"code":"import { EventConstants } from \"../Events/deviceInputEvents.js\";\nimport { DeviceType, NativePointerInput, PointerInput } from \"./InputDevices/deviceEnums.js\";\n/**\n * Class to wrap DeviceInputSystem data into an event object\n */\nexport class DeviceEventFactory {\n  /**\n   * Create device input events based on provided type and slot\n   *\n   * @param deviceType Type of device\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IUIEvent object\n   */\n  static CreateDeviceEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo) {\n    switch (deviceType) {\n      case DeviceType.Keyboard:\n        return this._CreateKeyboardEvent(inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n      case DeviceType.Mouse:\n        if (inputIndex === PointerInput.MouseWheelX || inputIndex === PointerInput.MouseWheelY || inputIndex === PointerInput.MouseWheelZ) {\n          return this._CreateWheelEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case DeviceType.Touch:\n        return this._CreatePointerEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n      default:\n        throw `Unable to generate event for device ${DeviceType[deviceType]}`;\n    }\n  }\n  /**\n   * Creates pointer event\n   *\n   * @param deviceType Type of device\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IUIEvent object (Pointer)\n   */\n  static _CreatePointerEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo) {\n    const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n    if (deviceType === DeviceType.Mouse) {\n      evt.deviceType = DeviceType.Mouse;\n      evt.pointerId = 1;\n      evt.pointerType = \"mouse\";\n    } else {\n      evt.deviceType = DeviceType.Touch;\n      evt.pointerId = deviceSlot;\n      evt.pointerType = \"touch\";\n    }\n    if (inputIndex === PointerInput.Move) {\n      evt.type = \"pointermove\";\n    } else if (inputIndex >= PointerInput.LeftClick && inputIndex <= PointerInput.RightClick) {\n      evt.type = currentState === 1 ? \"pointerdown\" : \"pointerup\";\n      evt.button = inputIndex - 2;\n    }\n    return evt;\n  }\n  /**\n   * Create Mouse Wheel Event\n   * @param deviceType Type of device\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IUIEvent object (Wheel)\n   */\n  static _CreateWheelEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo) {\n    const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n    evt.type = \"wheel\";\n    evt.deltaMode = EventConstants.DOM_DELTA_PIXEL;\n    evt.deltaX = 0;\n    evt.deltaY = 0;\n    evt.deltaZ = 0;\n    switch (inputIndex) {\n      case PointerInput.MouseWheelX:\n        evt.deltaX = currentState;\n        break;\n      case PointerInput.MouseWheelY:\n        evt.deltaY = currentState;\n        break;\n      case PointerInput.MouseWheelZ:\n        evt.deltaZ = currentState;\n        break;\n    }\n    return evt;\n  }\n  /**\n   * Create Mouse Event\n   * @param deviceType Type of device\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IUIEvent object (Mouse)\n   */\n  static _CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo) {\n    const evt = this._CreateEvent(elementToAttachTo);\n    const pointerX = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Horizontal);\n    const pointerY = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Vertical);\n    // Handle offsets/deltas based on existence of HTMLElement\n    if (elementToAttachTo) {\n      evt.movementX = 0;\n      evt.movementY = 0;\n      evt.offsetX = evt.movementX - elementToAttachTo.getBoundingClientRect().x;\n      evt.offsetY = evt.movementY - elementToAttachTo.getBoundingClientRect().y;\n    } else {\n      evt.movementX = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaHorizontal); // DeltaHorizontal\n      evt.movementY = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaVertical); // DeltaVertical\n      evt.offsetX = 0;\n      evt.offsetY = 0;\n    }\n    this._CheckNonCharacterKeys(evt, deviceInputSystem);\n    evt.clientX = pointerX;\n    evt.clientY = pointerY;\n    evt.x = pointerX;\n    evt.y = pointerY;\n    evt.deviceType = deviceType;\n    evt.deviceSlot = deviceSlot;\n    evt.inputIndex = inputIndex;\n    return evt;\n  }\n  /**\n   * Create Keyboard Event\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IEvent object (Keyboard)\n   */\n  static _CreateKeyboardEvent(inputIndex, currentState, deviceInputSystem, elementToAttachTo) {\n    const evt = this._CreateEvent(elementToAttachTo);\n    this._CheckNonCharacterKeys(evt, deviceInputSystem);\n    evt.deviceType = DeviceType.Keyboard;\n    evt.deviceSlot = 0;\n    evt.inputIndex = inputIndex;\n    evt.type = currentState === 1 ? \"keydown\" : \"keyup\";\n    evt.key = String.fromCharCode(inputIndex);\n    evt.keyCode = inputIndex;\n    return evt;\n  }\n  /**\n   * Add parameters for non-character keys (Ctrl, Alt, Meta, Shift)\n   * @param evt Event object to add parameters to\n   * @param deviceInputSystem DeviceInputSystem to pull values from\n   */\n  static _CheckNonCharacterKeys(evt, deviceInputSystem) {\n    const isKeyboardActive = deviceInputSystem.isDeviceAvailable(DeviceType.Keyboard);\n    const altKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 18) === 1;\n    const ctrlKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 17) === 1;\n    const metaKey = isKeyboardActive && (deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 91) === 1 || deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 92) === 1 || deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 93) === 1);\n    const shiftKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 16) === 1;\n    evt.altKey = altKey;\n    evt.ctrlKey = ctrlKey;\n    evt.metaKey = metaKey;\n    evt.shiftKey = shiftKey;\n  }\n  /**\n   * Create base event object\n   * @param elementToAttachTo Value to use as event target\n   * @returns\n   */\n  static _CreateEvent(elementToAttachTo) {\n    const evt = {};\n    evt.preventDefault = () => {};\n    evt.target = elementToAttachTo;\n    return evt;\n  }\n}","map":{"version":3,"mappings":"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","names":["EventConstants","DeviceType","NativePointerInput","PointerInput","DeviceEventFactory","CreateDeviceEvent","deviceType","deviceSlot","inputIndex","currentState","deviceInputSystem","elementToAttachTo","Keyboard","_CreateKeyboardEvent","Mouse","MouseWheelX","MouseWheelY","MouseWheelZ","_CreateWheelEvent","Touch","_CreatePointerEvent","evt","_CreateMouseEvent","pointerId","pointerType","Move","type","LeftClick","RightClick","button","deltaMode","DOM_DELTA_PIXEL","deltaX","deltaY","deltaZ","_CreateEvent","pointerX","pollInput","Horizontal","pointerY","Vertical","movementX","movementY","offsetX","getBoundingClientRect","x","offsetY","y","DeltaHorizontal","DeltaVertical","_CheckNonCharacterKeys","clientX","clientY","key","String","fromCharCode","keyCode","isKeyboardActive","isDeviceAvailable","altKey","ctrlKey","metaKey","shiftKey","preventDefault","target"],"sourceRoot":"","sources":["../../../../lts/core/generated/DeviceInput/eventFactory.ts"],"sourcesContent":["import { Constants } from \"../Engines/constants\";\r\nimport type { IUIEvent } from \"../Events/deviceInputEvents\";\r\nimport { EventConstants } from \"../Events/deviceInputEvents\";\r\nimport type { Nullable } from \"../types\";\r\nimport { DeviceType, NativePointerInput, PointerInput } from \"./InputDevices/deviceEnums\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\n\r\n/**\r\n * Class to wrap DeviceInputSystem data into an event object\r\n */\r\nexport class DeviceEventFactory {\r\n    /**\r\n     * Create device input events based on provided type and slot\r\n     *\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object\r\n     */\r\n    public static CreateDeviceEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any\r\n    ): IUIEvent {\r\n        switch (deviceType) {\r\n            case DeviceType.Keyboard:\r\n                return this._CreateKeyboardEvent(inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n            case DeviceType.Mouse:\r\n                if (inputIndex === PointerInput.MouseWheelX || inputIndex === PointerInput.MouseWheelY || inputIndex === PointerInput.MouseWheelZ) {\r\n                    return this._CreateWheelEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n                }\r\n            // eslint-disable-next-line no-fallthrough\r\n            case DeviceType.Touch:\r\n                return this._CreatePointerEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n            default:\r\n                throw `Unable to generate event for device ${DeviceType[deviceType]}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates pointer event\r\n     *\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Pointer)\r\n     */\r\n    private static _CreatePointerEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any\r\n    ): any {\r\n        const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n\r\n        if (deviceType === DeviceType.Mouse) {\r\n            evt.deviceType = DeviceType.Mouse;\r\n            evt.pointerId = 1;\r\n            evt.pointerType = \"mouse\";\r\n        } else {\r\n            evt.deviceType = DeviceType.Touch;\r\n            evt.pointerId = deviceSlot;\r\n            evt.pointerType = \"touch\";\r\n        }\r\n\r\n        if (inputIndex === PointerInput.Move) {\r\n            evt.type = \"pointermove\";\r\n        } else if (inputIndex >= PointerInput.LeftClick && inputIndex <= PointerInput.RightClick) {\r\n            evt.type = currentState === 1 ? \"pointerdown\" : \"pointerup\";\r\n            evt.button = inputIndex - 2;\r\n        }\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Mouse Wheel Event\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Wheel)\r\n     */\r\n    private static _CreateWheelEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo: any\r\n    ): any {\r\n        const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n\r\n        evt.type = \"wheel\";\r\n        evt.deltaMode = EventConstants.DOM_DELTA_PIXEL;\r\n        evt.deltaX = 0;\r\n        evt.deltaY = 0;\r\n        evt.deltaZ = 0;\r\n\r\n        switch (inputIndex) {\r\n            case PointerInput.MouseWheelX:\r\n                evt.deltaX = currentState;\r\n                break;\r\n            case PointerInput.MouseWheelY:\r\n                evt.deltaY = currentState;\r\n                break;\r\n            case PointerInput.MouseWheelZ:\r\n                evt.deltaZ = currentState;\r\n                break;\r\n        }\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Mouse Event\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Mouse)\r\n     */\r\n    private static _CreateMouseEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any\r\n    ): any {\r\n        const evt = this._CreateEvent(elementToAttachTo);\r\n        const pointerX = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Horizontal);\r\n        const pointerY = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Vertical);\r\n\r\n        // Handle offsets/deltas based on existence of HTMLElement\r\n        if (elementToAttachTo) {\r\n            evt.movementX = 0;\r\n            evt.movementY = 0;\r\n            evt.offsetX = evt.movementX - elementToAttachTo.getBoundingClientRect().x;\r\n            evt.offsetY = evt.movementY - elementToAttachTo.getBoundingClientRect().y;\r\n        } else {\r\n            evt.movementX = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaHorizontal); // DeltaHorizontal\r\n            evt.movementY = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaVertical); // DeltaVertical\r\n            evt.offsetX = 0;\r\n            evt.offsetY = 0;\r\n        }\r\n        this._CheckNonCharacterKeys(evt, deviceInputSystem);\r\n\r\n        evt.clientX = pointerX;\r\n        evt.clientY = pointerY;\r\n        evt.x = pointerX;\r\n        evt.y = pointerY;\r\n\r\n        evt.deviceType = deviceType;\r\n        evt.deviceSlot = deviceSlot;\r\n        evt.inputIndex = inputIndex;\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Keyboard Event\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IEvent object (Keyboard)\r\n     */\r\n    private static _CreateKeyboardEvent(inputIndex: number, currentState: Nullable<number>, deviceInputSystem: IDeviceInputSystem, elementToAttachTo?: any): any {\r\n        const evt = this._CreateEvent(elementToAttachTo);\r\n        this._CheckNonCharacterKeys(evt, deviceInputSystem);\r\n        evt.deviceType = DeviceType.Keyboard;\r\n        evt.deviceSlot = 0;\r\n        evt.inputIndex = inputIndex;\r\n\r\n        evt.type = currentState === 1 ? \"keydown\" : \"keyup\";\r\n        evt.key = String.fromCharCode(inputIndex);\r\n        evt.keyCode = inputIndex;\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Add parameters for non-character keys (Ctrl, Alt, Meta, Shift)\r\n     * @param evt Event object to add parameters to\r\n     * @param deviceInputSystem DeviceInputSystem to pull values from\r\n     */\r\n    private static _CheckNonCharacterKeys(evt: any, deviceInputSystem: IDeviceInputSystem): void {\r\n        const isKeyboardActive = deviceInputSystem.isDeviceAvailable(DeviceType.Keyboard);\r\n        const altKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_ALT_KEY) === 1;\r\n        const ctrlKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_CTRL_KEY) === 1;\r\n        const metaKey =\r\n            isKeyboardActive &&\r\n            (deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY1) === 1 ||\r\n                deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY2) === 1 ||\r\n                deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY3) === 1);\r\n        const shiftKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_SHIFT_KEY) === 1;\r\n\r\n        evt.altKey = altKey;\r\n        evt.ctrlKey = ctrlKey;\r\n        evt.metaKey = metaKey;\r\n        evt.shiftKey = shiftKey;\r\n    }\r\n\r\n    /**\r\n     * Create base event object\r\n     * @param elementToAttachTo Value to use as event target\r\n     * @returns\r\n     */\r\n    private static _CreateEvent(elementToAttachTo: any): any {\r\n        const evt: { [k: string]: any } = {};\r\n        evt.preventDefault = () => {};\r\n        evt.target = elementToAttachTo;\r\n\r\n        return evt;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}