{"ast":null,"code":"import { ThinTexture } from \"./thinTexture.js\";\n/**\n * This is a tiny helper class to wrap a RenderTargetWrapper in a texture\n * usable as the input of an effect.\n */\nexport class ThinRenderTargetTexture extends ThinTexture {\n  /**\n   * Instantiates a new ThinRenderTargetTexture.\n   * Tiny helper class to wrap a RenderTargetWrapper in a texture.\n   * This can be used as an internal texture wrapper in ThinEngine to benefit from the cache and to hold on the associated RTT\n   * @param engine Define the internalTexture to wrap\n   * @param size Define the size of the RTT to create\n   * @param options Define rendertarget options\n   */\n  constructor(engine, size, options) {\n    super(null);\n    this._renderTarget = null;\n    this._engine = engine;\n    this._renderTargetOptions = options;\n    this.resize(size);\n  }\n  /**\n   * Gets the render target wrapper associated with this render target\n   */\n  get renderTarget() {\n    return this._renderTarget;\n  }\n  /**\n   * Resize the texture to a new desired size.\n   * Be careful as it will recreate all the data in the new texture.\n   * @param size Define the new size. It can be:\n   *   - a number for squared texture,\n   *   - an object containing { width: number, height: number }\n   */\n  resize(size) {\n    var _a;\n    (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.dispose();\n    this._renderTarget = null;\n    this._texture = null;\n    this._size = size;\n    if (this._engine) {\n      this._renderTarget = this._engine.createRenderTargetTexture(this._size, this._renderTargetOptions);\n    }\n    this._texture = this.renderTarget.texture;\n  }\n  /**\n   * Get the underlying lower level texture from Babylon.\n   * @returns the internal texture\n   */\n  getInternalTexture() {\n    return this._texture;\n  }\n  /**\n   * Get the class name of the texture.\n   * @returns \"ThinRenderTargetTexture\"\n   */\n  getClassName() {\n    return \"ThinRenderTargetTexture\";\n  }\n  /**\n   * Dispose the texture and release its associated resources.\n   * @param disposeOnlyFramebuffers\n   */\n  dispose(disposeOnlyFramebuffers = false) {\n    var _a;\n    (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.dispose(true);\n    this._renderTarget = null;\n    if (!disposeOnlyFramebuffers) {\n      super.dispose();\n    }\n  }\n}","map":{"version":3,"mappings":"AAKA,SAASA,WAAW,QAAQ,kBAAgB;AAG5C;;;;AAIA,OAAM,MAAOC,uBAAwB,SAAQD,WAAW;EAapD;;;;;;;;EAQAE,YAAYC,MAAkB,EAAEC,IAAiB,EAAEC,OAAoC;IACnF,KAAK,CAAC,IAAI,CAAC;IAnBP,kBAAa,GAAkC,IAAI;IAoBvD,IAAI,CAACC,OAAO,GAAGH,MAAM;IACrB,IAAI,CAACI,oBAAoB,GAAGF,OAAO;IACnC,IAAI,CAACG,MAAM,CAACJ,IAAI,CAAC;EACrB;EApBA;;;EAGA,IAAWK,YAAY;IACnB,OAAO,IAAI,CAACC,aAAa;EAC7B;EAiBA;;;;;;;EAOOF,MAAM,CAACJ,IAAiB;;IAC3B,UAAI,CAACM,aAAa,0CAAEC,OAAO,EAAE;IAC7B,IAAI,CAACD,aAAa,GAAG,IAAI;IACzB,IAAI,CAACE,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,KAAK,GAAGT,IAAI;IAEjB,IAAI,IAAI,CAACE,OAAO,EAAE;MACd,IAAI,CAACI,aAAa,GAAG,IAAI,CAACJ,OAAO,CAACQ,yBAAyB,CAAC,IAAI,CAACD,KAAK,EAAE,IAAI,CAACN,oBAAoB,CAAC;;IAEtG,IAAI,CAACK,QAAQ,GAAG,IAAI,CAACH,YAAa,CAACM,OAAO;EAC9C;EAEA;;;;EAIOC,kBAAkB;IACrB,OAAO,IAAI,CAACJ,QAAQ;EACxB;EAEA;;;;EAIOK,YAAY;IACf,OAAO,yBAAyB;EACpC;EAEA;;;;EAION,OAAO,CAACO,uBAAuB,GAAG,KAAK;;IAC1C,UAAI,CAACR,aAAa,0CAAEC,OAAO,CAAC,IAAI,CAAC;IACjC,IAAI,CAACD,aAAa,GAAG,IAAI;IAEzB,IAAI,CAACQ,uBAAuB,EAAE;MAC1B,KAAK,CAACP,OAAO,EAAE;;EAEvB","names":["ThinTexture","ThinRenderTargetTexture","constructor","engine","size","options","_engine","_renderTargetOptions","resize","renderTarget","_renderTarget","dispose","_texture","_size","createRenderTargetTexture","texture","getInternalTexture","getClassName","disposeOnlyFramebuffers"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/Textures/thinRenderTargetTexture.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport type { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\n\r\nimport type { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport type { IRenderTargetTexture, RenderTargetWrapper } from \"../../Engines/renderTargetWrapper\";\r\nimport { ThinTexture } from \"./thinTexture\";\r\nimport type { TextureSize, RenderTargetCreationOptions } from \"./textureCreationOptions\";\r\n\r\n/**\r\n * This is a tiny helper class to wrap a RenderTargetWrapper in a texture\r\n * usable as the input of an effect.\r\n */\r\nexport class ThinRenderTargetTexture extends ThinTexture implements IRenderTargetTexture {\r\n    private readonly _renderTargetOptions: RenderTargetCreationOptions;\r\n\r\n    private _renderTarget: Nullable<RenderTargetWrapper> = null;\r\n    private _size: TextureSize;\r\n\r\n    /**\r\n     * Gets the render target wrapper associated with this render target\r\n     */\r\n    public get renderTarget(): Nullable<RenderTargetWrapper> {\r\n        return this._renderTarget;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new ThinRenderTargetTexture.\r\n     * Tiny helper class to wrap a RenderTargetWrapper in a texture.\r\n     * This can be used as an internal texture wrapper in ThinEngine to benefit from the cache and to hold on the associated RTT\r\n     * @param engine Define the internalTexture to wrap\r\n     * @param size Define the size of the RTT to create\r\n     * @param options Define rendertarget options\r\n     */\r\n    constructor(engine: ThinEngine, size: TextureSize, options: RenderTargetCreationOptions) {\r\n        super(null);\r\n        this._engine = engine;\r\n        this._renderTargetOptions = options;\r\n        this.resize(size);\r\n    }\r\n\r\n    /**\r\n     * Resize the texture to a new desired size.\r\n     * Be careful as it will recreate all the data in the new texture.\r\n     * @param size Define the new size. It can be:\r\n     *   - a number for squared texture,\r\n     *   - an object containing { width: number, height: number }\r\n     */\r\n    public resize(size: TextureSize): void {\r\n        this._renderTarget?.dispose();\r\n        this._renderTarget = null;\r\n        this._texture = null;\r\n        this._size = size;\r\n\r\n        if (this._engine) {\r\n            this._renderTarget = this._engine.createRenderTargetTexture(this._size, this._renderTargetOptions);\r\n        }\r\n        this._texture = this.renderTarget!.texture;\r\n    }\r\n\r\n    /**\r\n     * Get the underlying lower level texture from Babylon.\r\n     * @returns the internal texture\r\n     */\r\n    public getInternalTexture(): Nullable<InternalTexture> {\r\n        return this._texture;\r\n    }\r\n\r\n    /**\r\n     * Get the class name of the texture.\r\n     * @returns \"ThinRenderTargetTexture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"ThinRenderTargetTexture\";\r\n    }\r\n\r\n    /**\r\n     * Dispose the texture and release its associated resources.\r\n     * @param disposeOnlyFramebuffers\r\n     */\r\n    public dispose(disposeOnlyFramebuffers = false): void {\r\n        this._renderTarget?.dispose(true);\r\n        this._renderTarget = null;\r\n\r\n        if (!disposeOnlyFramebuffers) {\r\n            super.dispose();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}