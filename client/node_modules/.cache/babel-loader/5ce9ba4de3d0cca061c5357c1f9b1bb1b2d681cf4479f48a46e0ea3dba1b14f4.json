{"ast":null,"code":"// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nconst name = \"colorCorrectionPixelShader\";\nconst shader = `uniform sampler2D textureSampler; \nuniform sampler2D colorTable; \nvarying vec2 vUV;\nconst float SLICE_COUNT=16.0; \nvec4 sampleAs3DTexture(sampler2D textureSampler,vec3 uv,float width) {\nfloat sliceSize=1.0/width; \nfloat slicePixelSize=sliceSize/width; \nfloat sliceInnerSize=slicePixelSize*(width-1.0); \nfloat zSlice0=min(floor(uv.z*width),width-1.0);\nfloat zSlice1=min(zSlice0+1.0,width-1.0);\nfloat xOffset=slicePixelSize*0.5+uv.x*sliceInnerSize;\nfloat s0=xOffset+(zSlice0*sliceSize);\nfloat s1=xOffset+(zSlice1*sliceSize);\nvec4 slice0Color=texture2D(textureSampler,vec2(s0,uv.y));\nvec4 slice1Color=texture2D(textureSampler,vec2(s1,uv.y));\nfloat zOffset=mod(uv.z*width,1.0);\nvec4 result=mix(slice0Color,slice1Color,zOffset);\nreturn result;\n}\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\n{\nvec4 screen_color=texture2D(textureSampler,vUV);\ngl_FragColor=sampleAs3DTexture(colorTable,screen_color.rgb,SLICE_COUNT);\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const colorCorrectionPixelShader = {\n  name,\n  shader\n};","map":{"version":3,"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,2BAAyB;AAErD,MAAMC,IAAI,GAAG,4BAA4B;AACzC,MAAMC,MAAM,GAAG;;;;;;;;;;;;;;;;;;;;;;;;EAwBb;AACF;AACAF,WAAW,CAACG,YAAY,CAACF,IAAI,CAAC,GAAGC,MAAM;AACvC;AACA,OAAO,MAAME,0BAA0B,GAAG;EAAEH,IAAI;EAAEC;AAAM,CAAE","names":["ShaderStore","name","shader","ShadersStore","colorCorrectionPixelShader"],"sourceRoot":"","sources":["../../../../lts/core/generated/Shaders/colorCorrection.fragment.ts"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"colorCorrectionPixelShader\";\nconst shader = `uniform sampler2D textureSampler; \runiform sampler2D colorTable; \rvarying vec2 vUV;\rconst float SLICE_COUNT=16.0; \rvec4 sampleAs3DTexture(sampler2D textureSampler,vec3 uv,float width) {\rfloat sliceSize=1.0/width; \rfloat slicePixelSize=sliceSize/width; \rfloat sliceInnerSize=slicePixelSize*(width-1.0); \rfloat zSlice0=min(floor(uv.z*width),width-1.0);\rfloat zSlice1=min(zSlice0+1.0,width-1.0);\rfloat xOffset=slicePixelSize*0.5+uv.x*sliceInnerSize;\rfloat s0=xOffset+(zSlice0*sliceSize);\rfloat s1=xOffset+(zSlice1*sliceSize);\rvec4 slice0Color=texture2D(textureSampler,vec2(s0,uv.y));\rvec4 slice1Color=texture2D(textureSampler,vec2(s1,uv.y));\rfloat zOffset=mod(uv.z*width,1.0);\rvec4 result=mix(slice0Color,slice1Color,zOffset);\rreturn result;\r}\r#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\r{\rvec4 screen_color=texture2D(textureSampler,vUV);\rgl_FragColor=sampleAs3DTexture(colorTable,screen_color.rgb,SLICE_COUNT);\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const colorCorrectionPixelShader = { name, shader };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}