{"ast":null,"code":"import { ThinEngine } from \"../../Engines/thinEngine.js\";\nimport { WebGLDataBuffer } from \"../../Meshes/WebGL/webGLDataBuffer.js\";\nThinEngine.prototype.createUniformBuffer = function (elements) {\n  const ubo = this._gl.createBuffer();\n  if (!ubo) {\n    throw new Error(\"Unable to create uniform buffer\");\n  }\n  const result = new WebGLDataBuffer(ubo);\n  this.bindUniformBuffer(result);\n  if (elements instanceof Float32Array) {\n    this._gl.bufferData(this._gl.UNIFORM_BUFFER, elements, this._gl.STATIC_DRAW);\n  } else {\n    this._gl.bufferData(this._gl.UNIFORM_BUFFER, new Float32Array(elements), this._gl.STATIC_DRAW);\n  }\n  this.bindUniformBuffer(null);\n  result.references = 1;\n  return result;\n};\nThinEngine.prototype.createDynamicUniformBuffer = function (elements) {\n  const ubo = this._gl.createBuffer();\n  if (!ubo) {\n    throw new Error(\"Unable to create dynamic uniform buffer\");\n  }\n  const result = new WebGLDataBuffer(ubo);\n  this.bindUniformBuffer(result);\n  if (elements instanceof Float32Array) {\n    this._gl.bufferData(this._gl.UNIFORM_BUFFER, elements, this._gl.DYNAMIC_DRAW);\n  } else {\n    this._gl.bufferData(this._gl.UNIFORM_BUFFER, new Float32Array(elements), this._gl.DYNAMIC_DRAW);\n  }\n  this.bindUniformBuffer(null);\n  result.references = 1;\n  return result;\n};\nThinEngine.prototype.updateUniformBuffer = function (uniformBuffer, elements, offset, count) {\n  this.bindUniformBuffer(uniformBuffer);\n  if (offset === undefined) {\n    offset = 0;\n  }\n  if (count === undefined) {\n    if (elements instanceof Float32Array) {\n      this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, offset, elements);\n    } else {\n      this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, offset, new Float32Array(elements));\n    }\n  } else {\n    if (elements instanceof Float32Array) {\n      this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, 0, elements.subarray(offset, offset + count));\n    } else {\n      this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, 0, new Float32Array(elements).subarray(offset, offset + count));\n    }\n  }\n  this.bindUniformBuffer(null);\n};\nThinEngine.prototype.bindUniformBuffer = function (buffer) {\n  this._gl.bindBuffer(this._gl.UNIFORM_BUFFER, buffer ? buffer.underlyingResource : null);\n};\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nThinEngine.prototype.bindUniformBufferBase = function (buffer, location, name) {\n  this._gl.bindBufferBase(this._gl.UNIFORM_BUFFER, location, buffer ? buffer.underlyingResource : null);\n};\nThinEngine.prototype.bindUniformBlock = function (pipelineContext, blockName, index) {\n  const program = pipelineContext.program;\n  const uniformLocation = this._gl.getUniformBlockIndex(program, blockName);\n  if (uniformLocation !== 0xffffffff) {\n    this._gl.uniformBlockBinding(program, uniformLocation, index);\n  }\n};","map":{"version":3,"mappings":"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","names":["ThinEngine","WebGLDataBuffer","prototype","createUniformBuffer","elements","ubo","_gl","createBuffer","Error","result","bindUniformBuffer","Float32Array","bufferData","UNIFORM_BUFFER","STATIC_DRAW","references","createDynamicUniformBuffer","DYNAMIC_DRAW","updateUniformBuffer","uniformBuffer","offset","count","undefined","bufferSubData","subarray","buffer","bindBuffer","underlyingResource","bindUniformBufferBase","location","name","bindBufferBase","bindUniformBlock","pipelineContext","blockName","index","program","uniformLocation","getUniformBlockIndex","uniformBlockBinding"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/Extensions/engine.uniformBuffer.ts"],"sourcesContent":["import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport type { FloatArray, Nullable } from \"../../types\";\r\nimport type { DataBuffer } from \"../../Buffers/dataBuffer\";\r\nimport { WebGLDataBuffer } from \"../../Meshes/WebGL/webGLDataBuffer\";\r\nimport type { IPipelineContext } from \"../IPipelineContext\";\r\nimport type { WebGLPipelineContext } from \"../WebGL/webGLPipelineContext\";\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Create an uniform buffer\r\n         * @see https://doc.babylonjs.com/setup/support/webGL2#uniform-buffer-objets\r\n         * @param elements defines the content of the uniform buffer\r\n         * @returns the webGL uniform buffer\r\n         */\r\n        createUniformBuffer(elements: FloatArray): DataBuffer;\r\n\r\n        /**\r\n         * Create a dynamic uniform buffer\r\n         * @see https://doc.babylonjs.com/setup/support/webGL2#uniform-buffer-objets\r\n         * @param elements defines the content of the uniform buffer\r\n         * @returns the webGL uniform buffer\r\n         */\r\n        createDynamicUniformBuffer(elements: FloatArray): DataBuffer;\r\n\r\n        /**\r\n         * Update an existing uniform buffer\r\n         * @see https://doc.babylonjs.com/setup/support/webGL2#uniform-buffer-objets\r\n         * @param uniformBuffer defines the target uniform buffer\r\n         * @param elements defines the content to update\r\n         * @param offset defines the offset in the uniform buffer where update should start\r\n         * @param count defines the size of the data to update\r\n         */\r\n        updateUniformBuffer(uniformBuffer: DataBuffer, elements: FloatArray, offset?: number, count?: number): void;\r\n\r\n        /**\r\n         * Bind an uniform buffer to the current webGL context\r\n         * @param buffer defines the buffer to bind\r\n         */\r\n        bindUniformBuffer(buffer: Nullable<DataBuffer>): void;\r\n\r\n        /**\r\n         * Bind a buffer to the current webGL context at a given location\r\n         * @param buffer defines the buffer to bind\r\n         * @param location defines the index where to bind the buffer\r\n         * @param name Name of the uniform variable to bind\r\n         */\r\n        bindUniformBufferBase(buffer: DataBuffer, location: number, name: string): void;\r\n\r\n        /**\r\n         * Bind a specific block at a given index in a specific shader program\r\n         * @param pipelineContext defines the pipeline context to use\r\n         * @param blockName defines the block name\r\n         * @param index defines the index where to bind the block\r\n         */\r\n        bindUniformBlock(pipelineContext: IPipelineContext, blockName: string, index: number): void;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.createUniformBuffer = function (elements: FloatArray): DataBuffer {\r\n    const ubo = this._gl.createBuffer();\r\n\r\n    if (!ubo) {\r\n        throw new Error(\"Unable to create uniform buffer\");\r\n    }\r\n    const result = new WebGLDataBuffer(ubo);\r\n\r\n    this.bindUniformBuffer(result);\r\n\r\n    if (elements instanceof Float32Array) {\r\n        this._gl.bufferData(this._gl.UNIFORM_BUFFER, <Float32Array>elements, this._gl.STATIC_DRAW);\r\n    } else {\r\n        this._gl.bufferData(this._gl.UNIFORM_BUFFER, new Float32Array(<number[]>elements), this._gl.STATIC_DRAW);\r\n    }\r\n\r\n    this.bindUniformBuffer(null);\r\n\r\n    result.references = 1;\r\n    return result;\r\n};\r\n\r\nThinEngine.prototype.createDynamicUniformBuffer = function (elements: FloatArray): DataBuffer {\r\n    const ubo = this._gl.createBuffer();\r\n\r\n    if (!ubo) {\r\n        throw new Error(\"Unable to create dynamic uniform buffer\");\r\n    }\r\n\r\n    const result = new WebGLDataBuffer(ubo);\r\n    this.bindUniformBuffer(result);\r\n\r\n    if (elements instanceof Float32Array) {\r\n        this._gl.bufferData(this._gl.UNIFORM_BUFFER, <Float32Array>elements, this._gl.DYNAMIC_DRAW);\r\n    } else {\r\n        this._gl.bufferData(this._gl.UNIFORM_BUFFER, new Float32Array(<number[]>elements), this._gl.DYNAMIC_DRAW);\r\n    }\r\n\r\n    this.bindUniformBuffer(null);\r\n\r\n    result.references = 1;\r\n    return result;\r\n};\r\n\r\nThinEngine.prototype.updateUniformBuffer = function (uniformBuffer: DataBuffer, elements: FloatArray, offset?: number, count?: number): void {\r\n    this.bindUniformBuffer(uniformBuffer);\r\n\r\n    if (offset === undefined) {\r\n        offset = 0;\r\n    }\r\n\r\n    if (count === undefined) {\r\n        if (elements instanceof Float32Array) {\r\n            this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, offset, <Float32Array>elements);\r\n        } else {\r\n            this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, offset, new Float32Array(<number[]>elements));\r\n        }\r\n    } else {\r\n        if (elements instanceof Float32Array) {\r\n            this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, 0, <Float32Array>elements.subarray(offset, offset + count));\r\n        } else {\r\n            this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, 0, new Float32Array(<number[]>elements).subarray(offset, offset + count));\r\n        }\r\n    }\r\n\r\n    this.bindUniformBuffer(null);\r\n};\r\n\r\nThinEngine.prototype.bindUniformBuffer = function (buffer: Nullable<DataBuffer>): void {\r\n    this._gl.bindBuffer(this._gl.UNIFORM_BUFFER, buffer ? buffer.underlyingResource : null);\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nThinEngine.prototype.bindUniformBufferBase = function (buffer: DataBuffer, location: number, name: string): void {\r\n    this._gl.bindBufferBase(this._gl.UNIFORM_BUFFER, location, buffer ? buffer.underlyingResource : null);\r\n};\r\n\r\nThinEngine.prototype.bindUniformBlock = function (pipelineContext: IPipelineContext, blockName: string, index: number): void {\r\n    const program = (pipelineContext as WebGLPipelineContext).program!;\r\n\r\n    const uniformLocation = this._gl.getUniformBlockIndex(program, blockName);\r\n\r\n    if (uniformLocation !== 0xffffffff) {\r\n        this._gl.uniformBlockBinding(program, uniformLocation, index);\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}