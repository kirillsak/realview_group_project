{"ast":null,"code":"/**\n * Size containing width and height\n */\nexport class Size {\n  /**\n   * Creates a Size object from the given width and height (floats).\n   * @param width width of the new size\n   * @param height height of the new size\n   */\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n  /**\n   * Returns a string with the Size width and height\n   * @returns a string with the Size width and height\n   */\n  toString() {\n    return `{W: ${this.width}, H: ${this.height}}`;\n  }\n  /**\n   * \"Size\"\n   * @returns the string \"Size\"\n   */\n  getClassName() {\n    return \"Size\";\n  }\n  /**\n   * Returns the Size hash code.\n   * @returns a hash code for a unique width and height\n   */\n  getHashCode() {\n    let hash = this.width | 0;\n    hash = hash * 397 ^ (this.height | 0);\n    return hash;\n  }\n  /**\n   * Updates the current size from the given one.\n   * @param src the given size\n   */\n  copyFrom(src) {\n    this.width = src.width;\n    this.height = src.height;\n  }\n  /**\n   * Updates in place the current Size from the given floats.\n   * @param width width of the new size\n   * @param height height of the new size\n   * @returns the updated Size.\n   */\n  copyFromFloats(width, height) {\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n  /**\n   * Updates in place the current Size from the given floats.\n   * @param width width to set\n   * @param height height to set\n   * @returns the updated Size.\n   */\n  set(width, height) {\n    return this.copyFromFloats(width, height);\n  }\n  /**\n   * Multiplies the width and height by numbers\n   * @param w factor to multiple the width by\n   * @param h factor to multiple the height by\n   * @returns a new Size set with the multiplication result of the current Size and the given floats.\n   */\n  multiplyByFloats(w, h) {\n    return new Size(this.width * w, this.height * h);\n  }\n  /**\n   * Clones the size\n   * @returns a new Size copied from the given one.\n   */\n  clone() {\n    return new Size(this.width, this.height);\n  }\n  /**\n   * True if the current Size and the given one width and height are strictly equal.\n   * @param other the other size to compare against\n   * @returns True if the current Size and the given one width and height are strictly equal.\n   */\n  equals(other) {\n    if (!other) {\n      return false;\n    }\n    return this.width === other.width && this.height === other.height;\n  }\n  /**\n   * The surface of the Size : width * height (float).\n   */\n  get surface() {\n    return this.width * this.height;\n  }\n  /**\n   * Create a new size of zero\n   * @returns a new Size set to (0.0, 0.0)\n   */\n  static Zero() {\n    return new Size(0.0, 0.0);\n  }\n  /**\n   * Sums the width and height of two sizes\n   * @param otherSize size to add to this size\n   * @returns a new Size set as the addition result of the current Size and the given one.\n   */\n  add(otherSize) {\n    const r = new Size(this.width + otherSize.width, this.height + otherSize.height);\n    return r;\n  }\n  /**\n   * Subtracts the width and height of two\n   * @param otherSize size to subtract to this size\n   * @returns a new Size set as the subtraction result of  the given one from the current Size.\n   */\n  subtract(otherSize) {\n    const r = new Size(this.width - otherSize.width, this.height - otherSize.height);\n    return r;\n  }\n  /**\n   * Creates a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\n   * @param start starting size to lerp between\n   * @param end end size to lerp between\n   * @param amount amount to lerp between the start and end values\n   * @returns a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\n   */\n  static Lerp(start, end, amount) {\n    const w = start.width + (end.width - start.width) * amount;\n    const h = start.height + (end.height - start.height) * amount;\n    return new Size(w, h);\n  }\n}","map":{"version":3,"mappings":"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","names":["Size","constructor","width","height","toString","getClassName","getHashCode","hash","copyFrom","src","copyFromFloats","set","multiplyByFloats","w","h","clone","equals","other","surface","Zero","add","otherSize","r","subtract","Lerp","start","end","amount"],"sourceRoot":"","sources":["../../../../lts/core/generated/Maths/math.size.ts"],"sourcesContent":["/**\r\n * Interface for the size containing width and height\r\n */\r\nexport interface ISize {\r\n    /**\r\n     * Width\r\n     */\r\n    width: number;\r\n    /**\r\n     * Height\r\n     */\r\n    height: number;\r\n}\r\n\r\n/**\r\n * Size containing width and height\r\n */\r\nexport class Size implements ISize {\r\n    /**\r\n     * Width\r\n     */\r\n    public width: number;\r\n    /**\r\n     * Height\r\n     */\r\n    public height: number;\r\n\r\n    /**\r\n     * Creates a Size object from the given width and height (floats).\r\n     * @param width width of the new size\r\n     * @param height height of the new size\r\n     */\r\n    public constructor(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Returns a string with the Size width and height\r\n     * @returns a string with the Size width and height\r\n     */\r\n    public toString(): string {\r\n        return `{W: ${this.width}, H: ${this.height}}`;\r\n    }\r\n    /**\r\n     * \"Size\"\r\n     * @returns the string \"Size\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Size\";\r\n    }\r\n    /**\r\n     * Returns the Size hash code.\r\n     * @returns a hash code for a unique width and height\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = this.width | 0;\r\n        hash = (hash * 397) ^ (this.height | 0);\r\n        return hash;\r\n    }\r\n    /**\r\n     * Updates the current size from the given one.\r\n     * @param src the given size\r\n     */\r\n    public copyFrom(src: Size) {\r\n        this.width = src.width;\r\n        this.height = src.height;\r\n    }\r\n    /**\r\n     * Updates in place the current Size from the given floats.\r\n     * @param width width of the new size\r\n     * @param height height of the new size\r\n     * @returns the updated Size.\r\n     */\r\n    public copyFromFloats(width: number, height: number): Size {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n    /**\r\n     * Updates in place the current Size from the given floats.\r\n     * @param width width to set\r\n     * @param height height to set\r\n     * @returns the updated Size.\r\n     */\r\n    public set(width: number, height: number): Size {\r\n        return this.copyFromFloats(width, height);\r\n    }\r\n    /**\r\n     * Multiplies the width and height by numbers\r\n     * @param w factor to multiple the width by\r\n     * @param h factor to multiple the height by\r\n     * @returns a new Size set with the multiplication result of the current Size and the given floats.\r\n     */\r\n    public multiplyByFloats(w: number, h: number): Size {\r\n        return new Size(this.width * w, this.height * h);\r\n    }\r\n    /**\r\n     * Clones the size\r\n     * @returns a new Size copied from the given one.\r\n     */\r\n    public clone(): Size {\r\n        return new Size(this.width, this.height);\r\n    }\r\n    /**\r\n     * True if the current Size and the given one width and height are strictly equal.\r\n     * @param other the other size to compare against\r\n     * @returns True if the current Size and the given one width and height are strictly equal.\r\n     */\r\n    public equals(other: Size): boolean {\r\n        if (!other) {\r\n            return false;\r\n        }\r\n        return this.width === other.width && this.height === other.height;\r\n    }\r\n    /**\r\n     * The surface of the Size : width * height (float).\r\n     */\r\n    public get surface(): number {\r\n        return this.width * this.height;\r\n    }\r\n    /**\r\n     * Create a new size of zero\r\n     * @returns a new Size set to (0.0, 0.0)\r\n     */\r\n    public static Zero(): Size {\r\n        return new Size(0.0, 0.0);\r\n    }\r\n    /**\r\n     * Sums the width and height of two sizes\r\n     * @param otherSize size to add to this size\r\n     * @returns a new Size set as the addition result of the current Size and the given one.\r\n     */\r\n    public add(otherSize: Size): Size {\r\n        const r = new Size(this.width + otherSize.width, this.height + otherSize.height);\r\n        return r;\r\n    }\r\n    /**\r\n     * Subtracts the width and height of two\r\n     * @param otherSize size to subtract to this size\r\n     * @returns a new Size set as the subtraction result of  the given one from the current Size.\r\n     */\r\n    public subtract(otherSize: Size): Size {\r\n        const r = new Size(this.width - otherSize.width, this.height - otherSize.height);\r\n        return r;\r\n    }\r\n    /**\r\n     * Creates a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\r\n     * @param start starting size to lerp between\r\n     * @param end end size to lerp between\r\n     * @param amount amount to lerp between the start and end values\r\n     * @returns a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\r\n     */\r\n    public static Lerp(start: Size, end: Size, amount: number): Size {\r\n        const w = start.width + (end.width - start.width) * amount;\r\n        const h = start.height + (end.height - start.height) * amount;\r\n\r\n        return new Size(w, h);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}