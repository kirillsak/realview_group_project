{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { serialize } from \"../Misc/decorators.js\";\nimport { ImageProcessingConfiguration } from \"../Materials/imageProcessingConfiguration.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport \"../Shaders/imageProcessing.fragment.js\";\nimport \"../Shaders/postprocess.vertex.js\";\n/**\n * ImageProcessingPostProcess\n * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#imageprocessing\n */\nexport class ImageProcessingPostProcess extends PostProcess {\n  constructor(name, options, camera = null, samplingMode, engine, reusable, textureType = 0, imageProcessingConfiguration) {\n    super(name, \"imageProcessing\", [], [], options, camera, samplingMode, engine, reusable, null, textureType, \"postprocess\", null, true);\n    this._fromLinearSpace = true;\n    /**\n     * Defines cache preventing GC.\n     */\n    this._defines = {\n      IMAGEPROCESSING: false,\n      VIGNETTE: false,\n      VIGNETTEBLENDMODEMULTIPLY: false,\n      VIGNETTEBLENDMODEOPAQUE: false,\n      TONEMAPPING: false,\n      TONEMAPPING_ACES: false,\n      CONTRAST: false,\n      COLORCURVES: false,\n      COLORGRADING: false,\n      COLORGRADING3D: false,\n      FROMLINEARSPACE: false,\n      SAMPLER3DGREENDEPTH: false,\n      SAMPLER3DBGRMAP: false,\n      DITHER: false,\n      IMAGEPROCESSINGPOSTPROCESS: false,\n      EXPOSURE: false,\n      SKIPFINALCOLORCLAMP: false\n    };\n    // Setup the configuration as forced by the constructor. This would then not force the\n    // scene materials output in linear space and let untouched the default forward pass.\n    if (imageProcessingConfiguration) {\n      imageProcessingConfiguration.applyByPostProcess = true;\n      this._attachImageProcessingConfiguration(imageProcessingConfiguration, true);\n      // This will cause the shader to be compiled\n      this._updateParameters();\n    }\n    // Setup the default processing configuration to the scene.\n    else {\n      this._attachImageProcessingConfiguration(null, true);\n      this.imageProcessingConfiguration.applyByPostProcess = true;\n    }\n    this.onApply = effect => {\n      this.imageProcessingConfiguration.bind(effect, this.aspectRatio);\n    };\n  }\n  /**\n   * Gets the image processing configuration used either in this material.\n   */\n  get imageProcessingConfiguration() {\n    return this._imageProcessingConfiguration;\n  }\n  /**\n   * Sets the Default image processing configuration used either in the this material.\n   *\n   * If sets to null, the scene one is in use.\n   */\n  set imageProcessingConfiguration(value) {\n    // We are almost sure it is applied by post process as\n    // We are in the post process :-)\n    value.applyByPostProcess = true;\n    this._attachImageProcessingConfiguration(value);\n  }\n  /**\n   * Attaches a new image processing configuration to the PBR Material.\n   * @param configuration\n   * @param doNotBuild\n   */\n  _attachImageProcessingConfiguration(configuration, doNotBuild = false) {\n    if (configuration === this._imageProcessingConfiguration) {\n      return;\n    }\n    // Detaches observer.\n    if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n      this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n    }\n    // Pick the scene configuration if needed.\n    if (!configuration) {\n      let scene = null;\n      const engine = this.getEngine();\n      const camera = this.getCamera();\n      if (camera) {\n        scene = camera.getScene();\n      } else if (engine && engine.scenes) {\n        const scenes = engine.scenes;\n        scene = scenes[scenes.length - 1];\n      } else {\n        scene = EngineStore.LastCreatedScene;\n      }\n      if (scene) {\n        this._imageProcessingConfiguration = scene.imageProcessingConfiguration;\n      } else {\n        this._imageProcessingConfiguration = new ImageProcessingConfiguration();\n      }\n    } else {\n      this._imageProcessingConfiguration = configuration;\n    }\n    // Attaches observer.\n    if (this._imageProcessingConfiguration) {\n      this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\n        this._updateParameters();\n      });\n    }\n    // Ensure the effect will be rebuilt.\n    if (!doNotBuild) {\n      this._updateParameters();\n    }\n  }\n  /**\n   * If the post process is supported.\n   */\n  get isSupported() {\n    const effect = this.getEffect();\n    return !effect || effect.isSupported;\n  }\n  /**\n   * Gets Color curves setup used in the effect if colorCurvesEnabled is set to true .\n   */\n  get colorCurves() {\n    return this.imageProcessingConfiguration.colorCurves;\n  }\n  /**\n   * Sets Color curves setup used in the effect if colorCurvesEnabled is set to true .\n   */\n  set colorCurves(value) {\n    this.imageProcessingConfiguration.colorCurves = value;\n  }\n  /**\n   * Gets whether the color curves effect is enabled.\n   */\n  get colorCurvesEnabled() {\n    return this.imageProcessingConfiguration.colorCurvesEnabled;\n  }\n  /**\n   * Sets whether the color curves effect is enabled.\n   */\n  set colorCurvesEnabled(value) {\n    this.imageProcessingConfiguration.colorCurvesEnabled = value;\n  }\n  /**\n   * Gets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\n   */\n  get colorGradingTexture() {\n    return this.imageProcessingConfiguration.colorGradingTexture;\n  }\n  /**\n   * Sets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\n   */\n  set colorGradingTexture(value) {\n    this.imageProcessingConfiguration.colorGradingTexture = value;\n  }\n  /**\n   * Gets whether the color grading effect is enabled.\n   */\n  get colorGradingEnabled() {\n    return this.imageProcessingConfiguration.colorGradingEnabled;\n  }\n  /**\n   * Gets whether the color grading effect is enabled.\n   */\n  set colorGradingEnabled(value) {\n    this.imageProcessingConfiguration.colorGradingEnabled = value;\n  }\n  /**\n   * Gets exposure used in the effect.\n   */\n  get exposure() {\n    return this.imageProcessingConfiguration.exposure;\n  }\n  /**\n   * Sets exposure used in the effect.\n   */\n  set exposure(value) {\n    this.imageProcessingConfiguration.exposure = value;\n  }\n  /**\n   * Gets whether tonemapping is enabled or not.\n   */\n  get toneMappingEnabled() {\n    return this._imageProcessingConfiguration.toneMappingEnabled;\n  }\n  /**\n   * Sets whether tonemapping is enabled or not\n   */\n  set toneMappingEnabled(value) {\n    this._imageProcessingConfiguration.toneMappingEnabled = value;\n  }\n  /**\n   * Gets the type of tone mapping effect.\n   */\n  get toneMappingType() {\n    return this._imageProcessingConfiguration.toneMappingType;\n  }\n  /**\n   * Sets the type of tone mapping effect.\n   */\n  set toneMappingType(value) {\n    this._imageProcessingConfiguration.toneMappingType = value;\n  }\n  /**\n   * Gets contrast used in the effect.\n   */\n  get contrast() {\n    return this.imageProcessingConfiguration.contrast;\n  }\n  /**\n   * Sets contrast used in the effect.\n   */\n  set contrast(value) {\n    this.imageProcessingConfiguration.contrast = value;\n  }\n  /**\n   * Gets Vignette stretch size.\n   */\n  get vignetteStretch() {\n    return this.imageProcessingConfiguration.vignetteStretch;\n  }\n  /**\n   * Sets Vignette stretch size.\n   */\n  set vignetteStretch(value) {\n    this.imageProcessingConfiguration.vignetteStretch = value;\n  }\n  /**\n   * Gets Vignette center X Offset.\n   * @deprecated use vignetteCenterX instead\n   */\n  get vignetteCentreX() {\n    return this.imageProcessingConfiguration.vignetteCenterX;\n  }\n  /**\n   * Sets Vignette center X Offset.\n   * @deprecated use vignetteCenterX instead\n   */\n  set vignetteCentreX(value) {\n    this.imageProcessingConfiguration.vignetteCenterX = value;\n  }\n  /**\n   * Gets Vignette center Y Offset.\n   * @deprecated use vignetteCenterY instead\n   */\n  get vignetteCentreY() {\n    return this.imageProcessingConfiguration.vignetteCenterY;\n  }\n  /**\n   * Sets Vignette center Y Offset.\n   * @deprecated use vignetteCenterY instead\n   */\n  set vignetteCentreY(value) {\n    this.imageProcessingConfiguration.vignetteCenterY = value;\n  }\n  /**\n   * Vignette center Y Offset.\n   */\n  get vignetteCenterY() {\n    return this.imageProcessingConfiguration.vignetteCenterY;\n  }\n  set vignetteCenterY(value) {\n    this.imageProcessingConfiguration.vignetteCenterY = value;\n  }\n  /**\n   * Vignette center X Offset.\n   */\n  get vignetteCenterX() {\n    return this.imageProcessingConfiguration.vignetteCenterX;\n  }\n  set vignetteCenterX(value) {\n    this.imageProcessingConfiguration.vignetteCenterX = value;\n  }\n  /**\n   * Gets Vignette weight or intensity of the vignette effect.\n   */\n  get vignetteWeight() {\n    return this.imageProcessingConfiguration.vignetteWeight;\n  }\n  /**\n   * Sets Vignette weight or intensity of the vignette effect.\n   */\n  set vignetteWeight(value) {\n    this.imageProcessingConfiguration.vignetteWeight = value;\n  }\n  /**\n   * Gets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\n   * if vignetteEnabled is set to true.\n   */\n  get vignetteColor() {\n    return this.imageProcessingConfiguration.vignetteColor;\n  }\n  /**\n   * Sets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\n   * if vignetteEnabled is set to true.\n   */\n  set vignetteColor(value) {\n    this.imageProcessingConfiguration.vignetteColor = value;\n  }\n  /**\n   * Gets Camera field of view used by the Vignette effect.\n   */\n  get vignetteCameraFov() {\n    return this.imageProcessingConfiguration.vignetteCameraFov;\n  }\n  /**\n   * Sets Camera field of view used by the Vignette effect.\n   */\n  set vignetteCameraFov(value) {\n    this.imageProcessingConfiguration.vignetteCameraFov = value;\n  }\n  /**\n   * Gets the vignette blend mode allowing different kind of effect.\n   */\n  get vignetteBlendMode() {\n    return this.imageProcessingConfiguration.vignetteBlendMode;\n  }\n  /**\n   * Sets the vignette blend mode allowing different kind of effect.\n   */\n  set vignetteBlendMode(value) {\n    this.imageProcessingConfiguration.vignetteBlendMode = value;\n  }\n  /**\n   * Gets whether the vignette effect is enabled.\n   */\n  get vignetteEnabled() {\n    return this.imageProcessingConfiguration.vignetteEnabled;\n  }\n  /**\n   * Sets whether the vignette effect is enabled.\n   */\n  set vignetteEnabled(value) {\n    this.imageProcessingConfiguration.vignetteEnabled = value;\n  }\n  /**\n   * Gets intensity of the dithering effect.\n   */\n  get ditheringIntensity() {\n    return this.imageProcessingConfiguration.ditheringIntensity;\n  }\n  /**\n   * Sets intensity of the dithering effect.\n   */\n  set ditheringIntensity(value) {\n    this.imageProcessingConfiguration.ditheringIntensity = value;\n  }\n  /**\n   * Gets whether the dithering effect is enabled.\n   */\n  get ditheringEnabled() {\n    return this.imageProcessingConfiguration.ditheringEnabled;\n  }\n  /**\n   * Sets whether the dithering effect is enabled.\n   */\n  set ditheringEnabled(value) {\n    this.imageProcessingConfiguration.ditheringEnabled = value;\n  }\n  /**\n   * Gets whether the input of the processing is in Gamma or Linear Space.\n   */\n  get fromLinearSpace() {\n    return this._fromLinearSpace;\n  }\n  /**\n   * Sets whether the input of the processing is in Gamma or Linear Space.\n   */\n  set fromLinearSpace(value) {\n    if (this._fromLinearSpace === value) {\n      return;\n    }\n    this._fromLinearSpace = value;\n    this._updateParameters();\n  }\n  /**\n   *  \"ImageProcessingPostProcess\"\n   * @returns \"ImageProcessingPostProcess\"\n   */\n  getClassName() {\n    return \"ImageProcessingPostProcess\";\n  }\n  /**\n   * @internal\n   */\n  _updateParameters() {\n    this._defines.FROMLINEARSPACE = this._fromLinearSpace;\n    this.imageProcessingConfiguration.prepareDefines(this._defines, true);\n    let defines = \"\";\n    for (const define in this._defines) {\n      if (this._defines[define]) {\n        defines += `#define ${define};\\r\\n`;\n      }\n    }\n    const samplers = [\"textureSampler\"];\n    const uniforms = [\"scale\"];\n    if (ImageProcessingConfiguration) {\n      ImageProcessingConfiguration.PrepareSamplers(samplers, this._defines);\n      ImageProcessingConfiguration.PrepareUniforms(uniforms, this._defines);\n    }\n    this.updateEffect(defines, uniforms, samplers);\n  }\n  dispose(camera) {\n    super.dispose(camera);\n    if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n      this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n    }\n    if (this._imageProcessingConfiguration) {\n      this.imageProcessingConfiguration.applyByPostProcess = false;\n    }\n  }\n}\n__decorate([serialize()], ImageProcessingPostProcess.prototype, \"_fromLinearSpace\", void 0);","map":{"version":3,"mappings":"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","names":["serialize","ImageProcessingConfiguration","PostProcess","EngineStore","ImageProcessingPostProcess","constructor","name","options","camera","samplingMode","engine","reusable","textureType","IMAGEPROCESSING","VIGNETTE","VIGNETTEBLENDMODEMULTIPLY","VIGNETTEBLENDMODEOPAQUE","TONEMAPPING","TONEMAPPING_ACES","CONTRAST","COLORCURVES","COLORGRADING","COLORGRADING3D","FROMLINEARSPACE","SAMPLER3DGREENDEPTH","SAMPLER3DBGRMAP","DITHER","IMAGEPROCESSINGPOSTPROCESS","EXPOSURE","SKIPFINALCOLORCLAMP","imageProcessingConfiguration","applyByPostProcess","_attachImageProcessingConfiguration","_updateParameters","onApply","effect","bind","aspectRatio","_imageProcessingConfiguration","value","configuration","doNotBuild","_imageProcessingObserver","onUpdateParameters","remove","scene","getEngine","getCamera","getScene","scenes","length","LastCreatedScene","add","isSupported","getEffect","colorCurves","colorCurvesEnabled","colorGradingTexture","colorGradingEnabled","exposure","toneMappingEnabled","toneMappingType","contrast","vignetteStretch","vignetteCentreX","vignetteCenterX","vignetteCentreY","vignetteCenterY","vignetteWeight","vignetteColor","vignetteCameraFov","vignetteBlendMode","vignetteEnabled","ditheringIntensity","ditheringEnabled","fromLinearSpace","_fromLinearSpace","getClassName","_defines","prepareDefines","defines","define","samplers","uniforms","PrepareSamplers","PrepareUniforms","updateEffect","dispose","__decorate"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/imageProcessingPostProcess.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../types\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { serialize } from \"../Misc/decorators\";\r\nimport type { Color4 } from \"../Maths/math.color\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { ColorCurves } from \"../Materials/colorCurves\";\r\nimport type { IImageProcessingConfigurationDefines } from \"../Materials/imageProcessingConfiguration\";\r\nimport { ImageProcessingConfiguration } from \"../Materials/imageProcessingConfiguration\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/imageProcessing.fragment\";\r\nimport \"../Shaders/postprocess.vertex\";\r\n\r\n/**\r\n * ImageProcessingPostProcess\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#imageprocessing\r\n */\r\nexport class ImageProcessingPostProcess extends PostProcess {\r\n    /**\r\n     * Default configuration related to image processing available in the PBR Material.\r\n     */\r\n    protected _imageProcessingConfiguration: ImageProcessingConfiguration;\r\n\r\n    /**\r\n     * Gets the image processing configuration used either in this material.\r\n     */\r\n    public get imageProcessingConfiguration(): ImageProcessingConfiguration {\r\n        return this._imageProcessingConfiguration;\r\n    }\r\n\r\n    /**\r\n     * Sets the Default image processing configuration used either in the this material.\r\n     *\r\n     * If sets to null, the scene one is in use.\r\n     */\r\n    public set imageProcessingConfiguration(value: ImageProcessingConfiguration) {\r\n        // We are almost sure it is applied by post process as\r\n        // We are in the post process :-)\r\n        value.applyByPostProcess = true;\r\n        this._attachImageProcessingConfiguration(value);\r\n    }\r\n\r\n    /**\r\n     * Keep track of the image processing observer to allow dispose and replace.\r\n     */\r\n    private _imageProcessingObserver: Nullable<Observer<ImageProcessingConfiguration>>;\r\n\r\n    /**\r\n     * Attaches a new image processing configuration to the PBR Material.\r\n     * @param configuration\r\n     * @param doNotBuild\r\n     */\r\n    protected _attachImageProcessingConfiguration(configuration: Nullable<ImageProcessingConfiguration>, doNotBuild = false): void {\r\n        if (configuration === this._imageProcessingConfiguration) {\r\n            return;\r\n        }\r\n\r\n        // Detaches observer.\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        // Pick the scene configuration if needed.\r\n        if (!configuration) {\r\n            let scene = null;\r\n            const engine = this.getEngine();\r\n            const camera = this.getCamera();\r\n\r\n            if (camera) {\r\n                scene = camera.getScene();\r\n            } else if (engine && engine.scenes) {\r\n                const scenes = engine.scenes;\r\n                scene = scenes[scenes.length - 1];\r\n            } else {\r\n                scene = EngineStore.LastCreatedScene;\r\n            }\r\n\r\n            if (scene) {\r\n                this._imageProcessingConfiguration = scene.imageProcessingConfiguration;\r\n            } else {\r\n                this._imageProcessingConfiguration = new ImageProcessingConfiguration();\r\n            }\r\n        } else {\r\n            this._imageProcessingConfiguration = configuration;\r\n        }\r\n\r\n        // Attaches observer.\r\n        if (this._imageProcessingConfiguration) {\r\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\r\n                this._updateParameters();\r\n            });\r\n        }\r\n\r\n        // Ensure the effect will be rebuilt.\r\n        if (!doNotBuild) {\r\n            this._updateParameters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the post process is supported.\r\n     */\r\n    public get isSupported(): boolean {\r\n        const effect = this.getEffect();\r\n        return !effect || effect.isSupported;\r\n    }\r\n\r\n    /**\r\n     * Gets Color curves setup used in the effect if colorCurvesEnabled is set to true .\r\n     */\r\n    public get colorCurves(): Nullable<ColorCurves> {\r\n        return this.imageProcessingConfiguration.colorCurves;\r\n    }\r\n    /**\r\n     * Sets Color curves setup used in the effect if colorCurvesEnabled is set to true .\r\n     */\r\n    public set colorCurves(value: Nullable<ColorCurves>) {\r\n        this.imageProcessingConfiguration.colorCurves = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the color curves effect is enabled.\r\n     */\r\n    public get colorCurvesEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.colorCurvesEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color curves effect is enabled.\r\n     */\r\n    public set colorCurvesEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.colorCurvesEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\r\n     */\r\n    public get colorGradingTexture(): Nullable<BaseTexture> {\r\n        return this.imageProcessingConfiguration.colorGradingTexture;\r\n    }\r\n    /**\r\n     * Sets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\r\n     */\r\n    public set colorGradingTexture(value: Nullable<BaseTexture>) {\r\n        this.imageProcessingConfiguration.colorGradingTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public get colorGradingEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.colorGradingEnabled;\r\n    }\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public set colorGradingEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.colorGradingEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets exposure used in the effect.\r\n     */\r\n    public get exposure(): number {\r\n        return this.imageProcessingConfiguration.exposure;\r\n    }\r\n    /**\r\n     * Sets exposure used in the effect.\r\n     */\r\n    public set exposure(value: number) {\r\n        this.imageProcessingConfiguration.exposure = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether tonemapping is enabled or not.\r\n     */\r\n    public get toneMappingEnabled(): boolean {\r\n        return this._imageProcessingConfiguration.toneMappingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether tonemapping is enabled or not\r\n     */\r\n    public set toneMappingEnabled(value: boolean) {\r\n        this._imageProcessingConfiguration.toneMappingEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the type of tone mapping effect.\r\n     */\r\n    public get toneMappingType(): number {\r\n        return this._imageProcessingConfiguration.toneMappingType;\r\n    }\r\n    /**\r\n     * Sets the type of tone mapping effect.\r\n     */\r\n    public set toneMappingType(value: number) {\r\n        this._imageProcessingConfiguration.toneMappingType = value;\r\n    }\r\n\r\n    /**\r\n     * Gets contrast used in the effect.\r\n     */\r\n    public get contrast(): number {\r\n        return this.imageProcessingConfiguration.contrast;\r\n    }\r\n    /**\r\n     * Sets contrast used in the effect.\r\n     */\r\n    public set contrast(value: number) {\r\n        this.imageProcessingConfiguration.contrast = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Vignette stretch size.\r\n     */\r\n    public get vignetteStretch(): number {\r\n        return this.imageProcessingConfiguration.vignetteStretch;\r\n    }\r\n    /**\r\n     * Sets Vignette stretch size.\r\n     */\r\n    public set vignetteStretch(value: number) {\r\n        this.imageProcessingConfiguration.vignetteStretch = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Vignette center X Offset.\r\n     * @deprecated use vignetteCenterX instead\r\n     */\r\n    public get vignetteCentreX(): number {\r\n        return this.imageProcessingConfiguration.vignetteCenterX;\r\n    }\r\n    /**\r\n     * Sets Vignette center X Offset.\r\n     * @deprecated use vignetteCenterX instead\r\n     */\r\n    public set vignetteCentreX(value: number) {\r\n        this.imageProcessingConfiguration.vignetteCenterX = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Vignette center Y Offset.\r\n     * @deprecated use vignetteCenterY instead\r\n     */\r\n    public get vignetteCentreY(): number {\r\n        return this.imageProcessingConfiguration.vignetteCenterY;\r\n    }\r\n    /**\r\n     * Sets Vignette center Y Offset.\r\n     * @deprecated use vignetteCenterY instead\r\n     */\r\n    public set vignetteCentreY(value: number) {\r\n        this.imageProcessingConfiguration.vignetteCenterY = value;\r\n    }\r\n\r\n    /**\r\n     * Vignette center Y Offset.\r\n     */\r\n    public get vignetteCenterY(): number {\r\n        return this.imageProcessingConfiguration.vignetteCenterY;\r\n    }\r\n    public set vignetteCenterY(value: number) {\r\n        this.imageProcessingConfiguration.vignetteCenterY = value;\r\n    }\r\n\r\n    /**\r\n     * Vignette center X Offset.\r\n     */\r\n    public get vignetteCenterX(): number {\r\n        return this.imageProcessingConfiguration.vignetteCenterX;\r\n    }\r\n    public set vignetteCenterX(value: number) {\r\n        this.imageProcessingConfiguration.vignetteCenterX = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Vignette weight or intensity of the vignette effect.\r\n     */\r\n    public get vignetteWeight(): number {\r\n        return this.imageProcessingConfiguration.vignetteWeight;\r\n    }\r\n    /**\r\n     * Sets Vignette weight or intensity of the vignette effect.\r\n     */\r\n    public set vignetteWeight(value: number) {\r\n        this.imageProcessingConfiguration.vignetteWeight = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\r\n     * if vignetteEnabled is set to true.\r\n     */\r\n    public get vignetteColor(): Color4 {\r\n        return this.imageProcessingConfiguration.vignetteColor;\r\n    }\r\n    /**\r\n     * Sets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\r\n     * if vignetteEnabled is set to true.\r\n     */\r\n    public set vignetteColor(value: Color4) {\r\n        this.imageProcessingConfiguration.vignetteColor = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Camera field of view used by the Vignette effect.\r\n     */\r\n    public get vignetteCameraFov(): number {\r\n        return this.imageProcessingConfiguration.vignetteCameraFov;\r\n    }\r\n    /**\r\n     * Sets Camera field of view used by the Vignette effect.\r\n     */\r\n    public set vignetteCameraFov(value: number) {\r\n        this.imageProcessingConfiguration.vignetteCameraFov = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public get vignetteBlendMode(): number {\r\n        return this.imageProcessingConfiguration.vignetteBlendMode;\r\n    }\r\n    /**\r\n     * Sets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public set vignetteBlendMode(value: number) {\r\n        this.imageProcessingConfiguration.vignetteBlendMode = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the vignette effect is enabled.\r\n     */\r\n    public get vignetteEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.vignetteEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the vignette effect is enabled.\r\n     */\r\n    public set vignetteEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.vignetteEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets intensity of the dithering effect.\r\n     */\r\n    public get ditheringIntensity(): number {\r\n        return this.imageProcessingConfiguration.ditheringIntensity;\r\n    }\r\n    /**\r\n     * Sets intensity of the dithering effect.\r\n     */\r\n    public set ditheringIntensity(value: number) {\r\n        this.imageProcessingConfiguration.ditheringIntensity = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the dithering effect is enabled.\r\n     */\r\n    public get ditheringEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.ditheringEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the dithering effect is enabled.\r\n     */\r\n    public set ditheringEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.ditheringEnabled = value;\r\n    }\r\n\r\n    @serialize()\r\n    private _fromLinearSpace = true;\r\n    /**\r\n     * Gets whether the input of the processing is in Gamma or Linear Space.\r\n     */\r\n    public get fromLinearSpace(): boolean {\r\n        return this._fromLinearSpace;\r\n    }\r\n    /**\r\n     * Sets whether the input of the processing is in Gamma or Linear Space.\r\n     */\r\n    public set fromLinearSpace(value: boolean) {\r\n        if (this._fromLinearSpace === value) {\r\n            return;\r\n        }\r\n\r\n        this._fromLinearSpace = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /**\r\n     * Defines cache preventing GC.\r\n     */\r\n    private _defines: IImageProcessingConfigurationDefines & { FROMLINEARSPACE: boolean } = {\r\n        IMAGEPROCESSING: false,\r\n        VIGNETTE: false,\r\n        VIGNETTEBLENDMODEMULTIPLY: false,\r\n        VIGNETTEBLENDMODEOPAQUE: false,\r\n        TONEMAPPING: false,\r\n        TONEMAPPING_ACES: false,\r\n        CONTRAST: false,\r\n        COLORCURVES: false,\r\n        COLORGRADING: false,\r\n        COLORGRADING3D: false,\r\n        FROMLINEARSPACE: false,\r\n        SAMPLER3DGREENDEPTH: false,\r\n        SAMPLER3DBGRMAP: false,\r\n        DITHER: false,\r\n        IMAGEPROCESSINGPOSTPROCESS: false,\r\n        EXPOSURE: false,\r\n        SKIPFINALCOLORCLAMP: false,\r\n    };\r\n\r\n    constructor(\r\n        name: string,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera> = null,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        imageProcessingConfiguration?: ImageProcessingConfiguration\r\n    ) {\r\n        super(name, \"imageProcessing\", [], [], options, camera, samplingMode, engine, reusable, null, textureType, \"postprocess\", null, true);\r\n\r\n        // Setup the configuration as forced by the constructor. This would then not force the\r\n        // scene materials output in linear space and let untouched the default forward pass.\r\n        if (imageProcessingConfiguration) {\r\n            imageProcessingConfiguration.applyByPostProcess = true;\r\n            this._attachImageProcessingConfiguration(imageProcessingConfiguration, true);\r\n            // This will cause the shader to be compiled\r\n            this._updateParameters();\r\n        }\r\n        // Setup the default processing configuration to the scene.\r\n        else {\r\n            this._attachImageProcessingConfiguration(null, true);\r\n            this.imageProcessingConfiguration.applyByPostProcess = true;\r\n        }\r\n\r\n        this.onApply = (effect: Effect) => {\r\n            this.imageProcessingConfiguration.bind(effect, this.aspectRatio);\r\n        };\r\n    }\r\n    /**\r\n     *  \"ImageProcessingPostProcess\"\r\n     * @returns \"ImageProcessingPostProcess\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"ImageProcessingPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateParameters(): void {\r\n        this._defines.FROMLINEARSPACE = this._fromLinearSpace;\r\n        this.imageProcessingConfiguration.prepareDefines(this._defines, true);\r\n        let defines = \"\";\r\n        for (const define in this._defines) {\r\n            if ((<any>this._defines)[define]) {\r\n                defines += `#define ${define};\\r\\n`;\r\n            }\r\n        }\r\n\r\n        const samplers = [\"textureSampler\"];\r\n        const uniforms = [\"scale\"];\r\n\r\n        if (ImageProcessingConfiguration) {\r\n            ImageProcessingConfiguration.PrepareSamplers(samplers, this._defines);\r\n            ImageProcessingConfiguration.PrepareUniforms(uniforms, this._defines);\r\n        }\r\n\r\n        this.updateEffect(defines, uniforms, samplers);\r\n    }\r\n\r\n    public dispose(camera?: Camera): void {\r\n        super.dispose(camera);\r\n\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        if (this._imageProcessingConfiguration) {\r\n            this.imageProcessingConfiguration.applyByPostProcess = false;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}