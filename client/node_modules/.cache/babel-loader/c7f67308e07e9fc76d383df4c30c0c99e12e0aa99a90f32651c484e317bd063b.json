{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\nconst NAME = \"KHR_materials_specular\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_specular/README.md)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_materials_specular {\n  /**\n   * @internal\n   */\n  constructor(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n    this.order = 190;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @internal */\n  dispose() {\n    this._loader = null;\n  }\n  /**\n   * @internal\n   */\n  loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, (extensionContext, extension) => {\n      const promises = new Array();\n      promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n      promises.push(this._loadSpecularPropertiesAsync(extensionContext, extension, babylonMaterial));\n      return Promise.all(promises).then(() => {});\n    });\n  }\n  _loadSpecularPropertiesAsync(context, properties, babylonMaterial) {\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(`${context}: Material type not supported`);\n    }\n    const promises = new Array();\n    if (properties.specularFactor !== undefined) {\n      babylonMaterial.metallicF0Factor = properties.specularFactor;\n    }\n    if (properties.specularColorFactor !== undefined) {\n      babylonMaterial.metallicReflectanceColor = Color3.FromArray(properties.specularColorFactor);\n    }\n    if (properties.specularTexture) {\n      properties.specularTexture.nonColorData = true;\n      promises.push(this._loader.loadTextureInfoAsync(`${context}/specularTexture`, properties.specularTexture, texture => {\n        texture.name = `${babylonMaterial.name} (Specular F0 Strength)`;\n        babylonMaterial.metallicReflectanceTexture = texture;\n        babylonMaterial.useOnlyMetallicFromMetallicReflectanceTexture = true;\n      }));\n    }\n    if (properties.specularColorTexture) {\n      promises.push(this._loader.loadTextureInfoAsync(`${context}/specularColorTexture`, properties.specularColorTexture, texture => {\n        texture.name = `${babylonMaterial.name} (Specular F0 Color)`;\n        babylonMaterial.reflectanceTexture = texture;\n      }));\n    }\n    return Promise.all(promises).then(() => {});\n  }\n}\nGLTFLoader.RegisterExtension(NAME, loader => new KHR_materials_specular(loader));","map":{"version":3,"mappings":"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","names":["PBRMaterial","GLTFLoader","Color3","NAME","KHR_materials_specular","constructor","loader","_loader","enabled","isExtensionUsed","dispose","loadMaterialPropertiesAsync","context","material","babylonMaterial","LoadExtensionAsync","name","extensionContext","extension","promises","Array","push","_loadSpecularPropertiesAsync","Promise","all","then","properties","Error","specularFactor","undefined","metallicF0Factor","specularColorFactor","metallicReflectanceColor","FromArray","specularTexture","nonColorData","loadTextureInfoAsync","texture","metallicReflectanceTexture","useOnlyMetallicFromMetallicReflectanceTexture","specularColorTexture","reflectanceTexture","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_materials_specular.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { IKHRMaterialsSpecular } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_materials_specular\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_specular/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_specular implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 190;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsSpecular>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadSpecularPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadSpecularPropertiesAsync(context: string, properties: IKHRMaterialsSpecular, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        if (properties.specularFactor !== undefined) {\r\n            babylonMaterial.metallicF0Factor = properties.specularFactor;\r\n        }\r\n\r\n        if (properties.specularColorFactor !== undefined) {\r\n            babylonMaterial.metallicReflectanceColor = Color3.FromArray(properties.specularColorFactor);\r\n        }\r\n\r\n        if (properties.specularTexture) {\r\n            (properties.specularTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/specularTexture`, properties.specularTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Specular F0 Strength)`;\r\n                    babylonMaterial.metallicReflectanceTexture = texture;\r\n                    babylonMaterial.useOnlyMetallicFromMetallicReflectanceTexture = true;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.specularColorTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/specularColorTexture`, properties.specularColorTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Specular F0 Color)`;\r\n                    babylonMaterial.reflectanceTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_specular(loader));\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}