{"ast":null,"code":"import { Tools } from \"../Misc/tools.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { GetTGAHeader } from \"../Misc/tga.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { WebRequest } from \"../Misc/webRequest.js\";\n// Sets the default offline provider to Babylon.js\nEngine.OfflineProviderFactory = (urlToScene, callbackManifestChecked, disableManifestCheck = false) => {\n  return new Database(urlToScene, callbackManifestChecked, disableManifestCheck);\n};\n/**\n * Class used to enable access to IndexedDB\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimizeCached\n */\nexport class Database {\n  /**\n   * Creates a new Database\n   * @param urlToScene defines the url to load the scene\n   * @param callbackManifestChecked defines the callback to use when manifest is checked\n   * @param disableManifestCheck defines a boolean indicating that we want to skip the manifest validation (it will be considered validated and up to date)\n   */\n  constructor(urlToScene, callbackManifestChecked, disableManifestCheck = false) {\n    // Handling various flavors of prefixed version of IndexedDB\n    this._idbFactory = typeof indexedDB !== \"undefined\" ? indexedDB : undefined;\n    this._currentSceneUrl = Database._ReturnFullUrlLocation(urlToScene);\n    this._db = null;\n    this._enableSceneOffline = false;\n    this._enableTexturesOffline = false;\n    this._manifestVersionFound = 0;\n    this._mustUpdateRessources = false;\n    this._hasReachedQuota = false;\n    if (!Database.IDBStorageEnabled) {\n      callbackManifestChecked(true);\n    } else {\n      if (disableManifestCheck) {\n        this._enableSceneOffline = true;\n        this._enableTexturesOffline = true;\n        this._manifestVersionFound = 1;\n        Tools.SetImmediate(() => {\n          callbackManifestChecked(true);\n        });\n      } else {\n        this._checkManifestFile(callbackManifestChecked);\n      }\n    }\n  }\n  /**\n   * Gets a boolean indicating if scene must be saved in the database\n   */\n  get enableSceneOffline() {\n    return this._enableSceneOffline;\n  }\n  /**\n   * Gets a boolean indicating if textures must be saved in the database\n   */\n  get enableTexturesOffline() {\n    return this._enableTexturesOffline;\n  }\n  _checkManifestFile(callbackManifestChecked) {\n    const noManifestFile = () => {\n      this._enableSceneOffline = false;\n      this._enableTexturesOffline = false;\n      callbackManifestChecked(false);\n    };\n    const createManifestURL = () => {\n      try {\n        // make sure we have a valid URL.\n        if (typeof URL === \"function\" && this._currentSceneUrl.indexOf(\"http\") === 0) {\n          // we don't have the base url, so the URL string must have a protocol\n          const url = new URL(this._currentSceneUrl);\n          url.pathname += \".manifest\";\n          return url.toString();\n        }\n      } catch (e) {\n        // defensive - if this fails for any reason, fall back to the older method\n      }\n      return `${this._currentSceneUrl}.manifest`;\n    };\n    let timeStampUsed = false;\n    let manifestURL = createManifestURL();\n    const xhr = new WebRequest();\n    if (navigator.onLine) {\n      // Adding a timestamp to by-pass browsers' cache\n      timeStampUsed = true;\n      manifestURL = manifestURL + (manifestURL.match(/\\?/) == null ? \"?\" : \"&\") + Date.now();\n    }\n    xhr.open(\"GET\", manifestURL);\n    xhr.addEventListener(\"load\", () => {\n      if (xhr.status === 200 || Database._ValidateXHRData(xhr, 1)) {\n        try {\n          const manifestFile = JSON.parse(xhr.response);\n          this._enableSceneOffline = manifestFile.enableSceneOffline;\n          this._enableTexturesOffline = manifestFile.enableTexturesOffline && Database._IsUASupportingBlobStorage;\n          if (manifestFile.version && !isNaN(parseInt(manifestFile.version))) {\n            this._manifestVersionFound = manifestFile.version;\n          }\n          callbackManifestChecked(true);\n        } catch (ex) {\n          noManifestFile();\n        }\n      } else {\n        noManifestFile();\n      }\n    }, false);\n    xhr.addEventListener(\"error\", () => {\n      if (timeStampUsed) {\n        timeStampUsed = false;\n        // Let's retry without the timeStamp\n        // It could fail when coupled with HTML5 Offline API\n        const retryManifestURL = createManifestURL();\n        xhr.open(\"GET\", retryManifestURL);\n        xhr.send();\n      } else {\n        noManifestFile();\n      }\n    }, false);\n    try {\n      xhr.send();\n    } catch (ex) {\n      Logger.Error(\"Error on XHR send request.\");\n      callbackManifestChecked(false);\n    }\n  }\n  /**\n   * Open the database and make it available\n   * @param successCallback defines the callback to call on success\n   * @param errorCallback defines the callback to call on error\n   */\n  open(successCallback, errorCallback) {\n    const handleError = () => {\n      this._isSupported = false;\n      if (errorCallback) {\n        errorCallback();\n      }\n    };\n    if (!this._idbFactory || !(this._enableSceneOffline || this._enableTexturesOffline)) {\n      // Your browser doesn't support IndexedDB\n      this._isSupported = false;\n      if (errorCallback) {\n        errorCallback();\n      }\n    } else {\n      // If the DB hasn't been opened or created yet\n      if (!this._db) {\n        this._hasReachedQuota = false;\n        this._isSupported = true;\n        const request = this._idbFactory.open(\"babylonjs\", 1);\n        // Could occur if user is blocking the quota for the DB and/or doesn't grant access to IndexedDB\n        request.onerror = () => {\n          handleError();\n        };\n        // executes when a version change transaction cannot complete due to other active transactions\n        request.onblocked = () => {\n          Logger.Error(\"IDB request blocked. Please reload the page.\");\n          handleError();\n        };\n        // DB has been opened successfully\n        request.onsuccess = () => {\n          this._db = request.result;\n          successCallback();\n        };\n        // Initialization of the DB. Creating Scenes & Textures stores\n        request.onupgradeneeded = event => {\n          this._db = event.target.result;\n          if (this._db) {\n            try {\n              this._db.createObjectStore(\"scenes\", {\n                keyPath: \"sceneUrl\"\n              });\n              this._db.createObjectStore(\"versions\", {\n                keyPath: \"sceneUrl\"\n              });\n              this._db.createObjectStore(\"textures\", {\n                keyPath: \"textureUrl\"\n              });\n            } catch (ex) {\n              Logger.Error(\"Error while creating object stores. Exception: \" + ex.message);\n              handleError();\n            }\n          }\n        };\n      }\n      // DB has already been created and opened\n      else {\n        if (successCallback) {\n          successCallback();\n        }\n      }\n    }\n  }\n  /**\n   * Loads an image from the database\n   * @param url defines the url to load from\n   * @param image defines the target DOM image\n   */\n  loadImage(url, image) {\n    const completeURL = Database._ReturnFullUrlLocation(url);\n    const saveAndLoadImage = () => {\n      if (!this._hasReachedQuota && this._db !== null) {\n        // the texture is not yet in the DB, let's try to save it\n        this._saveImageIntoDBAsync(completeURL, image);\n      }\n      // If the texture is not in the DB and we've reached the DB quota limit\n      // let's load it directly from the web\n      else {\n        image.src = url;\n      }\n    };\n    if (!this._mustUpdateRessources) {\n      this._loadImageFromDBAsync(completeURL, image, saveAndLoadImage);\n    }\n    // First time we're download the images or update requested in the manifest file by a version change\n    else {\n      saveAndLoadImage();\n    }\n  }\n  _loadImageFromDBAsync(url, image, notInDBCallback) {\n    if (this._isSupported && this._db !== null) {\n      let texture;\n      const transaction = this._db.transaction([\"textures\"]);\n      transaction.onabort = () => {\n        image.src = url;\n      };\n      transaction.oncomplete = () => {\n        let blobTextureURL;\n        if (texture && typeof URL === \"function\") {\n          blobTextureURL = URL.createObjectURL(texture.data);\n          image.onerror = () => {\n            Logger.Error(\"Error loading image from blob URL: \" + blobTextureURL + \" switching back to web url: \" + url);\n            image.src = url;\n          };\n          image.src = blobTextureURL;\n        } else {\n          notInDBCallback();\n        }\n      };\n      const getRequest = transaction.objectStore(\"textures\").get(url);\n      getRequest.onsuccess = event => {\n        texture = event.target.result;\n      };\n      getRequest.onerror = () => {\n        Logger.Error(\"Error loading texture \" + url + \" from DB.\");\n        image.src = url;\n      };\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or BabylonJS Database is not open.\");\n      image.src = url;\n    }\n  }\n  _saveImageIntoDBAsync(url, image) {\n    let blob;\n    if (this._isSupported) {\n      // In case of error (type not supported or quota exceeded), we're at least sending back XHR data to allow texture loading later on\n      const generateBlobUrl = () => {\n        let blobTextureURL;\n        if (blob && typeof URL === \"function\") {\n          try {\n            blobTextureURL = URL.createObjectURL(blob);\n          } catch (ex) {\n            // Chrome is raising a type error if we're setting the oneTimeOnly parameter\n            blobTextureURL = URL.createObjectURL(blob);\n          }\n        }\n        if (blobTextureURL) {\n          image.src = blobTextureURL;\n        }\n      };\n      if (Database._IsUASupportingBlobStorage) {\n        // Create XHR\n        const xhr = new WebRequest();\n        xhr.open(\"GET\", url);\n        xhr.responseType = \"blob\";\n        xhr.addEventListener(\"load\", () => {\n          if (xhr.status === 200 && this._db) {\n            // Blob as response\n            blob = xhr.response;\n            const transaction = this._db.transaction([\"textures\"], \"readwrite\");\n            // the transaction could abort because of a QuotaExceededError error\n            transaction.onabort = event => {\n              try {\n                //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\n                const srcElement = event.target;\n                const error = srcElement.error;\n                if (error && error.name === \"QuotaExceededError\") {\n                  this._hasReachedQuota = true;\n                }\n              } catch (ex) {}\n              generateBlobUrl();\n            };\n            transaction.oncomplete = () => {\n              generateBlobUrl();\n            };\n            const newTexture = {\n              textureUrl: url,\n              data: blob\n            };\n            try {\n              // Put the blob into the dabase\n              const addRequest = transaction.objectStore(\"textures\").put(newTexture);\n              addRequest.onsuccess = () => {};\n              addRequest.onerror = () => {\n                generateBlobUrl();\n              };\n            } catch (ex) {\n              // \"DataCloneError\" generated by Chrome when you try to inject blob into IndexedDB\n              if (ex.code === 25) {\n                Database._IsUASupportingBlobStorage = false;\n                this._enableTexturesOffline = false;\n              }\n              image.src = url;\n            }\n          } else {\n            image.src = url;\n          }\n        }, false);\n        xhr.addEventListener(\"error\", () => {\n          Logger.Error(\"Error in XHR request in BABYLON.Database.\");\n          image.src = url;\n        }, false);\n        xhr.send();\n      } else {\n        image.src = url;\n      }\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\n      image.src = url;\n    }\n  }\n  _checkVersionFromDB(url, versionLoaded) {\n    const updateVersion = () => {\n      // the version is not yet in the DB or we need to update it\n      this._saveVersionIntoDBAsync(url, versionLoaded);\n    };\n    this._loadVersionFromDBAsync(url, versionLoaded, updateVersion);\n  }\n  _loadVersionFromDBAsync(url, callback, updateInDBCallback) {\n    if (this._isSupported && this._db) {\n      let version;\n      try {\n        const transaction = this._db.transaction([\"versions\"]);\n        transaction.oncomplete = () => {\n          if (version) {\n            // If the version in the JSON file is different from the version in DB\n            if (this._manifestVersionFound !== version.data) {\n              this._mustUpdateRessources = true;\n              updateInDBCallback();\n            } else {\n              callback(version.data);\n            }\n          }\n          // version was not found in DB\n          else {\n            this._mustUpdateRessources = true;\n            updateInDBCallback();\n          }\n        };\n        transaction.onabort = () => {\n          callback(-1);\n        };\n        const getRequest = transaction.objectStore(\"versions\").get(url);\n        getRequest.onsuccess = event => {\n          version = event.target.result;\n        };\n        getRequest.onerror = () => {\n          Logger.Error(\"Error loading version for scene \" + url + \" from DB.\");\n          callback(-1);\n        };\n      } catch (ex) {\n        Logger.Error(\"Error while accessing 'versions' object store (READ OP). Exception: \" + ex.message);\n        callback(-1);\n      }\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\n      callback(-1);\n    }\n  }\n  _saveVersionIntoDBAsync(url, callback) {\n    if (this._isSupported && !this._hasReachedQuota && this._db) {\n      try {\n        // Open a transaction to the database\n        const transaction = this._db.transaction([\"versions\"], \"readwrite\");\n        // the transaction could abort because of a QuotaExceededError error\n        transaction.onabort = event => {\n          try {\n            //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\n            const error = event.target[\"error\"];\n            if (error && error.name === \"QuotaExceededError\") {\n              this._hasReachedQuota = true;\n            }\n          } catch (ex) {}\n          callback(-1);\n        };\n        transaction.oncomplete = () => {\n          callback(this._manifestVersionFound);\n        };\n        const newVersion = {\n          sceneUrl: url,\n          data: this._manifestVersionFound\n        };\n        // Put the scene into the database\n        const addRequest = transaction.objectStore(\"versions\").put(newVersion);\n        addRequest.onsuccess = () => {};\n        addRequest.onerror = () => {\n          Logger.Error(\"Error in DB add version request in BABYLON.Database.\");\n        };\n      } catch (ex) {\n        Logger.Error(\"Error while accessing 'versions' object store (WRITE OP). Exception: \" + ex.message);\n        callback(-1);\n      }\n    } else {\n      callback(-1);\n    }\n  }\n  /**\n   * Loads a file from database\n   * @param url defines the URL to load from\n   * @param sceneLoaded defines a callback to call on success\n   * @param progressCallBack defines a callback to call when progress changed\n   * @param errorCallback defines a callback to call on error\n   * @param useArrayBuffer defines a boolean to use array buffer instead of text string\n   */\n  loadFile(url, sceneLoaded, progressCallBack, errorCallback, useArrayBuffer) {\n    const completeUrl = Database._ReturnFullUrlLocation(url);\n    const saveAndLoadFile = () => {\n      // the scene is not yet in the DB, let's try to save it\n      this._saveFileAsync(completeUrl, sceneLoaded, progressCallBack, useArrayBuffer, errorCallback);\n    };\n    this._checkVersionFromDB(completeUrl, version => {\n      if (version !== -1) {\n        if (!this._mustUpdateRessources) {\n          this._loadFileAsync(completeUrl, sceneLoaded, saveAndLoadFile);\n        } else {\n          this._saveFileAsync(completeUrl, sceneLoaded, progressCallBack, useArrayBuffer, errorCallback);\n        }\n      } else {\n        if (errorCallback) {\n          errorCallback();\n        }\n      }\n    });\n  }\n  _loadFileAsync(url, callback, notInDBCallback) {\n    if (this._isSupported && this._db) {\n      let targetStore;\n      if (url.indexOf(\".babylon\") !== -1) {\n        targetStore = \"scenes\";\n      } else {\n        targetStore = \"textures\";\n      }\n      let file;\n      const transaction = this._db.transaction([targetStore]);\n      transaction.oncomplete = () => {\n        if (file) {\n          callback(file.data);\n        }\n        // file was not found in DB\n        else {\n          notInDBCallback();\n        }\n      };\n      transaction.onabort = () => {\n        notInDBCallback();\n      };\n      const getRequest = transaction.objectStore(targetStore).get(url);\n      getRequest.onsuccess = event => {\n        file = event.target.result;\n      };\n      getRequest.onerror = () => {\n        Logger.Error(\"Error loading file \" + url + \" from DB.\");\n        notInDBCallback();\n      };\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or BabylonJS Database is not open.\");\n      callback();\n    }\n  }\n  _saveFileAsync(url, callback, progressCallback, useArrayBuffer, errorCallback) {\n    if (this._isSupported) {\n      let targetStore;\n      if (url.indexOf(\".babylon\") !== -1) {\n        targetStore = \"scenes\";\n      } else {\n        targetStore = \"textures\";\n      }\n      // Create XHR\n      const xhr = new WebRequest();\n      let fileData;\n      xhr.open(\"GET\", url + (url.match(/\\?/) == null ? \"?\" : \"&\") + Date.now());\n      if (useArrayBuffer) {\n        xhr.responseType = \"arraybuffer\";\n      }\n      if (progressCallback) {\n        xhr.onprogress = progressCallback;\n      }\n      xhr.addEventListener(\"load\", () => {\n        if (xhr.status === 200 || xhr.status < 400 && Database._ValidateXHRData(xhr, !useArrayBuffer ? 1 : 6)) {\n          // Blob as response\n          fileData = !useArrayBuffer ? xhr.responseText : xhr.response;\n          if (!this._hasReachedQuota && this._db) {\n            // Open a transaction to the database\n            const transaction = this._db.transaction([targetStore], \"readwrite\");\n            // the transaction could abort because of a QuotaExceededError error\n            transaction.onabort = event => {\n              try {\n                //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\n                const error = event.target[\"error\"];\n                if (error && error.name === \"QuotaExceededError\") {\n                  this._hasReachedQuota = true;\n                }\n              } catch (ex) {}\n              callback(fileData);\n            };\n            transaction.oncomplete = () => {\n              callback(fileData);\n            };\n            let newFile;\n            if (targetStore === \"scenes\") {\n              newFile = {\n                sceneUrl: url,\n                data: fileData,\n                version: this._manifestVersionFound\n              };\n            } else {\n              newFile = {\n                textureUrl: url,\n                data: fileData\n              };\n            }\n            try {\n              // Put the scene into the database\n              const addRequest = transaction.objectStore(targetStore).put(newFile);\n              addRequest.onsuccess = () => {};\n              addRequest.onerror = () => {\n                Logger.Error(\"Error in DB add file request in BABYLON.Database.\");\n              };\n            } catch (ex) {\n              callback(fileData);\n            }\n          } else {\n            callback(fileData);\n          }\n        } else {\n          if (xhr.status >= 400 && errorCallback) {\n            errorCallback(xhr);\n          } else {\n            callback();\n          }\n        }\n      }, false);\n      xhr.addEventListener(\"error\", () => {\n        Logger.Error(\"error on XHR request.\");\n        errorCallback && errorCallback();\n      }, false);\n      xhr.send();\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\n      errorCallback && errorCallback();\n    }\n  }\n  /**\n   * Validates if xhr data is correct\n   * @param xhr defines the request to validate\n   * @param dataType defines the expected data type\n   * @returns true if data is correct\n   */\n  static _ValidateXHRData(xhr, dataType = 7) {\n    // 1 for text (.babylon, manifest and shaders), 2 for TGA, 4 for DDS, 7 for all\n    try {\n      if (dataType & 1) {\n        if (xhr.responseText && xhr.responseText.length > 0) {\n          return true;\n        } else if (dataType === 1) {\n          return false;\n        }\n      }\n      if (dataType & 2) {\n        // Check header width and height since there is no \"TGA\" magic number\n        const tgaHeader = GetTGAHeader(xhr.response);\n        if (tgaHeader.width && tgaHeader.height && tgaHeader.width > 0 && tgaHeader.height > 0) {\n          return true;\n        } else if (dataType === 2) {\n          return false;\n        }\n      }\n      if (dataType & 4) {\n        // Check for the \"DDS\" magic number\n        const ddsHeader = new Uint8Array(xhr.response, 0, 3);\n        if (ddsHeader[0] === 68 && ddsHeader[1] === 68 && ddsHeader[2] === 83) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    } catch (e) {\n      // Global protection\n    }\n    return false;\n  }\n}\n/** Gets a boolean indicating if the user agent supports blob storage (this value will be updated after creating the first Database object) */\nDatabase._IsUASupportingBlobStorage = true;\n/**\n * Gets a boolean indicating if Database storage is enabled (off by default)\n */\nDatabase.IDBStorageEnabled = false;\nDatabase._ParseURL = url => {\n  const a = document.createElement(\"a\");\n  a.href = url;\n  const urlWithoutHash = url.substring(0, url.lastIndexOf(\"#\"));\n  const fileName = url.substring(urlWithoutHash.lastIndexOf(\"/\") + 1, url.length);\n  const absLocation = url.substring(0, url.indexOf(fileName, 0));\n  return absLocation;\n};\nDatabase._ReturnFullUrlLocation = url => {\n  if (url.indexOf(\"http:/\") === -1 && url.indexOf(\"https:/\") === -1 && typeof window !== \"undefined\") {\n    return Database._ParseURL(window.location.href) + url;\n  } else {\n    return url;\n  }\n};","map":{"version":3,"mappings":"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","names":["Tools","Logger","GetTGAHeader","Engine","WebRequest","OfflineProviderFactory","urlToScene","callbackManifestChecked","disableManifestCheck","Database","constructor","indexedDB","undefined","_currentSceneUrl","_ReturnFullUrlLocation","_db","_enableSceneOffline","_enableTexturesOffline","_manifestVersionFound","_mustUpdateRessources","_hasReachedQuota","IDBStorageEnabled","SetImmediate","_checkManifestFile","enableSceneOffline","enableTexturesOffline","noManifestFile","createManifestURL","URL","indexOf","url","pathname","toString","e","timeStampUsed","manifestURL","xhr","navigator","onLine","match","Date","now","open","addEventListener","status","_ValidateXHRData","manifestFile","JSON","parse","response","_IsUASupportingBlobStorage","version","isNaN","parseInt","ex","retryManifestURL","send","Error","successCallback","errorCallback","handleError","_isSupported","_idbFactory","request","onerror","onblocked","onsuccess","result","onupgradeneeded","event","target","createObjectStore","keyPath","message","loadImage","image","completeURL","saveAndLoadImage","_saveImageIntoDBAsync","src","_loadImageFromDBAsync","notInDBCallback","texture","transaction","onabort","oncomplete","blobTextureURL","createObjectURL","data","getRequest","objectStore","get","blob","generateBlobUrl","responseType","srcElement","error","name","newTexture","textureUrl","addRequest","put","code","_checkVersionFromDB","versionLoaded","updateVersion","_saveVersionIntoDBAsync","_loadVersionFromDBAsync","callback","updateInDBCallback","newVersion","sceneUrl","loadFile","sceneLoaded","progressCallBack","useArrayBuffer","completeUrl","saveAndLoadFile","_saveFileAsync","_loadFileAsync","targetStore","file","progressCallback","fileData","onprogress","responseText","newFile","dataType","length","tgaHeader","width","height","ddsHeader","Uint8Array","a","document","createElement","href","urlWithoutHash","substring","lastIndexOf","fileName","absLocation","window","_ParseURL","location"],"sourceRoot":"","sources":["../../../../lts/core/generated/Offline/database.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { GetTGAHeader } from \"../Misc/tga\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport type { IOfflineProvider } from \"./IOfflineProvider\";\r\nimport { WebRequest } from \"../Misc/webRequest\";\r\n\r\n// Sets the default offline provider to Babylon.js\r\nEngine.OfflineProviderFactory = (urlToScene: string, callbackManifestChecked: (checked: boolean) => any, disableManifestCheck = false) => {\r\n    return new Database(urlToScene, callbackManifestChecked, disableManifestCheck);\r\n};\r\n\r\n/**\r\n * Class used to enable access to IndexedDB\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimizeCached\r\n */\r\nexport class Database implements IOfflineProvider {\r\n    private _currentSceneUrl: string;\r\n    private _db: Nullable<IDBDatabase>;\r\n    private _enableSceneOffline: boolean;\r\n    private _enableTexturesOffline: boolean;\r\n    private _manifestVersionFound: number;\r\n    private _mustUpdateRessources: boolean;\r\n    private _hasReachedQuota: boolean;\r\n    private _isSupported: boolean;\r\n\r\n    // Handling various flavors of prefixed version of IndexedDB\r\n    private _idbFactory = <IDBFactory>(typeof indexedDB !== \"undefined\" ? indexedDB : undefined);\r\n\r\n    /** Gets a boolean indicating if the user agent supports blob storage (this value will be updated after creating the first Database object) */\r\n    private static _IsUASupportingBlobStorage = true;\r\n\r\n    /**\r\n     * Gets a boolean indicating if Database storage is enabled (off by default)\r\n     */\r\n    static IDBStorageEnabled = false;\r\n\r\n    /**\r\n     * Gets a boolean indicating if scene must be saved in the database\r\n     */\r\n    public get enableSceneOffline(): boolean {\r\n        return this._enableSceneOffline;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if textures must be saved in the database\r\n     */\r\n    public get enableTexturesOffline(): boolean {\r\n        return this._enableTexturesOffline;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Database\r\n     * @param urlToScene defines the url to load the scene\r\n     * @param callbackManifestChecked defines the callback to use when manifest is checked\r\n     * @param disableManifestCheck defines a boolean indicating that we want to skip the manifest validation (it will be considered validated and up to date)\r\n     */\r\n    constructor(urlToScene: string, callbackManifestChecked: (checked: boolean) => any, disableManifestCheck = false) {\r\n        this._currentSceneUrl = Database._ReturnFullUrlLocation(urlToScene);\r\n        this._db = null;\r\n        this._enableSceneOffline = false;\r\n        this._enableTexturesOffline = false;\r\n        this._manifestVersionFound = 0;\r\n        this._mustUpdateRessources = false;\r\n        this._hasReachedQuota = false;\r\n\r\n        if (!Database.IDBStorageEnabled) {\r\n            callbackManifestChecked(true);\r\n        } else {\r\n            if (disableManifestCheck) {\r\n                this._enableSceneOffline = true;\r\n                this._enableTexturesOffline = true;\r\n                this._manifestVersionFound = 1;\r\n                Tools.SetImmediate(() => {\r\n                    callbackManifestChecked(true);\r\n                });\r\n            } else {\r\n                this._checkManifestFile(callbackManifestChecked);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _ParseURL = (url: string) => {\r\n        const a = document.createElement(\"a\");\r\n        a.href = url;\r\n        const urlWithoutHash = url.substring(0, url.lastIndexOf(\"#\"));\r\n        const fileName = url.substring(urlWithoutHash.lastIndexOf(\"/\") + 1, url.length);\r\n        const absLocation = url.substring(0, url.indexOf(fileName, 0));\r\n        return absLocation;\r\n    };\r\n\r\n    private static _ReturnFullUrlLocation = (url: string): string => {\r\n        if (url.indexOf(\"http:/\") === -1 && url.indexOf(\"https:/\") === -1 && typeof window !== \"undefined\") {\r\n            return Database._ParseURL(window.location.href) + url;\r\n        } else {\r\n            return url;\r\n        }\r\n    };\r\n\r\n    private _checkManifestFile(callbackManifestChecked: (checked: boolean) => any) {\r\n        const noManifestFile = () => {\r\n            this._enableSceneOffline = false;\r\n            this._enableTexturesOffline = false;\r\n            callbackManifestChecked(false);\r\n        };\r\n\r\n        const createManifestURL = (): string => {\r\n            try {\r\n                // make sure we have a valid URL.\r\n                if (typeof URL === \"function\" && this._currentSceneUrl.indexOf(\"http\") === 0) {\r\n                    // we don't have the base url, so the URL string must have a protocol\r\n                    const url = new URL(this._currentSceneUrl);\r\n                    url.pathname += \".manifest\";\r\n                    return url.toString();\r\n                }\r\n            } catch (e) {\r\n                // defensive - if this fails for any reason, fall back to the older method\r\n            }\r\n\r\n            return `${this._currentSceneUrl}.manifest`;\r\n        };\r\n\r\n        let timeStampUsed = false;\r\n        let manifestURL = createManifestURL();\r\n\r\n        const xhr = new WebRequest();\r\n\r\n        if (navigator.onLine) {\r\n            // Adding a timestamp to by-pass browsers' cache\r\n            timeStampUsed = true;\r\n            manifestURL = manifestURL + (manifestURL.match(/\\?/) == null ? \"?\" : \"&\") + Date.now();\r\n        }\r\n        xhr.open(\"GET\", manifestURL);\r\n\r\n        xhr.addEventListener(\r\n            \"load\",\r\n            () => {\r\n                if (xhr.status === 200 || Database._ValidateXHRData(xhr, 1)) {\r\n                    try {\r\n                        const manifestFile = JSON.parse(xhr.response);\r\n                        this._enableSceneOffline = manifestFile.enableSceneOffline;\r\n                        this._enableTexturesOffline = manifestFile.enableTexturesOffline && Database._IsUASupportingBlobStorage;\r\n                        if (manifestFile.version && !isNaN(parseInt(manifestFile.version))) {\r\n                            this._manifestVersionFound = manifestFile.version;\r\n                        }\r\n                        callbackManifestChecked(true);\r\n                    } catch (ex) {\r\n                        noManifestFile();\r\n                    }\r\n                } else {\r\n                    noManifestFile();\r\n                }\r\n            },\r\n            false\r\n        );\r\n\r\n        xhr.addEventListener(\r\n            \"error\",\r\n            () => {\r\n                if (timeStampUsed) {\r\n                    timeStampUsed = false;\r\n                    // Let's retry without the timeStamp\r\n                    // It could fail when coupled with HTML5 Offline API\r\n                    const retryManifestURL = createManifestURL();\r\n                    xhr.open(\"GET\", retryManifestURL);\r\n                    xhr.send();\r\n                } else {\r\n                    noManifestFile();\r\n                }\r\n            },\r\n            false\r\n        );\r\n\r\n        try {\r\n            xhr.send();\r\n        } catch (ex) {\r\n            Logger.Error(\"Error on XHR send request.\");\r\n            callbackManifestChecked(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Open the database and make it available\r\n     * @param successCallback defines the callback to call on success\r\n     * @param errorCallback defines the callback to call on error\r\n     */\r\n    public open(successCallback: () => void, errorCallback: () => void): void {\r\n        const handleError = () => {\r\n            this._isSupported = false;\r\n            if (errorCallback) {\r\n                errorCallback();\r\n            }\r\n        };\r\n\r\n        if (!this._idbFactory || !(this._enableSceneOffline || this._enableTexturesOffline)) {\r\n            // Your browser doesn't support IndexedDB\r\n            this._isSupported = false;\r\n            if (errorCallback) {\r\n                errorCallback();\r\n            }\r\n        } else {\r\n            // If the DB hasn't been opened or created yet\r\n            if (!this._db) {\r\n                this._hasReachedQuota = false;\r\n                this._isSupported = true;\r\n\r\n                const request: IDBOpenDBRequest = this._idbFactory.open(\"babylonjs\", 1);\r\n\r\n                // Could occur if user is blocking the quota for the DB and/or doesn't grant access to IndexedDB\r\n                request.onerror = () => {\r\n                    handleError();\r\n                };\r\n\r\n                // executes when a version change transaction cannot complete due to other active transactions\r\n                request.onblocked = () => {\r\n                    Logger.Error(\"IDB request blocked. Please reload the page.\");\r\n                    handleError();\r\n                };\r\n\r\n                // DB has been opened successfully\r\n                request.onsuccess = () => {\r\n                    this._db = request.result;\r\n                    successCallback();\r\n                };\r\n\r\n                // Initialization of the DB. Creating Scenes & Textures stores\r\n                request.onupgradeneeded = (event: IDBVersionChangeEvent) => {\r\n                    this._db = (<any>event.target).result;\r\n                    if (this._db) {\r\n                        try {\r\n                            this._db.createObjectStore(\"scenes\", { keyPath: \"sceneUrl\" });\r\n                            this._db.createObjectStore(\"versions\", { keyPath: \"sceneUrl\" });\r\n                            this._db.createObjectStore(\"textures\", { keyPath: \"textureUrl\" });\r\n                        } catch (ex) {\r\n                            Logger.Error(\"Error while creating object stores. Exception: \" + ex.message);\r\n                            handleError();\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n            // DB has already been created and opened\r\n            else {\r\n                if (successCallback) {\r\n                    successCallback();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads an image from the database\r\n     * @param url defines the url to load from\r\n     * @param image defines the target DOM image\r\n     */\r\n    public loadImage(url: string, image: HTMLImageElement) {\r\n        const completeURL = Database._ReturnFullUrlLocation(url);\r\n\r\n        const saveAndLoadImage = () => {\r\n            if (!this._hasReachedQuota && this._db !== null) {\r\n                // the texture is not yet in the DB, let's try to save it\r\n                this._saveImageIntoDBAsync(completeURL, image);\r\n            }\r\n            // If the texture is not in the DB and we've reached the DB quota limit\r\n            // let's load it directly from the web\r\n            else {\r\n                image.src = url;\r\n            }\r\n        };\r\n\r\n        if (!this._mustUpdateRessources) {\r\n            this._loadImageFromDBAsync(completeURL, image, saveAndLoadImage);\r\n        }\r\n        // First time we're download the images or update requested in the manifest file by a version change\r\n        else {\r\n            saveAndLoadImage();\r\n        }\r\n    }\r\n\r\n    private _loadImageFromDBAsync(url: string, image: HTMLImageElement, notInDBCallback: () => any) {\r\n        if (this._isSupported && this._db !== null) {\r\n            let texture: any;\r\n            const transaction: IDBTransaction = this._db.transaction([\"textures\"]);\r\n\r\n            transaction.onabort = () => {\r\n                image.src = url;\r\n            };\r\n\r\n            transaction.oncomplete = () => {\r\n                let blobTextureURL: string;\r\n                if (texture && typeof URL === \"function\") {\r\n                    blobTextureURL = URL.createObjectURL(texture.data);\r\n                    image.onerror = () => {\r\n                        Logger.Error(\"Error loading image from blob URL: \" + blobTextureURL + \" switching back to web url: \" + url);\r\n                        image.src = url;\r\n                    };\r\n                    image.src = blobTextureURL;\r\n                } else {\r\n                    notInDBCallback();\r\n                }\r\n            };\r\n\r\n            const getRequest: IDBRequest = transaction.objectStore(\"textures\").get(url);\r\n\r\n            getRequest.onsuccess = (event) => {\r\n                texture = (<any>event.target).result;\r\n            };\r\n            getRequest.onerror = () => {\r\n                Logger.Error(\"Error loading texture \" + url + \" from DB.\");\r\n                image.src = url;\r\n            };\r\n        } else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or BabylonJS Database is not open.\");\r\n            image.src = url;\r\n        }\r\n    }\r\n\r\n    private _saveImageIntoDBAsync(url: string, image: HTMLImageElement) {\r\n        let blob: Blob;\r\n\r\n        if (this._isSupported) {\r\n            // In case of error (type not supported or quota exceeded), we're at least sending back XHR data to allow texture loading later on\r\n            const generateBlobUrl = () => {\r\n                let blobTextureURL;\r\n\r\n                if (blob && typeof URL === \"function\") {\r\n                    try {\r\n                        blobTextureURL = URL.createObjectURL(blob);\r\n                    } catch (ex) {\r\n                        // Chrome is raising a type error if we're setting the oneTimeOnly parameter\r\n                        blobTextureURL = URL.createObjectURL(blob);\r\n                    }\r\n                }\r\n\r\n                if (blobTextureURL) {\r\n                    image.src = blobTextureURL;\r\n                }\r\n            };\r\n\r\n            if (Database._IsUASupportingBlobStorage) {\r\n                // Create XHR\r\n                const xhr = new WebRequest();\r\n\r\n                xhr.open(\"GET\", url);\r\n                xhr.responseType = \"blob\";\r\n\r\n                xhr.addEventListener(\r\n                    \"load\",\r\n                    () => {\r\n                        if (xhr.status === 200 && this._db) {\r\n                            // Blob as response\r\n                            blob = xhr.response;\r\n\r\n                            const transaction = this._db.transaction([\"textures\"], \"readwrite\");\r\n\r\n                            // the transaction could abort because of a QuotaExceededError error\r\n                            transaction.onabort = (event) => {\r\n                                try {\r\n                                    //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\r\n                                    const srcElement = <any>event.target;\r\n                                    const error = srcElement.error;\r\n                                    if (error && error.name === \"QuotaExceededError\") {\r\n                                        this._hasReachedQuota = true;\r\n                                    }\r\n                                } catch (ex) {}\r\n                                generateBlobUrl();\r\n                            };\r\n\r\n                            transaction.oncomplete = () => {\r\n                                generateBlobUrl();\r\n                            };\r\n\r\n                            const newTexture = { textureUrl: url, data: blob };\r\n\r\n                            try {\r\n                                // Put the blob into the dabase\r\n                                const addRequest = transaction.objectStore(\"textures\").put(newTexture);\r\n                                addRequest.onsuccess = () => {};\r\n                                addRequest.onerror = () => {\r\n                                    generateBlobUrl();\r\n                                };\r\n                            } catch (ex) {\r\n                                // \"DataCloneError\" generated by Chrome when you try to inject blob into IndexedDB\r\n                                if (ex.code === 25) {\r\n                                    Database._IsUASupportingBlobStorage = false;\r\n                                    this._enableTexturesOffline = false;\r\n                                }\r\n                                image.src = url;\r\n                            }\r\n                        } else {\r\n                            image.src = url;\r\n                        }\r\n                    },\r\n                    false\r\n                );\r\n\r\n                xhr.addEventListener(\r\n                    \"error\",\r\n                    () => {\r\n                        Logger.Error(\"Error in XHR request in BABYLON.Database.\");\r\n                        image.src = url;\r\n                    },\r\n                    false\r\n                );\r\n\r\n                xhr.send();\r\n            } else {\r\n                image.src = url;\r\n            }\r\n        } else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\r\n            image.src = url;\r\n        }\r\n    }\r\n\r\n    private _checkVersionFromDB(url: string, versionLoaded: (version: number) => void) {\r\n        const updateVersion = () => {\r\n            // the version is not yet in the DB or we need to update it\r\n            this._saveVersionIntoDBAsync(url, versionLoaded);\r\n        };\r\n        this._loadVersionFromDBAsync(url, versionLoaded, updateVersion);\r\n    }\r\n\r\n    private _loadVersionFromDBAsync(url: string, callback: (version: number) => void, updateInDBCallback: () => void) {\r\n        if (this._isSupported && this._db) {\r\n            let version: any;\r\n            try {\r\n                const transaction = this._db.transaction([\"versions\"]);\r\n\r\n                transaction.oncomplete = () => {\r\n                    if (version) {\r\n                        // If the version in the JSON file is different from the version in DB\r\n                        if (this._manifestVersionFound !== version.data) {\r\n                            this._mustUpdateRessources = true;\r\n                            updateInDBCallback();\r\n                        } else {\r\n                            callback(version.data);\r\n                        }\r\n                    }\r\n                    // version was not found in DB\r\n                    else {\r\n                        this._mustUpdateRessources = true;\r\n                        updateInDBCallback();\r\n                    }\r\n                };\r\n\r\n                transaction.onabort = () => {\r\n                    callback(-1);\r\n                };\r\n\r\n                const getRequest = transaction.objectStore(\"versions\").get(url);\r\n\r\n                getRequest.onsuccess = (event) => {\r\n                    version = (<any>event.target).result;\r\n                };\r\n                getRequest.onerror = () => {\r\n                    Logger.Error(\"Error loading version for scene \" + url + \" from DB.\");\r\n                    callback(-1);\r\n                };\r\n            } catch (ex) {\r\n                Logger.Error(\"Error while accessing 'versions' object store (READ OP). Exception: \" + ex.message);\r\n                callback(-1);\r\n            }\r\n        } else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\r\n            callback(-1);\r\n        }\r\n    }\r\n\r\n    private _saveVersionIntoDBAsync(url: string, callback: (version: number) => void) {\r\n        if (this._isSupported && !this._hasReachedQuota && this._db) {\r\n            try {\r\n                // Open a transaction to the database\r\n                const transaction = this._db.transaction([\"versions\"], \"readwrite\");\r\n\r\n                // the transaction could abort because of a QuotaExceededError error\r\n                transaction.onabort = (event) => {\r\n                    try {\r\n                        //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\r\n                        const error = (<any>event.target)[\"error\"];\r\n                        if (error && error.name === \"QuotaExceededError\") {\r\n                            this._hasReachedQuota = true;\r\n                        }\r\n                    } catch (ex) {}\r\n                    callback(-1);\r\n                };\r\n\r\n                transaction.oncomplete = () => {\r\n                    callback(this._manifestVersionFound);\r\n                };\r\n\r\n                const newVersion = { sceneUrl: url, data: this._manifestVersionFound };\r\n\r\n                // Put the scene into the database\r\n                const addRequest = transaction.objectStore(\"versions\").put(newVersion);\r\n                addRequest.onsuccess = () => {};\r\n                addRequest.onerror = () => {\r\n                    Logger.Error(\"Error in DB add version request in BABYLON.Database.\");\r\n                };\r\n            } catch (ex) {\r\n                Logger.Error(\"Error while accessing 'versions' object store (WRITE OP). Exception: \" + ex.message);\r\n                callback(-1);\r\n            }\r\n        } else {\r\n            callback(-1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads a file from database\r\n     * @param url defines the URL to load from\r\n     * @param sceneLoaded defines a callback to call on success\r\n     * @param progressCallBack defines a callback to call when progress changed\r\n     * @param errorCallback defines a callback to call on error\r\n     * @param useArrayBuffer defines a boolean to use array buffer instead of text string\r\n     */\r\n    public loadFile(url: string, sceneLoaded: (data: any) => void, progressCallBack?: (data: any) => void, errorCallback?: () => void, useArrayBuffer?: boolean): void {\r\n        const completeUrl = Database._ReturnFullUrlLocation(url);\r\n\r\n        const saveAndLoadFile = () => {\r\n            // the scene is not yet in the DB, let's try to save it\r\n            this._saveFileAsync(completeUrl, sceneLoaded, progressCallBack, useArrayBuffer, errorCallback);\r\n        };\r\n\r\n        this._checkVersionFromDB(completeUrl, (version) => {\r\n            if (version !== -1) {\r\n                if (!this._mustUpdateRessources) {\r\n                    this._loadFileAsync(completeUrl, sceneLoaded, saveAndLoadFile);\r\n                } else {\r\n                    this._saveFileAsync(completeUrl, sceneLoaded, progressCallBack, useArrayBuffer, errorCallback);\r\n                }\r\n            } else {\r\n                if (errorCallback) {\r\n                    errorCallback();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private _loadFileAsync(url: string, callback: (data?: any) => void, notInDBCallback: () => void) {\r\n        if (this._isSupported && this._db) {\r\n            let targetStore: string;\r\n            if (url.indexOf(\".babylon\") !== -1) {\r\n                targetStore = \"scenes\";\r\n            } else {\r\n                targetStore = \"textures\";\r\n            }\r\n\r\n            let file: any;\r\n            const transaction = this._db.transaction([targetStore]);\r\n\r\n            transaction.oncomplete = () => {\r\n                if (file) {\r\n                    callback(file.data);\r\n                }\r\n                // file was not found in DB\r\n                else {\r\n                    notInDBCallback();\r\n                }\r\n            };\r\n\r\n            transaction.onabort = () => {\r\n                notInDBCallback();\r\n            };\r\n\r\n            const getRequest = transaction.objectStore(targetStore).get(url);\r\n\r\n            getRequest.onsuccess = (event) => {\r\n                file = (<any>event.target).result;\r\n            };\r\n            getRequest.onerror = () => {\r\n                Logger.Error(\"Error loading file \" + url + \" from DB.\");\r\n                notInDBCallback();\r\n            };\r\n        } else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or BabylonJS Database is not open.\");\r\n            callback();\r\n        }\r\n    }\r\n\r\n    private _saveFileAsync(\r\n        url: string,\r\n        callback: (data?: any) => void,\r\n        progressCallback?: (this: XMLHttpRequestEventTarget, ev: ProgressEvent) => any,\r\n        useArrayBuffer?: boolean,\r\n        errorCallback?: (data?: any) => void\r\n    ) {\r\n        if (this._isSupported) {\r\n            let targetStore: string;\r\n            if (url.indexOf(\".babylon\") !== -1) {\r\n                targetStore = \"scenes\";\r\n            } else {\r\n                targetStore = \"textures\";\r\n            }\r\n\r\n            // Create XHR\r\n            const xhr = new WebRequest();\r\n            let fileData: any;\r\n            xhr.open(\"GET\", url + (url.match(/\\?/) == null ? \"?\" : \"&\") + Date.now());\r\n\r\n            if (useArrayBuffer) {\r\n                xhr.responseType = \"arraybuffer\";\r\n            }\r\n\r\n            if (progressCallback) {\r\n                xhr.onprogress = progressCallback;\r\n            }\r\n\r\n            xhr.addEventListener(\r\n                \"load\",\r\n                () => {\r\n                    if (xhr.status === 200 || (xhr.status < 400 && Database._ValidateXHRData(xhr, !useArrayBuffer ? 1 : 6))) {\r\n                        // Blob as response\r\n                        fileData = !useArrayBuffer ? xhr.responseText : xhr.response;\r\n\r\n                        if (!this._hasReachedQuota && this._db) {\r\n                            // Open a transaction to the database\r\n                            const transaction = this._db.transaction([targetStore], \"readwrite\");\r\n\r\n                            // the transaction could abort because of a QuotaExceededError error\r\n                            transaction.onabort = (event) => {\r\n                                try {\r\n                                    //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\r\n                                    const error = (<any>event.target)[\"error\"];\r\n                                    if (error && error.name === \"QuotaExceededError\") {\r\n                                        this._hasReachedQuota = true;\r\n                                    }\r\n                                } catch (ex) {}\r\n                                callback(fileData);\r\n                            };\r\n\r\n                            transaction.oncomplete = () => {\r\n                                callback(fileData);\r\n                            };\r\n\r\n                            let newFile;\r\n                            if (targetStore === \"scenes\") {\r\n                                newFile = { sceneUrl: url, data: fileData, version: this._manifestVersionFound };\r\n                            } else {\r\n                                newFile = { textureUrl: url, data: fileData };\r\n                            }\r\n\r\n                            try {\r\n                                // Put the scene into the database\r\n                                const addRequest = transaction.objectStore(targetStore).put(newFile);\r\n                                addRequest.onsuccess = () => {};\r\n                                addRequest.onerror = () => {\r\n                                    Logger.Error(\"Error in DB add file request in BABYLON.Database.\");\r\n                                };\r\n                            } catch (ex) {\r\n                                callback(fileData);\r\n                            }\r\n                        } else {\r\n                            callback(fileData);\r\n                        }\r\n                    } else {\r\n                        if (xhr.status >= 400 && errorCallback) {\r\n                            errorCallback(xhr);\r\n                        } else {\r\n                            callback();\r\n                        }\r\n                    }\r\n                },\r\n                false\r\n            );\r\n\r\n            xhr.addEventListener(\r\n                \"error\",\r\n                () => {\r\n                    Logger.Error(\"error on XHR request.\");\r\n                    errorCallback && errorCallback();\r\n                },\r\n                false\r\n            );\r\n\r\n            xhr.send();\r\n        } else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\r\n            errorCallback && errorCallback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates if xhr data is correct\r\n     * @param xhr defines the request to validate\r\n     * @param dataType defines the expected data type\r\n     * @returns true if data is correct\r\n     */\r\n    private static _ValidateXHRData(xhr: WebRequest, dataType = 7): boolean {\r\n        // 1 for text (.babylon, manifest and shaders), 2 for TGA, 4 for DDS, 7 for all\r\n\r\n        try {\r\n            if (dataType & 1) {\r\n                if (xhr.responseText && xhr.responseText.length > 0) {\r\n                    return true;\r\n                } else if (dataType === 1) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (dataType & 2) {\r\n                // Check header width and height since there is no \"TGA\" magic number\r\n                const tgaHeader = GetTGAHeader(xhr.response);\r\n\r\n                if (tgaHeader.width && tgaHeader.height && tgaHeader.width > 0 && tgaHeader.height > 0) {\r\n                    return true;\r\n                } else if (dataType === 2) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (dataType & 4) {\r\n                // Check for the \"DDS\" magic number\r\n                const ddsHeader = new Uint8Array(xhr.response, 0, 3);\r\n\r\n                if (ddsHeader[0] === 68 && ddsHeader[1] === 68 && ddsHeader[2] === 83) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            // Global protection\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}