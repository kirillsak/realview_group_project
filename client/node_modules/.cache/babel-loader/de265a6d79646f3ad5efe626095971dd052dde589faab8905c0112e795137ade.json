{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { WebVRController } from \"./webVRController.js\";\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController.js\";\n/**\n * Google Daydream controller\n */\nexport class DaydreamController extends WebVRController {\n  /**\n   * Creates a new DaydreamController from a gamepad\n   * @param vrGamepad the gamepad that the controller should be created from\n   */\n  constructor(vrGamepad) {\n    super(vrGamepad);\n    this.controllerType = PoseEnabledControllerType.DAYDREAM;\n  }\n  /**\n   * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\n   * @param scene scene in which to add meshes\n   * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\n   */\n  initControllerMesh(scene, meshLoaded) {\n    SceneLoader.ImportMesh(\"\", DaydreamController.MODEL_BASE_URL, DaydreamController.MODEL_FILENAME, scene, newMeshes => {\n      this._defaultModel = newMeshes[1];\n      this.attachToMesh(this._defaultModel);\n      if (meshLoaded) {\n        meshLoaded(this._defaultModel);\n      }\n    });\n  }\n  /**\n   * Called once for each button that changed state since the last frame\n   * @param buttonIdx Which button index changed\n   * @param state New state of the button\n   */\n  _handleButtonChange(buttonIdx, state) {\n    // Daydream controller only has 1 GamepadButton (on the trackpad).\n    if (buttonIdx === 0) {\n      const observable = this.onTriggerStateChangedObservable;\n      if (observable) {\n        observable.notifyObservers(state);\n      }\n    } else {\n      // If the app or home buttons are ever made available\n      Logger.Warn(`Unrecognized Daydream button index: ${buttonIdx}`);\n    }\n  }\n}\n/**\n * Base Url for the controller model.\n */\nDaydreamController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/generic/\";\n/**\n * File name for the controller model.\n */\nDaydreamController.MODEL_FILENAME = \"generic.babylon\";\n/**\n * Gamepad Id prefix used to identify Daydream Controller.\n */\nDaydreamController.GAMEPAD_ID_PREFIX = \"Daydream\"; // id is 'Daydream Controller'\nPoseEnabledControllerHelper._ControllerFactories.push({\n  canCreate: gamepadInfo => {\n    return gamepadInfo.id.indexOf(DaydreamController.GAMEPAD_ID_PREFIX) === 0;\n  },\n  create: gamepadInfo => {\n    return new DaydreamController(gamepadInfo);\n  }\n});","map":{"version":3,"mappings":";AAAA,SAASA,MAAM,QAAQ,sBAAoB;AAG3C,SAASC,WAAW,QAAQ,8BAA4B;AAExD,SAASC,eAAe,QAAQ,sBAAoB;AAEpD,SAASC,yBAAyB,EAAEC,2BAA2B,QAAQ,4BAA0B;AAEjG;;;AAGA,OAAM,MAAOC,kBAAmB,SAAQH,eAAe;EAgBnD;;;;EAIAI,YAAYC,SAAc;IACtB,KAAK,CAACA,SAAS,CAAC;IAChB,IAAI,CAACC,cAAc,GAAGL,yBAAyB,CAACM,QAAQ;EAC5D;EAEA;;;;;EAKOC,kBAAkB,CAACC,KAAY,EAAEC,UAAyC;IAC7EX,WAAW,CAACY,UAAU,CAAC,EAAE,EAAER,kBAAkB,CAACS,cAAc,EAAET,kBAAkB,CAACU,cAAc,EAAEJ,KAAK,EAAGK,SAAS,IAAI;MAClH,IAAI,CAACC,aAAa,GAAGD,SAAS,CAAC,CAAC,CAAC;MACjC,IAAI,CAACE,YAAY,CAAC,IAAI,CAACD,aAAa,CAAC;MAErC,IAAIL,UAAU,EAAE;QACZA,UAAU,CAAC,IAAI,CAACK,aAAa,CAAC;;IAEtC,CAAC,CAAC;EACN;EAEA;;;;;EAKUE,mBAAmB,CAACC,SAAiB,EAAEC,KAA4B;IACzE;IACA,IAAID,SAAS,KAAK,CAAC,EAAE;MACjB,MAAME,UAAU,GAAG,IAAI,CAACC,+BAA+B;MACvD,IAAID,UAAU,EAAE;QACZA,UAAU,CAACE,eAAe,CAACH,KAAK,CAAC;;KAExC,MAAM;MACH;MACArB,MAAM,CAACyB,IAAI,CAAC,uCAAuCL,SAAS,EAAE,CAAC;;EAEvE;;AAxDA;;;AAGcf,iCAAc,GAAW,4CAA4C;AAEnF;;;AAGcA,iCAAc,GAAW,iBAAiB;AAExD;;;AAGuBA,oCAAiB,GAAW,UAAU,CAAC,CAAC;AA8CnED,2BAA2B,CAACsB,oBAAoB,CAACC,IAAI,CAAC;EAClDC,SAAS,EAAGC,WAAW,IAAI;IACvB,OAAOA,WAAW,CAACC,EAAE,CAACC,OAAO,CAAC1B,kBAAkB,CAAC2B,iBAAiB,CAAC,KAAK,CAAC;EAC7E,CAAC;EACDC,MAAM,EAAGJ,WAAW,IAAI;IACpB,OAAO,IAAIxB,kBAAkB,CAACwB,WAAW,CAAC;EAC9C;CACH,CAAC","names":["Logger","SceneLoader","WebVRController","PoseEnabledControllerType","PoseEnabledControllerHelper","DaydreamController","constructor","vrGamepad","controllerType","DAYDREAM","initControllerMesh","scene","meshLoaded","ImportMesh","MODEL_BASE_URL","MODEL_FILENAME","newMeshes","_defaultModel","attachToMesh","_handleButtonChange","buttonIdx","state","observable","onTriggerStateChangedObservable","notifyObservers","Warn","_ControllerFactories","push","canCreate","gamepadInfo","id","indexOf","GAMEPAD_ID_PREFIX","create"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Gamepads/Controllers/daydreamController.ts"],"sourcesContent":["import { Logger } from \"../../Misc/logger\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\n\r\nimport { WebVRController } from \"./webVRController\";\r\nimport type { ExtendedGamepadButton } from \"./poseEnabledController\";\r\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController\";\r\n\r\n/**\r\n * Google Daydream controller\r\n */\r\nexport class DaydreamController extends WebVRController {\r\n    /**\r\n     * Base Url for the controller model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/generic/\";\r\n\r\n    /**\r\n     * File name for the controller model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"generic.babylon\";\r\n\r\n    /**\r\n     * Gamepad Id prefix used to identify Daydream Controller.\r\n     */\r\n    public static readonly GAMEPAD_ID_PREFIX: string = \"Daydream\"; // id is 'Daydream Controller'\r\n\r\n    /**\r\n     * Creates a new DaydreamController from a gamepad\r\n     * @param vrGamepad the gamepad that the controller should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n        this.controllerType = PoseEnabledControllerType.DAYDREAM;\r\n    }\r\n\r\n    /**\r\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n     * @param scene scene in which to add meshes\r\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n     */\r\n    public initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void) {\r\n        SceneLoader.ImportMesh(\"\", DaydreamController.MODEL_BASE_URL, DaydreamController.MODEL_FILENAME, scene, (newMeshes) => {\r\n            this._defaultModel = newMeshes[1];\r\n            this.attachToMesh(this._defaultModel);\r\n\r\n            if (meshLoaded) {\r\n                meshLoaded(this._defaultModel);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called once for each button that changed state since the last frame\r\n     * @param buttonIdx Which button index changed\r\n     * @param state New state of the button\r\n     */\r\n    protected _handleButtonChange(buttonIdx: number, state: ExtendedGamepadButton) {\r\n        // Daydream controller only has 1 GamepadButton (on the trackpad).\r\n        if (buttonIdx === 0) {\r\n            const observable = this.onTriggerStateChangedObservable;\r\n            if (observable) {\r\n                observable.notifyObservers(state);\r\n            }\r\n        } else {\r\n            // If the app or home buttons are ever made available\r\n            Logger.Warn(`Unrecognized Daydream button index: ${buttonIdx}`);\r\n        }\r\n    }\r\n}\r\n\r\nPoseEnabledControllerHelper._ControllerFactories.push({\r\n    canCreate: (gamepadInfo) => {\r\n        return gamepadInfo.id.indexOf(DaydreamController.GAMEPAD_ID_PREFIX) === 0;\r\n    },\r\n    create: (gamepadInfo) => {\r\n        return new DaydreamController(gamepadInfo);\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}