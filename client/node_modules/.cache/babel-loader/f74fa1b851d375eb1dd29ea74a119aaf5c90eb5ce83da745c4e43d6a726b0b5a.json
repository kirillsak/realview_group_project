{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { WebVRController } from \"./webVRController.js\";\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController.js\";\nimport { EngineStore } from \"../../Engines/engineStore.js\";\n/**\n * Oculus Touch Controller\n */\nexport class OculusTouchController extends WebVRController {\n  /**\n   * Creates a new OculusTouchController from a gamepad\n   * @param vrGamepad the gamepad that the controller should be created from\n   */\n  constructor(vrGamepad) {\n    super(vrGamepad);\n    /**\n     * Fired when the secondary trigger on this controller is modified\n     */\n    this.onSecondaryTriggerStateChangedObservable = new Observable();\n    /**\n     * Fired when the thumb rest on this controller is modified\n     */\n    this.onThumbRestChangedObservable = new Observable();\n    this.controllerType = PoseEnabledControllerType.OCULUS;\n  }\n  /**\n   * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\n   * @param scene scene in which to add meshes\n   * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\n   */\n  initControllerMesh(scene, meshLoaded) {\n    let meshName;\n    // Hand\n    if (this.hand === \"left\") {\n      meshName = OculusTouchController.MODEL_LEFT_FILENAME;\n    } else {\n      // Right is the default if no hand is specified\n      meshName = OculusTouchController.MODEL_RIGHT_FILENAME;\n    }\n    SceneLoader.ImportMesh(\"\", OculusTouchController._IsQuest ? OculusTouchController.QUEST_MODEL_BASE_URL : OculusTouchController.MODEL_BASE_URL, meshName, scene, newMeshes => {\n      /*\n      Parent Mesh name: oculus_touch_left\n      - body\n      - trigger\n      - thumbstick\n      - grip\n      - button_y\n      - button_x\n      - button_enter\n      */\n      this._defaultModel = OculusTouchController._IsQuest ? newMeshes[0] : newMeshes[1];\n      this.attachToMesh(this._defaultModel);\n      if (meshLoaded) {\n        meshLoaded(this._defaultModel);\n      }\n    });\n  }\n  /**\n   * Fired when the A button on this controller is modified\n   */\n  get onAButtonStateChangedObservable() {\n    if (this.hand === \"right\") {\n      return this.onMainButtonStateChangedObservable;\n    } else {\n      throw new Error(\"No A button on left hand\");\n    }\n  }\n  /**\n   * Fired when the B button on this controller is modified\n   */\n  get onBButtonStateChangedObservable() {\n    if (this.hand === \"right\") {\n      return this.onSecondaryButtonStateChangedObservable;\n    } else {\n      throw new Error(\"No B button on left hand\");\n    }\n  }\n  /**\n   * Fired when the X button on this controller is modified\n   */\n  get onXButtonStateChangedObservable() {\n    if (this.hand === \"left\") {\n      return this.onMainButtonStateChangedObservable;\n    } else {\n      throw new Error(\"No X button on right hand\");\n    }\n  }\n  /**\n   * Fired when the Y button on this controller is modified\n   */\n  get onYButtonStateChangedObservable() {\n    if (this.hand === \"left\") {\n      return this.onSecondaryButtonStateChangedObservable;\n    } else {\n      throw new Error(\"No Y button on right hand\");\n    }\n  }\n  /**\n   * Called once for each button that changed state since the last frame\n   * 0) thumb stick (touch, press, value = pressed (0,1)). value is in this.leftStick\n   * 1) index trigger (touch (?), press (only when value > 0.1), value 0 to 1)\n   * 2) secondary trigger (same)\n   * 3) A (right) X (left), touch, pressed = value\n   * 4) B / Y\n   * 5) thumb rest\n   * @param buttonIdx Which button index changed\n   * @param state New state of the button\n   */\n  _handleButtonChange(buttonIdx, state) {\n    const notifyObject = state; //{ state: state, changes: changes };\n    const triggerDirection = this.hand === \"right\" ? -1 : 1;\n    switch (buttonIdx) {\n      case 0:\n        this.onPadStateChangedObservable.notifyObservers(notifyObject);\n        return;\n      case 1:\n        // index trigger\n        if (!OculusTouchController._IsQuest && this._defaultModel) {\n          this._defaultModel.getChildren()[3].rotation.x = -notifyObject.value * 0.2;\n          this._defaultModel.getChildren()[3].position.y = -notifyObject.value * 0.005;\n          this._defaultModel.getChildren()[3].position.z = -notifyObject.value * 0.005;\n        }\n        this.onTriggerStateChangedObservable.notifyObservers(notifyObject);\n        return;\n      case 2:\n        // secondary trigger\n        if (!OculusTouchController._IsQuest && this._defaultModel) {\n          this._defaultModel.getChildren()[4].position.x = triggerDirection * notifyObject.value * 0.0035;\n        }\n        this.onSecondaryTriggerStateChangedObservable.notifyObservers(notifyObject);\n        return;\n      case 3:\n        if (!OculusTouchController._IsQuest && this._defaultModel) {\n          if (notifyObject.pressed) {\n            this._defaultModel.getChildren()[1].position.y = -0.001;\n          } else {\n            this._defaultModel.getChildren()[1].position.y = 0;\n          }\n        }\n        this.onMainButtonStateChangedObservable.notifyObservers(notifyObject);\n        return;\n      case 4:\n        if (!OculusTouchController._IsQuest && this._defaultModel) {\n          if (notifyObject.pressed) {\n            this._defaultModel.getChildren()[2].position.y = -0.001;\n          } else {\n            this._defaultModel.getChildren()[2].position.y = 0;\n          }\n        }\n        this.onSecondaryButtonStateChangedObservable.notifyObservers(notifyObject);\n        return;\n      case 5:\n        this.onThumbRestChangedObservable.notifyObservers(notifyObject);\n        return;\n    }\n  }\n}\n/**\n * Base Url for the controller model.\n */\nOculusTouchController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/oculus/\";\n/**\n * File name for the left controller model.\n */\nOculusTouchController.MODEL_LEFT_FILENAME = \"left.babylon\";\n/**\n * File name for the right controller model.\n */\nOculusTouchController.MODEL_RIGHT_FILENAME = \"right.babylon\";\n/**\n * Base Url for the Quest controller model.\n */\nOculusTouchController.QUEST_MODEL_BASE_URL = \"https://controllers.babylonjs.com/oculusQuest/\";\n/**\n * @internal\n * If the controllers are running on a device that needs the updated Quest controller models\n */\nOculusTouchController._IsQuest = false;\nPoseEnabledControllerHelper._ControllerFactories.push({\n  canCreate: gamepadInfo => {\n    // If the headset reports being an Oculus Quest, use the Quest controller models\n    if (EngineStore.LastCreatedEngine && EngineStore.LastCreatedEngine._vrDisplay && EngineStore.LastCreatedEngine._vrDisplay.displayName === \"Oculus Quest\") {\n      OculusTouchController._IsQuest = true;\n    }\n    return gamepadInfo.id.indexOf(\"Oculus Touch\") !== -1;\n  },\n  create: gamepadInfo => {\n    return new OculusTouchController(gamepadInfo);\n  }\n});","map":{"version":3,"mappings":"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","names":["Observable","SceneLoader","WebVRController","PoseEnabledControllerType","PoseEnabledControllerHelper","EngineStore","OculusTouchController","constructor","vrGamepad","controllerType","OCULUS","initControllerMesh","scene","meshLoaded","meshName","hand","MODEL_LEFT_FILENAME","MODEL_RIGHT_FILENAME","ImportMesh","_IsQuest","QUEST_MODEL_BASE_URL","MODEL_BASE_URL","newMeshes","_defaultModel","attachToMesh","onAButtonStateChangedObservable","onMainButtonStateChangedObservable","Error","onBButtonStateChangedObservable","onSecondaryButtonStateChangedObservable","onXButtonStateChangedObservable","onYButtonStateChangedObservable","_handleButtonChange","buttonIdx","state","notifyObject","triggerDirection","onPadStateChangedObservable","notifyObservers","getChildren","rotation","x","value","position","y","z","onTriggerStateChangedObservable","onSecondaryTriggerStateChangedObservable","pressed","onThumbRestChangedObservable","_ControllerFactories","push","canCreate","gamepadInfo","LastCreatedEngine","_vrDisplay","displayName","id","indexOf","create"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Gamepads/Controllers/oculusTouchController.ts"],"sourcesContent":["import { Observable } from \"../../Misc/observable\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport { WebVRController } from \"./webVRController\";\r\nimport type { ExtendedGamepadButton } from \"./poseEnabledController\";\r\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\n/**\r\n * Oculus Touch Controller\r\n */\r\nexport class OculusTouchController extends WebVRController {\r\n    /**\r\n     * Base Url for the controller model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/oculus/\";\r\n    /**\r\n     * File name for the left controller model.\r\n     */\r\n    public static MODEL_LEFT_FILENAME: string = \"left.babylon\";\r\n    /**\r\n     * File name for the right controller model.\r\n     */\r\n    public static MODEL_RIGHT_FILENAME: string = \"right.babylon\";\r\n\r\n    /**\r\n     * Base Url for the Quest controller model.\r\n     */\r\n    public static QUEST_MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/oculusQuest/\";\r\n\r\n    /**\r\n     * @internal\r\n     * If the controllers are running on a device that needs the updated Quest controller models\r\n     */\r\n    public static _IsQuest = false;\r\n\r\n    /**\r\n     * Fired when the secondary trigger on this controller is modified\r\n     */\r\n    public onSecondaryTriggerStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n\r\n    /**\r\n     * Fired when the thumb rest on this controller is modified\r\n     */\r\n    public onThumbRestChangedObservable = new Observable<ExtendedGamepadButton>();\r\n\r\n    /**\r\n     * Creates a new OculusTouchController from a gamepad\r\n     * @param vrGamepad the gamepad that the controller should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n        this.controllerType = PoseEnabledControllerType.OCULUS;\r\n    }\r\n\r\n    /**\r\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n     * @param scene scene in which to add meshes\r\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n     */\r\n    public initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void) {\r\n        let meshName;\r\n\r\n        // Hand\r\n        if (this.hand === \"left\") {\r\n            meshName = OculusTouchController.MODEL_LEFT_FILENAME;\r\n        } else {\r\n            // Right is the default if no hand is specified\r\n            meshName = OculusTouchController.MODEL_RIGHT_FILENAME;\r\n        }\r\n\r\n        SceneLoader.ImportMesh(\r\n            \"\",\r\n            OculusTouchController._IsQuest ? OculusTouchController.QUEST_MODEL_BASE_URL : OculusTouchController.MODEL_BASE_URL,\r\n            meshName,\r\n            scene,\r\n            (newMeshes) => {\r\n                /*\r\n            Parent Mesh name: oculus_touch_left\r\n            - body\r\n            - trigger\r\n            - thumbstick\r\n            - grip\r\n            - button_y\r\n            - button_x\r\n            - button_enter\r\n            */\r\n\r\n                this._defaultModel = OculusTouchController._IsQuest ? newMeshes[0] : newMeshes[1];\r\n                this.attachToMesh(this._defaultModel);\r\n                if (meshLoaded) {\r\n                    meshLoaded(this._defaultModel);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Fired when the A button on this controller is modified\r\n     */\r\n    public get onAButtonStateChangedObservable() {\r\n        if (this.hand === \"right\") {\r\n            return this.onMainButtonStateChangedObservable;\r\n        } else {\r\n            throw new Error(\"No A button on left hand\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fired when the B button on this controller is modified\r\n     */\r\n    public get onBButtonStateChangedObservable() {\r\n        if (this.hand === \"right\") {\r\n            return this.onSecondaryButtonStateChangedObservable;\r\n        } else {\r\n            throw new Error(\"No B button on left hand\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fired when the X button on this controller is modified\r\n     */\r\n    public get onXButtonStateChangedObservable() {\r\n        if (this.hand === \"left\") {\r\n            return this.onMainButtonStateChangedObservable;\r\n        } else {\r\n            throw new Error(\"No X button on right hand\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fired when the Y button on this controller is modified\r\n     */\r\n    public get onYButtonStateChangedObservable() {\r\n        if (this.hand === \"left\") {\r\n            return this.onSecondaryButtonStateChangedObservable;\r\n        } else {\r\n            throw new Error(\"No Y button on right hand\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called once for each button that changed state since the last frame\r\n     * 0) thumb stick (touch, press, value = pressed (0,1)). value is in this.leftStick\r\n     * 1) index trigger (touch (?), press (only when value > 0.1), value 0 to 1)\r\n     * 2) secondary trigger (same)\r\n     * 3) A (right) X (left), touch, pressed = value\r\n     * 4) B / Y\r\n     * 5) thumb rest\r\n     * @param buttonIdx Which button index changed\r\n     * @param state New state of the button\r\n     */\r\n    protected _handleButtonChange(buttonIdx: number, state: ExtendedGamepadButton) {\r\n        const notifyObject = state; //{ state: state, changes: changes };\r\n        const triggerDirection = this.hand === \"right\" ? -1 : 1;\r\n        switch (buttonIdx) {\r\n            case 0:\r\n                this.onPadStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 1: // index trigger\r\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\r\n                    (<AbstractMesh>this._defaultModel.getChildren()[3]).rotation.x = -notifyObject.value * 0.2;\r\n                    (<AbstractMesh>this._defaultModel.getChildren()[3]).position.y = -notifyObject.value * 0.005;\r\n                    (<AbstractMesh>this._defaultModel.getChildren()[3]).position.z = -notifyObject.value * 0.005;\r\n                }\r\n                this.onTriggerStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 2: // secondary trigger\r\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\r\n                    (<AbstractMesh>this._defaultModel.getChildren()[4]).position.x = triggerDirection * notifyObject.value * 0.0035;\r\n                }\r\n                this.onSecondaryTriggerStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 3:\r\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\r\n                    if (notifyObject.pressed) {\r\n                        (<AbstractMesh>this._defaultModel.getChildren()[1]).position.y = -0.001;\r\n                    } else {\r\n                        (<AbstractMesh>this._defaultModel.getChildren()[1]).position.y = 0;\r\n                    }\r\n                }\r\n                this.onMainButtonStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 4:\r\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\r\n                    if (notifyObject.pressed) {\r\n                        (<AbstractMesh>this._defaultModel.getChildren()[2]).position.y = -0.001;\r\n                    } else {\r\n                        (<AbstractMesh>this._defaultModel.getChildren()[2]).position.y = 0;\r\n                    }\r\n                }\r\n                this.onSecondaryButtonStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 5:\r\n                this.onThumbRestChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n        }\r\n    }\r\n}\r\n\r\nPoseEnabledControllerHelper._ControllerFactories.push({\r\n    canCreate: (gamepadInfo) => {\r\n        // If the headset reports being an Oculus Quest, use the Quest controller models\r\n        if (EngineStore.LastCreatedEngine && EngineStore.LastCreatedEngine._vrDisplay && EngineStore.LastCreatedEngine._vrDisplay.displayName === \"Oculus Quest\") {\r\n            OculusTouchController._IsQuest = true;\r\n        }\r\n        return gamepadInfo.id.indexOf(\"Oculus Touch\") !== -1;\r\n    },\r\n    create: (gamepadInfo) => {\r\n        return new OculusTouchController(gamepadInfo);\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}