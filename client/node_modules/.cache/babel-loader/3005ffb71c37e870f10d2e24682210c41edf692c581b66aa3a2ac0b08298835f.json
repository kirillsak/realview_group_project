{"ast":null,"code":"/** @internal */\nexport class WebGPUComputePipelineContext {\n  constructor(engine) {\n    this._name = \"unnamed\";\n    this.engine = engine;\n  }\n  get isAsync() {\n    return false;\n  }\n  get isReady() {\n    if (this.stage) {\n      return true;\n    }\n    return false;\n  }\n  _getComputeShaderCode() {\n    var _a;\n    return (_a = this.sources) === null || _a === void 0 ? void 0 : _a.compute;\n  }\n  dispose() {}\n}","map":{"version":3,"mappings":"AAIA;AACA,OAAM,MAAOA,4BAA4B;EA2BrCC,YAAYC,MAAoB;IAC5B,IAAI,CAACC,KAAK,GAAG,SAAS;IACtB,IAAI,CAACD,MAAM,GAAGA,MAAM;EACxB;EAlBA,IAAWE,OAAO;IACd,OAAO,KAAK;EAChB;EAEA,IAAWC,OAAO;IACd,IAAI,IAAI,CAACC,KAAK,EAAE;MACZ,OAAO,IAAI;;IAGf,OAAO,KAAK;EAChB;EAUOC,qBAAqB;;IACxB,OAAO,UAAI,CAACC,OAAO,0CAAEC,OAAO;EAChC;EAEOC,OAAO,IAAU","names":["WebGPUComputePipelineContext","constructor","engine","_name","isAsync","isReady","stage","_getComputeShaderCode","sources","compute","dispose"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/WebGPU/webgpuComputePipelineContext.ts"],"sourcesContent":["import type { IComputePipelineContext } from \"../../Compute/IComputePipelineContext\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { WebGPUEngine } from \"../webgpuEngine\";\r\n\r\n/** @internal */\r\nexport class WebGPUComputePipelineContext implements IComputePipelineContext {\r\n    public engine: WebGPUEngine;\r\n\r\n    public sources: {\r\n        compute: string;\r\n        rawCompute: string;\r\n    };\r\n\r\n    public stage: Nullable<GPUProgrammableStage>;\r\n\r\n    public computePipeline: GPUComputePipeline;\r\n\r\n    public get isAsync() {\r\n        return false;\r\n    }\r\n\r\n    public get isReady(): boolean {\r\n        if (this.stage) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @internal */\r\n    public _name: string;\r\n\r\n    constructor(engine: WebGPUEngine) {\r\n        this._name = \"unnamed\";\r\n        this.engine = engine;\r\n    }\r\n\r\n    public _getComputeShaderCode(): string | null {\r\n        return this.sources?.compute;\r\n    }\r\n\r\n    public dispose(): void {}\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}