{"ast":null,"code":"import { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Block used to write the fragment depth\n */\nexport class FragDepthBlock extends NodeMaterialBlock {\n  /**\n   * Create a new FragDepthBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Fragment, true);\n    this.registerInput(\"depth\", NodeMaterialBlockConnectionPointTypes.Float, true);\n    this.registerInput(\"worldPos\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n    this.registerInput(\"viewProjection\", NodeMaterialBlockConnectionPointTypes.Matrix, true);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"FragDepthBlock\";\n  }\n  /**\n   * Gets the depth input component\n   */\n  get depth() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the worldPos input component\n   */\n  get worldPos() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the viewProjection input component\n   */\n  get viewProjection() {\n    return this._inputs[2];\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    if (this.depth.isConnected) {\n      state.compilationString += `gl_FragDepth = ${this.depth.associatedVariableName};\\r\\n`;\n    } else if (this.worldPos.isConnected && this.viewProjection.isConnected) {\n      state.compilationString += `\n                vec4 p = ${this.viewProjection.associatedVariableName} * ${this.worldPos.associatedVariableName};\n                float v = p.z / p.w;\n                #ifndef IS_NDC_HALF_ZRANGE\n                    v = v * 0.5 + 0.5;\n                #endif\n                gl_FragDepth = v;\n    \n            `;\n    } else {\n      console.warn(\"FragDepthBlock: either the depth input or both the worldPos and viewProjection inputs must be connected!\");\n    }\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.FragDepthBlock\", FragDepthBlock);","map":{"version":3,"mappings":"AAAA,SAASA,iBAAiB,QAAQ,4BAA0B;AAC5D,SAASC,qCAAqC,QAAQ,sDAAoD;AAE1G,SAASC,wBAAwB,QAAQ,yCAAuC;AAEhF,SAASC,aAAa,QAAQ,+BAA6B;AAC3D;;;AAGA,OAAM,MAAOC,cAAe,SAAQJ,iBAAiB;EACjD;;;;EAIAK,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,EAAEJ,wBAAwB,CAACK,QAAQ,EAAE,IAAI,CAAC;IAEpD,IAAI,CAACC,aAAa,CAAC,OAAO,EAAEP,qCAAqC,CAACQ,KAAK,EAAE,IAAI,CAAC;IAC9E,IAAI,CAACD,aAAa,CAAC,UAAU,EAAEP,qCAAqC,CAACS,OAAO,EAAE,IAAI,CAAC;IACnF,IAAI,CAACF,aAAa,CAAC,gBAAgB,EAAEP,qCAAqC,CAACU,MAAM,EAAE,IAAI,CAAC;EAC5F;EAEA;;;;EAIOC,YAAY;IACf,OAAO,gBAAgB;EAC3B;EAEA;;;EAGA,IAAWC,KAAK;IACZ,OAAO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWC,QAAQ;IACf,OAAO,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWE,cAAc;IACrB,OAAO,IAAI,CAACF,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEUG,WAAW,CAACC,KAA6B;IAC/C,KAAK,CAACD,WAAW,CAACC,KAAK,CAAC;IAExB,IAAI,IAAI,CAACL,KAAK,CAACM,WAAW,EAAE;MACxBD,KAAK,CAACE,iBAAiB,IAAI,kBAAkB,IAAI,CAACP,KAAK,CAACQ,sBAAsB,OAAO;KACxF,MAAM,IAAI,IAAI,CAACN,QAAQ,CAACI,WAAW,IAAI,IAAI,CAACH,cAAc,CAACG,WAAW,EAAE;MACrED,KAAK,CAACE,iBAAiB,IAAI;2BACZ,IAAI,CAACJ,cAAc,CAACK,sBAAsB,MAAM,IAAI,CAACN,QAAQ,CAACM,sBAAsB;;;;;;;aAOlG;KACJ,MAAM;MACHC,OAAO,CAACC,IAAI,CAAC,0GAA0G,CAAC;;IAG5H,OAAO,IAAI;EACf;;AAGJpB,aAAa,CAAC,wBAAwB,EAAEC,cAAc,CAAC","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","FragDepthBlock","constructor","name","Fragment","registerInput","Float","Vector4","Matrix","getClassName","depth","_inputs","worldPos","viewProjection","_buildBlock","state","isConnected","compilationString","associatedVariableName","console","warn"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/Fragment/fragDepthBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n/**\r\n * Block used to write the fragment depth\r\n */\r\nexport class FragDepthBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new FragDepthBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment, true);\r\n\r\n        this.registerInput(\"depth\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"worldPos\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\r\n        this.registerInput(\"viewProjection\", NodeMaterialBlockConnectionPointTypes.Matrix, true);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"FragDepthBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the depth input component\r\n     */\r\n    public get depth(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the worldPos input component\r\n     */\r\n    public get worldPos(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the viewProjection input component\r\n     */\r\n    public get viewProjection(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (this.depth.isConnected) {\r\n            state.compilationString += `gl_FragDepth = ${this.depth.associatedVariableName};\\r\\n`;\r\n        } else if (this.worldPos.isConnected && this.viewProjection.isConnected) {\r\n            state.compilationString += `\r\n                vec4 p = ${this.viewProjection.associatedVariableName} * ${this.worldPos.associatedVariableName};\r\n                float v = p.z / p.w;\r\n                #ifndef IS_NDC_HALF_ZRANGE\r\n                    v = v * 0.5 + 0.5;\r\n                #endif\r\n                gl_FragDepth = v;\r\n    \r\n            `;\r\n        } else {\r\n            console.warn(\"FragDepthBlock: either the depth input or both the worldPos and viewProjection inputs must be connected!\");\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.FragDepthBlock\", FragDepthBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}