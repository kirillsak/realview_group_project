{"ast":null,"code":"import { Scene } from \"../scene.js\";\nimport { Mesh } from \"./mesh.js\";\nimport { SimplificationQueue, SimplificationType } from \"./meshSimplification.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nObject.defineProperty(Scene.prototype, \"simplificationQueue\", {\n  get: function () {\n    if (!this._simplificationQueue) {\n      this._simplificationQueue = new SimplificationQueue();\n      let component = this._getComponent(SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE);\n      if (!component) {\n        component = new SimplicationQueueSceneComponent(this);\n        this._addComponent(component);\n      }\n    }\n    return this._simplificationQueue;\n  },\n  set: function (value) {\n    this._simplificationQueue = value;\n  },\n  enumerable: true,\n  configurable: true\n});\nMesh.prototype.simplify = function (settings, parallelProcessing = true, simplificationType = SimplificationType.QUADRATIC, successCallback) {\n  this.getScene().simplificationQueue.addTask({\n    settings: settings,\n    parallelProcessing: parallelProcessing,\n    mesh: this,\n    simplificationType: simplificationType,\n    successCallback: successCallback\n  });\n  return this;\n};\n/**\n * Defines the simplification queue scene component responsible to help scheduling the various simplification task\n * created in a scene\n */\nexport class SimplicationQueueSceneComponent {\n  /**\n   * Creates a new instance of the component for the given scene\n   * @param scene Defines the scene to register the component in\n   */\n  constructor(scene) {\n    /**\n     * The component name helpfull to identify the component in the list of scene components.\n     */\n    this.name = SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE;\n    this.scene = scene;\n  }\n  /**\n   * Registers the component in a given scene\n   */\n  register() {\n    this.scene._beforeCameraUpdateStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE, this, this._beforeCameraUpdate);\n  }\n  /**\n   * Rebuilds the elements related to this component in case of\n   * context lost for instance.\n   */\n  rebuild() {\n    // Nothing to do for this component\n  }\n  /**\n   * Disposes the component and the associated resources\n   */\n  dispose() {\n    // Nothing to do for this component\n  }\n  _beforeCameraUpdate() {\n    if (this.scene._simplificationQueue && !this.scene._simplificationQueue.running) {\n      this.scene._simplificationQueue.executeNext();\n    }\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,KAAK,QAAQ,aAAW;AACjC,SAASC,IAAI,QAAQ,WAAS;AAE9B,SAASC,mBAAmB,EAAEC,kBAAkB,QAAQ,yBAAuB;AAE/E,SAASC,uBAAuB,QAAQ,sBAAoB;AAc5DC,MAAM,CAACC,cAAc,CAACN,KAAK,CAACO,SAAS,EAAE,qBAAqB,EAAE;EAC1DC,GAAG,EAAE;IACD,IAAI,CAAC,IAAI,CAACC,oBAAoB,EAAE;MAC5B,IAAI,CAACA,oBAAoB,GAAG,IAAIP,mBAAmB,EAAE;MACrD,IAAIQ,SAAS,GAAG,IAAI,CAACC,aAAa,CAACP,uBAAuB,CAACQ,wBAAwB,CAAoC;MACvH,IAAI,CAACF,SAAS,EAAE;QACZA,SAAS,GAAG,IAAIG,+BAA+B,CAAC,IAAI,CAAC;QACrD,IAAI,CAACC,aAAa,CAACJ,SAAS,CAAC;;;IAGrC,OAAO,IAAI,CAACD,oBAAoB;EACpC,CAAC;EACDM,GAAG,EAAE,UAAuBC,KAA0B;IAClD,IAAI,CAACP,oBAAoB,GAAGO,KAAK;EACrC,CAAC;EACDC,UAAU,EAAE,IAAI;EAChBC,YAAY,EAAE;CACjB,CAAC;AAsBFjB,IAAI,CAACM,SAAS,CAACY,QAAQ,GAAG,UACtBC,QAAwC,EACxCC,qBAA8B,IAAI,EAClCC,qBAAyCnB,kBAAkB,CAACoB,SAAS,EACrEC,eAA8D;EAE9D,IAAI,CAACC,QAAQ,EAAE,CAACC,mBAAmB,CAACC,OAAO,CAAC;IACxCP,QAAQ,EAAEA,QAAQ;IAClBC,kBAAkB,EAAEA,kBAAkB;IACtCO,IAAI,EAAE,IAAI;IACVN,kBAAkB,EAAEA,kBAAkB;IACtCE,eAAe,EAAEA;GACpB,CAAC;EACF,OAAO,IAAI;AACf,CAAC;AAED;;;;AAIA,OAAM,MAAOX,+BAA+B;EAWxC;;;;EAIAgB,YAAYC,KAAY;IAdxB;;;IAGgB,SAAI,GAAG1B,uBAAuB,CAACQ,wBAAwB;IAYnE,IAAI,CAACkB,KAAK,GAAGA,KAAK;EACtB;EAEA;;;EAGOC,QAAQ;IACX,IAAI,CAACD,KAAK,CAACE,wBAAwB,CAACC,YAAY,CAAC7B,uBAAuB,CAAC8B,2CAA2C,EAAE,IAAI,EAAE,IAAI,CAACC,mBAAmB,CAAC;EACzJ;EAEA;;;;EAIOC,OAAO;IACV;EAAA;EAGJ;;;EAGOC,OAAO;IACV;EAAA;EAGIF,mBAAmB;IACvB,IAAI,IAAI,CAACL,KAAK,CAACrB,oBAAoB,IAAI,CAAC,IAAI,CAACqB,KAAK,CAACrB,oBAAoB,CAAC6B,OAAO,EAAE;MAC7E,IAAI,CAACR,KAAK,CAACrB,oBAAoB,CAAC8B,WAAW,EAAE;;EAErD","names":["Scene","Mesh","SimplificationQueue","SimplificationType","SceneComponentConstants","Object","defineProperty","prototype","get","_simplificationQueue","component","_getComponent","NAME_SIMPLIFICATIONQUEUE","SimplicationQueueSceneComponent","_addComponent","set","value","enumerable","configurable","simplify","settings","parallelProcessing","simplificationType","QUADRATIC","successCallback","getScene","simplificationQueue","addTask","mesh","constructor","scene","register","_beforeCameraUpdateStage","registerStep","STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE","_beforeCameraUpdate","rebuild","dispose","running","executeNext"],"sourceRoot":"","sources":["../../../../lts/core/generated/Meshes/meshSimplificationSceneComponent.ts"],"sourcesContent":["import { Scene } from \"../scene\";\r\nimport { Mesh } from \"./mesh\";\r\nimport type { ISimplificationSettings } from \"./meshSimplification\";\r\nimport { SimplificationQueue, SimplificationType } from \"./meshSimplification\";\r\nimport type { ISceneComponent } from \"../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /** @internal (Backing field) */\r\n        _simplificationQueue: SimplificationQueue;\r\n\r\n        /**\r\n         * Gets or sets the simplification queue attached to the scene\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/simplifyingMeshes\r\n         */\r\n        simplificationQueue: SimplificationQueue;\r\n    }\r\n}\r\nObject.defineProperty(Scene.prototype, \"simplificationQueue\", {\r\n    get: function (this: Scene) {\r\n        if (!this._simplificationQueue) {\r\n            this._simplificationQueue = new SimplificationQueue();\r\n            let component = this._getComponent(SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE) as SimplicationQueueSceneComponent;\r\n            if (!component) {\r\n                component = new SimplicationQueueSceneComponent(this);\r\n                this._addComponent(component);\r\n            }\r\n        }\r\n        return this._simplificationQueue;\r\n    },\r\n    set: function (this: Scene, value: SimplificationQueue) {\r\n        this._simplificationQueue = value;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\ndeclare module \"../Meshes/mesh\" {\r\n    export interface Mesh {\r\n        /**\r\n         * Simplify the mesh according to the given array of settings.\r\n         * Function will return immediately and will simplify async\r\n         * @param settings a collection of simplification settings\r\n         * @param parallelProcessing should all levels calculate parallel or one after the other\r\n         * @param simplificationType the type of simplification to run\r\n         * @param successCallback optional success callback to be called after the simplification finished processing all settings\r\n         * @returns the current mesh\r\n         */\r\n        simplify(\r\n            settings: Array<ISimplificationSettings>,\r\n            parallelProcessing?: boolean,\r\n            simplificationType?: SimplificationType,\r\n            successCallback?: (mesh?: Mesh, submeshIndex?: number) => void\r\n        ): Mesh;\r\n    }\r\n}\r\n\r\nMesh.prototype.simplify = function (\r\n    settings: Array<ISimplificationSettings>,\r\n    parallelProcessing: boolean = true,\r\n    simplificationType: SimplificationType = SimplificationType.QUADRATIC,\r\n    successCallback?: (mesh?: Mesh, submeshIndex?: number) => void\r\n): Mesh {\r\n    this.getScene().simplificationQueue.addTask({\r\n        settings: settings,\r\n        parallelProcessing: parallelProcessing,\r\n        mesh: this,\r\n        simplificationType: simplificationType,\r\n        successCallback: successCallback,\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Defines the simplification queue scene component responsible to help scheduling the various simplification task\r\n * created in a scene\r\n */\r\nexport class SimplicationQueueSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._beforeCameraUpdateStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE, this, this._beforeCameraUpdate);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do for this component\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources\r\n     */\r\n    public dispose(): void {\r\n        // Nothing to do for this component\r\n    }\r\n\r\n    private _beforeCameraUpdate(): void {\r\n        if (this.scene._simplificationQueue && !this.scene._simplificationQueue.running) {\r\n            this.scene._simplificationQueue.executeNext();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}