{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { SphericalPolynomial } from \"../../../Maths/sphericalPolynomial.js\";\nimport { Engine } from \"../../../Engines/engine.js\";\nimport { DDSTools } from \"../../../Misc/dds.js\";\n/**\n * Implementation of the DDS Texture Loader.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _DDSTextureLoader {\n  constructor() {\n    /**\n     * Defines whether the loader supports cascade loading the different faces.\n     */\n    this.supportCascades = true;\n  }\n  /**\n   * This returns if the loader support the current file information.\n   * @param extension defines the file extension of the file being loaded\n   * @returns true if the loader can load the specified file\n   */\n  canLoad(extension) {\n    return extension.endsWith(\".dds\");\n  }\n  /**\n   * Uploads the cube texture data to the WebGL texture. It has already been bound.\n   * @param imgs contains the cube maps\n   * @param texture defines the BabylonJS internal texture\n   * @param createPolynomials will be true if polynomials have been requested\n   * @param onLoad defines the callback to trigger once the texture is ready\n   */\n  loadCubeData(imgs, texture, createPolynomials, onLoad) {\n    const engine = texture.getEngine();\n    let info;\n    let loadMipmap = false;\n    let maxLevel = 1000;\n    if (Array.isArray(imgs)) {\n      for (let index = 0; index < imgs.length; index++) {\n        const data = imgs[index];\n        info = DDSTools.GetDDSInfo(data);\n        texture.width = info.width;\n        texture.height = info.height;\n        loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\n        engine._unpackFlipY(info.isCompressed);\n        DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6, -1, index);\n        if (!info.isFourCC && info.mipmapCount === 1) {\n          engine.generateMipMapsForCubemap(texture);\n        } else {\n          maxLevel = info.mipmapCount - 1;\n        }\n      }\n    } else {\n      const data = imgs;\n      info = DDSTools.GetDDSInfo(data);\n      texture.width = info.width;\n      texture.height = info.height;\n      if (createPolynomials) {\n        info.sphericalPolynomial = new SphericalPolynomial();\n      }\n      loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\n      engine._unpackFlipY(info.isCompressed);\n      DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6);\n      if (!info.isFourCC && info.mipmapCount === 1) {\n        // Do not unbind as we still need to set the parameters.\n        engine.generateMipMapsForCubemap(texture, false);\n      } else {\n        maxLevel = info.mipmapCount - 1;\n      }\n    }\n    engine._setCubeMapTextureParams(texture, loadMipmap, maxLevel);\n    texture.isReady = true;\n    texture.onLoadedObservable.notifyObservers(texture);\n    texture.onLoadedObservable.clear();\n    if (onLoad) {\n      onLoad({\n        isDDS: true,\n        width: texture.width,\n        info,\n        data: imgs,\n        texture\n      });\n    }\n  }\n  /**\n   * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n   * @param data contains the texture data\n   * @param texture defines the BabylonJS internal texture\n   * @param callback defines the method to call once ready to upload\n   */\n  loadData(data, texture, callback) {\n    const info = DDSTools.GetDDSInfo(data);\n    const loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps && info.width >> info.mipmapCount - 1 === 1;\n    callback(info.width, info.height, loadMipmap, info.isFourCC, () => {\n      DDSTools.UploadDDSLevels(texture.getEngine(), texture, data, info, loadMipmap, 1);\n    });\n  }\n}\n// Register the loader.\nEngine._TextureLoaders.push(new _DDSTextureLoader());","map":{"version":3,"mappings":"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","names":["SphericalPolynomial","Engine","DDSTools","_DDSTextureLoader","constructor","canLoad","extension","endsWith","loadCubeData","imgs","texture","createPolynomials","onLoad","engine","getEngine","info","loadMipmap","maxLevel","Array","isArray","index","length","data","GetDDSInfo","width","height","isRGB","isLuminance","mipmapCount","generateMipMaps","_unpackFlipY","isCompressed","UploadDDSLevels","isFourCC","generateMipMapsForCubemap","sphericalPolynomial","_setCubeMapTextureParams","isReady","onLoadedObservable","notifyObservers","clear","isDDS","loadData","callback","_TextureLoaders","push"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Textures/Loaders/ddsTextureLoader.ts"],"sourcesContent":["import type { Nullable } from \"../../../types\";\r\nimport { SphericalPolynomial } from \"../../../Maths/sphericalPolynomial\";\r\nimport { Engine } from \"../../../Engines/engine\";\r\nimport type { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport type { IInternalTextureLoader } from \"../../../Materials/Textures/internalTextureLoader\";\r\nimport type { DDSInfo } from \"../../../Misc/dds\";\r\nimport { DDSTools } from \"../../../Misc/dds\";\r\n\r\n/**\r\n * Implementation of the DDS Texture Loader.\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _DDSTextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines whether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = true;\r\n\r\n    /**\r\n     * This returns if the loader support the current file information.\r\n     * @param extension defines the file extension of the file being loaded\r\n     * @returns true if the loader can load the specified file\r\n     */\r\n    public canLoad(extension: string): boolean {\r\n        return extension.endsWith(\".dds\");\r\n    }\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n     * @param imgs contains the cube maps\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param createPolynomials will be true if polynomials have been requested\r\n     * @param onLoad defines the callback to trigger once the texture is ready\r\n     */\r\n    public loadCubeData(imgs: ArrayBufferView | ArrayBufferView[], texture: InternalTexture, createPolynomials: boolean, onLoad: Nullable<(data?: any) => void>): void {\r\n        const engine = texture.getEngine() as Engine;\r\n        let info: DDSInfo | undefined;\r\n        let loadMipmap: boolean = false;\r\n        let maxLevel: number = 1000;\r\n        if (Array.isArray(imgs)) {\r\n            for (let index = 0; index < imgs.length; index++) {\r\n                const data = imgs[index];\r\n                info = DDSTools.GetDDSInfo(data);\r\n\r\n                texture.width = info.width;\r\n                texture.height = info.height;\r\n\r\n                loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\r\n\r\n                engine._unpackFlipY(info.isCompressed);\r\n\r\n                DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6, -1, index);\r\n\r\n                if (!info.isFourCC && info.mipmapCount === 1) {\r\n                    engine.generateMipMapsForCubemap(texture);\r\n                } else {\r\n                    maxLevel = info.mipmapCount - 1;\r\n                }\r\n            }\r\n        } else {\r\n            const data = imgs;\r\n            info = DDSTools.GetDDSInfo(data);\r\n\r\n            texture.width = info.width;\r\n            texture.height = info.height;\r\n\r\n            if (createPolynomials) {\r\n                info.sphericalPolynomial = new SphericalPolynomial();\r\n            }\r\n\r\n            loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\r\n            engine._unpackFlipY(info.isCompressed);\r\n\r\n            DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6);\r\n\r\n            if (!info.isFourCC && info.mipmapCount === 1) {\r\n                // Do not unbind as we still need to set the parameters.\r\n                engine.generateMipMapsForCubemap(texture, false);\r\n            } else {\r\n                maxLevel = info.mipmapCount - 1;\r\n            }\r\n        }\r\n        engine._setCubeMapTextureParams(texture, loadMipmap, maxLevel);\r\n        texture.isReady = true;\r\n        texture.onLoadedObservable.notifyObservers(texture);\r\n        texture.onLoadedObservable.clear();\r\n\r\n        if (onLoad) {\r\n            onLoad({ isDDS: true, width: texture.width, info, data: imgs, texture });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     */\r\n    public loadData(\r\n        data: ArrayBufferView,\r\n        texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void) => void\r\n    ): void {\r\n        const info = DDSTools.GetDDSInfo(data);\r\n\r\n        const loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps && info.width >> (info.mipmapCount - 1) === 1;\r\n        callback(info.width, info.height, loadMipmap, info.isFourCC, () => {\r\n            DDSTools.UploadDDSLevels(texture.getEngine(), texture, data, info, loadMipmap, 1);\r\n        });\r\n    }\r\n}\r\n\r\n// Register the loader.\r\nEngine._TextureLoaders.push(new _DDSTextureLoader());\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}