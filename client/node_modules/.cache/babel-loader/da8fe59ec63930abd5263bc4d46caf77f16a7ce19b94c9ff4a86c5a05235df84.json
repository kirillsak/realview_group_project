{"ast":null,"code":"import * as WebGPUConstants from \"./webgpuConstants.js\";\nconst filterToBits = [0 | 0 << 1 | 0 << 2, 0 | 0 << 1 | 0 << 2, 1 | 1 << 1 | 0 << 2, 1 | 1 << 1 | 1 << 2, 0 | 0 << 1 | 0 << 2, 0 | 1 << 1 | 0 << 2, 0 | 1 << 1 | 1 << 2, 0 | 1 << 1 | 0 << 2, 0 | 0 << 1 | 1 << 2, 1 | 0 << 1 | 0 << 2, 1 | 0 << 1 | 1 << 2, 1 | 1 << 1 | 0 << 2, 1 | 0 << 1 | 0 << 2 // TEXTURE_LINEAR_NEAREST\n];\n// subtract 0x01FF from the comparison function value before indexing this array!\nconst comparisonFunctionToBits = [0 << 3 | 0 << 4 | 0 << 5 | 0 << 6, 0 << 3 | 0 << 4 | 0 << 5 | 1 << 6, 0 << 3 | 0 << 4 | 1 << 5 | 0 << 6, 0 << 3 | 0 << 4 | 1 << 5 | 1 << 6, 0 << 3 | 1 << 4 | 0 << 5 | 0 << 6, 0 << 3 | 1 << 4 | 0 << 5 | 1 << 6, 0 << 3 | 1 << 4 | 1 << 5 | 0 << 6, 0 << 3 | 1 << 4 | 1 << 5 | 1 << 6, 1 << 3 | 0 << 4 | 0 << 5 | 0 << 6 // ALWAYS\n];\n\nconst filterNoMipToBits = [0 << 7, 1 << 7, 1 << 7, 0 << 7, 0 << 7, 0 << 7, 0 << 7, 1 << 7, 0 << 7, 0 << 7, 0 << 7, 0 << 7, 1 << 7 // TEXTURE_LINEAR_NEAREST\n];\n/** @internal */\nexport class WebGPUCacheSampler {\n  constructor(device) {\n    this._samplers = {};\n    this._device = device;\n    this.disabled = false;\n  }\n  static GetSamplerHashCode(sampler) {\n    var _a, _b, _c;\n    // The WebGPU spec currently only allows values 1 and 4 for anisotropy\n    const anisotropy = sampler._cachedAnisotropicFilteringLevel && sampler._cachedAnisotropicFilteringLevel > 1 ? 4 : 1;\n    const code = filterToBits[sampler.samplingMode] + comparisonFunctionToBits[(sampler._comparisonFunction || 0x0202) - 0x0200 + 1] + filterNoMipToBits[sampler.samplingMode] + (\n    // handle the lodMinClamp = lodMaxClamp = 0 case when no filter used for mip mapping\n    ((_a = sampler._cachedWrapU) !== null && _a !== void 0 ? _a : 1) << 8) + (((_b = sampler._cachedWrapV) !== null && _b !== void 0 ? _b : 1) << 10) + (((_c = sampler._cachedWrapR) !== null && _c !== void 0 ? _c : 1) << 12) + ((sampler.useMipMaps ? 1 : 0) << 14) + (\n    // need to factor this in because _getSamplerFilterDescriptor depends on samplingMode AND useMipMaps!\n    anisotropy << 15);\n    return code;\n  }\n  static _GetSamplerFilterDescriptor(sampler, anisotropy) {\n    let magFilter, minFilter, mipmapFilter, lodMinClamp, lodMaxClamp;\n    const useMipMaps = sampler.useMipMaps;\n    switch (sampler.samplingMode) {\n      case 11:\n        magFilter = WebGPUConstants.FilterMode.Linear;\n        minFilter = WebGPUConstants.FilterMode.Linear;\n        mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n        if (!useMipMaps) {\n          lodMinClamp = lodMaxClamp = 0;\n        }\n        break;\n      case 3:\n      case 3:\n        magFilter = WebGPUConstants.FilterMode.Linear;\n        minFilter = WebGPUConstants.FilterMode.Linear;\n        if (!useMipMaps) {\n          mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n          lodMinClamp = lodMaxClamp = 0;\n        } else {\n          mipmapFilter = WebGPUConstants.FilterMode.Linear;\n        }\n        break;\n      case 8:\n        magFilter = WebGPUConstants.FilterMode.Nearest;\n        minFilter = WebGPUConstants.FilterMode.Nearest;\n        if (!useMipMaps) {\n          mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n          lodMinClamp = lodMaxClamp = 0;\n        } else {\n          mipmapFilter = WebGPUConstants.FilterMode.Linear;\n        }\n        break;\n      case 4:\n        magFilter = WebGPUConstants.FilterMode.Nearest;\n        minFilter = WebGPUConstants.FilterMode.Nearest;\n        mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n        if (!useMipMaps) {\n          lodMinClamp = lodMaxClamp = 0;\n        }\n        break;\n      case 5:\n        magFilter = WebGPUConstants.FilterMode.Nearest;\n        minFilter = WebGPUConstants.FilterMode.Linear;\n        mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n        if (!useMipMaps) {\n          lodMinClamp = lodMaxClamp = 0;\n        }\n        break;\n      case 6:\n        magFilter = WebGPUConstants.FilterMode.Nearest;\n        minFilter = WebGPUConstants.FilterMode.Linear;\n        if (!useMipMaps) {\n          mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n          lodMinClamp = lodMaxClamp = 0;\n        } else {\n          mipmapFilter = WebGPUConstants.FilterMode.Linear;\n        }\n        break;\n      case 7:\n        magFilter = WebGPUConstants.FilterMode.Nearest;\n        minFilter = WebGPUConstants.FilterMode.Linear;\n        mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n        lodMinClamp = lodMaxClamp = 0;\n        break;\n      case 1:\n      case 1:\n        magFilter = WebGPUConstants.FilterMode.Nearest;\n        minFilter = WebGPUConstants.FilterMode.Nearest;\n        mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n        lodMinClamp = lodMaxClamp = 0;\n        break;\n      case 9:\n        magFilter = WebGPUConstants.FilterMode.Linear;\n        minFilter = WebGPUConstants.FilterMode.Nearest;\n        mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n        if (!useMipMaps) {\n          lodMinClamp = lodMaxClamp = 0;\n        }\n        break;\n      case 10:\n        magFilter = WebGPUConstants.FilterMode.Linear;\n        minFilter = WebGPUConstants.FilterMode.Nearest;\n        if (!useMipMaps) {\n          mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n          lodMinClamp = lodMaxClamp = 0;\n        } else {\n          mipmapFilter = WebGPUConstants.FilterMode.Linear;\n        }\n        break;\n      case 2:\n      case 2:\n        magFilter = WebGPUConstants.FilterMode.Linear;\n        minFilter = WebGPUConstants.FilterMode.Linear;\n        mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n        lodMinClamp = lodMaxClamp = 0;\n        break;\n      case 12:\n        magFilter = WebGPUConstants.FilterMode.Linear;\n        minFilter = WebGPUConstants.FilterMode.Nearest;\n        mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n        lodMinClamp = lodMaxClamp = 0;\n        break;\n      default:\n        magFilter = WebGPUConstants.FilterMode.Nearest;\n        minFilter = WebGPUConstants.FilterMode.Nearest;\n        mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n        lodMinClamp = lodMaxClamp = 0;\n        break;\n    }\n    if (anisotropy > 1 && (lodMinClamp !== 0 || lodMaxClamp !== 0)) {\n      return {\n        magFilter: WebGPUConstants.FilterMode.Linear,\n        minFilter: WebGPUConstants.FilterMode.Linear,\n        mipmapFilter: WebGPUConstants.FilterMode.Linear,\n        anisotropyEnabled: true\n      };\n    }\n    return {\n      magFilter,\n      minFilter,\n      mipmapFilter,\n      lodMinClamp,\n      lodMaxClamp\n    };\n  }\n  static _GetWrappingMode(mode) {\n    switch (mode) {\n      case 1:\n        return WebGPUConstants.AddressMode.Repeat;\n      case 0:\n        return WebGPUConstants.AddressMode.ClampToEdge;\n      case 2:\n        return WebGPUConstants.AddressMode.MirrorRepeat;\n    }\n    return WebGPUConstants.AddressMode.Repeat;\n  }\n  static _GetSamplerWrappingDescriptor(sampler) {\n    return {\n      addressModeU: this._GetWrappingMode(sampler._cachedWrapU),\n      addressModeV: this._GetWrappingMode(sampler._cachedWrapV),\n      addressModeW: this._GetWrappingMode(sampler._cachedWrapR)\n    };\n  }\n  static _GetSamplerDescriptor(sampler) {\n    // The WebGPU spec currently only allows values 1 and 4 for anisotropy\n    const anisotropy = sampler.useMipMaps && sampler._cachedAnisotropicFilteringLevel && sampler._cachedAnisotropicFilteringLevel > 1 ? 4 : 1;\n    const filterDescriptor = this._GetSamplerFilterDescriptor(sampler, anisotropy);\n    return {\n      ...filterDescriptor,\n      ...this._GetSamplerWrappingDescriptor(sampler),\n      compare: sampler._comparisonFunction ? WebGPUCacheSampler.GetCompareFunction(sampler._comparisonFunction) : undefined,\n      maxAnisotropy: filterDescriptor.anisotropyEnabled ? anisotropy : 1\n    };\n  }\n  static GetCompareFunction(compareFunction) {\n    switch (compareFunction) {\n      case 519:\n        return WebGPUConstants.CompareFunction.Always;\n      case 514:\n        return WebGPUConstants.CompareFunction.Equal;\n      case 516:\n        return WebGPUConstants.CompareFunction.Greater;\n      case 518:\n        return WebGPUConstants.CompareFunction.GreaterEqual;\n      case 513:\n        return WebGPUConstants.CompareFunction.Less;\n      case 515:\n        return WebGPUConstants.CompareFunction.LessEqual;\n      case 512:\n        return WebGPUConstants.CompareFunction.Never;\n      case 517:\n        return WebGPUConstants.CompareFunction.NotEqual;\n      default:\n        return WebGPUConstants.CompareFunction.Less;\n    }\n  }\n  getSampler(sampler, bypassCache = false, hash = 0) {\n    if (this.disabled) {\n      return this._device.createSampler(WebGPUCacheSampler._GetSamplerDescriptor(sampler));\n    }\n    if (bypassCache) {\n      hash = 0;\n    } else if (hash === 0) {\n      hash = WebGPUCacheSampler.GetSamplerHashCode(sampler);\n    }\n    let gpuSampler = bypassCache ? undefined : this._samplers[hash];\n    if (!gpuSampler) {\n      gpuSampler = this._device.createSampler(WebGPUCacheSampler._GetSamplerDescriptor(sampler));\n      if (!bypassCache) {\n        this._samplers[hash] = gpuSampler;\n      }\n    }\n    return gpuSampler;\n  }\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,eAAe,MAAM,sBAAoB;AAKrD,MAAMC,YAAY,GAAG,CACjB,CAAC,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACvB,CAAC,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACvB,CAAC,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACvB,CAAC,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACvB,CAAC,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACvB,CAAC,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACvB,CAAC,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACvB,CAAC,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACvB,CAAC,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACvB,CAAC,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACvB,CAAC,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACvB,CAAC,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACvB,CAAC,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,CAAE;AAAA,CAC5B;AAED;AACA,MAAMC,wBAAwB,GAAG,CAC5B,CAAC,IAAI,CAAC,GAAK,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACxC,CAAC,IAAI,CAAC,GAAK,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACxC,CAAC,IAAI,CAAC,GAAK,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACxC,CAAC,IAAI,CAAC,GAAK,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACxC,CAAC,IAAI,CAAC,GAAK,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACxC,CAAC,IAAI,CAAC,GAAK,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACxC,CAAC,IAAI,CAAC,GAAK,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACxC,CAAC,IAAI,CAAC,GAAK,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,EACxC,CAAC,IAAI,CAAC,GAAK,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,CAAE;AAAA,CAC9C;;AAED,MAAMC,iBAAiB,GAAG,CACtB,CAAC,IAAI,CAAC,EACN,CAAC,IAAI,CAAC,EACN,CAAC,IAAI,CAAC,EACN,CAAC,IAAI,CAAC,EACN,CAAC,IAAI,CAAC,EACN,CAAC,IAAI,CAAC,EACN,CAAC,IAAI,CAAC,EACN,CAAC,IAAI,CAAC,EACN,CAAC,IAAI,CAAC,EACN,CAAC,IAAI,CAAC,EACN,CAAC,IAAI,CAAC,EACN,CAAC,IAAI,CAAC,EACN,CAAC,IAAI,CAAC,CAAE;AAAA,CACX;AAED;AACA,OAAM,MAAOC,kBAAkB;EAM3BC,YAAYC,MAAiB;IALrB,cAAS,GAAmC,EAAE;IAMlD,IAAI,CAACC,OAAO,GAAGD,MAAM;IACrB,IAAI,CAACE,QAAQ,GAAG,KAAK;EACzB;EAEO,OAAOC,kBAAkB,CAACC,OAAuB;;IACpD;IACA,MAAMC,UAAU,GAAGD,OAAO,CAACE,gCAAgC,IAAIF,OAAO,CAACE,gCAAgC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IACnH,MAAMC,IAAI,GACNZ,YAAY,CAACS,OAAO,CAACI,YAAY,CAAC,GAClCZ,wBAAwB,CAAC,CAACQ,OAAO,CAACK,mBAAmB,IAAI,MAAM,IAAI,MAAM,GAAG,CAAC,CAAC,GAC9EZ,iBAAiB,CAACO,OAAO,CAACI,YAAY,CAAC;IAAG;IACzC,CAAC,aAAO,CAACE,YAAY,mCAAI,CAAC,KAAK,CAAC,CAAC,IACjC,CAAC,aAAO,CAACC,YAAY,mCAAI,CAAC,KAAK,EAAE,CAAC,IAClC,CAAC,aAAO,CAACC,YAAY,mCAAI,CAAC,KAAK,EAAE,CAAC,IAClC,CAACR,OAAO,CAACS,UAAU,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;IAAG;IACtCR,UAAU,IAAI,EAAE,CAAC;IAEtB,OAAOE,IAAI;EACf;EAEQ,OAAOO,2BAA2B,CACtCV,OAAuB,EACvBC,UAAkB;IASlB,IAAIU,SAAwB,EAAEC,SAAwB,EAAEC,YAA2B,EAAEC,WAA+B,EAAEC,WAA+B;IACrJ,MAAMN,UAAU,GAAGT,OAAO,CAACS,UAAU;IACrC,QAAQT,OAAO,CAACI,YAAY;MACxB,KAAK;QACDO,SAAS,GAAGrB,eAAe,CAAC0B,UAAU,CAACC,MAAM;QAC7CL,SAAS,GAAGtB,eAAe,CAAC0B,UAAU,CAACC,MAAM;QAC7CJ,YAAY,GAAGvB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QACjD,IAAI,CAACT,UAAU,EAAE;UACbK,WAAW,GAAGC,WAAW,GAAG,CAAC;;QAEjC;MACJ,KAAK;MACL,KAAK;QACDJ,SAAS,GAAGrB,eAAe,CAAC0B,UAAU,CAACC,MAAM;QAC7CL,SAAS,GAAGtB,eAAe,CAAC0B,UAAU,CAACC,MAAM;QAC7C,IAAI,CAACR,UAAU,EAAE;UACbI,YAAY,GAAGvB,eAAe,CAAC0B,UAAU,CAACE,OAAO;UACjDJ,WAAW,GAAGC,WAAW,GAAG,CAAC;SAChC,MAAM;UACHF,YAAY,GAAGvB,eAAe,CAAC0B,UAAU,CAACC,MAAM;;QAEpD;MACJ,KAAK;QACDN,SAAS,GAAGrB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QAC9CN,SAAS,GAAGtB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QAC9C,IAAI,CAACT,UAAU,EAAE;UACbI,YAAY,GAAGvB,eAAe,CAAC0B,UAAU,CAACE,OAAO;UACjDJ,WAAW,GAAGC,WAAW,GAAG,CAAC;SAChC,MAAM;UACHF,YAAY,GAAGvB,eAAe,CAAC0B,UAAU,CAACC,MAAM;;QAEpD;MACJ,KAAK;QACDN,SAAS,GAAGrB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QAC9CN,SAAS,GAAGtB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QAC9CL,YAAY,GAAGvB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QACjD,IAAI,CAACT,UAAU,EAAE;UACbK,WAAW,GAAGC,WAAW,GAAG,CAAC;;QAEjC;MACJ,KAAK;QACDJ,SAAS,GAAGrB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QAC9CN,SAAS,GAAGtB,eAAe,CAAC0B,UAAU,CAACC,MAAM;QAC7CJ,YAAY,GAAGvB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QACjD,IAAI,CAACT,UAAU,EAAE;UACbK,WAAW,GAAGC,WAAW,GAAG,CAAC;;QAEjC;MACJ,KAAK;QACDJ,SAAS,GAAGrB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QAC9CN,SAAS,GAAGtB,eAAe,CAAC0B,UAAU,CAACC,MAAM;QAC7C,IAAI,CAACR,UAAU,EAAE;UACbI,YAAY,GAAGvB,eAAe,CAAC0B,UAAU,CAACE,OAAO;UACjDJ,WAAW,GAAGC,WAAW,GAAG,CAAC;SAChC,MAAM;UACHF,YAAY,GAAGvB,eAAe,CAAC0B,UAAU,CAACC,MAAM;;QAEpD;MACJ,KAAK;QACDN,SAAS,GAAGrB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QAC9CN,SAAS,GAAGtB,eAAe,CAAC0B,UAAU,CAACC,MAAM;QAC7CJ,YAAY,GAAGvB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QACjDJ,WAAW,GAAGC,WAAW,GAAG,CAAC;QAC7B;MACJ,KAAK;MACL,KAAK;QACDJ,SAAS,GAAGrB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QAC9CN,SAAS,GAAGtB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QAC9CL,YAAY,GAAGvB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QACjDJ,WAAW,GAAGC,WAAW,GAAG,CAAC;QAC7B;MACJ,KAAK;QACDJ,SAAS,GAAGrB,eAAe,CAAC0B,UAAU,CAACC,MAAM;QAC7CL,SAAS,GAAGtB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QAC9CL,YAAY,GAAGvB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QACjD,IAAI,CAACT,UAAU,EAAE;UACbK,WAAW,GAAGC,WAAW,GAAG,CAAC;;QAEjC;MACJ,KAAK;QACDJ,SAAS,GAAGrB,eAAe,CAAC0B,UAAU,CAACC,MAAM;QAC7CL,SAAS,GAAGtB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QAC9C,IAAI,CAACT,UAAU,EAAE;UACbI,YAAY,GAAGvB,eAAe,CAAC0B,UAAU,CAACE,OAAO;UACjDJ,WAAW,GAAGC,WAAW,GAAG,CAAC;SAChC,MAAM;UACHF,YAAY,GAAGvB,eAAe,CAAC0B,UAAU,CAACC,MAAM;;QAEpD;MACJ,KAAK;MACL,KAAK;QACDN,SAAS,GAAGrB,eAAe,CAAC0B,UAAU,CAACC,MAAM;QAC7CL,SAAS,GAAGtB,eAAe,CAAC0B,UAAU,CAACC,MAAM;QAC7CJ,YAAY,GAAGvB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QACjDJ,WAAW,GAAGC,WAAW,GAAG,CAAC;QAC7B;MACJ,KAAK;QACDJ,SAAS,GAAGrB,eAAe,CAAC0B,UAAU,CAACC,MAAM;QAC7CL,SAAS,GAAGtB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QAC9CL,YAAY,GAAGvB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QACjDJ,WAAW,GAAGC,WAAW,GAAG,CAAC;QAC7B;MACJ;QACIJ,SAAS,GAAGrB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QAC9CN,SAAS,GAAGtB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QAC9CL,YAAY,GAAGvB,eAAe,CAAC0B,UAAU,CAACE,OAAO;QACjDJ,WAAW,GAAGC,WAAW,GAAG,CAAC;QAC7B;IAAM;IAGd,IAAId,UAAU,GAAG,CAAC,KAAKa,WAAW,KAAK,CAAC,IAAIC,WAAW,KAAK,CAAC,CAAC,EAAE;MAC5D,OAAO;QACHJ,SAAS,EAAErB,eAAe,CAAC0B,UAAU,CAACC,MAAM;QAC5CL,SAAS,EAAEtB,eAAe,CAAC0B,UAAU,CAACC,MAAM;QAC5CJ,YAAY,EAAEvB,eAAe,CAAC0B,UAAU,CAACC,MAAM;QAC/CE,iBAAiB,EAAE;OACtB;;IAGL,OAAO;MACHR,SAAS;MACTC,SAAS;MACTC,YAAY;MACZC,WAAW;MACXC;KACH;EACL;EAEQ,OAAOK,gBAAgB,CAACC,IAAY;IACxC,QAAQA,IAAI;MACR,KAAK;QACD,OAAO/B,eAAe,CAACgC,WAAW,CAACC,MAAM;MAC7C,KAAK;QACD,OAAOjC,eAAe,CAACgC,WAAW,CAACE,WAAW;MAClD,KAAK;QACD,OAAOlC,eAAe,CAACgC,WAAW,CAACG,YAAY;IAAC;IAExD,OAAOnC,eAAe,CAACgC,WAAW,CAACC,MAAM;EAC7C;EAEQ,OAAOG,6BAA6B,CAAC1B,OAAuB;IAKhE,OAAO;MACH2B,YAAY,EAAE,IAAI,CAACP,gBAAgB,CAACpB,OAAO,CAACM,YAAa,CAAC;MAC1DsB,YAAY,EAAE,IAAI,CAACR,gBAAgB,CAACpB,OAAO,CAACO,YAAa,CAAC;MAC1DsB,YAAY,EAAE,IAAI,CAACT,gBAAgB,CAACpB,OAAO,CAACQ,YAAa;KAC5D;EACL;EAEQ,OAAOsB,qBAAqB,CAAC9B,OAAuB;IACxD;IACA,MAAMC,UAAU,GAAGD,OAAO,CAACS,UAAU,IAAIT,OAAO,CAACE,gCAAgC,IAAIF,OAAO,CAACE,gCAAgC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IACzI,MAAM6B,gBAAgB,GAAG,IAAI,CAACrB,2BAA2B,CAACV,OAAO,EAAEC,UAAU,CAAC;IAC9E,OAAO;MACH,GAAG8B,gBAAgB;MACnB,GAAG,IAAI,CAACL,6BAA6B,CAAC1B,OAAO,CAAC;MAC9CgC,OAAO,EAAEhC,OAAO,CAACK,mBAAmB,GAAGX,kBAAkB,CAACuC,kBAAkB,CAACjC,OAAO,CAACK,mBAAmB,CAAC,GAAG6B,SAAS;MACrHC,aAAa,EAAEJ,gBAAgB,CAACZ,iBAAiB,GAAGlB,UAAU,GAAG;KACpE;EACL;EAEO,OAAOgC,kBAAkB,CAACG,eAAiC;IAC9D,QAAQA,eAAe;MACnB,KAAK;QACD,OAAO9C,eAAe,CAAC+C,eAAe,CAACC,MAAM;MACjD,KAAK;QACD,OAAOhD,eAAe,CAAC+C,eAAe,CAACE,KAAK;MAChD,KAAK;QACD,OAAOjD,eAAe,CAAC+C,eAAe,CAACG,OAAO;MAClD,KAAK;QACD,OAAOlD,eAAe,CAAC+C,eAAe,CAACI,YAAY;MACvD,KAAK;QACD,OAAOnD,eAAe,CAAC+C,eAAe,CAACK,IAAI;MAC/C,KAAK;QACD,OAAOpD,eAAe,CAAC+C,eAAe,CAACM,SAAS;MACpD,KAAK;QACD,OAAOrD,eAAe,CAAC+C,eAAe,CAACO,KAAK;MAChD,KAAK;QACD,OAAOtD,eAAe,CAAC+C,eAAe,CAACQ,QAAQ;MACnD;QACI,OAAOvD,eAAe,CAAC+C,eAAe,CAACK,IAAI;IAAC;EAExD;EAEOI,UAAU,CAAC9C,OAAuB,EAAE+C,WAAW,GAAG,KAAK,EAAEC,IAAI,GAAG,CAAC;IACpE,IAAI,IAAI,CAAClD,QAAQ,EAAE;MACf,OAAO,IAAI,CAACD,OAAO,CAACoD,aAAa,CAACvD,kBAAkB,CAACoC,qBAAqB,CAAC9B,OAAO,CAAC,CAAC;;IAGxF,IAAI+C,WAAW,EAAE;MACbC,IAAI,GAAG,CAAC;KACX,MAAM,IAAIA,IAAI,KAAK,CAAC,EAAE;MACnBA,IAAI,GAAGtD,kBAAkB,CAACK,kBAAkB,CAACC,OAAO,CAAC;;IAGzD,IAAIkD,UAAU,GAAGH,WAAW,GAAGb,SAAS,GAAG,IAAI,CAACiB,SAAS,CAACH,IAAI,CAAC;IAC/D,IAAI,CAACE,UAAU,EAAE;MACbA,UAAU,GAAG,IAAI,CAACrD,OAAO,CAACoD,aAAa,CAACvD,kBAAkB,CAACoC,qBAAqB,CAAC9B,OAAO,CAAC,CAAC;MAC1F,IAAI,CAAC+C,WAAW,EAAE;QACd,IAAI,CAACI,SAAS,CAACH,IAAI,CAAC,GAAGE,UAAU;;;IAIzC,OAAOA,UAAU;EACrB","names":["WebGPUConstants","filterToBits","comparisonFunctionToBits","filterNoMipToBits","WebGPUCacheSampler","constructor","device","_device","disabled","GetSamplerHashCode","sampler","anisotropy","_cachedAnisotropicFilteringLevel","code","samplingMode","_comparisonFunction","_cachedWrapU","_cachedWrapV","_cachedWrapR","useMipMaps","_GetSamplerFilterDescriptor","magFilter","minFilter","mipmapFilter","lodMinClamp","lodMaxClamp","FilterMode","Linear","Nearest","anisotropyEnabled","_GetWrappingMode","mode","AddressMode","Repeat","ClampToEdge","MirrorRepeat","_GetSamplerWrappingDescriptor","addressModeU","addressModeV","addressModeW","_GetSamplerDescriptor","filterDescriptor","compare","GetCompareFunction","undefined","maxAnisotropy","compareFunction","CompareFunction","Always","Equal","Greater","GreaterEqual","Less","LessEqual","Never","NotEqual","getSampler","bypassCache","hash","createSampler","gpuSampler","_samplers"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/WebGPU/webgpuCacheSampler.ts"],"sourcesContent":["import * as WebGPUConstants from \"./webgpuConstants\";\r\nimport { Constants } from \"../constants\";\r\nimport type { TextureSampler } from \"../../Materials/Textures/textureSampler\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\nconst filterToBits = [\r\n    0 | (0 << 1) | (0 << 2), // not used\r\n    0 | (0 << 1) | (0 << 2), // TEXTURE_NEAREST_SAMPLINGMODE / TEXTURE_NEAREST_NEAREST\r\n    1 | (1 << 1) | (0 << 2), // TEXTURE_BILINEAR_SAMPLINGMODE / TEXTURE_LINEAR_LINEAR\r\n    1 | (1 << 1) | (1 << 2), // TEXTURE_TRILINEAR_SAMPLINGMODE / TEXTURE_LINEAR_LINEAR_MIPLINEAR\r\n    0 | (0 << 1) | (0 << 2), // TEXTURE_NEAREST_NEAREST_MIPNEAREST\r\n    0 | (1 << 1) | (0 << 2), // TEXTURE_NEAREST_LINEAR_MIPNEAREST\r\n    0 | (1 << 1) | (1 << 2), // TEXTURE_NEAREST_LINEAR_MIPLINEAR\r\n    0 | (1 << 1) | (0 << 2), // TEXTURE_NEAREST_LINEAR\r\n    0 | (0 << 1) | (1 << 2), // TEXTURE_NEAREST_NEAREST_MIPLINEAR\r\n    1 | (0 << 1) | (0 << 2), // TEXTURE_LINEAR_NEAREST_MIPNEAREST\r\n    1 | (0 << 1) | (1 << 2), // TEXTURE_LINEAR_NEAREST_MIPLINEAR\r\n    1 | (1 << 1) | (0 << 2), // TEXTURE_LINEAR_LINEAR_MIPNEAREST\r\n    1 | (0 << 1) | (0 << 2), // TEXTURE_LINEAR_NEAREST\r\n];\r\n\r\n// subtract 0x01FF from the comparison function value before indexing this array!\r\nconst comparisonFunctionToBits = [\r\n    (0 << 3) | (0 << 4) | (0 << 5) | (0 << 6), // undefined\r\n    (0 << 3) | (0 << 4) | (0 << 5) | (1 << 6), // NEVER\r\n    (0 << 3) | (0 << 4) | (1 << 5) | (0 << 6), // LESS\r\n    (0 << 3) | (0 << 4) | (1 << 5) | (1 << 6), // EQUAL\r\n    (0 << 3) | (1 << 4) | (0 << 5) | (0 << 6), // LEQUAL\r\n    (0 << 3) | (1 << 4) | (0 << 5) | (1 << 6), // GREATER\r\n    (0 << 3) | (1 << 4) | (1 << 5) | (0 << 6), // NOTEQUAL\r\n    (0 << 3) | (1 << 4) | (1 << 5) | (1 << 6), // GEQUAL\r\n    (1 << 3) | (0 << 4) | (0 << 5) | (0 << 6), // ALWAYS\r\n];\r\n\r\nconst filterNoMipToBits = [\r\n    0 << 7, // not used\r\n    1 << 7, // TEXTURE_NEAREST_SAMPLINGMODE / TEXTURE_NEAREST_NEAREST\r\n    1 << 7, // TEXTURE_BILINEAR_SAMPLINGMODE / TEXTURE_LINEAR_LINEAR\r\n    0 << 7, // TEXTURE_TRILINEAR_SAMPLINGMODE / TEXTURE_LINEAR_LINEAR_MIPLINEAR\r\n    0 << 7, // TEXTURE_NEAREST_NEAREST_MIPNEAREST\r\n    0 << 7, // TEXTURE_NEAREST_LINEAR_MIPNEAREST\r\n    0 << 7, // TEXTURE_NEAREST_LINEAR_MIPLINEAR\r\n    1 << 7, // TEXTURE_NEAREST_LINEAR\r\n    0 << 7, // TEXTURE_NEAREST_NEAREST_MIPLINEAR\r\n    0 << 7, // TEXTURE_LINEAR_NEAREST_MIPNEAREST\r\n    0 << 7, // TEXTURE_LINEAR_NEAREST_MIPLINEAR\r\n    0 << 7, // TEXTURE_LINEAR_LINEAR_MIPNEAREST\r\n    1 << 7, // TEXTURE_LINEAR_NEAREST\r\n];\r\n\r\n/** @internal */\r\nexport class WebGPUCacheSampler {\r\n    private _samplers: { [hash: number]: GPUSampler } = {};\r\n    private _device: GPUDevice;\r\n\r\n    public disabled: boolean;\r\n\r\n    constructor(device: GPUDevice) {\r\n        this._device = device;\r\n        this.disabled = false;\r\n    }\r\n\r\n    public static GetSamplerHashCode(sampler: TextureSampler): number {\r\n        // The WebGPU spec currently only allows values 1 and 4 for anisotropy\r\n        const anisotropy = sampler._cachedAnisotropicFilteringLevel && sampler._cachedAnisotropicFilteringLevel > 1 ? 4 : 1;\r\n        const code =\r\n            filterToBits[sampler.samplingMode] +\r\n            comparisonFunctionToBits[(sampler._comparisonFunction || 0x0202) - 0x0200 + 1] +\r\n            filterNoMipToBits[sampler.samplingMode] + // handle the lodMinClamp = lodMaxClamp = 0 case when no filter used for mip mapping\r\n            ((sampler._cachedWrapU ?? 1) << 8) +\r\n            ((sampler._cachedWrapV ?? 1) << 10) +\r\n            ((sampler._cachedWrapR ?? 1) << 12) +\r\n            ((sampler.useMipMaps ? 1 : 0) << 14) + // need to factor this in because _getSamplerFilterDescriptor depends on samplingMode AND useMipMaps!\r\n            (anisotropy << 15);\r\n\r\n        return code;\r\n    }\r\n\r\n    private static _GetSamplerFilterDescriptor(\r\n        sampler: TextureSampler,\r\n        anisotropy: number\r\n    ): {\r\n        magFilter: GPUFilterMode;\r\n        minFilter: GPUFilterMode;\r\n        mipmapFilter: GPUFilterMode;\r\n        lodMinClamp?: number;\r\n        lodMaxClamp?: number;\r\n        anisotropyEnabled?: boolean;\r\n    } {\r\n        let magFilter: GPUFilterMode, minFilter: GPUFilterMode, mipmapFilter: GPUFilterMode, lodMinClamp: number | undefined, lodMaxClamp: number | undefined;\r\n        const useMipMaps = sampler.useMipMaps;\r\n        switch (sampler.samplingMode) {\r\n            case Constants.TEXTURE_LINEAR_LINEAR_MIPNEAREST:\r\n                magFilter = WebGPUConstants.FilterMode.Linear;\r\n                minFilter = WebGPUConstants.FilterMode.Linear;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                if (!useMipMaps) {\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                }\r\n                break;\r\n            case Constants.TEXTURE_LINEAR_LINEAR_MIPLINEAR:\r\n            case Constants.TEXTURE_TRILINEAR_SAMPLINGMODE:\r\n                magFilter = WebGPUConstants.FilterMode.Linear;\r\n                minFilter = WebGPUConstants.FilterMode.Linear;\r\n                if (!useMipMaps) {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                } else {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Linear;\r\n                }\r\n                break;\r\n            case Constants.TEXTURE_NEAREST_NEAREST_MIPLINEAR:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                if (!useMipMaps) {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                } else {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Linear;\r\n                }\r\n                break;\r\n            case Constants.TEXTURE_NEAREST_NEAREST_MIPNEAREST:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                if (!useMipMaps) {\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                }\r\n                break;\r\n            case Constants.TEXTURE_NEAREST_LINEAR_MIPNEAREST:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Linear;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                if (!useMipMaps) {\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                }\r\n                break;\r\n            case Constants.TEXTURE_NEAREST_LINEAR_MIPLINEAR:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Linear;\r\n                if (!useMipMaps) {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                } else {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Linear;\r\n                }\r\n                break;\r\n            case Constants.TEXTURE_NEAREST_LINEAR:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Linear;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                lodMinClamp = lodMaxClamp = 0;\r\n                break;\r\n            case Constants.TEXTURE_NEAREST_NEAREST:\r\n            case Constants.TEXTURE_NEAREST_SAMPLINGMODE:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                lodMinClamp = lodMaxClamp = 0;\r\n                break;\r\n            case Constants.TEXTURE_LINEAR_NEAREST_MIPNEAREST:\r\n                magFilter = WebGPUConstants.FilterMode.Linear;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                if (!useMipMaps) {\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                }\r\n                break;\r\n            case Constants.TEXTURE_LINEAR_NEAREST_MIPLINEAR:\r\n                magFilter = WebGPUConstants.FilterMode.Linear;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                if (!useMipMaps) {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                } else {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Linear;\r\n                }\r\n                break;\r\n            case Constants.TEXTURE_LINEAR_LINEAR:\r\n            case Constants.TEXTURE_BILINEAR_SAMPLINGMODE:\r\n                magFilter = WebGPUConstants.FilterMode.Linear;\r\n                minFilter = WebGPUConstants.FilterMode.Linear;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                lodMinClamp = lodMaxClamp = 0;\r\n                break;\r\n            case Constants.TEXTURE_LINEAR_NEAREST:\r\n                magFilter = WebGPUConstants.FilterMode.Linear;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                lodMinClamp = lodMaxClamp = 0;\r\n                break;\r\n            default:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                lodMinClamp = lodMaxClamp = 0;\r\n                break;\r\n        }\r\n\r\n        if (anisotropy > 1 && (lodMinClamp !== 0 || lodMaxClamp !== 0)) {\r\n            return {\r\n                magFilter: WebGPUConstants.FilterMode.Linear,\r\n                minFilter: WebGPUConstants.FilterMode.Linear,\r\n                mipmapFilter: WebGPUConstants.FilterMode.Linear,\r\n                anisotropyEnabled: true,\r\n            };\r\n        }\r\n\r\n        return {\r\n            magFilter,\r\n            minFilter,\r\n            mipmapFilter,\r\n            lodMinClamp,\r\n            lodMaxClamp,\r\n        };\r\n    }\r\n\r\n    private static _GetWrappingMode(mode: number): GPUAddressMode {\r\n        switch (mode) {\r\n            case Constants.TEXTURE_WRAP_ADDRESSMODE:\r\n                return WebGPUConstants.AddressMode.Repeat;\r\n            case Constants.TEXTURE_CLAMP_ADDRESSMODE:\r\n                return WebGPUConstants.AddressMode.ClampToEdge;\r\n            case Constants.TEXTURE_MIRROR_ADDRESSMODE:\r\n                return WebGPUConstants.AddressMode.MirrorRepeat;\r\n        }\r\n        return WebGPUConstants.AddressMode.Repeat;\r\n    }\r\n\r\n    private static _GetSamplerWrappingDescriptor(sampler: TextureSampler): {\r\n        addressModeU: GPUAddressMode;\r\n        addressModeV: GPUAddressMode;\r\n        addressModeW: GPUAddressMode;\r\n    } {\r\n        return {\r\n            addressModeU: this._GetWrappingMode(sampler._cachedWrapU!),\r\n            addressModeV: this._GetWrappingMode(sampler._cachedWrapV!),\r\n            addressModeW: this._GetWrappingMode(sampler._cachedWrapR!),\r\n        };\r\n    }\r\n\r\n    private static _GetSamplerDescriptor(sampler: TextureSampler): GPUSamplerDescriptor {\r\n        // The WebGPU spec currently only allows values 1 and 4 for anisotropy\r\n        const anisotropy = sampler.useMipMaps && sampler._cachedAnisotropicFilteringLevel && sampler._cachedAnisotropicFilteringLevel > 1 ? 4 : 1;\r\n        const filterDescriptor = this._GetSamplerFilterDescriptor(sampler, anisotropy);\r\n        return {\r\n            ...filterDescriptor,\r\n            ...this._GetSamplerWrappingDescriptor(sampler),\r\n            compare: sampler._comparisonFunction ? WebGPUCacheSampler.GetCompareFunction(sampler._comparisonFunction) : undefined,\r\n            maxAnisotropy: filterDescriptor.anisotropyEnabled ? anisotropy : 1,\r\n        };\r\n    }\r\n\r\n    public static GetCompareFunction(compareFunction: Nullable<number>): GPUCompareFunction {\r\n        switch (compareFunction) {\r\n            case Constants.ALWAYS:\r\n                return WebGPUConstants.CompareFunction.Always;\r\n            case Constants.EQUAL:\r\n                return WebGPUConstants.CompareFunction.Equal;\r\n            case Constants.GREATER:\r\n                return WebGPUConstants.CompareFunction.Greater;\r\n            case Constants.GEQUAL:\r\n                return WebGPUConstants.CompareFunction.GreaterEqual;\r\n            case Constants.LESS:\r\n                return WebGPUConstants.CompareFunction.Less;\r\n            case Constants.LEQUAL:\r\n                return WebGPUConstants.CompareFunction.LessEqual;\r\n            case Constants.NEVER:\r\n                return WebGPUConstants.CompareFunction.Never;\r\n            case Constants.NOTEQUAL:\r\n                return WebGPUConstants.CompareFunction.NotEqual;\r\n            default:\r\n                return WebGPUConstants.CompareFunction.Less;\r\n        }\r\n    }\r\n\r\n    public getSampler(sampler: TextureSampler, bypassCache = false, hash = 0): GPUSampler {\r\n        if (this.disabled) {\r\n            return this._device.createSampler(WebGPUCacheSampler._GetSamplerDescriptor(sampler));\r\n        }\r\n\r\n        if (bypassCache) {\r\n            hash = 0;\r\n        } else if (hash === 0) {\r\n            hash = WebGPUCacheSampler.GetSamplerHashCode(sampler);\r\n        }\r\n\r\n        let gpuSampler = bypassCache ? undefined : this._samplers[hash];\r\n        if (!gpuSampler) {\r\n            gpuSampler = this._device.createSampler(WebGPUCacheSampler._GetSamplerDescriptor(sampler));\r\n            if (!bypassCache) {\r\n                this._samplers[hash] = gpuSampler;\r\n            }\r\n        }\r\n\r\n        return gpuSampler;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}