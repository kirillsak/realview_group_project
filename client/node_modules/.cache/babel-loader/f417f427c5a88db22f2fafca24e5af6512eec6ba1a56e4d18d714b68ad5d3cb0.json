{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { NodeMaterial } from \"../../nodeMaterial.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { Texture } from \"../../../Textures/texture.js\";\nimport { NodeMaterialModes } from \"../../Enums/nodeMaterialModes.js\";\nimport \"../../../../Shaders/ShadersInclude/helperFunctions.js\";\nimport { ImageSourceBlock } from \"./imageSourceBlock.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\nimport { EngineStore } from \"../../../../Engines/engineStore.js\";\n/**\n * Block used to read a texture from a sampler\n */\nexport class TextureBlock extends NodeMaterialBlock {\n  /**\n   * Create a new TextureBlock\n   * @param name defines the block name\n   * @param fragmentOnly\n   */\n  constructor(name, fragmentOnly = false) {\n    super(name, fragmentOnly ? NodeMaterialBlockTargets.Fragment : NodeMaterialBlockTargets.VertexAndFragment);\n    this._convertToGammaSpace = false;\n    this._convertToLinearSpace = false;\n    /**\n     * Gets or sets a boolean indicating if multiplication of texture with level should be disabled\n     */\n    this.disableLevelMultiplication = false;\n    this._fragmentOnly = fragmentOnly;\n    this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.AutoDetect, false, NodeMaterialBlockTargets.VertexAndFragment);\n    this.registerInput(\"source\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.VertexAndFragment, new NodeMaterialConnectionPointCustomObject(\"source\", this, NodeMaterialConnectionPointDirection.Input, ImageSourceBlock, \"ImageSourceBlock\"));\n    this.registerOutput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Neutral);\n    this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Neutral);\n    this.registerOutput(\"r\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n    this.registerOutput(\"g\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n    this.registerOutput(\"b\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n    this.registerOutput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n    this.registerOutput(\"level\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n    this._inputs[0].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Vector2 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4);\n    this._inputs[0]._prioritizeVertex = !fragmentOnly;\n  }\n  /**\n   * Gets or sets the texture associated with the node\n   */\n  get texture() {\n    var _a;\n    if (this.source.isConnected) {\n      return ((_a = this.source.connectedPoint) === null || _a === void 0 ? void 0 : _a.ownerBlock).texture;\n    }\n    return this._texture;\n  }\n  set texture(texture) {\n    var _a;\n    if (this._texture === texture) {\n      return;\n    }\n    const scene = (_a = texture === null || texture === void 0 ? void 0 : texture.getScene()) !== null && _a !== void 0 ? _a : EngineStore.LastCreatedScene;\n    if (!texture && scene) {\n      scene.markAllMaterialsAsDirty(1, mat => {\n        return mat.hasTexture(this._texture);\n      });\n    }\n    this._texture = texture;\n    if (texture && scene) {\n      scene.markAllMaterialsAsDirty(1, mat => {\n        return mat.hasTexture(texture);\n      });\n    }\n  }\n  /**\n   * Gets the sampler name associated with this texture\n   */\n  get samplerName() {\n    if (this._imageSource) {\n      return this._imageSource.samplerName;\n    }\n    return this._samplerName;\n  }\n  /**\n   * Gets a boolean indicating that this block is linked to an ImageSourceBlock\n   */\n  get hasImageSource() {\n    return this.source.isConnected;\n  }\n  /**\n   * Gets or sets a boolean indicating if content needs to be converted to gamma space\n   */\n  set convertToGammaSpace(value) {\n    var _a;\n    if (value === this._convertToGammaSpace) {\n      return;\n    }\n    this._convertToGammaSpace = value;\n    if (this.texture) {\n      const scene = (_a = this.texture.getScene()) !== null && _a !== void 0 ? _a : EngineStore.LastCreatedScene;\n      scene === null || scene === void 0 ? void 0 : scene.markAllMaterialsAsDirty(1, mat => {\n        return mat.hasTexture(this.texture);\n      });\n    }\n  }\n  get convertToGammaSpace() {\n    return this._convertToGammaSpace;\n  }\n  /**\n   * Gets or sets a boolean indicating if content needs to be converted to linear space\n   */\n  set convertToLinearSpace(value) {\n    var _a;\n    if (value === this._convertToLinearSpace) {\n      return;\n    }\n    this._convertToLinearSpace = value;\n    if (this.texture) {\n      const scene = (_a = this.texture.getScene()) !== null && _a !== void 0 ? _a : EngineStore.LastCreatedScene;\n      scene === null || scene === void 0 ? void 0 : scene.markAllMaterialsAsDirty(1, mat => {\n        return mat.hasTexture(this.texture);\n      });\n    }\n  }\n  get convertToLinearSpace() {\n    return this._convertToLinearSpace;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"TextureBlock\";\n  }\n  /**\n   * Gets the uv input component\n   */\n  get uv() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the source input component\n   */\n  get source() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the rgba output component\n   */\n  get rgba() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets the rgb output component\n   */\n  get rgb() {\n    return this._outputs[1];\n  }\n  /**\n   * Gets the r output component\n   */\n  get r() {\n    return this._outputs[2];\n  }\n  /**\n   * Gets the g output component\n   */\n  get g() {\n    return this._outputs[3];\n  }\n  /**\n   * Gets the b output component\n   */\n  get b() {\n    return this._outputs[4];\n  }\n  /**\n   * Gets the a output component\n   */\n  get a() {\n    return this._outputs[5];\n  }\n  /**\n   * Gets the level output component\n   */\n  get level() {\n    return this._outputs[6];\n  }\n  get target() {\n    if (this._fragmentOnly) {\n      return NodeMaterialBlockTargets.Fragment;\n    }\n    // TextureBlock has a special optimizations for uvs that come from the vertex shaders as they can be packed into a single varyings.\n    // But we need to detect uvs coming from fragment then\n    if (!this.uv.isConnected) {\n      return NodeMaterialBlockTargets.VertexAndFragment;\n    }\n    if (this.uv.sourceBlock.isInput) {\n      return NodeMaterialBlockTargets.VertexAndFragment;\n    }\n    let parent = this.uv.connectedPoint;\n    while (parent) {\n      if (parent.target === NodeMaterialBlockTargets.Fragment) {\n        return NodeMaterialBlockTargets.Fragment;\n      }\n      if (parent.target === NodeMaterialBlockTargets.Vertex) {\n        return NodeMaterialBlockTargets.VertexAndFragment;\n      }\n      if (parent.target === NodeMaterialBlockTargets.Neutral || parent.target === NodeMaterialBlockTargets.VertexAndFragment) {\n        const parentBlock = parent.ownerBlock;\n        if (parentBlock.target === NodeMaterialBlockTargets.Fragment) {\n          return NodeMaterialBlockTargets.Fragment;\n        }\n        parent = null;\n        for (const input of parentBlock.inputs) {\n          if (input.connectedPoint) {\n            parent = input.connectedPoint;\n            break;\n          }\n        }\n      }\n    }\n    return NodeMaterialBlockTargets.VertexAndFragment;\n  }\n  set target(value) {}\n  autoConfigure(material) {\n    if (!this.uv.isConnected) {\n      if (material.mode === NodeMaterialModes.PostProcess) {\n        const uvInput = material.getBlockByPredicate(b => b.name === \"uv\");\n        if (uvInput) {\n          uvInput.connectTo(this);\n        }\n      } else {\n        const attributeName = material.mode === NodeMaterialModes.Particle ? \"particle_uv\" : \"uv\";\n        let uvInput = material.getInputBlockByPredicate(b => b.isAttribute && b.name === attributeName);\n        if (!uvInput) {\n          uvInput = new InputBlock(\"uv\");\n          uvInput.setAsAttribute(attributeName);\n        }\n        uvInput.output.connectTo(this.uv);\n      }\n    }\n  }\n  initializeDefines(mesh, nodeMaterial, defines) {\n    if (!defines._areTexturesDirty) {\n      return;\n    }\n    if (this._mainUVDefineName !== undefined) {\n      defines.setValue(this._mainUVDefineName, false, true);\n    }\n  }\n  prepareDefines(mesh, nodeMaterial, defines) {\n    if (!defines._areTexturesDirty) {\n      return;\n    }\n    if (!this.texture || !this.texture.getTextureMatrix) {\n      if (this._isMixed) {\n        defines.setValue(this._defineName, false, true);\n        defines.setValue(this._mainUVDefineName, true, true);\n      }\n      return;\n    }\n    const toGamma = this.convertToGammaSpace && this.texture && !this.texture.gammaSpace;\n    const toLinear = this.convertToLinearSpace && this.texture && this.texture.gammaSpace;\n    // Not a bug... Name defines the texture space not the required conversion\n    defines.setValue(this._linearDefineName, toGamma, true);\n    defines.setValue(this._gammaDefineName, toLinear, true);\n    if (this._isMixed) {\n      if (!this.texture.getTextureMatrix().isIdentityAs3x2()) {\n        defines.setValue(this._defineName, true);\n        if (defines[this._mainUVDefineName] == undefined) {\n          defines.setValue(this._mainUVDefineName, false, true);\n        }\n      } else {\n        defines.setValue(this._defineName, false, true);\n        defines.setValue(this._mainUVDefineName, true, true);\n      }\n    }\n  }\n  isReady() {\n    if (this.texture && !this.texture.isReadyOrNotBlocking()) {\n      return false;\n    }\n    return true;\n  }\n  bind(effect) {\n    if (!this.texture) {\n      return;\n    }\n    if (this._isMixed) {\n      effect.setFloat(this._textureInfoName, this.texture.level);\n      effect.setMatrix(this._textureTransformName, this.texture.getTextureMatrix());\n    }\n    if (!this._imageSource) {\n      effect.setTexture(this._samplerName, this.texture);\n    }\n  }\n  get _isMixed() {\n    return this.target !== NodeMaterialBlockTargets.Fragment;\n  }\n  _injectVertexCode(state) {\n    const uvInput = this.uv;\n    // Inject code in vertex\n    this._defineName = state._getFreeDefineName(\"UVTRANSFORM\");\n    this._mainUVDefineName = \"VMAIN\" + uvInput.associatedVariableName.toUpperCase();\n    this._mainUVName = \"vMain\" + uvInput.associatedVariableName;\n    this._transformedUVName = state._getFreeVariableName(\"transformedUV\");\n    this._textureTransformName = state._getFreeVariableName(\"textureTransform\");\n    this._textureInfoName = state._getFreeVariableName(\"textureInfoName\");\n    this.level.associatedVariableName = this._textureInfoName;\n    state._emitVaryingFromString(this._transformedUVName, \"vec2\", this._defineName);\n    state._emitVaryingFromString(this._mainUVName, \"vec2\", this._mainUVDefineName);\n    state._emitUniformFromString(this._textureTransformName, \"mat4\", this._defineName);\n    state.compilationString += `#ifdef ${this._defineName}\\r\\n`;\n    state.compilationString += `${this._transformedUVName} = vec2(${this._textureTransformName} * vec4(${uvInput.associatedVariableName}.xy, 1.0, 0.0));\\r\\n`;\n    state.compilationString += `#elif defined(${this._mainUVDefineName})\\r\\n`;\n    state.compilationString += `${this._mainUVName} = ${uvInput.associatedVariableName}.xy;\\r\\n`;\n    state.compilationString += `#endif\\r\\n`;\n    if (!this._outputs.some(o => o.isConnectedInVertexShader)) {\n      return;\n    }\n    this._writeTextureRead(state, true);\n    for (const output of this._outputs) {\n      if (output.hasEndpoints && output.name !== \"level\") {\n        this._writeOutput(state, output, output.name, true);\n      }\n    }\n  }\n  _generateTextureLookup(state) {\n    const samplerName = this.samplerName;\n    state.compilationString += `#ifdef ${this._defineName}\\r\\n`;\n    state.compilationString += `vec4 ${this._tempTextureRead} = texture2D(${samplerName}, ${this._transformedUVName});\\r\\n`;\n    state.compilationString += `#elif defined(${this._mainUVDefineName})\\r\\n`;\n    state.compilationString += `vec4 ${this._tempTextureRead} = texture2D(${samplerName}, ${this._mainUVName ? this._mainUVName : this.uv.associatedVariableName});\\r\\n`;\n    state.compilationString += `#endif\\r\\n`;\n  }\n  _writeTextureRead(state, vertexMode = false) {\n    const uvInput = this.uv;\n    if (vertexMode) {\n      if (state.target === NodeMaterialBlockTargets.Fragment) {\n        return;\n      }\n      this._generateTextureLookup(state);\n      return;\n    }\n    if (this.uv.ownerBlock.target === NodeMaterialBlockTargets.Fragment) {\n      state.compilationString += `vec4 ${this._tempTextureRead} = texture2D(${this.samplerName}, ${uvInput.associatedVariableName});\\r\\n`;\n      return;\n    }\n    this._generateTextureLookup(state);\n  }\n  _generateConversionCode(state, output, swizzle) {\n    if (swizzle !== \"a\") {\n      // no conversion if the output is \"a\" (alpha)\n      if (!this.texture || !this.texture.gammaSpace) {\n        state.compilationString += `#ifdef ${this._linearDefineName}\n                    ${output.associatedVariableName} = toGammaSpace(${output.associatedVariableName});\n                    #endif\n                `;\n      }\n      state.compilationString += `#ifdef ${this._gammaDefineName}\n                ${output.associatedVariableName} = toLinearSpace(${output.associatedVariableName});\n                #endif\n            `;\n    }\n  }\n  _writeOutput(state, output, swizzle, vertexMode = false) {\n    if (vertexMode) {\n      if (state.target === NodeMaterialBlockTargets.Fragment) {\n        return;\n      }\n      state.compilationString += `${this._declareOutput(output, state)} = ${this._tempTextureRead}.${swizzle};\\r\\n`;\n      this._generateConversionCode(state, output, swizzle);\n      return;\n    }\n    if (this.uv.ownerBlock.target === NodeMaterialBlockTargets.Fragment) {\n      state.compilationString += `${this._declareOutput(output, state)} = ${this._tempTextureRead}.${swizzle};\\r\\n`;\n      this._generateConversionCode(state, output, swizzle);\n      return;\n    }\n    let complement = \"\";\n    if (!this.disableLevelMultiplication) {\n      complement = ` * ${this._textureInfoName}`;\n    }\n    state.compilationString += `${this._declareOutput(output, state)} = ${this._tempTextureRead}.${swizzle}${complement};\\r\\n`;\n    this._generateConversionCode(state, output, swizzle);\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    if (this.source.isConnected) {\n      this._imageSource = this.source.connectedPoint.ownerBlock;\n    } else {\n      this._imageSource = null;\n    }\n    if (state.target === NodeMaterialBlockTargets.Vertex || this._fragmentOnly || state.target === NodeMaterialBlockTargets.Fragment) {\n      this._tempTextureRead = state._getFreeVariableName(\"tempTextureRead\");\n      this._linearDefineName = state._getFreeDefineName(\"ISLINEAR\");\n      this._gammaDefineName = state._getFreeDefineName(\"ISGAMMA\");\n    }\n    if (!this._isMixed && state.target === NodeMaterialBlockTargets.Fragment || this._isMixed && state.target === NodeMaterialBlockTargets.Vertex) {\n      if (!this._imageSource) {\n        this._samplerName = state._getFreeVariableName(this.name + \"Sampler\");\n        state._emit2DSampler(this._samplerName);\n      }\n      // Declarations\n      state.sharedData.blockingBlocks.push(this);\n      state.sharedData.textureBlocks.push(this);\n      state.sharedData.blocksWithDefines.push(this);\n      state.sharedData.bindableBlocks.push(this);\n    }\n    if (state.target !== NodeMaterialBlockTargets.Fragment) {\n      // Vertex\n      this._injectVertexCode(state);\n      return;\n    }\n    // Fragment\n    if (!this._outputs.some(o => o.isConnectedInFragmentShader)) {\n      return;\n    }\n    if (this._isMixed && !this._imageSource) {\n      // Reexport the sampler\n      state._emit2DSampler(this._samplerName);\n    }\n    const comments = `//${this.name}`;\n    state._emitFunctionFromInclude(\"helperFunctions\", comments);\n    if (this._isMixed) {\n      state._emitUniformFromString(this._textureInfoName, \"float\");\n    }\n    this._writeTextureRead(state);\n    for (const output of this._outputs) {\n      if (output.hasEndpoints && output.name !== \"level\") {\n        this._writeOutput(state, output, output.name);\n      }\n    }\n    return this;\n  }\n  _dumpPropertiesCode() {\n    let codeString = super._dumpPropertiesCode();\n    codeString += `${this._codeVariableName}.convertToGammaSpace = ${this.convertToGammaSpace};\\r\\n`;\n    codeString += `${this._codeVariableName}.convertToLinearSpace = ${this.convertToLinearSpace};\\r\\n`;\n    codeString += `${this._codeVariableName}.disableLevelMultiplication = ${this.disableLevelMultiplication};\\r\\n`;\n    if (!this.texture) {\n      return codeString;\n    }\n    codeString += `${this._codeVariableName}.texture = new BABYLON.Texture(\"${this.texture.name}\", null, ${this.texture.noMipmap}, ${this.texture.invertY}, ${this.texture.samplingMode});\\r\\n`;\n    codeString += `${this._codeVariableName}.texture.wrapU = ${this.texture.wrapU};\\r\\n`;\n    codeString += `${this._codeVariableName}.texture.wrapV = ${this.texture.wrapV};\\r\\n`;\n    codeString += `${this._codeVariableName}.texture.uAng = ${this.texture.uAng};\\r\\n`;\n    codeString += `${this._codeVariableName}.texture.vAng = ${this.texture.vAng};\\r\\n`;\n    codeString += `${this._codeVariableName}.texture.wAng = ${this.texture.wAng};\\r\\n`;\n    codeString += `${this._codeVariableName}.texture.uOffset = ${this.texture.uOffset};\\r\\n`;\n    codeString += `${this._codeVariableName}.texture.vOffset = ${this.texture.vOffset};\\r\\n`;\n    codeString += `${this._codeVariableName}.texture.uScale = ${this.texture.uScale};\\r\\n`;\n    codeString += `${this._codeVariableName}.texture.vScale = ${this.texture.vScale};\\r\\n`;\n    codeString += `${this._codeVariableName}.texture.coordinatesMode = ${this.texture.coordinatesMode};\\r\\n`;\n    return codeString;\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.convertToGammaSpace = this.convertToGammaSpace;\n    serializationObject.convertToLinearSpace = this.convertToLinearSpace;\n    serializationObject.fragmentOnly = this._fragmentOnly;\n    serializationObject.disableLevelMultiplication = this.disableLevelMultiplication;\n    if (!this.hasImageSource && this.texture && !this.texture.isRenderTarget && this.texture.getClassName() !== \"VideoTexture\") {\n      serializationObject.texture = this.texture.serialize();\n    }\n    return serializationObject;\n  }\n  _deserialize(serializationObject, scene, rootUrl) {\n    super._deserialize(serializationObject, scene, rootUrl);\n    this.convertToGammaSpace = serializationObject.convertToGammaSpace;\n    this.convertToLinearSpace = !!serializationObject.convertToLinearSpace;\n    this._fragmentOnly = !!serializationObject.fragmentOnly;\n    this.disableLevelMultiplication = !!serializationObject.disableLevelMultiplication;\n    if (serializationObject.texture && !NodeMaterial.IgnoreTexturesAtLoadTime && serializationObject.texture.url !== undefined) {\n      rootUrl = serializationObject.texture.url.indexOf(\"data:\") === 0 ? \"\" : rootUrl;\n      this.texture = Texture.Parse(serializationObject.texture, scene, rootUrl);\n    }\n  }\n}\nRegisterClass(\"BABYLON.TextureBlock\", TextureBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","NodeMaterialConnectionPointDirection","NodeMaterial","InputBlock","RegisterClass","Texture","NodeMaterialModes","ImageSourceBlock","NodeMaterialConnectionPointCustomObject","EngineStore","TextureBlock","constructor","name","fragmentOnly","Fragment","VertexAndFragment","_fragmentOnly","registerInput","AutoDetect","Object","Input","registerOutput","Color4","Neutral","Color3","Float","_inputs","addExcludedConnectionPointFromAllowedTypes","Vector2","Vector3","Vector4","_prioritizeVertex","texture","source","isConnected","connectedPoint","ownerBlock","_texture","scene","getScene","LastCreatedScene","markAllMaterialsAsDirty","mat","hasTexture","samplerName","_imageSource","_samplerName","hasImageSource","convertToGammaSpace","value","_convertToGammaSpace","convertToLinearSpace","_convertToLinearSpace","getClassName","uv","rgba","_outputs","rgb","r","g","b","a","level","target","sourceBlock","isInput","parent","Vertex","parentBlock","input","inputs","autoConfigure","material","mode","PostProcess","uvInput","getBlockByPredicate","connectTo","attributeName","Particle","getInputBlockByPredicate","isAttribute","setAsAttribute","output","initializeDefines","mesh","nodeMaterial","defines","_areTexturesDirty","_mainUVDefineName","undefined","setValue","prepareDefines","getTextureMatrix","_isMixed","_defineName","toGamma","gammaSpace","toLinear","_linearDefineName","_gammaDefineName","isIdentityAs3x2","isReady","isReadyOrNotBlocking","bind","effect","setFloat","_textureInfoName","setMatrix","_textureTransformName","setTexture","_injectVertexCode","state","_getFreeDefineName","associatedVariableName","toUpperCase","_mainUVName","_transformedUVName","_getFreeVariableName","_emitVaryingFromString","_emitUniformFromString","compilationString","some","o","isConnectedInVertexShader","_writeTextureRead","hasEndpoints","_writeOutput","_generateTextureLookup","_tempTextureRead","vertexMode","_generateConversionCode","swizzle","_declareOutput","complement","disableLevelMultiplication","_buildBlock","_emit2DSampler","sharedData","blockingBlocks","push","textureBlocks","blocksWithDefines","bindableBlocks","isConnectedInFragmentShader","comments","_emitFunctionFromInclude","_dumpPropertiesCode","codeString","_codeVariableName","noMipmap","invertY","samplingMode","wrapU","wrapV","uAng","vAng","wAng","uOffset","vOffset","uScale","vScale","coordinatesMode","serialize","serializationObject","isRenderTarget","_deserialize","rootUrl","IgnoreTexturesAtLoadTime","url","indexOf","Parse"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/Dual/textureBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport { NodeMaterial } from \"../../nodeMaterial\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { Texture } from \"../../../Textures/texture\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport { NodeMaterialModes } from \"../../Enums/nodeMaterialModes\";\r\nimport { Constants } from \"../../../../Engines/constants\";\r\nimport \"../../../../Shaders/ShadersInclude/helperFunctions\";\r\nimport { ImageSourceBlock } from \"./imageSourceBlock\";\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport { EngineStore } from \"../../../../Engines/engineStore\";\r\n\r\n/**\r\n * Block used to read a texture from a sampler\r\n */\r\nexport class TextureBlock extends NodeMaterialBlock {\r\n    private _defineName: string;\r\n    private _linearDefineName: string;\r\n    private _gammaDefineName: string;\r\n    private _tempTextureRead: string;\r\n    private _samplerName: string;\r\n    private _transformedUVName: string;\r\n    private _textureTransformName: string;\r\n    private _textureInfoName: string;\r\n    private _mainUVName: string;\r\n    private _mainUVDefineName: string;\r\n    private _fragmentOnly: boolean;\r\n    private _imageSource: Nullable<ImageSourceBlock>;\r\n\r\n    protected _texture: Nullable<Texture>;\r\n    /**\r\n     * Gets or sets the texture associated with the node\r\n     */\r\n    public get texture(): Nullable<Texture> {\r\n        if (this.source.isConnected) {\r\n            return (this.source.connectedPoint?.ownerBlock as ImageSourceBlock).texture;\r\n        }\r\n        return this._texture;\r\n    }\r\n\r\n    public set texture(texture: Nullable<Texture>) {\r\n        if (this._texture === texture) {\r\n            return;\r\n        }\r\n\r\n        const scene = texture?.getScene() ?? EngineStore.LastCreatedScene;\r\n\r\n        if (!texture && scene) {\r\n            scene.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag, (mat) => {\r\n                return mat.hasTexture(this._texture!);\r\n            });\r\n        }\r\n\r\n        this._texture = texture;\r\n\r\n        if (texture && scene) {\r\n            scene.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag, (mat) => {\r\n                return mat.hasTexture(texture);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the sampler name associated with this texture\r\n     */\r\n    public get samplerName(): string {\r\n        if (this._imageSource) {\r\n            return this._imageSource.samplerName;\r\n        }\r\n        return this._samplerName;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that this block is linked to an ImageSourceBlock\r\n     */\r\n    public get hasImageSource(): boolean {\r\n        return this.source.isConnected;\r\n    }\r\n\r\n    private _convertToGammaSpace = false;\r\n    /**\r\n     * Gets or sets a boolean indicating if content needs to be converted to gamma space\r\n     */\r\n    public set convertToGammaSpace(value: boolean) {\r\n        if (value === this._convertToGammaSpace) {\r\n            return;\r\n        }\r\n\r\n        this._convertToGammaSpace = value;\r\n        if (this.texture) {\r\n            const scene = this.texture.getScene() ?? EngineStore.LastCreatedScene;\r\n            scene?.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag, (mat) => {\r\n                return mat.hasTexture(this.texture!);\r\n            });\r\n        }\r\n    }\r\n    public get convertToGammaSpace(): boolean {\r\n        return this._convertToGammaSpace;\r\n    }\r\n\r\n    private _convertToLinearSpace = false;\r\n    /**\r\n     * Gets or sets a boolean indicating if content needs to be converted to linear space\r\n     */\r\n    public set convertToLinearSpace(value: boolean) {\r\n        if (value === this._convertToLinearSpace) {\r\n            return;\r\n        }\r\n\r\n        this._convertToLinearSpace = value;\r\n        if (this.texture) {\r\n            const scene = this.texture.getScene() ?? EngineStore.LastCreatedScene;\r\n            scene?.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag, (mat) => {\r\n                return mat.hasTexture(this.texture!);\r\n            });\r\n        }\r\n    }\r\n    public get convertToLinearSpace(): boolean {\r\n        return this._convertToLinearSpace;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if multiplication of texture with level should be disabled\r\n     */\r\n    public disableLevelMultiplication = false;\r\n\r\n    /**\r\n     * Create a new TextureBlock\r\n     * @param name defines the block name\r\n     * @param fragmentOnly\r\n     */\r\n    public constructor(name: string, fragmentOnly = false) {\r\n        super(name, fragmentOnly ? NodeMaterialBlockTargets.Fragment : NodeMaterialBlockTargets.VertexAndFragment);\r\n\r\n        this._fragmentOnly = fragmentOnly;\r\n\r\n        this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.AutoDetect, false, NodeMaterialBlockTargets.VertexAndFragment);\r\n        this.registerInput(\r\n            \"source\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            true,\r\n            NodeMaterialBlockTargets.VertexAndFragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"source\", this, NodeMaterialConnectionPointDirection.Input, ImageSourceBlock, \"ImageSourceBlock\")\r\n        );\r\n\r\n        this.registerOutput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"r\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"g\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"b\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerOutput(\"level\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this._inputs[0].addExcludedConnectionPointFromAllowedTypes(\r\n            NodeMaterialBlockConnectionPointTypes.Vector2 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4\r\n        );\r\n\r\n        this._inputs[0]._prioritizeVertex = !fragmentOnly;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"TextureBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the uv input component\r\n     */\r\n    public get uv(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the source input component\r\n     */\r\n    public get source(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgba output component\r\n     */\r\n    public get rgba(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb output component\r\n     */\r\n    public get rgb(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the r output component\r\n     */\r\n    public get r(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the g output component\r\n     */\r\n    public get g(): NodeMaterialConnectionPoint {\r\n        return this._outputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the b output component\r\n     */\r\n    public get b(): NodeMaterialConnectionPoint {\r\n        return this._outputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the a output component\r\n     */\r\n    public get a(): NodeMaterialConnectionPoint {\r\n        return this._outputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the level output component\r\n     */\r\n    public get level(): NodeMaterialConnectionPoint {\r\n        return this._outputs[6];\r\n    }\r\n\r\n    public get target() {\r\n        if (this._fragmentOnly) {\r\n            return NodeMaterialBlockTargets.Fragment;\r\n        }\r\n\r\n        // TextureBlock has a special optimizations for uvs that come from the vertex shaders as they can be packed into a single varyings.\r\n        // But we need to detect uvs coming from fragment then\r\n        if (!this.uv.isConnected) {\r\n            return NodeMaterialBlockTargets.VertexAndFragment;\r\n        }\r\n\r\n        if (this.uv.sourceBlock!.isInput) {\r\n            return NodeMaterialBlockTargets.VertexAndFragment;\r\n        }\r\n\r\n        let parent = this.uv.connectedPoint;\r\n\r\n        while (parent) {\r\n            if (parent.target === NodeMaterialBlockTargets.Fragment) {\r\n                return NodeMaterialBlockTargets.Fragment;\r\n            }\r\n\r\n            if (parent.target === NodeMaterialBlockTargets.Vertex) {\r\n                return NodeMaterialBlockTargets.VertexAndFragment;\r\n            }\r\n\r\n            if (parent.target === NodeMaterialBlockTargets.Neutral || parent.target === NodeMaterialBlockTargets.VertexAndFragment) {\r\n                const parentBlock = parent.ownerBlock;\r\n\r\n                if (parentBlock.target === NodeMaterialBlockTargets.Fragment) {\r\n                    return NodeMaterialBlockTargets.Fragment;\r\n                }\r\n\r\n                parent = null;\r\n                for (const input of parentBlock.inputs) {\r\n                    if (input.connectedPoint) {\r\n                        parent = input.connectedPoint;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return NodeMaterialBlockTargets.VertexAndFragment;\r\n    }\r\n\r\n    public set target(value: NodeMaterialBlockTargets) {}\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.uv.isConnected) {\r\n            if (material.mode === NodeMaterialModes.PostProcess) {\r\n                const uvInput = material.getBlockByPredicate((b) => b.name === \"uv\");\r\n\r\n                if (uvInput) {\r\n                    uvInput.connectTo(this);\r\n                }\r\n            } else {\r\n                const attributeName = material.mode === NodeMaterialModes.Particle ? \"particle_uv\" : \"uv\";\r\n\r\n                let uvInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === attributeName);\r\n\r\n                if (!uvInput) {\r\n                    uvInput = new InputBlock(\"uv\");\r\n                    uvInput.setAsAttribute(attributeName);\r\n                }\r\n                uvInput.output.connectTo(this.uv);\r\n            }\r\n        }\r\n    }\r\n\r\n    public initializeDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        if (!defines._areTexturesDirty) {\r\n            return;\r\n        }\r\n\r\n        if (this._mainUVDefineName !== undefined) {\r\n            defines.setValue(this._mainUVDefineName, false, true);\r\n        }\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        if (!defines._areTexturesDirty) {\r\n            return;\r\n        }\r\n\r\n        if (!this.texture || !this.texture.getTextureMatrix) {\r\n            if (this._isMixed) {\r\n                defines.setValue(this._defineName, false, true);\r\n                defines.setValue(this._mainUVDefineName, true, true);\r\n            }\r\n            return;\r\n        }\r\n\r\n        const toGamma = this.convertToGammaSpace && this.texture && !this.texture.gammaSpace;\r\n        const toLinear = this.convertToLinearSpace && this.texture && this.texture.gammaSpace;\r\n\r\n        // Not a bug... Name defines the texture space not the required conversion\r\n        defines.setValue(this._linearDefineName, toGamma, true);\r\n        defines.setValue(this._gammaDefineName, toLinear, true);\r\n\r\n        if (this._isMixed) {\r\n            if (!this.texture.getTextureMatrix().isIdentityAs3x2()) {\r\n                defines.setValue(this._defineName, true);\r\n                if (defines[this._mainUVDefineName] == undefined) {\r\n                    defines.setValue(this._mainUVDefineName, false, true);\r\n                }\r\n            } else {\r\n                defines.setValue(this._defineName, false, true);\r\n                defines.setValue(this._mainUVDefineName, true, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    public isReady() {\r\n        if (this.texture && !this.texture.isReadyOrNotBlocking()) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public bind(effect: Effect) {\r\n        if (!this.texture) {\r\n            return;\r\n        }\r\n\r\n        if (this._isMixed) {\r\n            effect.setFloat(this._textureInfoName, this.texture.level);\r\n            effect.setMatrix(this._textureTransformName, this.texture.getTextureMatrix());\r\n        }\r\n\r\n        if (!this._imageSource) {\r\n            effect.setTexture(this._samplerName, this.texture);\r\n        }\r\n    }\r\n\r\n    private get _isMixed() {\r\n        return this.target !== NodeMaterialBlockTargets.Fragment;\r\n    }\r\n\r\n    private _injectVertexCode(state: NodeMaterialBuildState) {\r\n        const uvInput = this.uv;\r\n\r\n        // Inject code in vertex\r\n        this._defineName = state._getFreeDefineName(\"UVTRANSFORM\");\r\n        this._mainUVDefineName = \"VMAIN\" + uvInput.associatedVariableName.toUpperCase();\r\n\r\n        this._mainUVName = \"vMain\" + uvInput.associatedVariableName;\r\n        this._transformedUVName = state._getFreeVariableName(\"transformedUV\");\r\n        this._textureTransformName = state._getFreeVariableName(\"textureTransform\");\r\n        this._textureInfoName = state._getFreeVariableName(\"textureInfoName\");\r\n\r\n        this.level.associatedVariableName = this._textureInfoName;\r\n\r\n        state._emitVaryingFromString(this._transformedUVName, \"vec2\", this._defineName);\r\n        state._emitVaryingFromString(this._mainUVName, \"vec2\", this._mainUVDefineName);\r\n\r\n        state._emitUniformFromString(this._textureTransformName, \"mat4\", this._defineName);\r\n\r\n        state.compilationString += `#ifdef ${this._defineName}\\r\\n`;\r\n        state.compilationString += `${this._transformedUVName} = vec2(${this._textureTransformName} * vec4(${uvInput.associatedVariableName}.xy, 1.0, 0.0));\\r\\n`;\r\n        state.compilationString += `#elif defined(${this._mainUVDefineName})\\r\\n`;\r\n        state.compilationString += `${this._mainUVName} = ${uvInput.associatedVariableName}.xy;\\r\\n`;\r\n        state.compilationString += `#endif\\r\\n`;\r\n\r\n        if (!this._outputs.some((o) => o.isConnectedInVertexShader)) {\r\n            return;\r\n        }\r\n\r\n        this._writeTextureRead(state, true);\r\n\r\n        for (const output of this._outputs) {\r\n            if (output.hasEndpoints && output.name !== \"level\") {\r\n                this._writeOutput(state, output, output.name, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _generateTextureLookup(state: NodeMaterialBuildState): void {\r\n        const samplerName = this.samplerName;\r\n\r\n        state.compilationString += `#ifdef ${this._defineName}\\r\\n`;\r\n        state.compilationString += `vec4 ${this._tempTextureRead} = texture2D(${samplerName}, ${this._transformedUVName});\\r\\n`;\r\n        state.compilationString += `#elif defined(${this._mainUVDefineName})\\r\\n`;\r\n        state.compilationString += `vec4 ${this._tempTextureRead} = texture2D(${samplerName}, ${this._mainUVName ? this._mainUVName : this.uv.associatedVariableName});\\r\\n`;\r\n        state.compilationString += `#endif\\r\\n`;\r\n    }\r\n\r\n    private _writeTextureRead(state: NodeMaterialBuildState, vertexMode = false) {\r\n        const uvInput = this.uv;\r\n\r\n        if (vertexMode) {\r\n            if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n                return;\r\n            }\r\n\r\n            this._generateTextureLookup(state);\r\n            return;\r\n        }\r\n\r\n        if (this.uv.ownerBlock.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.compilationString += `vec4 ${this._tempTextureRead} = texture2D(${this.samplerName}, ${uvInput.associatedVariableName});\\r\\n`;\r\n            return;\r\n        }\r\n\r\n        this._generateTextureLookup(state);\r\n    }\r\n\r\n    private _generateConversionCode(state: NodeMaterialBuildState, output: NodeMaterialConnectionPoint, swizzle: string): void {\r\n        if (swizzle !== \"a\") {\r\n            // no conversion if the output is \"a\" (alpha)\r\n            if (!this.texture || !this.texture.gammaSpace) {\r\n                state.compilationString += `#ifdef ${this._linearDefineName}\r\n                    ${output.associatedVariableName} = toGammaSpace(${output.associatedVariableName});\r\n                    #endif\r\n                `;\r\n            }\r\n\r\n            state.compilationString += `#ifdef ${this._gammaDefineName}\r\n                ${output.associatedVariableName} = toLinearSpace(${output.associatedVariableName});\r\n                #endif\r\n            `;\r\n        }\r\n    }\r\n\r\n    private _writeOutput(state: NodeMaterialBuildState, output: NodeMaterialConnectionPoint, swizzle: string, vertexMode = false) {\r\n        if (vertexMode) {\r\n            if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n                return;\r\n            }\r\n\r\n            state.compilationString += `${this._declareOutput(output, state)} = ${this._tempTextureRead}.${swizzle};\\r\\n`;\r\n            this._generateConversionCode(state, output, swizzle);\r\n            return;\r\n        }\r\n\r\n        if (this.uv.ownerBlock.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.compilationString += `${this._declareOutput(output, state)} = ${this._tempTextureRead}.${swizzle};\\r\\n`;\r\n            this._generateConversionCode(state, output, swizzle);\r\n            return;\r\n        }\r\n        let complement = \"\";\r\n\r\n        if (!this.disableLevelMultiplication) {\r\n            complement = ` * ${this._textureInfoName}`;\r\n        }\r\n\r\n        state.compilationString += `${this._declareOutput(output, state)} = ${this._tempTextureRead}.${swizzle}${complement};\\r\\n`;\r\n        this._generateConversionCode(state, output, swizzle);\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (this.source.isConnected) {\r\n            this._imageSource = this.source.connectedPoint!.ownerBlock as ImageSourceBlock;\r\n        } else {\r\n            this._imageSource = null;\r\n        }\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Vertex || this._fragmentOnly || state.target === NodeMaterialBlockTargets.Fragment) {\r\n            this._tempTextureRead = state._getFreeVariableName(\"tempTextureRead\");\r\n            this._linearDefineName = state._getFreeDefineName(\"ISLINEAR\");\r\n            this._gammaDefineName = state._getFreeDefineName(\"ISGAMMA\");\r\n        }\r\n\r\n        if ((!this._isMixed && state.target === NodeMaterialBlockTargets.Fragment) || (this._isMixed && state.target === NodeMaterialBlockTargets.Vertex)) {\r\n            if (!this._imageSource) {\r\n                this._samplerName = state._getFreeVariableName(this.name + \"Sampler\");\r\n\r\n                state._emit2DSampler(this._samplerName);\r\n            }\r\n\r\n            // Declarations\r\n            state.sharedData.blockingBlocks.push(this);\r\n            state.sharedData.textureBlocks.push(this);\r\n            state.sharedData.blocksWithDefines.push(this);\r\n            state.sharedData.bindableBlocks.push(this);\r\n        }\r\n\r\n        if (state.target !== NodeMaterialBlockTargets.Fragment) {\r\n            // Vertex\r\n            this._injectVertexCode(state);\r\n            return;\r\n        }\r\n\r\n        // Fragment\r\n        if (!this._outputs.some((o) => o.isConnectedInFragmentShader)) {\r\n            return;\r\n        }\r\n\r\n        if (this._isMixed && !this._imageSource) {\r\n            // Reexport the sampler\r\n            state._emit2DSampler(this._samplerName);\r\n        }\r\n\r\n        const comments = `//${this.name}`;\r\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\r\n\r\n        if (this._isMixed) {\r\n            state._emitUniformFromString(this._textureInfoName, \"float\");\r\n        }\r\n\r\n        this._writeTextureRead(state);\r\n\r\n        for (const output of this._outputs) {\r\n            if (output.hasEndpoints && output.name !== \"level\") {\r\n                this._writeOutput(state, output, output.name);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode();\r\n\r\n        codeString += `${this._codeVariableName}.convertToGammaSpace = ${this.convertToGammaSpace};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.convertToLinearSpace = ${this.convertToLinearSpace};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.disableLevelMultiplication = ${this.disableLevelMultiplication};\\r\\n`;\r\n\r\n        if (!this.texture) {\r\n            return codeString;\r\n        }\r\n\r\n        codeString += `${this._codeVariableName}.texture = new BABYLON.Texture(\"${this.texture.name}\", null, ${this.texture.noMipmap}, ${this.texture.invertY}, ${this.texture.samplingMode});\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.wrapU = ${this.texture.wrapU};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.wrapV = ${this.texture.wrapV};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.uAng = ${this.texture.uAng};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.vAng = ${this.texture.vAng};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.wAng = ${this.texture.wAng};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.uOffset = ${this.texture.uOffset};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.vOffset = ${this.texture.vOffset};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.uScale = ${this.texture.uScale};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.vScale = ${this.texture.vScale};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.coordinatesMode = ${this.texture.coordinatesMode};\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.convertToGammaSpace = this.convertToGammaSpace;\r\n        serializationObject.convertToLinearSpace = this.convertToLinearSpace;\r\n        serializationObject.fragmentOnly = this._fragmentOnly;\r\n        serializationObject.disableLevelMultiplication = this.disableLevelMultiplication;\r\n        if (!this.hasImageSource && this.texture && !this.texture.isRenderTarget && this.texture.getClassName() !== \"VideoTexture\") {\r\n            serializationObject.texture = this.texture.serialize();\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.convertToGammaSpace = serializationObject.convertToGammaSpace;\r\n        this.convertToLinearSpace = !!serializationObject.convertToLinearSpace;\r\n        this._fragmentOnly = !!serializationObject.fragmentOnly;\r\n        this.disableLevelMultiplication = !!serializationObject.disableLevelMultiplication;\r\n\r\n        if (serializationObject.texture && !NodeMaterial.IgnoreTexturesAtLoadTime && serializationObject.texture.url !== undefined) {\r\n            rootUrl = serializationObject.texture.url.indexOf(\"data:\") === 0 ? \"\" : rootUrl;\r\n            this.texture = Texture.Parse(serializationObject.texture, scene, rootUrl) as Texture;\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.TextureBlock\", TextureBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}