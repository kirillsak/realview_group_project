{"ast":null,"code":"import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to expand a Color3/4 into 4 outputs (one for each component)\n */\nexport class ColorSplitterBlock extends NodeMaterialBlock {\n  /**\n   * Create a new ColorSplitterBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Neutral);\n    this.registerInput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, true);\n    this.registerInput(\"rgb \", NodeMaterialBlockConnectionPointTypes.Color3, true);\n    this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3);\n    this.registerOutput(\"r\", NodeMaterialBlockConnectionPointTypes.Float);\n    this.registerOutput(\"g\", NodeMaterialBlockConnectionPointTypes.Float);\n    this.registerOutput(\"b\", NodeMaterialBlockConnectionPointTypes.Float);\n    this.registerOutput(\"a\", NodeMaterialBlockConnectionPointTypes.Float);\n    this.inputsAreExclusive = true;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"ColorSplitterBlock\";\n  }\n  /**\n   * Gets the rgba component (input)\n   */\n  get rgba() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the rgb component (input)\n   */\n  get rgbIn() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the rgb component (output)\n   */\n  get rgbOut() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets the r component (output)\n   */\n  get r() {\n    return this._outputs[1];\n  }\n  /**\n   * Gets the g component (output)\n   */\n  get g() {\n    return this._outputs[2];\n  }\n  /**\n   * Gets the b component (output)\n   */\n  get b() {\n    return this._outputs[3];\n  }\n  /**\n   * Gets the a component (output)\n   */\n  get a() {\n    return this._outputs[4];\n  }\n  _inputRename(name) {\n    if (name === \"rgb \") {\n      return \"rgbIn\";\n    }\n    return name;\n  }\n  _outputRename(name) {\n    if (name === \"rgb\") {\n      return \"rgbOut\";\n    }\n    return name;\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const input = this.rgba.isConnected ? this.rgba : this.rgbIn;\n    if (!input.isConnected) {\n      return;\n    }\n    const rgbOutput = this._outputs[0];\n    const rOutput = this._outputs[1];\n    const gOutput = this._outputs[2];\n    const bOutput = this._outputs[3];\n    const aOutput = this._outputs[4];\n    if (rgbOutput.hasEndpoints) {\n      state.compilationString += this._declareOutput(rgbOutput, state) + ` = ${input.associatedVariableName}.rgb;\\r\\n`;\n    }\n    if (rOutput.hasEndpoints) {\n      state.compilationString += this._declareOutput(rOutput, state) + ` = ${input.associatedVariableName}.r;\\r\\n`;\n    }\n    if (gOutput.hasEndpoints) {\n      state.compilationString += this._declareOutput(gOutput, state) + ` = ${input.associatedVariableName}.g;\\r\\n`;\n    }\n    if (bOutput.hasEndpoints) {\n      state.compilationString += this._declareOutput(bOutput, state) + ` = ${input.associatedVariableName}.b;\\r\\n`;\n    }\n    if (aOutput.hasEndpoints) {\n      state.compilationString += this._declareOutput(aOutput, state) + ` = ${input.associatedVariableName}.a;\\r\\n`;\n    }\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.ColorSplitterBlock\", ColorSplitterBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","ColorSplitterBlock","constructor","name","Neutral","registerInput","Color4","Color3","registerOutput","Float","inputsAreExclusive","getClassName","rgba","_inputs","rgbIn","rgbOut","_outputs","r","g","b","a","_inputRename","_outputRename","_buildBlock","state","input","isConnected","rgbOutput","rOutput","gOutput","bOutput","aOutput","hasEndpoints","compilationString","_declareOutput","associatedVariableName"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Node/Blocks/colorSplitterBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\n\r\n/**\r\n * Block used to expand a Color3/4 into 4 outputs (one for each component)\r\n */\r\nexport class ColorSplitterBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new ColorSplitterBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, true);\r\n        this.registerInput(\"rgb \", NodeMaterialBlockConnectionPointTypes.Color3, true);\r\n\r\n        this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3);\r\n        this.registerOutput(\"r\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"g\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"b\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"a\", NodeMaterialBlockConnectionPointTypes.Float);\r\n\r\n        this.inputsAreExclusive = true;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ColorSplitterBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the rgba component (input)\r\n     */\r\n    public get rgba(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb component (input)\r\n     */\r\n    public get rgbIn(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb component (output)\r\n     */\r\n    public get rgbOut(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the r component (output)\r\n     */\r\n    public get r(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the g component (output)\r\n     */\r\n    public get g(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n    /**\r\n     * Gets the b component (output)\r\n     */\r\n    public get b(): NodeMaterialConnectionPoint {\r\n        return this._outputs[3];\r\n    }\r\n    /**\r\n     * Gets the a component (output)\r\n     */\r\n    public get a(): NodeMaterialConnectionPoint {\r\n        return this._outputs[4];\r\n    }\r\n\r\n    protected _inputRename(name: string) {\r\n        if (name === \"rgb \") {\r\n            return \"rgbIn\";\r\n        }\r\n        return name;\r\n    }\r\n\r\n    protected _outputRename(name: string) {\r\n        if (name === \"rgb\") {\r\n            return \"rgbOut\";\r\n        }\r\n        return name;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const input = this.rgba.isConnected ? this.rgba : this.rgbIn;\r\n\r\n        if (!input.isConnected) {\r\n            return;\r\n        }\r\n\r\n        const rgbOutput = this._outputs[0];\r\n        const rOutput = this._outputs[1];\r\n        const gOutput = this._outputs[2];\r\n        const bOutput = this._outputs[3];\r\n        const aOutput = this._outputs[4];\r\n\r\n        if (rgbOutput.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(rgbOutput, state) + ` = ${input.associatedVariableName}.rgb;\\r\\n`;\r\n        }\r\n        if (rOutput.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(rOutput, state) + ` = ${input.associatedVariableName}.r;\\r\\n`;\r\n        }\r\n        if (gOutput.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(gOutput, state) + ` = ${input.associatedVariableName}.g;\\r\\n`;\r\n        }\r\n        if (bOutput.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(bOutput, state) + ` = ${input.associatedVariableName}.b;\\r\\n`;\r\n        }\r\n        if (aOutput.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(aOutput, state) + ` = ${input.associatedVariableName}.a;\\r\\n`;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ColorSplitterBlock\", ColorSplitterBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}