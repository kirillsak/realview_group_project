{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../../tslib.es6.js\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { Logger } from \"../../../Misc/logger.js\";\nimport { serialize, SerializationHelper } from \"../../../Misc/decorators.js\";\nimport { Vector3, TmpVectors } from \"../../../Maths/math.vector.js\";\nimport { Camera } from \"../../../Cameras/camera.js\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture.js\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess.js\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline.js\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport { PassPostProcess } from \"../../../PostProcesses/passPostProcess.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { EngineStore } from \"../../../Engines/engineStore.js\";\nimport { SSAO2Configuration } from \"../../../Rendering/ssao2Configuration.js\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js\";\nimport \"../../../Shaders/ssao2.fragment.js\";\nimport \"../../../Shaders/ssaoCombine.fragment.js\";\n/**\n * Render pipeline to produce ssao effect\n */\nexport class SSAO2RenderingPipeline extends PostProcessRenderPipeline {\n  /**\n   * @constructor\n   * @param name The rendering pipeline name\n   * @param scene The scene linked to this pipeline\n   * @param ratio The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, blurRatio: 1.0 }\n   * @param cameras The array of cameras that the rendering pipeline will be attached to\n   * @param forceGeometryBuffer Set to true if you want to use the legacy geometry buffer renderer\n   * @param textureType The texture type used by the different post processes created by SSAO (default: 0)\n   */\n  constructor(name, scene, ratio, cameras, forceGeometryBuffer = false, textureType = 0) {\n    super(scene.getEngine(), name);\n    // Members\n    /**\n     * @ignore\n     * The PassPostProcess id in the pipeline that contains the original scene color\n     */\n    this.SSAOOriginalSceneColorEffect = \"SSAOOriginalSceneColorEffect\";\n    /**\n     * @ignore\n     * The SSAO PostProcess id in the pipeline\n     */\n    this.SSAORenderEffect = \"SSAORenderEffect\";\n    /**\n     * @ignore\n     * The horizontal blur PostProcess id in the pipeline\n     */\n    this.SSAOBlurHRenderEffect = \"SSAOBlurHRenderEffect\";\n    /**\n     * @ignore\n     * The vertical blur PostProcess id in the pipeline\n     */\n    this.SSAOBlurVRenderEffect = \"SSAOBlurVRenderEffect\";\n    /**\n     * @ignore\n     * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\n     */\n    this.SSAOCombineRenderEffect = \"SSAOCombineRenderEffect\";\n    /**\n     * The output strength of the SSAO post-process. Default value is 1.0.\n     */\n    this.totalStrength = 1.0;\n    /**\n     * Maximum depth value to still render AO. A smooth falloff makes the dimming more natural, so there will be no abrupt shading change.\n     */\n    this.maxZ = 100.0;\n    /**\n     * In order to save performances, SSAO radius is clamped on close geometry. This ratio changes by how much\n     */\n    this.minZAspect = 0.2;\n    this._samples = 8;\n    this._textureSamples = 1;\n    /**\n     * Force rendering the geometry through geometry buffer\n     */\n    this._forceGeometryBuffer = false;\n    this._expensiveBlur = true;\n    /**\n     * The radius around the analyzed pixel used by the SSAO post-process. Default value is 2.0\n     */\n    this.radius = 2.0;\n    /**\n     * The base color of the SSAO post-process\n     * The final result is \"base + ssao\" between [0, 1]\n     */\n    this.base = 0;\n    this._bits = new Uint32Array(1);\n    this._scene = scene;\n    this._ratio = ratio;\n    this._forceGeometryBuffer = forceGeometryBuffer;\n    if (!this.isSupported) {\n      Logger.Error(\"The current engine does not support SSAO 2.\");\n      return;\n    }\n    const ssaoRatio = this._ratio.ssaoRatio || ratio;\n    const blurRatio = this._ratio.blurRatio || ratio;\n    // Set up assets\n    if (this._forceGeometryBuffer) {\n      scene.enableGeometryBufferRenderer();\n    } else {\n      scene.enablePrePassRenderer();\n    }\n    this._createRandomTexture();\n    this._originalColorPostProcess = new PassPostProcess(\"SSAOOriginalSceneColor\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), undefined, textureType);\n    this._originalColorPostProcess.samples = this.textureSamples;\n    this._createSSAOPostProcess(1.0, textureType);\n    this._createBlurPostProcess(ssaoRatio, blurRatio, textureType);\n    this._createSSAOCombinePostProcess(blurRatio, textureType);\n    // Set up pipeline\n    this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOOriginalSceneColorEffect, () => {\n      return this._originalColorPostProcess;\n    }, true));\n    this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAORenderEffect, () => {\n      return this._ssaoPostProcess;\n    }, true));\n    this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOBlurHRenderEffect, () => {\n      return this._blurHPostProcess;\n    }, true));\n    this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOBlurVRenderEffect, () => {\n      return this._blurVPostProcess;\n    }, true));\n    this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOCombineRenderEffect, () => {\n      return this._ssaoCombinePostProcess;\n    }, true));\n    // Finish\n    scene.postProcessRenderPipelineManager.addPipeline(this);\n    if (cameras) {\n      scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\n    }\n  }\n  /**\n   * Number of samples used for the SSAO calculations. Default value is 8\n   */\n  set samples(n) {\n    this._samples = n;\n    this._ssaoPostProcess.updateEffect(this._getDefinesForSSAO());\n    this._sampleSphere = this._generateHemisphere();\n  }\n  get samples() {\n    return this._samples;\n  }\n  /**\n   * Number of samples to use for antialiasing\n   */\n  set textureSamples(n) {\n    this._textureSamples = n;\n    if (this._prePassRenderer) {\n      this._prePassRenderer.samples = n;\n    } else {\n      this._originalColorPostProcess.samples = n;\n    }\n  }\n  get textureSamples() {\n    return this._textureSamples;\n  }\n  get _geometryBufferRenderer() {\n    if (!this._forceGeometryBuffer) {\n      return null;\n    }\n    return this._scene.geometryBufferRenderer;\n  }\n  get _prePassRenderer() {\n    if (this._forceGeometryBuffer) {\n      return null;\n    }\n    return this._scene.prePassRenderer;\n  }\n  /**\n   * If bilateral blur should be used\n   */\n  set expensiveBlur(b) {\n    this._blurHPostProcess.updateEffect(\"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_H\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (b ? \"1\" : \"0\") + \"\\n\", null, [\"textureSampler\", \"depthSampler\"]);\n    this._blurVPostProcess.updateEffect(\"#define BILATERAL_BLUR\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (b ? \"1\" : \"0\") + \"\\n\", null, [\"textureSampler\", \"depthSampler\"]);\n    this._expensiveBlur = b;\n  }\n  get expensiveBlur() {\n    return this._expensiveBlur;\n  }\n  /**\n   *  Support test.\n   */\n  static get IsSupported() {\n    const engine = EngineStore.LastCreatedEngine;\n    if (!engine) {\n      return false;\n    }\n    return engine._features.supportSSAO2;\n  }\n  /**\n   * Gets active scene\n   */\n  get scene() {\n    return this._scene;\n  }\n  // Public Methods\n  /**\n   * Get the class name\n   * @returns \"SSAO2RenderingPipeline\"\n   */\n  getClassName() {\n    return \"SSAO2RenderingPipeline\";\n  }\n  /**\n   * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\n   * @param disableGeometryBufferRenderer\n   */\n  dispose(disableGeometryBufferRenderer = false) {\n    for (let i = 0; i < this._scene.cameras.length; i++) {\n      const camera = this._scene.cameras[i];\n      this._originalColorPostProcess.dispose(camera);\n      this._ssaoPostProcess.dispose(camera);\n      this._blurHPostProcess.dispose(camera);\n      this._blurVPostProcess.dispose(camera);\n      this._ssaoCombinePostProcess.dispose(camera);\n    }\n    this._randomTexture.dispose();\n    if (disableGeometryBufferRenderer) {\n      this._scene.disableGeometryBufferRenderer();\n    }\n    this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\n    super.dispose();\n  }\n  // Private Methods\n  _createBlurPostProcess(ssaoRatio, blurRatio, textureType) {\n    this._samplerOffsets = [];\n    const expensive = this.expensiveBlur;\n    for (let i = -8; i < 8; i++) {\n      this._samplerOffsets.push(i * 2 + 0.5);\n    }\n    this._blurHPostProcess = new PostProcess(\"BlurH\", \"ssao2\", [\"outSize\", \"samplerOffsets\", \"near\", \"far\", \"radius\"], [\"depthSampler\"], ssaoRatio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, \"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_H\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (expensive ? \"1\" : \"0\") + \"\\n\", textureType);\n    this._blurHPostProcess.onApply = effect => {\n      if (!this._scene.activeCamera) {\n        return;\n      }\n      effect.setFloat(\"outSize\", this._ssaoCombinePostProcess.width > 0 ? this._ssaoCombinePostProcess.width : this._originalColorPostProcess.width);\n      effect.setFloat(\"near\", this._scene.activeCamera.minZ);\n      effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\n      effect.setFloat(\"radius\", this.radius);\n      if (this._geometryBufferRenderer) {\n        effect.setTexture(\"depthSampler\", this._geometryBufferRenderer.getGBuffer().textures[0]);\n      } else if (this._prePassRenderer) {\n        effect.setTexture(\"depthSampler\", this._prePassRenderer.getRenderTarget().textures[this._prePassRenderer.getIndex(5)]);\n      }\n      effect.setArray(\"samplerOffsets\", this._samplerOffsets);\n    };\n    this._blurVPostProcess = new PostProcess(\"BlurV\", \"ssao2\", [\"outSize\", \"samplerOffsets\", \"near\", \"far\", \"radius\"], [\"depthSampler\"], blurRatio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, \"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_V\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (expensive ? \"1\" : \"0\") + \"\\n\", textureType);\n    this._blurVPostProcess.onApply = effect => {\n      if (!this._scene.activeCamera) {\n        return;\n      }\n      effect.setFloat(\"outSize\", this._ssaoCombinePostProcess.height > 0 ? this._ssaoCombinePostProcess.height : this._originalColorPostProcess.height);\n      effect.setFloat(\"near\", this._scene.activeCamera.minZ);\n      effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\n      effect.setFloat(\"radius\", this.radius);\n      if (this._geometryBufferRenderer) {\n        effect.setTexture(\"depthSampler\", this._geometryBufferRenderer.getGBuffer().textures[0]);\n      } else if (this._prePassRenderer) {\n        effect.setTexture(\"depthSampler\", this._prePassRenderer.getRenderTarget().textures[this._prePassRenderer.getIndex(5)]);\n      }\n      effect.setArray(\"samplerOffsets\", this._samplerOffsets);\n    };\n    this._blurHPostProcess.samples = this.textureSamples;\n    this._blurVPostProcess.samples = this.textureSamples;\n  }\n  /** @internal */\n  _rebuild() {\n    super._rebuild();\n  }\n  //Van der Corput radical inverse\n  _radicalInverse_VdC(i) {\n    this._bits[0] = i;\n    this._bits[0] = (this._bits[0] << 16 | this._bits[0] >> 16) >>> 0;\n    this._bits[0] = (this._bits[0] & 0x55555555) << 1 | (this._bits[0] & 0xaaaaaaaa) >>> 1 >>> 0;\n    this._bits[0] = (this._bits[0] & 0x33333333) << 2 | (this._bits[0] & 0xcccccccc) >>> 2 >>> 0;\n    this._bits[0] = (this._bits[0] & 0x0f0f0f0f) << 4 | (this._bits[0] & 0xf0f0f0f0) >>> 4 >>> 0;\n    this._bits[0] = (this._bits[0] & 0x00ff00ff) << 8 | (this._bits[0] & 0xff00ff00) >>> 8 >>> 0;\n    return this._bits[0] * 2.3283064365386963e-10; // / 0x100000000 or / 4294967296\n  }\n\n  _hammersley(i, n) {\n    return [i / n, this._radicalInverse_VdC(i)];\n  }\n  _hemisphereSample_uniform(u, v) {\n    const phi = v * 2.0 * Math.PI;\n    // rejecting samples that are close to tangent plane to avoid z-fighting artifacts\n    const cosTheta = 1.0 - u * 0.85;\n    const sinTheta = Math.sqrt(1.0 - cosTheta * cosTheta);\n    return new Vector3(Math.cos(phi) * sinTheta, Math.sin(phi) * sinTheta, cosTheta);\n  }\n  _generateHemisphere() {\n    const numSamples = this.samples;\n    const result = [];\n    let vector;\n    let i = 0;\n    while (i < numSamples) {\n      if (numSamples < 16) {\n        vector = this._hemisphereSample_uniform(Math.random(), Math.random());\n      } else {\n        const rand = this._hammersley(i, numSamples);\n        vector = this._hemisphereSample_uniform(rand[0], rand[1]);\n      }\n      result.push(vector.x, vector.y, vector.z);\n      i++;\n    }\n    return result;\n  }\n  _getDefinesForSSAO() {\n    const defines = \"#define SAMPLES \" + this.samples + \"\\n#define SSAO\";\n    return defines;\n  }\n  _createSSAOPostProcess(ratio, textureType) {\n    this._sampleSphere = this._generateHemisphere();\n    const defines = this._getDefinesForSSAO();\n    const samplers = [\"randomSampler\", \"depthSampler\", \"normalSampler\"];\n    this._ssaoPostProcess = new PostProcess(\"ssao2\", \"ssao2\", [\"sampleSphere\", \"samplesFactor\", \"randTextureTiles\", \"totalStrength\", \"radius\", \"base\", \"range\", \"projection\", \"near\", \"far\", \"texelSize\", \"xViewport\", \"yViewport\", \"maxZ\", \"minZAspect\", \"depthProjection\"], samplers, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, defines, textureType);\n    this._ssaoPostProcess.onApply = effect => {\n      var _a, _b, _c, _d;\n      if (!this._scene.activeCamera) {\n        return;\n      }\n      effect.setArray3(\"sampleSphere\", this._sampleSphere);\n      effect.setFloat(\"randTextureTiles\", 32.0);\n      effect.setFloat(\"samplesFactor\", 1 / this.samples);\n      effect.setFloat(\"totalStrength\", this.totalStrength);\n      effect.setFloat2(\"texelSize\", 1 / this._ssaoPostProcess.width, 1 / this._ssaoPostProcess.height);\n      effect.setFloat(\"radius\", this.radius);\n      effect.setFloat(\"maxZ\", this.maxZ);\n      effect.setFloat(\"minZAspect\", this.minZAspect);\n      effect.setFloat(\"base\", this.base);\n      effect.setFloat(\"near\", this._scene.activeCamera.minZ);\n      effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\n      if (this._scene.activeCamera.mode === Camera.PERSPECTIVE_CAMERA) {\n        effect.setMatrix3x3(\"depthProjection\", SSAO2RenderingPipeline.PERSPECTIVE_DEPTH_PROJECTION);\n        effect.setFloat(\"xViewport\", Math.tan(this._scene.activeCamera.fov / 2) * this._scene.getEngine().getAspectRatio(this._scene.activeCamera, true));\n        effect.setFloat(\"yViewport\", Math.tan(this._scene.activeCamera.fov / 2));\n      } else {\n        const halfWidth = this._scene.getEngine().getRenderWidth() / 2.0;\n        const halfHeight = this._scene.getEngine().getRenderHeight() / 2.0;\n        const orthoLeft = (_a = this._scene.activeCamera.orthoLeft) !== null && _a !== void 0 ? _a : -halfWidth;\n        const orthoRight = (_b = this._scene.activeCamera.orthoRight) !== null && _b !== void 0 ? _b : halfWidth;\n        const orthoBottom = (_c = this._scene.activeCamera.orthoBottom) !== null && _c !== void 0 ? _c : -halfHeight;\n        const orthoTop = (_d = this._scene.activeCamera.orthoTop) !== null && _d !== void 0 ? _d : halfHeight;\n        effect.setMatrix3x3(\"depthProjection\", SSAO2RenderingPipeline.ORTHO_DEPTH_PROJECTION);\n        effect.setFloat(\"xViewport\", (orthoRight - orthoLeft) * 0.5);\n        effect.setFloat(\"yViewport\", (orthoTop - orthoBottom) * 0.5);\n      }\n      effect.setMatrix(\"projection\", this._scene.getProjectionMatrix());\n      if (this._geometryBufferRenderer) {\n        effect.setTexture(\"depthSampler\", this._geometryBufferRenderer.getGBuffer().textures[0]);\n        effect.setTexture(\"normalSampler\", this._geometryBufferRenderer.getGBuffer().textures[1]);\n      } else if (this._prePassRenderer) {\n        effect.setTexture(\"depthSampler\", this._prePassRenderer.getRenderTarget().textures[this._prePassRenderer.getIndex(5)]);\n        effect.setTexture(\"normalSampler\", this._prePassRenderer.getRenderTarget().textures[this._prePassRenderer.getIndex(6)]);\n      }\n      effect.setTexture(\"randomSampler\", this._randomTexture);\n    };\n    this._ssaoPostProcess.samples = this.textureSamples;\n    if (!this._forceGeometryBuffer) {\n      this._ssaoPostProcess._prePassEffectConfiguration = new SSAO2Configuration();\n    }\n  }\n  _createSSAOCombinePostProcess(ratio, textureType) {\n    this._ssaoCombinePostProcess = new PostProcess(\"ssaoCombine\", \"ssaoCombine\", [], [\"originalColor\", \"viewport\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, undefined, textureType);\n    this._ssaoCombinePostProcess.onApply = effect => {\n      const viewport = this._scene.activeCamera.viewport;\n      effect.setVector4(\"viewport\", TmpVectors.Vector4[0].copyFromFloats(viewport.x, viewport.y, viewport.width, viewport.height));\n      effect.setTextureFromPostProcessOutput(\"originalColor\", this._originalColorPostProcess);\n    };\n    this._ssaoCombinePostProcess.samples = this.textureSamples;\n  }\n  _createRandomTexture() {\n    const size = 128;\n    this._randomTexture = new DynamicTexture(\"SSAORandomTexture\", size, this._scene, false, Texture.TRILINEAR_SAMPLINGMODE);\n    this._randomTexture.wrapU = Texture.WRAP_ADDRESSMODE;\n    this._randomTexture.wrapV = Texture.WRAP_ADDRESSMODE;\n    const context = this._randomTexture.getContext();\n    const rand = (min, max) => {\n      return Math.random() * (max - min) + min;\n    };\n    const randVector = Vector3.Zero();\n    for (let x = 0; x < size; x++) {\n      for (let y = 0; y < size; y++) {\n        randVector.x = rand(0.0, 1.0);\n        randVector.y = rand(0.0, 1.0);\n        randVector.z = 0.0;\n        randVector.normalize();\n        randVector.scaleInPlace(255);\n        randVector.x = Math.floor(randVector.x);\n        randVector.y = Math.floor(randVector.y);\n        context.fillStyle = \"rgb(\" + randVector.x + \", \" + randVector.y + \", \" + randVector.z + \")\";\n        context.fillRect(x, y, 1, 1);\n      }\n    }\n    this._randomTexture.update(false);\n  }\n  /**\n   * Serialize the rendering pipeline (Used when exporting)\n   * @returns the serialized object\n   */\n  serialize() {\n    const serializationObject = SerializationHelper.Serialize(this);\n    serializationObject.customType = \"SSAO2RenderingPipeline\";\n    return serializationObject;\n  }\n  /**\n   * Parse the serialized pipeline\n   * @param source Source pipeline.\n   * @param scene The scene to load the pipeline to.\n   * @param rootUrl The URL of the serialized pipeline.\n   * @returns An instantiated pipeline from the serialized object.\n   */\n  static Parse(source, scene, rootUrl) {\n    return SerializationHelper.Parse(() => new SSAO2RenderingPipeline(source._name, scene, source._ratio), source, scene, rootUrl);\n  }\n}\nSSAO2RenderingPipeline.ORTHO_DEPTH_PROJECTION = [1, 0, 0, 0, 1, 0, 0, 0, 1];\nSSAO2RenderingPipeline.PERSPECTIVE_DEPTH_PROJECTION = [0, 0, 0, 0, 0, 0, 1, 1, 1];\n__decorate([serialize()], SSAO2RenderingPipeline.prototype, \"totalStrength\", void 0);\n__decorate([serialize()], SSAO2RenderingPipeline.prototype, \"maxZ\", void 0);\n__decorate([serialize()], SSAO2RenderingPipeline.prototype, \"minZAspect\", void 0);\n__decorate([serialize(\"samples\")], SSAO2RenderingPipeline.prototype, \"_samples\", void 0);\n__decorate([serialize(\"textureSamples\")], SSAO2RenderingPipeline.prototype, \"_textureSamples\", void 0);\n__decorate([serialize()], SSAO2RenderingPipeline.prototype, \"_ratio\", void 0);\n__decorate([serialize(\"expensiveBlur\")], SSAO2RenderingPipeline.prototype, \"_expensiveBlur\", void 0);\n__decorate([serialize()], SSAO2RenderingPipeline.prototype, \"radius\", void 0);\n__decorate([serialize()], SSAO2RenderingPipeline.prototype, \"base\", void 0);\nRegisterClass(\"BABYLON.SSAO2RenderingPipeline\", SSAO2RenderingPipeline);","map":{"version":3,"mappings":";;AAAA;AACA,SAASA,MAAM,QAAQ,yBAAuB;AAC9C,SAASC,SAAS,EAAEC,mBAAmB,QAAQ,6BAA2B;AAC1E,SAASC,OAAO,EAAEC,UAAU,QAAQ,+BAA6B;AACjE,SAASC,MAAM,QAAQ,4BAA0B;AAEjD,SAASC,OAAO,QAAQ,wCAAsC;AAC9D,SAASC,cAAc,QAAQ,+CAA6C;AAC5E,SAASC,WAAW,QAAQ,uCAAqC;AACjE,SAASC,yBAAyB,QAAQ,oEAAkE;AAC5G,SAASC,uBAAuB,QAAQ,kEAAgE;AACxG,SAASC,eAAe,QAAQ,2CAAyC;AAEzE,SAASC,aAAa,QAAQ,4BAA0B;AACxD,SAASC,WAAW,QAAQ,iCAA+B;AAC3D,SAASC,kBAAkB,QAAQ,0CAAwC;AAM3E,OAAO,yFAAuF;AAE9F,OAAO,oCAAkC;AACzC,OAAO,0CAAwC;AAE/C;;;AAGA,OAAM,MAAOC,sBAAuB,SAAQN,yBAAyB;EAwKjE;;;;;;;;;EASAO,YAAYC,IAAY,EAAEC,KAAY,EAAEC,KAAU,EAAEC,OAAkB,EAAEC,mBAAmB,GAAG,KAAK,EAAEC,WAAW,GAAG;IAC/G,KAAK,CAACJ,KAAK,CAACK,SAAS,EAAE,EAAEN,IAAI,CAAC;IAjLlC;IAEA;;;;IAIO,iCAA4B,GAAW,8BAA8B;IAC5E;;;;IAIO,qBAAgB,GAAW,kBAAkB;IACpD;;;;IAIO,0BAAqB,GAAW,uBAAuB;IAC9D;;;;IAIO,0BAAqB,GAAW,uBAAuB;IAC9D;;;;IAIO,4BAAuB,GAAW,yBAAyB;IAElE;;;IAIO,kBAAa,GAAW,GAAG;IAElC;;;IAIO,SAAI,GAAW,KAAK;IAE3B;;;IAIO,eAAU,GAAW,GAAG;IAGvB,aAAQ,GAAW,CAAC;IAcpB,oBAAe,GAAW,CAAC;IAiBnC;;;IAGQ,yBAAoB,GAAY,KAAK;IA8BrC,mBAAc,GAAY,IAAI;IAiBtC;;;IAIO,WAAM,GAAW,GAAG;IAE3B;;;;IAKO,SAAI,GAAW,CAAC;IAgPf,UAAK,GAAG,IAAIO,WAAW,CAAC,CAAC,CAAC;IAxM9B,IAAI,CAACC,MAAM,GAAGP,KAAK;IACnB,IAAI,CAACQ,MAAM,GAAGP,KAAK;IACnB,IAAI,CAACQ,oBAAoB,GAAGN,mBAAmB;IAE/C,IAAI,CAAC,IAAI,CAACO,WAAW,EAAE;MACnB5B,MAAM,CAAC6B,KAAK,CAAC,6CAA6C,CAAC;MAC3D;;IAGJ,MAAMC,SAAS,GAAG,IAAI,CAACJ,MAAM,CAACI,SAAS,IAAIX,KAAK;IAChD,MAAMY,SAAS,GAAG,IAAI,CAACL,MAAM,CAACK,SAAS,IAAIZ,KAAK;IAEhD;IACA,IAAI,IAAI,CAACQ,oBAAoB,EAAE;MAC3BT,KAAK,CAACc,4BAA4B,EAAE;KACvC,MAAM;MACHd,KAAK,CAACe,qBAAqB,EAAE;;IAGjC,IAAI,CAACC,oBAAoB,EAAE;IAE3B,IAAI,CAACC,yBAAyB,GAAG,IAAIxB,eAAe,CAAC,wBAAwB,EAAE,GAAG,EAAE,IAAI,EAAEL,OAAO,CAAC8B,qBAAqB,EAAElB,KAAK,CAACK,SAAS,EAAE,EAAEc,SAAS,EAAEf,WAAW,CAAC;IACnK,IAAI,CAACa,yBAAyB,CAACG,OAAO,GAAG,IAAI,CAACC,cAAc;IAC5D,IAAI,CAACC,sBAAsB,CAAC,GAAG,EAAElB,WAAW,CAAC;IAC7C,IAAI,CAACmB,sBAAsB,CAACX,SAAS,EAAEC,SAAS,EAAET,WAAW,CAAC;IAC9D,IAAI,CAACoB,6BAA6B,CAACX,SAAS,EAAET,WAAW,CAAC;IAE1D;IACA,IAAI,CAACqB,SAAS,CACV,IAAIjC,uBAAuB,CACvBQ,KAAK,CAACK,SAAS,EAAE,EACjB,IAAI,CAACqB,4BAA4B,EACjC,MAAK;MACD,OAAO,IAAI,CAACT,yBAAyB;IACzC,CAAC,EACD,IAAI,CACP,CACJ;IACD,IAAI,CAACQ,SAAS,CACV,IAAIjC,uBAAuB,CACvBQ,KAAK,CAACK,SAAS,EAAE,EACjB,IAAI,CAACsB,gBAAgB,EACrB,MAAK;MACD,OAAO,IAAI,CAACC,gBAAgB;IAChC,CAAC,EACD,IAAI,CACP,CACJ;IACD,IAAI,CAACH,SAAS,CACV,IAAIjC,uBAAuB,CACvBQ,KAAK,CAACK,SAAS,EAAE,EACjB,IAAI,CAACwB,qBAAqB,EAC1B,MAAK;MACD,OAAO,IAAI,CAACC,iBAAiB;IACjC,CAAC,EACD,IAAI,CACP,CACJ;IACD,IAAI,CAACL,SAAS,CACV,IAAIjC,uBAAuB,CACvBQ,KAAK,CAACK,SAAS,EAAE,EACjB,IAAI,CAAC0B,qBAAqB,EAC1B,MAAK;MACD,OAAO,IAAI,CAACC,iBAAiB;IACjC,CAAC,EACD,IAAI,CACP,CACJ;IACD,IAAI,CAACP,SAAS,CACV,IAAIjC,uBAAuB,CACvBQ,KAAK,CAACK,SAAS,EAAE,EACjB,IAAI,CAAC4B,uBAAuB,EAC5B,MAAK;MACD,OAAO,IAAI,CAACC,uBAAuB;IACvC,CAAC,EACD,IAAI,CACP,CACJ;IAED;IACAlC,KAAK,CAACmC,gCAAgC,CAACC,WAAW,CAAC,IAAI,CAAC;IACxD,IAAIlC,OAAO,EAAE;MACTF,KAAK,CAACmC,gCAAgC,CAACE,6BAA6B,CAACtC,IAAI,EAAEG,OAAO,CAAC;;EAE3F;EAvNA;;;EAGA,IAAWkB,OAAO,CAACkB,CAAS;IACxB,IAAI,CAACC,QAAQ,GAAGD,CAAC;IACjB,IAAI,CAACV,gBAAgB,CAACY,YAAY,CAAC,IAAI,CAACC,kBAAkB,EAAE,CAAC;IAC7D,IAAI,CAACC,aAAa,GAAG,IAAI,CAACC,mBAAmB,EAAE;EACnD;EACA,IAAWvB,OAAO;IACd,OAAO,IAAI,CAACmB,QAAQ;EACxB;EAIA;;;EAGA,IAAWlB,cAAc,CAACiB,CAAS;IAC/B,IAAI,CAACM,eAAe,GAAGN,CAAC;IAExB,IAAI,IAAI,CAACO,gBAAgB,EAAE;MACvB,IAAI,CAACA,gBAAgB,CAACzB,OAAO,GAAGkB,CAAC;KACpC,MAAM;MACH,IAAI,CAACrB,yBAAyB,CAACG,OAAO,GAAGkB,CAAC;;EAElD;EACA,IAAWjB,cAAc;IACrB,OAAO,IAAI,CAACuB,eAAe;EAC/B;EAMA,IAAYE,uBAAuB;IAC/B,IAAI,CAAC,IAAI,CAACrC,oBAAoB,EAAE;MAC5B,OAAO,IAAI;;IAEf,OAAO,IAAI,CAACF,MAAM,CAACwC,sBAAsB;EAC7C;EACA,IAAYF,gBAAgB;IACxB,IAAI,IAAI,CAACpC,oBAAoB,EAAE;MAC3B,OAAO,IAAI;;IAEf,OAAO,IAAI,CAACF,MAAM,CAACyC,eAAe;EACtC;EAmBA;;;EAGA,IAAWC,aAAa,CAACC,CAAU;IAC/B,IAAI,CAACpB,iBAAiB,CAACU,YAAY,CAAC,0FAA0F,IAAIU,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,EAAE,IAAI,EAAE,CAC3J,gBAAgB,EAChB,cAAc,CACjB,CAAC;IACF,IAAI,CAAClB,iBAAiB,CAACQ,YAAY,CAAC,gEAAgE,IAAIU,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;IACxK,IAAI,CAACC,cAAc,GAAGD,CAAC;EAC3B;EAEA,IAAWD,aAAa;IACpB,OAAO,IAAI,CAACE,cAAc;EAC9B;EAeA;;;EAGO,WAAWC,WAAW;IACzB,MAAMC,MAAM,GAAG1D,WAAW,CAAC2D,iBAAiB;IAC5C,IAAI,CAACD,MAAM,EAAE;MACT,OAAO,KAAK;;IAEhB,OAAOA,MAAM,CAACE,SAAS,CAACC,YAAY;EACxC;EAUA;;;EAGA,IAAWxD,KAAK;IACZ,OAAO,IAAI,CAACO,MAAM;EACtB;EAoGA;EAEA;;;;EAIOkD,YAAY;IACf,OAAO,wBAAwB;EACnC;EAEA;;;;EAIOC,OAAO,CAACC,gCAAyC,KAAK;IACzD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACrD,MAAM,CAACL,OAAO,CAAC2D,MAAM,EAAED,CAAC,EAAE,EAAE;MACjD,MAAME,MAAM,GAAG,IAAI,CAACvD,MAAM,CAACL,OAAO,CAAC0D,CAAC,CAAC;MAErC,IAAI,CAAC3C,yBAAyB,CAACyC,OAAO,CAACI,MAAM,CAAC;MAC9C,IAAI,CAAClC,gBAAgB,CAAC8B,OAAO,CAACI,MAAM,CAAC;MACrC,IAAI,CAAChC,iBAAiB,CAAC4B,OAAO,CAACI,MAAM,CAAC;MACtC,IAAI,CAAC9B,iBAAiB,CAAC0B,OAAO,CAACI,MAAM,CAAC;MACtC,IAAI,CAAC5B,uBAAuB,CAACwB,OAAO,CAACI,MAAM,CAAC;;IAGhD,IAAI,CAACC,cAAc,CAACL,OAAO,EAAE;IAE7B,IAAIC,6BAA6B,EAAE;MAC/B,IAAI,CAACpD,MAAM,CAACoD,6BAA6B,EAAE;;IAG/C,IAAI,CAACpD,MAAM,CAAC4B,gCAAgC,CAAC6B,+BAA+B,CAAC,IAAI,CAACC,KAAK,EAAE,IAAI,CAAC1D,MAAM,CAACL,OAAO,CAAC;IAE7G,KAAK,CAACwD,OAAO,EAAE;EACnB;EAEA;EACQnC,sBAAsB,CAACX,SAAiB,EAAEC,SAAiB,EAAET,WAAmB;IACpF,IAAI,CAAC8D,eAAe,GAAG,EAAE;IACzB,MAAMC,SAAS,GAAG,IAAI,CAAClB,aAAa;IAEpC,KAAK,IAAIW,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACzB,IAAI,CAACM,eAAe,CAACE,IAAI,CAACR,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;;IAG1C,IAAI,CAAC9B,iBAAiB,GAAG,IAAIxC,WAAW,CACpC,OAAO,EACP,OAAO,EACP,CAAC,SAAS,EAAE,gBAAgB,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,EACtD,CAAC,cAAc,CAAC,EAChBsB,SAAS,EACT,IAAI,EACJxB,OAAO,CAACiF,sBAAsB,EAC9B,IAAI,CAAC9D,MAAM,CAACF,SAAS,EAAE,EACvB,KAAK,EACL,0FAA0F,IAAI8D,SAAS,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,EAC3H/D,WAAW,CACd;IACD,IAAI,CAAC0B,iBAAiB,CAACwC,OAAO,GAAIC,MAAc,IAAI;MAChD,IAAI,CAAC,IAAI,CAAChE,MAAM,CAACiE,YAAY,EAAE;QAC3B;;MAGJD,MAAM,CAACE,QAAQ,CAAC,SAAS,EAAE,IAAI,CAACvC,uBAAuB,CAACwC,KAAK,GAAG,CAAC,GAAG,IAAI,CAACxC,uBAAuB,CAACwC,KAAK,GAAG,IAAI,CAACzD,yBAAyB,CAACyD,KAAK,CAAC;MAC9IH,MAAM,CAACE,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAClE,MAAM,CAACiE,YAAY,CAACG,IAAI,CAAC;MACtDJ,MAAM,CAACE,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAClE,MAAM,CAACiE,YAAY,CAACI,IAAI,CAAC;MACrDL,MAAM,CAACE,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAACI,MAAM,CAAC;MACtC,IAAI,IAAI,CAAC/B,uBAAuB,EAAE;QAC9ByB,MAAM,CAACO,UAAU,CAAC,cAAc,EAAE,IAAI,CAAChC,uBAAuB,CAACiC,UAAU,EAAE,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC;OAC3F,MAAM,IAAI,IAAI,CAACnC,gBAAgB,EAAE;QAC9B0B,MAAM,CAACO,UAAU,CAAC,cAAc,EAAE,IAAI,CAACjC,gBAAgB,CAACoC,eAAe,EAAE,CAACD,QAAQ,CAAC,IAAI,CAACnC,gBAAgB,CAACqC,QAAQ,CAAC;;MAEtHX,MAAM,CAACY,QAAQ,CAAC,gBAAgB,EAAE,IAAI,CAACjB,eAAe,CAAC;IAC3D,CAAC;IAED,IAAI,CAAClC,iBAAiB,GAAG,IAAI1C,WAAW,CACpC,OAAO,EACP,OAAO,EACP,CAAC,SAAS,EAAE,gBAAgB,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,EACtD,CAAC,cAAc,CAAC,EAChBuB,SAAS,EACT,IAAI,EACJzB,OAAO,CAACiF,sBAAsB,EAC9B,IAAI,CAAC9D,MAAM,CAACF,SAAS,EAAE,EACvB,KAAK,EACL,0FAA0F,IAAI8D,SAAS,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,EAC3H/D,WAAW,CACd;IACD,IAAI,CAAC4B,iBAAiB,CAACsC,OAAO,GAAIC,MAAc,IAAI;MAChD,IAAI,CAAC,IAAI,CAAChE,MAAM,CAACiE,YAAY,EAAE;QAC3B;;MAGJD,MAAM,CAACE,QAAQ,CAAC,SAAS,EAAE,IAAI,CAACvC,uBAAuB,CAACkD,MAAM,GAAG,CAAC,GAAG,IAAI,CAAClD,uBAAuB,CAACkD,MAAM,GAAG,IAAI,CAACnE,yBAAyB,CAACmE,MAAM,CAAC;MACjJb,MAAM,CAACE,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAClE,MAAM,CAACiE,YAAY,CAACG,IAAI,CAAC;MACtDJ,MAAM,CAACE,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAClE,MAAM,CAACiE,YAAY,CAACI,IAAI,CAAC;MACrDL,MAAM,CAACE,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAACI,MAAM,CAAC;MACtC,IAAI,IAAI,CAAC/B,uBAAuB,EAAE;QAC9ByB,MAAM,CAACO,UAAU,CAAC,cAAc,EAAE,IAAI,CAAChC,uBAAuB,CAACiC,UAAU,EAAE,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC;OAC3F,MAAM,IAAI,IAAI,CAACnC,gBAAgB,EAAE;QAC9B0B,MAAM,CAACO,UAAU,CAAC,cAAc,EAAE,IAAI,CAACjC,gBAAgB,CAACoC,eAAe,EAAE,CAACD,QAAQ,CAAC,IAAI,CAACnC,gBAAgB,CAACqC,QAAQ,CAAC;;MAEtHX,MAAM,CAACY,QAAQ,CAAC,gBAAgB,EAAE,IAAI,CAACjB,eAAe,CAAC;IAC3D,CAAC;IAED,IAAI,CAACpC,iBAAiB,CAACV,OAAO,GAAG,IAAI,CAACC,cAAc;IACpD,IAAI,CAACW,iBAAiB,CAACZ,OAAO,GAAG,IAAI,CAACC,cAAc;EACxD;EAEA;EACOgE,QAAQ;IACX,KAAK,CAACA,QAAQ,EAAE;EACpB;EAIA;EACQC,mBAAmB,CAAC1B,CAAS;IACjC,IAAI,CAAC2B,KAAK,CAAC,CAAC,CAAC,GAAG3B,CAAC;IACjB,IAAI,CAAC2B,KAAK,CAAC,CAAC,CAAC,GAAG,CAAE,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,GAAK,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,IAAI,EAAG,MAAM,CAAC;IACrE,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAI,CAAC,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,KAAK,CAAC,GAAM,CAAC,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,MAAM,CAAC,KAAM,CAAE;IAClG,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAI,CAAC,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,KAAK,CAAC,GAAM,CAAC,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,MAAM,CAAC,KAAM,CAAE;IAClG,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAI,CAAC,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,KAAK,CAAC,GAAM,CAAC,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,MAAM,CAAC,KAAM,CAAE;IAClG,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAI,CAAC,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,KAAK,CAAC,GAAM,CAAC,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,MAAM,CAAC,KAAM,CAAE;IAClG,OAAO,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAG,sBAAsB,CAAC,CAAC;EACnD;;EAEQC,WAAW,CAAC5B,CAAS,EAAEtB,CAAS;IACpC,OAAO,CAACsB,CAAC,GAAGtB,CAAC,EAAE,IAAI,CAACgD,mBAAmB,CAAC1B,CAAC,CAAC,CAAC;EAC/C;EAEQ6B,yBAAyB,CAACC,CAAS,EAAEC,CAAS;IAClD,MAAMC,GAAG,GAAGD,CAAC,GAAG,GAAG,GAAGE,IAAI,CAACC,EAAE;IAC7B;IACA,MAAMC,QAAQ,GAAG,GAAG,GAAGL,CAAC,GAAG,IAAI;IAC/B,MAAMM,QAAQ,GAAGH,IAAI,CAACI,IAAI,CAAC,GAAG,GAAGF,QAAQ,GAAGA,QAAQ,CAAC;IACrD,OAAO,IAAI9G,OAAO,CAAC4G,IAAI,CAACK,GAAG,CAACN,GAAG,CAAC,GAAGI,QAAQ,EAAEH,IAAI,CAACM,GAAG,CAACP,GAAG,CAAC,GAAGI,QAAQ,EAAED,QAAQ,CAAC;EACpF;EAEQpD,mBAAmB;IACvB,MAAMyD,UAAU,GAAG,IAAI,CAAChF,OAAO;IAC/B,MAAMiF,MAAM,GAAG,EAAE;IACjB,IAAIC,MAAM;IAEV,IAAI1C,CAAC,GAAG,CAAC;IACT,OAAOA,CAAC,GAAGwC,UAAU,EAAE;MACnB,IAAIA,UAAU,GAAG,EAAE,EAAE;QACjBE,MAAM,GAAG,IAAI,CAACb,yBAAyB,CAACI,IAAI,CAACU,MAAM,EAAE,EAAEV,IAAI,CAACU,MAAM,EAAE,CAAC;OACxE,MAAM;QACH,MAAMC,IAAI,GAAG,IAAI,CAAChB,WAAW,CAAC5B,CAAC,EAAEwC,UAAU,CAAC;QAC5CE,MAAM,GAAG,IAAI,CAACb,yBAAyB,CAACe,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;;MAG7DH,MAAM,CAACjC,IAAI,CAACkC,MAAM,CAACG,CAAC,EAAEH,MAAM,CAACI,CAAC,EAAEJ,MAAM,CAACK,CAAC,CAAC;MACzC/C,CAAC,EAAE;;IAGP,OAAOyC,MAAM;EACjB;EAEQ5D,kBAAkB;IACtB,MAAMmE,OAAO,GAAG,kBAAkB,GAAG,IAAI,CAACxF,OAAO,GAAG,gBAAgB;IAEpE,OAAOwF,OAAO;EAClB;EAMQtF,sBAAsB,CAACrB,KAAa,EAAEG,WAAmB;IAC7D,IAAI,CAACsC,aAAa,GAAG,IAAI,CAACC,mBAAmB,EAAE;IAE/C,MAAMiE,OAAO,GAAG,IAAI,CAACnE,kBAAkB,EAAE;IACzC,MAAMoE,QAAQ,GAAG,CAAC,eAAe,EAAE,cAAc,EAAE,eAAe,CAAC;IAEnE,IAAI,CAACjF,gBAAgB,GAAG,IAAItC,WAAW,CACnC,OAAO,EACP,OAAO,EACP,CACI,cAAc,EACd,eAAe,EACf,kBAAkB,EAClB,eAAe,EACf,QAAQ,EACR,MAAM,EACN,OAAO,EACP,YAAY,EACZ,MAAM,EACN,KAAK,EACL,WAAW,EACX,WAAW,EACX,WAAW,EACX,MAAM,EACN,YAAY,EACZ,iBAAiB,CACpB,EACDuH,QAAQ,EACR5G,KAAK,EACL,IAAI,EACJb,OAAO,CAAC8B,qBAAqB,EAC7B,IAAI,CAACX,MAAM,CAACF,SAAS,EAAE,EACvB,KAAK,EACLuG,OAAO,EACPxG,WAAW,CACd;IAED,IAAI,CAACwB,gBAAgB,CAAC0C,OAAO,GAAIC,MAAc,IAAI;;MAC/C,IAAI,CAAC,IAAI,CAAChE,MAAM,CAACiE,YAAY,EAAE;QAC3B;;MAGJD,MAAM,CAACuC,SAAS,CAAC,cAAc,EAAE,IAAI,CAACpE,aAAa,CAAC;MACpD6B,MAAM,CAACE,QAAQ,CAAC,kBAAkB,EAAE,IAAI,CAAC;MACzCF,MAAM,CAACE,QAAQ,CAAC,eAAe,EAAE,CAAC,GAAG,IAAI,CAACrD,OAAO,CAAC;MAClDmD,MAAM,CAACE,QAAQ,CAAC,eAAe,EAAE,IAAI,CAACsC,aAAa,CAAC;MACpDxC,MAAM,CAACyC,SAAS,CAAC,WAAW,EAAE,CAAC,GAAG,IAAI,CAACpF,gBAAgB,CAAC8C,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC9C,gBAAgB,CAACwD,MAAM,CAAC;MAChGb,MAAM,CAACE,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAACI,MAAM,CAAC;MACtCN,MAAM,CAACE,QAAQ,CAAC,MAAM,EAAE,IAAI,CAACG,IAAI,CAAC;MAClCL,MAAM,CAACE,QAAQ,CAAC,YAAY,EAAE,IAAI,CAACwC,UAAU,CAAC;MAC9C1C,MAAM,CAACE,QAAQ,CAAC,MAAM,EAAE,IAAI,CAACyC,IAAI,CAAC;MAClC3C,MAAM,CAACE,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAClE,MAAM,CAACiE,YAAY,CAACG,IAAI,CAAC;MACtDJ,MAAM,CAACE,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAClE,MAAM,CAACiE,YAAY,CAACI,IAAI,CAAC;MACrD,IAAI,IAAI,CAACrE,MAAM,CAACiE,YAAY,CAAC2C,IAAI,KAAKhI,MAAM,CAACiI,kBAAkB,EAAE;QAC7D7C,MAAM,CAAC8C,YAAY,CAAC,iBAAiB,EAAExH,sBAAsB,CAACyH,4BAA4B,CAAC;QAC3F/C,MAAM,CAACE,QAAQ,CAAC,WAAW,EAAEoB,IAAI,CAAC0B,GAAG,CAAC,IAAI,CAAChH,MAAM,CAACiE,YAAY,CAACgD,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAACjH,MAAM,CAACF,SAAS,EAAE,CAACoH,cAAc,CAAC,IAAI,CAAClH,MAAM,CAACiE,YAAY,EAAE,IAAI,CAAC,CAAC;QACjJD,MAAM,CAACE,QAAQ,CAAC,WAAW,EAAEoB,IAAI,CAAC0B,GAAG,CAAC,IAAI,CAAChH,MAAM,CAACiE,YAAY,CAACgD,GAAG,GAAG,CAAC,CAAC,CAAC;OAC3E,MAAM;QACH,MAAME,SAAS,GAAG,IAAI,CAACnH,MAAM,CAACF,SAAS,EAAE,CAACsH,cAAc,EAAE,GAAG,GAAG;QAChE,MAAMC,UAAU,GAAG,IAAI,CAACrH,MAAM,CAACF,SAAS,EAAE,CAACwH,eAAe,EAAE,GAAG,GAAG;QAClE,MAAMC,SAAS,GAAG,UAAI,CAACvH,MAAM,CAACiE,YAAY,CAACsD,SAAS,mCAAI,CAACJ,SAAS;QAClE,MAAMK,UAAU,GAAG,UAAI,CAACxH,MAAM,CAACiE,YAAY,CAACuD,UAAU,mCAAIL,SAAS;QACnE,MAAMM,WAAW,GAAG,UAAI,CAACzH,MAAM,CAACiE,YAAY,CAACwD,WAAW,mCAAI,CAACJ,UAAU;QACvE,MAAMK,QAAQ,GAAG,UAAI,CAAC1H,MAAM,CAACiE,YAAY,CAACyD,QAAQ,mCAAIL,UAAU;QAChErD,MAAM,CAAC8C,YAAY,CAAC,iBAAiB,EAAExH,sBAAsB,CAACqI,sBAAsB,CAAC;QACrF3D,MAAM,CAACE,QAAQ,CAAC,WAAW,EAAE,CAACsD,UAAU,GAAGD,SAAS,IAAI,GAAG,CAAC;QAC5DvD,MAAM,CAACE,QAAQ,CAAC,WAAW,EAAE,CAACwD,QAAQ,GAAGD,WAAW,IAAI,GAAG,CAAC;;MAEhEzD,MAAM,CAAC4D,SAAS,CAAC,YAAY,EAAE,IAAI,CAAC5H,MAAM,CAAC6H,mBAAmB,EAAE,CAAC;MAEjE,IAAI,IAAI,CAACtF,uBAAuB,EAAE;QAC9ByB,MAAM,CAACO,UAAU,CAAC,cAAc,EAAE,IAAI,CAAChC,uBAAuB,CAACiC,UAAU,EAAE,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACxFT,MAAM,CAACO,UAAU,CAAC,eAAe,EAAE,IAAI,CAAChC,uBAAuB,CAACiC,UAAU,EAAE,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC;OAC5F,MAAM,IAAI,IAAI,CAACnC,gBAAgB,EAAE;QAC9B0B,MAAM,CAACO,UAAU,CAAC,cAAc,EAAE,IAAI,CAACjC,gBAAgB,CAACoC,eAAe,EAAE,CAACD,QAAQ,CAAC,IAAI,CAACnC,gBAAgB,CAACqC,QAAQ,CAAC;QAClHX,MAAM,CAACO,UAAU,CAAC,eAAe,EAAE,IAAI,CAACjC,gBAAgB,CAACoC,eAAe,EAAE,CAACD,QAAQ,CAAC,IAAI,CAACnC,gBAAgB,CAACqC,QAAQ,CAAC;;MAEvHX,MAAM,CAACO,UAAU,CAAC,eAAe,EAAE,IAAI,CAACf,cAAc,CAAC;IAC3D,CAAC;IACD,IAAI,CAACnC,gBAAgB,CAACR,OAAO,GAAG,IAAI,CAACC,cAAc;IAEnD,IAAI,CAAC,IAAI,CAACZ,oBAAoB,EAAE;MAC5B,IAAI,CAACmB,gBAAgB,CAACyG,2BAA2B,GAAG,IAAIzI,kBAAkB,EAAE;;EAEpF;EAEQ4B,6BAA6B,CAACvB,KAAa,EAAEG,WAAmB;IACpE,IAAI,CAAC8B,uBAAuB,GAAG,IAAI5C,WAAW,CAC1C,aAAa,EACb,aAAa,EACb,EAAE,EACF,CAAC,eAAe,EAAE,UAAU,CAAC,EAC7BW,KAAK,EACL,IAAI,EACJb,OAAO,CAAC8B,qBAAqB,EAC7B,IAAI,CAACX,MAAM,CAACF,SAAS,EAAE,EACvB,KAAK,EACLc,SAAS,EACTf,WAAW,CACd;IAED,IAAI,CAAC8B,uBAAuB,CAACoC,OAAO,GAAIC,MAAc,IAAI;MACtD,MAAM+D,QAAQ,GAAG,IAAI,CAAC/H,MAAM,CAACiE,YAAa,CAAC8D,QAAQ;MACnD/D,MAAM,CAACgE,UAAU,CAAC,UAAU,EAAErJ,UAAU,CAACsJ,OAAO,CAAC,CAAC,CAAC,CAACC,cAAc,CAACH,QAAQ,CAAC7B,CAAC,EAAE6B,QAAQ,CAAC5B,CAAC,EAAE4B,QAAQ,CAAC5D,KAAK,EAAE4D,QAAQ,CAAClD,MAAM,CAAC,CAAC;MAC5Hb,MAAM,CAACmE,+BAA+B,CAAC,eAAe,EAAE,IAAI,CAACzH,yBAAyB,CAAC;IAC3F,CAAC;IACD,IAAI,CAACiB,uBAAuB,CAACd,OAAO,GAAG,IAAI,CAACC,cAAc;EAC9D;EAEQL,oBAAoB;IACxB,MAAM2H,IAAI,GAAG,GAAG;IAEhB,IAAI,CAAC5E,cAAc,GAAG,IAAI1E,cAAc,CAAC,mBAAmB,EAAEsJ,IAAI,EAAE,IAAI,CAACpI,MAAM,EAAE,KAAK,EAAEnB,OAAO,CAACiF,sBAAsB,CAAC;IACvH,IAAI,CAACN,cAAc,CAAC6E,KAAK,GAAGxJ,OAAO,CAACyJ,gBAAgB;IACpD,IAAI,CAAC9E,cAAc,CAAC+E,KAAK,GAAG1J,OAAO,CAACyJ,gBAAgB;IAEpD,MAAME,OAAO,GAAG,IAAI,CAAChF,cAAc,CAACiF,UAAU,EAAE;IAEhD,MAAMxC,IAAI,GAAG,CAACyC,GAAW,EAAEC,GAAW,KAAI;MACtC,OAAOrD,IAAI,CAACU,MAAM,EAAE,IAAI2C,GAAG,GAAGD,GAAG,CAAC,GAAGA,GAAG;IAC5C,CAAC;IAED,MAAME,UAAU,GAAGlK,OAAO,CAACmK,IAAI,EAAE;IAEjC,KAAK,IAAI3C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkC,IAAI,EAAElC,CAAC,EAAE,EAAE;MAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiC,IAAI,EAAEjC,CAAC,EAAE,EAAE;QAC3ByC,UAAU,CAAC1C,CAAC,GAAGD,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC;QAC7B2C,UAAU,CAACzC,CAAC,GAAGF,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC;QAC7B2C,UAAU,CAACxC,CAAC,GAAG,GAAG;QAElBwC,UAAU,CAACE,SAAS,EAAE;QAEtBF,UAAU,CAACG,YAAY,CAAC,GAAG,CAAC;QAC5BH,UAAU,CAAC1C,CAAC,GAAGZ,IAAI,CAAC0D,KAAK,CAACJ,UAAU,CAAC1C,CAAC,CAAC;QACvC0C,UAAU,CAACzC,CAAC,GAAGb,IAAI,CAAC0D,KAAK,CAACJ,UAAU,CAACzC,CAAC,CAAC;QAEvCqC,OAAO,CAACS,SAAS,GAAG,MAAM,GAAGL,UAAU,CAAC1C,CAAC,GAAG,IAAI,GAAG0C,UAAU,CAACzC,CAAC,GAAG,IAAI,GAAGyC,UAAU,CAACxC,CAAC,GAAG,GAAG;QAC3FoC,OAAO,CAACU,QAAQ,CAAChD,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;;IAIpC,IAAI,CAAC3C,cAAc,CAAC2F,MAAM,CAAC,KAAK,CAAC;EACrC;EAEA;;;;EAIO3K,SAAS;IACZ,MAAM4K,mBAAmB,GAAG3K,mBAAmB,CAAC4K,SAAS,CAAC,IAAI,CAAC;IAC/DD,mBAAmB,CAACE,UAAU,GAAG,wBAAwB;IAEzD,OAAOF,mBAAmB;EAC9B;EAEA;;;;;;;EAOO,OAAOG,KAAK,CAACC,MAAW,EAAE/J,KAAY,EAAEgK,OAAe;IAC1D,OAAOhL,mBAAmB,CAAC8K,KAAK,CAAC,MAAM,IAAIjK,sBAAsB,CAACkK,MAAM,CAAC9F,KAAK,EAAEjE,KAAK,EAAE+J,MAAM,CAACvJ,MAAM,CAAC,EAAEuJ,MAAM,EAAE/J,KAAK,EAAEgK,OAAO,CAAC;EAClI;;AAxKwBnK,6CAAsB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAEpDA,mDAA4B,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAjZlFoK,YADClL,SAAS,EAAE,6DACuB;AAMnCkL,YADClL,SAAS,EAAE,oDACgB;AAM5BkL,YADClL,SAAS,EAAE,0DACoB;AAGhCkL,YADClL,SAAS,CAAC,SAAS,CAAC,wDACQ;AAc7BkL,YADClL,SAAS,CAAC,gBAAgB,CAAC,+DACQ;AAqCpCkL,YADClL,SAAS,EAAE,sDACQ;AAapBkL,YADClL,SAAS,CAAC,eAAe,CAAC,8DACY;AAqBvCkL,YADClL,SAAS,EAAE,sDACgB;AAO5BkL,YADClL,SAAS,EAAE,oDACY;AA+c5BW,aAAa,CAAC,gCAAgC,EAAEG,sBAAsB,CAAC","names":["Logger","serialize","SerializationHelper","Vector3","TmpVectors","Camera","Texture","DynamicTexture","PostProcess","PostProcessRenderPipeline","PostProcessRenderEffect","PassPostProcess","RegisterClass","EngineStore","SSAO2Configuration","SSAO2RenderingPipeline","constructor","name","scene","ratio","cameras","forceGeometryBuffer","textureType","getEngine","Uint32Array","_scene","_ratio","_forceGeometryBuffer","isSupported","Error","ssaoRatio","blurRatio","enableGeometryBufferRenderer","enablePrePassRenderer","_createRandomTexture","_originalColorPostProcess","BILINEAR_SAMPLINGMODE","undefined","samples","textureSamples","_createSSAOPostProcess","_createBlurPostProcess","_createSSAOCombinePostProcess","addEffect","SSAOOriginalSceneColorEffect","SSAORenderEffect","_ssaoPostProcess","SSAOBlurHRenderEffect","_blurHPostProcess","SSAOBlurVRenderEffect","_blurVPostProcess","SSAOCombineRenderEffect","_ssaoCombinePostProcess","postProcessRenderPipelineManager","addPipeline","attachCamerasToRenderPipeline","n","_samples","updateEffect","_getDefinesForSSAO","_sampleSphere","_generateHemisphere","_textureSamples","_prePassRenderer","_geometryBufferRenderer","geometryBufferRenderer","prePassRenderer","expensiveBlur","b","_expensiveBlur","IsSupported","engine","LastCreatedEngine","_features","supportSSAO2","getClassName","dispose","disableGeometryBufferRenderer","i","length","camera","_randomTexture","detachCamerasFromRenderPipeline","_name","_samplerOffsets","expensive","push","TRILINEAR_SAMPLINGMODE","onApply","effect","activeCamera","setFloat","width","minZ","maxZ","radius","setTexture","getGBuffer","textures","getRenderTarget","getIndex","setArray","height","_rebuild","_radicalInverse_VdC","_bits","_hammersley","_hemisphereSample_uniform","u","v","phi","Math","PI","cosTheta","sinTheta","sqrt","cos","sin","numSamples","result","vector","random","rand","x","y","z","defines","samplers","setArray3","totalStrength","setFloat2","minZAspect","base","mode","PERSPECTIVE_CAMERA","setMatrix3x3","PERSPECTIVE_DEPTH_PROJECTION","tan","fov","getAspectRatio","halfWidth","getRenderWidth","halfHeight","getRenderHeight","orthoLeft","orthoRight","orthoBottom","orthoTop","ORTHO_DEPTH_PROJECTION","setMatrix","getProjectionMatrix","_prePassEffectConfiguration","viewport","setVector4","Vector4","copyFromFloats","setTextureFromPostProcessOutput","size","wrapU","WRAP_ADDRESSMODE","wrapV","context","getContext","min","max","randVector","Zero","normalize","scaleInPlace","floor","fillStyle","fillRect","update","serializationObject","Serialize","customType","Parse","source","rootUrl","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/PostProcesses/RenderPipeline/Pipelines/ssao2RenderingPipeline.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Logger } from \"../../../Misc/logger\";\r\nimport { serialize, SerializationHelper } from \"../../../Misc/decorators\";\r\nimport { Vector3, TmpVectors } from \"../../../Maths/math.vector\";\r\nimport { Camera } from \"../../../Cameras/camera\";\r\nimport type { Effect } from \"../../../Materials/effect\";\r\nimport { Texture } from \"../../../Materials/Textures/texture\";\r\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture\";\r\nimport { PostProcess } from \"../../../PostProcesses/postProcess\";\r\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\r\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect\";\r\nimport { PassPostProcess } from \"../../../PostProcesses/passPostProcess\";\r\nimport type { Scene } from \"../../../scene\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { EngineStore } from \"../../../Engines/engineStore\";\r\nimport { SSAO2Configuration } from \"../../../Rendering/ssao2Configuration\";\r\nimport type { PrePassRenderer } from \"../../../Rendering/prePassRenderer\";\r\nimport type { GeometryBufferRenderer } from \"../../../Rendering/geometryBufferRenderer\";\r\nimport { Constants } from \"../../../Engines/constants\";\r\nimport type { Nullable } from \"../../../types\";\r\n\r\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent\";\r\n\r\nimport \"../../../Shaders/ssao2.fragment\";\r\nimport \"../../../Shaders/ssaoCombine.fragment\";\r\n\r\n/**\r\n * Render pipeline to produce ssao effect\r\n */\r\nexport class SSAO2RenderingPipeline extends PostProcessRenderPipeline {\r\n    // Members\r\n\r\n    /**\r\n     * @ignore\r\n     * The PassPostProcess id in the pipeline that contains the original scene color\r\n     */\r\n    public SSAOOriginalSceneColorEffect: string = \"SSAOOriginalSceneColorEffect\";\r\n    /**\r\n     * @ignore\r\n     * The SSAO PostProcess id in the pipeline\r\n     */\r\n    public SSAORenderEffect: string = \"SSAORenderEffect\";\r\n    /**\r\n     * @ignore\r\n     * The horizontal blur PostProcess id in the pipeline\r\n     */\r\n    public SSAOBlurHRenderEffect: string = \"SSAOBlurHRenderEffect\";\r\n    /**\r\n     * @ignore\r\n     * The vertical blur PostProcess id in the pipeline\r\n     */\r\n    public SSAOBlurVRenderEffect: string = \"SSAOBlurVRenderEffect\";\r\n    /**\r\n     * @ignore\r\n     * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\r\n     */\r\n    public SSAOCombineRenderEffect: string = \"SSAOCombineRenderEffect\";\r\n\r\n    /**\r\n     * The output strength of the SSAO post-process. Default value is 1.0.\r\n     */\r\n    @serialize()\r\n    public totalStrength: number = 1.0;\r\n\r\n    /**\r\n     * Maximum depth value to still render AO. A smooth falloff makes the dimming more natural, so there will be no abrupt shading change.\r\n     */\r\n    @serialize()\r\n    public maxZ: number = 100.0;\r\n\r\n    /**\r\n     * In order to save performances, SSAO radius is clamped on close geometry. This ratio changes by how much\r\n     */\r\n    @serialize()\r\n    public minZAspect: number = 0.2;\r\n\r\n    @serialize(\"samples\")\r\n    private _samples: number = 8;\r\n    /**\r\n     * Number of samples used for the SSAO calculations. Default value is 8\r\n     */\r\n    public set samples(n: number) {\r\n        this._samples = n;\r\n        this._ssaoPostProcess.updateEffect(this._getDefinesForSSAO());\r\n        this._sampleSphere = this._generateHemisphere();\r\n    }\r\n    public get samples(): number {\r\n        return this._samples;\r\n    }\r\n\r\n    @serialize(\"textureSamples\")\r\n    private _textureSamples: number = 1;\r\n    /**\r\n     * Number of samples to use for antialiasing\r\n     */\r\n    public set textureSamples(n: number) {\r\n        this._textureSamples = n;\r\n\r\n        if (this._prePassRenderer) {\r\n            this._prePassRenderer.samples = n;\r\n        } else {\r\n            this._originalColorPostProcess.samples = n;\r\n        }\r\n    }\r\n    public get textureSamples(): number {\r\n        return this._textureSamples;\r\n    }\r\n\r\n    /**\r\n     * Force rendering the geometry through geometry buffer\r\n     */\r\n    private _forceGeometryBuffer: boolean = false;\r\n    private get _geometryBufferRenderer(): Nullable<GeometryBufferRenderer> {\r\n        if (!this._forceGeometryBuffer) {\r\n            return null;\r\n        }\r\n        return this._scene.geometryBufferRenderer;\r\n    }\r\n    private get _prePassRenderer(): Nullable<PrePassRenderer> {\r\n        if (this._forceGeometryBuffer) {\r\n            return null;\r\n        }\r\n        return this._scene.prePassRenderer;\r\n    }\r\n    /**\r\n     * Ratio object used for SSAO ratio and blur ratio\r\n     */\r\n    @serialize()\r\n    private _ratio: any;\r\n\r\n    /**\r\n     * Dynamically generated sphere sampler.\r\n     */\r\n    private _sampleSphere: number[];\r\n\r\n    /**\r\n     * Blur filter offsets\r\n     */\r\n    private _samplerOffsets: number[];\r\n\r\n    @serialize(\"expensiveBlur\")\r\n    private _expensiveBlur: boolean = true;\r\n    /**\r\n     * If bilateral blur should be used\r\n     */\r\n    public set expensiveBlur(b: boolean) {\r\n        this._blurHPostProcess.updateEffect(\"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_H\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (b ? \"1\" : \"0\") + \"\\n\", null, [\r\n            \"textureSampler\",\r\n            \"depthSampler\",\r\n        ]);\r\n        this._blurVPostProcess.updateEffect(\"#define BILATERAL_BLUR\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (b ? \"1\" : \"0\") + \"\\n\", null, [\"textureSampler\", \"depthSampler\"]);\r\n        this._expensiveBlur = b;\r\n    }\r\n\r\n    public get expensiveBlur(): boolean {\r\n        return this._expensiveBlur;\r\n    }\r\n\r\n    /**\r\n     * The radius around the analyzed pixel used by the SSAO post-process. Default value is 2.0\r\n     */\r\n    @serialize()\r\n    public radius: number = 2.0;\r\n\r\n    /**\r\n     * The base color of the SSAO post-process\r\n     * The final result is \"base + ssao\" between [0, 1]\r\n     */\r\n    @serialize()\r\n    public base: number = 0;\r\n\r\n    /**\r\n     *  Support test.\r\n     */\r\n    public static get IsSupported(): boolean {\r\n        const engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            return false;\r\n        }\r\n        return engine._features.supportSSAO2;\r\n    }\r\n\r\n    private _scene: Scene;\r\n    private _randomTexture: DynamicTexture;\r\n    private _originalColorPostProcess: PassPostProcess;\r\n    private _ssaoPostProcess: PostProcess;\r\n    private _blurHPostProcess: PostProcess;\r\n    private _blurVPostProcess: PostProcess;\r\n    private _ssaoCombinePostProcess: PostProcess;\r\n\r\n    /**\r\n     * Gets active scene\r\n     */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * @constructor\r\n     * @param name The rendering pipeline name\r\n     * @param scene The scene linked to this pipeline\r\n     * @param ratio The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, blurRatio: 1.0 }\r\n     * @param cameras The array of cameras that the rendering pipeline will be attached to\r\n     * @param forceGeometryBuffer Set to true if you want to use the legacy geometry buffer renderer\r\n     * @param textureType The texture type used by the different post processes created by SSAO (default: Constants.TEXTURETYPE_UNSIGNED_INT)\r\n     */\r\n    constructor(name: string, scene: Scene, ratio: any, cameras?: Camera[], forceGeometryBuffer = false, textureType = Constants.TEXTURETYPE_UNSIGNED_INT) {\r\n        super(scene.getEngine(), name);\r\n\r\n        this._scene = scene;\r\n        this._ratio = ratio;\r\n        this._forceGeometryBuffer = forceGeometryBuffer;\r\n\r\n        if (!this.isSupported) {\r\n            Logger.Error(\"The current engine does not support SSAO 2.\");\r\n            return;\r\n        }\r\n\r\n        const ssaoRatio = this._ratio.ssaoRatio || ratio;\r\n        const blurRatio = this._ratio.blurRatio || ratio;\r\n\r\n        // Set up assets\r\n        if (this._forceGeometryBuffer) {\r\n            scene.enableGeometryBufferRenderer();\r\n        } else {\r\n            scene.enablePrePassRenderer();\r\n        }\r\n\r\n        this._createRandomTexture();\r\n\r\n        this._originalColorPostProcess = new PassPostProcess(\"SSAOOriginalSceneColor\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), undefined, textureType);\r\n        this._originalColorPostProcess.samples = this.textureSamples;\r\n        this._createSSAOPostProcess(1.0, textureType);\r\n        this._createBlurPostProcess(ssaoRatio, blurRatio, textureType);\r\n        this._createSSAOCombinePostProcess(blurRatio, textureType);\r\n\r\n        // Set up pipeline\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOOriginalSceneColorEffect,\r\n                () => {\r\n                    return this._originalColorPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAORenderEffect,\r\n                () => {\r\n                    return this._ssaoPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOBlurHRenderEffect,\r\n                () => {\r\n                    return this._blurHPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOBlurVRenderEffect,\r\n                () => {\r\n                    return this._blurVPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOCombineRenderEffect,\r\n                () => {\r\n                    return this._ssaoCombinePostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n\r\n        // Finish\r\n        scene.postProcessRenderPipelineManager.addPipeline(this);\r\n        if (cameras) {\r\n            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\r\n        }\r\n    }\r\n\r\n    // Public Methods\r\n\r\n    /**\r\n     * Get the class name\r\n     * @returns \"SSAO2RenderingPipeline\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"SSAO2RenderingPipeline\";\r\n    }\r\n\r\n    /**\r\n     * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\r\n     * @param disableGeometryBufferRenderer\r\n     */\r\n    public dispose(disableGeometryBufferRenderer: boolean = false): void {\r\n        for (let i = 0; i < this._scene.cameras.length; i++) {\r\n            const camera = this._scene.cameras[i];\r\n\r\n            this._originalColorPostProcess.dispose(camera);\r\n            this._ssaoPostProcess.dispose(camera);\r\n            this._blurHPostProcess.dispose(camera);\r\n            this._blurVPostProcess.dispose(camera);\r\n            this._ssaoCombinePostProcess.dispose(camera);\r\n        }\r\n\r\n        this._randomTexture.dispose();\r\n\r\n        if (disableGeometryBufferRenderer) {\r\n            this._scene.disableGeometryBufferRenderer();\r\n        }\r\n\r\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    // Private Methods\r\n    private _createBlurPostProcess(ssaoRatio: number, blurRatio: number, textureType: number): void {\r\n        this._samplerOffsets = [];\r\n        const expensive = this.expensiveBlur;\r\n\r\n        for (let i = -8; i < 8; i++) {\r\n            this._samplerOffsets.push(i * 2 + 0.5);\r\n        }\r\n\r\n        this._blurHPostProcess = new PostProcess(\r\n            \"BlurH\",\r\n            \"ssao2\",\r\n            [\"outSize\", \"samplerOffsets\", \"near\", \"far\", \"radius\"],\r\n            [\"depthSampler\"],\r\n            ssaoRatio,\r\n            null,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            \"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_H\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (expensive ? \"1\" : \"0\") + \"\\n\",\r\n            textureType\r\n        );\r\n        this._blurHPostProcess.onApply = (effect: Effect) => {\r\n            if (!this._scene.activeCamera) {\r\n                return;\r\n            }\r\n\r\n            effect.setFloat(\"outSize\", this._ssaoCombinePostProcess.width > 0 ? this._ssaoCombinePostProcess.width : this._originalColorPostProcess.width);\r\n            effect.setFloat(\"near\", this._scene.activeCamera.minZ);\r\n            effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\r\n            effect.setFloat(\"radius\", this.radius);\r\n            if (this._geometryBufferRenderer) {\r\n                effect.setTexture(\"depthSampler\", this._geometryBufferRenderer.getGBuffer().textures[0]);\r\n            } else if (this._prePassRenderer) {\r\n                effect.setTexture(\"depthSampler\", this._prePassRenderer.getRenderTarget().textures[this._prePassRenderer.getIndex(Constants.PREPASS_DEPTH_TEXTURE_TYPE)]);\r\n            }\r\n            effect.setArray(\"samplerOffsets\", this._samplerOffsets);\r\n        };\r\n\r\n        this._blurVPostProcess = new PostProcess(\r\n            \"BlurV\",\r\n            \"ssao2\",\r\n            [\"outSize\", \"samplerOffsets\", \"near\", \"far\", \"radius\"],\r\n            [\"depthSampler\"],\r\n            blurRatio,\r\n            null,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            \"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_V\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (expensive ? \"1\" : \"0\") + \"\\n\",\r\n            textureType\r\n        );\r\n        this._blurVPostProcess.onApply = (effect: Effect) => {\r\n            if (!this._scene.activeCamera) {\r\n                return;\r\n            }\r\n\r\n            effect.setFloat(\"outSize\", this._ssaoCombinePostProcess.height > 0 ? this._ssaoCombinePostProcess.height : this._originalColorPostProcess.height);\r\n            effect.setFloat(\"near\", this._scene.activeCamera.minZ);\r\n            effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\r\n            effect.setFloat(\"radius\", this.radius);\r\n            if (this._geometryBufferRenderer) {\r\n                effect.setTexture(\"depthSampler\", this._geometryBufferRenderer.getGBuffer().textures[0]);\r\n            } else if (this._prePassRenderer) {\r\n                effect.setTexture(\"depthSampler\", this._prePassRenderer.getRenderTarget().textures[this._prePassRenderer.getIndex(Constants.PREPASS_DEPTH_TEXTURE_TYPE)]);\r\n            }\r\n            effect.setArray(\"samplerOffsets\", this._samplerOffsets);\r\n        };\r\n\r\n        this._blurHPostProcess.samples = this.textureSamples;\r\n        this._blurVPostProcess.samples = this.textureSamples;\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild() {\r\n        super._rebuild();\r\n    }\r\n\r\n    private _bits = new Uint32Array(1);\r\n\r\n    //Van der Corput radical inverse\r\n    private _radicalInverse_VdC(i: number) {\r\n        this._bits[0] = i;\r\n        this._bits[0] = ((this._bits[0] << 16) | (this._bits[0] >> 16)) >>> 0;\r\n        this._bits[0] = ((this._bits[0] & 0x55555555) << 1) | (((this._bits[0] & 0xaaaaaaaa) >>> 1) >>> 0);\r\n        this._bits[0] = ((this._bits[0] & 0x33333333) << 2) | (((this._bits[0] & 0xcccccccc) >>> 2) >>> 0);\r\n        this._bits[0] = ((this._bits[0] & 0x0f0f0f0f) << 4) | (((this._bits[0] & 0xf0f0f0f0) >>> 4) >>> 0);\r\n        this._bits[0] = ((this._bits[0] & 0x00ff00ff) << 8) | (((this._bits[0] & 0xff00ff00) >>> 8) >>> 0);\r\n        return this._bits[0] * 2.3283064365386963e-10; // / 0x100000000 or / 4294967296\r\n    }\r\n\r\n    private _hammersley(i: number, n: number) {\r\n        return [i / n, this._radicalInverse_VdC(i)];\r\n    }\r\n\r\n    private _hemisphereSample_uniform(u: number, v: number): Vector3 {\r\n        const phi = v * 2.0 * Math.PI;\r\n        // rejecting samples that are close to tangent plane to avoid z-fighting artifacts\r\n        const cosTheta = 1.0 - u * 0.85;\r\n        const sinTheta = Math.sqrt(1.0 - cosTheta * cosTheta);\r\n        return new Vector3(Math.cos(phi) * sinTheta, Math.sin(phi) * sinTheta, cosTheta);\r\n    }\r\n\r\n    private _generateHemisphere(): number[] {\r\n        const numSamples = this.samples;\r\n        const result = [];\r\n        let vector;\r\n\r\n        let i = 0;\r\n        while (i < numSamples) {\r\n            if (numSamples < 16) {\r\n                vector = this._hemisphereSample_uniform(Math.random(), Math.random());\r\n            } else {\r\n                const rand = this._hammersley(i, numSamples);\r\n                vector = this._hemisphereSample_uniform(rand[0], rand[1]);\r\n            }\r\n\r\n            result.push(vector.x, vector.y, vector.z);\r\n            i++;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private _getDefinesForSSAO() {\r\n        const defines = \"#define SAMPLES \" + this.samples + \"\\n#define SSAO\";\r\n\r\n        return defines;\r\n    }\r\n\r\n    private static readonly ORTHO_DEPTH_PROJECTION = [1, 0, 0, 0, 1, 0, 0, 0, 1];\r\n\r\n    private static readonly PERSPECTIVE_DEPTH_PROJECTION = [0, 0, 0, 0, 0, 0, 1, 1, 1];\r\n\r\n    private _createSSAOPostProcess(ratio: number, textureType: number): void {\r\n        this._sampleSphere = this._generateHemisphere();\r\n\r\n        const defines = this._getDefinesForSSAO();\r\n        const samplers = [\"randomSampler\", \"depthSampler\", \"normalSampler\"];\r\n\r\n        this._ssaoPostProcess = new PostProcess(\r\n            \"ssao2\",\r\n            \"ssao2\",\r\n            [\r\n                \"sampleSphere\",\r\n                \"samplesFactor\",\r\n                \"randTextureTiles\",\r\n                \"totalStrength\",\r\n                \"radius\",\r\n                \"base\",\r\n                \"range\",\r\n                \"projection\",\r\n                \"near\",\r\n                \"far\",\r\n                \"texelSize\",\r\n                \"xViewport\",\r\n                \"yViewport\",\r\n                \"maxZ\",\r\n                \"minZAspect\",\r\n                \"depthProjection\",\r\n            ],\r\n            samplers,\r\n            ratio,\r\n            null,\r\n            Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            defines,\r\n            textureType\r\n        );\r\n\r\n        this._ssaoPostProcess.onApply = (effect: Effect) => {\r\n            if (!this._scene.activeCamera) {\r\n                return;\r\n            }\r\n\r\n            effect.setArray3(\"sampleSphere\", this._sampleSphere);\r\n            effect.setFloat(\"randTextureTiles\", 32.0);\r\n            effect.setFloat(\"samplesFactor\", 1 / this.samples);\r\n            effect.setFloat(\"totalStrength\", this.totalStrength);\r\n            effect.setFloat2(\"texelSize\", 1 / this._ssaoPostProcess.width, 1 / this._ssaoPostProcess.height);\r\n            effect.setFloat(\"radius\", this.radius);\r\n            effect.setFloat(\"maxZ\", this.maxZ);\r\n            effect.setFloat(\"minZAspect\", this.minZAspect);\r\n            effect.setFloat(\"base\", this.base);\r\n            effect.setFloat(\"near\", this._scene.activeCamera.minZ);\r\n            effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\r\n            if (this._scene.activeCamera.mode === Camera.PERSPECTIVE_CAMERA) {\r\n                effect.setMatrix3x3(\"depthProjection\", SSAO2RenderingPipeline.PERSPECTIVE_DEPTH_PROJECTION);\r\n                effect.setFloat(\"xViewport\", Math.tan(this._scene.activeCamera.fov / 2) * this._scene.getEngine().getAspectRatio(this._scene.activeCamera, true));\r\n                effect.setFloat(\"yViewport\", Math.tan(this._scene.activeCamera.fov / 2));\r\n            } else {\r\n                const halfWidth = this._scene.getEngine().getRenderWidth() / 2.0;\r\n                const halfHeight = this._scene.getEngine().getRenderHeight() / 2.0;\r\n                const orthoLeft = this._scene.activeCamera.orthoLeft ?? -halfWidth;\r\n                const orthoRight = this._scene.activeCamera.orthoRight ?? halfWidth;\r\n                const orthoBottom = this._scene.activeCamera.orthoBottom ?? -halfHeight;\r\n                const orthoTop = this._scene.activeCamera.orthoTop ?? halfHeight;\r\n                effect.setMatrix3x3(\"depthProjection\", SSAO2RenderingPipeline.ORTHO_DEPTH_PROJECTION);\r\n                effect.setFloat(\"xViewport\", (orthoRight - orthoLeft) * 0.5);\r\n                effect.setFloat(\"yViewport\", (orthoTop - orthoBottom) * 0.5);\r\n            }\r\n            effect.setMatrix(\"projection\", this._scene.getProjectionMatrix());\r\n\r\n            if (this._geometryBufferRenderer) {\r\n                effect.setTexture(\"depthSampler\", this._geometryBufferRenderer.getGBuffer().textures[0]);\r\n                effect.setTexture(\"normalSampler\", this._geometryBufferRenderer.getGBuffer().textures[1]);\r\n            } else if (this._prePassRenderer) {\r\n                effect.setTexture(\"depthSampler\", this._prePassRenderer.getRenderTarget().textures[this._prePassRenderer.getIndex(Constants.PREPASS_DEPTH_TEXTURE_TYPE)]);\r\n                effect.setTexture(\"normalSampler\", this._prePassRenderer.getRenderTarget().textures[this._prePassRenderer.getIndex(Constants.PREPASS_NORMAL_TEXTURE_TYPE)]);\r\n            }\r\n            effect.setTexture(\"randomSampler\", this._randomTexture);\r\n        };\r\n        this._ssaoPostProcess.samples = this.textureSamples;\r\n\r\n        if (!this._forceGeometryBuffer) {\r\n            this._ssaoPostProcess._prePassEffectConfiguration = new SSAO2Configuration();\r\n        }\r\n    }\r\n\r\n    private _createSSAOCombinePostProcess(ratio: number, textureType: number): void {\r\n        this._ssaoCombinePostProcess = new PostProcess(\r\n            \"ssaoCombine\",\r\n            \"ssaoCombine\",\r\n            [],\r\n            [\"originalColor\", \"viewport\"],\r\n            ratio,\r\n            null,\r\n            Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            undefined,\r\n            textureType\r\n        );\r\n\r\n        this._ssaoCombinePostProcess.onApply = (effect: Effect) => {\r\n            const viewport = this._scene.activeCamera!.viewport;\r\n            effect.setVector4(\"viewport\", TmpVectors.Vector4[0].copyFromFloats(viewport.x, viewport.y, viewport.width, viewport.height));\r\n            effect.setTextureFromPostProcessOutput(\"originalColor\", this._originalColorPostProcess);\r\n        };\r\n        this._ssaoCombinePostProcess.samples = this.textureSamples;\r\n    }\r\n\r\n    private _createRandomTexture(): void {\r\n        const size = 128;\r\n\r\n        this._randomTexture = new DynamicTexture(\"SSAORandomTexture\", size, this._scene, false, Texture.TRILINEAR_SAMPLINGMODE);\r\n        this._randomTexture.wrapU = Texture.WRAP_ADDRESSMODE;\r\n        this._randomTexture.wrapV = Texture.WRAP_ADDRESSMODE;\r\n\r\n        const context = this._randomTexture.getContext();\r\n\r\n        const rand = (min: number, max: number) => {\r\n            return Math.random() * (max - min) + min;\r\n        };\r\n\r\n        const randVector = Vector3.Zero();\r\n\r\n        for (let x = 0; x < size; x++) {\r\n            for (let y = 0; y < size; y++) {\r\n                randVector.x = rand(0.0, 1.0);\r\n                randVector.y = rand(0.0, 1.0);\r\n                randVector.z = 0.0;\r\n\r\n                randVector.normalize();\r\n\r\n                randVector.scaleInPlace(255);\r\n                randVector.x = Math.floor(randVector.x);\r\n                randVector.y = Math.floor(randVector.y);\r\n\r\n                context.fillStyle = \"rgb(\" + randVector.x + \", \" + randVector.y + \", \" + randVector.z + \")\";\r\n                context.fillRect(x, y, 1, 1);\r\n            }\r\n        }\r\n\r\n        this._randomTexture.update(false);\r\n    }\r\n\r\n    /**\r\n     * Serialize the rendering pipeline (Used when exporting)\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"SSAO2RenderingPipeline\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse the serialized pipeline\r\n     * @param source Source pipeline.\r\n     * @param scene The scene to load the pipeline to.\r\n     * @param rootUrl The URL of the serialized pipeline.\r\n     * @returns An instantiated pipeline from the serialized object.\r\n     */\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): SSAO2RenderingPipeline {\r\n        return SerializationHelper.Parse(() => new SSAO2RenderingPipeline(source._name, scene, source._ratio), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.SSAO2RenderingPipeline\", SSAO2RenderingPipeline);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}