{"ast":null,"code":"/** @internal */\n// eslint-disable-next-line import/export\nexport var PredefinedColorSpace;\n(function (PredefinedColorSpace) {\n  PredefinedColorSpace[\"SRGB\"] = \"srgb\";\n})(PredefinedColorSpace || (PredefinedColorSpace = {}));\n/** @internal */\n// eslint-disable-next-line import/export\nexport var PowerPreference;\n(function (PowerPreference) {\n  PowerPreference[\"LowPower\"] = \"low-power\";\n  PowerPreference[\"HighPerformance\"] = \"high-performance\";\n})(PowerPreference || (PowerPreference = {}));\n/** @internal */\nexport var FeatureName;\n(function (FeatureName) {\n  FeatureName[\"DepthClipControl\"] = \"depth-clip-control\";\n  FeatureName[\"Depth24UnormStencil8\"] = \"depth24unorm-stencil8\";\n  FeatureName[\"Depth32FloatStencil8\"] = \"depth32float-stencil8\";\n  FeatureName[\"TextureCompressionBC\"] = \"texture-compression-bc\";\n  FeatureName[\"TextureCompressionETC2\"] = \"texture-compression-etc2\";\n  FeatureName[\"TextureCompressionASTC\"] = \"texture-compression-astc\";\n  FeatureName[\"TimestampQuery\"] = \"timestamp-query\";\n  FeatureName[\"IndirectFirstInstance\"] = \"indirect-first-instance\";\n  FeatureName[\"ShaderF16\"] = \"shader-f16\";\n  FeatureName[\"BGRA8UnormStorage\"] = \"bgra8unorm-storage\";\n})(FeatureName || (FeatureName = {}));\n/** @internal */\nexport var BufferUsage;\n(function (BufferUsage) {\n  BufferUsage[BufferUsage[\"MapRead\"] = 1] = \"MapRead\";\n  BufferUsage[BufferUsage[\"MapWrite\"] = 2] = \"MapWrite\";\n  BufferUsage[BufferUsage[\"CopySrc\"] = 4] = \"CopySrc\";\n  BufferUsage[BufferUsage[\"CopyDst\"] = 8] = \"CopyDst\";\n  BufferUsage[BufferUsage[\"Index\"] = 16] = \"Index\";\n  BufferUsage[BufferUsage[\"Vertex\"] = 32] = \"Vertex\";\n  BufferUsage[BufferUsage[\"Uniform\"] = 64] = \"Uniform\";\n  BufferUsage[BufferUsage[\"Storage\"] = 128] = \"Storage\";\n  BufferUsage[BufferUsage[\"Indirect\"] = 256] = \"Indirect\";\n  BufferUsage[BufferUsage[\"QueryResolve\"] = 512] = \"QueryResolve\";\n})(BufferUsage || (BufferUsage = {}));\n/** @internal */\nexport var MapMode;\n(function (MapMode) {\n  MapMode[MapMode[\"Read\"] = 1] = \"Read\";\n  MapMode[MapMode[\"Write\"] = 2] = \"Write\";\n})(MapMode || (MapMode = {}));\n/** @internal */\nexport var TextureDimension;\n(function (TextureDimension) {\n  TextureDimension[\"E1d\"] = \"1d\";\n  TextureDimension[\"E2d\"] = \"2d\";\n  TextureDimension[\"E3d\"] = \"3d\";\n})(TextureDimension || (TextureDimension = {}));\n/** @internal */\nexport var TextureUsage;\n(function (TextureUsage) {\n  TextureUsage[TextureUsage[\"CopySrc\"] = 1] = \"CopySrc\";\n  TextureUsage[TextureUsage[\"CopyDst\"] = 2] = \"CopyDst\";\n  TextureUsage[TextureUsage[\"TextureBinding\"] = 4] = \"TextureBinding\";\n  TextureUsage[TextureUsage[\"StorageBinding\"] = 8] = \"StorageBinding\";\n  TextureUsage[TextureUsage[\"RenderAttachment\"] = 16] = \"RenderAttachment\";\n})(TextureUsage || (TextureUsage = {}));\n/** @internal */\nexport var TextureViewDimension;\n(function (TextureViewDimension) {\n  TextureViewDimension[\"E1d\"] = \"1d\";\n  TextureViewDimension[\"E2d\"] = \"2d\";\n  TextureViewDimension[\"E2dArray\"] = \"2d-array\";\n  TextureViewDimension[\"Cube\"] = \"cube\";\n  TextureViewDimension[\"CubeArray\"] = \"cube-array\";\n  TextureViewDimension[\"E3d\"] = \"3d\";\n})(TextureViewDimension || (TextureViewDimension = {}));\n/** @internal */\nexport var TextureAspect;\n(function (TextureAspect) {\n  TextureAspect[\"All\"] = \"all\";\n  TextureAspect[\"StencilOnly\"] = \"stencil-only\";\n  TextureAspect[\"DepthOnly\"] = \"depth-only\";\n})(TextureAspect || (TextureAspect = {}));\n/**\n * Comments taken from https://github.com/gfx-rs/wgpu/blob/master/wgpu-types/src/lib.rs\n * @internal\n */\nexport var TextureFormat;\n(function (TextureFormat) {\n  // 8-bit formats\n  TextureFormat[\"R8Unorm\"] = \"r8unorm\";\n  TextureFormat[\"R8Snorm\"] = \"r8snorm\";\n  TextureFormat[\"R8Uint\"] = \"r8uint\";\n  TextureFormat[\"R8Sint\"] = \"r8sint\";\n  // 16-bit formats\n  TextureFormat[\"R16Uint\"] = \"r16uint\";\n  TextureFormat[\"R16Sint\"] = \"r16sint\";\n  TextureFormat[\"R16Float\"] = \"r16float\";\n  TextureFormat[\"RG8Unorm\"] = \"rg8unorm\";\n  TextureFormat[\"RG8Snorm\"] = \"rg8snorm\";\n  TextureFormat[\"RG8Uint\"] = \"rg8uint\";\n  TextureFormat[\"RG8Sint\"] = \"rg8sint\";\n  // 32-bit formats\n  TextureFormat[\"R32Uint\"] = \"r32uint\";\n  TextureFormat[\"R32Sint\"] = \"r32sint\";\n  TextureFormat[\"R32Float\"] = \"r32float\";\n  TextureFormat[\"RG16Uint\"] = \"rg16uint\";\n  TextureFormat[\"RG16Sint\"] = \"rg16sint\";\n  TextureFormat[\"RG16Float\"] = \"rg16float\";\n  TextureFormat[\"RGBA8Unorm\"] = \"rgba8unorm\";\n  TextureFormat[\"RGBA8UnormSRGB\"] = \"rgba8unorm-srgb\";\n  TextureFormat[\"RGBA8Snorm\"] = \"rgba8snorm\";\n  TextureFormat[\"RGBA8Uint\"] = \"rgba8uint\";\n  TextureFormat[\"RGBA8Sint\"] = \"rgba8sint\";\n  TextureFormat[\"BGRA8Unorm\"] = \"bgra8unorm\";\n  TextureFormat[\"BGRA8UnormSRGB\"] = \"bgra8unorm-srgb\";\n  // Packed 32-bit formats\n  TextureFormat[\"RGB9E5UFloat\"] = \"rgb9e5ufloat\";\n  TextureFormat[\"RGB10A2Unorm\"] = \"rgb10a2unorm\";\n  TextureFormat[\"RG11B10UFloat\"] = \"rg11b10ufloat\";\n  // 64-bit formats\n  TextureFormat[\"RG32Uint\"] = \"rg32uint\";\n  TextureFormat[\"RG32Sint\"] = \"rg32sint\";\n  TextureFormat[\"RG32Float\"] = \"rg32float\";\n  TextureFormat[\"RGBA16Uint\"] = \"rgba16uint\";\n  TextureFormat[\"RGBA16Sint\"] = \"rgba16sint\";\n  TextureFormat[\"RGBA16Float\"] = \"rgba16float\";\n  // 128-bit formats\n  TextureFormat[\"RGBA32Uint\"] = \"rgba32uint\";\n  TextureFormat[\"RGBA32Sint\"] = \"rgba32sint\";\n  TextureFormat[\"RGBA32Float\"] = \"rgba32float\";\n  // Depth and stencil formats\n  TextureFormat[\"Stencil8\"] = \"stencil8\";\n  TextureFormat[\"Depth16Unorm\"] = \"depth16unorm\";\n  TextureFormat[\"Depth24Plus\"] = \"depth24plus\";\n  TextureFormat[\"Depth24PlusStencil8\"] = \"depth24plus-stencil8\";\n  TextureFormat[\"Depth32Float\"] = \"depth32float\";\n  // BC compressed formats usable if \"texture-compression-bc\" is both\n  // supported by the device/user agent and enabled in requestDevice.\n  TextureFormat[\"BC1RGBAUnorm\"] = \"bc1-rgba-unorm\";\n  TextureFormat[\"BC1RGBAUnormSRGB\"] = \"bc1-rgba-unorm-srgb\";\n  TextureFormat[\"BC2RGBAUnorm\"] = \"bc2-rgba-unorm\";\n  TextureFormat[\"BC2RGBAUnormSRGB\"] = \"bc2-rgba-unorm-srgb\";\n  TextureFormat[\"BC3RGBAUnorm\"] = \"bc3-rgba-unorm\";\n  TextureFormat[\"BC3RGBAUnormSRGB\"] = \"bc3-rgba-unorm-srgb\";\n  TextureFormat[\"BC4RUnorm\"] = \"bc4-r-unorm\";\n  TextureFormat[\"BC4RSnorm\"] = \"bc4-r-snorm\";\n  TextureFormat[\"BC5RGUnorm\"] = \"bc5-rg-unorm\";\n  TextureFormat[\"BC5RGSnorm\"] = \"bc5-rg-snorm\";\n  TextureFormat[\"BC6HRGBUFloat\"] = \"bc6h-rgb-ufloat\";\n  TextureFormat[\"BC6HRGBFloat\"] = \"bc6h-rgb-float\";\n  TextureFormat[\"BC7RGBAUnorm\"] = \"bc7-rgba-unorm\";\n  TextureFormat[\"BC7RGBAUnormSRGB\"] = \"bc7-rgba-unorm-srgb\";\n  // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\n  // supported by the device/user agent and enabled in requestDevice.\n  TextureFormat[\"ETC2RGB8Unorm\"] = \"etc2-rgb8unorm\";\n  TextureFormat[\"ETC2RGB8UnormSRGB\"] = \"etc2-rgb8unorm-srgb\";\n  TextureFormat[\"ETC2RGB8A1Unorm\"] = \"etc2-rgb8a1unorm\";\n  TextureFormat[\"ETC2RGB8A1UnormSRGB\"] = \"etc2-rgb8a1unorm-srgb\";\n  TextureFormat[\"ETC2RGBA8Unorm\"] = \"etc2-rgba8unorm\";\n  TextureFormat[\"ETC2RGBA8UnormSRGB\"] = \"etc2-rgba8unorm-srgb\";\n  TextureFormat[\"EACR11Unorm\"] = \"eac-r11unorm\";\n  TextureFormat[\"EACR11Snorm\"] = \"eac-r11snorm\";\n  TextureFormat[\"EACRG11Unorm\"] = \"eac-rg11unorm\";\n  TextureFormat[\"EACRG11Snorm\"] = \"eac-rg11snorm\";\n  // ASTC compressed formats usable if \"texture-compression-astc\" is both\n  // supported by the device/user agent and enabled in requestDevice.\n  TextureFormat[\"ASTC4x4Unorm\"] = \"astc-4x4-unorm\";\n  TextureFormat[\"ASTC4x4UnormSRGB\"] = \"astc-4x4-unorm-srgb\";\n  TextureFormat[\"ASTC5x4Unorm\"] = \"astc-5x4-unorm\";\n  TextureFormat[\"ASTC5x4UnormSRGB\"] = \"astc-5x4-unorm-srgb\";\n  TextureFormat[\"ASTC5x5Unorm\"] = \"astc-5x5-unorm\";\n  TextureFormat[\"ASTC5x5UnormSRGB\"] = \"astc-5x5-unorm-srgb\";\n  TextureFormat[\"ASTC6x5Unorm\"] = \"astc-6x5-unorm\";\n  TextureFormat[\"ASTC6x5UnormSRGB\"] = \"astc-6x5-unorm-srgb\";\n  TextureFormat[\"ASTC6x6Unorm\"] = \"astc-6x6-unorm\";\n  TextureFormat[\"ASTC6x6UnormSRGB\"] = \"astc-6x6-unorm-srgb\";\n  TextureFormat[\"ASTC8x5Unorm\"] = \"astc-8x5-unorm\";\n  TextureFormat[\"ASTC8x5UnormSRGB\"] = \"astc-8x5-unorm-srgb\";\n  TextureFormat[\"ASTC8x6Unorm\"] = \"astc-8x6-unorm\";\n  TextureFormat[\"ASTC8x6UnormSRGB\"] = \"astc-8x6-unorm-srgb\";\n  TextureFormat[\"ASTC8x8Unorm\"] = \"astc-8x8-unorm\";\n  TextureFormat[\"ASTC8x8UnormSRGB\"] = \"astc-8x8-unorm-srgb\";\n  TextureFormat[\"ASTC10x5Unorm\"] = \"astc-10x5-unorm\";\n  TextureFormat[\"ASTC10x5UnormSRGB\"] = \"astc-10x5-unorm-srgb\";\n  TextureFormat[\"ASTC10x6Unorm\"] = \"astc-10x6-unorm\";\n  TextureFormat[\"ASTC10x6UnormSRGB\"] = \"astc-10x6-unorm-srgb\";\n  TextureFormat[\"ASTC10x8Unorm\"] = \"astc-10x8-unorm\";\n  TextureFormat[\"ASTC10x8UnormSRGB\"] = \"astc-10x8-unorm-srgb\";\n  TextureFormat[\"ASTC10x10Unorm\"] = \"astc-10x10-unorm\";\n  TextureFormat[\"ASTC10x10UnormSRGB\"] = \"astc-10x10-unorm-srgb\";\n  TextureFormat[\"ASTC12x10Unorm\"] = \"astc-12x10-unorm\";\n  TextureFormat[\"ASTC12x10UnormSRGB\"] = \"astc-12x10-unorm-srgb\";\n  TextureFormat[\"ASTC12x12Unorm\"] = \"astc-12x12-unorm\";\n  TextureFormat[\"ASTC12x12UnormSRGB\"] = \"astc-12x12-unorm-srgb\";\n  // \"depth24unorm-stencil8\" feature\n  TextureFormat[\"Depth24UnormStencil8\"] = \"depth24unorm-stencil8\";\n  // \"depth32float-stencil8\" feature\n  TextureFormat[\"Depth32FloatStencil8\"] = \"depth32float-stencil8\";\n})(TextureFormat || (TextureFormat = {}));\n/** @internal */\nexport var AddressMode;\n(function (AddressMode) {\n  AddressMode[\"ClampToEdge\"] = \"clamp-to-edge\";\n  AddressMode[\"Repeat\"] = \"repeat\";\n  AddressMode[\"MirrorRepeat\"] = \"mirror-repeat\";\n})(AddressMode || (AddressMode = {}));\n/** @internal */\nexport var FilterMode;\n(function (FilterMode) {\n  FilterMode[\"Nearest\"] = \"nearest\";\n  FilterMode[\"Linear\"] = \"linear\";\n})(FilterMode || (FilterMode = {}));\n/** @internal */\nexport var CompareFunction;\n(function (CompareFunction) {\n  CompareFunction[\"Never\"] = \"never\";\n  CompareFunction[\"Less\"] = \"less\";\n  CompareFunction[\"Equal\"] = \"equal\";\n  CompareFunction[\"LessEqual\"] = \"less-equal\";\n  CompareFunction[\"Greater\"] = \"greater\";\n  CompareFunction[\"NotEqual\"] = \"not-equal\";\n  CompareFunction[\"GreaterEqual\"] = \"greater-equal\";\n  CompareFunction[\"Always\"] = \"always\";\n})(CompareFunction || (CompareFunction = {}));\n/** @internal */\nexport var ShaderStage;\n(function (ShaderStage) {\n  ShaderStage[ShaderStage[\"Vertex\"] = 1] = \"Vertex\";\n  ShaderStage[ShaderStage[\"Fragment\"] = 2] = \"Fragment\";\n  ShaderStage[ShaderStage[\"Compute\"] = 4] = \"Compute\";\n})(ShaderStage || (ShaderStage = {}));\n/** @internal */\nexport var BufferBindingType;\n(function (BufferBindingType) {\n  BufferBindingType[\"Uniform\"] = \"uniform\";\n  BufferBindingType[\"Storage\"] = \"storage\";\n  BufferBindingType[\"ReadOnlyStorage\"] = \"read-only-storage\";\n})(BufferBindingType || (BufferBindingType = {}));\n/** @internal */\nexport var SamplerBindingType;\n(function (SamplerBindingType) {\n  SamplerBindingType[\"Filtering\"] = \"filtering\";\n  SamplerBindingType[\"NonFiltering\"] = \"non-filtering\";\n  SamplerBindingType[\"Comparison\"] = \"comparison\";\n})(SamplerBindingType || (SamplerBindingType = {}));\n/** @internal */\nexport var TextureSampleType;\n(function (TextureSampleType) {\n  TextureSampleType[\"Float\"] = \"float\";\n  TextureSampleType[\"UnfilterableFloat\"] = \"unfilterable-float\";\n  TextureSampleType[\"Depth\"] = \"depth\";\n  TextureSampleType[\"Sint\"] = \"sint\";\n  TextureSampleType[\"Uint\"] = \"uint\";\n})(TextureSampleType || (TextureSampleType = {}));\n/** @internal */\nexport var StorageTextureAccess;\n(function (StorageTextureAccess) {\n  StorageTextureAccess[\"WriteOnly\"] = \"write-only\";\n})(StorageTextureAccess || (StorageTextureAccess = {}));\n/** @internal */\nexport var CompilationMessageType;\n(function (CompilationMessageType) {\n  CompilationMessageType[\"Error\"] = \"error\";\n  CompilationMessageType[\"Warning\"] = \"warning\";\n  CompilationMessageType[\"Info\"] = \"info\";\n})(CompilationMessageType || (CompilationMessageType = {}));\n/** @internal */\nexport var AutoLayoutMode;\n(function (AutoLayoutMode) {\n  AutoLayoutMode[\"Auto\"] = \"auto\";\n})(AutoLayoutMode || (AutoLayoutMode = {}));\n/** @internal */\nexport var PrimitiveTopology;\n(function (PrimitiveTopology) {\n  PrimitiveTopology[\"PointList\"] = \"point-list\";\n  PrimitiveTopology[\"LineList\"] = \"line-list\";\n  PrimitiveTopology[\"LineStrip\"] = \"line-strip\";\n  PrimitiveTopology[\"TriangleList\"] = \"triangle-list\";\n  PrimitiveTopology[\"TriangleStrip\"] = \"triangle-strip\";\n})(PrimitiveTopology || (PrimitiveTopology = {}));\n/** @internal */\nexport var FrontFace;\n(function (FrontFace) {\n  FrontFace[\"CCW\"] = \"ccw\";\n  FrontFace[\"CW\"] = \"cw\";\n})(FrontFace || (FrontFace = {}));\n/** @internal */\nexport var CullMode;\n(function (CullMode) {\n  CullMode[\"None\"] = \"none\";\n  CullMode[\"Front\"] = \"front\";\n  CullMode[\"Back\"] = \"back\";\n})(CullMode || (CullMode = {}));\n/** @internal */\nexport var ColorWriteFlags;\n(function (ColorWriteFlags) {\n  ColorWriteFlags[ColorWriteFlags[\"Red\"] = 1] = \"Red\";\n  ColorWriteFlags[ColorWriteFlags[\"Green\"] = 2] = \"Green\";\n  ColorWriteFlags[ColorWriteFlags[\"Blue\"] = 4] = \"Blue\";\n  ColorWriteFlags[ColorWriteFlags[\"Alpha\"] = 8] = \"Alpha\";\n  ColorWriteFlags[ColorWriteFlags[\"All\"] = 15] = \"All\";\n})(ColorWriteFlags || (ColorWriteFlags = {}));\n/** @internal */\nexport var BlendFactor;\n(function (BlendFactor) {\n  BlendFactor[\"Zero\"] = \"zero\";\n  BlendFactor[\"One\"] = \"one\";\n  BlendFactor[\"Src\"] = \"src\";\n  BlendFactor[\"OneMinusSrc\"] = \"one-minus-src\";\n  BlendFactor[\"SrcAlpha\"] = \"src-alpha\";\n  BlendFactor[\"OneMinusSrcAlpha\"] = \"one-minus-src-alpha\";\n  BlendFactor[\"Dst\"] = \"dst\";\n  BlendFactor[\"OneMinusDst\"] = \"one-minus-dst\";\n  BlendFactor[\"DstAlpha\"] = \"dst-alpha\";\n  BlendFactor[\"OneMinusDstAlpha\"] = \"one-minus-dst-alpha\";\n  BlendFactor[\"SrcAlphaSaturated\"] = \"src-alpha-saturated\";\n  BlendFactor[\"Constant\"] = \"constant\";\n  BlendFactor[\"OneMinusConstant\"] = \"one-minus-constant\";\n})(BlendFactor || (BlendFactor = {}));\n/** @internal */\nexport var BlendOperation;\n(function (BlendOperation) {\n  BlendOperation[\"Add\"] = \"add\";\n  BlendOperation[\"Subtract\"] = \"subtract\";\n  BlendOperation[\"ReverseSubtract\"] = \"reverse-subtract\";\n  BlendOperation[\"Min\"] = \"min\";\n  BlendOperation[\"Max\"] = \"max\";\n})(BlendOperation || (BlendOperation = {}));\n/** @internal */\nexport var StencilOperation;\n(function (StencilOperation) {\n  StencilOperation[\"Keep\"] = \"keep\";\n  StencilOperation[\"Zero\"] = \"zero\";\n  StencilOperation[\"Replace\"] = \"replace\";\n  StencilOperation[\"Invert\"] = \"invert\";\n  StencilOperation[\"IncrementClamp\"] = \"increment-clamp\";\n  StencilOperation[\"DecrementClamp\"] = \"decrement-clamp\";\n  StencilOperation[\"IncrementWrap\"] = \"increment-wrap\";\n  StencilOperation[\"DecrementWrap\"] = \"decrement-wrap\";\n})(StencilOperation || (StencilOperation = {}));\n/** @internal */\nexport var IndexFormat;\n(function (IndexFormat) {\n  IndexFormat[\"Uint16\"] = \"uint16\";\n  IndexFormat[\"Uint32\"] = \"uint32\";\n})(IndexFormat || (IndexFormat = {}));\n/** @internal */\nexport var VertexFormat;\n(function (VertexFormat) {\n  VertexFormat[\"Uint8x2\"] = \"uint8x2\";\n  VertexFormat[\"Uint8x4\"] = \"uint8x4\";\n  VertexFormat[\"Sint8x2\"] = \"sint8x2\";\n  VertexFormat[\"Sint8x4\"] = \"sint8x4\";\n  VertexFormat[\"Unorm8x2\"] = \"unorm8x2\";\n  VertexFormat[\"Unorm8x4\"] = \"unorm8x4\";\n  VertexFormat[\"Snorm8x2\"] = \"snorm8x2\";\n  VertexFormat[\"Snorm8x4\"] = \"snorm8x4\";\n  VertexFormat[\"Uint16x2\"] = \"uint16x2\";\n  VertexFormat[\"Uint16x4\"] = \"uint16x4\";\n  VertexFormat[\"Sint16x2\"] = \"sint16x2\";\n  VertexFormat[\"Sint16x4\"] = \"sint16x4\";\n  VertexFormat[\"Unorm16x2\"] = \"unorm16x2\";\n  VertexFormat[\"Unorm16x4\"] = \"unorm16x4\";\n  VertexFormat[\"Snorm16x2\"] = \"snorm16x2\";\n  VertexFormat[\"Snorm16x4\"] = \"snorm16x4\";\n  VertexFormat[\"Float16x2\"] = \"float16x2\";\n  VertexFormat[\"Float16x4\"] = \"float16x4\";\n  VertexFormat[\"Float32\"] = \"float32\";\n  VertexFormat[\"Float32x2\"] = \"float32x2\";\n  VertexFormat[\"Float32x3\"] = \"float32x3\";\n  VertexFormat[\"Float32x4\"] = \"float32x4\";\n  VertexFormat[\"Uint32\"] = \"uint32\";\n  VertexFormat[\"Uint32x2\"] = \"uint32x2\";\n  VertexFormat[\"Uint32x3\"] = \"uint32x3\";\n  VertexFormat[\"Uint32x4\"] = \"uint32x4\";\n  VertexFormat[\"Sint32\"] = \"sint32\";\n  VertexFormat[\"Sint32x2\"] = \"sint32x2\";\n  VertexFormat[\"Sint32x3\"] = \"sint32x3\";\n  VertexFormat[\"Sint32x4\"] = \"sint32x4\";\n})(VertexFormat || (VertexFormat = {}));\n/** @internal */\nexport var InputStepMode;\n(function (InputStepMode) {\n  InputStepMode[\"Vertex\"] = \"vertex\";\n  InputStepMode[\"Instance\"] = \"instance\";\n})(InputStepMode || (InputStepMode = {}));\n/** @internal */\nexport var ComputePassTimestampLocation;\n(function (ComputePassTimestampLocation) {\n  ComputePassTimestampLocation[\"Beginning\"] = \"beginning\";\n  ComputePassTimestampLocation[\"End\"] = \"end\";\n})(ComputePassTimestampLocation || (ComputePassTimestampLocation = {}));\n/** @internal */\nexport var RenderPassTimestampLocation;\n(function (RenderPassTimestampLocation) {\n  RenderPassTimestampLocation[\"Beginning\"] = \"beginning\";\n  RenderPassTimestampLocation[\"End\"] = \"end\";\n})(RenderPassTimestampLocation || (RenderPassTimestampLocation = {}));\n/** @internal */\nexport var LoadOp;\n(function (LoadOp) {\n  LoadOp[\"Load\"] = \"load\";\n  LoadOp[\"Clear\"] = \"clear\";\n})(LoadOp || (LoadOp = {}));\n/** @internal */\nexport var StoreOp;\n(function (StoreOp) {\n  StoreOp[\"Store\"] = \"store\";\n  StoreOp[\"Discard\"] = \"discard\";\n})(StoreOp || (StoreOp = {}));\n/** @internal */\nexport var QueryType;\n(function (QueryType) {\n  QueryType[\"Occlusion\"] = \"occlusion\";\n  QueryType[\"Timestamp\"] = \"timestamp\";\n})(QueryType || (QueryType = {}));\n/** @internal */\nexport var CanvasAlphaMode;\n(function (CanvasAlphaMode) {\n  CanvasAlphaMode[\"Opaque\"] = \"opaque\";\n  CanvasAlphaMode[\"Premultiplied\"] = \"premultiplied\";\n})(CanvasAlphaMode || (CanvasAlphaMode = {}));\n/** @internal */\nexport var DeviceLostReason;\n(function (DeviceLostReason) {\n  DeviceLostReason[\"Destroyed\"] = \"destroyed\";\n})(DeviceLostReason || (DeviceLostReason = {}));\n/** @internal */\nexport var ErrorFilter;\n(function (ErrorFilter) {\n  ErrorFilter[\"OutOfMemory\"] = \"out-of-memory\";\n  ErrorFilter[\"Validation\"] = \"validation\";\n})(ErrorFilter || (ErrorFilter = {}));","map":{"version":3,"mappings":"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","names":["PredefinedColorSpace","PowerPreference","FeatureName","BufferUsage","MapMode","TextureDimension","TextureUsage","TextureViewDimension","TextureAspect","TextureFormat","AddressMode","FilterMode","CompareFunction","ShaderStage","BufferBindingType","SamplerBindingType","TextureSampleType","StorageTextureAccess","CompilationMessageType","AutoLayoutMode","PrimitiveTopology","FrontFace","CullMode","ColorWriteFlags","BlendFactor","BlendOperation","StencilOperation","IndexFormat","VertexFormat","InputStepMode","ComputePassTimestampLocation","RenderPassTimestampLocation","LoadOp","StoreOp","QueryType","CanvasAlphaMode","DeviceLostReason","ErrorFilter"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/WebGPU/webgpuConstants.ts"],"sourcesContent":["/** @internal */\r\n// eslint-disable-next-line import/export\r\nexport enum PredefinedColorSpace {\r\n    SRGB = \"srgb\",\r\n}\r\n\r\n/** @internal */\r\n// eslint-disable-next-line import/export\r\nexport enum PowerPreference {\r\n    LowPower = \"low-power\",\r\n    HighPerformance = \"high-performance\",\r\n}\r\n\r\n/** @internal */\r\nexport enum FeatureName {\r\n    DepthClipControl = \"depth-clip-control\",\r\n    Depth24UnormStencil8 = \"depth24unorm-stencil8\",\r\n    Depth32FloatStencil8 = \"depth32float-stencil8\",\r\n    TextureCompressionBC = \"texture-compression-bc\",\r\n    TextureCompressionETC2 = \"texture-compression-etc2\",\r\n    TextureCompressionASTC = \"texture-compression-astc\",\r\n    TimestampQuery = \"timestamp-query\",\r\n    IndirectFirstInstance = \"indirect-first-instance\",\r\n    ShaderF16 = \"shader-f16\",\r\n    BGRA8UnormStorage = \"bgra8unorm-storage\",\r\n}\r\n\r\n/** @internal */\r\nexport enum BufferUsage {\r\n    MapRead = 1,\r\n    MapWrite = 2,\r\n    CopySrc = 4,\r\n    CopyDst = 8,\r\n    Index = 16,\r\n    Vertex = 32,\r\n    Uniform = 64,\r\n    Storage = 128,\r\n    Indirect = 256,\r\n    QueryResolve = 512,\r\n}\r\n\r\n/** @internal */\r\nexport enum MapMode {\r\n    Read = 1,\r\n    Write = 2,\r\n}\r\n\r\n/** @internal */\r\nexport enum TextureDimension {\r\n    E1d = \"1d\",\r\n    E2d = \"2d\",\r\n    E3d = \"3d\",\r\n}\r\n\r\n/** @internal */\r\nexport enum TextureUsage {\r\n    CopySrc = 1,\r\n    CopyDst = 2,\r\n    TextureBinding = 4,\r\n    StorageBinding = 8,\r\n    RenderAttachment = 16,\r\n}\r\n\r\n/** @internal */\r\nexport enum TextureViewDimension {\r\n    E1d = \"1d\",\r\n    E2d = \"2d\",\r\n    E2dArray = \"2d-array\",\r\n    Cube = \"cube\",\r\n    CubeArray = \"cube-array\",\r\n    E3d = \"3d\",\r\n}\r\n\r\n/** @internal */\r\nexport enum TextureAspect {\r\n    All = \"all\",\r\n    StencilOnly = \"stencil-only\",\r\n    DepthOnly = \"depth-only\",\r\n}\r\n\r\n/**\r\n * Comments taken from https://github.com/gfx-rs/wgpu/blob/master/wgpu-types/src/lib.rs\r\n * @internal\r\n */\r\nexport enum TextureFormat {\r\n    // 8-bit formats\r\n    R8Unorm = \"r8unorm\", // Red channel only. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\r\n    R8Snorm = \"r8snorm\", // Red channel only. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.\r\n    R8Uint = \"r8uint\", // Red channel only. 8 bit integer per channel. Unsigned in shader.\r\n    R8Sint = \"r8sint\", // Red channel only. 8 bit integer per channel. Signed in shader.\r\n\r\n    // 16-bit formats\r\n    R16Uint = \"r16uint\", // Red channel only. 16 bit integer per channel. Unsigned in shader.\r\n    R16Sint = \"r16sint\", // Red channel only. 16 bit integer per channel. Signed in shader.\r\n    R16Float = \"r16float\", // Red channel only. 16 bit float per channel. Float in shader.\r\n    RG8Unorm = \"rg8unorm\", // Red and green channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\r\n    RG8Snorm = \"rg8snorm\", // Red and green channels. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.\r\n    RG8Uint = \"rg8uint\", // Red and green channels. 8 bit integer per channel. Unsigned in shader.\r\n    RG8Sint = \"rg8sint\", // Red and green channels. 8 bit integer per channel. Signed in shader.\r\n\r\n    // 32-bit formats\r\n    R32Uint = \"r32uint\", // Red channel only. 32 bit integer per channel. Unsigned in shader.\r\n    R32Sint = \"r32sint\", // Red channel only. 32 bit integer per channel. Signed in shader.\r\n    R32Float = \"r32float\", // Red channel only. 32 bit float per channel. Float in shader.\r\n    RG16Uint = \"rg16uint\", // Red and green channels. 16 bit integer per channel. Unsigned in shader.\r\n    RG16Sint = \"rg16sint\", // Red and green channels. 16 bit integer per channel. Signed in shader.\r\n    RG16Float = \"rg16float\", // Red and green channels. 16 bit float per channel. Float in shader.\r\n    RGBA8Unorm = \"rgba8unorm\", // Red, green, blue, and alpha channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\r\n    RGBA8UnormSRGB = \"rgba8unorm-srgb\", // Red, green, blue, and alpha channels. 8 bit integer per channel. Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.\r\n    RGBA8Snorm = \"rgba8snorm\", // Red, green, blue, and alpha channels. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.\r\n    RGBA8Uint = \"rgba8uint\", // Red, green, blue, and alpha channels. 8 bit integer per channel. Unsigned in shader.\r\n    RGBA8Sint = \"rgba8sint\", // Red, green, blue, and alpha channels. 8 bit integer per channel. Signed in shader.\r\n    BGRA8Unorm = \"bgra8unorm\", // Blue, green, red, and alpha channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\r\n    BGRA8UnormSRGB = \"bgra8unorm-srgb\", // Blue, green, red, and alpha channels. 8 bit integer per channel. Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.\r\n    // Packed 32-bit formats\r\n    RGB9E5UFloat = \"rgb9e5ufloat\", // Packed unsigned float with 9 bits mantisa for each RGB component, then a common 5 bits exponent\r\n    RGB10A2Unorm = \"rgb10a2unorm\", // Red, green, blue, and alpha channels. 10 bit integer for RGB channels, 2 bit integer for alpha channel. [0, 1023] ([0, 3] for alpha) converted to/from float [0, 1] in shader.\r\n    RG11B10UFloat = \"rg11b10ufloat\", // Red, green, and blue channels. 11 bit float with no sign bit for RG channels. 10 bit float with no sign bit for blue channel. Float in shader.\r\n\r\n    // 64-bit formats\r\n    RG32Uint = \"rg32uint\", // Red and green channels. 32 bit integer per channel. Unsigned in shader.\r\n    RG32Sint = \"rg32sint\", // Red and green channels. 32 bit integer per channel. Signed in shader.\r\n    RG32Float = \"rg32float\", // Red and green channels. 32 bit float per channel. Float in shader.\r\n    RGBA16Uint = \"rgba16uint\", // Red, green, blue, and alpha channels. 16 bit integer per channel. Unsigned in shader.\r\n    RGBA16Sint = \"rgba16sint\", // Red, green, blue, and alpha channels. 16 bit integer per channel. Signed in shader.\r\n    RGBA16Float = \"rgba16float\", // Red, green, blue, and alpha channels. 16 bit float per channel. Float in shader.\r\n\r\n    // 128-bit formats\r\n    RGBA32Uint = \"rgba32uint\", // Red, green, blue, and alpha channels. 32 bit integer per channel. Unsigned in shader.\r\n    RGBA32Sint = \"rgba32sint\", // Red, green, blue, and alpha channels. 32 bit integer per channel. Signed in shader.\r\n    RGBA32Float = \"rgba32float\", // Red, green, blue, and alpha channels. 32 bit float per channel. Float in shader.\r\n\r\n    // Depth and stencil formats\r\n    Stencil8 = \"stencil8\",\r\n    Depth16Unorm = \"depth16unorm\",\r\n    Depth24Plus = \"depth24plus\", // Special depth format with at least 24 bit integer depth.\r\n    Depth24PlusStencil8 = \"depth24plus-stencil8\", // Special depth/stencil format with at least 24 bit integer depth and 8 bits integer stencil.\r\n    Depth32Float = \"depth32float\", // Special depth format with 32 bit floating point depth.\r\n\r\n    // BC compressed formats usable if \"texture-compression-bc\" is both\r\n    // supported by the device/user agent and enabled in requestDevice.\r\n    BC1RGBAUnorm = \"bc1-rgba-unorm\", // 4x4 block compressed texture. 8 bytes per block (4 bit/px). 4 color + alpha pallet. 5 bit R + 6 bit G + 5 bit B + 1 bit alpha. Also known as DXT1.\r\n    BC1RGBAUnormSRGB = \"bc1-rgba-unorm-srgb\", // 4x4 block compressed texture. 8 bytes per block (4 bit/px). 4 color + alpha pallet. 5 bit R + 6 bit G + 5 bit B + 1 bit alpha. Also known as DXT1.\r\n    BC2RGBAUnorm = \"bc2-rgba-unorm\", // 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet. 5 bit R + 6 bit G + 5 bit B + 4 bit alpha. Also known as DXT3.\r\n    BC2RGBAUnormSRGB = \"bc2-rgba-unorm-srgb\", // 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet. 5 bit R + 6 bit G + 5 bit B + 4 bit alpha. Also known as DXT3.\r\n    BC3RGBAUnorm = \"bc3-rgba-unorm\", // 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet + 8 alpha pallet. 5 bit R + 6 bit G + 5 bit B + 8 bit alpha. Also known as DXT5.\r\n    BC3RGBAUnormSRGB = \"bc3-rgba-unorm-srgb\", // 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet + 8 alpha pallet. 5 bit R + 6 bit G + 5 bit B + 8 bit alpha. Also known as DXT5.\r\n    BC4RUnorm = \"bc4-r-unorm\", // 4x4 block compressed texture. 8 bytes per block (4 bit/px). 8 color pallet. 8 bit R. Also known as RGTC1.\r\n    BC4RSnorm = \"bc4-r-snorm\", // 4x4 block compressed texture. 8 bytes per block (4 bit/px). 8 color pallet. 8 bit R. Also known as RGTC1.\r\n    BC5RGUnorm = \"bc5-rg-unorm\", // 4x4 block compressed texture. 16 bytes per block (8 bit/px). 8 color red pallet + 8 color green pallet. 8 bit RG. Also known as RGTC2.\r\n    BC5RGSnorm = \"bc5-rg-snorm\", // 4x4 block compressed texture. 16 bytes per block (8 bit/px). 8 color red pallet + 8 color green pallet. 8 bit RG. Also known as RGTC2.\r\n    BC6HRGBUFloat = \"bc6h-rgb-ufloat\", // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Variable sized pallet. 16 bit unsigned float RGB. Float in shader. Also known as BPTC (float).\r\n    BC6HRGBFloat = \"bc6h-rgb-float\", // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Variable sized pallet. 16 bit signed float RGB. Float in shader. Also known as BPTC (float).\r\n    BC7RGBAUnorm = \"bc7-rgba-unorm\", // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Variable sized pallet. 8 bit integer RGBA. Also known as BPTC (unorm).\r\n    BC7RGBAUnormSRGB = \"bc7-rgba-unorm-srgb\", // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Variable sized pallet. 8 bit integer RGBA. Also known as BPTC (unorm).\r\n\r\n    // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\r\n    // supported by the device/user agent and enabled in requestDevice.\r\n    ETC2RGB8Unorm = \"etc2-rgb8unorm\", // 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 8 bit integer RGB.\r\n    ETC2RGB8UnormSRGB = \"etc2-rgb8unorm-srgb\", // 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 8 bit integer RGB.\r\n    ETC2RGB8A1Unorm = \"etc2-rgb8a1unorm\", // 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 8 bit integer RGB + 1 bit alpha.\r\n    ETC2RGB8A1UnormSRGB = \"etc2-rgb8a1unorm-srgb\", // 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 8 bit integer RGB + 1 bit alpha.\r\n    ETC2RGBA8Unorm = \"etc2-rgba8unorm\", // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 8 bit integer RGB + 8 bit alpha.\r\n    ETC2RGBA8UnormSRGB = \"etc2-rgba8unorm-srgb\", // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 8 bit integer RGB + 8 bit alpha.\r\n    EACR11Unorm = \"eac-r11unorm\", // 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 11 bit integer R.\r\n    EACR11Snorm = \"eac-r11snorm\", // 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 11 bit integer R.\r\n    EACRG11Unorm = \"eac-rg11unorm\", // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 11 bit integer R + 11 bit integer G.\r\n    EACRG11Snorm = \"eac-rg11snorm\", // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 11 bit integer R + 11 bit integer G.\r\n\r\n    // ASTC compressed formats usable if \"texture-compression-astc\" is both\r\n    // supported by the device/user agent and enabled in requestDevice.\r\n    ASTC4x4Unorm = \"astc-4x4-unorm\", // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC4x4UnormSRGB = \"astc-4x4-unorm-srgb\", // 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC5x4Unorm = \"astc-5x4-unorm\", // 5x4 block compressed texture. 16 bytes per block (6.4 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC5x4UnormSRGB = \"astc-5x4-unorm-srgb\", // 5x4 block compressed texture. 16 bytes per block (6.4 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC5x5Unorm = \"astc-5x5-unorm\", // 5x5 block compressed texture. 16 bytes per block (5.12 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC5x5UnormSRGB = \"astc-5x5-unorm-srgb\", // 5x5 block compressed texture. 16 bytes per block (5.12 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC6x5Unorm = \"astc-6x5-unorm\", // 6x5 block compressed texture. 16 bytes per block (4.27 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC6x5UnormSRGB = \"astc-6x5-unorm-srgb\", // 6x5 block compressed texture. 16 bytes per block (4.27 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC6x6Unorm = \"astc-6x6-unorm\", // 6x6 block compressed texture. 16 bytes per block (3.56 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC6x6UnormSRGB = \"astc-6x6-unorm-srgb\", // 6x6 block compressed texture. 16 bytes per block (3.56 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC8x5Unorm = \"astc-8x5-unorm\", // 8x5 block compressed texture. 16 bytes per block (3.2 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC8x5UnormSRGB = \"astc-8x5-unorm-srgb\", // 8x5 block compressed texture. 16 bytes per block (3.2 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC8x6Unorm = \"astc-8x6-unorm\", // 8x6 block compressed texture. 16 bytes per block (2.67 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC8x6UnormSRGB = \"astc-8x6-unorm-srgb\", // 8x6 block compressed texture. 16 bytes per block (2.67 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC8x8Unorm = \"astc-8x8-unorm\", // 8x8 block compressed texture. 16 bytes per block (2 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC8x8UnormSRGB = \"astc-8x8-unorm-srgb\", // 8x8 block compressed texture. 16 bytes per block (2 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC10x5Unorm = \"astc-10x5-unorm\", // 10x5 block compressed texture. 16 bytes per block (2.56 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC10x5UnormSRGB = \"astc-10x5-unorm-srgb\", // 10x5 block compressed texture. 16 bytes per block (2.56 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC10x6Unorm = \"astc-10x6-unorm\", // 10x6 block compressed texture. 16 bytes per block (2.13 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC10x6UnormSRGB = \"astc-10x6-unorm-srgb\", // 10x6 block compressed texture. 16 bytes per block (2.13 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC10x8Unorm = \"astc-10x8-unorm\", // 10x8 block compressed texture. 16 bytes per block (1.6 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC10x8UnormSRGB = \"astc-10x8-unorm-srgb\", // 10x8 block compressed texture. 16 bytes per block (1.6 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC10x10Unorm = \"astc-10x10-unorm\", // 10x10 block compressed texture. 16 bytes per block (1.28 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC10x10UnormSRGB = \"astc-10x10-unorm-srgb\", // 10x10 block compressed texture. 16 bytes per block (1.28 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC12x10Unorm = \"astc-12x10-unorm\", // 12x10 block compressed texture. 16 bytes per block (1.07 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC12x10UnormSRGB = \"astc-12x10-unorm-srgb\", // 12x10 block compressed texture. 16 bytes per block (1.07 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC12x12Unorm = \"astc-12x12-unorm\", // 12x12 block compressed texture. 16 bytes per block (0.89 bit/px). Complex pallet. 8 bit integer RGBA.\r\n    ASTC12x12UnormSRGB = \"astc-12x12-unorm-srgb\", // 12x12 block compressed texture. 16 bytes per block (0.89 bit/px). Complex pallet. 8 bit integer RGBA.\r\n\r\n    // \"depth24unorm-stencil8\" feature\r\n    Depth24UnormStencil8 = \"depth24unorm-stencil8\",\r\n\r\n    // \"depth32float-stencil8\" feature\r\n    Depth32FloatStencil8 = \"depth32float-stencil8\",\r\n}\r\n\r\n/** @internal */\r\nexport enum AddressMode {\r\n    ClampToEdge = \"clamp-to-edge\",\r\n    Repeat = \"repeat\",\r\n    MirrorRepeat = \"mirror-repeat\",\r\n}\r\n\r\n/** @internal */\r\nexport enum FilterMode {\r\n    Nearest = \"nearest\",\r\n    Linear = \"linear\",\r\n}\r\n\r\n/** @internal */\r\nexport enum CompareFunction {\r\n    Never = \"never\",\r\n    Less = \"less\",\r\n    Equal = \"equal\",\r\n    LessEqual = \"less-equal\",\r\n    Greater = \"greater\",\r\n    NotEqual = \"not-equal\",\r\n    GreaterEqual = \"greater-equal\",\r\n    Always = \"always\",\r\n}\r\n\r\n/** @internal */\r\nexport enum ShaderStage {\r\n    Vertex = 1,\r\n    Fragment = 2,\r\n    Compute = 4,\r\n}\r\n\r\n/** @internal */\r\nexport enum BufferBindingType {\r\n    Uniform = \"uniform\",\r\n    Storage = \"storage\",\r\n    ReadOnlyStorage = \"read-only-storage\",\r\n}\r\n\r\n/** @internal */\r\nexport enum SamplerBindingType {\r\n    Filtering = \"filtering\",\r\n    NonFiltering = \"non-filtering\",\r\n    Comparison = \"comparison\",\r\n}\r\n\r\n/** @internal */\r\nexport enum TextureSampleType {\r\n    Float = \"float\",\r\n    UnfilterableFloat = \"unfilterable-float\",\r\n    Depth = \"depth\",\r\n    Sint = \"sint\",\r\n    Uint = \"uint\",\r\n}\r\n\r\n/** @internal */\r\nexport enum StorageTextureAccess {\r\n    WriteOnly = \"write-only\",\r\n}\r\n\r\n/** @internal */\r\nexport enum CompilationMessageType {\r\n    Error = \"error\",\r\n    Warning = \"warning\",\r\n    Info = \"info\",\r\n}\r\n\r\n/** @internal */\r\nexport enum AutoLayoutMode {\r\n    Auto = \"auto\",\r\n}\r\n\r\n/** @internal */\r\nexport enum PrimitiveTopology {\r\n    PointList = \"point-list\",\r\n    LineList = \"line-list\",\r\n    LineStrip = \"line-strip\",\r\n    TriangleList = \"triangle-list\",\r\n    TriangleStrip = \"triangle-strip\",\r\n}\r\n\r\n/** @internal */\r\nexport enum FrontFace {\r\n    CCW = \"ccw\",\r\n    CW = \"cw\",\r\n}\r\n\r\n/** @internal */\r\nexport enum CullMode {\r\n    None = \"none\",\r\n    Front = \"front\",\r\n    Back = \"back\",\r\n}\r\n\r\n/** @internal */\r\nexport enum ColorWriteFlags {\r\n    Red = 1,\r\n    Green = 2,\r\n    Blue = 4,\r\n    Alpha = 8,\r\n    All = 15,\r\n}\r\n\r\n/** @internal */\r\nexport enum BlendFactor {\r\n    Zero = \"zero\",\r\n    One = \"one\",\r\n    Src = \"src\",\r\n    OneMinusSrc = \"one-minus-src\",\r\n    SrcAlpha = \"src-alpha\",\r\n    OneMinusSrcAlpha = \"one-minus-src-alpha\",\r\n    Dst = \"dst\",\r\n    OneMinusDst = \"one-minus-dst\",\r\n    DstAlpha = \"dst-alpha\",\r\n    OneMinusDstAlpha = \"one-minus-dst-alpha\",\r\n    SrcAlphaSaturated = \"src-alpha-saturated\",\r\n    Constant = \"constant\",\r\n    OneMinusConstant = \"one-minus-constant\",\r\n}\r\n\r\n/** @internal */\r\nexport enum BlendOperation {\r\n    Add = \"add\",\r\n    Subtract = \"subtract\",\r\n    ReverseSubtract = \"reverse-subtract\",\r\n    Min = \"min\",\r\n    Max = \"max\",\r\n}\r\n\r\n/** @internal */\r\nexport enum StencilOperation {\r\n    Keep = \"keep\",\r\n    Zero = \"zero\",\r\n    Replace = \"replace\",\r\n    Invert = \"invert\",\r\n    IncrementClamp = \"increment-clamp\",\r\n    DecrementClamp = \"decrement-clamp\",\r\n    IncrementWrap = \"increment-wrap\",\r\n    DecrementWrap = \"decrement-wrap\",\r\n}\r\n\r\n/** @internal */\r\nexport enum IndexFormat {\r\n    Uint16 = \"uint16\",\r\n    Uint32 = \"uint32\",\r\n}\r\n\r\n/** @internal */\r\nexport enum VertexFormat {\r\n    Uint8x2 = \"uint8x2\",\r\n    Uint8x4 = \"uint8x4\",\r\n    Sint8x2 = \"sint8x2\",\r\n    Sint8x4 = \"sint8x4\",\r\n    Unorm8x2 = \"unorm8x2\",\r\n    Unorm8x4 = \"unorm8x4\",\r\n    Snorm8x2 = \"snorm8x2\",\r\n    Snorm8x4 = \"snorm8x4\",\r\n    Uint16x2 = \"uint16x2\",\r\n    Uint16x4 = \"uint16x4\",\r\n    Sint16x2 = \"sint16x2\",\r\n    Sint16x4 = \"sint16x4\",\r\n    Unorm16x2 = \"unorm16x2\",\r\n    Unorm16x4 = \"unorm16x4\",\r\n    Snorm16x2 = \"snorm16x2\",\r\n    Snorm16x4 = \"snorm16x4\",\r\n    Float16x2 = \"float16x2\",\r\n    Float16x4 = \"float16x4\",\r\n    Float32 = \"float32\",\r\n    Float32x2 = \"float32x2\",\r\n    Float32x3 = \"float32x3\",\r\n    Float32x4 = \"float32x4\",\r\n    Uint32 = \"uint32\",\r\n    Uint32x2 = \"uint32x2\",\r\n    Uint32x3 = \"uint32x3\",\r\n    Uint32x4 = \"uint32x4\",\r\n    Sint32 = \"sint32\",\r\n    Sint32x2 = \"sint32x2\",\r\n    Sint32x3 = \"sint32x3\",\r\n    Sint32x4 = \"sint32x4\",\r\n}\r\n\r\n/** @internal */\r\nexport enum InputStepMode {\r\n    Vertex = \"vertex\",\r\n    Instance = \"instance\",\r\n}\r\n\r\n/** @internal */\r\nexport enum ComputePassTimestampLocation {\r\n    Beginning = \"beginning\",\r\n    End = \"end\",\r\n}\r\n\r\n/** @internal */\r\nexport enum RenderPassTimestampLocation {\r\n    Beginning = \"beginning\",\r\n    End = \"end\",\r\n}\r\n\r\n/** @internal */\r\nexport enum LoadOp {\r\n    Load = \"load\",\r\n    Clear = \"clear\",\r\n}\r\n\r\n/** @internal */\r\nexport enum StoreOp {\r\n    Store = \"store\",\r\n    Discard = \"discard\",\r\n}\r\n\r\n/** @internal */\r\nexport enum QueryType {\r\n    Occlusion = \"occlusion\",\r\n    Timestamp = \"timestamp\",\r\n}\r\n\r\n/** @internal */\r\nexport enum CanvasAlphaMode {\r\n    Opaque = \"opaque\",\r\n    Premultiplied = \"premultiplied\",\r\n}\r\n\r\n/** @internal */\r\nexport enum DeviceLostReason {\r\n    Destroyed = \"destroyed\",\r\n}\r\n\r\n/** @internal */\r\nexport enum ErrorFilter {\r\n    OutOfMemory = \"out-of-memory\",\r\n    Validation = \"validation\",\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}