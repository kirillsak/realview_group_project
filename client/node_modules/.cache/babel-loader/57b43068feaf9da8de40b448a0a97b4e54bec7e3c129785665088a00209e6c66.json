{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { WebVRController } from \"./webVRController.js\";\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController.js\";\n/**\n * Vive Controller\n */\nexport class ViveController extends WebVRController {\n  /**\n   * Creates a new ViveController from a gamepad\n   * @param vrGamepad the gamepad that the controller should be created from\n   */\n  constructor(vrGamepad) {\n    super(vrGamepad);\n    this.controllerType = PoseEnabledControllerType.VIVE;\n    this._invertLeftStickY = true;\n  }\n  /**\n   * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\n   * @param scene scene in which to add meshes\n   * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\n   */\n  initControllerMesh(scene, meshLoaded) {\n    SceneLoader.ImportMesh(\"\", ViveController.MODEL_BASE_URL, ViveController.MODEL_FILENAME, scene, newMeshes => {\n      /*\n      Parent Mesh name: ViveWand\n      - body\n      - r_gripper\n      - l_gripper\n      - menu_button\n      - system_button\n      - trackpad\n      - trigger\n      - LED\n      */\n      this._defaultModel = newMeshes[1];\n      this.attachToMesh(this._defaultModel);\n      if (meshLoaded) {\n        meshLoaded(this._defaultModel);\n      }\n    });\n  }\n  /**\n   * Fired when the left button on this controller is modified\n   */\n  get onLeftButtonStateChangedObservable() {\n    return this.onMainButtonStateChangedObservable;\n  }\n  /**\n   * Fired when the right button on this controller is modified\n   */\n  get onRightButtonStateChangedObservable() {\n    return this.onMainButtonStateChangedObservable;\n  }\n  /**\n   * Fired when the menu button on this controller is modified\n   */\n  get onMenuButtonStateChangedObservable() {\n    return this.onSecondaryButtonStateChangedObservable;\n  }\n  /**\n   * Called once for each button that changed state since the last frame\n   * Vive mapping:\n   * 0: touchpad\n   * 1: trigger\n   * 2: left AND right buttons\n   * 3: menu button\n   * @param buttonIdx Which button index changed\n   * @param state New state of the button\n   */\n  _handleButtonChange(buttonIdx, state) {\n    const notifyObject = state; //{ state: state, changes: changes };\n    switch (buttonIdx) {\n      case 0:\n        this.onPadStateChangedObservable.notifyObservers(notifyObject);\n        return;\n      case 1:\n        // index trigger\n        if (this._defaultModel) {\n          this._defaultModel.getChildren()[6].rotation.x = -notifyObject.value * 0.15;\n        }\n        this.onTriggerStateChangedObservable.notifyObservers(notifyObject);\n        return;\n      case 2:\n        // left AND right button\n        this.onMainButtonStateChangedObservable.notifyObservers(notifyObject);\n        return;\n      case 3:\n        if (this._defaultModel) {\n          if (notifyObject.pressed) {\n            this._defaultModel.getChildren()[2].position.y = -0.001;\n          } else {\n            this._defaultModel.getChildren()[2].position.y = 0;\n          }\n        }\n        this.onSecondaryButtonStateChangedObservable.notifyObservers(notifyObject);\n        return;\n    }\n  }\n}\n/**\n * Base Url for the controller model.\n */\nViveController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/vive/\";\n/**\n * File name for the controller model.\n */\nViveController.MODEL_FILENAME = \"wand.babylon\";\nPoseEnabledControllerHelper._ControllerFactories.push({\n  canCreate: gamepadInfo => {\n    return gamepadInfo.id.toLowerCase().indexOf(\"openvr\") !== -1;\n  },\n  create: gamepadInfo => {\n    return new ViveController(gamepadInfo);\n  }\n});","map":{"version":3,"mappings":";AAEA,SAASA,WAAW,QAAQ,8BAA4B;AACxD,SAASC,eAAe,QAAQ,sBAAoB;AAEpD,SAASC,yBAAyB,EAAEC,2BAA2B,QAAQ,4BAA0B;AAGjG;;;AAGA,OAAM,MAAOC,cAAe,SAAQH,eAAe;EAU/C;;;;EAIAI,YAAYC,SAAc;IACtB,KAAK,CAACA,SAAS,CAAC;IAChB,IAAI,CAACC,cAAc,GAAGL,yBAAyB,CAACM,IAAI;IACpD,IAAI,CAACC,iBAAiB,GAAG,IAAI;EACjC;EAEA;;;;;EAKOC,kBAAkB,CAACC,KAAY,EAAEC,UAAyC;IAC7EZ,WAAW,CAACa,UAAU,CAAC,EAAE,EAAET,cAAc,CAACU,cAAc,EAAEV,cAAc,CAACW,cAAc,EAAEJ,KAAK,EAAGK,SAAS,IAAI;MAC1G;;;;;;;;;;;MAWA,IAAI,CAACC,aAAa,GAAGD,SAAS,CAAC,CAAC,CAAC;MACjC,IAAI,CAACE,YAAY,CAAC,IAAI,CAACD,aAAa,CAAC;MACrC,IAAIL,UAAU,EAAE;QACZA,UAAU,CAAC,IAAI,CAACK,aAAa,CAAC;;IAEtC,CAAC,CAAC;EACN;EAEA;;;EAGA,IAAWE,kCAAkC;IACzC,OAAO,IAAI,CAACC,kCAAkC;EAClD;EAEA;;;EAGA,IAAWC,mCAAmC;IAC1C,OAAO,IAAI,CAACD,kCAAkC;EAClD;EAEA;;;EAGA,IAAWE,kCAAkC;IACzC,OAAO,IAAI,CAACC,uCAAuC;EACvD;EAEA;;;;;;;;;;EAUUC,mBAAmB,CAACC,SAAiB,EAAEC,KAA4B;IACzE,MAAMC,YAAY,GAAGD,KAAK,CAAC,CAAC;IAC5B,QAAQD,SAAS;MACb,KAAK,CAAC;QACF,IAAI,CAACG,2BAA2B,CAACC,eAAe,CAACF,YAAY,CAAC;QAC9D;MACJ,KAAK,CAAC;QAAE;QACJ,IAAI,IAAI,CAACV,aAAa,EAAE;UACL,IAAI,CAACA,aAAa,CAACa,WAAW,EAAE,CAAC,CAAC,CAAE,CAACC,QAAQ,CAACC,CAAC,GAAG,CAACL,YAAY,CAACM,KAAK,GAAG,IAAI;;QAE/F,IAAI,CAACC,+BAA+B,CAACL,eAAe,CAACF,YAAY,CAAC;QAClE;MACJ,KAAK,CAAC;QAAE;QACJ,IAAI,CAACP,kCAAkC,CAACS,eAAe,CAACF,YAAY,CAAC;QACrE;MACJ,KAAK,CAAC;QACF,IAAI,IAAI,CAACV,aAAa,EAAE;UACpB,IAAIU,YAAY,CAACQ,OAAO,EAAE;YACP,IAAI,CAAClB,aAAa,CAACa,WAAW,EAAE,CAAC,CAAC,CAAE,CAACM,QAAQ,CAACC,CAAC,GAAG,CAAC,KAAK;WAC1E,MAAM;YACY,IAAI,CAACpB,aAAa,CAACa,WAAW,EAAE,CAAC,CAAC,CAAE,CAACM,QAAQ,CAACC,CAAC,GAAG,CAAC;;;QAG1E,IAAI,CAACd,uCAAuC,CAACM,eAAe,CAACF,YAAY,CAAC;QAC1E;IAAO;EAEnB;;AAtGA;;;AAGcvB,6BAAc,GAAW,yCAAyC;AAChF;;;AAGcA,6BAAc,GAAW,cAAc;AAkGzDD,2BAA2B,CAACmC,oBAAoB,CAACC,IAAI,CAAC;EAClDC,SAAS,EAAGC,WAAW,IAAI;IACvB,OAAOA,WAAW,CAACC,EAAE,CAACC,WAAW,EAAE,CAACC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;EAChE,CAAC;EACDC,MAAM,EAAGJ,WAAW,IAAI;IACpB,OAAO,IAAIrC,cAAc,CAACqC,WAAW,CAAC;EAC1C;CACH,CAAC","names":["SceneLoader","WebVRController","PoseEnabledControllerType","PoseEnabledControllerHelper","ViveController","constructor","vrGamepad","controllerType","VIVE","_invertLeftStickY","initControllerMesh","scene","meshLoaded","ImportMesh","MODEL_BASE_URL","MODEL_FILENAME","newMeshes","_defaultModel","attachToMesh","onLeftButtonStateChangedObservable","onMainButtonStateChangedObservable","onRightButtonStateChangedObservable","onMenuButtonStateChangedObservable","onSecondaryButtonStateChangedObservable","_handleButtonChange","buttonIdx","state","notifyObject","onPadStateChangedObservable","notifyObservers","getChildren","rotation","x","value","onTriggerStateChangedObservable","pressed","position","y","_ControllerFactories","push","canCreate","gamepadInfo","id","toLowerCase","indexOf","create"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Gamepads/Controllers/viveController.ts"],"sourcesContent":["import type { Scene } from \"../../scene\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport { WebVRController } from \"./webVRController\";\r\nimport type { ExtendedGamepadButton } from \"./poseEnabledController\";\r\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController\";\r\nimport type { Observable } from \"../../Misc/observable\";\r\n\r\n/**\r\n * Vive Controller\r\n */\r\nexport class ViveController extends WebVRController {\r\n    /**\r\n     * Base Url for the controller model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/vive/\";\r\n    /**\r\n     * File name for the controller model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"wand.babylon\";\r\n\r\n    /**\r\n     * Creates a new ViveController from a gamepad\r\n     * @param vrGamepad the gamepad that the controller should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n        this.controllerType = PoseEnabledControllerType.VIVE;\r\n        this._invertLeftStickY = true;\r\n    }\r\n\r\n    /**\r\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n     * @param scene scene in which to add meshes\r\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n     */\r\n    public initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void) {\r\n        SceneLoader.ImportMesh(\"\", ViveController.MODEL_BASE_URL, ViveController.MODEL_FILENAME, scene, (newMeshes) => {\r\n            /*\r\n            Parent Mesh name: ViveWand\r\n            - body\r\n            - r_gripper\r\n            - l_gripper\r\n            - menu_button\r\n            - system_button\r\n            - trackpad\r\n            - trigger\r\n            - LED\r\n            */\r\n            this._defaultModel = newMeshes[1];\r\n            this.attachToMesh(this._defaultModel);\r\n            if (meshLoaded) {\r\n                meshLoaded(this._defaultModel);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fired when the left button on this controller is modified\r\n     */\r\n    public get onLeftButtonStateChangedObservable(): Observable<ExtendedGamepadButton> {\r\n        return this.onMainButtonStateChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * Fired when the right button on this controller is modified\r\n     */\r\n    public get onRightButtonStateChangedObservable(): Observable<ExtendedGamepadButton> {\r\n        return this.onMainButtonStateChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * Fired when the menu button on this controller is modified\r\n     */\r\n    public get onMenuButtonStateChangedObservable(): Observable<ExtendedGamepadButton> {\r\n        return this.onSecondaryButtonStateChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * Called once for each button that changed state since the last frame\r\n     * Vive mapping:\r\n     * 0: touchpad\r\n     * 1: trigger\r\n     * 2: left AND right buttons\r\n     * 3: menu button\r\n     * @param buttonIdx Which button index changed\r\n     * @param state New state of the button\r\n     */\r\n    protected _handleButtonChange(buttonIdx: number, state: ExtendedGamepadButton) {\r\n        const notifyObject = state; //{ state: state, changes: changes };\r\n        switch (buttonIdx) {\r\n            case 0:\r\n                this.onPadStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 1: // index trigger\r\n                if (this._defaultModel) {\r\n                    (<AbstractMesh>this._defaultModel.getChildren()[6]).rotation.x = -notifyObject.value * 0.15;\r\n                }\r\n                this.onTriggerStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 2: // left AND right button\r\n                this.onMainButtonStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 3:\r\n                if (this._defaultModel) {\r\n                    if (notifyObject.pressed) {\r\n                        (<AbstractMesh>this._defaultModel.getChildren()[2]).position.y = -0.001;\r\n                    } else {\r\n                        (<AbstractMesh>this._defaultModel.getChildren()[2]).position.y = 0;\r\n                    }\r\n                }\r\n                this.onSecondaryButtonStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n        }\r\n    }\r\n}\r\n\r\nPoseEnabledControllerHelper._ControllerFactories.push({\r\n    canCreate: (gamepadInfo) => {\r\n        return gamepadInfo.id.toLowerCase().indexOf(\"openvr\") !== -1;\r\n    },\r\n    create: (gamepadInfo) => {\r\n        return new ViveController(gamepadInfo);\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}