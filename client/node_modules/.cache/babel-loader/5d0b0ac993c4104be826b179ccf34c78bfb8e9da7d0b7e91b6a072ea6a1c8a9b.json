{"ast":null,"code":"/* eslint-disable @typescript-eslint/naming-convention */\nimport { Logger } from \"../Misc/logger.js\";\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n */\nexport class KhronosTextureContainer {\n  /**\n   * Creates a new KhronosTextureContainer\n   * @param data contents of the KTX container file\n   * @param facesExpected should be either 1 or 6, based whether a cube texture or or\n   */\n  constructor( /** contents of the KTX container file */\n  data, facesExpected) {\n    this.data = data;\n    /**\n     * If the container has been made invalid (eg. constructor failed to correctly load array buffer)\n     */\n    this.isInvalid = false;\n    if (!KhronosTextureContainer.IsValid(data)) {\n      this.isInvalid = true;\n      Logger.Error(\"texture missing KTX identifier\");\n      return;\n    }\n    // load the reset of the header in native 32 bit uint\n    const dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    const headerDataView = new DataView(this.data.buffer, this.data.byteOffset + 12, 13 * dataSize);\n    const endianness = headerDataView.getUint32(0, true);\n    const littleEndian = endianness === 0x04030201;\n    this.glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures\n    this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian); // must be 1 for compressed textures\n    this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian); // must be 0 for compressed textures\n    this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n    this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n    this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n    this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n    this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n    this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays\n    this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6\n    this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures\n    this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n    if (this.glType !== 0) {\n      Logger.Error(\"only compressed formats currently supported\");\n      return;\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n    }\n    if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n      Logger.Error(\"only 2D textures currently supported\");\n      return;\n    }\n    if (this.numberOfArrayElements !== 0) {\n      Logger.Error(\"texture arrays not currently supported\");\n      return;\n    }\n    if (this.numberOfFaces !== facesExpected) {\n      Logger.Error(\"number of faces expected\" + facesExpected + \", but found \" + this.numberOfFaces);\n      return;\n    }\n    // we now have a completely validated file, so could use existence of loadType as success\n    // would need to make this more elaborate & adjust checks above to support more than one load type\n    this.loadType = KhronosTextureContainer.COMPRESSED_2D;\n  }\n  /**\n   * Uploads KTX content to a Babylon Texture.\n   * It is assumed that the texture has already been created & is currently bound\n   * @internal\n   */\n  uploadLevels(texture, loadMipmaps) {\n    switch (this.loadType) {\n      case KhronosTextureContainer.COMPRESSED_2D:\n        this._upload2DCompressedLevels(texture, loadMipmaps);\n        break;\n      case KhronosTextureContainer.TEX_2D:\n      case KhronosTextureContainer.COMPRESSED_3D:\n      case KhronosTextureContainer.TEX_3D:\n    }\n  }\n  _upload2DCompressedLevels(texture, loadMipmaps) {\n    // initialize width & height for level 1\n    let dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\n    let width = this.pixelWidth;\n    let height = this.pixelHeight;\n    const mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n    for (let level = 0; level < mipmapCount; level++) {\n      const imageSize = new Int32Array(this.data.buffer, this.data.byteOffset + dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n      dataOffset += 4; //image data starts from next multiple of 4 offset. Each face refers to same imagesize field above.\n      for (let face = 0; face < this.numberOfFaces; face++) {\n        const byteArray = new Uint8Array(this.data.buffer, this.data.byteOffset + dataOffset, imageSize);\n        const engine = texture.getEngine();\n        engine._uploadCompressedDataToTextureDirectly(texture, texture.format, width, height, byteArray, face, level);\n        dataOffset += imageSize; // add size of the image for the next face/mipmap\n        dataOffset += 3 - (imageSize + 3) % 4; // add padding for odd sized image\n      }\n\n      width = Math.max(1.0, width * 0.5);\n      height = Math.max(1.0, height * 0.5);\n    }\n  }\n  /**\n   * Checks if the given data starts with a KTX file identifier.\n   * @param data the data to check\n   * @returns true if the data is a KTX file or false otherwise\n   */\n  static IsValid(data) {\n    if (data.byteLength >= 12) {\n      // '«', 'K', 'T', 'X', ' ', '1', '1', '»', '\\r', '\\n', '\\x1A', '\\n'\n      const identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\n      if (identifier[0] === 0xab && identifier[1] === 0x4b && identifier[2] === 0x54 && identifier[3] === 0x58 && identifier[4] === 0x20 && identifier[5] === 0x31 && identifier[6] === 0x31 && identifier[7] === 0xbb && identifier[8] === 0x0d && identifier[9] === 0x0a && identifier[10] === 0x1a && identifier[11] === 0x0a) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\nKhronosTextureContainer.HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n// load types\nKhronosTextureContainer.COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\nKhronosTextureContainer.COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\nKhronosTextureContainer.TEX_2D = 2; // uses a gl.texImage2D()\nKhronosTextureContainer.TEX_3D = 3; // uses a gl.texImage3D()","map":{"version":3,"mappings":"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","names":["Logger","KhronosTextureContainer","constructor","data","facesExpected","IsValid","isInvalid","Error","dataSize","Uint32Array","BYTES_PER_ELEMENT","headerDataView","DataView","buffer","byteOffset","endianness","getUint32","littleEndian","glType","glTypeSize","glFormat","glInternalFormat","glBaseInternalFormat","pixelWidth","pixelHeight","pixelDepth","numberOfArrayElements","numberOfFaces","numberOfMipmapLevels","bytesOfKeyValueData","Math","max","loadType","COMPRESSED_2D","uploadLevels","texture","loadMipmaps","_upload2DCompressedLevels","TEX_2D","COMPRESSED_3D","TEX_3D","dataOffset","HEADER_LEN","width","height","mipmapCount","level","imageSize","Int32Array","face","byteArray","Uint8Array","engine","getEngine","_uploadCompressedDataToTextureDirectly","format","byteLength","identifier"],"sourceRoot":"","sources":["../../../../lts/core/generated/Misc/khronosTextureContainer.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\n\r\n/**\r\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\r\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\r\n */\r\nexport class KhronosTextureContainer {\r\n    private static HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\r\n\r\n    // load types\r\n    private static COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\r\n    private static COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\r\n    private static TEX_2D = 2; // uses a gl.texImage2D()\r\n    private static TEX_3D = 3; // uses a gl.texImage3D()\r\n\r\n    // elements of the header\r\n    /**\r\n     * Gets the openGL type\r\n     */\r\n    public glType: number;\r\n    /**\r\n     * Gets the openGL type size\r\n     */\r\n    public glTypeSize: number;\r\n    /**\r\n     * Gets the openGL format\r\n     */\r\n    public glFormat: number;\r\n    /**\r\n     * Gets the openGL internal format\r\n     */\r\n    public glInternalFormat: number;\r\n    /**\r\n     * Gets the base internal format\r\n     */\r\n    public glBaseInternalFormat: number;\r\n    /**\r\n     * Gets image width in pixel\r\n     */\r\n    public pixelWidth: number;\r\n    /**\r\n     * Gets image height in pixel\r\n     */\r\n    public pixelHeight: number;\r\n    /**\r\n     * Gets image depth in pixels\r\n     */\r\n    public pixelDepth: number;\r\n    /**\r\n     * Gets the number of array elements\r\n     */\r\n    public numberOfArrayElements: number;\r\n    /**\r\n     * Gets the number of faces\r\n     */\r\n    public numberOfFaces: number;\r\n    /**\r\n     * Gets the number of mipmap levels\r\n     */\r\n    public numberOfMipmapLevels: number;\r\n    /**\r\n     * Gets the bytes of key value data\r\n     */\r\n    public bytesOfKeyValueData: number;\r\n    /**\r\n     * Gets the load type\r\n     */\r\n    public loadType: number;\r\n    /**\r\n     * If the container has been made invalid (eg. constructor failed to correctly load array buffer)\r\n     */\r\n    public isInvalid = false;\r\n\r\n    /**\r\n     * Creates a new KhronosTextureContainer\r\n     * @param data contents of the KTX container file\r\n     * @param facesExpected should be either 1 or 6, based whether a cube texture or or\r\n     */\r\n    public constructor(\r\n        /** contents of the KTX container file */\r\n        public data: ArrayBufferView,\r\n        facesExpected: number\r\n    ) {\r\n        if (!KhronosTextureContainer.IsValid(data)) {\r\n            this.isInvalid = true;\r\n            Logger.Error(\"texture missing KTX identifier\");\r\n            return;\r\n        }\r\n\r\n        // load the reset of the header in native 32 bit uint\r\n        const dataSize = Uint32Array.BYTES_PER_ELEMENT;\r\n        const headerDataView = new DataView(this.data.buffer, this.data.byteOffset + 12, 13 * dataSize);\r\n        const endianness = headerDataView.getUint32(0, true);\r\n        const littleEndian = endianness === 0x04030201;\r\n\r\n        this.glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures\r\n        this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian); // must be 1 for compressed textures\r\n        this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian); // must be 0 for compressed textures\r\n        this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\r\n        this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\r\n        this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\r\n        this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\r\n        this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\r\n        this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays\r\n        this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6\r\n        this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures\r\n        this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data\r\n\r\n        // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\r\n        if (this.glType !== 0) {\r\n            Logger.Error(\"only compressed formats currently supported\");\r\n            return;\r\n        } else {\r\n            // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\r\n            this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\r\n        }\r\n\r\n        if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\r\n            Logger.Error(\"only 2D textures currently supported\");\r\n            return;\r\n        }\r\n\r\n        if (this.numberOfArrayElements !== 0) {\r\n            Logger.Error(\"texture arrays not currently supported\");\r\n            return;\r\n        }\r\n\r\n        if (this.numberOfFaces !== facesExpected) {\r\n            Logger.Error(\"number of faces expected\" + facesExpected + \", but found \" + this.numberOfFaces);\r\n            return;\r\n        }\r\n\r\n        // we now have a completely validated file, so could use existence of loadType as success\r\n        // would need to make this more elaborate & adjust checks above to support more than one load type\r\n        this.loadType = KhronosTextureContainer.COMPRESSED_2D;\r\n    }\r\n\r\n    /**\r\n     * Uploads KTX content to a Babylon Texture.\r\n     * It is assumed that the texture has already been created & is currently bound\r\n     * @internal\r\n     */\r\n    public uploadLevels(texture: InternalTexture, loadMipmaps: boolean): void {\r\n        switch (this.loadType) {\r\n            case KhronosTextureContainer.COMPRESSED_2D:\r\n                this._upload2DCompressedLevels(texture, loadMipmaps);\r\n                break;\r\n\r\n            case KhronosTextureContainer.TEX_2D:\r\n            case KhronosTextureContainer.COMPRESSED_3D:\r\n            case KhronosTextureContainer.TEX_3D:\r\n        }\r\n    }\r\n\r\n    private _upload2DCompressedLevels(texture: InternalTexture, loadMipmaps: boolean): void {\r\n        // initialize width & height for level 1\r\n        let dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\r\n        let width = this.pixelWidth;\r\n        let height = this.pixelHeight;\r\n\r\n        const mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\r\n        for (let level = 0; level < mipmapCount; level++) {\r\n            const imageSize = new Int32Array(this.data.buffer, this.data.byteOffset + dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\r\n            dataOffset += 4; //image data starts from next multiple of 4 offset. Each face refers to same imagesize field above.\r\n            for (let face = 0; face < this.numberOfFaces; face++) {\r\n                const byteArray = new Uint8Array(this.data.buffer, this.data.byteOffset + dataOffset, imageSize);\r\n\r\n                const engine = texture.getEngine();\r\n                engine._uploadCompressedDataToTextureDirectly(texture, texture.format, width, height, byteArray, face, level);\r\n\r\n                dataOffset += imageSize; // add size of the image for the next face/mipmap\r\n                dataOffset += 3 - ((imageSize + 3) % 4); // add padding for odd sized image\r\n            }\r\n            width = Math.max(1.0, width * 0.5);\r\n            height = Math.max(1.0, height * 0.5);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the given data starts with a KTX file identifier.\r\n     * @param data the data to check\r\n     * @returns true if the data is a KTX file or false otherwise\r\n     */\r\n    public static IsValid(data: ArrayBufferView): boolean {\r\n        if (data.byteLength >= 12) {\r\n            // '«', 'K', 'T', 'X', ' ', '1', '1', '»', '\\r', '\\n', '\\x1A', '\\n'\r\n            const identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\r\n            if (\r\n                identifier[0] === 0xab &&\r\n                identifier[1] === 0x4b &&\r\n                identifier[2] === 0x54 &&\r\n                identifier[3] === 0x58 &&\r\n                identifier[4] === 0x20 &&\r\n                identifier[5] === 0x31 &&\r\n                identifier[6] === 0x31 &&\r\n                identifier[7] === 0xbb &&\r\n                identifier[8] === 0x0d &&\r\n                identifier[9] === 0x0a &&\r\n                identifier[10] === 0x1a &&\r\n                identifier[11] === 0x0a\r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}