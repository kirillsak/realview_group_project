{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nfunction validateAsync(data, rootUrl, fileName, getExternalResource) {\n  const options = {\n    externalResourceFunction: uri => getExternalResource(uri).then(value => new Uint8Array(value))\n  };\n  if (fileName) {\n    options.uri = rootUrl === \"file:\" ? fileName : rootUrl + fileName;\n  }\n  return data instanceof ArrayBuffer ? GLTFValidator.validateBytes(new Uint8Array(data), options) : GLTFValidator.validateString(data, options);\n}\n/**\n * The worker function that gets converted to a blob url to pass into a worker.\n */\nfunction workerFunc() {\n  const pendingExternalResources = [];\n  onmessage = message => {\n    const data = message.data;\n    switch (data.id) {\n      case \"init\":\n        {\n          importScripts(data.url);\n          break;\n        }\n      case \"validate\":\n        {\n          validateAsync(data.data, data.rootUrl, data.fileName, uri => new Promise((resolve, reject) => {\n            const index = pendingExternalResources.length;\n            pendingExternalResources.push({\n              resolve,\n              reject\n            });\n            postMessage({\n              id: \"getExternalResource\",\n              index: index,\n              uri: uri\n            });\n          })).then(value => {\n            postMessage({\n              id: \"validate.resolve\",\n              value: value\n            });\n          }, reason => {\n            postMessage({\n              id: \"validate.reject\",\n              reason: reason\n            });\n          });\n          break;\n        }\n      case \"getExternalResource.resolve\":\n        {\n          pendingExternalResources[data.index].resolve(data.value);\n          break;\n        }\n      case \"getExternalResource.reject\":\n        {\n          pendingExternalResources[data.index].reject(data.reason);\n          break;\n        }\n    }\n  };\n}\n/**\n * glTF validation\n */\nexport class GLTFValidation {\n  /**\n   * Validate a glTF asset using the glTF-Validator.\n   * @param data The JSON of a glTF or the array buffer of a binary glTF\n   * @param rootUrl The root url for the glTF\n   * @param fileName The file name for the glTF\n   * @param getExternalResource The callback to get external resources for the glTF validator\n   * @returns A promise that resolves with the glTF validation results once complete\n   */\n  static ValidateAsync(data, rootUrl, fileName, getExternalResource) {\n    if (typeof Worker === \"function\") {\n      return new Promise((resolve, reject) => {\n        const workerContent = `${validateAsync}(${workerFunc})()`;\n        const workerBlobUrl = URL.createObjectURL(new Blob([workerContent], {\n          type: \"application/javascript\"\n        }));\n        const worker = new Worker(workerBlobUrl);\n        const onError = error => {\n          worker.removeEventListener(\"error\", onError);\n          worker.removeEventListener(\"message\", onMessage);\n          reject(error);\n        };\n        const onMessage = message => {\n          const data = message.data;\n          switch (data.id) {\n            case \"getExternalResource\":\n              {\n                getExternalResource(data.uri).then(value => {\n                  worker.postMessage({\n                    id: \"getExternalResource.resolve\",\n                    index: data.index,\n                    value: value\n                  }, [value]);\n                }, reason => {\n                  worker.postMessage({\n                    id: \"getExternalResource.reject\",\n                    index: data.index,\n                    reason: reason\n                  });\n                });\n                break;\n              }\n            case \"validate.resolve\":\n              {\n                worker.removeEventListener(\"error\", onError);\n                worker.removeEventListener(\"message\", onMessage);\n                resolve(data.value);\n                worker.terminate();\n                break;\n              }\n            case \"validate.reject\":\n              {\n                worker.removeEventListener(\"error\", onError);\n                worker.removeEventListener(\"message\", onMessage);\n                reject(data.reason);\n                worker.terminate();\n              }\n          }\n        };\n        worker.addEventListener(\"error\", onError);\n        worker.addEventListener(\"message\", onMessage);\n        worker.postMessage({\n          id: \"init\",\n          url: this.Configuration.url\n        });\n        worker.postMessage({\n          id: \"validate\",\n          data: data,\n          rootUrl: rootUrl,\n          fileName: fileName\n        });\n      });\n    } else {\n      if (!this._LoadScriptPromise) {\n        this._LoadScriptPromise = Tools.LoadScriptAsync(this.Configuration.url);\n      }\n      return this._LoadScriptPromise.then(() => {\n        return validateAsync(data, rootUrl, fileName, getExternalResource);\n      });\n    }\n  }\n}\n/**\n * The configuration. Defaults to `{ url: \"https://preview.babylonjs.com/gltf_validator.js\" }`.\n */\nGLTFValidation.Configuration = {\n  url: \"https://preview.babylonjs.com/gltf_validator.js\"\n};","map":{"version":3,"mappings":"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","names":["Tools","validateAsync","data","rootUrl","fileName","getExternalResource","options","externalResourceFunction","uri","then","value","Uint8Array","ArrayBuffer","GLTFValidator","validateBytes","validateString","workerFunc","pendingExternalResources","onmessage","message","id","importScripts","url","Promise","resolve","reject","index","length","push","postMessage","reason","GLTFValidation","ValidateAsync","Worker","workerContent","workerBlobUrl","URL","createObjectURL","Blob","type","worker","onError","error","removeEventListener","onMessage","terminate","addEventListener","Configuration","_LoadScriptPromise","LoadScriptAsync"],"sourceRoot":"","sources":["../../../../lts/loaders/generated/glTF/glTFValidation.ts"],"sourcesContent":["import type * as GLTF2 from \"babylonjs-gltf2interface\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let GLTFValidator: GLTF2.IGLTFValidator;\r\n\r\n// WorkerGlobalScope\r\ndeclare function importScripts(...urls: string[]): void;\r\ndeclare function postMessage(message: any, transfer?: any[]): void;\r\n\r\nfunction validateAsync(\r\n    data: string | ArrayBuffer,\r\n    rootUrl: string,\r\n    fileName: string,\r\n    getExternalResource: (uri: string) => Promise<ArrayBuffer>\r\n): Promise<GLTF2.IGLTFValidationResults> {\r\n    const options: GLTF2.IGLTFValidationOptions = {\r\n        externalResourceFunction: (uri) => getExternalResource(uri).then((value) => new Uint8Array(value)),\r\n    };\r\n\r\n    if (fileName) {\r\n        options.uri = rootUrl === \"file:\" ? fileName : rootUrl + fileName;\r\n    }\r\n\r\n    return data instanceof ArrayBuffer ? GLTFValidator.validateBytes(new Uint8Array(data), options) : GLTFValidator.validateString(data, options);\r\n}\r\n\r\n/**\r\n * The worker function that gets converted to a blob url to pass into a worker.\r\n */\r\nfunction workerFunc(): void {\r\n    const pendingExternalResources: Array<{ resolve: (data: any) => void; reject: (reason: any) => void }> = [];\r\n\r\n    onmessage = (message) => {\r\n        const data = message.data;\r\n        switch (data.id) {\r\n            case \"init\": {\r\n                importScripts(data.url);\r\n                break;\r\n            }\r\n            case \"validate\": {\r\n                validateAsync(\r\n                    data.data,\r\n                    data.rootUrl,\r\n                    data.fileName,\r\n                    (uri) =>\r\n                        new Promise((resolve, reject) => {\r\n                            const index = pendingExternalResources.length;\r\n                            pendingExternalResources.push({ resolve, reject });\r\n                            postMessage({ id: \"getExternalResource\", index: index, uri: uri });\r\n                        })\r\n                ).then(\r\n                    (value) => {\r\n                        postMessage({ id: \"validate.resolve\", value: value });\r\n                    },\r\n                    (reason) => {\r\n                        postMessage({ id: \"validate.reject\", reason: reason });\r\n                    }\r\n                );\r\n                break;\r\n            }\r\n            case \"getExternalResource.resolve\": {\r\n                pendingExternalResources[data.index].resolve(data.value);\r\n                break;\r\n            }\r\n            case \"getExternalResource.reject\": {\r\n                pendingExternalResources[data.index].reject(data.reason);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Configuration for glTF validation\r\n */\r\nexport interface IGLTFValidationConfiguration {\r\n    /**\r\n     * The url of the glTF validator.\r\n     */\r\n    url: string;\r\n}\r\n\r\n/**\r\n * glTF validation\r\n */\r\nexport class GLTFValidation {\r\n    /**\r\n     * The configuration. Defaults to `{ url: \"https://preview.babylonjs.com/gltf_validator.js\" }`.\r\n     */\r\n    public static Configuration: IGLTFValidationConfiguration = {\r\n        url: \"https://preview.babylonjs.com/gltf_validator.js\",\r\n    };\r\n\r\n    private static _LoadScriptPromise: Promise<void>;\r\n\r\n    /**\r\n     * Validate a glTF asset using the glTF-Validator.\r\n     * @param data The JSON of a glTF or the array buffer of a binary glTF\r\n     * @param rootUrl The root url for the glTF\r\n     * @param fileName The file name for the glTF\r\n     * @param getExternalResource The callback to get external resources for the glTF validator\r\n     * @returns A promise that resolves with the glTF validation results once complete\r\n     */\r\n    public static ValidateAsync(\r\n        data: string | ArrayBuffer,\r\n        rootUrl: string,\r\n        fileName: string,\r\n        getExternalResource: (uri: string) => Promise<ArrayBuffer>\r\n    ): Promise<GLTF2.IGLTFValidationResults> {\r\n        if (typeof Worker === \"function\") {\r\n            return new Promise((resolve, reject) => {\r\n                const workerContent = `${validateAsync}(${workerFunc})()`;\r\n                const workerBlobUrl = URL.createObjectURL(new Blob([workerContent], { type: \"application/javascript\" }));\r\n                const worker = new Worker(workerBlobUrl);\r\n\r\n                const onError = (error: ErrorEvent) => {\r\n                    worker.removeEventListener(\"error\", onError);\r\n                    worker.removeEventListener(\"message\", onMessage);\r\n                    reject(error);\r\n                };\r\n\r\n                const onMessage = (message: MessageEvent) => {\r\n                    const data = message.data;\r\n                    switch (data.id) {\r\n                        case \"getExternalResource\": {\r\n                            getExternalResource(data.uri).then(\r\n                                (value) => {\r\n                                    worker.postMessage({ id: \"getExternalResource.resolve\", index: data.index, value: value }, [value]);\r\n                                },\r\n                                (reason) => {\r\n                                    worker.postMessage({ id: \"getExternalResource.reject\", index: data.index, reason: reason });\r\n                                }\r\n                            );\r\n                            break;\r\n                        }\r\n                        case \"validate.resolve\": {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            resolve(data.value);\r\n                            worker.terminate();\r\n                            break;\r\n                        }\r\n                        case \"validate.reject\": {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            reject(data.reason);\r\n                            worker.terminate();\r\n                        }\r\n                    }\r\n                };\r\n\r\n                worker.addEventListener(\"error\", onError);\r\n                worker.addEventListener(\"message\", onMessage);\r\n\r\n                worker.postMessage({ id: \"init\", url: this.Configuration.url });\r\n                worker.postMessage({ id: \"validate\", data: data, rootUrl: rootUrl, fileName: fileName });\r\n            });\r\n        } else {\r\n            if (!this._LoadScriptPromise) {\r\n                this._LoadScriptPromise = Tools.LoadScriptAsync(this.Configuration.url);\r\n            }\r\n\r\n            return this._LoadScriptPromise.then(() => {\r\n                return validateAsync(data, rootUrl, fileName, getExternalResource);\r\n            });\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}