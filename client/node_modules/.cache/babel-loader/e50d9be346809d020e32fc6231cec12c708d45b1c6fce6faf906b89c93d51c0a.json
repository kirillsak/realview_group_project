{"ast":null,"code":"import { WebXRAbstractMotionController } from \"./webXRAbstractMotionController.js\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { Axis, Space } from \"../../Maths/math.axis.js\";\nimport { Color3 } from \"../../Maths/math.color.js\";\nimport { WebXRControllerComponent } from \"./webXRControllerComponent.js\";\nimport { CreateSphere } from \"../../Meshes/Builders/sphereBuilder.js\";\nimport { StandardMaterial } from \"../../Materials/standardMaterial.js\";\nimport { Logger } from \"../../Misc/logger.js\";\n/**\n * A profiled motion controller has its profile loaded from an online repository.\n * The class is responsible of loading the model, mapping the keys and enabling model-animations\n */\nexport class WebXRProfiledMotionController extends WebXRAbstractMotionController {\n  constructor(scene, xrInput, _profile, _repositoryUrl,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  controllerCache) {\n    super(scene, _profile.layouts[xrInput.handedness || \"none\"], xrInput.gamepad, xrInput.handedness, undefined, controllerCache);\n    this._repositoryUrl = _repositoryUrl;\n    this.controllerCache = controllerCache;\n    this._buttonMeshMapping = {};\n    this._touchDots = {};\n    this.profileId = _profile.profileId;\n  }\n  dispose() {\n    super.dispose();\n    if (!this.controllerCache) {\n      Object.keys(this._touchDots).forEach(visResKey => {\n        this._touchDots[visResKey].dispose();\n      });\n    }\n  }\n  _getFilenameAndPath() {\n    return {\n      filename: this.layout.assetPath,\n      path: `${this._repositoryUrl}/profiles/${this.profileId}/`\n    };\n  }\n  _getModelLoadingConstraints() {\n    const glbLoaded = SceneLoader.IsPluginForExtensionAvailable(\".glb\");\n    if (!glbLoaded) {\n      Logger.Warn(\"glTF / glb loader was not registered, using generic controller instead\");\n    }\n    return glbLoaded;\n  }\n  _processLoadedModel(_meshes) {\n    this.getComponentIds().forEach(type => {\n      const componentInLayout = this.layout.components[type];\n      this._buttonMeshMapping[type] = {\n        mainMesh: this._getChildByName(this.rootMesh, componentInLayout.rootNodeName),\n        states: {}\n      };\n      Object.keys(componentInLayout.visualResponses).forEach(visualResponseKey => {\n        const visResponse = componentInLayout.visualResponses[visualResponseKey];\n        if (visResponse.valueNodeProperty === \"transform\") {\n          this._buttonMeshMapping[type].states[visualResponseKey] = {\n            valueMesh: this._getChildByName(this.rootMesh, visResponse.valueNodeName),\n            minMesh: this._getChildByName(this.rootMesh, visResponse.minNodeName),\n            maxMesh: this._getChildByName(this.rootMesh, visResponse.maxNodeName)\n          };\n        } else {\n          // visibility, usually for touchpads\n          const nameOfMesh = componentInLayout.type === WebXRControllerComponent.TOUCHPAD_TYPE && componentInLayout.touchPointNodeName ? componentInLayout.touchPointNodeName : visResponse.valueNodeName;\n          this._buttonMeshMapping[type].states[visualResponseKey] = {\n            valueMesh: this._getChildByName(this.rootMesh, nameOfMesh)\n          };\n          if (componentInLayout.type === WebXRControllerComponent.TOUCHPAD_TYPE && !this._touchDots[visualResponseKey]) {\n            const dot = CreateSphere(visualResponseKey + \"dot\", {\n              diameter: 0.0015,\n              segments: 8\n            }, this.scene);\n            dot.material = new StandardMaterial(visualResponseKey + \"mat\", this.scene);\n            dot.material.diffuseColor = Color3.Red();\n            dot.parent = this._buttonMeshMapping[type].states[visualResponseKey].valueMesh || null;\n            dot.isVisible = false;\n            this._touchDots[visualResponseKey] = dot;\n          }\n        }\n      });\n    });\n  }\n  _setRootMesh(meshes) {\n    this.rootMesh = new Mesh(this.profileId + \"-\" + this.handedness, this.scene);\n    this.rootMesh.isPickable = false;\n    let rootMesh;\n    // Find the root node in the loaded glTF scene, and attach it as a child of 'parentMesh'\n    for (let i = 0; i < meshes.length; i++) {\n      const mesh = meshes[i];\n      mesh.isPickable = false;\n      if (!mesh.parent) {\n        // Handle root node, attach to the new parentMesh\n        rootMesh = mesh;\n      }\n    }\n    if (rootMesh) {\n      rootMesh.setParent(this.rootMesh);\n    }\n    if (!this.scene.useRightHandedSystem) {\n      this.rootMesh.rotate(Axis.Y, Math.PI, Space.WORLD);\n    }\n  }\n  _updateModel(_xrFrame) {\n    if (this.disableAnimation) {\n      return;\n    }\n    this.getComponentIds().forEach(id => {\n      const component = this.getComponent(id);\n      if (!component.hasChanges) {\n        return;\n      }\n      const meshes = this._buttonMeshMapping[id];\n      const componentInLayout = this.layout.components[id];\n      Object.keys(componentInLayout.visualResponses).forEach(visualResponseKey => {\n        const visResponse = componentInLayout.visualResponses[visualResponseKey];\n        let value = component.value;\n        if (visResponse.componentProperty === \"xAxis\") {\n          value = component.axes.x;\n        } else if (visResponse.componentProperty === \"yAxis\") {\n          value = component.axes.y;\n        }\n        if (visResponse.valueNodeProperty === \"transform\") {\n          this._lerpTransform(meshes.states[visualResponseKey], value, visResponse.componentProperty !== \"button\");\n        } else {\n          // visibility\n          const valueMesh = meshes.states[visualResponseKey].valueMesh;\n          if (valueMesh) {\n            valueMesh.isVisible = component.touched || component.pressed;\n          }\n          if (this._touchDots[visualResponseKey]) {\n            this._touchDots[visualResponseKey].isVisible = component.touched || component.pressed;\n          }\n        }\n      });\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["WebXRAbstractMotionController","SceneLoader","Mesh","Axis","Space","Color3","WebXRControllerComponent","CreateSphere","StandardMaterial","Logger","WebXRProfiledMotionController","constructor","scene","xrInput","_profile","_repositoryUrl","controllerCache","layouts","handedness","gamepad","undefined","profileId","dispose","Object","keys","_touchDots","forEach","visResKey","_getFilenameAndPath","filename","layout","assetPath","path","_getModelLoadingConstraints","glbLoaded","IsPluginForExtensionAvailable","Warn","_processLoadedModel","_meshes","getComponentIds","type","componentInLayout","components","_buttonMeshMapping","mainMesh","_getChildByName","rootMesh","rootNodeName","states","visualResponses","visualResponseKey","visResponse","valueNodeProperty","valueMesh","valueNodeName","minMesh","minNodeName","maxMesh","maxNodeName","nameOfMesh","TOUCHPAD_TYPE","touchPointNodeName","dot","diameter","segments","material","diffuseColor","Red","parent","isVisible","_setRootMesh","meshes","isPickable","i","length","mesh","setParent","useRightHandedSystem","rotate","Y","Math","PI","WORLD","_updateModel","_xrFrame","disableAnimation","id","component","getComponent","hasChanges","value","componentProperty","axes","x","y","_lerpTransform","touched","pressed"],"sourceRoot":"","sources":["../../../../../lts/core/generated/XR/motionController/webXRProfiledMotionController.ts"],"sourcesContent":["import type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { IMotionControllerProfile, IMotionControllerMeshMap } from \"./webXRAbstractMotionController\";\r\nimport { WebXRAbstractMotionController } from \"./webXRAbstractMotionController\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { Axis, Space } from \"../../Maths/math.axis\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport { WebXRControllerComponent } from \"./webXRControllerComponent\";\r\nimport { CreateSphere } from \"../../Meshes/Builders/sphereBuilder\";\r\nimport { StandardMaterial } from \"../../Materials/standardMaterial\";\r\nimport { Logger } from \"../../Misc/logger\";\r\n\r\n/**\r\n * A profiled motion controller has its profile loaded from an online repository.\r\n * The class is responsible of loading the model, mapping the keys and enabling model-animations\r\n */\r\nexport class WebXRProfiledMotionController extends WebXRAbstractMotionController {\r\n    private _buttonMeshMapping: {\r\n        [buttonName: string]: {\r\n            mainMesh?: AbstractMesh;\r\n            states: {\r\n                [state: string]: IMotionControllerMeshMap;\r\n            };\r\n        };\r\n    } = {};\r\n    private _touchDots: { [visKey: string]: AbstractMesh } = {};\r\n\r\n    /**\r\n     * The profile ID of this controller. Will be populated when the controller initializes.\r\n     */\r\n    public profileId: string;\r\n\r\n    constructor(\r\n        scene: Scene,\r\n        xrInput: XRInputSource,\r\n        _profile: IMotionControllerProfile,\r\n        private _repositoryUrl: string,\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        private controllerCache?: Array<{\r\n            filename: string;\r\n            path: string;\r\n            meshes: AbstractMesh[];\r\n        }>\r\n    ) {\r\n        super(scene, _profile.layouts[xrInput.handedness || \"none\"], xrInput.gamepad as any, xrInput.handedness, undefined, controllerCache);\r\n        this.profileId = _profile.profileId;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        if (!this.controllerCache) {\r\n            Object.keys(this._touchDots).forEach((visResKey) => {\r\n                this._touchDots[visResKey].dispose();\r\n            });\r\n        }\r\n    }\r\n\r\n    protected _getFilenameAndPath(): { filename: string; path: string } {\r\n        return {\r\n            filename: this.layout.assetPath,\r\n            path: `${this._repositoryUrl}/profiles/${this.profileId}/`,\r\n        };\r\n    }\r\n\r\n    protected _getModelLoadingConstraints(): boolean {\r\n        const glbLoaded = SceneLoader.IsPluginForExtensionAvailable(\".glb\");\r\n        if (!glbLoaded) {\r\n            Logger.Warn(\"glTF / glb loader was not registered, using generic controller instead\");\r\n        }\r\n        return glbLoaded;\r\n    }\r\n\r\n    protected _processLoadedModel(_meshes: AbstractMesh[]): void {\r\n        this.getComponentIds().forEach((type) => {\r\n            const componentInLayout = this.layout.components[type];\r\n            this._buttonMeshMapping[type] = {\r\n                mainMesh: this._getChildByName(this.rootMesh!, componentInLayout.rootNodeName),\r\n                states: {},\r\n            };\r\n            Object.keys(componentInLayout.visualResponses).forEach((visualResponseKey) => {\r\n                const visResponse = componentInLayout.visualResponses[visualResponseKey];\r\n                if (visResponse.valueNodeProperty === \"transform\") {\r\n                    this._buttonMeshMapping[type].states[visualResponseKey] = {\r\n                        valueMesh: this._getChildByName(this.rootMesh!, visResponse.valueNodeName!),\r\n                        minMesh: this._getChildByName(this.rootMesh!, visResponse.minNodeName!),\r\n                        maxMesh: this._getChildByName(this.rootMesh!, visResponse.maxNodeName!),\r\n                    };\r\n                } else {\r\n                    // visibility, usually for touchpads\r\n                    const nameOfMesh =\r\n                        componentInLayout.type === WebXRControllerComponent.TOUCHPAD_TYPE && componentInLayout.touchPointNodeName\r\n                            ? componentInLayout.touchPointNodeName\r\n                            : visResponse.valueNodeName!;\r\n                    this._buttonMeshMapping[type].states[visualResponseKey] = {\r\n                        valueMesh: this._getChildByName(this.rootMesh!, nameOfMesh),\r\n                    };\r\n                    if (componentInLayout.type === WebXRControllerComponent.TOUCHPAD_TYPE && !this._touchDots[visualResponseKey]) {\r\n                        const dot = CreateSphere(\r\n                            visualResponseKey + \"dot\",\r\n                            {\r\n                                diameter: 0.0015,\r\n                                segments: 8,\r\n                            },\r\n                            this.scene\r\n                        );\r\n                        dot.material = new StandardMaterial(visualResponseKey + \"mat\", this.scene);\r\n                        (<StandardMaterial>dot.material).diffuseColor = Color3.Red();\r\n                        dot.parent = this._buttonMeshMapping[type].states[visualResponseKey].valueMesh || null;\r\n                        dot.isVisible = false;\r\n                        this._touchDots[visualResponseKey] = dot;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    protected _setRootMesh(meshes: AbstractMesh[]): void {\r\n        this.rootMesh = new Mesh(this.profileId + \"-\" + this.handedness, this.scene);\r\n        this.rootMesh.isPickable = false;\r\n        let rootMesh;\r\n        // Find the root node in the loaded glTF scene, and attach it as a child of 'parentMesh'\r\n        for (let i = 0; i < meshes.length; i++) {\r\n            const mesh = meshes[i];\r\n\r\n            mesh.isPickable = false;\r\n\r\n            if (!mesh.parent) {\r\n                // Handle root node, attach to the new parentMesh\r\n                rootMesh = mesh;\r\n            }\r\n        }\r\n\r\n        if (rootMesh) {\r\n            rootMesh.setParent(this.rootMesh);\r\n        }\r\n        if (!this.scene.useRightHandedSystem) {\r\n            this.rootMesh.rotate(Axis.Y, Math.PI, Space.WORLD);\r\n        }\r\n    }\r\n\r\n    protected _updateModel(_xrFrame: XRFrame): void {\r\n        if (this.disableAnimation) {\r\n            return;\r\n        }\r\n        this.getComponentIds().forEach((id) => {\r\n            const component = this.getComponent(id);\r\n            if (!component.hasChanges) {\r\n                return;\r\n            }\r\n            const meshes = this._buttonMeshMapping[id];\r\n            const componentInLayout = this.layout.components[id];\r\n            Object.keys(componentInLayout.visualResponses).forEach((visualResponseKey) => {\r\n                const visResponse = componentInLayout.visualResponses[visualResponseKey];\r\n                let value = component.value;\r\n                if (visResponse.componentProperty === \"xAxis\") {\r\n                    value = component.axes.x;\r\n                } else if (visResponse.componentProperty === \"yAxis\") {\r\n                    value = component.axes.y;\r\n                }\r\n                if (visResponse.valueNodeProperty === \"transform\") {\r\n                    this._lerpTransform(meshes.states[visualResponseKey], value, visResponse.componentProperty !== \"button\");\r\n                } else {\r\n                    // visibility\r\n                    const valueMesh = meshes.states[visualResponseKey].valueMesh;\r\n                    if (valueMesh) {\r\n                        valueMesh.isVisible = component.touched || component.pressed;\r\n                    }\r\n                    if (this._touchDots[visualResponseKey]) {\r\n                        this._touchDots[visualResponseKey].isVisible = component.touched || component.pressed;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}