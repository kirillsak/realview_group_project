{"ast":null,"code":"import { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Block used to output the depth to a shadow map\n */\nexport class ShadowMapBlock extends NodeMaterialBlock {\n  /**\n   * Create a new ShadowMapBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\n    this.registerInput(\"viewProjection\", NodeMaterialBlockConnectionPointTypes.Matrix, false);\n    this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\n    this.registerOutput(\"depth\", NodeMaterialBlockConnectionPointTypes.Vector3);\n    this.worldNormal.addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Color3 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"ShadowMapBlock\";\n  }\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n  initialize(state) {\n    state._excludeVariableName(\"vPositionWSM\");\n    state._excludeVariableName(\"lightDataSM\");\n    state._excludeVariableName(\"biasAndScaleSM\");\n    state._excludeVariableName(\"depthValuesSM\");\n    state._excludeVariableName(\"clipPos\");\n    state._excludeVariableName(\"worldPos\");\n    state._excludeVariableName(\"zSM\");\n  }\n  /**\n   * Gets the world position input component\n   */\n  get worldPosition() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the view x projection input component\n   */\n  get viewProjection() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the world normal input component\n   */\n  get worldNormal() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the depth output component\n   */\n  get depth() {\n    return this._outputs[0];\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const comments = `//${this.name}`;\n    state._emitUniformFromString(\"biasAndScaleSM\", \"vec3\");\n    state._emitUniformFromString(\"lightDataSM\", \"vec3\");\n    state._emitUniformFromString(\"depthValuesSM\", \"vec2\");\n    state._emitFunctionFromInclude(\"packingFunctions\", comments);\n    state.compilationString += `vec4 worldPos = ${this.worldPosition.associatedVariableName};\\r\\n`;\n    state.compilationString += `vec3 vPositionWSM;\\r\\n`;\n    state.compilationString += `float vDepthMetricSM = 0.0;\\r\\n`;\n    state.compilationString += `float zSM;\\r\\n`;\n    if (this.worldNormal.isConnected) {\n      state.compilationString += `vec3 vNormalW = ${this.worldNormal.associatedVariableName}.xyz;\\r\\n`;\n      state.compilationString += state._emitCodeFromInclude(\"shadowMapVertexNormalBias\", comments);\n    }\n    state.compilationString += `vec4 clipPos = ${this.viewProjection.associatedVariableName} * worldPos;\\r\\n`;\n    state.compilationString += state._emitCodeFromInclude(\"shadowMapVertexMetric\", comments, {\n      replaceStrings: [{\n        search: /gl_Position/g,\n        replace: \"clipPos\"\n      }]\n    });\n    state.compilationString += state._emitCodeFromInclude(\"shadowMapFragment\", comments, {\n      replaceStrings: [{\n        search: /return;/g,\n        replace: \"\"\n      }]\n    });\n    state.compilationString += `\n            #if SM_DEPTHTEXTURE == 1\n                #ifdef IS_NDC_HALF_ZRANGE\n                    gl_FragDepth = (clipPos.z / clipPos.w);\n                #else\n                    gl_FragDepth = (clipPos.z / clipPos.w) * 0.5 + 0.5;\n                #endif\n            #endif\n        `;\n    state.compilationString += `${this._declareOutput(this.depth, state)} = vec3(depthSM, 1., 1.);\\r\\n`;\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.ShadowMapBlock\", ShadowMapBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","ShadowMapBlock","constructor","name","Fragment","registerInput","Vector4","Matrix","AutoDetect","registerOutput","Vector3","worldNormal","addExcludedConnectionPointFromAllowedTypes","Color3","getClassName","initialize","state","_excludeVariableName","worldPosition","_inputs","viewProjection","depth","_outputs","_buildBlock","comments","_emitUniformFromString","_emitFunctionFromInclude","compilationString","associatedVariableName","isConnected","_emitCodeFromInclude","replaceStrings","search","replace","_declareOutput"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/Fragment/shadowMapBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n\r\n/**\r\n * Block used to output the depth to a shadow map\r\n */\r\nexport class ShadowMapBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new ShadowMapBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\r\n        this.registerInput(\"viewProjection\", NodeMaterialBlockConnectionPointTypes.Matrix, false);\r\n        this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\r\n        this.registerOutput(\"depth\", NodeMaterialBlockConnectionPointTypes.Vector3);\r\n\r\n        this.worldNormal.addExcludedConnectionPointFromAllowedTypes(\r\n            NodeMaterialBlockConnectionPointTypes.Color3 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ShadowMapBlock\";\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"vPositionWSM\");\r\n        state._excludeVariableName(\"lightDataSM\");\r\n        state._excludeVariableName(\"biasAndScaleSM\");\r\n        state._excludeVariableName(\"depthValuesSM\");\r\n        state._excludeVariableName(\"clipPos\");\r\n        state._excludeVariableName(\"worldPos\");\r\n        state._excludeVariableName(\"zSM\");\r\n    }\r\n\r\n    /**\r\n     * Gets the world position input component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the view x projection input component\r\n     */\r\n    public get viewProjection(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the world normal input component\r\n     */\r\n    public get worldNormal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the depth output component\r\n     */\r\n    public get depth(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const comments = `//${this.name}`;\r\n\r\n        state._emitUniformFromString(\"biasAndScaleSM\", \"vec3\");\r\n        state._emitUniformFromString(\"lightDataSM\", \"vec3\");\r\n        state._emitUniformFromString(\"depthValuesSM\", \"vec2\");\r\n\r\n        state._emitFunctionFromInclude(\"packingFunctions\", comments);\r\n\r\n        state.compilationString += `vec4 worldPos = ${this.worldPosition.associatedVariableName};\\r\\n`;\r\n        state.compilationString += `vec3 vPositionWSM;\\r\\n`;\r\n        state.compilationString += `float vDepthMetricSM = 0.0;\\r\\n`;\r\n        state.compilationString += `float zSM;\\r\\n`;\r\n\r\n        if (this.worldNormal.isConnected) {\r\n            state.compilationString += `vec3 vNormalW = ${this.worldNormal.associatedVariableName}.xyz;\\r\\n`;\r\n            state.compilationString += state._emitCodeFromInclude(\"shadowMapVertexNormalBias\", comments);\r\n        }\r\n\r\n        state.compilationString += `vec4 clipPos = ${this.viewProjection.associatedVariableName} * worldPos;\\r\\n`;\r\n\r\n        state.compilationString += state._emitCodeFromInclude(\"shadowMapVertexMetric\", comments, {\r\n            replaceStrings: [\r\n                {\r\n                    search: /gl_Position/g,\r\n                    replace: \"clipPos\",\r\n                },\r\n            ],\r\n        });\r\n\r\n        state.compilationString += state._emitCodeFromInclude(\"shadowMapFragment\", comments, {\r\n            replaceStrings: [\r\n                {\r\n                    search: /return;/g,\r\n                    replace: \"\",\r\n                },\r\n            ],\r\n        });\r\n\r\n        state.compilationString += `\r\n            #if SM_DEPTHTEXTURE == 1\r\n                #ifdef IS_NDC_HALF_ZRANGE\r\n                    gl_FragDepth = (clipPos.z / clipPos.w);\r\n                #else\r\n                    gl_FragDepth = (clipPos.z / clipPos.w) * 0.5 + 0.5;\r\n                #endif\r\n            #endif\r\n        `;\r\n\r\n        state.compilationString += `${this._declareOutput(this.depth, state)} = vec3(depthSM, 1., 1.);\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ShadowMapBlock\", ShadowMapBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}