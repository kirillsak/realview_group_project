{"ast":null,"code":"import { __decorate } from \"../../tslib.es6.js\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents.js\";\nimport { EventConstants } from \"../../Events/deviceInputEvents.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Base class for mouse wheel input..\n * See FollowCameraMouseWheelInput in src/Cameras/Inputs/freeCameraMouseWheelInput.ts\n * for example usage.\n */\nexport class BaseCameraMouseWheelInput {\n  constructor() {\n    /**\n     * How fast is the camera moves in relation to X axis mouseWheel events.\n     * Use negative value to reverse direction.\n     */\n    this.wheelPrecisionX = 3.0;\n    /**\n     * How fast is the camera moves in relation to Y axis mouseWheel events.\n     * Use negative value to reverse direction.\n     */\n    this.wheelPrecisionY = 3.0;\n    /**\n     * How fast is the camera moves in relation to Z axis mouseWheel events.\n     * Use negative value to reverse direction.\n     */\n    this.wheelPrecisionZ = 3.0;\n    /**\n     * Observable for when a mouse wheel move event occurs.\n     */\n    this.onChangedObservable = new Observable();\n    /**\n     * Incremental value of multiple mouse wheel movements of the X axis.\n     * Should be zero-ed when read.\n     */\n    this._wheelDeltaX = 0;\n    /**\n     * Incremental value of multiple mouse wheel movements of the Y axis.\n     * Should be zero-ed when read.\n     */\n    this._wheelDeltaY = 0;\n    /**\n     * Incremental value of multiple mouse wheel movements of the Z axis.\n     * Should be zero-ed when read.\n     */\n    this._wheelDeltaZ = 0;\n    /**\n     * Firefox uses a different scheme to report scroll distances to other\n     * browsers. Rather than use complicated methods to calculate the exact\n     * multiple we need to apply, let's just cheat and use a constant.\n     * https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode\n     * https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n     */\n    this._ffMultiplier = 12;\n    /**\n     * Different event attributes for wheel data fall into a few set ranges.\n     * Some relevant but dated date here:\n     * https://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers\n     */\n    this._normalize = 120;\n  }\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   * @param noPreventDefault Defines whether event caught by the controls\n   *   should call preventdefault().\n   *   (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n   */\n  attachControl(noPreventDefault) {\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n    this._wheel = pointer => {\n      // sanity check - this should be a PointerWheel event.\n      if (pointer.type !== PointerEventTypes.POINTERWHEEL) {\n        return;\n      }\n      const event = pointer.event;\n      const platformScale = event.deltaMode === EventConstants.DOM_DELTA_LINE ? this._ffMultiplier : 1; // If this happens to be set to DOM_DELTA_LINE, adjust accordingly\n      this._wheelDeltaX += this.wheelPrecisionX * platformScale * event.deltaX / this._normalize;\n      this._wheelDeltaY -= this.wheelPrecisionY * platformScale * event.deltaY / this._normalize;\n      this._wheelDeltaZ += this.wheelPrecisionZ * platformScale * event.deltaZ / this._normalize;\n      if (event.preventDefault) {\n        if (!noPreventDefault) {\n          event.preventDefault();\n        }\n      }\n    };\n    this._observer = this.camera.getScene()._inputManager._addCameraPointerObserver(this._wheel, PointerEventTypes.POINTERWHEEL);\n  }\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n  detachControl() {\n    if (this._observer) {\n      this.camera.getScene()._inputManager._removeCameraPointerObserver(this._observer);\n      this._observer = null;\n      this._wheel = null;\n    }\n    if (this.onChangedObservable) {\n      this.onChangedObservable.clear();\n    }\n  }\n  /**\n   * Called for each rendered frame.\n   */\n  checkInputs() {\n    this.onChangedObservable.notifyObservers({\n      wheelDeltaX: this._wheelDeltaX,\n      wheelDeltaY: this._wheelDeltaY,\n      wheelDeltaZ: this._wheelDeltaZ\n    });\n    // Clear deltas.\n    this._wheelDeltaX = 0;\n    this._wheelDeltaY = 0;\n    this._wheelDeltaZ = 0;\n  }\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n  getClassName() {\n    return \"BaseCameraMouseWheelInput\";\n  }\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n  getSimpleName() {\n    return \"mousewheel\";\n  }\n}\n__decorate([serialize()], BaseCameraMouseWheelInput.prototype, \"wheelPrecisionX\", void 0);\n__decorate([serialize()], BaseCameraMouseWheelInput.prototype, \"wheelPrecisionY\", void 0);\n__decorate([serialize()], BaseCameraMouseWheelInput.prototype, \"wheelPrecisionZ\", void 0);","map":{"version":3,"mappings":"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","names":["serialize","Observable","PointerEventTypes","EventConstants","Tools","BaseCameraMouseWheelInput","constructor","attachControl","noPreventDefault","BackCompatCameraNoPreventDefault","arguments","_wheel","pointer","type","POINTERWHEEL","event","platformScale","deltaMode","DOM_DELTA_LINE","_ffMultiplier","_wheelDeltaX","wheelPrecisionX","deltaX","_normalize","_wheelDeltaY","wheelPrecisionY","deltaY","_wheelDeltaZ","wheelPrecisionZ","deltaZ","preventDefault","_observer","camera","getScene","_inputManager","_addCameraPointerObserver","detachControl","_removeCameraPointerObserver","onChangedObservable","clear","checkInputs","notifyObservers","wheelDeltaX","wheelDeltaY","wheelDeltaZ","getClassName","getSimpleName","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/Inputs/BaseCameraMouseWheelInput.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { Camera } from \"../../Cameras/camera\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport type { PointerInfo } from \"../../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport type { IWheelEvent } from \"../../Events/deviceInputEvents\";\r\nimport { EventConstants } from \"../../Events/deviceInputEvents\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n\r\n/**\r\n * Base class for mouse wheel input..\r\n * See FollowCameraMouseWheelInput in src/Cameras/Inputs/freeCameraMouseWheelInput.ts\r\n * for example usage.\r\n */\r\nexport abstract class BaseCameraMouseWheelInput implements ICameraInput<Camera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public abstract camera: Camera;\r\n\r\n    /**\r\n     * How fast is the camera moves in relation to X axis mouseWheel events.\r\n     * Use negative value to reverse direction.\r\n     */\r\n    @serialize()\r\n    public wheelPrecisionX = 3.0;\r\n\r\n    /**\r\n     * How fast is the camera moves in relation to Y axis mouseWheel events.\r\n     * Use negative value to reverse direction.\r\n     */\r\n    @serialize()\r\n    public wheelPrecisionY = 3.0;\r\n\r\n    /**\r\n     * How fast is the camera moves in relation to Z axis mouseWheel events.\r\n     * Use negative value to reverse direction.\r\n     */\r\n    @serialize()\r\n    public wheelPrecisionZ = 3.0;\r\n\r\n    /**\r\n     * Observable for when a mouse wheel move event occurs.\r\n     */\r\n    public onChangedObservable = new Observable<{ wheelDeltaX: number; wheelDeltaY: number; wheelDeltaZ: number }>();\r\n\r\n    private _wheel: Nullable<(pointer: PointerInfo) => void>;\r\n    private _observer: Nullable<Observer<PointerInfo>>;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls\r\n     *   should call preventdefault().\r\n     *   (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n\r\n        this._wheel = (pointer) => {\r\n            // sanity check - this should be a PointerWheel event.\r\n            if (pointer.type !== PointerEventTypes.POINTERWHEEL) {\r\n                return;\r\n            }\r\n\r\n            const event = <IWheelEvent>pointer.event;\r\n\r\n            const platformScale = event.deltaMode === EventConstants.DOM_DELTA_LINE ? this._ffMultiplier : 1; // If this happens to be set to DOM_DELTA_LINE, adjust accordingly\r\n\r\n            this._wheelDeltaX += (this.wheelPrecisionX * platformScale * event.deltaX) / this._normalize;\r\n            this._wheelDeltaY -= (this.wheelPrecisionY * platformScale * event.deltaY) / this._normalize;\r\n            this._wheelDeltaZ += (this.wheelPrecisionZ * platformScale * event.deltaZ) / this._normalize;\r\n\r\n            if (event.preventDefault) {\r\n                if (!noPreventDefault) {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this._observer = this.camera.getScene()._inputManager._addCameraPointerObserver(this._wheel, PointerEventTypes.POINTERWHEEL);\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        if (this._observer) {\r\n            this.camera.getScene()._inputManager._removeCameraPointerObserver(this._observer);\r\n            this._observer = null;\r\n            this._wheel = null;\r\n        }\r\n        if (this.onChangedObservable) {\r\n            this.onChangedObservable.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called for each rendered frame.\r\n     */\r\n    public checkInputs(): void {\r\n        this.onChangedObservable.notifyObservers({\r\n            wheelDeltaX: this._wheelDeltaX,\r\n            wheelDeltaY: this._wheelDeltaY,\r\n            wheelDeltaZ: this._wheelDeltaZ,\r\n        });\r\n\r\n        // Clear deltas.\r\n        this._wheelDeltaX = 0;\r\n        this._wheelDeltaY = 0;\r\n        this._wheelDeltaZ = 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"BaseCameraMouseWheelInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"mousewheel\";\r\n    }\r\n\r\n    /**\r\n     * Incremental value of multiple mouse wheel movements of the X axis.\r\n     * Should be zero-ed when read.\r\n     */\r\n    protected _wheelDeltaX: number = 0;\r\n\r\n    /**\r\n     * Incremental value of multiple mouse wheel movements of the Y axis.\r\n     * Should be zero-ed when read.\r\n     */\r\n    protected _wheelDeltaY: number = 0;\r\n\r\n    /**\r\n     * Incremental value of multiple mouse wheel movements of the Z axis.\r\n     * Should be zero-ed when read.\r\n     */\r\n    protected _wheelDeltaZ: number = 0;\r\n\r\n    /**\r\n     * Firefox uses a different scheme to report scroll distances to other\r\n     * browsers. Rather than use complicated methods to calculate the exact\r\n     * multiple we need to apply, let's just cheat and use a constant.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode\r\n     * https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\r\n     */\r\n    private readonly _ffMultiplier = 12;\r\n\r\n    /**\r\n     * Different event attributes for wheel data fall into a few set ranges.\r\n     * Some relevant but dated date here:\r\n     * https://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers\r\n     */\r\n    private readonly _normalize = 120;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}