{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\nimport { RefractionBlock } from \"./refractionBlock.js\";\n/**\n * Block used to implement the sub surface module of the PBR material\n */\nexport class SubSurfaceBlock extends NodeMaterialBlock {\n  /**\n   * Create a new SubSurfaceBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Fragment);\n    this._isUnique = true;\n    this.registerInput(\"thickness\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"tintColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"translucencyIntensity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"translucencyDiffusionDist\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"refraction\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"refraction\", this, NodeMaterialConnectionPointDirection.Input, RefractionBlock, \"RefractionBlock\"));\n    this.registerOutput(\"subsurface\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"subsurface\", this, NodeMaterialConnectionPointDirection.Output, SubSurfaceBlock, \"SubSurfaceBlock\"));\n  }\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n  initialize(state) {\n    state._excludeVariableName(\"subSurfaceOut\");\n    state._excludeVariableName(\"vThicknessParam\");\n    state._excludeVariableName(\"vTintColor\");\n    state._excludeVariableName(\"vSubSurfaceIntensity\");\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"SubSurfaceBlock\";\n  }\n  /**\n   * Gets the thickness component\n   */\n  get thickness() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the tint color input component\n   */\n  get tintColor() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the translucency intensity input component\n   */\n  get translucencyIntensity() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the translucency diffusion distance input component\n   */\n  get translucencyDiffusionDist() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the refraction object parameters\n   */\n  get refraction() {\n    return this._inputs[4];\n  }\n  /**\n   * Gets the sub surface object output component\n   */\n  get subsurface() {\n    return this._outputs[0];\n  }\n  autoConfigure() {\n    if (!this.thickness.isConnected) {\n      const thicknessInput = new InputBlock(\"SubSurface thickness\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\n      thicknessInput.value = 0;\n      thicknessInput.output.connectTo(this.thickness);\n    }\n  }\n  prepareDefines(mesh, nodeMaterial, defines) {\n    super.prepareDefines(mesh, nodeMaterial, defines);\n    const translucencyEnabled = this.translucencyDiffusionDist.isConnected || this.translucencyIntensity.isConnected;\n    defines.setValue(\"SUBSURFACE\", translucencyEnabled || this.refraction.isConnected, true);\n    defines.setValue(\"SS_TRANSLUCENCY\", translucencyEnabled, true);\n    defines.setValue(\"SS_THICKNESSANDMASK_TEXTURE\", false, true);\n    defines.setValue(\"SS_REFRACTIONINTENSITY_TEXTURE\", false, true);\n    defines.setValue(\"SS_TRANSLUCENCYINTENSITY_TEXTURE\", false, true);\n    defines.setValue(\"SS_MASK_FROM_THICKNESS_TEXTURE\", false, true);\n    defines.setValue(\"SS_USE_GLTF_TEXTURES\", false, true);\n  }\n  /**\n   * Gets the main code of the block (fragment side)\n   * @param state current state of the node material building\n   * @param ssBlock instance of a SubSurfaceBlock or null if the code must be generated without an active sub surface module\n   * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\n   * @param worldPosVarName name of the variable holding the world position\n   * @returns the shader code\n   */\n  static GetCode(state, ssBlock, reflectionBlock, worldPosVarName) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;\n    let code = \"\";\n    const thickness = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.thickness.isConnected) ? ssBlock.thickness.associatedVariableName : \"0.\";\n    const tintColor = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.tintColor.isConnected) ? ssBlock.tintColor.associatedVariableName : \"vec3(1.)\";\n    const translucencyIntensity = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyIntensity.isConnected) ? ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyIntensity.associatedVariableName : \"1.\";\n    const translucencyDiffusionDistance = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyDiffusionDist.isConnected) ? ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyDiffusionDist.associatedVariableName : \"vec3(1.)\";\n    const refractionBlock = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.refraction.isConnected) ? (_a = ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.refraction.connectedPoint) === null || _a === void 0 ? void 0 : _a.ownerBlock : null;\n    const refractionTintAtDistance = (refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.tintAtDistance.isConnected) ? refractionBlock.tintAtDistance.associatedVariableName : \"1.\";\n    const refractionIntensity = (refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.intensity.isConnected) ? refractionBlock.intensity.associatedVariableName : \"1.\";\n    const refractionView = (refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.view.isConnected) ? refractionBlock.view.associatedVariableName : \"\";\n    code += (_b = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.getCode(state)) !== null && _b !== void 0 ? _b : \"\";\n    code += `subSurfaceOutParams subSurfaceOut;\n\n        #ifdef SUBSURFACE\n            vec2 vThicknessParam = vec2(0., ${thickness});\n            vec4 vTintColor = vec4(${tintColor}, ${refractionTintAtDistance});\n            vec3 vSubSurfaceIntensity = vec3(${refractionIntensity}, ${translucencyIntensity}, 0.);\n\n            subSurfaceBlock(\n                vSubSurfaceIntensity,\n                vThicknessParam,\n                vTintColor,\n                normalW,\n                specularEnvironmentReflectance,\n            #ifdef SS_THICKNESSANDMASK_TEXTURE\n                vec4(0.),\n            #endif\n            #ifdef REFLECTION\n                #ifdef SS_TRANSLUCENCY\n                    ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._reflectionMatrixName},\n                    #ifdef USESPHERICALFROMREFLECTIONMAP\n                        #if !defined(NORMAL) || !defined(USESPHERICALINVERTEX)\n                            reflectionOut.irradianceVector,\n                        #endif\n                        #if defined(REALTIME_FILTERING)\n                            ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName},\n                            ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionFilteringInfoName},\n                        #endif\n                        #endif\n                    #ifdef USEIRRADIANCEMAP\n                        irradianceSampler,\n                    #endif\n                #endif\n            #endif\n            #if defined(SS_REFRACTION) || defined(SS_TRANSLUCENCY)\n                surfaceAlbedo,\n            #endif\n            #ifdef SS_REFRACTION\n                ${worldPosVarName}.xyz,\n                viewDirectionW,\n                ${refractionView},\n                ${(_c = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._vRefractionInfosName) !== null && _c !== void 0 ? _c : \"\"},\n                ${(_d = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._refractionMatrixName) !== null && _d !== void 0 ? _d : \"\"},\n                ${(_e = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._vRefractionMicrosurfaceInfosName) !== null && _e !== void 0 ? _e : \"\"},\n                vLightingIntensity,\n                #ifdef SS_LINKREFRACTIONTOTRANSPARENCY\n                    alpha,\n                #endif\n                #ifdef ${(_f = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLODRefractionAlpha) !== null && _f !== void 0 ? _f : \"IGNORE\"}\n                    NdotVUnclamped,\n                #endif\n                #ifdef ${(_g = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLinearSpecularRefraction) !== null && _g !== void 0 ? _g : \"IGNORE\"}\n                    roughness,\n                #endif\n                alphaG,\n                #ifdef ${(_h = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._define3DName) !== null && _h !== void 0 ? _h : \"IGNORE\"}\n                    ${(_j = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._cubeSamplerName) !== null && _j !== void 0 ? _j : \"\"},\n                #else\n                    ${(_k = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._2DSamplerName) !== null && _k !== void 0 ? _k : \"\"},\n                #endif\n                #ifndef LODBASEDMICROSFURACE\n                    #ifdef ${(_l = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._define3DName) !== null && _l !== void 0 ? _l : \"IGNORE\"}\n                        ${(_m = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._cubeSamplerName) !== null && _m !== void 0 ? _m : \"\"},\n                        ${(_o = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._cubeSamplerName) !== null && _o !== void 0 ? _o : \"\"},\n                    #else\n                        ${(_p = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._2DSamplerName) !== null && _p !== void 0 ? _p : \"\"},\n                        ${(_q = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._2DSamplerName) !== null && _q !== void 0 ? _q : \"\"},\n                    #endif\n                #endif\n                #ifdef ANISOTROPIC\n                    anisotropicOut,\n                #endif\n                #ifdef REALTIME_FILTERING\n                    ${(_r = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._vRefractionFilteringInfoName) !== null && _r !== void 0 ? _r : \"\"},\n                #endif\n                #ifdef SS_USE_LOCAL_REFRACTIONMAP_CUBIC\n                    vRefractionPosition,\n                    vRefractionSize,\n                #endif\n            #endif\n            #ifdef SS_TRANSLUCENCY\n                ${translucencyDiffusionDistance},\n            #endif\n                subSurfaceOut\n            );\n\n            #ifdef SS_REFRACTION\n                surfaceAlbedo = subSurfaceOut.surfaceAlbedo;\n                #ifdef SS_LINKREFRACTIONTOTRANSPARENCY\n                    alpha = subSurfaceOut.alpha;\n                #endif\n            #endif\n        #else\n            subSurfaceOut.specularEnvironmentReflectance = specularEnvironmentReflectance;\n        #endif\\r\\n`;\n    return code;\n  }\n  _buildBlock(state) {\n    if (state.target === NodeMaterialBlockTargets.Fragment) {\n      state.sharedData.blocksWithDefines.push(this);\n    }\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.SubSurfaceBlock\", SubSurfaceBlock);","map":{"version":3,"mappings":";AAAA,SAASA,iBAAiB,QAAQ,4BAA0B;AAC5D,SAASC,qCAAqC,QAAQ,sDAAoD;AAG1G,SAASC,oCAAoC,QAAQ,2CAAyC;AAC9F,SAASC,wBAAwB,QAAQ,yCAAuC;AAChF,SAASC,aAAa,QAAQ,+BAA6B;AAC3D,SAASC,UAAU,QAAQ,wBAAsB;AACjD,SAASC,uCAAuC,QAAQ,kDAAgD;AAKxG,SAASC,eAAe,QAAQ,sBAAoB;AAEpD;;;AAGA,OAAM,MAAOC,eAAgB,SAAQR,iBAAiB;EAClD;;;;EAIAS,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,EAAEP,wBAAwB,CAACQ,QAAQ,CAAC;IAE9C,IAAI,CAACC,SAAS,GAAG,IAAI;IAErB,IAAI,CAACC,aAAa,CAAC,WAAW,EAAEZ,qCAAqC,CAACa,KAAK,EAAE,KAAK,EAAEX,wBAAwB,CAACQ,QAAQ,CAAC;IACtH,IAAI,CAACE,aAAa,CAAC,WAAW,EAAEZ,qCAAqC,CAACc,MAAM,EAAE,IAAI,EAAEZ,wBAAwB,CAACQ,QAAQ,CAAC;IACtH,IAAI,CAACE,aAAa,CAAC,uBAAuB,EAAEZ,qCAAqC,CAACa,KAAK,EAAE,IAAI,EAAEX,wBAAwB,CAACQ,QAAQ,CAAC;IACjI,IAAI,CAACE,aAAa,CAAC,2BAA2B,EAAEZ,qCAAqC,CAACc,MAAM,EAAE,IAAI,EAAEZ,wBAAwB,CAACQ,QAAQ,CAAC;IACtI,IAAI,CAACE,aAAa,CACd,YAAY,EACZZ,qCAAqC,CAACe,MAAM,EAC5C,IAAI,EACJb,wBAAwB,CAACQ,QAAQ,EACjC,IAAIL,uCAAuC,CAAC,YAAY,EAAE,IAAI,EAAEJ,oCAAoC,CAACe,KAAK,EAAEV,eAAe,EAAE,iBAAiB,CAAC,CAClJ;IAED,IAAI,CAACW,cAAc,CACf,YAAY,EACZjB,qCAAqC,CAACe,MAAM,EAC5Cb,wBAAwB,CAACQ,QAAQ,EACjC,IAAIL,uCAAuC,CAAC,YAAY,EAAE,IAAI,EAAEJ,oCAAoC,CAACiB,MAAM,EAAEX,eAAe,EAAE,iBAAiB,CAAC,CACnJ;EACL;EAEA;;;;EAIOY,UAAU,CAACC,KAA6B;IAC3CA,KAAK,CAACC,oBAAoB,CAAC,eAAe,CAAC;IAC3CD,KAAK,CAACC,oBAAoB,CAAC,iBAAiB,CAAC;IAC7CD,KAAK,CAACC,oBAAoB,CAAC,YAAY,CAAC;IACxCD,KAAK,CAACC,oBAAoB,CAAC,sBAAsB,CAAC;EACtD;EAEA;;;;EAIOC,YAAY;IACf,OAAO,iBAAiB;EAC5B;EAEA;;;EAGA,IAAWC,SAAS;IAChB,OAAO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWC,SAAS;IAChB,OAAO,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWE,qBAAqB;IAC5B,OAAO,IAAI,CAACF,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWG,yBAAyB;IAChC,OAAO,IAAI,CAACH,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWI,UAAU;IACjB,OAAO,IAAI,CAACJ,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWK,UAAU;IACjB,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEOC,aAAa;IAChB,IAAI,CAAC,IAAI,CAACR,SAAS,CAACS,WAAW,EAAE;MAC7B,MAAMC,cAAc,GAAG,IAAI7B,UAAU,CAAC,sBAAsB,EAAEF,wBAAwB,CAACQ,QAAQ,EAAEV,qCAAqC,CAACa,KAAK,CAAC;MAC7IoB,cAAc,CAACC,KAAK,GAAG,CAAC;MACxBD,cAAc,CAACE,MAAM,CAACC,SAAS,CAAC,IAAI,CAACb,SAAS,CAAC;;EAEvD;EAEOc,cAAc,CAACC,IAAkB,EAAEC,YAA0B,EAAEC,OAA4B;IAC9F,KAAK,CAACH,cAAc,CAACC,IAAI,EAAEC,YAAY,EAAEC,OAAO,CAAC;IAEjD,MAAMC,mBAAmB,GAAG,IAAI,CAACd,yBAAyB,CAACK,WAAW,IAAI,IAAI,CAACN,qBAAqB,CAACM,WAAW;IAEhHQ,OAAO,CAACE,QAAQ,CAAC,YAAY,EAAED,mBAAmB,IAAI,IAAI,CAACb,UAAU,CAACI,WAAW,EAAE,IAAI,CAAC;IACxFQ,OAAO,CAACE,QAAQ,CAAC,iBAAiB,EAAED,mBAAmB,EAAE,IAAI,CAAC;IAC9DD,OAAO,CAACE,QAAQ,CAAC,6BAA6B,EAAE,KAAK,EAAE,IAAI,CAAC;IAC5DF,OAAO,CAACE,QAAQ,CAAC,gCAAgC,EAAE,KAAK,EAAE,IAAI,CAAC;IAC/DF,OAAO,CAACE,QAAQ,CAAC,kCAAkC,EAAE,KAAK,EAAE,IAAI,CAAC;IACjEF,OAAO,CAACE,QAAQ,CAAC,gCAAgC,EAAE,KAAK,EAAE,IAAI,CAAC;IAC/DF,OAAO,CAACE,QAAQ,CAAC,sBAAsB,EAAE,KAAK,EAAE,IAAI,CAAC;EACzD;EAEA;;;;;;;;EAQO,OAAOC,OAAO,CAACvB,KAA6B,EAAEwB,OAAkC,EAAEC,eAA0C,EAAEC,eAAuB;;IACxJ,IAAIC,IAAI,GAAG,EAAE;IAEb,MAAMxB,SAAS,GAAG,QAAO,aAAPqB,OAAO,uBAAPA,OAAO,CAAErB,SAAS,CAACS,WAAW,IAAGY,OAAO,CAACrB,SAAS,CAACyB,sBAAsB,GAAG,IAAI;IAClG,MAAMvB,SAAS,GAAG,QAAO,aAAPmB,OAAO,uBAAPA,OAAO,CAAEnB,SAAS,CAACO,WAAW,IAAGY,OAAO,CAACnB,SAAS,CAACuB,sBAAsB,GAAG,UAAU;IACxG,MAAMtB,qBAAqB,GAAG,QAAO,aAAPkB,OAAO,uBAAPA,OAAO,CAAElB,qBAAqB,CAACM,WAAW,IAAGY,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAElB,qBAAqB,CAACsB,sBAAsB,GAAG,IAAI;IACvI,MAAMC,6BAA6B,GAAG,QAAO,aAAPL,OAAO,uBAAPA,OAAO,CAAEjB,yBAAyB,CAACK,WAAW,IAAGY,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEjB,yBAAyB,CAACqB,sBAAsB,GAAG,UAAU;IAE7J,MAAME,eAAe,GAA+B,QAAO,aAAPN,OAAO,uBAAPA,OAAO,CAAEhB,UAAU,CAACI,WAAW,IAAG,aAAO,aAAPY,OAAO,uBAAPA,OAAO,CAAEhB,UAAU,CAACuB,cAAc,0CAAEC,UAAU,GAAG,IAAkC;IAEzK,MAAMC,wBAAwB,GAAG,gBAAe,aAAfH,eAAe,uBAAfA,eAAe,CAAEI,cAAc,CAACtB,WAAW,IAAGkB,eAAe,CAACI,cAAc,CAACN,sBAAsB,GAAG,IAAI;IAC3I,MAAMO,mBAAmB,GAAG,gBAAe,aAAfL,eAAe,uBAAfA,eAAe,CAAEM,SAAS,CAACxB,WAAW,IAAGkB,eAAe,CAACM,SAAS,CAACR,sBAAsB,GAAG,IAAI;IAC5H,MAAMS,cAAc,GAAG,gBAAe,aAAfP,eAAe,uBAAfA,eAAe,CAAEQ,IAAI,CAAC1B,WAAW,IAAGkB,eAAe,CAACQ,IAAI,CAACV,sBAAsB,GAAG,EAAE;IAE3GD,IAAI,IAAI,qBAAe,aAAfG,eAAe,uBAAfA,eAAe,CAAES,OAAO,CAACvC,KAAK,CAAC,mCAAI,EAAE;IAE7C2B,IAAI,IAAI;;;8CAG8BxB,SAAS;qCAClBE,SAAS,KAAK4B,wBAAwB;+CAC5BE,mBAAmB,KAAK7B,qBAAqB;;;;;;;;;;;;;sBAatEmB,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEe,qBAAqB;;;;;;8BAM9Bf,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEgB,gBAAgB;8BACjChB,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEiB,6BAA6B;;;;;;;;;;;;kBAY1DhB,eAAe;;kBAEfW,cAAc;kBACd,qBAAe,aAAfP,eAAe,uBAAfA,eAAe,CAAEa,qBAAqB,mCAAI,EAAE;kBAC5C,qBAAe,aAAfb,eAAe,uBAAfA,eAAe,CAAEc,qBAAqB,mCAAI,EAAE;kBAC5C,qBAAe,aAAfd,eAAe,uBAAfA,eAAe,CAAEe,iCAAiC,mCAAI,EAAE;;;;;yBAKjD,qBAAe,aAAff,eAAe,uBAAfA,eAAe,CAAEgB,yBAAyB,mCAAI,QAAQ;;;yBAGtD,qBAAe,aAAfhB,eAAe,uBAAfA,eAAe,CAAEiB,+BAA+B,mCAAI,QAAQ;;;;yBAI5D,qBAAe,aAAfjB,eAAe,uBAAfA,eAAe,CAAEkB,aAAa,mCAAI,QAAQ;sBAC7C,qBAAe,aAAflB,eAAe,uBAAfA,eAAe,CAAEW,gBAAgB,mCAAI,EAAE;;sBAEvC,qBAAe,aAAfX,eAAe,uBAAfA,eAAe,CAAEmB,cAAc,mCAAI,EAAE;;;6BAG9B,qBAAe,aAAfnB,eAAe,uBAAfA,eAAe,CAAEkB,aAAa,mCAAI,QAAQ;0BAC7C,qBAAe,aAAflB,eAAe,uBAAfA,eAAe,CAAEW,gBAAgB,mCAAI,EAAE;0BACvC,qBAAe,aAAfX,eAAe,uBAAfA,eAAe,CAAEW,gBAAgB,mCAAI,EAAE;;0BAEvC,qBAAe,aAAfX,eAAe,uBAAfA,eAAe,CAAEmB,cAAc,mCAAI,EAAE;0BACrC,qBAAe,aAAfnB,eAAe,uBAAfA,eAAe,CAAEmB,cAAc,mCAAI,EAAE;;;;;;;sBAOzC,qBAAe,aAAfnB,eAAe,uBAAfA,eAAe,CAAEoB,6BAA6B,mCAAI,EAAE;;;;;;;;kBAQxDrB,6BAA6B;;;;;;;;;;;;;mBAa5B;IAEX,OAAOF,IAAI;EACf;EAEUwB,WAAW,CAACnD,KAA6B;IAC/C,IAAIA,KAAK,CAACoD,MAAM,KAAKtE,wBAAwB,CAACQ,QAAQ,EAAE;MACpDU,KAAK,CAACqD,UAAU,CAACC,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC;;IAGjD,OAAO,IAAI;EACf;;AAGJxE,aAAa,CAAC,yBAAyB,EAAEI,eAAe,CAAC","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialConnectionPointDirection","NodeMaterialBlockTargets","RegisterClass","InputBlock","NodeMaterialConnectionPointCustomObject","RefractionBlock","SubSurfaceBlock","constructor","name","Fragment","_isUnique","registerInput","Float","Color3","Object","Input","registerOutput","Output","initialize","state","_excludeVariableName","getClassName","thickness","_inputs","tintColor","translucencyIntensity","translucencyDiffusionDist","refraction","subsurface","_outputs","autoConfigure","isConnected","thicknessInput","value","output","connectTo","prepareDefines","mesh","nodeMaterial","defines","translucencyEnabled","setValue","GetCode","ssBlock","reflectionBlock","worldPosVarName","code","associatedVariableName","translucencyDiffusionDistance","refractionBlock","connectedPoint","ownerBlock","refractionTintAtDistance","tintAtDistance","refractionIntensity","intensity","refractionView","view","getCode","_reflectionMatrixName","_cubeSamplerName","_vReflectionFilteringInfoName","_vRefractionInfosName","_refractionMatrixName","_vRefractionMicrosurfaceInfosName","_defineLODRefractionAlpha","_defineLinearSpecularRefraction","_define3DName","_2DSamplerName","_vRefractionFilteringInfoName","_buildBlock","target","sharedData","blocksWithDefines","push"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/PBR/subSurfaceBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { ReflectionBlock } from \"./reflectionBlock\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport { RefractionBlock } from \"./refractionBlock\";\r\n\r\n/**\r\n * Block used to implement the sub surface module of the PBR material\r\n */\r\nexport class SubSurfaceBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new SubSurfaceBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"thickness\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"tintColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"translucencyIntensity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"translucencyDiffusionDist\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\r\n            \"refraction\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            true,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"refraction\", this, NodeMaterialConnectionPointDirection.Input, RefractionBlock, \"RefractionBlock\")\r\n        );\r\n\r\n        this.registerOutput(\r\n            \"subsurface\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"subsurface\", this, NodeMaterialConnectionPointDirection.Output, SubSurfaceBlock, \"SubSurfaceBlock\")\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"subSurfaceOut\");\r\n        state._excludeVariableName(\"vThicknessParam\");\r\n        state._excludeVariableName(\"vTintColor\");\r\n        state._excludeVariableName(\"vSubSurfaceIntensity\");\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"SubSurfaceBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the thickness component\r\n     */\r\n    public get thickness(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the tint color input component\r\n     */\r\n    public get tintColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the translucency intensity input component\r\n     */\r\n    public get translucencyIntensity(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the translucency diffusion distance input component\r\n     */\r\n    public get translucencyDiffusionDist(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the refraction object parameters\r\n     */\r\n    public get refraction(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the sub surface object output component\r\n     */\r\n    public get subsurface(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure() {\r\n        if (!this.thickness.isConnected) {\r\n            const thicknessInput = new InputBlock(\"SubSurface thickness\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\r\n            thicknessInput.value = 0;\r\n            thicknessInput.output.connectTo(this.thickness);\r\n        }\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        super.prepareDefines(mesh, nodeMaterial, defines);\r\n\r\n        const translucencyEnabled = this.translucencyDiffusionDist.isConnected || this.translucencyIntensity.isConnected;\r\n\r\n        defines.setValue(\"SUBSURFACE\", translucencyEnabled || this.refraction.isConnected, true);\r\n        defines.setValue(\"SS_TRANSLUCENCY\", translucencyEnabled, true);\r\n        defines.setValue(\"SS_THICKNESSANDMASK_TEXTURE\", false, true);\r\n        defines.setValue(\"SS_REFRACTIONINTENSITY_TEXTURE\", false, true);\r\n        defines.setValue(\"SS_TRANSLUCENCYINTENSITY_TEXTURE\", false, true);\r\n        defines.setValue(\"SS_MASK_FROM_THICKNESS_TEXTURE\", false, true);\r\n        defines.setValue(\"SS_USE_GLTF_TEXTURES\", false, true);\r\n    }\r\n\r\n    /**\r\n     * Gets the main code of the block (fragment side)\r\n     * @param state current state of the node material building\r\n     * @param ssBlock instance of a SubSurfaceBlock or null if the code must be generated without an active sub surface module\r\n     * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\r\n     * @param worldPosVarName name of the variable holding the world position\r\n     * @returns the shader code\r\n     */\r\n    public static GetCode(state: NodeMaterialBuildState, ssBlock: Nullable<SubSurfaceBlock>, reflectionBlock: Nullable<ReflectionBlock>, worldPosVarName: string): string {\r\n        let code = \"\";\r\n\r\n        const thickness = ssBlock?.thickness.isConnected ? ssBlock.thickness.associatedVariableName : \"0.\";\r\n        const tintColor = ssBlock?.tintColor.isConnected ? ssBlock.tintColor.associatedVariableName : \"vec3(1.)\";\r\n        const translucencyIntensity = ssBlock?.translucencyIntensity.isConnected ? ssBlock?.translucencyIntensity.associatedVariableName : \"1.\";\r\n        const translucencyDiffusionDistance = ssBlock?.translucencyDiffusionDist.isConnected ? ssBlock?.translucencyDiffusionDist.associatedVariableName : \"vec3(1.)\";\r\n\r\n        const refractionBlock: Nullable<RefractionBlock> = (ssBlock?.refraction.isConnected ? ssBlock?.refraction.connectedPoint?.ownerBlock : null) as Nullable<RefractionBlock>;\r\n\r\n        const refractionTintAtDistance = refractionBlock?.tintAtDistance.isConnected ? refractionBlock.tintAtDistance.associatedVariableName : \"1.\";\r\n        const refractionIntensity = refractionBlock?.intensity.isConnected ? refractionBlock.intensity.associatedVariableName : \"1.\";\r\n        const refractionView = refractionBlock?.view.isConnected ? refractionBlock.view.associatedVariableName : \"\";\r\n\r\n        code += refractionBlock?.getCode(state) ?? \"\";\r\n\r\n        code += `subSurfaceOutParams subSurfaceOut;\r\n\r\n        #ifdef SUBSURFACE\r\n            vec2 vThicknessParam = vec2(0., ${thickness});\r\n            vec4 vTintColor = vec4(${tintColor}, ${refractionTintAtDistance});\r\n            vec3 vSubSurfaceIntensity = vec3(${refractionIntensity}, ${translucencyIntensity}, 0.);\r\n\r\n            subSurfaceBlock(\r\n                vSubSurfaceIntensity,\r\n                vThicknessParam,\r\n                vTintColor,\r\n                normalW,\r\n                specularEnvironmentReflectance,\r\n            #ifdef SS_THICKNESSANDMASK_TEXTURE\r\n                vec4(0.),\r\n            #endif\r\n            #ifdef REFLECTION\r\n                #ifdef SS_TRANSLUCENCY\r\n                    ${reflectionBlock?._reflectionMatrixName},\r\n                    #ifdef USESPHERICALFROMREFLECTIONMAP\r\n                        #if !defined(NORMAL) || !defined(USESPHERICALINVERTEX)\r\n                            reflectionOut.irradianceVector,\r\n                        #endif\r\n                        #if defined(REALTIME_FILTERING)\r\n                            ${reflectionBlock?._cubeSamplerName},\r\n                            ${reflectionBlock?._vReflectionFilteringInfoName},\r\n                        #endif\r\n                        #endif\r\n                    #ifdef USEIRRADIANCEMAP\r\n                        irradianceSampler,\r\n                    #endif\r\n                #endif\r\n            #endif\r\n            #if defined(SS_REFRACTION) || defined(SS_TRANSLUCENCY)\r\n                surfaceAlbedo,\r\n            #endif\r\n            #ifdef SS_REFRACTION\r\n                ${worldPosVarName}.xyz,\r\n                viewDirectionW,\r\n                ${refractionView},\r\n                ${refractionBlock?._vRefractionInfosName ?? \"\"},\r\n                ${refractionBlock?._refractionMatrixName ?? \"\"},\r\n                ${refractionBlock?._vRefractionMicrosurfaceInfosName ?? \"\"},\r\n                vLightingIntensity,\r\n                #ifdef SS_LINKREFRACTIONTOTRANSPARENCY\r\n                    alpha,\r\n                #endif\r\n                #ifdef ${refractionBlock?._defineLODRefractionAlpha ?? \"IGNORE\"}\r\n                    NdotVUnclamped,\r\n                #endif\r\n                #ifdef ${refractionBlock?._defineLinearSpecularRefraction ?? \"IGNORE\"}\r\n                    roughness,\r\n                #endif\r\n                alphaG,\r\n                #ifdef ${refractionBlock?._define3DName ?? \"IGNORE\"}\r\n                    ${refractionBlock?._cubeSamplerName ?? \"\"},\r\n                #else\r\n                    ${refractionBlock?._2DSamplerName ?? \"\"},\r\n                #endif\r\n                #ifndef LODBASEDMICROSFURACE\r\n                    #ifdef ${refractionBlock?._define3DName ?? \"IGNORE\"}\r\n                        ${refractionBlock?._cubeSamplerName ?? \"\"},\r\n                        ${refractionBlock?._cubeSamplerName ?? \"\"},\r\n                    #else\r\n                        ${refractionBlock?._2DSamplerName ?? \"\"},\r\n                        ${refractionBlock?._2DSamplerName ?? \"\"},\r\n                    #endif\r\n                #endif\r\n                #ifdef ANISOTROPIC\r\n                    anisotropicOut,\r\n                #endif\r\n                #ifdef REALTIME_FILTERING\r\n                    ${refractionBlock?._vRefractionFilteringInfoName ?? \"\"},\r\n                #endif\r\n                #ifdef SS_USE_LOCAL_REFRACTIONMAP_CUBIC\r\n                    vRefractionPosition,\r\n                    vRefractionSize,\r\n                #endif\r\n            #endif\r\n            #ifdef SS_TRANSLUCENCY\r\n                ${translucencyDiffusionDistance},\r\n            #endif\r\n                subSurfaceOut\r\n            );\r\n\r\n            #ifdef SS_REFRACTION\r\n                surfaceAlbedo = subSurfaceOut.surfaceAlbedo;\r\n                #ifdef SS_LINKREFRACTIONTOTRANSPARENCY\r\n                    alpha = subSurfaceOut.alpha;\r\n                #endif\r\n            #endif\r\n        #else\r\n            subSurfaceOut.specularEnvironmentReflectance = specularEnvironmentReflectance;\r\n        #endif\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.sharedData.blocksWithDefines.push(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.SubSurfaceBlock\", SubSurfaceBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}