{"ast":null,"code":"import { Camera } from \"../camera.js\";\nimport { Viewport } from \"../../Maths/math.viewport.js\";\nimport { PassPostProcess } from \"../../PostProcesses/passPostProcess.js\";\nimport { StereoscopicInterlacePostProcessI } from \"../../PostProcesses/stereoscopicInterlacePostProcess.js\";\n/**\n * @internal\n */\nexport function setStereoscopicRigMode(camera) {\n  const isStereoscopicHoriz = camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL || camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED;\n  const isCrossEye = camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED;\n  const isInterlaced = camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_INTERLACED;\n  // Use post-processors for interlacing\n  if (isInterlaced) {\n    camera._rigCameras[0]._rigPostProcess = new PassPostProcess(camera.name + \"_passthru\", 1.0, camera._rigCameras[0]);\n    camera._rigCameras[1]._rigPostProcess = new StereoscopicInterlacePostProcessI(camera.name + \"_stereoInterlace\", camera._rigCameras, false, true);\n  }\n  // Otherwise, create appropriate viewports\n  else {\n    camera._rigCameras[isCrossEye ? 1 : 0].viewport = new Viewport(0, 0, isStereoscopicHoriz ? 0.5 : 1.0, isStereoscopicHoriz ? 1.0 : 0.5);\n    camera._rigCameras[isCrossEye ? 0 : 1].viewport = new Viewport(isStereoscopicHoriz ? 0.5 : 0, isStereoscopicHoriz ? 0 : 0.5, isStereoscopicHoriz ? 0.5 : 1.0, isStereoscopicHoriz ? 1.0 : 0.5);\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAQ,cAAY;AACnC,SAASC,QAAQ,QAAQ,8BAA4B;AACrD,SAASC,eAAe,QAAQ,wCAAsC;AACtE,SAASC,iCAAiC,QAAQ,yDAAuD;AAEzG;;;AAGA,OAAM,SAAUC,sBAAsB,CAACC,MAAc;EACjD,MAAMC,mBAAmB,GACrBD,MAAM,CAACE,aAAa,KAAKP,MAAM,CAACQ,yCAAyC,IAAIH,MAAM,CAACE,aAAa,KAAKP,MAAM,CAACS,0CAA0C;EAC3J,MAAMC,UAAU,GAAGL,MAAM,CAACE,aAAa,KAAKP,MAAM,CAACS,0CAA0C;EAC7F,MAAME,YAAY,GAAGN,MAAM,CAACE,aAAa,KAAKP,MAAM,CAACY,gCAAgC;EACrF;EACA,IAAID,YAAY,EAAE;IACdN,MAAM,CAACQ,WAAW,CAAC,CAAC,CAAC,CAACC,eAAe,GAAG,IAAIZ,eAAe,CAACG,MAAM,CAACU,IAAI,GAAG,WAAW,EAAE,GAAG,EAAEV,MAAM,CAACQ,WAAW,CAAC,CAAC,CAAC,CAAC;IAClHR,MAAM,CAACQ,WAAW,CAAC,CAAC,CAAC,CAACC,eAAe,GAAG,IAAIX,iCAAiC,CAACE,MAAM,CAACU,IAAI,GAAG,kBAAkB,EAAEV,MAAM,CAACQ,WAAW,EAAE,KAAK,EAAE,IAAI,CAAC;;EAEpJ;EAAA,KACK;IACDR,MAAM,CAACQ,WAAW,CAACH,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC,CAACM,QAAQ,GAAG,IAAIf,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEK,mBAAmB,GAAG,GAAG,GAAG,GAAG,EAAEA,mBAAmB,GAAG,GAAG,GAAG,GAAG,CAAC;IACtID,MAAM,CAACQ,WAAW,CAACH,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC,CAACM,QAAQ,GAAG,IAAIf,QAAQ,CAC1DK,mBAAmB,GAAG,GAAG,GAAG,CAAC,EAC7BA,mBAAmB,GAAG,CAAC,GAAG,GAAG,EAC7BA,mBAAmB,GAAG,GAAG,GAAG,GAAG,EAC/BA,mBAAmB,GAAG,GAAG,GAAG,GAAG,CAClC;;AAET","names":["Camera","Viewport","PassPostProcess","StereoscopicInterlacePostProcessI","setStereoscopicRigMode","camera","isStereoscopicHoriz","cameraRigMode","RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL","RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED","isCrossEye","isInterlaced","RIG_MODE_STEREOSCOPIC_INTERLACED","_rigCameras","_rigPostProcess","name","viewport"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/RigModes/stereoscopicRigMode.ts"],"sourcesContent":["import { Camera } from \"../camera\";\r\nimport { Viewport } from \"../../Maths/math.viewport\";\r\nimport { PassPostProcess } from \"../../PostProcesses/passPostProcess\";\r\nimport { StereoscopicInterlacePostProcessI } from \"../../PostProcesses/stereoscopicInterlacePostProcess\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function setStereoscopicRigMode(camera: Camera): void {\r\n    const isStereoscopicHoriz =\r\n        camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL || camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED;\r\n    const isCrossEye = camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED;\r\n    const isInterlaced = camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_INTERLACED;\r\n    // Use post-processors for interlacing\r\n    if (isInterlaced) {\r\n        camera._rigCameras[0]._rigPostProcess = new PassPostProcess(camera.name + \"_passthru\", 1.0, camera._rigCameras[0]);\r\n        camera._rigCameras[1]._rigPostProcess = new StereoscopicInterlacePostProcessI(camera.name + \"_stereoInterlace\", camera._rigCameras, false, true);\r\n    }\r\n    // Otherwise, create appropriate viewports\r\n    else {\r\n        camera._rigCameras[isCrossEye ? 1 : 0].viewport = new Viewport(0, 0, isStereoscopicHoriz ? 0.5 : 1.0, isStereoscopicHoriz ? 1.0 : 0.5);\r\n        camera._rigCameras[isCrossEye ? 0 : 1].viewport = new Viewport(\r\n            isStereoscopicHoriz ? 0.5 : 0,\r\n            isStereoscopicHoriz ? 0 : 0.5,\r\n            isStereoscopicHoriz ? 0.5 : 1.0,\r\n            isStereoscopicHoriz ? 1.0 : 0.5\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}