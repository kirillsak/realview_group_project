{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockConnectionPointMode } from \"../../Enums/nodeMaterialBlockConnectionPointMode.js\";\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues.js\";\nimport { Matrix, Vector2, Vector3, Vector4 } from \"../../../../Maths/math.vector.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { GetClass, RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { Color3, Color4, TmpColors } from \"../../../../Maths/math.js\";\nimport { AnimatedInputBlockTypes } from \"./animatedInputBlockTypes.js\";\nimport { Observable } from \"../../../../Misc/observable.js\";\nimport { PrecisionDate } from \"../../../../Misc/precisionDate.js\";\nconst remapAttributeName = {\n  position2d: \"position\",\n  particle_uv: \"vUV\",\n  particle_color: \"vColor\",\n  particle_texturemask: \"textureMask\",\n  particle_positionw: \"vPositionW\"\n};\nconst attributeInFragmentOnly = {\n  particle_uv: true,\n  particle_color: true,\n  particle_texturemask: true,\n  particle_positionw: true\n};\nconst attributeAsUniform = {\n  particle_texturemask: true\n};\n/**\n * Block used to expose an input value\n */\nexport class InputBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new InputBlock\n   * @param name defines the block name\n   * @param target defines the target of that block (Vertex by default)\n   * @param type defines the type of the input (can be set to NodeMaterialBlockConnectionPointTypes.AutoDetect)\n   */\n  constructor(name, target = NodeMaterialBlockTargets.Vertex, type = NodeMaterialBlockConnectionPointTypes.AutoDetect) {\n    super(name, target, false, true);\n    this._mode = NodeMaterialBlockConnectionPointMode.Undefined;\n    this._animationType = AnimatedInputBlockTypes.None;\n    /** Gets or set a value used to limit the range of float values */\n    this.min = 0;\n    /** Gets or set a value used to limit the range of float values */\n    this.max = 0;\n    /** Gets or set a value indicating that this input can only get 0 and 1 values */\n    this.isBoolean = false;\n    /** Gets or sets a value used by the Node Material editor to determine how to configure the current value if it is a matrix */\n    this.matrixMode = 0;\n    /** @internal */\n    this._systemValue = null;\n    /** Gets or sets a boolean indicating that the value of this input will not change after a build */\n    this.isConstant = false;\n    /** Gets or sets the group to use to display this block in the Inspector */\n    this.groupInInspector = \"\";\n    /** Gets an observable raised when the value is changed */\n    this.onValueChangedObservable = new Observable();\n    /** Gets or sets a boolean indicating if content needs to be converted to gamma space (for color3/4 only) */\n    this.convertToGammaSpace = false;\n    /** Gets or sets a boolean indicating if content needs to be converted to linear space (for color3/4 only) */\n    this.convertToLinearSpace = false;\n    this._type = type;\n    this.setDefaultValue();\n    this.registerOutput(\"output\", type);\n  }\n  /**\n   * Gets or sets the connection point type (default is float)\n   */\n  get type() {\n    if (this._type === NodeMaterialBlockConnectionPointTypes.AutoDetect) {\n      if (this.isUniform && this.value != null) {\n        if (!isNaN(this.value)) {\n          this._type = NodeMaterialBlockConnectionPointTypes.Float;\n          return this._type;\n        }\n        switch (this.value.getClassName()) {\n          case \"Vector2\":\n            this._type = NodeMaterialBlockConnectionPointTypes.Vector2;\n            return this._type;\n          case \"Vector3\":\n            this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\n            return this._type;\n          case \"Vector4\":\n            this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\n            return this._type;\n          case \"Color3\":\n            this._type = NodeMaterialBlockConnectionPointTypes.Color3;\n            return this._type;\n          case \"Color4\":\n            this._type = NodeMaterialBlockConnectionPointTypes.Color4;\n            return this._type;\n          case \"Matrix\":\n            this._type = NodeMaterialBlockConnectionPointTypes.Matrix;\n            return this._type;\n        }\n      }\n      if (this.isAttribute) {\n        switch (this.name) {\n          case \"position\":\n          case \"normal\":\n          case \"particle_positionw\":\n            this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\n            return this._type;\n          case \"uv\":\n          case \"uv2\":\n          case \"uv3\":\n          case \"uv4\":\n          case \"uv5\":\n          case \"uv6\":\n          case \"position2d\":\n          case \"particle_uv\":\n            this._type = NodeMaterialBlockConnectionPointTypes.Vector2;\n            return this._type;\n          case \"matricesIndices\":\n          case \"matricesWeights\":\n          case \"world0\":\n          case \"world1\":\n          case \"world2\":\n          case \"world3\":\n          case \"tangent\":\n            this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\n            return this._type;\n          case \"color\":\n          case \"instanceColor\":\n          case \"particle_color\":\n          case \"particle_texturemask\":\n            this._type = NodeMaterialBlockConnectionPointTypes.Color4;\n            return this._type;\n        }\n      }\n      if (this.isSystemValue) {\n        switch (this._systemValue) {\n          case NodeMaterialSystemValues.World:\n          case NodeMaterialSystemValues.WorldView:\n          case NodeMaterialSystemValues.WorldViewProjection:\n          case NodeMaterialSystemValues.View:\n          case NodeMaterialSystemValues.ViewProjection:\n          case NodeMaterialSystemValues.Projection:\n            this._type = NodeMaterialBlockConnectionPointTypes.Matrix;\n            return this._type;\n          case NodeMaterialSystemValues.CameraPosition:\n            this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\n            return this._type;\n          case NodeMaterialSystemValues.FogColor:\n            this._type = NodeMaterialBlockConnectionPointTypes.Color3;\n            return this._type;\n          case NodeMaterialSystemValues.DeltaTime:\n          case NodeMaterialSystemValues.MaterialAlpha:\n            this._type = NodeMaterialBlockConnectionPointTypes.Float;\n            return this._type;\n          case NodeMaterialSystemValues.CameraParameters:\n            this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\n            return this._type;\n        }\n      }\n    }\n    return this._type;\n  }\n  /**\n   * Validates if a name is a reserve word.\n   * @param newName the new name to be given to the node.\n   * @returns false if the name is a reserve word, else true.\n   */\n  validateBlockName(newName) {\n    if (!this.isAttribute) {\n      return super.validateBlockName(newName);\n    }\n    return true;\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  /**\n   * Set the source of this connection point to a vertex attribute\n   * @param attributeName defines the attribute name (position, uv, normal, etc...). If not specified it will take the connection point name\n   * @returns the current connection point\n   */\n  setAsAttribute(attributeName) {\n    this._mode = NodeMaterialBlockConnectionPointMode.Attribute;\n    if (attributeName) {\n      this.name = attributeName;\n    }\n    return this;\n  }\n  /**\n   * Set the source of this connection point to a system value\n   * @param value define the system value to use (world, view, etc...) or null to switch to manual value\n   * @returns the current connection point\n   */\n  setAsSystemValue(value) {\n    this.systemValue = value;\n    return this;\n  }\n  /**\n   * Gets or sets the value of that point.\n   * Please note that this value will be ignored if valueCallback is defined\n   */\n  get value() {\n    return this._storedValue;\n  }\n  set value(value) {\n    if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\n      if (this.isBoolean) {\n        value = value ? 1 : 0;\n      } else if (this.min !== this.max) {\n        value = Math.max(this.min, value);\n        value = Math.min(this.max, value);\n      }\n    }\n    this._storedValue = value;\n    this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\n    this.onValueChangedObservable.notifyObservers(this);\n  }\n  /**\n   * Gets or sets a callback used to get the value of that point.\n   * Please note that setting this value will force the connection point to ignore the value property\n   */\n  get valueCallback() {\n    return this._valueCallback;\n  }\n  set valueCallback(value) {\n    this._valueCallback = value;\n    this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\n  }\n  /**\n   * Gets or sets the associated variable name in the shader\n   */\n  get associatedVariableName() {\n    return this._associatedVariableName;\n  }\n  set associatedVariableName(value) {\n    this._associatedVariableName = value;\n  }\n  /** Gets or sets the type of animation applied to the input */\n  get animationType() {\n    return this._animationType;\n  }\n  set animationType(value) {\n    this._animationType = value;\n  }\n  /**\n   * Gets a boolean indicating that this connection point not defined yet\n   */\n  get isUndefined() {\n    return this._mode === NodeMaterialBlockConnectionPointMode.Undefined;\n  }\n  /**\n   * Gets or sets a boolean indicating that this connection point is coming from an uniform.\n   * In this case the connection point name must be the name of the uniform to use.\n   * Can only be set on inputs\n   */\n  get isUniform() {\n    return this._mode === NodeMaterialBlockConnectionPointMode.Uniform;\n  }\n  set isUniform(value) {\n    this._mode = value ? NodeMaterialBlockConnectionPointMode.Uniform : NodeMaterialBlockConnectionPointMode.Undefined;\n    this.associatedVariableName = \"\";\n  }\n  /**\n   * Gets or sets a boolean indicating that this connection point is coming from an attribute.\n   * In this case the connection point name must be the name of the attribute to use\n   * Can only be set on inputs\n   */\n  get isAttribute() {\n    return this._mode === NodeMaterialBlockConnectionPointMode.Attribute;\n  }\n  set isAttribute(value) {\n    this._mode = value ? NodeMaterialBlockConnectionPointMode.Attribute : NodeMaterialBlockConnectionPointMode.Undefined;\n    this.associatedVariableName = \"\";\n  }\n  /**\n   * Gets or sets a boolean indicating that this connection point is generating a varying variable.\n   * Can only be set on exit points\n   */\n  get isVarying() {\n    return this._mode === NodeMaterialBlockConnectionPointMode.Varying;\n  }\n  set isVarying(value) {\n    this._mode = value ? NodeMaterialBlockConnectionPointMode.Varying : NodeMaterialBlockConnectionPointMode.Undefined;\n    this.associatedVariableName = \"\";\n  }\n  /**\n   * Gets a boolean indicating that the current connection point is a system value\n   */\n  get isSystemValue() {\n    return this._systemValue != null;\n  }\n  /**\n   * Gets or sets the current well known value or null if not defined as a system value\n   */\n  get systemValue() {\n    return this._systemValue;\n  }\n  set systemValue(value) {\n    this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\n    this.associatedVariableName = \"\";\n    this._systemValue = value;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"InputBlock\";\n  }\n  /**\n   * Animate the input if animationType !== None\n   * @param scene defines the rendering scene\n   */\n  animate(scene) {\n    switch (this._animationType) {\n      case AnimatedInputBlockTypes.Time:\n        {\n          if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\n            this.value += scene.getAnimationRatio() * 0.01;\n          }\n          break;\n        }\n      case AnimatedInputBlockTypes.RealTime:\n        {\n          if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\n            this.value = (PrecisionDate.Now - scene.getEngine().startTime) / 1000;\n          }\n          break;\n        }\n    }\n  }\n  _emitDefine(define) {\n    if (define[0] === \"!\") {\n      return `#ifndef ${define.substring(1)}\\r\\n`;\n    }\n    return `#ifdef ${define}\\r\\n`;\n  }\n  initialize() {\n    this.associatedVariableName = \"\";\n  }\n  /**\n   * Set the input block to its default value (based on its type)\n   */\n  setDefaultValue() {\n    switch (this.type) {\n      case NodeMaterialBlockConnectionPointTypes.Float:\n        this.value = 0;\n        break;\n      case NodeMaterialBlockConnectionPointTypes.Vector2:\n        this.value = Vector2.Zero();\n        break;\n      case NodeMaterialBlockConnectionPointTypes.Vector3:\n        this.value = Vector3.Zero();\n        break;\n      case NodeMaterialBlockConnectionPointTypes.Vector4:\n        this.value = Vector4.Zero();\n        break;\n      case NodeMaterialBlockConnectionPointTypes.Color3:\n        this.value = Color3.White();\n        break;\n      case NodeMaterialBlockConnectionPointTypes.Color4:\n        this.value = new Color4(1, 1, 1, 1);\n        break;\n      case NodeMaterialBlockConnectionPointTypes.Matrix:\n        this.value = Matrix.Identity();\n        break;\n    }\n  }\n  _emitConstant(state) {\n    switch (this.type) {\n      case NodeMaterialBlockConnectionPointTypes.Float:\n        return `${state._emitFloat(this.value)}`;\n      case NodeMaterialBlockConnectionPointTypes.Vector2:\n        return `vec2(${this.value.x}, ${this.value.y})`;\n      case NodeMaterialBlockConnectionPointTypes.Vector3:\n        return `vec3(${this.value.x}, ${this.value.y}, ${this.value.z})`;\n      case NodeMaterialBlockConnectionPointTypes.Vector4:\n        return `vec4(${this.value.x}, ${this.value.y}, ${this.value.z}, ${this.value.w})`;\n      case NodeMaterialBlockConnectionPointTypes.Color3:\n        TmpColors.Color3[0].set(this.value.r, this.value.g, this.value.b);\n        if (this.convertToGammaSpace) {\n          TmpColors.Color3[0].toGammaSpaceToRef(TmpColors.Color3[0]);\n        }\n        if (this.convertToLinearSpace) {\n          TmpColors.Color3[0].toLinearSpaceToRef(TmpColors.Color3[0]);\n        }\n        return `vec3(${TmpColors.Color3[0].r}, ${TmpColors.Color3[0].g}, ${TmpColors.Color3[0].b})`;\n      case NodeMaterialBlockConnectionPointTypes.Color4:\n        TmpColors.Color4[0].set(this.value.r, this.value.g, this.value.b, this.value.a);\n        if (this.convertToGammaSpace) {\n          TmpColors.Color4[0].toGammaSpaceToRef(TmpColors.Color4[0]);\n        }\n        if (this.convertToLinearSpace) {\n          TmpColors.Color4[0].toLinearSpaceToRef(TmpColors.Color4[0]);\n        }\n        return `vec4(${TmpColors.Color4[0].r}, ${TmpColors.Color4[0].g}, ${TmpColors.Color4[0].b}, ${TmpColors.Color4[0].a})`;\n    }\n    return \"\";\n  }\n  /** @internal */\n  get _noContextSwitch() {\n    return attributeInFragmentOnly[this.name];\n  }\n  _emit(state, define) {\n    var _a;\n    // Uniforms\n    if (this.isUniform) {\n      if (!this.associatedVariableName) {\n        this.associatedVariableName = state._getFreeVariableName(\"u_\" + this.name);\n      }\n      if (this.isConstant) {\n        if (state.constants.indexOf(this.associatedVariableName) !== -1) {\n          return;\n        }\n        state.constants.push(this.associatedVariableName);\n        state._constantDeclaration += this._declareOutput(this.output, state) + ` = ${this._emitConstant(state)};\\r\\n`;\n        return;\n      }\n      if (state.uniforms.indexOf(this.associatedVariableName) !== -1) {\n        return;\n      }\n      state.uniforms.push(this.associatedVariableName);\n      if (define) {\n        state._uniformDeclaration += this._emitDefine(define);\n      }\n      state._uniformDeclaration += `uniform ${state._getGLType(this.type)} ${this.associatedVariableName};\\r\\n`;\n      if (define) {\n        state._uniformDeclaration += `#endif\\r\\n`;\n      }\n      // well known\n      const hints = state.sharedData.hints;\n      if (this._systemValue !== null && this._systemValue !== undefined) {\n        switch (this._systemValue) {\n          case NodeMaterialSystemValues.WorldView:\n            hints.needWorldViewMatrix = true;\n            break;\n          case NodeMaterialSystemValues.WorldViewProjection:\n            hints.needWorldViewProjectionMatrix = true;\n            break;\n        }\n      } else {\n        if (this._animationType !== AnimatedInputBlockTypes.None) {\n          state.sharedData.animatedInputs.push(this);\n        }\n      }\n      return;\n    }\n    // Attribute\n    if (this.isAttribute) {\n      this.associatedVariableName = (_a = remapAttributeName[this.name]) !== null && _a !== void 0 ? _a : this.name;\n      if (this.target === NodeMaterialBlockTargets.Vertex && state._vertexState) {\n        // Attribute for fragment need to be carried over by varyings\n        if (attributeInFragmentOnly[this.name]) {\n          if (attributeAsUniform[this.name]) {\n            state._emitUniformFromString(this.associatedVariableName, state._getGLType(this.type), define);\n          } else {\n            state._emitVaryingFromString(this.associatedVariableName, state._getGLType(this.type), define);\n          }\n        } else {\n          this._emit(state._vertexState, define);\n        }\n        return;\n      }\n      if (state.attributes.indexOf(this.associatedVariableName) !== -1) {\n        return;\n      }\n      state.attributes.push(this.associatedVariableName);\n      if (attributeInFragmentOnly[this.name]) {\n        if (attributeAsUniform[this.name]) {\n          state._emitUniformFromString(this.associatedVariableName, state._getGLType(this.type), define);\n        } else {\n          state._emitVaryingFromString(this.associatedVariableName, state._getGLType(this.type), define);\n        }\n      } else {\n        if (define) {\n          state._attributeDeclaration += this._emitDefine(define);\n        }\n        state._attributeDeclaration += `attribute ${state._getGLType(this.type)} ${this.associatedVariableName};\\r\\n`;\n        if (define) {\n          state._attributeDeclaration += `#endif\\r\\n`;\n        }\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n  _transmitWorld(effect, world, worldView, worldViewProjection) {\n    if (!this._systemValue) {\n      return;\n    }\n    const variableName = this.associatedVariableName;\n    switch (this._systemValue) {\n      case NodeMaterialSystemValues.World:\n        effect.setMatrix(variableName, world);\n        break;\n      case NodeMaterialSystemValues.WorldView:\n        effect.setMatrix(variableName, worldView);\n        break;\n      case NodeMaterialSystemValues.WorldViewProjection:\n        effect.setMatrix(variableName, worldViewProjection);\n        break;\n    }\n  }\n  /**\n   * @internal\n   */\n  _transmit(effect, scene, material) {\n    if (this.isAttribute) {\n      return;\n    }\n    const variableName = this.associatedVariableName;\n    if (this._systemValue) {\n      switch (this._systemValue) {\n        case NodeMaterialSystemValues.World:\n        case NodeMaterialSystemValues.WorldView:\n        case NodeMaterialSystemValues.WorldViewProjection:\n          return;\n        case NodeMaterialSystemValues.View:\n          effect.setMatrix(variableName, scene.getViewMatrix());\n          break;\n        case NodeMaterialSystemValues.Projection:\n          effect.setMatrix(variableName, scene.getProjectionMatrix());\n          break;\n        case NodeMaterialSystemValues.ViewProjection:\n          effect.setMatrix(variableName, scene.getTransformMatrix());\n          break;\n        case NodeMaterialSystemValues.CameraPosition:\n          scene.bindEyePosition(effect, variableName, true);\n          break;\n        case NodeMaterialSystemValues.FogColor:\n          effect.setColor3(variableName, scene.fogColor);\n          break;\n        case NodeMaterialSystemValues.DeltaTime:\n          effect.setFloat(variableName, scene.deltaTime / 1000.0);\n          break;\n        case NodeMaterialSystemValues.CameraParameters:\n          if (scene.activeCamera) {\n            effect.setFloat4(variableName, scene.getEngine().hasOriginBottomLeft ? -1 : 1, scene.activeCamera.minZ, scene.activeCamera.maxZ, 1 / scene.activeCamera.maxZ);\n          }\n          break;\n        case NodeMaterialSystemValues.MaterialAlpha:\n          effect.setFloat(variableName, material.alpha);\n          break;\n      }\n      return;\n    }\n    const value = this._valueCallback ? this._valueCallback() : this._storedValue;\n    if (value === null) {\n      return;\n    }\n    switch (this.type) {\n      case NodeMaterialBlockConnectionPointTypes.Float:\n        effect.setFloat(variableName, value);\n        break;\n      case NodeMaterialBlockConnectionPointTypes.Int:\n        effect.setInt(variableName, value);\n        break;\n      case NodeMaterialBlockConnectionPointTypes.Color3:\n        TmpColors.Color3[0].set(this.value.r, this.value.g, this.value.b);\n        if (this.convertToGammaSpace) {\n          TmpColors.Color3[0].toGammaSpaceToRef(TmpColors.Color3[0]);\n        }\n        if (this.convertToLinearSpace) {\n          TmpColors.Color3[0].toLinearSpaceToRef(TmpColors.Color3[0]);\n        }\n        effect.setColor3(variableName, TmpColors.Color3[0]);\n        break;\n      case NodeMaterialBlockConnectionPointTypes.Color4:\n        TmpColors.Color4[0].set(this.value.r, this.value.g, this.value.b, this.value.a);\n        if (this.convertToGammaSpace) {\n          TmpColors.Color4[0].toGammaSpaceToRef(TmpColors.Color4[0]);\n        }\n        if (this.convertToLinearSpace) {\n          TmpColors.Color4[0].toLinearSpaceToRef(TmpColors.Color4[0]);\n        }\n        effect.setDirectColor4(variableName, TmpColors.Color4[0]);\n        break;\n      case NodeMaterialBlockConnectionPointTypes.Vector2:\n        effect.setVector2(variableName, value);\n        break;\n      case NodeMaterialBlockConnectionPointTypes.Vector3:\n        effect.setVector3(variableName, value);\n        break;\n      case NodeMaterialBlockConnectionPointTypes.Vector4:\n        effect.setVector4(variableName, value);\n        break;\n      case NodeMaterialBlockConnectionPointTypes.Matrix:\n        effect.setMatrix(variableName, value);\n        break;\n    }\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    if (this.isUniform || this.isSystemValue) {\n      state.sharedData.inputBlocks.push(this);\n    }\n    this._emit(state);\n  }\n  _dumpPropertiesCode() {\n    const variableName = this._codeVariableName;\n    if (this.isAttribute) {\n      return super._dumpPropertiesCode() + `${variableName}.setAsAttribute(\"${this.name}\");\\r\\n`;\n    }\n    if (this.isSystemValue) {\n      return super._dumpPropertiesCode() + `${variableName}.setAsSystemValue(BABYLON.NodeMaterialSystemValues.${NodeMaterialSystemValues[this._systemValue]});\\r\\n`;\n    }\n    if (this.isUniform) {\n      const codes = [];\n      let valueString = \"\";\n      switch (this.type) {\n        case NodeMaterialBlockConnectionPointTypes.Float:\n          valueString = `${this.value}`;\n          break;\n        case NodeMaterialBlockConnectionPointTypes.Vector2:\n          valueString = `new BABYLON.Vector2(${this.value.x}, ${this.value.y})`;\n          break;\n        case NodeMaterialBlockConnectionPointTypes.Vector3:\n          valueString = `new BABYLON.Vector3(${this.value.x}, ${this.value.y}, ${this.value.z})`;\n          break;\n        case NodeMaterialBlockConnectionPointTypes.Vector4:\n          valueString = `new BABYLON.Vector4(${this.value.x}, ${this.value.y}, ${this.value.z}, ${this.value.w})`;\n          break;\n        case NodeMaterialBlockConnectionPointTypes.Color3:\n          valueString = `new BABYLON.Color3(${this.value.r}, ${this.value.g}, ${this.value.b})`;\n          if (this.convertToGammaSpace) {\n            valueString += \".toGammaSpace()\";\n          }\n          if (this.convertToLinearSpace) {\n            valueString += \".toLinearSpace()\";\n          }\n          break;\n        case NodeMaterialBlockConnectionPointTypes.Color4:\n          valueString = `new BABYLON.Color4(${this.value.r}, ${this.value.g}, ${this.value.b}, ${this.value.a})`;\n          if (this.convertToGammaSpace) {\n            valueString += \".toGammaSpace()\";\n          }\n          if (this.convertToLinearSpace) {\n            valueString += \".toLinearSpace()\";\n          }\n          break;\n        case NodeMaterialBlockConnectionPointTypes.Matrix:\n          valueString = `BABYLON.Matrix.FromArray([${this.value.m}])`;\n          break;\n      }\n      // Common Property \"Value\"\n      codes.push(`${variableName}.value = ${valueString}`);\n      // Float-Value-Specific Properties\n      if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\n        codes.push(`${variableName}.min = ${this.min}`, `${variableName}.max = ${this.max}`, `${variableName}.isBoolean = ${this.isBoolean}`, `${variableName}.matrixMode = ${this.matrixMode}`, `${variableName}.animationType = BABYLON.AnimatedInputBlockTypes.${AnimatedInputBlockTypes[this.animationType]}`);\n      }\n      // Common Property \"Type\"\n      codes.push(`${variableName}.isConstant = ${this.isConstant}`);\n      codes.push(\"\");\n      return super._dumpPropertiesCode() + codes.join(\";\\r\\n\");\n    }\n    return super._dumpPropertiesCode();\n  }\n  dispose() {\n    this.onValueChangedObservable.clear();\n    super.dispose();\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.type = this.type;\n    serializationObject.mode = this._mode;\n    serializationObject.systemValue = this._systemValue;\n    serializationObject.animationType = this._animationType;\n    serializationObject.min = this.min;\n    serializationObject.max = this.max;\n    serializationObject.isBoolean = this.isBoolean;\n    serializationObject.matrixMode = this.matrixMode;\n    serializationObject.isConstant = this.isConstant;\n    serializationObject.groupInInspector = this.groupInInspector;\n    serializationObject.convertToGammaSpace = this.convertToGammaSpace;\n    serializationObject.convertToLinearSpace = this.convertToLinearSpace;\n    if (this._storedValue != null && this._mode === NodeMaterialBlockConnectionPointMode.Uniform) {\n      if (this._storedValue.asArray) {\n        serializationObject.valueType = \"BABYLON.\" + this._storedValue.getClassName();\n        serializationObject.value = this._storedValue.asArray();\n      } else {\n        serializationObject.valueType = \"number\";\n        serializationObject.value = this._storedValue;\n      }\n    }\n    return serializationObject;\n  }\n  _deserialize(serializationObject, scene, rootUrl) {\n    this._mode = serializationObject.mode;\n    super._deserialize(serializationObject, scene, rootUrl);\n    this._type = serializationObject.type;\n    this._systemValue = serializationObject.systemValue || serializationObject.wellKnownValue;\n    this._animationType = serializationObject.animationType;\n    this.min = serializationObject.min || 0;\n    this.max = serializationObject.max || 0;\n    this.isBoolean = !!serializationObject.isBoolean;\n    this.matrixMode = serializationObject.matrixMode || 0;\n    this.isConstant = !!serializationObject.isConstant;\n    this.groupInInspector = serializationObject.groupInInspector || \"\";\n    this.convertToGammaSpace = !!serializationObject.convertToGammaSpace;\n    this.convertToLinearSpace = !!serializationObject.convertToLinearSpace;\n    // Tangents back compat\n    if (serializationObject.name === \"tangent\" && serializationObject.mode === NodeMaterialBlockConnectionPointMode.Attribute && serializationObject.type === NodeMaterialBlockConnectionPointTypes.Vector3) {\n      this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\n    }\n    if (!serializationObject.valueType) {\n      return;\n    }\n    if (serializationObject.valueType === \"number\") {\n      this._storedValue = serializationObject.value;\n    } else {\n      const valueType = GetClass(serializationObject.valueType);\n      if (valueType) {\n        this._storedValue = valueType.FromArray(serializationObject.value);\n      }\n    }\n  }\n}\nRegisterClass(\"BABYLON.InputBlock\", InputBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockConnectionPointMode","NodeMaterialSystemValues","Matrix","Vector2","Vector3","Vector4","NodeMaterialBlockTargets","GetClass","RegisterClass","Color3","Color4","TmpColors","AnimatedInputBlockTypes","Observable","PrecisionDate","remapAttributeName","position2d","particle_uv","particle_color","particle_texturemask","particle_positionw","attributeInFragmentOnly","attributeAsUniform","InputBlock","constructor","name","target","Vertex","type","AutoDetect","Undefined","None","_type","setDefaultValue","registerOutput","isUniform","value","isNaN","Float","getClassName","isAttribute","isSystemValue","_systemValue","World","WorldView","WorldViewProjection","View","ViewProjection","Projection","CameraPosition","FogColor","DeltaTime","MaterialAlpha","CameraParameters","validateBlockName","newName","output","_outputs","setAsAttribute","attributeName","_mode","Attribute","setAsSystemValue","systemValue","_storedValue","isBoolean","min","max","Math","Uniform","onValueChangedObservable","notifyObservers","valueCallback","_valueCallback","associatedVariableName","_associatedVariableName","animationType","_animationType","isUndefined","isVarying","Varying","animate","scene","Time","getAnimationRatio","RealTime","Now","getEngine","startTime","_emitDefine","define","substring","initialize","Zero","White","Identity","_emitConstant","state","_emitFloat","x","y","z","w","set","r","g","b","convertToGammaSpace","toGammaSpaceToRef","convertToLinearSpace","toLinearSpaceToRef","a","_noContextSwitch","_emit","_getFreeVariableName","isConstant","constants","indexOf","push","_constantDeclaration","_declareOutput","uniforms","_uniformDeclaration","_getGLType","hints","sharedData","undefined","needWorldViewMatrix","needWorldViewProjectionMatrix","animatedInputs","_vertexState","_emitUniformFromString","_emitVaryingFromString","attributes","_attributeDeclaration","_transmitWorld","effect","world","worldView","worldViewProjection","variableName","setMatrix","_transmit","material","getViewMatrix","getProjectionMatrix","getTransformMatrix","bindEyePosition","setColor3","fogColor","setFloat","deltaTime","activeCamera","setFloat4","hasOriginBottomLeft","minZ","maxZ","alpha","Int","setInt","setDirectColor4","setVector2","setVector3","setVector4","_buildBlock","inputBlocks","_dumpPropertiesCode","_codeVariableName","codes","valueString","m","matrixMode","join","dispose","clear","serialize","serializationObject","mode","groupInInspector","asArray","valueType","_deserialize","rootUrl","wellKnownValue","FromArray"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/Input/inputBlock.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport { NodeMaterialBlockConnectionPointMode } from \"../../Enums/nodeMaterialBlockConnectionPointMode\";\r\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport type { Effect } from \"../../../../Materials/effect\";\r\nimport { Matrix, Vector2, Vector3, Vector4 } from \"../../../../Maths/math.vector\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { GetClass, RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { Color3, Color4, TmpColors } from \"../../../../Maths/math\";\r\nimport { AnimatedInputBlockTypes } from \"./animatedInputBlockTypes\";\r\nimport { Observable } from \"../../../../Misc/observable\";\r\nimport type { NodeMaterial } from \"../../nodeMaterial\";\r\nimport { PrecisionDate } from \"core/Misc/precisionDate\";\r\n\r\nconst remapAttributeName: { [name: string]: string } = {\r\n    position2d: \"position\",\r\n    particle_uv: \"vUV\",\r\n    particle_color: \"vColor\",\r\n    particle_texturemask: \"textureMask\",\r\n    particle_positionw: \"vPositionW\",\r\n};\r\n\r\nconst attributeInFragmentOnly: { [name: string]: boolean } = {\r\n    particle_uv: true,\r\n    particle_color: true,\r\n    particle_texturemask: true,\r\n    particle_positionw: true,\r\n};\r\n\r\nconst attributeAsUniform: { [name: string]: boolean } = {\r\n    particle_texturemask: true,\r\n};\r\n\r\n/**\r\n * Block used to expose an input value\r\n */\r\nexport class InputBlock extends NodeMaterialBlock {\r\n    private _mode = NodeMaterialBlockConnectionPointMode.Undefined;\r\n    private _associatedVariableName: string;\r\n    private _storedValue: any;\r\n    private _valueCallback: () => any;\r\n    private _type: NodeMaterialBlockConnectionPointTypes;\r\n    private _animationType = AnimatedInputBlockTypes.None;\r\n\r\n    /** Gets or set a value used to limit the range of float values */\r\n    public min: number = 0;\r\n\r\n    /** Gets or set a value used to limit the range of float values */\r\n    public max: number = 0;\r\n\r\n    /** Gets or set a value indicating that this input can only get 0 and 1 values */\r\n    public isBoolean: boolean = false;\r\n\r\n    /** Gets or sets a value used by the Node Material editor to determine how to configure the current value if it is a matrix */\r\n    public matrixMode: number = 0;\r\n\r\n    /** @internal */\r\n    public _systemValue: Nullable<NodeMaterialSystemValues> = null;\r\n\r\n    /** Gets or sets a boolean indicating that the value of this input will not change after a build */\r\n    public isConstant = false;\r\n\r\n    /** Gets or sets the group to use to display this block in the Inspector */\r\n    public groupInInspector = \"\";\r\n\r\n    /** Gets an observable raised when the value is changed */\r\n    public onValueChangedObservable = new Observable<InputBlock>();\r\n\r\n    /** Gets or sets a boolean indicating if content needs to be converted to gamma space (for color3/4 only) */\r\n    public convertToGammaSpace = false;\r\n\r\n    /** Gets or sets a boolean indicating if content needs to be converted to linear space (for color3/4 only) */\r\n    public convertToLinearSpace = false;\r\n\r\n    /**\r\n     * Gets or sets the connection point type (default is float)\r\n     */\r\n    public get type(): NodeMaterialBlockConnectionPointTypes {\r\n        if (this._type === NodeMaterialBlockConnectionPointTypes.AutoDetect) {\r\n            if (this.isUniform && this.value != null) {\r\n                if (!isNaN(this.value)) {\r\n                    this._type = NodeMaterialBlockConnectionPointTypes.Float;\r\n                    return this._type;\r\n                }\r\n\r\n                switch (this.value.getClassName()) {\r\n                    case \"Vector2\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector2;\r\n                        return this._type;\r\n                    case \"Vector3\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\r\n                        return this._type;\r\n                    case \"Vector4\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\r\n                        return this._type;\r\n                    case \"Color3\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Color3;\r\n                        return this._type;\r\n                    case \"Color4\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Color4;\r\n                        return this._type;\r\n                    case \"Matrix\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Matrix;\r\n                        return this._type;\r\n                }\r\n            }\r\n\r\n            if (this.isAttribute) {\r\n                switch (this.name) {\r\n                    case \"position\":\r\n                    case \"normal\":\r\n                    case \"particle_positionw\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\r\n                        return this._type;\r\n                    case \"uv\":\r\n                    case \"uv2\":\r\n                    case \"uv3\":\r\n                    case \"uv4\":\r\n                    case \"uv5\":\r\n                    case \"uv6\":\r\n                    case \"position2d\":\r\n                    case \"particle_uv\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector2;\r\n                        return this._type;\r\n                    case \"matricesIndices\":\r\n                    case \"matricesWeights\":\r\n                    case \"world0\":\r\n                    case \"world1\":\r\n                    case \"world2\":\r\n                    case \"world3\":\r\n                    case \"tangent\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\r\n                        return this._type;\r\n                    case \"color\":\r\n                    case \"instanceColor\":\r\n                    case \"particle_color\":\r\n                    case \"particle_texturemask\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Color4;\r\n                        return this._type;\r\n                }\r\n            }\r\n\r\n            if (this.isSystemValue) {\r\n                switch (this._systemValue) {\r\n                    case NodeMaterialSystemValues.World:\r\n                    case NodeMaterialSystemValues.WorldView:\r\n                    case NodeMaterialSystemValues.WorldViewProjection:\r\n                    case NodeMaterialSystemValues.View:\r\n                    case NodeMaterialSystemValues.ViewProjection:\r\n                    case NodeMaterialSystemValues.Projection:\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Matrix;\r\n                        return this._type;\r\n                    case NodeMaterialSystemValues.CameraPosition:\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\r\n                        return this._type;\r\n                    case NodeMaterialSystemValues.FogColor:\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Color3;\r\n                        return this._type;\r\n                    case NodeMaterialSystemValues.DeltaTime:\r\n                    case NodeMaterialSystemValues.MaterialAlpha:\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Float;\r\n                        return this._type;\r\n                    case NodeMaterialSystemValues.CameraParameters:\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\r\n                        return this._type;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this._type;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputBlock\r\n     * @param name defines the block name\r\n     * @param target defines the target of that block (Vertex by default)\r\n     * @param type defines the type of the input (can be set to NodeMaterialBlockConnectionPointTypes.AutoDetect)\r\n     */\r\n    public constructor(name: string, target = NodeMaterialBlockTargets.Vertex, type: NodeMaterialBlockConnectionPointTypes = NodeMaterialBlockConnectionPointTypes.AutoDetect) {\r\n        super(name, target, false, true);\r\n\r\n        this._type = type;\r\n\r\n        this.setDefaultValue();\r\n\r\n        this.registerOutput(\"output\", type);\r\n    }\r\n\r\n    /**\r\n     * Validates if a name is a reserve word.\r\n     * @param newName the new name to be given to the node.\r\n     * @returns false if the name is a reserve word, else true.\r\n     */\r\n    public validateBlockName(newName: string) {\r\n        if (!this.isAttribute) {\r\n            return super.validateBlockName(newName);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Set the source of this connection point to a vertex attribute\r\n     * @param attributeName defines the attribute name (position, uv, normal, etc...). If not specified it will take the connection point name\r\n     * @returns the current connection point\r\n     */\r\n    public setAsAttribute(attributeName?: string): InputBlock {\r\n        this._mode = NodeMaterialBlockConnectionPointMode.Attribute;\r\n        if (attributeName) {\r\n            this.name = attributeName;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the source of this connection point to a system value\r\n     * @param value define the system value to use (world, view, etc...) or null to switch to manual value\r\n     * @returns the current connection point\r\n     */\r\n    public setAsSystemValue(value: Nullable<NodeMaterialSystemValues>): InputBlock {\r\n        this.systemValue = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the value of that point.\r\n     * Please note that this value will be ignored if valueCallback is defined\r\n     */\r\n    public get value(): any {\r\n        return this._storedValue;\r\n    }\r\n\r\n    public set value(value: any) {\r\n        if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\r\n            if (this.isBoolean) {\r\n                value = value ? 1 : 0;\r\n            } else if (this.min !== this.max) {\r\n                value = Math.max(this.min, value);\r\n                value = Math.min(this.max, value);\r\n            }\r\n        }\r\n\r\n        this._storedValue = value;\r\n        this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\r\n\r\n        this.onValueChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a callback used to get the value of that point.\r\n     * Please note that setting this value will force the connection point to ignore the value property\r\n     */\r\n    public get valueCallback(): () => any {\r\n        return this._valueCallback;\r\n    }\r\n\r\n    public set valueCallback(value: () => any) {\r\n        this._valueCallback = value;\r\n        this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the associated variable name in the shader\r\n     */\r\n    public get associatedVariableName(): string {\r\n        return this._associatedVariableName;\r\n    }\r\n\r\n    public set associatedVariableName(value: string) {\r\n        this._associatedVariableName = value;\r\n    }\r\n\r\n    /** Gets or sets the type of animation applied to the input */\r\n    public get animationType() {\r\n        return this._animationType;\r\n    }\r\n\r\n    public set animationType(value: AnimatedInputBlockTypes) {\r\n        this._animationType = value;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that this connection point not defined yet\r\n     */\r\n    public get isUndefined(): boolean {\r\n        return this._mode === NodeMaterialBlockConnectionPointMode.Undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this connection point is coming from an uniform.\r\n     * In this case the connection point name must be the name of the uniform to use.\r\n     * Can only be set on inputs\r\n     */\r\n    public get isUniform(): boolean {\r\n        return this._mode === NodeMaterialBlockConnectionPointMode.Uniform;\r\n    }\r\n\r\n    public set isUniform(value: boolean) {\r\n        this._mode = value ? NodeMaterialBlockConnectionPointMode.Uniform : NodeMaterialBlockConnectionPointMode.Undefined;\r\n        this.associatedVariableName = \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this connection point is coming from an attribute.\r\n     * In this case the connection point name must be the name of the attribute to use\r\n     * Can only be set on inputs\r\n     */\r\n    public get isAttribute(): boolean {\r\n        return this._mode === NodeMaterialBlockConnectionPointMode.Attribute;\r\n    }\r\n\r\n    public set isAttribute(value: boolean) {\r\n        this._mode = value ? NodeMaterialBlockConnectionPointMode.Attribute : NodeMaterialBlockConnectionPointMode.Undefined;\r\n        this.associatedVariableName = \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this connection point is generating a varying variable.\r\n     * Can only be set on exit points\r\n     */\r\n    public get isVarying(): boolean {\r\n        return this._mode === NodeMaterialBlockConnectionPointMode.Varying;\r\n    }\r\n\r\n    public set isVarying(value: boolean) {\r\n        this._mode = value ? NodeMaterialBlockConnectionPointMode.Varying : NodeMaterialBlockConnectionPointMode.Undefined;\r\n        this.associatedVariableName = \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the current connection point is a system value\r\n     */\r\n    public get isSystemValue(): boolean {\r\n        return this._systemValue != null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current well known value or null if not defined as a system value\r\n     */\r\n    public get systemValue(): Nullable<NodeMaterialSystemValues> {\r\n        return this._systemValue;\r\n    }\r\n\r\n    public set systemValue(value: Nullable<NodeMaterialSystemValues>) {\r\n        this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\r\n        this.associatedVariableName = \"\";\r\n        this._systemValue = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"InputBlock\";\r\n    }\r\n\r\n    /**\r\n     * Animate the input if animationType !== None\r\n     * @param scene defines the rendering scene\r\n     */\r\n    public animate(scene: Scene) {\r\n        switch (this._animationType) {\r\n            case AnimatedInputBlockTypes.Time: {\r\n                if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\r\n                    this.value += scene.getAnimationRatio() * 0.01;\r\n                }\r\n                break;\r\n            }\r\n            case AnimatedInputBlockTypes.RealTime: {\r\n                if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\r\n                    this.value = (PrecisionDate.Now - scene.getEngine().startTime) / 1000;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _emitDefine(define: string): string {\r\n        if (define[0] === \"!\") {\r\n            return `#ifndef ${define.substring(1)}\\r\\n`;\r\n        }\r\n\r\n        return `#ifdef ${define}\\r\\n`;\r\n    }\r\n\r\n    public initialize() {\r\n        this.associatedVariableName = \"\";\r\n    }\r\n\r\n    /**\r\n     * Set the input block to its default value (based on its type)\r\n     */\r\n    public setDefaultValue() {\r\n        switch (this.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float:\r\n                this.value = 0;\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                this.value = Vector2.Zero();\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                this.value = Vector3.Zero();\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                this.value = Vector4.Zero();\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                this.value = Color3.White();\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                this.value = new Color4(1, 1, 1, 1);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Matrix:\r\n                this.value = Matrix.Identity();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _emitConstant(state: NodeMaterialBuildState) {\r\n        switch (this.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float:\r\n                return `${state._emitFloat(this.value)}`;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                return `vec2(${this.value.x}, ${this.value.y})`;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                return `vec3(${this.value.x}, ${this.value.y}, ${this.value.z})`;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                return `vec4(${this.value.x}, ${this.value.y}, ${this.value.z}, ${this.value.w})`;\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                TmpColors.Color3[0].set(this.value.r, this.value.g, this.value.b);\r\n                if (this.convertToGammaSpace) {\r\n                    TmpColors.Color3[0].toGammaSpaceToRef(TmpColors.Color3[0]);\r\n                }\r\n                if (this.convertToLinearSpace) {\r\n                    TmpColors.Color3[0].toLinearSpaceToRef(TmpColors.Color3[0]);\r\n                }\r\n                return `vec3(${TmpColors.Color3[0].r}, ${TmpColors.Color3[0].g}, ${TmpColors.Color3[0].b})`;\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                TmpColors.Color4[0].set(this.value.r, this.value.g, this.value.b, this.value.a);\r\n                if (this.convertToGammaSpace) {\r\n                    TmpColors.Color4[0].toGammaSpaceToRef(TmpColors.Color4[0]);\r\n                }\r\n                if (this.convertToLinearSpace) {\r\n                    TmpColors.Color4[0].toLinearSpaceToRef(TmpColors.Color4[0]);\r\n                }\r\n                return `vec4(${TmpColors.Color4[0].r}, ${TmpColors.Color4[0].g}, ${TmpColors.Color4[0].b}, ${TmpColors.Color4[0].a})`;\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _noContextSwitch(): boolean {\r\n        return attributeInFragmentOnly[this.name];\r\n    }\r\n\r\n    private _emit(state: NodeMaterialBuildState, define?: string) {\r\n        // Uniforms\r\n        if (this.isUniform) {\r\n            if (!this.associatedVariableName) {\r\n                this.associatedVariableName = state._getFreeVariableName(\"u_\" + this.name);\r\n            }\r\n\r\n            if (this.isConstant) {\r\n                if (state.constants.indexOf(this.associatedVariableName) !== -1) {\r\n                    return;\r\n                }\r\n                state.constants.push(this.associatedVariableName);\r\n                state._constantDeclaration += this._declareOutput(this.output, state) + ` = ${this._emitConstant(state)};\\r\\n`;\r\n                return;\r\n            }\r\n\r\n            if (state.uniforms.indexOf(this.associatedVariableName) !== -1) {\r\n                return;\r\n            }\r\n\r\n            state.uniforms.push(this.associatedVariableName);\r\n            if (define) {\r\n                state._uniformDeclaration += this._emitDefine(define);\r\n            }\r\n            state._uniformDeclaration += `uniform ${state._getGLType(this.type)} ${this.associatedVariableName};\\r\\n`;\r\n            if (define) {\r\n                state._uniformDeclaration += `#endif\\r\\n`;\r\n            }\r\n\r\n            // well known\r\n            const hints = state.sharedData.hints;\r\n            if (this._systemValue !== null && this._systemValue !== undefined) {\r\n                switch (this._systemValue) {\r\n                    case NodeMaterialSystemValues.WorldView:\r\n                        hints.needWorldViewMatrix = true;\r\n                        break;\r\n                    case NodeMaterialSystemValues.WorldViewProjection:\r\n                        hints.needWorldViewProjectionMatrix = true;\r\n                        break;\r\n                }\r\n            } else {\r\n                if (this._animationType !== AnimatedInputBlockTypes.None) {\r\n                    state.sharedData.animatedInputs.push(this);\r\n                }\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // Attribute\r\n        if (this.isAttribute) {\r\n            this.associatedVariableName = remapAttributeName[this.name] ?? this.name;\r\n\r\n            if (this.target === NodeMaterialBlockTargets.Vertex && state._vertexState) {\r\n                // Attribute for fragment need to be carried over by varyings\r\n                if (attributeInFragmentOnly[this.name]) {\r\n                    if (attributeAsUniform[this.name]) {\r\n                        state._emitUniformFromString(this.associatedVariableName, state._getGLType(this.type), define);\r\n                    } else {\r\n                        state._emitVaryingFromString(this.associatedVariableName, state._getGLType(this.type), define);\r\n                    }\r\n                } else {\r\n                    this._emit(state._vertexState, define);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (state.attributes.indexOf(this.associatedVariableName) !== -1) {\r\n                return;\r\n            }\r\n\r\n            state.attributes.push(this.associatedVariableName);\r\n\r\n            if (attributeInFragmentOnly[this.name]) {\r\n                if (attributeAsUniform[this.name]) {\r\n                    state._emitUniformFromString(this.associatedVariableName, state._getGLType(this.type), define);\r\n                } else {\r\n                    state._emitVaryingFromString(this.associatedVariableName, state._getGLType(this.type), define);\r\n                }\r\n            } else {\r\n                if (define) {\r\n                    state._attributeDeclaration += this._emitDefine(define);\r\n                }\r\n                state._attributeDeclaration += `attribute ${state._getGLType(this.type)} ${this.associatedVariableName};\\r\\n`;\r\n                if (define) {\r\n                    state._attributeDeclaration += `#endif\\r\\n`;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _transmitWorld(effect: Effect, world: Matrix, worldView: Matrix, worldViewProjection: Matrix) {\r\n        if (!this._systemValue) {\r\n            return;\r\n        }\r\n\r\n        const variableName = this.associatedVariableName;\r\n        switch (this._systemValue) {\r\n            case NodeMaterialSystemValues.World:\r\n                effect.setMatrix(variableName, world);\r\n                break;\r\n            case NodeMaterialSystemValues.WorldView:\r\n                effect.setMatrix(variableName, worldView);\r\n                break;\r\n            case NodeMaterialSystemValues.WorldViewProjection:\r\n                effect.setMatrix(variableName, worldViewProjection);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _transmit(effect: Effect, scene: Scene, material: NodeMaterial) {\r\n        if (this.isAttribute) {\r\n            return;\r\n        }\r\n\r\n        const variableName = this.associatedVariableName;\r\n        if (this._systemValue) {\r\n            switch (this._systemValue) {\r\n                case NodeMaterialSystemValues.World:\r\n                case NodeMaterialSystemValues.WorldView:\r\n                case NodeMaterialSystemValues.WorldViewProjection:\r\n                    return;\r\n                case NodeMaterialSystemValues.View:\r\n                    effect.setMatrix(variableName, scene.getViewMatrix());\r\n                    break;\r\n                case NodeMaterialSystemValues.Projection:\r\n                    effect.setMatrix(variableName, scene.getProjectionMatrix());\r\n                    break;\r\n                case NodeMaterialSystemValues.ViewProjection:\r\n                    effect.setMatrix(variableName, scene.getTransformMatrix());\r\n                    break;\r\n                case NodeMaterialSystemValues.CameraPosition:\r\n                    scene.bindEyePosition(effect, variableName, true);\r\n                    break;\r\n                case NodeMaterialSystemValues.FogColor:\r\n                    effect.setColor3(variableName, scene.fogColor);\r\n                    break;\r\n                case NodeMaterialSystemValues.DeltaTime:\r\n                    effect.setFloat(variableName, scene.deltaTime / 1000.0);\r\n                    break;\r\n                case NodeMaterialSystemValues.CameraParameters:\r\n                    if (scene.activeCamera) {\r\n                        effect.setFloat4(\r\n                            variableName,\r\n                            scene.getEngine().hasOriginBottomLeft ? -1 : 1,\r\n                            scene.activeCamera.minZ,\r\n                            scene.activeCamera.maxZ,\r\n                            1 / scene.activeCamera.maxZ\r\n                        );\r\n                    }\r\n                    break;\r\n                case NodeMaterialSystemValues.MaterialAlpha:\r\n                    effect.setFloat(variableName, material.alpha);\r\n                    break;\r\n            }\r\n            return;\r\n        }\r\n\r\n        const value = this._valueCallback ? this._valueCallback() : this._storedValue;\r\n\r\n        if (value === null) {\r\n            return;\r\n        }\r\n\r\n        switch (this.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float:\r\n                effect.setFloat(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Int:\r\n                effect.setInt(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                TmpColors.Color3[0].set(this.value.r, this.value.g, this.value.b);\r\n                if (this.convertToGammaSpace) {\r\n                    TmpColors.Color3[0].toGammaSpaceToRef(TmpColors.Color3[0]);\r\n                }\r\n                if (this.convertToLinearSpace) {\r\n                    TmpColors.Color3[0].toLinearSpaceToRef(TmpColors.Color3[0]);\r\n                }\r\n                effect.setColor3(variableName, TmpColors.Color3[0]);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                TmpColors.Color4[0].set(this.value.r, this.value.g, this.value.b, this.value.a);\r\n                if (this.convertToGammaSpace) {\r\n                    TmpColors.Color4[0].toGammaSpaceToRef(TmpColors.Color4[0]);\r\n                }\r\n                if (this.convertToLinearSpace) {\r\n                    TmpColors.Color4[0].toLinearSpaceToRef(TmpColors.Color4[0]);\r\n                }\r\n                effect.setDirectColor4(variableName, TmpColors.Color4[0]);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                effect.setVector2(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                effect.setVector3(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                effect.setVector4(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Matrix:\r\n                effect.setMatrix(variableName, value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (this.isUniform || this.isSystemValue) {\r\n            state.sharedData.inputBlocks.push(this);\r\n        }\r\n\r\n        this._emit(state);\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const variableName = this._codeVariableName;\r\n\r\n        if (this.isAttribute) {\r\n            return super._dumpPropertiesCode() + `${variableName}.setAsAttribute(\"${this.name}\");\\r\\n`;\r\n        }\r\n        if (this.isSystemValue) {\r\n            return super._dumpPropertiesCode() + `${variableName}.setAsSystemValue(BABYLON.NodeMaterialSystemValues.${NodeMaterialSystemValues[this._systemValue!]});\\r\\n`;\r\n        }\r\n        if (this.isUniform) {\r\n            const codes: string[] = [];\r\n\r\n            let valueString = \"\";\r\n\r\n            switch (this.type) {\r\n                case NodeMaterialBlockConnectionPointTypes.Float:\r\n                    valueString = `${this.value}`;\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                    valueString = `new BABYLON.Vector2(${this.value.x}, ${this.value.y})`;\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                    valueString = `new BABYLON.Vector3(${this.value.x}, ${this.value.y}, ${this.value.z})`;\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                    valueString = `new BABYLON.Vector4(${this.value.x}, ${this.value.y}, ${this.value.z}, ${this.value.w})`;\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                    valueString = `new BABYLON.Color3(${this.value.r}, ${this.value.g}, ${this.value.b})`;\r\n                    if (this.convertToGammaSpace) {\r\n                        valueString += \".toGammaSpace()\";\r\n                    }\r\n                    if (this.convertToLinearSpace) {\r\n                        valueString += \".toLinearSpace()\";\r\n                    }\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                    valueString = `new BABYLON.Color4(${this.value.r}, ${this.value.g}, ${this.value.b}, ${this.value.a})`;\r\n                    if (this.convertToGammaSpace) {\r\n                        valueString += \".toGammaSpace()\";\r\n                    }\r\n                    if (this.convertToLinearSpace) {\r\n                        valueString += \".toLinearSpace()\";\r\n                    }\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Matrix:\r\n                    valueString = `BABYLON.Matrix.FromArray([${(this.value as Matrix).m}])`;\r\n                    break;\r\n            }\r\n\r\n            // Common Property \"Value\"\r\n            codes.push(`${variableName}.value = ${valueString}`);\r\n\r\n            // Float-Value-Specific Properties\r\n            if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\r\n                codes.push(\r\n                    `${variableName}.min = ${this.min}`,\r\n                    `${variableName}.max = ${this.max}`,\r\n                    `${variableName}.isBoolean = ${this.isBoolean}`,\r\n                    `${variableName}.matrixMode = ${this.matrixMode}`,\r\n                    `${variableName}.animationType = BABYLON.AnimatedInputBlockTypes.${AnimatedInputBlockTypes[this.animationType]}`\r\n                );\r\n            }\r\n\r\n            // Common Property \"Type\"\r\n            codes.push(`${variableName}.isConstant = ${this.isConstant}`);\r\n\r\n            codes.push(\"\");\r\n\r\n            return super._dumpPropertiesCode() + codes.join(\";\\r\\n\");\r\n        }\r\n        return super._dumpPropertiesCode();\r\n    }\r\n\r\n    public dispose() {\r\n        this.onValueChangedObservable.clear();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.type = this.type;\r\n        serializationObject.mode = this._mode;\r\n        serializationObject.systemValue = this._systemValue;\r\n        serializationObject.animationType = this._animationType;\r\n        serializationObject.min = this.min;\r\n        serializationObject.max = this.max;\r\n        serializationObject.isBoolean = this.isBoolean;\r\n        serializationObject.matrixMode = this.matrixMode;\r\n        serializationObject.isConstant = this.isConstant;\r\n        serializationObject.groupInInspector = this.groupInInspector;\r\n        serializationObject.convertToGammaSpace = this.convertToGammaSpace;\r\n        serializationObject.convertToLinearSpace = this.convertToLinearSpace;\r\n\r\n        if (this._storedValue != null && this._mode === NodeMaterialBlockConnectionPointMode.Uniform) {\r\n            if (this._storedValue.asArray) {\r\n                serializationObject.valueType = \"BABYLON.\" + this._storedValue.getClassName();\r\n                serializationObject.value = this._storedValue.asArray();\r\n            } else {\r\n                serializationObject.valueType = \"number\";\r\n                serializationObject.value = this._storedValue;\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        this._mode = serializationObject.mode;\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this._type = serializationObject.type;\r\n\r\n        this._systemValue = serializationObject.systemValue || serializationObject.wellKnownValue;\r\n        this._animationType = serializationObject.animationType;\r\n        this.min = serializationObject.min || 0;\r\n        this.max = serializationObject.max || 0;\r\n        this.isBoolean = !!serializationObject.isBoolean;\r\n        this.matrixMode = serializationObject.matrixMode || 0;\r\n        this.isConstant = !!serializationObject.isConstant;\r\n        this.groupInInspector = serializationObject.groupInInspector || \"\";\r\n        this.convertToGammaSpace = !!serializationObject.convertToGammaSpace;\r\n        this.convertToLinearSpace = !!serializationObject.convertToLinearSpace;\r\n\r\n        // Tangents back compat\r\n        if (\r\n            serializationObject.name === \"tangent\" &&\r\n            serializationObject.mode === NodeMaterialBlockConnectionPointMode.Attribute &&\r\n            serializationObject.type === NodeMaterialBlockConnectionPointTypes.Vector3\r\n        ) {\r\n            this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\r\n        }\r\n\r\n        if (!serializationObject.valueType) {\r\n            return;\r\n        }\r\n\r\n        if (serializationObject.valueType === \"number\") {\r\n            this._storedValue = serializationObject.value;\r\n        } else {\r\n            const valueType = GetClass(serializationObject.valueType);\r\n\r\n            if (valueType) {\r\n                this._storedValue = valueType.FromArray(serializationObject.value);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.InputBlock\", InputBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}