{"ast":null,"code":"import { Engine } from \"../Engines/engine.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n/**\n * Class used to work with sound analyzer using fast fourier transform (FFT)\n * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\n */\nexport class Analyser {\n  /**\n   * Creates a new analyser\n   * @param scene defines hosting scene\n   */\n  constructor(scene) {\n    /**\n     * Gets or sets the smoothing\n     * @ignorenaming\n     */\n    this.SMOOTHING = 0.75;\n    /**\n     * Gets or sets the FFT table size\n     * @ignorenaming\n     */\n    this.FFT_SIZE = 512;\n    /**\n     * Gets or sets the bar graph amplitude\n     * @ignorenaming\n     */\n    this.BARGRAPHAMPLITUDE = 256;\n    /**\n     * Gets or sets the position of the debug canvas\n     * @ignorenaming\n     */\n    this.DEBUGCANVASPOS = {\n      x: 20,\n      y: 20\n    };\n    /**\n     * Gets or sets the debug canvas size\n     * @ignorenaming\n     */\n    this.DEBUGCANVASSIZE = {\n      width: 320,\n      height: 200\n    };\n    scene = scene || EngineStore.LastCreatedScene;\n    if (!scene) {\n      return;\n    }\n    this._scene = scene;\n    if (!Engine.audioEngine) {\n      Tools.Warn(\"No audio engine initialized, failed to create an audio analyser\");\n      return;\n    }\n    this._audioEngine = Engine.audioEngine;\n    if (this._audioEngine.canUseWebAudio && this._audioEngine.audioContext) {\n      this._webAudioAnalyser = this._audioEngine.audioContext.createAnalyser();\n      this._webAudioAnalyser.minDecibels = -140;\n      this._webAudioAnalyser.maxDecibels = 0;\n      this._byteFreqs = new Uint8Array(this._webAudioAnalyser.frequencyBinCount);\n      this._byteTime = new Uint8Array(this._webAudioAnalyser.frequencyBinCount);\n      this._floatFreqs = new Float32Array(this._webAudioAnalyser.frequencyBinCount);\n    }\n  }\n  /**\n   * Get the number of data values you will have to play with for the visualization\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount\n   * @returns a number\n   */\n  getFrequencyBinCount() {\n    if (this._audioEngine.canUseWebAudio) {\n      return this._webAudioAnalyser.frequencyBinCount;\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * Gets the current frequency data as a byte array\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData\n   * @returns a Uint8Array\n   */\n  getByteFrequencyData() {\n    if (this._audioEngine.canUseWebAudio) {\n      this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\n      this._webAudioAnalyser.fftSize = this.FFT_SIZE;\n      this._webAudioAnalyser.getByteFrequencyData(this._byteFreqs);\n    }\n    return this._byteFreqs;\n  }\n  /**\n   * Gets the current waveform as a byte array\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData\n   * @returns a Uint8Array\n   */\n  getByteTimeDomainData() {\n    if (this._audioEngine.canUseWebAudio) {\n      this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\n      this._webAudioAnalyser.fftSize = this.FFT_SIZE;\n      this._webAudioAnalyser.getByteTimeDomainData(this._byteTime);\n    }\n    return this._byteTime;\n  }\n  /**\n   * Gets the current frequency data as a float array\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData\n   * @returns a Float32Array\n   */\n  getFloatFrequencyData() {\n    if (this._audioEngine.canUseWebAudio) {\n      this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\n      this._webAudioAnalyser.fftSize = this.FFT_SIZE;\n      this._webAudioAnalyser.getFloatFrequencyData(this._floatFreqs);\n    }\n    return this._floatFreqs;\n  }\n  /**\n   * Renders the debug canvas\n   */\n  drawDebugCanvas() {\n    if (this._audioEngine.canUseWebAudio) {\n      if (!this._debugCanvas) {\n        this._debugCanvas = document.createElement(\"canvas\");\n        this._debugCanvas.width = this.DEBUGCANVASSIZE.width;\n        this._debugCanvas.height = this.DEBUGCANVASSIZE.height;\n        this._debugCanvas.style.position = \"absolute\";\n        this._debugCanvas.style.top = this.DEBUGCANVASPOS.y + \"px\";\n        this._debugCanvas.style.left = this.DEBUGCANVASPOS.x + \"px\";\n        this._debugCanvasContext = this._debugCanvas.getContext(\"2d\");\n        document.body.appendChild(this._debugCanvas);\n        this._registerFunc = () => {\n          this.drawDebugCanvas();\n        };\n        this._scene.registerBeforeRender(this._registerFunc);\n      }\n      if (this._registerFunc && this._debugCanvasContext) {\n        const workingArray = this.getByteFrequencyData();\n        this._debugCanvasContext.fillStyle = \"rgb(0, 0, 0)\";\n        this._debugCanvasContext.fillRect(0, 0, this.DEBUGCANVASSIZE.width, this.DEBUGCANVASSIZE.height);\n        // Draw the frequency domain chart.\n        for (let i = 0; i < this.getFrequencyBinCount(); i++) {\n          const value = workingArray[i];\n          const percent = value / this.BARGRAPHAMPLITUDE;\n          const height = this.DEBUGCANVASSIZE.height * percent;\n          const offset = this.DEBUGCANVASSIZE.height - height - 1;\n          const barWidth = this.DEBUGCANVASSIZE.width / this.getFrequencyBinCount();\n          const hue = i / this.getFrequencyBinCount() * 360;\n          this._debugCanvasContext.fillStyle = \"hsl(\" + hue + \", 100%, 50%)\";\n          this._debugCanvasContext.fillRect(i * barWidth, offset, barWidth, height);\n        }\n      }\n    }\n  }\n  /**\n   * Stops rendering the debug canvas and removes it\n   */\n  stopDebugCanvas() {\n    if (this._debugCanvas) {\n      if (this._registerFunc) {\n        this._scene.unregisterBeforeRender(this._registerFunc);\n        this._registerFunc = null;\n      }\n      document.body.removeChild(this._debugCanvas);\n      this._debugCanvas = null;\n      this._debugCanvasContext = null;\n    }\n  }\n  /**\n   * Connects two audio nodes\n   * @param inputAudioNode defines first node to connect\n   * @param outputAudioNode defines second node to connect\n   */\n  connectAudioNodes(inputAudioNode, outputAudioNode) {\n    if (this._audioEngine.canUseWebAudio) {\n      inputAudioNode.connect(this._webAudioAnalyser);\n      this._webAudioAnalyser.connect(outputAudioNode);\n    }\n  }\n  /**\n   * Releases all associated resources\n   */\n  dispose() {\n    if (this._audioEngine.canUseWebAudio) {\n      this._webAudioAnalyser.disconnect();\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["Engine","Tools","EngineStore","Analyser","constructor","scene","x","y","width","height","LastCreatedScene","_scene","audioEngine","Warn","_audioEngine","canUseWebAudio","audioContext","_webAudioAnalyser","createAnalyser","minDecibels","maxDecibels","_byteFreqs","Uint8Array","frequencyBinCount","_byteTime","_floatFreqs","Float32Array","getFrequencyBinCount","getByteFrequencyData","smoothingTimeConstant","SMOOTHING","fftSize","FFT_SIZE","getByteTimeDomainData","getFloatFrequencyData","drawDebugCanvas","_debugCanvas","document","createElement","DEBUGCANVASSIZE","style","position","top","DEBUGCANVASPOS","left","_debugCanvasContext","getContext","body","appendChild","_registerFunc","registerBeforeRender","workingArray","fillStyle","fillRect","i","value","percent","BARGRAPHAMPLITUDE","offset","barWidth","hue","stopDebugCanvas","unregisterBeforeRender","removeChild","connectAudioNodes","inputAudioNode","outputAudioNode","connect","dispose","disconnect"],"sourceRoot":"","sources":["../../../../lts/core/generated/Audio/analyser.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport type { IAudioEngine } from \"./Interfaces/IAudioEngine\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\n/**\r\n * Class used to work with sound analyzer using fast fourier transform (FFT)\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n */\r\nexport class Analyser {\r\n    /**\r\n     * Gets or sets the smoothing\r\n     * @ignorenaming\r\n     */\r\n    public SMOOTHING = 0.75;\r\n    /**\r\n     * Gets or sets the FFT table size\r\n     * @ignorenaming\r\n     */\r\n    public FFT_SIZE = 512;\r\n    /**\r\n     * Gets or sets the bar graph amplitude\r\n     * @ignorenaming\r\n     */\r\n    public BARGRAPHAMPLITUDE = 256;\r\n    /**\r\n     * Gets or sets the position of the debug canvas\r\n     * @ignorenaming\r\n     */\r\n    public DEBUGCANVASPOS = { x: 20, y: 20 };\r\n    /**\r\n     * Gets or sets the debug canvas size\r\n     * @ignorenaming\r\n     */\r\n    public DEBUGCANVASSIZE = { width: 320, height: 200 };\r\n\r\n    private _byteFreqs: Uint8Array;\r\n    private _byteTime: Uint8Array;\r\n    private _floatFreqs: Float32Array;\r\n    private _webAudioAnalyser: AnalyserNode;\r\n    private _debugCanvas: Nullable<HTMLCanvasElement>;\r\n    private _debugCanvasContext: Nullable<CanvasRenderingContext2D>;\r\n    private _scene: Scene;\r\n    private _registerFunc: Nullable<() => void>;\r\n    private _audioEngine: IAudioEngine;\r\n\r\n    /**\r\n     * Creates a new analyser\r\n     * @param scene defines hosting scene\r\n     */\r\n    constructor(scene?: Nullable<Scene>) {\r\n        scene = scene || EngineStore.LastCreatedScene;\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._scene = scene;\r\n        if (!Engine.audioEngine) {\r\n            Tools.Warn(\"No audio engine initialized, failed to create an audio analyser\");\r\n            return;\r\n        }\r\n        this._audioEngine = Engine.audioEngine;\r\n        if (this._audioEngine.canUseWebAudio && this._audioEngine.audioContext) {\r\n            this._webAudioAnalyser = this._audioEngine.audioContext.createAnalyser();\r\n            this._webAudioAnalyser.minDecibels = -140;\r\n            this._webAudioAnalyser.maxDecibels = 0;\r\n            this._byteFreqs = new Uint8Array(this._webAudioAnalyser.frequencyBinCount);\r\n            this._byteTime = new Uint8Array(this._webAudioAnalyser.frequencyBinCount);\r\n            this._floatFreqs = new Float32Array(this._webAudioAnalyser.frequencyBinCount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the number of data values you will have to play with for the visualization\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount\r\n     * @returns a number\r\n     */\r\n    public getFrequencyBinCount(): number {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            return this._webAudioAnalyser.frequencyBinCount;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current frequency data as a byte array\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData\r\n     * @returns a Uint8Array\r\n     */\r\n    public getByteFrequencyData(): Uint8Array {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\r\n            this._webAudioAnalyser.fftSize = this.FFT_SIZE;\r\n            this._webAudioAnalyser.getByteFrequencyData(this._byteFreqs);\r\n        }\r\n        return this._byteFreqs;\r\n    }\r\n\r\n    /**\r\n     * Gets the current waveform as a byte array\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData\r\n     * @returns a Uint8Array\r\n     */\r\n    public getByteTimeDomainData(): Uint8Array {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\r\n            this._webAudioAnalyser.fftSize = this.FFT_SIZE;\r\n            this._webAudioAnalyser.getByteTimeDomainData(this._byteTime);\r\n        }\r\n        return this._byteTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the current frequency data as a float array\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData\r\n     * @returns a Float32Array\r\n     */\r\n    public getFloatFrequencyData(): Float32Array {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\r\n            this._webAudioAnalyser.fftSize = this.FFT_SIZE;\r\n            this._webAudioAnalyser.getFloatFrequencyData(this._floatFreqs);\r\n        }\r\n        return this._floatFreqs;\r\n    }\r\n\r\n    /**\r\n     * Renders the debug canvas\r\n     */\r\n    public drawDebugCanvas() {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            if (!this._debugCanvas) {\r\n                this._debugCanvas = document.createElement(\"canvas\");\r\n                this._debugCanvas.width = this.DEBUGCANVASSIZE.width;\r\n                this._debugCanvas.height = this.DEBUGCANVASSIZE.height;\r\n                this._debugCanvas.style.position = \"absolute\";\r\n                this._debugCanvas.style.top = this.DEBUGCANVASPOS.y + \"px\";\r\n                this._debugCanvas.style.left = this.DEBUGCANVASPOS.x + \"px\";\r\n                this._debugCanvasContext = this._debugCanvas.getContext(\"2d\");\r\n                document.body.appendChild(this._debugCanvas);\r\n                this._registerFunc = () => {\r\n                    this.drawDebugCanvas();\r\n                };\r\n                this._scene.registerBeforeRender(this._registerFunc);\r\n            }\r\n            if (this._registerFunc && this._debugCanvasContext) {\r\n                const workingArray = this.getByteFrequencyData();\r\n\r\n                this._debugCanvasContext.fillStyle = \"rgb(0, 0, 0)\";\r\n                this._debugCanvasContext.fillRect(0, 0, this.DEBUGCANVASSIZE.width, this.DEBUGCANVASSIZE.height);\r\n\r\n                // Draw the frequency domain chart.\r\n                for (let i = 0; i < this.getFrequencyBinCount(); i++) {\r\n                    const value = workingArray[i];\r\n                    const percent = value / this.BARGRAPHAMPLITUDE;\r\n                    const height = this.DEBUGCANVASSIZE.height * percent;\r\n                    const offset = this.DEBUGCANVASSIZE.height - height - 1;\r\n                    const barWidth = this.DEBUGCANVASSIZE.width / this.getFrequencyBinCount();\r\n                    const hue = (i / this.getFrequencyBinCount()) * 360;\r\n                    this._debugCanvasContext.fillStyle = \"hsl(\" + hue + \", 100%, 50%)\";\r\n                    this._debugCanvasContext.fillRect(i * barWidth, offset, barWidth, height);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops rendering the debug canvas and removes it\r\n     */\r\n    public stopDebugCanvas() {\r\n        if (this._debugCanvas) {\r\n            if (this._registerFunc) {\r\n                this._scene.unregisterBeforeRender(this._registerFunc);\r\n                this._registerFunc = null;\r\n            }\r\n            document.body.removeChild(this._debugCanvas);\r\n            this._debugCanvas = null;\r\n            this._debugCanvasContext = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connects two audio nodes\r\n     * @param inputAudioNode defines first node to connect\r\n     * @param outputAudioNode defines second node to connect\r\n     */\r\n    public connectAudioNodes(inputAudioNode: AudioNode, outputAudioNode: AudioNode) {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            inputAudioNode.connect(this._webAudioAnalyser);\r\n            this._webAudioAnalyser.connect(outputAudioNode);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            this._webAudioAnalyser.disconnect();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}