{"ast":null,"code":"import { PrecisionDate } from \"./precisionDate.js\";\n/**\n * Performance monitor tracks rolling average frame-time and frame-time variance over a user defined sliding-window\n */\nexport class PerformanceMonitor {\n  /**\n   * constructor\n   * @param frameSampleSize The number of samples required to saturate the sliding window\n   */\n  constructor(frameSampleSize = 30) {\n    this._enabled = true;\n    this._rollingFrameTime = new RollingAverage(frameSampleSize);\n  }\n  /**\n   * Samples current frame\n   * @param timeMs A timestamp in milliseconds of the current frame to compare with other frames\n   */\n  sampleFrame(timeMs = PrecisionDate.Now) {\n    if (!this._enabled) {\n      return;\n    }\n    if (this._lastFrameTimeMs != null) {\n      const dt = timeMs - this._lastFrameTimeMs;\n      this._rollingFrameTime.add(dt);\n    }\n    this._lastFrameTimeMs = timeMs;\n  }\n  /**\n   * Returns the average frame time in milliseconds over the sliding window (or the subset of frames sampled so far)\n   */\n  get averageFrameTime() {\n    return this._rollingFrameTime.average;\n  }\n  /**\n   * Returns the variance frame time in milliseconds over the sliding window (or the subset of frames sampled so far)\n   */\n  get averageFrameTimeVariance() {\n    return this._rollingFrameTime.variance;\n  }\n  /**\n   * Returns the frame time of the most recent frame\n   */\n  get instantaneousFrameTime() {\n    return this._rollingFrameTime.history(0);\n  }\n  /**\n   * Returns the average framerate in frames per second over the sliding window (or the subset of frames sampled so far)\n   */\n  get averageFPS() {\n    return 1000.0 / this._rollingFrameTime.average;\n  }\n  /**\n   * Returns the average framerate in frames per second using the most recent frame time\n   */\n  get instantaneousFPS() {\n    const history = this._rollingFrameTime.history(0);\n    if (history === 0) {\n      return 0;\n    }\n    return 1000.0 / history;\n  }\n  /**\n   * Returns true if enough samples have been taken to completely fill the sliding window\n   */\n  get isSaturated() {\n    return this._rollingFrameTime.isSaturated();\n  }\n  /**\n   * Enables contributions to the sliding window sample set\n   */\n  enable() {\n    this._enabled = true;\n  }\n  /**\n   * Disables contributions to the sliding window sample set\n   * Samples will not be interpolated over the disabled period\n   */\n  disable() {\n    this._enabled = false;\n    //clear last sample to avoid interpolating over the disabled period when next enabled\n    this._lastFrameTimeMs = null;\n  }\n  /**\n   * Returns true if sampling is enabled\n   */\n  get isEnabled() {\n    return this._enabled;\n  }\n  /**\n   * Resets performance monitor\n   */\n  reset() {\n    //clear last sample to avoid interpolating over the disabled period when next enabled\n    this._lastFrameTimeMs = null;\n    //wipe record\n    this._rollingFrameTime.reset();\n  }\n}\n/**\n * RollingAverage\n *\n * Utility to efficiently compute the rolling average and variance over a sliding window of samples\n */\nexport class RollingAverage {\n  /**\n   * constructor\n   * @param length The number of samples required to saturate the sliding window\n   */\n  constructor(length) {\n    this._samples = new Array(length);\n    this.reset();\n  }\n  /**\n   * Adds a sample to the sample set\n   * @param v The sample value\n   */\n  add(v) {\n    //http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\n    let delta;\n    //we need to check if we've already wrapped round\n    if (this.isSaturated()) {\n      //remove bottom of stack from mean\n      const bottomValue = this._samples[this._pos];\n      delta = bottomValue - this.average;\n      this.average -= delta / (this._sampleCount - 1);\n      this._m2 -= delta * (bottomValue - this.average);\n    } else {\n      this._sampleCount++;\n    }\n    //add new value to mean\n    delta = v - this.average;\n    this.average += delta / this._sampleCount;\n    this._m2 += delta * (v - this.average);\n    //set the new variance\n    this.variance = this._m2 / (this._sampleCount - 1);\n    this._samples[this._pos] = v;\n    this._pos++;\n    this._pos %= this._samples.length; //positive wrap around\n  }\n  /**\n   * Returns previously added values or null if outside of history or outside the sliding window domain\n   * @param i Index in history. For example, pass 0 for the most recent value and 1 for the value before that\n   * @returns Value previously recorded with add() or null if outside of range\n   */\n  history(i) {\n    if (i >= this._sampleCount || i >= this._samples.length) {\n      return 0;\n    }\n    const i0 = this._wrapPosition(this._pos - 1.0);\n    return this._samples[this._wrapPosition(i0 - i)];\n  }\n  /**\n   * Returns true if enough samples have been taken to completely fill the sliding window\n   * @returns true if sample-set saturated\n   */\n  isSaturated() {\n    return this._sampleCount >= this._samples.length;\n  }\n  /**\n   * Resets the rolling average (equivalent to 0 samples taken so far)\n   */\n  reset() {\n    this.average = 0;\n    this.variance = 0;\n    this._sampleCount = 0;\n    this._pos = 0;\n    this._m2 = 0;\n  }\n  /**\n   * Wraps a value around the sample range boundaries\n   * @param i Position in sample range, for example if the sample length is 5, and i is -3, then 2 will be returned.\n   * @returns Wrapped position in sample range\n   */\n  _wrapPosition(i) {\n    const max = this._samples.length;\n    return (i % max + max) % max;\n  }\n}","map":{"version":3,"mappings":"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","names":["PrecisionDate","PerformanceMonitor","constructor","frameSampleSize","_rollingFrameTime","RollingAverage","sampleFrame","timeMs","Now","_enabled","_lastFrameTimeMs","dt","add","averageFrameTime","average","averageFrameTimeVariance","variance","instantaneousFrameTime","history","averageFPS","instantaneousFPS","isSaturated","enable","disable","isEnabled","reset","length","_samples","Array","v","delta","bottomValue","_pos","_sampleCount","_m2","i","i0","_wrapPosition","max"],"sourceRoot":"","sources":["../../../../lts/core/generated/Misc/performanceMonitor.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { PrecisionDate } from \"./precisionDate\";\r\n\r\n/**\r\n * Performance monitor tracks rolling average frame-time and frame-time variance over a user defined sliding-window\r\n */\r\nexport class PerformanceMonitor {\r\n    private _enabled: boolean = true;\r\n    private _rollingFrameTime: RollingAverage;\r\n    private _lastFrameTimeMs: Nullable<number>;\r\n\r\n    /**\r\n     * constructor\r\n     * @param frameSampleSize The number of samples required to saturate the sliding window\r\n     */\r\n    constructor(frameSampleSize: number = 30) {\r\n        this._rollingFrameTime = new RollingAverage(frameSampleSize);\r\n    }\r\n\r\n    /**\r\n     * Samples current frame\r\n     * @param timeMs A timestamp in milliseconds of the current frame to compare with other frames\r\n     */\r\n    public sampleFrame(timeMs: number = PrecisionDate.Now) {\r\n        if (!this._enabled) {\r\n            return;\r\n        }\r\n\r\n        if (this._lastFrameTimeMs != null) {\r\n            const dt = timeMs - this._lastFrameTimeMs;\r\n            this._rollingFrameTime.add(dt);\r\n        }\r\n\r\n        this._lastFrameTimeMs = timeMs;\r\n    }\r\n\r\n    /**\r\n     * Returns the average frame time in milliseconds over the sliding window (or the subset of frames sampled so far)\r\n     */\r\n    public get averageFrameTime(): number {\r\n        return this._rollingFrameTime.average;\r\n    }\r\n\r\n    /**\r\n     * Returns the variance frame time in milliseconds over the sliding window (or the subset of frames sampled so far)\r\n     */\r\n    public get averageFrameTimeVariance(): number {\r\n        return this._rollingFrameTime.variance;\r\n    }\r\n\r\n    /**\r\n     * Returns the frame time of the most recent frame\r\n     */\r\n    public get instantaneousFrameTime(): number {\r\n        return this._rollingFrameTime.history(0);\r\n    }\r\n\r\n    /**\r\n     * Returns the average framerate in frames per second over the sliding window (or the subset of frames sampled so far)\r\n     */\r\n    public get averageFPS(): number {\r\n        return 1000.0 / this._rollingFrameTime.average;\r\n    }\r\n\r\n    /**\r\n     * Returns the average framerate in frames per second using the most recent frame time\r\n     */\r\n    public get instantaneousFPS(): number {\r\n        const history = this._rollingFrameTime.history(0);\r\n\r\n        if (history === 0) {\r\n            return 0;\r\n        }\r\n\r\n        return 1000.0 / history;\r\n    }\r\n\r\n    /**\r\n     * Returns true if enough samples have been taken to completely fill the sliding window\r\n     */\r\n    public get isSaturated(): boolean {\r\n        return this._rollingFrameTime.isSaturated();\r\n    }\r\n\r\n    /**\r\n     * Enables contributions to the sliding window sample set\r\n     */\r\n    public enable() {\r\n        this._enabled = true;\r\n    }\r\n\r\n    /**\r\n     * Disables contributions to the sliding window sample set\r\n     * Samples will not be interpolated over the disabled period\r\n     */\r\n    public disable() {\r\n        this._enabled = false;\r\n        //clear last sample to avoid interpolating over the disabled period when next enabled\r\n        this._lastFrameTimeMs = null;\r\n    }\r\n\r\n    /**\r\n     * Returns true if sampling is enabled\r\n     */\r\n    public get isEnabled(): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    /**\r\n     * Resets performance monitor\r\n     */\r\n    public reset() {\r\n        //clear last sample to avoid interpolating over the disabled period when next enabled\r\n        this._lastFrameTimeMs = null;\r\n        //wipe record\r\n        this._rollingFrameTime.reset();\r\n    }\r\n}\r\n\r\n/**\r\n * RollingAverage\r\n *\r\n * Utility to efficiently compute the rolling average and variance over a sliding window of samples\r\n */\r\nexport class RollingAverage {\r\n    /**\r\n     * Current average\r\n     */\r\n    public average: number;\r\n    /**\r\n     * Current variance\r\n     */\r\n    public variance: number;\r\n\r\n    protected _samples: Array<number>;\r\n    protected _sampleCount: number;\r\n    protected _pos: number;\r\n    protected _m2: number; //sum of squares of differences from the (current) mean\r\n\r\n    /**\r\n     * constructor\r\n     * @param length The number of samples required to saturate the sliding window\r\n     */\r\n    constructor(length: number) {\r\n        this._samples = new Array<number>(length);\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Adds a sample to the sample set\r\n     * @param v The sample value\r\n     */\r\n    public add(v: number) {\r\n        //http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\r\n        let delta: number;\r\n\r\n        //we need to check if we've already wrapped round\r\n        if (this.isSaturated()) {\r\n            //remove bottom of stack from mean\r\n            const bottomValue = this._samples[this._pos];\r\n            delta = bottomValue - this.average;\r\n            this.average -= delta / (this._sampleCount - 1);\r\n            this._m2 -= delta * (bottomValue - this.average);\r\n        } else {\r\n            this._sampleCount++;\r\n        }\r\n\r\n        //add new value to mean\r\n        delta = v - this.average;\r\n        this.average += delta / this._sampleCount;\r\n        this._m2 += delta * (v - this.average);\r\n\r\n        //set the new variance\r\n        this.variance = this._m2 / (this._sampleCount - 1);\r\n\r\n        this._samples[this._pos] = v;\r\n        this._pos++;\r\n\r\n        this._pos %= this._samples.length; //positive wrap around\r\n    }\r\n\r\n    /**\r\n     * Returns previously added values or null if outside of history or outside the sliding window domain\r\n     * @param i Index in history. For example, pass 0 for the most recent value and 1 for the value before that\r\n     * @returns Value previously recorded with add() or null if outside of range\r\n     */\r\n    public history(i: number): number {\r\n        if (i >= this._sampleCount || i >= this._samples.length) {\r\n            return 0;\r\n        }\r\n\r\n        const i0 = this._wrapPosition(this._pos - 1.0);\r\n        return this._samples[this._wrapPosition(i0 - i)];\r\n    }\r\n\r\n    /**\r\n     * Returns true if enough samples have been taken to completely fill the sliding window\r\n     * @returns true if sample-set saturated\r\n     */\r\n    public isSaturated(): boolean {\r\n        return this._sampleCount >= this._samples.length;\r\n    }\r\n\r\n    /**\r\n     * Resets the rolling average (equivalent to 0 samples taken so far)\r\n     */\r\n    public reset() {\r\n        this.average = 0;\r\n        this.variance = 0;\r\n        this._sampleCount = 0;\r\n        this._pos = 0;\r\n        this._m2 = 0;\r\n    }\r\n\r\n    /**\r\n     * Wraps a value around the sample range boundaries\r\n     * @param i Position in sample range, for example if the sample length is 5, and i is -3, then 2 will be returned.\r\n     * @returns Wrapped position in sample range\r\n     */\r\n    protected _wrapPosition(i: number): number {\r\n        const max = this._samples.length;\r\n        return ((i % max) + max) % max;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}