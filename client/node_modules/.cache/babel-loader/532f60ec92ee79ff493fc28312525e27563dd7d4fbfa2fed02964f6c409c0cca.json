{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { VertexBuffer } from \"@babylonjs/core/Buffers/buffer.js\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh.js\";\nimport { SceneLoader } from \"@babylonjs/core/Loading/sceneLoader.js\";\nimport { AssetContainer } from \"@babylonjs/core/assetContainer.js\";\n/**\n * STL file type loader.\n * This is a babylon scene loader plugin.\n */\nexport class STLFileLoader {\n  constructor() {\n    /** @internal */\n    this.solidPattern = /solid (\\S*)([\\S\\s]*?)endsolid[ ]*(\\S*)/g;\n    /** @internal */\n    this.facetsPattern = /facet([\\s\\S]*?)endfacet/g;\n    /** @internal */\n    this.normalPattern = /normal[\\s]+([-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;\n    /** @internal */\n    this.vertexPattern = /vertex[\\s]+([-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;\n    /**\n     * Defines the name of the plugin.\n     */\n    this.name = \"stl\";\n    /**\n     * Defines the extensions the stl loader is able to load.\n     * force data to come in as an ArrayBuffer\n     * we'll convert to string if it looks like it's an ASCII .stl\n     */\n    this.extensions = {\n      \".stl\": {\n        isBinary: true\n      }\n    };\n  }\n  /**\n   * Import meshes into a scene.\n   * @param meshesNames An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\n   * @param scene The scene to import into\n   * @param data The data to import\n   * @param rootUrl The root url for scene and resources\n   * @param meshes The meshes array to import into\n   * @returns True if successful or false otherwise\n   */\n  importMesh(meshesNames, scene, data, rootUrl, meshes) {\n    let matches;\n    if (typeof data !== \"string\") {\n      if (this._isBinary(data)) {\n        // binary .stl\n        const babylonMesh = new Mesh(\"stlmesh\", scene);\n        this._parseBinary(babylonMesh, data);\n        if (meshes) {\n          meshes.push(babylonMesh);\n        }\n        return true;\n      }\n      // ASCII .stl\n      // convert to string\n      const array_buffer = new Uint8Array(data);\n      let str = \"\";\n      for (let i = 0; i < data.byteLength; i++) {\n        str += String.fromCharCode(array_buffer[i]); // implicitly assumes little-endian\n      }\n\n      data = str;\n    }\n    //if arrived here, data is a string, containing the STLA data.\n    while (matches = this.solidPattern.exec(data)) {\n      let meshName = matches[1];\n      const meshNameFromEnd = matches[3];\n      if (meshName != meshNameFromEnd) {\n        Tools.Error(\"Error in STL, solid name != endsolid name\");\n        return false;\n      }\n      // check meshesNames\n      if (meshesNames && meshName) {\n        if (meshesNames instanceof Array) {\n          if (!meshesNames.indexOf(meshName)) {\n            continue;\n          }\n        } else {\n          if (meshName !== meshesNames) {\n            continue;\n          }\n        }\n      }\n      // stl mesh name can be empty as well\n      meshName = meshName || \"stlmesh\";\n      const babylonMesh = new Mesh(meshName, scene);\n      this._parseASCII(babylonMesh, matches[2]);\n      if (meshes) {\n        meshes.push(babylonMesh);\n      }\n    }\n    return true;\n  }\n  /**\n   * Load into a scene.\n   * @param scene The scene to load into\n   * @param data The data to import\n   * @param rootUrl The root url for scene and resources\n   * @returns true if successful or false otherwise\n   */\n  load(scene, data, rootUrl) {\n    const result = this.importMesh(null, scene, data, rootUrl, null);\n    return result;\n  }\n  /**\n   * Load into an asset container.\n   * @param scene The scene to load into\n   * @param data The data to import\n   * @param rootUrl The root url for scene and resources\n   * @returns The loaded asset container\n   */\n  loadAssetContainer(scene, data, rootUrl) {\n    const container = new AssetContainer(scene);\n    scene._blockEntityCollection = true;\n    this.importMesh(null, scene, data, rootUrl, container.meshes);\n    scene._blockEntityCollection = false;\n    return container;\n  }\n  _isBinary(data) {\n    // check if file size is correct for binary stl\n    const reader = new DataView(data);\n    // A Binary STL header is 80 bytes, if the data size is not great than\n    // that then it's not a binary STL.\n    if (reader.byteLength <= 80) {\n      return false;\n    }\n    const faceSize = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n    const nFaces = reader.getUint32(80, true);\n    if (80 + 32 / 8 + nFaces * faceSize === reader.byteLength) {\n      return true;\n    }\n    // US-ASCII begin with 's', 'o', 'l', 'i', 'd'\n    const ascii = [115, 111, 108, 105, 100];\n    for (let off = 0; off < 5; off++) {\n      if (reader.getUint8(off) !== ascii[off]) {\n        return true;\n      }\n    }\n    return false;\n  }\n  _parseBinary(mesh, data) {\n    const reader = new DataView(data);\n    const faces = reader.getUint32(80, true);\n    const dataOffset = 84;\n    const faceLength = 12 * 4 + 2;\n    let offset = 0;\n    const positions = new Float32Array(faces * 3 * 3);\n    const normals = new Float32Array(faces * 3 * 3);\n    const indices = new Uint32Array(faces * 3);\n    let indicesCount = 0;\n    for (let face = 0; face < faces; face++) {\n      const start = dataOffset + face * faceLength;\n      const normalX = reader.getFloat32(start, true);\n      const normalY = reader.getFloat32(start + 4, true);\n      const normalZ = reader.getFloat32(start + 8, true);\n      for (let i = 1; i <= 3; i++) {\n        const vertexstart = start + i * 12;\n        // ordering is intentional to match ascii import\n        positions[offset] = reader.getFloat32(vertexstart, true);\n        normals[offset] = normalX;\n        if (!STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\n          positions[offset + 2] = reader.getFloat32(vertexstart + 4, true);\n          positions[offset + 1] = reader.getFloat32(vertexstart + 8, true);\n          normals[offset + 2] = normalY;\n          normals[offset + 1] = normalZ;\n        } else {\n          positions[offset + 1] = reader.getFloat32(vertexstart + 4, true);\n          positions[offset + 2] = reader.getFloat32(vertexstart + 8, true);\n          normals[offset + 1] = normalY;\n          normals[offset + 2] = normalZ;\n        }\n        offset += 3;\n      }\n      if (STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\n        indices[indicesCount] = indicesCount;\n        indices[indicesCount + 1] = indicesCount + 2;\n        indices[indicesCount + 2] = indicesCount + 1;\n        indicesCount += 3;\n      } else {\n        indices[indicesCount] = indicesCount++;\n        indices[indicesCount] = indicesCount++;\n        indices[indicesCount] = indicesCount++;\n      }\n    }\n    mesh.setVerticesData(VertexBuffer.PositionKind, positions);\n    mesh.setVerticesData(VertexBuffer.NormalKind, normals);\n    mesh.setIndices(indices);\n    mesh.computeWorldMatrix(true);\n  }\n  _parseASCII(mesh, solidData) {\n    const positions = [];\n    const normals = [];\n    const indices = [];\n    let indicesCount = 0;\n    //load facets, ignoring loop as the standard doesn't define it can contain more than vertices\n    let matches;\n    while (matches = this.facetsPattern.exec(solidData)) {\n      const facet = matches[1];\n      //one normal per face\n      const normalMatches = this.normalPattern.exec(facet);\n      this.normalPattern.lastIndex = 0;\n      if (!normalMatches) {\n        continue;\n      }\n      const normal = [Number(normalMatches[1]), Number(normalMatches[5]), Number(normalMatches[3])];\n      let vertexMatch;\n      while (vertexMatch = this.vertexPattern.exec(facet)) {\n        if (!STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\n          positions.push(Number(vertexMatch[1]), Number(vertexMatch[5]), Number(vertexMatch[3]));\n          normals.push(normal[0], normal[1], normal[2]);\n        } else {\n          positions.push(Number(vertexMatch[1]), Number(vertexMatch[3]), Number(vertexMatch[5]));\n          // Flipping the second and third component because inverted\n          // when normal was declared.\n          normals.push(normal[0], normal[2], normal[1]);\n        }\n      }\n      if (STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\n        indices.push(indicesCount, indicesCount + 2, indicesCount + 1);\n        indicesCount += 3;\n      } else {\n        indices.push(indicesCount++, indicesCount++, indicesCount++);\n      }\n      this.vertexPattern.lastIndex = 0;\n    }\n    this.facetsPattern.lastIndex = 0;\n    mesh.setVerticesData(VertexBuffer.PositionKind, positions);\n    mesh.setVerticesData(VertexBuffer.NormalKind, normals);\n    mesh.setIndices(indices);\n    mesh.computeWorldMatrix(true);\n  }\n}\n/**\n * Defines if Y and Z axes are swapped or not when loading an STL file.\n * The default is false to maintain backward compatibility. When set to\n * true, coordinates from the STL file are used without change.\n */\nSTLFileLoader.DO_NOT_ALTER_FILE_COORDINATES = false;\nif (SceneLoader) {\n  SceneLoader.RegisterPlugin(new STLFileLoader());\n}","map":{"version":3,"mappings":"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","names":["Tools","VertexBuffer","Mesh","SceneLoader","AssetContainer","STLFileLoader","constructor","isBinary","importMesh","meshesNames","scene","data","rootUrl","meshes","matches","_isBinary","babylonMesh","_parseBinary","push","array_buffer","Uint8Array","str","i","byteLength","String","fromCharCode","solidPattern","exec","meshName","meshNameFromEnd","Error","Array","indexOf","_parseASCII","load","result","loadAssetContainer","container","_blockEntityCollection","reader","DataView","faceSize","nFaces","getUint32","ascii","off","getUint8","mesh","faces","dataOffset","faceLength","offset","positions","Float32Array","normals","indices","Uint32Array","indicesCount","face","start","normalX","getFloat32","normalY","normalZ","vertexstart","DO_NOT_ALTER_FILE_COORDINATES","setVerticesData","PositionKind","NormalKind","setIndices","computeWorldMatrix","solidData","facetsPattern","facet","normalMatches","normalPattern","lastIndex","normal","Number","vertexMatch","vertexPattern","RegisterPlugin"],"sourceRoot":"","sources":["../../../../lts/loaders/generated/STL/stlFileLoader.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport type { ISceneLoaderPlugin, ISceneLoaderPluginExtensions } from \"core/Loading/sceneLoader\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { AssetContainer } from \"core/assetContainer\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\n/**\r\n * STL file type loader.\r\n * This is a babylon scene loader plugin.\r\n */\r\nexport class STLFileLoader implements ISceneLoaderPlugin {\r\n    /** @internal */\r\n    public solidPattern = /solid (\\S*)([\\S\\s]*?)endsolid[ ]*(\\S*)/g;\r\n\r\n    /** @internal */\r\n    public facetsPattern = /facet([\\s\\S]*?)endfacet/g;\r\n    /** @internal */\r\n    public normalPattern = /normal[\\s]+([-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;\r\n    /** @internal */\r\n    public vertexPattern = /vertex[\\s]+([-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;\r\n\r\n    /**\r\n     * Defines the name of the plugin.\r\n     */\r\n    public name = \"stl\";\r\n\r\n    /**\r\n     * Defines the extensions the stl loader is able to load.\r\n     * force data to come in as an ArrayBuffer\r\n     * we'll convert to string if it looks like it's an ASCII .stl\r\n     */\r\n    public extensions: ISceneLoaderPluginExtensions = {\r\n        \".stl\": { isBinary: true },\r\n    };\r\n\r\n    /**\r\n     * Defines if Y and Z axes are swapped or not when loading an STL file.\r\n     * The default is false to maintain backward compatibility. When set to\r\n     * true, coordinates from the STL file are used without change.\r\n     */\r\n    public static DO_NOT_ALTER_FILE_COORDINATES = false;\r\n\r\n    /**\r\n     * Import meshes into a scene.\r\n     * @param meshesNames An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param scene The scene to import into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param meshes The meshes array to import into\r\n     * @returns True if successful or false otherwise\r\n     */\r\n    public importMesh(meshesNames: any, scene: Scene, data: any, rootUrl: string, meshes: Nullable<AbstractMesh[]>): boolean {\r\n        let matches;\r\n\r\n        if (typeof data !== \"string\") {\r\n            if (this._isBinary(data)) {\r\n                // binary .stl\r\n                const babylonMesh = new Mesh(\"stlmesh\", scene);\r\n                this._parseBinary(babylonMesh, data);\r\n                if (meshes) {\r\n                    meshes.push(babylonMesh);\r\n                }\r\n                return true;\r\n            }\r\n\r\n            // ASCII .stl\r\n\r\n            // convert to string\r\n            const array_buffer = new Uint8Array(data);\r\n            let str = \"\";\r\n            for (let i = 0; i < data.byteLength; i++) {\r\n                str += String.fromCharCode(array_buffer[i]); // implicitly assumes little-endian\r\n            }\r\n            data = str;\r\n        }\r\n\r\n        //if arrived here, data is a string, containing the STLA data.\r\n\r\n        while ((matches = this.solidPattern.exec(data))) {\r\n            let meshName = matches[1];\r\n            const meshNameFromEnd = matches[3];\r\n            if (meshName != meshNameFromEnd) {\r\n                Tools.Error(\"Error in STL, solid name != endsolid name\");\r\n                return false;\r\n            }\r\n\r\n            // check meshesNames\r\n            if (meshesNames && meshName) {\r\n                if (meshesNames instanceof Array) {\r\n                    if (!meshesNames.indexOf(meshName)) {\r\n                        continue;\r\n                    }\r\n                } else {\r\n                    if (meshName !== meshesNames) {\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // stl mesh name can be empty as well\r\n            meshName = meshName || \"stlmesh\";\r\n\r\n            const babylonMesh = new Mesh(meshName, scene);\r\n            this._parseASCII(babylonMesh, matches[2]);\r\n            if (meshes) {\r\n                meshes.push(babylonMesh);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Load into a scene.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @returns true if successful or false otherwise\r\n     */\r\n    public load(scene: Scene, data: any, rootUrl: string): boolean {\r\n        const result = this.importMesh(null, scene, data, rootUrl, null);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @returns The loaded asset container\r\n     */\r\n    public loadAssetContainer(scene: Scene, data: string, rootUrl: string): AssetContainer {\r\n        const container = new AssetContainer(scene);\r\n        scene._blockEntityCollection = true;\r\n        this.importMesh(null, scene, data, rootUrl, container.meshes);\r\n        scene._blockEntityCollection = false;\r\n        return container;\r\n    }\r\n\r\n    private _isBinary(data: any) {\r\n        // check if file size is correct for binary stl\r\n        const reader = new DataView(data);\r\n\r\n        // A Binary STL header is 80 bytes, if the data size is not great than\r\n        // that then it's not a binary STL.\r\n        if (reader.byteLength <= 80) {\r\n            return false;\r\n        }\r\n\r\n        const faceSize = (32 / 8) * 3 + (32 / 8) * 3 * 3 + 16 / 8;\r\n        const nFaces = reader.getUint32(80, true);\r\n\r\n        if (80 + 32 / 8 + nFaces * faceSize === reader.byteLength) {\r\n            return true;\r\n        }\r\n\r\n        // US-ASCII begin with 's', 'o', 'l', 'i', 'd'\r\n        const ascii = [115, 111, 108, 105, 100];\r\n        for (let off = 0; off < 5; off++) {\r\n            if (reader.getUint8(off) !== ascii[off]) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _parseBinary(mesh: Mesh, data: ArrayBuffer) {\r\n        const reader = new DataView(data);\r\n        const faces = reader.getUint32(80, true);\r\n\r\n        const dataOffset = 84;\r\n        const faceLength = 12 * 4 + 2;\r\n\r\n        let offset = 0;\r\n\r\n        const positions = new Float32Array(faces * 3 * 3);\r\n        const normals = new Float32Array(faces * 3 * 3);\r\n        const indices = new Uint32Array(faces * 3);\r\n        let indicesCount = 0;\r\n\r\n        for (let face = 0; face < faces; face++) {\r\n            const start = dataOffset + face * faceLength;\r\n            const normalX = reader.getFloat32(start, true);\r\n            const normalY = reader.getFloat32(start + 4, true);\r\n            const normalZ = reader.getFloat32(start + 8, true);\r\n\r\n            for (let i = 1; i <= 3; i++) {\r\n                const vertexstart = start + i * 12;\r\n\r\n                // ordering is intentional to match ascii import\r\n                positions[offset] = reader.getFloat32(vertexstart, true);\r\n                normals[offset] = normalX;\r\n\r\n                if (!STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                    positions[offset + 2] = reader.getFloat32(vertexstart + 4, true);\r\n                    positions[offset + 1] = reader.getFloat32(vertexstart + 8, true);\r\n\r\n                    normals[offset + 2] = normalY;\r\n                    normals[offset + 1] = normalZ;\r\n                } else {\r\n                    positions[offset + 1] = reader.getFloat32(vertexstart + 4, true);\r\n                    positions[offset + 2] = reader.getFloat32(vertexstart + 8, true);\r\n\r\n                    normals[offset + 1] = normalY;\r\n                    normals[offset + 2] = normalZ;\r\n                }\r\n\r\n                offset += 3;\r\n            }\r\n\r\n            if (STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                indices[indicesCount] = indicesCount;\r\n                indices[indicesCount + 1] = indicesCount + 2;\r\n                indices[indicesCount + 2] = indicesCount + 1;\r\n                indicesCount += 3;\r\n            } else {\r\n                indices[indicesCount] = indicesCount++;\r\n                indices[indicesCount] = indicesCount++;\r\n                indices[indicesCount] = indicesCount++;\r\n            }\r\n        }\r\n\r\n        mesh.setVerticesData(VertexBuffer.PositionKind, positions);\r\n        mesh.setVerticesData(VertexBuffer.NormalKind, normals);\r\n        mesh.setIndices(indices);\r\n        mesh.computeWorldMatrix(true);\r\n    }\r\n\r\n    private _parseASCII(mesh: Mesh, solidData: string) {\r\n        const positions = [];\r\n        const normals = [];\r\n        const indices = [];\r\n        let indicesCount = 0;\r\n\r\n        //load facets, ignoring loop as the standard doesn't define it can contain more than vertices\r\n        let matches;\r\n        while ((matches = this.facetsPattern.exec(solidData))) {\r\n            const facet = matches[1];\r\n            //one normal per face\r\n            const normalMatches = this.normalPattern.exec(facet);\r\n            this.normalPattern.lastIndex = 0;\r\n            if (!normalMatches) {\r\n                continue;\r\n            }\r\n            const normal = [Number(normalMatches[1]), Number(normalMatches[5]), Number(normalMatches[3])];\r\n\r\n            let vertexMatch;\r\n            while ((vertexMatch = this.vertexPattern.exec(facet))) {\r\n                if (!STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                    positions.push(Number(vertexMatch[1]), Number(vertexMatch[5]), Number(vertexMatch[3]));\r\n                    normals.push(normal[0], normal[1], normal[2]);\r\n                } else {\r\n                    positions.push(Number(vertexMatch[1]), Number(vertexMatch[3]), Number(vertexMatch[5]));\r\n\r\n                    // Flipping the second and third component because inverted\r\n                    // when normal was declared.\r\n                    normals.push(normal[0], normal[2], normal[1]);\r\n                }\r\n            }\r\n            if (STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                indices.push(indicesCount, indicesCount + 2, indicesCount + 1);\r\n                indicesCount += 3;\r\n            } else {\r\n                indices.push(indicesCount++, indicesCount++, indicesCount++);\r\n            }\r\n            this.vertexPattern.lastIndex = 0;\r\n        }\r\n\r\n        this.facetsPattern.lastIndex = 0;\r\n        mesh.setVerticesData(VertexBuffer.PositionKind, positions);\r\n        mesh.setVerticesData(VertexBuffer.NormalKind, normals);\r\n        mesh.setIndices(indices);\r\n        mesh.computeWorldMatrix(true);\r\n    }\r\n}\r\n\r\nif (SceneLoader) {\r\n    SceneLoader.RegisterPlugin(new STLFileLoader());\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}