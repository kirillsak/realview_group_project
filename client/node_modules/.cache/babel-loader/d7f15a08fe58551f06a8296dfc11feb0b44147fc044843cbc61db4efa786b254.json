{"ast":null,"code":"/** @internal */\nexport class PerformanceConfigurator {\n  /**\n   * @internal\n   */\n  static SetMatrixPrecision(use64bits) {\n    PerformanceConfigurator.MatrixTrackPrecisionChange = false;\n    if (use64bits && !PerformanceConfigurator.MatrixUse64Bits) {\n      if (PerformanceConfigurator.MatrixTrackedMatrices) {\n        for (let m = 0; m < PerformanceConfigurator.MatrixTrackedMatrices.length; ++m) {\n          const matrix = PerformanceConfigurator.MatrixTrackedMatrices[m];\n          const values = matrix._m;\n          matrix._m = new Array(16);\n          for (let i = 0; i < 16; ++i) {\n            matrix._m[i] = values[i];\n          }\n        }\n      }\n    }\n    PerformanceConfigurator.MatrixUse64Bits = use64bits;\n    PerformanceConfigurator.MatrixCurrentType = PerformanceConfigurator.MatrixUse64Bits ? Array : Float32Array;\n    PerformanceConfigurator.MatrixTrackedMatrices = null; // reclaim some memory, as we don't need _TrackedMatrices anymore\n  }\n}\n/** @internal */\nPerformanceConfigurator.MatrixUse64Bits = false;\n/** @internal */\nPerformanceConfigurator.MatrixTrackPrecisionChange = true;\n/** @internal */\nPerformanceConfigurator.MatrixCurrentType = Float32Array;\n/** @internal */\nPerformanceConfigurator.MatrixTrackedMatrices = [];","map":{"version":3,"mappings":"AAAA;AACA,OAAM,MAAOA,uBAAuB;EAUhC;;;EAGO,OAAOC,kBAAkB,CAACC,SAAkB;IAC/CF,uBAAuB,CAACG,0BAA0B,GAAG,KAAK;IAE1D,IAAID,SAAS,IAAI,CAACF,uBAAuB,CAACI,eAAe,EAAE;MACvD,IAAIJ,uBAAuB,CAACK,qBAAqB,EAAE;QAC/C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,uBAAuB,CAACK,qBAAqB,CAACE,MAAM,EAAE,EAAED,CAAC,EAAE;UAC3E,MAAME,MAAM,GAAGR,uBAAuB,CAACK,qBAAqB,CAACC,CAAC,CAAC;UAC/D,MAAMG,MAAM,GAAGD,MAAM,CAACE,EAAE;UAExBF,MAAM,CAACE,EAAE,GAAG,IAAIC,KAAK,CAAC,EAAE,CAAC;UAEzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAE,EAAEA,CAAC,EAAE;YACzBJ,MAAM,CAACE,EAAE,CAACE,CAAC,CAAC,GAAGH,MAAM,CAACG,CAAC,CAAC;;;;;IAMxCZ,uBAAuB,CAACI,eAAe,GAAGF,SAAS;IACnDF,uBAAuB,CAACa,iBAAiB,GAAGb,uBAAuB,CAACI,eAAe,GAAGO,KAAK,GAAGG,YAAY;IAC1Gd,uBAAuB,CAACK,qBAAqB,GAAG,IAAI,CAAC,CAAC;EAC1D;;AAjCA;AACcL,uCAAe,GAAG,KAAK;AACrC;AACcA,kDAA0B,GAAG,IAAI;AAC/C;AACcA,yCAAiB,GAAQc,YAAY;AACnD;AACcd,6CAAqB,GAAsB,EAAE","names":["PerformanceConfigurator","SetMatrixPrecision","use64bits","MatrixTrackPrecisionChange","MatrixUse64Bits","MatrixTrackedMatrices","m","length","matrix","values","_m","Array","i","MatrixCurrentType","Float32Array"],"sourceRoot":"","sources":["../../../../lts/core/generated/Engines/performanceConfigurator.ts"],"sourcesContent":["/** @internal */\r\nexport class PerformanceConfigurator {\r\n    /** @internal */\r\n    public static MatrixUse64Bits = false;\r\n    /** @internal */\r\n    public static MatrixTrackPrecisionChange = true;\r\n    /** @internal */\r\n    public static MatrixCurrentType: any = Float32Array;\r\n    /** @internal */\r\n    public static MatrixTrackedMatrices: Array<any> | null = [];\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static SetMatrixPrecision(use64bits: boolean) {\r\n        PerformanceConfigurator.MatrixTrackPrecisionChange = false;\r\n\r\n        if (use64bits && !PerformanceConfigurator.MatrixUse64Bits) {\r\n            if (PerformanceConfigurator.MatrixTrackedMatrices) {\r\n                for (let m = 0; m < PerformanceConfigurator.MatrixTrackedMatrices.length; ++m) {\r\n                    const matrix = PerformanceConfigurator.MatrixTrackedMatrices[m];\r\n                    const values = matrix._m;\r\n\r\n                    matrix._m = new Array(16);\r\n\r\n                    for (let i = 0; i < 16; ++i) {\r\n                        matrix._m[i] = values[i];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        PerformanceConfigurator.MatrixUse64Bits = use64bits;\r\n        PerformanceConfigurator.MatrixCurrentType = PerformanceConfigurator.MatrixUse64Bits ? Array : Float32Array;\r\n        PerformanceConfigurator.MatrixTrackedMatrices = null; // reclaim some memory, as we don't need _TrackedMatrices anymore\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}