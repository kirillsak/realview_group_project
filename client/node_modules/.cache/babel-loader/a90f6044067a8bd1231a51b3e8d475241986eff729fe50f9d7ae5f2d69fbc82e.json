{"ast":null,"code":"import { VRDeviceOrientationFreeCamera } from \"./vrDeviceOrientationFreeCamera.js\";\nimport { VRCameraMetrics } from \"./vrCameraMetrics.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setVRRigMode } from \"../RigModes/vrRigMode.js\";\nimport \"../../Gamepads/gamepadSceneComponent.js\";\nNode.AddNodeConstructor(\"VRDeviceOrientationGamepadCamera\", (name, scene) => {\n  return () => new VRDeviceOrientationGamepadCamera(name, Vector3.Zero(), scene);\n});\n/**\n * Camera used to simulate VR rendering (based on VRDeviceOrientationFreeCamera)\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#vr-device-orientation-cameras\n */\nexport class VRDeviceOrientationGamepadCamera extends VRDeviceOrientationFreeCamera {\n  /**\n   * Creates a new VRDeviceOrientationGamepadCamera\n   * @param name defines camera name\n   * @param position defines the start position of the camera\n   * @param scene defines the scene the camera belongs to\n   * @param compensateDistortion defines if the camera needs to compensate the lens distortion\n   * @param vrCameraMetrics defines the vr metrics associated to the camera\n   */\n  constructor(name, position, scene, compensateDistortion = true, vrCameraMetrics = VRCameraMetrics.GetDefault()) {\n    super(name, position, scene, compensateDistortion, vrCameraMetrics);\n    this._setRigMode = setVRRigMode.bind(null, this);\n    this.inputs.addGamepad();\n  }\n  /**\n   * Gets camera class name\n   * @returns VRDeviceOrientationGamepadCamera\n   */\n  getClassName() {\n    return \"VRDeviceOrientationGamepadCamera\";\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,6BAA6B,QAAQ,oCAAkC;AAChF,SAASC,eAAe,QAAQ,sBAAoB;AAEpD,SAASC,OAAO,QAAQ,4BAA0B;AAClD,SAASC,IAAI,QAAQ,eAAa;AAClC,SAASC,YAAY,QAAQ,0BAAwB;AAErD,OAAO,yCAAuC;AAE9CD,IAAI,CAACE,kBAAkB,CAAC,kCAAkC,EAAE,CAACC,IAAI,EAAEC,KAAK,KAAI;EACxE,OAAO,MAAM,IAAIC,gCAAgC,CAACF,IAAI,EAAEJ,OAAO,CAACO,IAAI,EAAE,EAAEF,KAAK,CAAC;AAClF,CAAC,CAAC;AAEF;;;;AAIA,OAAM,MAAOC,gCAAiC,SAAQR,6BAA6B;EAC/E;;;;;;;;EAQAU,YAAYJ,IAAY,EAAEK,QAAiB,EAAEJ,KAAa,EAAEK,oBAAoB,GAAG,IAAI,EAAEC,kBAAmCZ,eAAe,CAACa,UAAU,EAAE;IACpJ,KAAK,CAACR,IAAI,EAAEK,QAAQ,EAAEJ,KAAK,EAAEK,oBAAoB,EAAEC,eAAe,CAAC;IAa7D,gBAAW,GAAGT,YAAY,CAACW,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;IAXjD,IAAI,CAACC,MAAM,CAACC,UAAU,EAAE;EAC5B;EAEA;;;;EAIOC,YAAY;IACf,OAAO,kCAAkC;EAC7C","names":["VRDeviceOrientationFreeCamera","VRCameraMetrics","Vector3","Node","setVRRigMode","AddNodeConstructor","name","scene","VRDeviceOrientationGamepadCamera","Zero","constructor","position","compensateDistortion","vrCameraMetrics","GetDefault","bind","inputs","addGamepad","getClassName"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/VR/vrDeviceOrientationGamepadCamera.ts"],"sourcesContent":["import { VRDeviceOrientationFreeCamera } from \"./vrDeviceOrientationFreeCamera\";\r\nimport { VRCameraMetrics } from \"./vrCameraMetrics\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Node } from \"../../node\";\r\nimport { setVRRigMode } from \"../RigModes/vrRigMode\";\r\n\r\nimport \"../../Gamepads/gamepadSceneComponent\";\r\n\r\nNode.AddNodeConstructor(\"VRDeviceOrientationGamepadCamera\", (name, scene) => {\r\n    return () => new VRDeviceOrientationGamepadCamera(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * Camera used to simulate VR rendering (based on VRDeviceOrientationFreeCamera)\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#vr-device-orientation-cameras\r\n */\r\nexport class VRDeviceOrientationGamepadCamera extends VRDeviceOrientationFreeCamera {\r\n    /**\r\n     * Creates a new VRDeviceOrientationGamepadCamera\r\n     * @param name defines camera name\r\n     * @param position defines the start position of the camera\r\n     * @param scene defines the scene the camera belongs to\r\n     * @param compensateDistortion defines if the camera needs to compensate the lens distortion\r\n     * @param vrCameraMetrics defines the vr metrics associated to the camera\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene, compensateDistortion = true, vrCameraMetrics: VRCameraMetrics = VRCameraMetrics.GetDefault()) {\r\n        super(name, position, scene, compensateDistortion, vrCameraMetrics);\r\n\r\n        this.inputs.addGamepad();\r\n    }\r\n\r\n    /**\r\n     * Gets camera class name\r\n     * @returns VRDeviceOrientationGamepadCamera\r\n     */\r\n    public getClassName(): string {\r\n        return \"VRDeviceOrientationGamepadCamera\";\r\n    }\r\n\r\n    protected _setRigMode = setVRRigMode.bind(null, this);\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}