{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n/**\n * It could be useful to isolate your music & sounds on several tracks to better manage volume on a grouped instance of sounds.\n * It will be also used in a future release to apply effects on a specific track.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#using-sound-tracks\n */\nexport class SoundTrack {\n  /**\n   * Creates a new sound track.\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#using-sound-tracks\n   * @param scene Define the scene the sound track belongs to\n   * @param options\n   */\n  constructor(scene, options = {}) {\n    /**\n     * The unique identifier of the sound track in the scene.\n     */\n    this.id = -1;\n    this._isInitialized = false;\n    scene = scene || EngineStore.LastCreatedScene;\n    if (!scene) {\n      return;\n    }\n    this._scene = scene;\n    this.soundCollection = new Array();\n    this._options = options;\n    if (!this._options.mainTrack && this._scene.soundTracks) {\n      this._scene.soundTracks.push(this);\n      this.id = this._scene.soundTracks.length - 1;\n    }\n  }\n  _initializeSoundTrackAudioGraph() {\n    var _a;\n    if (((_a = Engine.audioEngine) === null || _a === void 0 ? void 0 : _a.canUseWebAudio) && Engine.audioEngine.audioContext) {\n      this._outputAudioNode = Engine.audioEngine.audioContext.createGain();\n      this._outputAudioNode.connect(Engine.audioEngine.masterGain);\n      if (this._options) {\n        if (this._options.volume) {\n          this._outputAudioNode.gain.value = this._options.volume;\n        }\n      }\n      this._isInitialized = true;\n    }\n  }\n  /**\n   * Release the sound track and its associated resources\n   */\n  dispose() {\n    if (Engine.audioEngine && Engine.audioEngine.canUseWebAudio) {\n      if (this._connectedAnalyser) {\n        this._connectedAnalyser.stopDebugCanvas();\n      }\n      while (this.soundCollection.length) {\n        this.soundCollection[0].dispose();\n      }\n      if (this._outputAudioNode) {\n        this._outputAudioNode.disconnect();\n      }\n      this._outputAudioNode = null;\n    }\n  }\n  /**\n   * Adds a sound to this sound track\n   * @param sound define the sound to add\n   * @ignoreNaming\n   */\n  addSound(sound) {\n    var _a;\n    if (!this._isInitialized) {\n      this._initializeSoundTrackAudioGraph();\n    }\n    if (((_a = Engine.audioEngine) === null || _a === void 0 ? void 0 : _a.canUseWebAudio) && this._outputAudioNode) {\n      sound.connectToSoundTrackAudioNode(this._outputAudioNode);\n    }\n    if (sound.soundTrackId) {\n      if (sound.soundTrackId === -1) {\n        this._scene.mainSoundTrack.removeSound(sound);\n      } else if (this._scene.soundTracks) {\n        this._scene.soundTracks[sound.soundTrackId].removeSound(sound);\n      }\n    }\n    this.soundCollection.push(sound);\n    sound.soundTrackId = this.id;\n  }\n  /**\n   * Removes a sound to this sound track\n   * @param sound define the sound to remove\n   * @ignoreNaming\n   */\n  removeSound(sound) {\n    const index = this.soundCollection.indexOf(sound);\n    if (index !== -1) {\n      this.soundCollection.splice(index, 1);\n    }\n  }\n  /**\n   * Set a global volume for the full sound track.\n   * @param newVolume Define the new volume of the sound track\n   */\n  setVolume(newVolume) {\n    var _a;\n    if (((_a = Engine.audioEngine) === null || _a === void 0 ? void 0 : _a.canUseWebAudio) && this._outputAudioNode) {\n      this._outputAudioNode.gain.value = newVolume;\n    }\n  }\n  /**\n   * Switch the panning model to HRTF:\n   * Renders a stereo output of higher quality than equalpower â€” it uses a convolution with measured impulse responses from human subjects.\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\n   */\n  switchPanningModelToHRTF() {\n    var _a;\n    if ((_a = Engine.audioEngine) === null || _a === void 0 ? void 0 : _a.canUseWebAudio) {\n      for (let i = 0; i < this.soundCollection.length; i++) {\n        this.soundCollection[i].switchPanningModelToHRTF();\n      }\n    }\n  }\n  /**\n   * Switch the panning model to Equal Power:\n   * Represents the equal-power panning algorithm, generally regarded as simple and efficient. equalpower is the default value.\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\n   */\n  switchPanningModelToEqualPower() {\n    var _a;\n    if ((_a = Engine.audioEngine) === null || _a === void 0 ? void 0 : _a.canUseWebAudio) {\n      for (let i = 0; i < this.soundCollection.length; i++) {\n        this.soundCollection[i].switchPanningModelToEqualPower();\n      }\n    }\n  }\n  /**\n   * Connect the sound track to an audio analyser allowing some amazing\n   * synchronization between the sounds/music and your visualization (VuMeter for instance).\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#using-the-analyser\n   * @param analyser The analyser to connect to the engine\n   */\n  connectToAnalyser(analyser) {\n    var _a;\n    if (this._connectedAnalyser) {\n      this._connectedAnalyser.stopDebugCanvas();\n    }\n    this._connectedAnalyser = analyser;\n    if (((_a = Engine.audioEngine) === null || _a === void 0 ? void 0 : _a.canUseWebAudio) && this._outputAudioNode) {\n      this._outputAudioNode.disconnect();\n      this._connectedAnalyser.connectAudioNodes(this._outputAudioNode, Engine.audioEngine.masterGain);\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["Engine","EngineStore","SoundTrack","constructor","scene","options","LastCreatedScene","_scene","soundCollection","Array","_options","mainTrack","soundTracks","push","id","length","_initializeSoundTrackAudioGraph","audioEngine","canUseWebAudio","audioContext","_outputAudioNode","createGain","connect","masterGain","volume","gain","value","_isInitialized","dispose","_connectedAnalyser","stopDebugCanvas","disconnect","addSound","sound","connectToSoundTrackAudioNode","soundTrackId","mainSoundTrack","removeSound","index","indexOf","splice","setVolume","newVolume","switchPanningModelToHRTF","i","switchPanningModelToEqualPower","connectToAnalyser","analyser","connectAudioNodes"],"sourceRoot":"","sources":["../../../../lts/core/generated/Audio/soundTrack.ts"],"sourcesContent":["import type { Sound } from \"./sound\";\r\nimport type { Analyser } from \"./analyser\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\n/**\r\n * Options allowed during the creation of a sound track.\r\n */\r\nexport interface ISoundTrackOptions {\r\n    /**\r\n     * The volume the sound track should take during creation\r\n     */\r\n    volume?: number;\r\n    /**\r\n     * Define if the sound track is the main sound track of the scene\r\n     */\r\n    mainTrack?: boolean;\r\n}\r\n\r\n/**\r\n * It could be useful to isolate your music & sounds on several tracks to better manage volume on a grouped instance of sounds.\r\n * It will be also used in a future release to apply effects on a specific track.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#using-sound-tracks\r\n */\r\nexport class SoundTrack {\r\n    /**\r\n     * The unique identifier of the sound track in the scene.\r\n     */\r\n    public id: number = -1;\r\n    /**\r\n     * The list of sounds included in the sound track.\r\n     */\r\n    public soundCollection: Array<Sound>;\r\n\r\n    private _outputAudioNode: Nullable<GainNode>;\r\n    private _scene: Scene;\r\n    private _connectedAnalyser: Analyser;\r\n    private _options: ISoundTrackOptions;\r\n    private _isInitialized = false;\r\n\r\n    /**\r\n     * Creates a new sound track.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#using-sound-tracks\r\n     * @param scene Define the scene the sound track belongs to\r\n     * @param options\r\n     */\r\n    constructor(scene?: Nullable<Scene>, options: ISoundTrackOptions = {}) {\r\n        scene = scene || EngineStore.LastCreatedScene;\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._scene = scene;\r\n        this.soundCollection = new Array();\r\n        this._options = options;\r\n\r\n        if (!this._options.mainTrack && this._scene.soundTracks) {\r\n            this._scene.soundTracks.push(this);\r\n            this.id = this._scene.soundTracks.length - 1;\r\n        }\r\n    }\r\n\r\n    private _initializeSoundTrackAudioGraph() {\r\n        if (Engine.audioEngine?.canUseWebAudio && Engine.audioEngine.audioContext) {\r\n            this._outputAudioNode = Engine.audioEngine.audioContext.createGain();\r\n            this._outputAudioNode.connect(Engine.audioEngine.masterGain);\r\n\r\n            if (this._options) {\r\n                if (this._options.volume) {\r\n                    this._outputAudioNode.gain.value = this._options.volume;\r\n                }\r\n            }\r\n\r\n            this._isInitialized = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release the sound track and its associated resources\r\n     */\r\n    public dispose(): void {\r\n        if (Engine.audioEngine && Engine.audioEngine.canUseWebAudio) {\r\n            if (this._connectedAnalyser) {\r\n                this._connectedAnalyser.stopDebugCanvas();\r\n            }\r\n            while (this.soundCollection.length) {\r\n                this.soundCollection[0].dispose();\r\n            }\r\n            if (this._outputAudioNode) {\r\n                this._outputAudioNode.disconnect();\r\n            }\r\n            this._outputAudioNode = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a sound to this sound track\r\n     * @param sound define the sound to add\r\n     * @ignoreNaming\r\n     */\r\n    public addSound(sound: Sound): void {\r\n        if (!this._isInitialized) {\r\n            this._initializeSoundTrackAudioGraph();\r\n        }\r\n        if (Engine.audioEngine?.canUseWebAudio && this._outputAudioNode) {\r\n            sound.connectToSoundTrackAudioNode(this._outputAudioNode);\r\n        }\r\n        if (sound.soundTrackId) {\r\n            if (sound.soundTrackId === -1) {\r\n                this._scene.mainSoundTrack.removeSound(sound);\r\n            } else if (this._scene.soundTracks) {\r\n                this._scene.soundTracks[sound.soundTrackId].removeSound(sound);\r\n            }\r\n        }\r\n\r\n        this.soundCollection.push(sound);\r\n        sound.soundTrackId = this.id;\r\n    }\r\n\r\n    /**\r\n     * Removes a sound to this sound track\r\n     * @param sound define the sound to remove\r\n     * @ignoreNaming\r\n     */\r\n    public removeSound(sound: Sound): void {\r\n        const index = this.soundCollection.indexOf(sound);\r\n        if (index !== -1) {\r\n            this.soundCollection.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set a global volume for the full sound track.\r\n     * @param newVolume Define the new volume of the sound track\r\n     */\r\n    public setVolume(newVolume: number): void {\r\n        if (Engine.audioEngine?.canUseWebAudio && this._outputAudioNode) {\r\n            this._outputAudioNode.gain.value = newVolume;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch the panning model to HRTF:\r\n     * Renders a stereo output of higher quality than equalpower â€” it uses a convolution with measured impulse responses from human subjects.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public switchPanningModelToHRTF(): void {\r\n        if (Engine.audioEngine?.canUseWebAudio) {\r\n            for (let i = 0; i < this.soundCollection.length; i++) {\r\n                this.soundCollection[i].switchPanningModelToHRTF();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch the panning model to Equal Power:\r\n     * Represents the equal-power panning algorithm, generally regarded as simple and efficient. equalpower is the default value.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public switchPanningModelToEqualPower(): void {\r\n        if (Engine.audioEngine?.canUseWebAudio) {\r\n            for (let i = 0; i < this.soundCollection.length; i++) {\r\n                this.soundCollection[i].switchPanningModelToEqualPower();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect the sound track to an audio analyser allowing some amazing\r\n     * synchronization between the sounds/music and your visualization (VuMeter for instance).\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#using-the-analyser\r\n     * @param analyser The analyser to connect to the engine\r\n     */\r\n    public connectToAnalyser(analyser: Analyser): void {\r\n        if (this._connectedAnalyser) {\r\n            this._connectedAnalyser.stopDebugCanvas();\r\n        }\r\n        this._connectedAnalyser = analyser;\r\n        if (Engine.audioEngine?.canUseWebAudio && this._outputAudioNode) {\r\n            this._outputAudioNode.disconnect();\r\n            this._connectedAnalyser.connectAudioNodes(this._outputAudioNode, Engine.audioEngine.masterGain);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}