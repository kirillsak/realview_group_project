{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nconst NAME = \"KHR_materials_clearcoat\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_clearcoat/README.md)\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#7F7PN6#8)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_materials_clearcoat {\n  /**\n   * @internal\n   */\n  constructor(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n    this.order = 190;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @internal */\n  dispose() {\n    this._loader = null;\n  }\n  /**\n   * @internal\n   */\n  loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, (extensionContext, extension) => {\n      const promises = new Array();\n      promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n      promises.push(this._loadClearCoatPropertiesAsync(extensionContext, extension, babylonMaterial));\n      return Promise.all(promises).then(() => {});\n    });\n  }\n  _loadClearCoatPropertiesAsync(context, properties, babylonMaterial) {\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(`${context}: Material type not supported`);\n    }\n    const promises = new Array();\n    babylonMaterial.clearCoat.isEnabled = true;\n    babylonMaterial.clearCoat.useRoughnessFromMainTexture = false;\n    babylonMaterial.clearCoat.remapF0OnInterfaceChange = false;\n    if (properties.clearcoatFactor != undefined) {\n      babylonMaterial.clearCoat.intensity = properties.clearcoatFactor;\n    } else {\n      babylonMaterial.clearCoat.intensity = 0;\n    }\n    if (properties.clearcoatTexture) {\n      promises.push(this._loader.loadTextureInfoAsync(`${context}/clearcoatTexture`, properties.clearcoatTexture, texture => {\n        texture.name = `${babylonMaterial.name} (ClearCoat Intensity)`;\n        babylonMaterial.clearCoat.texture = texture;\n      }));\n    }\n    if (properties.clearcoatRoughnessFactor != undefined) {\n      babylonMaterial.clearCoat.roughness = properties.clearcoatRoughnessFactor;\n    } else {\n      babylonMaterial.clearCoat.roughness = 0;\n    }\n    if (properties.clearcoatRoughnessTexture) {\n      properties.clearcoatRoughnessTexture.nonColorData = true;\n      promises.push(this._loader.loadTextureInfoAsync(`${context}/clearcoatRoughnessTexture`, properties.clearcoatRoughnessTexture, texture => {\n        texture.name = `${babylonMaterial.name} (ClearCoat Roughness)`;\n        babylonMaterial.clearCoat.textureRoughness = texture;\n      }));\n    }\n    if (properties.clearcoatNormalTexture) {\n      properties.clearcoatNormalTexture.nonColorData = true;\n      promises.push(this._loader.loadTextureInfoAsync(`${context}/clearcoatNormalTexture`, properties.clearcoatNormalTexture, texture => {\n        texture.name = `${babylonMaterial.name} (ClearCoat Normal)`;\n        babylonMaterial.clearCoat.bumpTexture = texture;\n      }));\n      babylonMaterial.invertNormalMapX = !babylonMaterial.getScene().useRightHandedSystem;\n      babylonMaterial.invertNormalMapY = babylonMaterial.getScene().useRightHandedSystem;\n      if (properties.clearcoatNormalTexture.scale != undefined) {\n        babylonMaterial.clearCoat.bumpTexture.level = properties.clearcoatNormalTexture.scale;\n      }\n    }\n    return Promise.all(promises).then(() => {});\n  }\n}\nGLTFLoader.RegisterExtension(NAME, loader => new KHR_materials_clearcoat(loader));","map":{"version":3,"mappings":"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","names":["PBRMaterial","GLTFLoader","NAME","KHR_materials_clearcoat","constructor","loader","_loader","enabled","isExtensionUsed","dispose","loadMaterialPropertiesAsync","context","material","babylonMaterial","LoadExtensionAsync","name","extensionContext","extension","promises","Array","push","_loadClearCoatPropertiesAsync","Promise","all","then","properties","Error","clearCoat","isEnabled","useRoughnessFromMainTexture","remapF0OnInterfaceChange","clearcoatFactor","undefined","intensity","clearcoatTexture","loadTextureInfoAsync","texture","clearcoatRoughnessFactor","roughness","clearcoatRoughnessTexture","nonColorData","textureRoughness","clearcoatNormalTexture","bumpTexture","invertNormalMapX","getScene","useRightHandedSystem","invertNormalMapY","scale","level","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_materials_clearcoat.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsClearcoat } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_materials_clearcoat\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_clearcoat/README.md)\r\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#7F7PN6#8)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_clearcoat implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 190;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsClearcoat>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadClearCoatPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadClearCoatPropertiesAsync(context: string, properties: IKHRMaterialsClearcoat, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        babylonMaterial.clearCoat.isEnabled = true;\r\n        babylonMaterial.clearCoat.useRoughnessFromMainTexture = false;\r\n        babylonMaterial.clearCoat.remapF0OnInterfaceChange = false;\r\n\r\n        if (properties.clearcoatFactor != undefined) {\r\n            babylonMaterial.clearCoat.intensity = properties.clearcoatFactor;\r\n        } else {\r\n            babylonMaterial.clearCoat.intensity = 0;\r\n        }\r\n\r\n        if (properties.clearcoatTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/clearcoatTexture`, properties.clearcoatTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (ClearCoat Intensity)`;\r\n                    babylonMaterial.clearCoat.texture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.clearcoatRoughnessFactor != undefined) {\r\n            babylonMaterial.clearCoat.roughness = properties.clearcoatRoughnessFactor;\r\n        } else {\r\n            babylonMaterial.clearCoat.roughness = 0;\r\n        }\r\n\r\n        if (properties.clearcoatRoughnessTexture) {\r\n            (properties.clearcoatRoughnessTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/clearcoatRoughnessTexture`, properties.clearcoatRoughnessTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (ClearCoat Roughness)`;\r\n                    babylonMaterial.clearCoat.textureRoughness = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.clearcoatNormalTexture) {\r\n            (properties.clearcoatNormalTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/clearcoatNormalTexture`, properties.clearcoatNormalTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (ClearCoat Normal)`;\r\n                    babylonMaterial.clearCoat.bumpTexture = texture;\r\n                })\r\n            );\r\n\r\n            babylonMaterial.invertNormalMapX = !babylonMaterial.getScene().useRightHandedSystem;\r\n            babylonMaterial.invertNormalMapY = babylonMaterial.getScene().useRightHandedSystem;\r\n            if (properties.clearcoatNormalTexture.scale != undefined) {\r\n                babylonMaterial.clearCoat.bumpTexture!.level = properties.clearcoatNormalTexture.scale;\r\n            }\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_clearcoat(loader));\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}