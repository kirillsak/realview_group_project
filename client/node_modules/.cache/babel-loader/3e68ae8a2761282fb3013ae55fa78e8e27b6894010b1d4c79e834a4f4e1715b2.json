{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { InternalTexture, InternalTextureSource } from \"../../../Materials/Textures/internalTexture.js\";\nimport { WebGPUEngine } from \"../../webgpuEngine.js\";\nWebGPUEngine.prototype.createRenderTargetCubeTexture = function (size, options) {\n  const rtWrapper = this._createHardwareRenderTargetWrapper(false, true, size);\n  const fullOptions = {\n    generateMipMaps: true,\n    generateDepthBuffer: true,\n    generateStencilBuffer: false,\n    type: 0,\n    samplingMode: 3,\n    format: 5,\n    samples: 1,\n    ...options\n  };\n  fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && fullOptions.generateStencilBuffer;\n  rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\n  rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer;\n  const texture = new InternalTexture(this, InternalTextureSource.RenderTarget);\n  texture.width = size;\n  texture.height = size;\n  texture.depth = 0;\n  texture.isReady = true;\n  texture.isCube = true;\n  texture.samples = fullOptions.samples;\n  texture.generateMipMaps = fullOptions.generateMipMaps;\n  texture.samplingMode = fullOptions.samplingMode;\n  texture.type = fullOptions.type;\n  texture.format = fullOptions.format;\n  this._internalTexturesCache.push(texture);\n  rtWrapper.setTextures(texture);\n  if (rtWrapper._generateDepthBuffer || rtWrapper._generateStencilBuffer) {\n    rtWrapper.createDepthStencilTexture(0, fullOptions.samplingMode === undefined || fullOptions.samplingMode === 2 || fullOptions.samplingMode === 2 || fullOptions.samplingMode === 3 || fullOptions.samplingMode === 3 || fullOptions.samplingMode === 5 || fullOptions.samplingMode === 6 || fullOptions.samplingMode === 7 || fullOptions.samplingMode === 11, rtWrapper._generateStencilBuffer, rtWrapper.samples);\n  }\n  if (options && options.createMipMaps && !fullOptions.generateMipMaps) {\n    texture.generateMipMaps = true;\n  }\n  this._textureHelper.createGPUTextureForInternalTexture(texture);\n  if (options && options.createMipMaps && !fullOptions.generateMipMaps) {\n    texture.generateMipMaps = false;\n  }\n  return rtWrapper;\n};","map":{"version":3,"mappings":";AAAA,SAASA,eAAe,EAAEC,qBAAqB,QAAQ,gDAA8C;AAIrG,SAASC,YAAY,QAAQ,uBAAqB;AAElDA,YAAY,CAACC,SAAS,CAACC,6BAA6B,GAAG,UAAUC,IAAY,EAAEC,OAAqC;EAChH,MAAMC,SAAS,GAAG,IAAI,CAACC,kCAAkC,CAAC,KAAK,EAAE,IAAI,EAAEH,IAAI,CAAC;EAE5E,MAAMI,WAAW,GAAG;IAChBC,eAAe,EAAE,IAAI;IACrBC,mBAAmB,EAAE,IAAI;IACzBC,qBAAqB,EAAE,KAAK;IAC5BC,IAAI,EAAE;IACNC,YAAY,EAAE;IACdC,MAAM,EAAE;IACRC,OAAO,EAAE,CAAC;IACV,GAAGV;GACN;EACDG,WAAW,CAACG,qBAAqB,GAAGH,WAAW,CAACE,mBAAmB,IAAIF,WAAW,CAACG,qBAAqB;EAExGL,SAAS,CAACU,oBAAoB,GAAGR,WAAW,CAACE,mBAAmB;EAChEJ,SAAS,CAACW,sBAAsB,GAAGT,WAAW,CAACG,qBAAqB;EAEpE,MAAMO,OAAO,GAAG,IAAInB,eAAe,CAAC,IAAI,EAAEC,qBAAqB,CAACmB,YAAY,CAAC;EAE7ED,OAAO,CAACE,KAAK,GAAGhB,IAAI;EACpBc,OAAO,CAACG,MAAM,GAAGjB,IAAI;EACrBc,OAAO,CAACI,KAAK,GAAG,CAAC;EACjBJ,OAAO,CAACK,OAAO,GAAG,IAAI;EACtBL,OAAO,CAACM,MAAM,GAAG,IAAI;EACrBN,OAAO,CAACH,OAAO,GAAGP,WAAW,CAACO,OAAO;EACrCG,OAAO,CAACT,eAAe,GAAGD,WAAW,CAACC,eAAe;EACrDS,OAAO,CAACL,YAAY,GAAGL,WAAW,CAACK,YAAY;EAC/CK,OAAO,CAACN,IAAI,GAAGJ,WAAW,CAACI,IAAI;EAC/BM,OAAO,CAACJ,MAAM,GAAGN,WAAW,CAACM,MAAM;EAEnC,IAAI,CAACW,sBAAsB,CAACC,IAAI,CAACR,OAAO,CAAC;EACzCZ,SAAS,CAACqB,WAAW,CAACT,OAAO,CAAC;EAE9B,IAAIZ,SAAS,CAACU,oBAAoB,IAAIV,SAAS,CAACW,sBAAsB,EAAE;IACpEX,SAAS,CAACsB,yBAAyB,CAC/B,CAAC,EACDpB,WAAW,CAACK,YAAY,KAAKgB,SAAS,IAClCrB,WAAW,CAACK,YAAY,KAAK,KAC7BL,WAAW,CAACK,YAAY,KAAK,KAC7BL,WAAW,CAACK,YAAY,KAAK,KAC7BL,WAAW,CAACK,YAAY,KAAK,KAC7BL,WAAW,CAACK,YAAY,KAAK,KAC7BL,WAAW,CAACK,YAAY,KAAK,KAC7BL,WAAW,CAACK,YAAY,KAAK,KAC7BL,WAAW,CAACK,YAAY,KAAK,aAAU,kCAC3C,QAAU;;EAKlB,IAAIR,OAAO,IAAIA,OAAO,CAACyB,aAAa,IAAI,CAACtB,WAAW,CAACC,eAAe,EAAE;IAClES,OAAO,CAACT,eAAe,GAAG,IAAI;;EAGlC,IAAI,CAACsB,cAAc,CAACC,kCAAkC,CAACd,OAAO,CAAC;EAE/D,IAAIb,OAAO,IAAIA,OAAO,CAACyB,aAAa,IAAI,CAACtB,WAAW,CAACC,eAAe,EAAE;IAClES,OAAO,CAACT,eAAe,GAAG,KAAK;;EAGnC,OAAOH,SAAS;AACpB,CAAC","names":["InternalTexture","InternalTextureSource","WebGPUEngine","prototype","createRenderTargetCubeTexture","size","options","rtWrapper","_createHardwareRenderTargetWrapper","fullOptions","generateMipMaps","generateDepthBuffer","generateStencilBuffer","type","samplingMode","format","samples","_generateDepthBuffer","_generateStencilBuffer","texture","RenderTarget","width","height","depth","isReady","isCube","_internalTexturesCache","push","setTextures","createDepthStencilTexture","undefined","createMipMaps","_textureHelper","createGPUTextureForInternalTexture"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/Extensions/engine.renderTargetCube.ts"],"sourcesContent":["import { InternalTexture, InternalTextureSource } from \"../../../Materials/Textures/internalTexture\";\r\nimport type { RenderTargetCreationOptions } from \"../../../Materials/Textures/textureCreationOptions\";\r\nimport { Constants } from \"../../constants\";\r\nimport type { RenderTargetWrapper } from \"../../renderTargetWrapper\";\r\nimport { WebGPUEngine } from \"../../webgpuEngine\";\r\n\r\nWebGPUEngine.prototype.createRenderTargetCubeTexture = function (size: number, options?: RenderTargetCreationOptions): RenderTargetWrapper {\r\n    const rtWrapper = this._createHardwareRenderTargetWrapper(false, true, size);\r\n\r\n    const fullOptions = {\r\n        generateMipMaps: true,\r\n        generateDepthBuffer: true,\r\n        generateStencilBuffer: false,\r\n        type: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        samplingMode: Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        format: Constants.TEXTUREFORMAT_RGBA,\r\n        samples: 1,\r\n        ...options,\r\n    };\r\n    fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && fullOptions.generateStencilBuffer;\r\n\r\n    rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\r\n    rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer;\r\n\r\n    const texture = new InternalTexture(this, InternalTextureSource.RenderTarget);\r\n\r\n    texture.width = size;\r\n    texture.height = size;\r\n    texture.depth = 0;\r\n    texture.isReady = true;\r\n    texture.isCube = true;\r\n    texture.samples = fullOptions.samples;\r\n    texture.generateMipMaps = fullOptions.generateMipMaps;\r\n    texture.samplingMode = fullOptions.samplingMode;\r\n    texture.type = fullOptions.type;\r\n    texture.format = fullOptions.format;\r\n\r\n    this._internalTexturesCache.push(texture);\r\n    rtWrapper.setTextures(texture);\r\n\r\n    if (rtWrapper._generateDepthBuffer || rtWrapper._generateStencilBuffer) {\r\n        rtWrapper.createDepthStencilTexture(\r\n            0,\r\n            fullOptions.samplingMode === undefined ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_BILINEAR_SAMPLINGMODE ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_LINEAR_LINEAR ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_TRILINEAR_SAMPLINGMODE ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_LINEAR_LINEAR_MIPLINEAR ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_NEAREST_LINEAR_MIPNEAREST ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_NEAREST_LINEAR_MIPLINEAR ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_NEAREST_LINEAR ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_LINEAR_LINEAR_MIPNEAREST,\r\n            rtWrapper._generateStencilBuffer,\r\n            rtWrapper.samples\r\n        );\r\n    }\r\n\r\n    if (options && options.createMipMaps && !fullOptions.generateMipMaps) {\r\n        texture.generateMipMaps = true;\r\n    }\r\n\r\n    this._textureHelper.createGPUTextureForInternalTexture(texture);\r\n\r\n    if (options && options.createMipMaps && !fullOptions.generateMipMaps) {\r\n        texture.generateMipMaps = false;\r\n    }\r\n\r\n    return rtWrapper;\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}