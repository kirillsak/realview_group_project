{"ast":null,"code":"import { __decorate } from \"../../tslib.es6.js\";\nimport { serialize, serializeAsColor3, expandToProperty, serializeAsTexture } from \"../../Misc/decorators.js\";\nimport { Color3 } from \"../../Maths/math.color.js\";\nimport { PBRBaseMaterial } from \"./pbrBaseMaterial.js\";\n/**\n * The Physically based simple base material of BJS.\n *\n * This enables better naming and convention enforcements on top of the pbrMaterial.\n * It is used as the base class for both the specGloss and metalRough conventions.\n */\nexport class PBRBaseSimpleMaterial extends PBRBaseMaterial {\n  /**\n   * Instantiates a new PBRMaterial instance.\n   *\n   * @param name The material name\n   * @param scene The scene the material will be use in.\n   */\n  constructor(name, scene) {\n    super(name, scene);\n    /**\n     * Number of Simultaneous lights allowed on the material.\n     */\n    this.maxSimultaneousLights = 4;\n    /**\n     * If sets to true, disables all the lights affecting the material.\n     */\n    this.disableLighting = false;\n    /**\n     * If sets to true, x component of normal map value will invert (x = 1.0 - x).\n     */\n    this.invertNormalMapX = false;\n    /**\n     * If sets to true, y component of normal map value will invert (y = 1.0 - y).\n     */\n    this.invertNormalMapY = false;\n    /**\n     * Emissivie color used to self-illuminate the model.\n     */\n    this.emissiveColor = new Color3(0, 0, 0);\n    /**\n     * Occlusion Channel Strength.\n     */\n    this.occlusionStrength = 1.0;\n    /**\n     * If true, the light map contains occlusion information instead of lighting info.\n     */\n    this.useLightmapAsShadowmap = false;\n    this._useAlphaFromAlbedoTexture = true;\n    this._useAmbientInGrayScale = true;\n  }\n  /**\n   * Gets the current double sided mode.\n   */\n  get doubleSided() {\n    return this._twoSidedLighting;\n  }\n  /**\n   * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\n   */\n  set doubleSided(value) {\n    if (this._twoSidedLighting === value) {\n      return;\n    }\n    this._twoSidedLighting = value;\n    this.backFaceCulling = !value;\n    this._markAllSubMeshesAsTexturesDirty();\n  }\n  getClassName() {\n    return \"PBRBaseSimpleMaterial\";\n  }\n}\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsLightsDirty\")], PBRBaseSimpleMaterial.prototype, \"maxSimultaneousLights\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsLightsDirty\")], PBRBaseSimpleMaterial.prototype, \"disableLighting\", void 0);\n__decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_reflectionTexture\")], PBRBaseSimpleMaterial.prototype, \"environmentTexture\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRBaseSimpleMaterial.prototype, \"invertNormalMapX\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRBaseSimpleMaterial.prototype, \"invertNormalMapY\", void 0);\n__decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_bumpTexture\")], PBRBaseSimpleMaterial.prototype, \"normalTexture\", void 0);\n__decorate([serializeAsColor3(\"emissive\"), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRBaseSimpleMaterial.prototype, \"emissiveColor\", void 0);\n__decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRBaseSimpleMaterial.prototype, \"emissiveTexture\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_ambientTextureStrength\")], PBRBaseSimpleMaterial.prototype, \"occlusionStrength\", void 0);\n__decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_ambientTexture\")], PBRBaseSimpleMaterial.prototype, \"occlusionTexture\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_alphaCutOff\")], PBRBaseSimpleMaterial.prototype, \"alphaCutOff\", void 0);\n__decorate([serialize()], PBRBaseSimpleMaterial.prototype, \"doubleSided\", null);\n__decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", null)], PBRBaseSimpleMaterial.prototype, \"lightmapTexture\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRBaseSimpleMaterial.prototype, \"useLightmapAsShadowmap\", void 0);","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,iBAAiB,EAAEC,gBAAgB,EAAEC,kBAAkB,QAAQ,0BAAwB;AAE3G,SAASC,MAAM,QAAQ,2BAAyB;AAChD,SAASC,eAAe,QAAQ,sBAAoB;AAIpD;;;;;;AAMA,OAAM,MAAgBC,qBAAsB,SAAQD,eAAe;EA+G/D;;;;;;EAMAE,YAAYC,IAAY,EAAEC,KAAa;IACnC,KAAK,CAACD,IAAI,EAAEC,KAAK,CAAC;IArHtB;;;IAKO,0BAAqB,GAAG,CAAC;IAEhC;;;IAKO,oBAAe,GAAG,KAAK;IAS9B;;;IAKO,qBAAgB,GAAG,KAAK;IAE/B;;;IAKO,qBAAgB,GAAG,KAAK;IAS/B;;;IAKO,kBAAa,GAAG,IAAIL,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAS1C;;;IAKO,sBAAiB,GAAW,GAAG;IA0CtC;;;IAKO,2BAAsB,GAAG,KAAK;IAWjC,IAAI,CAACM,0BAA0B,GAAG,IAAI;IACtC,IAAI,CAACC,sBAAsB,GAAG,IAAI;EACtC;EA5CA;;;EAIA,IAAWC,WAAW;IAClB,OAAO,IAAI,CAACC,iBAAiB;EACjC;EACA;;;EAGA,IAAWD,WAAW,CAACE,KAAc;IACjC,IAAI,IAAI,CAACD,iBAAiB,KAAKC,KAAK,EAAE;MAClC;;IAEJ,IAAI,CAACD,iBAAiB,GAAGC,KAAK;IAC9B,IAAI,CAACC,eAAe,GAAG,CAACD,KAAK;IAC7B,IAAI,CAACE,gCAAgC,EAAE;EAC3C;EA6BOC,YAAY;IACf,OAAO,uBAAuB;EAClC;;AAxHAC,YAFClB,SAAS,EAAE,EACXE,gBAAgB,CAAC,gCAAgC,CAAC,oEAClB;AAOjCgB,YAFClB,SAAS,EAAE,EACXE,gBAAgB,CAAC,gCAAgC,CAAC,8DACpB;AAO/BgB,YAFCf,kBAAkB,EAAE,EACpBD,gBAAgB,CAAC,kCAAkC,EAAE,oBAAoB,CAAC,iEAC1B;AAOjDgB,YAFClB,SAAS,EAAE,EACXE,gBAAgB,CAAC,kCAAkC,CAAC,+DACrB;AAOhCgB,YAFClB,SAAS,EAAE,EACXE,gBAAgB,CAAC,kCAAkC,CAAC,+DACrB;AAOhCgB,YAFCf,kBAAkB,EAAE,EACpBD,gBAAgB,CAAC,kCAAkC,EAAE,cAAc,CAAC,4DACzB;AAO5CgB,YAFCjB,iBAAiB,CAAC,UAAU,CAAC,EAC7BC,gBAAgB,CAAC,kCAAkC,CAAC,4DACV;AAO3CgB,YAFCf,kBAAkB,EAAE,EACpBD,gBAAgB,CAAC,kCAAkC,CAAC,8DACP;AAO9CgB,YAFClB,SAAS,EAAE,EACXE,gBAAgB,CAAC,kCAAkC,EAAE,yBAAyB,CAAC,gEACzC;AAOvCgB,YAFCf,kBAAkB,EAAE,EACpBD,gBAAgB,CAAC,kCAAkC,EAAE,iBAAiB,CAAC,+DACzB;AAO/CgB,YAFClB,SAAS,EAAE,EACXE,gBAAgB,CAAC,kCAAkC,EAAE,cAAc,CAAC,0DAC1C;AAM3BgB,YADClB,SAAS,EAAE,wDAGX;AAkBDkB,YAFCf,kBAAkB,EAAE,EACpBD,gBAAgB,CAAC,kCAAkC,EAAE,IAAI,CAAC,8DACb;AAO9CgB,YAFClB,SAAS,EAAE,EACXE,gBAAgB,CAAC,kCAAkC,CAAC,qEACf","names":["serialize","serializeAsColor3","expandToProperty","serializeAsTexture","Color3","PBRBaseMaterial","PBRBaseSimpleMaterial","constructor","name","scene","_useAlphaFromAlbedoTexture","_useAmbientInGrayScale","doubleSided","_twoSidedLighting","value","backFaceCulling","_markAllSubMeshesAsTexturesDirty","getClassName","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/PBR/pbrBaseSimpleMaterial.ts"],"sourcesContent":["import { serialize, serializeAsColor3, expandToProperty, serializeAsTexture } from \"../../Misc/decorators\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport { PBRBaseMaterial } from \"./pbrBaseMaterial\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n/**\r\n * The Physically based simple base material of BJS.\r\n *\r\n * This enables better naming and convention enforcements on top of the pbrMaterial.\r\n * It is used as the base class for both the specGloss and metalRough conventions.\r\n */\r\nexport abstract class PBRBaseSimpleMaterial extends PBRBaseMaterial {\r\n    /**\r\n     * Number of Simultaneous lights allowed on the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights = 4;\r\n\r\n    /**\r\n     * If sets to true, disables all the lights affecting the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting = false;\r\n\r\n    /**\r\n     * Environment Texture used in the material (this is use for both reflection and environment lighting).\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_reflectionTexture\")\r\n    public environmentTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * If sets to true, x component of normal map value will invert (x = 1.0 - x).\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapX = false;\r\n\r\n    /**\r\n     * If sets to true, y component of normal map value will invert (y = 1.0 - y).\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapY = false;\r\n\r\n    /**\r\n     * Normal map used in the model.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_bumpTexture\")\r\n    public normalTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Emissivie color used to self-illuminate the model.\r\n     */\r\n    @serializeAsColor3(\"emissive\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public emissiveColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * Emissivie texture used to self-illuminate the model.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public emissiveTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Occlusion Channel Strength.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_ambientTextureStrength\")\r\n    public occlusionStrength: number = 1.0;\r\n\r\n    /**\r\n     * Occlusion Texture of the material (adding extra occlusion effects).\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_ambientTexture\")\r\n    public occlusionTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_alphaCutOff\")\r\n    public alphaCutOff: number;\r\n\r\n    /**\r\n     * Gets the current double sided mode.\r\n     */\r\n    @serialize()\r\n    public get doubleSided(): boolean {\r\n        return this._twoSidedLighting;\r\n    }\r\n    /**\r\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\r\n     */\r\n    public set doubleSided(value: boolean) {\r\n        if (this._twoSidedLighting === value) {\r\n            return;\r\n        }\r\n        this._twoSidedLighting = value;\r\n        this.backFaceCulling = !value;\r\n        this._markAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    /**\r\n     * Stores the pre-calculated light information of a mesh in a texture.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", null)\r\n    public lightmapTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * If true, the light map contains occlusion information instead of lighting info.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useLightmapAsShadowmap = false;\r\n\r\n    /**\r\n     * Instantiates a new PBRMaterial instance.\r\n     *\r\n     * @param name The material name\r\n     * @param scene The scene the material will be use in.\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n\r\n        this._useAlphaFromAlbedoTexture = true;\r\n        this._useAmbientInGrayScale = true;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"PBRBaseSimpleMaterial\";\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}