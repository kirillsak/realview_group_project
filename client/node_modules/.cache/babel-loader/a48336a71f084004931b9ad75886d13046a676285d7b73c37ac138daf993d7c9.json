{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/convolution.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The ConvolutionPostProcess applies a 3x3 kernel to every pixel of the\n * input texture to perform effects such as edge detection or sharpening\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\nexport class ConvolutionPostProcess extends PostProcess {\n  /**\n   * Creates a new instance ConvolutionPostProcess\n   * @param name The name of the effect.\n   * @param kernel Array of 9 values corresponding to the 3x3 kernel to be applied\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType Type of textures used when performing the post process. (default: 0)\n   */\n  constructor(name, kernel, options, camera, samplingMode, engine, reusable, textureType = 0) {\n    super(name, \"convolution\", [\"kernel\", \"screenSize\"], null, options, camera, samplingMode, engine, reusable, null, textureType);\n    this.kernel = kernel;\n    this.onApply = effect => {\n      effect.setFloat2(\"screenSize\", this.width, this.height);\n      effect.setArray(\"kernel\", this.kernel);\n    };\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"ConvolutionPostProcess\" string\n   */\n  getClassName() {\n    return \"ConvolutionPostProcess\";\n  }\n  /**\n   * @internal\n   */\n  static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(() => {\n      return new ConvolutionPostProcess(parsedPostProcess.name, parsedPostProcess.kernel, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType);\n    }, parsedPostProcess, scene, rootUrl);\n  }\n}\n// Statics\n/**\n * Edge detection 0 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\nConvolutionPostProcess.EdgeDetect0Kernel = [1, 0, -1, 0, 0, 0, -1, 0, 1];\n/**\n * Edge detection 1 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\nConvolutionPostProcess.EdgeDetect1Kernel = [0, 1, 0, 1, -4, 1, 0, 1, 0];\n/**\n * Edge detection 2 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\nConvolutionPostProcess.EdgeDetect2Kernel = [-1, -1, -1, -1, 8, -1, -1, -1, -1];\n/**\n * Kernel to sharpen an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\nConvolutionPostProcess.SharpenKernel = [0, -1, 0, -1, 5, -1, 0, -1, 0];\n/**\n * Kernel to emboss an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\nConvolutionPostProcess.EmbossKernel = [-2, -1, 0, -1, 1, 1, 0, 1, 2];\n/**\n * Kernel to blur an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\nConvolutionPostProcess.GaussianKernel = [0, 1, 0, 1, 1, 1, 0, 1, 0];\n__decorate([serialize()], ConvolutionPostProcess.prototype, \"kernel\", void 0);\nRegisterClass(\"BABYLON.ConvolutionPostProcess\", ConvolutionPostProcess);","map":{"version":3,"mappings":";AACA,SAASA,WAAW,QAAQ,kBAAgB;AAO5C,OAAO,oCAAkC;AACzC,SAASC,aAAa,QAAQ,sBAAoB;AAClD,SAASC,SAAS,EAAEC,mBAAmB,QAAQ,uBAAqB;AAIpE;;;;;AAKA,OAAM,MAAOC,sBAAuB,SAAQJ,WAAW;EAanD;;;;;;;;;;;EAWAK,YACIC,IAAY,EACZC,MAAgB,EAChBC,OAAoC,EACpCC,MAAwB,EACxBC,YAAqB,EACrBC,MAAe,EACfC,QAAkB,EAClBC,cAAsB;IAEtB,KAAK,CAACP,IAAI,EAAE,aAAa,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC,EAAE,IAAI,EAAEE,OAAO,EAAEC,MAAM,EAAEC,YAAY,EAAEC,MAAM,EAAEC,QAAQ,EAAE,IAAI,EAAEC,WAAW,CAAC;IAC9H,IAAI,CAACN,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACO,OAAO,GAAIC,MAAc,IAAI;MAC9BA,MAAM,CAACC,SAAS,CAAC,YAAY,EAAE,IAAI,CAACC,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;MACvDH,MAAM,CAACI,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAACZ,MAAM,CAAC;IAC1C,CAAC;EACL;EAnCA;;;;EAIOa,YAAY;IACf,OAAO,wBAAwB;EACnC;EA+BA;;;EAGO,OAAOC,MAAM,CAACC,iBAAsB,EAAEC,YAAoB,EAAEC,KAAY,EAAEC,OAAe;IAC5F,OAAOtB,mBAAmB,CAACuB,KAAK,CAC5B,MAAK;MACD,OAAO,IAAItB,sBAAsB,CAC7BkB,iBAAiB,CAAChB,IAAI,EACtBgB,iBAAiB,CAACf,MAAM,EACxBe,iBAAiB,CAACd,OAAO,EACzBe,YAAY,EACZD,iBAAiB,CAACK,wBAAwB,EAC1CH,KAAK,CAACI,SAAS,EAAE,EACjBN,iBAAiB,CAACV,QAAQ,EAC1BU,iBAAiB,CAACT,WAAW,CAChC;IACL,CAAC,EACDS,iBAAiB,EACjBE,KAAK,EACLC,OAAO,CACV;EACL;;AAEA;AACA;;;AAGcrB,wCAAiB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC/D;;;AAGcA,wCAAiB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC9D;;;AAGcA,wCAAiB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACrE;;;AAGcA,oCAAa,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAC7D;;;AAGcA,mCAAY,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC3D;;;AAGcA,qCAAc,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAtF1DyB,YADC3B,SAAS,EAAE,sDACY;AAyF5BD,aAAa,CAAC,gCAAgC,EAAEG,sBAAsB,CAAC","names":["PostProcess","RegisterClass","serialize","SerializationHelper","ConvolutionPostProcess","constructor","name","kernel","options","camera","samplingMode","engine","reusable","textureType","onApply","effect","setFloat2","width","height","setArray","getClassName","_Parse","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","getEngine","__decorate"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/convolutionPostProcess.ts"],"sourcesContent":["import type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/convolution.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize, SerializationHelper } from \"../Misc/decorators\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The ConvolutionPostProcess applies a 3x3 kernel to every pixel of the\r\n * input texture to perform effects such as edge detection or sharpening\r\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n */\r\nexport class ConvolutionPostProcess extends PostProcess {\r\n    /** Array of 9 values corresponding to the 3x3 kernel to be applied */\r\n    @serialize()\r\n    public kernel: number[];\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"ConvolutionPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"ConvolutionPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance ConvolutionPostProcess\r\n     * @param name The name of the effect.\r\n     * @param kernel Array of 9 values corresponding to the 3x3 kernel to be applied\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        kernel: number[],\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT\r\n    ) {\r\n        super(name, \"convolution\", [\"kernel\", \"screenSize\"], null, options, camera, samplingMode, engine, reusable, null, textureType);\r\n        this.kernel = kernel;\r\n        this.onApply = (effect: Effect) => {\r\n            effect.setFloat2(\"screenSize\", this.width, this.height);\r\n            effect.setArray(\"kernel\", this.kernel);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<ConvolutionPostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new ConvolutionPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.kernel,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable,\r\n                    parsedPostProcess.textureType\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Edge detection 0 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EdgeDetect0Kernel = [1, 0, -1, 0, 0, 0, -1, 0, 1];\r\n    /**\r\n     * Edge detection 1 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EdgeDetect1Kernel = [0, 1, 0, 1, -4, 1, 0, 1, 0];\r\n    /**\r\n     * Edge detection 2 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EdgeDetect2Kernel = [-1, -1, -1, -1, 8, -1, -1, -1, -1];\r\n    /**\r\n     * Kernel to sharpen an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static SharpenKernel = [0, -1, 0, -1, 5, -1, 0, -1, 0];\r\n    /**\r\n     * Kernel to emboss an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EmbossKernel = [-2, -1, 0, -1, 1, 1, 0, 1, 2];\r\n    /**\r\n     * Kernel to blur an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static GaussianKernel = [0, 1, 0, 1, 1, 1, 0, 1, 0];\r\n}\r\n\r\nRegisterClass(\"BABYLON.ConvolutionPostProcess\", ConvolutionPostProcess);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}