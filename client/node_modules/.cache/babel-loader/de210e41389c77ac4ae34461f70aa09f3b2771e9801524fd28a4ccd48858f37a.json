{"ast":null,"code":"import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to create a Color3/4 out of individual inputs (one for each component)\n */\nexport class ColorMergerBlock extends NodeMaterialBlock {\n  /**\n   * Create a new ColorMergerBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Neutral);\n    /**\n     * Gets or sets the swizzle for r (meaning which component to affect to the output.r)\n     */\n    this.rSwizzle = \"r\";\n    /**\n     * Gets or sets the swizzle for g (meaning which component to affect to the output.g)\n     */\n    this.gSwizzle = \"g\";\n    /**\n     * Gets or sets the swizzle for b (meaning which component to affect to the output.b)\n     */\n    this.bSwizzle = \"b\";\n    /**\n     * Gets or sets the swizzle for a (meaning which component to affect to the output.a)\n     */\n    this.aSwizzle = \"a\";\n    this.registerInput(\"rgb \", NodeMaterialBlockConnectionPointTypes.Color3, true);\n    this.registerInput(\"r\", NodeMaterialBlockConnectionPointTypes.Float, true);\n    this.registerInput(\"g\", NodeMaterialBlockConnectionPointTypes.Float, true);\n    this.registerInput(\"b\", NodeMaterialBlockConnectionPointTypes.Float, true);\n    this.registerInput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, true);\n    this.registerOutput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4);\n    this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"ColorMergerBlock\";\n  }\n  /**\n   * Gets the rgb component (input)\n   */\n  get rgbIn() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the r component (input)\n   */\n  get r() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the g component (input)\n   */\n  get g() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the b component (input)\n   */\n  get b() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the a component (input)\n   */\n  get a() {\n    return this._inputs[4];\n  }\n  /**\n   * Gets the rgba component (output)\n   */\n  get rgba() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets the rgb component (output)\n   */\n  get rgbOut() {\n    return this._outputs[1];\n  }\n  /**\n   * Gets the rgb component (output)\n   * @deprecated Please use rgbOut instead.\n   */\n  get rgb() {\n    return this.rgbOut;\n  }\n  _inputRename(name) {\n    if (name === \"rgb \") {\n      return \"rgbIn\";\n    }\n    return name;\n  }\n  _buildSwizzle(len) {\n    const swizzle = this.rSwizzle + this.gSwizzle + this.bSwizzle + this.aSwizzle;\n    return \".\" + swizzle.substr(0, len);\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const rInput = this.r;\n    const gInput = this.g;\n    const bInput = this.b;\n    const aInput = this.a;\n    const rgbInput = this.rgbIn;\n    const color4Output = this._outputs[0];\n    const color3Output = this._outputs[1];\n    if (rgbInput.isConnected) {\n      if (color4Output.hasEndpoints) {\n        state.compilationString += this._declareOutput(color4Output, state) + ` = vec4(${rgbInput.associatedVariableName}, ${aInput.isConnected ? this._writeVariable(aInput) : \"0.0\"})${this._buildSwizzle(4)};\\r\\n`;\n      }\n      if (color3Output.hasEndpoints) {\n        state.compilationString += this._declareOutput(color3Output, state) + ` = ${rgbInput.associatedVariableName}${this._buildSwizzle(3)};\\r\\n`;\n      }\n    } else {\n      if (color4Output.hasEndpoints) {\n        state.compilationString += this._declareOutput(color4Output, state) + ` = vec4(${rInput.isConnected ? this._writeVariable(rInput) : \"0.0\"}, ${gInput.isConnected ? this._writeVariable(gInput) : \"0.0\"}, ${bInput.isConnected ? this._writeVariable(bInput) : \"0.0\"}, ${aInput.isConnected ? this._writeVariable(aInput) : \"0.0\"})${this._buildSwizzle(4)};\\r\\n`;\n      }\n      if (color3Output.hasEndpoints) {\n        state.compilationString += this._declareOutput(color3Output, state) + ` = vec3(${rInput.isConnected ? this._writeVariable(rInput) : \"0.0\"}, ${gInput.isConnected ? this._writeVariable(gInput) : \"0.0\"}, ${bInput.isConnected ? this._writeVariable(bInput) : \"0.0\"})${this._buildSwizzle(3)};\\r\\n`;\n      }\n    }\n    return this;\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.rSwizzle = this.rSwizzle;\n    serializationObject.gSwizzle = this.gSwizzle;\n    serializationObject.bSwizzle = this.bSwizzle;\n    serializationObject.aSwizzle = this.aSwizzle;\n    return serializationObject;\n  }\n  _deserialize(serializationObject, scene, rootUrl) {\n    var _a, _b, _c, _d;\n    super._deserialize(serializationObject, scene, rootUrl);\n    this.rSwizzle = (_a = serializationObject.rSwizzle) !== null && _a !== void 0 ? _a : \"r\";\n    this.gSwizzle = (_b = serializationObject.gSwizzle) !== null && _b !== void 0 ? _b : \"g\";\n    this.bSwizzle = (_c = serializationObject.bSwizzle) !== null && _c !== void 0 ? _c : \"b\";\n    this.aSwizzle = (_d = serializationObject.aSwizzle) !== null && _d !== void 0 ? _d : \"a\";\n  }\n  _dumpPropertiesCode() {\n    let codeString = super._dumpPropertiesCode();\n    codeString += `${this._codeVariableName}.rSwizzle = \"${this.rSwizzle}\";\\r\\n`;\n    codeString += `${this._codeVariableName}.gSwizzle = \"${this.gSwizzle}\";\\r\\n`;\n    codeString += `${this._codeVariableName}.bSwizzle = \"${this.bSwizzle}\";\\r\\n`;\n    codeString += `${this._codeVariableName}.aSwizzle = \"${this.aSwizzle}\";\\r\\n`;\n    return codeString;\n  }\n}\nRegisterClass(\"BABYLON.ColorMergerBlock\", ColorMergerBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","ColorMergerBlock","constructor","name","Neutral","registerInput","Color3","Float","registerOutput","Color4","getClassName","rgbIn","_inputs","r","g","b","a","rgba","_outputs","rgbOut","rgb","_inputRename","_buildSwizzle","len","swizzle","rSwizzle","gSwizzle","bSwizzle","aSwizzle","substr","_buildBlock","state","rInput","gInput","bInput","aInput","rgbInput","color4Output","color3Output","isConnected","hasEndpoints","compilationString","_declareOutput","associatedVariableName","_writeVariable","serialize","serializationObject","_deserialize","scene","rootUrl","_dumpPropertiesCode","codeString","_codeVariableName"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Node/Blocks/colorMergerBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { Scene } from \"../../../scene\";\r\n\r\n/**\r\n * Block used to create a Color3/4 out of individual inputs (one for each component)\r\n */\r\nexport class ColorMergerBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Gets or sets the swizzle for r (meaning which component to affect to the output.r)\r\n     */\r\n    public rSwizzle: \"r\" | \"g\" | \"b\" | \"a\" = \"r\";\r\n    /**\r\n     * Gets or sets the swizzle for g (meaning which component to affect to the output.g)\r\n     */\r\n    public gSwizzle: \"r\" | \"g\" | \"b\" | \"a\" = \"g\";\r\n    /**\r\n     * Gets or sets the swizzle for b (meaning which component to affect to the output.b)\r\n     */\r\n    public bSwizzle: \"r\" | \"g\" | \"b\" | \"a\" = \"b\";\r\n    /**\r\n     * Gets or sets the swizzle for a (meaning which component to affect to the output.a)\r\n     */\r\n    public aSwizzle: \"r\" | \"g\" | \"b\" | \"a\" = \"a\";\r\n\r\n    /**\r\n     * Create a new ColorMergerBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"rgb \", NodeMaterialBlockConnectionPointTypes.Color3, true);\r\n        this.registerInput(\"r\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"g\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"b\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n\r\n        this.registerOutput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4);\r\n        this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ColorMergerBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb component (input)\r\n     */\r\n    public get rgbIn(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the r component (input)\r\n     */\r\n    public get r(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the g component (input)\r\n     */\r\n    public get g(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the b component (input)\r\n     */\r\n    public get b(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the a component (input)\r\n     */\r\n    public get a(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgba component (output)\r\n     */\r\n    public get rgba(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb component (output)\r\n     */\r\n    public get rgbOut(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb component (output)\r\n     * @deprecated Please use rgbOut instead.\r\n     */\r\n    public get rgb(): NodeMaterialConnectionPoint {\r\n        return this.rgbOut;\r\n    }\r\n\r\n    protected _inputRename(name: string) {\r\n        if (name === \"rgb \") {\r\n            return \"rgbIn\";\r\n        }\r\n        return name;\r\n    }\r\n\r\n    private _buildSwizzle(len: number) {\r\n        const swizzle = this.rSwizzle + this.gSwizzle + this.bSwizzle + this.aSwizzle;\r\n        return \".\" + swizzle.substr(0, len);\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const rInput = this.r;\r\n        const gInput = this.g;\r\n        const bInput = this.b;\r\n        const aInput = this.a;\r\n        const rgbInput = this.rgbIn;\r\n\r\n        const color4Output = this._outputs[0];\r\n        const color3Output = this._outputs[1];\r\n\r\n        if (rgbInput.isConnected) {\r\n            if (color4Output.hasEndpoints) {\r\n                state.compilationString +=\r\n                    this._declareOutput(color4Output, state) +\r\n                    ` = vec4(${rgbInput.associatedVariableName}, ${aInput.isConnected ? this._writeVariable(aInput) : \"0.0\"})${this._buildSwizzle(4)};\\r\\n`;\r\n            }\r\n\r\n            if (color3Output.hasEndpoints) {\r\n                state.compilationString += this._declareOutput(color3Output, state) + ` = ${rgbInput.associatedVariableName}${this._buildSwizzle(3)};\\r\\n`;\r\n            }\r\n        } else {\r\n            if (color4Output.hasEndpoints) {\r\n                state.compilationString +=\r\n                    this._declareOutput(color4Output, state) +\r\n                    ` = vec4(${rInput.isConnected ? this._writeVariable(rInput) : \"0.0\"}, ${gInput.isConnected ? this._writeVariable(gInput) : \"0.0\"}, ${\r\n                        bInput.isConnected ? this._writeVariable(bInput) : \"0.0\"\r\n                    }, ${aInput.isConnected ? this._writeVariable(aInput) : \"0.0\"})${this._buildSwizzle(4)};\\r\\n`;\r\n            }\r\n\r\n            if (color3Output.hasEndpoints) {\r\n                state.compilationString +=\r\n                    this._declareOutput(color3Output, state) +\r\n                    ` = vec3(${rInput.isConnected ? this._writeVariable(rInput) : \"0.0\"}, ${gInput.isConnected ? this._writeVariable(gInput) : \"0.0\"}, ${\r\n                        bInput.isConnected ? this._writeVariable(bInput) : \"0.0\"\r\n                    })${this._buildSwizzle(3)};\\r\\n`;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.rSwizzle = this.rSwizzle;\r\n        serializationObject.gSwizzle = this.gSwizzle;\r\n        serializationObject.bSwizzle = this.bSwizzle;\r\n        serializationObject.aSwizzle = this.aSwizzle;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.rSwizzle = serializationObject.rSwizzle ?? \"r\";\r\n        this.gSwizzle = serializationObject.gSwizzle ?? \"g\";\r\n        this.bSwizzle = serializationObject.bSwizzle ?? \"b\";\r\n        this.aSwizzle = serializationObject.aSwizzle ?? \"a\";\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode();\r\n        codeString += `${this._codeVariableName}.rSwizzle = \"${this.rSwizzle}\";\\r\\n`;\r\n        codeString += `${this._codeVariableName}.gSwizzle = \"${this.gSwizzle}\";\\r\\n`;\r\n        codeString += `${this._codeVariableName}.bSwizzle = \"${this.bSwizzle}\";\\r\\n`;\r\n        codeString += `${this._codeVariableName}.aSwizzle = \"${this.aSwizzle}\";\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ColorMergerBlock\", ColorMergerBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}