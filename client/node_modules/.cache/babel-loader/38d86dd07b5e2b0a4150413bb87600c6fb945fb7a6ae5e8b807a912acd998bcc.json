{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Viewport } from \"../Maths/math.viewport.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Effect } from \"./effect.js\";\nimport { DrawWrapper } from \"./drawWrapper.js\";\n// Prevents ES6 Crash if not imported.\nimport \"../Shaders/postprocess.vertex.js\";\n// Fullscreen quad buffers by default.\nconst defaultOptions = {\n  positions: [1, 1, -1, 1, -1, -1, 1, -1],\n  indices: [0, 1, 2, 0, 2, 3]\n};\n/**\n * Helper class to render one or more effects.\n * You can access the previous rendering in your shader by declaring a sampler named textureSampler\n */\nexport class EffectRenderer {\n  /**\n   * Creates an effect renderer\n   * @param engine the engine to use for rendering\n   * @param options defines the options of the effect renderer\n   */\n  constructor(engine, options = defaultOptions) {\n    var _a, _b;\n    this._fullscreenViewport = new Viewport(0, 0, 1, 1);\n    const positions = (_a = options.positions) !== null && _a !== void 0 ? _a : defaultOptions.positions;\n    const indices = (_b = options.indices) !== null && _b !== void 0 ? _b : defaultOptions.indices;\n    this.engine = engine;\n    this._vertexBuffers = {\n      [VertexBuffer.PositionKind]: new VertexBuffer(engine, positions, VertexBuffer.PositionKind, false, false, 2)\n    };\n    this._indexBuffer = engine.createIndexBuffer(indices);\n    this._onContextRestoredObserver = engine.onContextRestoredObservable.add(() => {\n      this._indexBuffer = engine.createIndexBuffer(indices);\n      for (const key in this._vertexBuffers) {\n        const vertexBuffer = this._vertexBuffers[key];\n        vertexBuffer._rebuild();\n      }\n    });\n  }\n  /**\n   * Sets the current viewport in normalized coordinates 0-1\n   * @param viewport Defines the viewport to set (defaults to 0 0 1 1)\n   */\n  setViewport(viewport = this._fullscreenViewport) {\n    this.engine.setViewport(viewport);\n  }\n  /**\n   * Binds the embedded attributes buffer to the effect.\n   * @param effect Defines the effect to bind the attributes for\n   */\n  bindBuffers(effect) {\n    this.engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\n  }\n  /**\n   * Sets the current effect wrapper to use during draw.\n   * The effect needs to be ready before calling this api.\n   * This also sets the default full screen position attribute.\n   * @param effectWrapper Defines the effect to draw with\n   */\n  applyEffectWrapper(effectWrapper) {\n    this.engine.setState(true);\n    this.engine.depthCullingState.depthTest = false;\n    this.engine.stencilState.stencilTest = false;\n    this.engine.enableEffect(effectWrapper._drawWrapper);\n    this.bindBuffers(effectWrapper.effect);\n    effectWrapper.onApplyObservable.notifyObservers({});\n  }\n  /**\n   * Restores engine states\n   */\n  restoreStates() {\n    this.engine.depthCullingState.depthTest = true;\n    this.engine.stencilState.stencilTest = true;\n  }\n  /**\n   * Draws a full screen quad.\n   */\n  draw() {\n    this.engine.drawElementsType(0, 0, 6);\n  }\n  _isRenderTargetTexture(texture) {\n    return texture.renderTarget !== undefined;\n  }\n  /**\n   * renders one or more effects to a specified texture\n   * @param effectWrapper the effect to renderer\n   * @param outputTexture texture to draw to, if null it will render to the screen.\n   */\n  render(effectWrapper, outputTexture = null) {\n    // Ensure effect is ready\n    if (!effectWrapper.effect.isReady()) {\n      return;\n    }\n    // Reset state\n    this.setViewport();\n    const out = outputTexture === null ? null : this._isRenderTargetTexture(outputTexture) ? outputTexture.renderTarget : outputTexture;\n    if (out) {\n      this.engine.bindFramebuffer(out);\n    }\n    this.applyEffectWrapper(effectWrapper);\n    this.draw();\n    if (out) {\n      this.engine.unBindFramebuffer(out);\n    }\n    this.restoreStates();\n  }\n  /**\n   * Disposes of the effect renderer\n   */\n  dispose() {\n    const vertexBuffer = this._vertexBuffers[VertexBuffer.PositionKind];\n    if (vertexBuffer) {\n      vertexBuffer.dispose();\n      delete this._vertexBuffers[VertexBuffer.PositionKind];\n    }\n    if (this._indexBuffer) {\n      this.engine._releaseBuffer(this._indexBuffer);\n    }\n    if (this._onContextRestoredObserver) {\n      this.engine.onContextRestoredObservable.remove(this._onContextRestoredObserver);\n      this._onContextRestoredObserver = null;\n    }\n  }\n}\n/**\n * Wraps an effect to be used for rendering\n */\nexport class EffectWrapper {\n  /**\n   * Creates an effect to be renderer\n   * @param creationOptions options to create the effect\n   */\n  constructor(creationOptions) {\n    /**\n     * Event that is fired right before the effect is drawn (should be used to update uniforms)\n     */\n    this.onApplyObservable = new Observable();\n    let effectCreationOptions;\n    const uniformNames = creationOptions.uniformNames || [];\n    if (creationOptions.vertexShader) {\n      effectCreationOptions = {\n        fragmentSource: creationOptions.fragmentShader,\n        vertexSource: creationOptions.vertexShader,\n        spectorName: creationOptions.name || \"effectWrapper\"\n      };\n    } else {\n      // Default scale to use in post process vertex shader.\n      uniformNames.push(\"scale\");\n      effectCreationOptions = {\n        fragmentSource: creationOptions.fragmentShader,\n        vertex: \"postprocess\",\n        spectorName: creationOptions.name || \"effectWrapper\"\n      };\n      // Sets the default scale to identity for the post process vertex shader.\n      this.onApplyObservable.add(() => {\n        this.effect.setFloat2(\"scale\", 1, 1);\n      });\n    }\n    const defines = creationOptions.defines ? creationOptions.defines.join(\"\\n\") : \"\";\n    this._drawWrapper = new DrawWrapper(creationOptions.engine);\n    if (creationOptions.useShaderStore) {\n      effectCreationOptions.fragment = effectCreationOptions.fragmentSource;\n      if (!effectCreationOptions.vertex) {\n        effectCreationOptions.vertex = effectCreationOptions.vertexSource;\n      }\n      delete effectCreationOptions.fragmentSource;\n      delete effectCreationOptions.vertexSource;\n      this.effect = creationOptions.engine.createEffect(effectCreationOptions, creationOptions.attributeNames || [\"position\"], uniformNames, creationOptions.samplerNames, defines, undefined, creationOptions.onCompiled, undefined, undefined, creationOptions.shaderLanguage);\n    } else {\n      this.effect = new Effect(effectCreationOptions, creationOptions.attributeNames || [\"position\"], uniformNames, creationOptions.samplerNames, creationOptions.engine, defines, undefined, creationOptions.onCompiled, undefined, undefined, undefined, creationOptions.shaderLanguage);\n      this._onContextRestoredObserver = creationOptions.engine.onContextRestoredObservable.add(() => {\n        this.effect._pipelineContext = null; // because _prepareEffect will try to dispose this pipeline before recreating it and that would lead to webgl errors\n        this.effect._wasPreviouslyReady = false;\n        this.effect._prepareEffect();\n      });\n    }\n  }\n  /**\n   * The underlying effect\n   */\n  get effect() {\n    return this._drawWrapper.effect;\n  }\n  set effect(effect) {\n    this._drawWrapper.effect = effect;\n  }\n  /**\n   * Disposes of the effect wrapper\n   */\n  dispose() {\n    if (this._onContextRestoredObserver) {\n      this.effect.getEngine().onContextRestoredObservable.remove(this._onContextRestoredObserver);\n      this._onContextRestoredObserver = null;\n    }\n    this.effect.dispose();\n  }\n}","map":{"version":3,"mappings":"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","names":["VertexBuffer","Viewport","Observable","Effect","DrawWrapper","defaultOptions","positions","indices","EffectRenderer","constructor","engine","options","_vertexBuffers","PositionKind","_indexBuffer","createIndexBuffer","_onContextRestoredObserver","onContextRestoredObservable","add","key","vertexBuffer","_rebuild","setViewport","viewport","_fullscreenViewport","bindBuffers","effect","applyEffectWrapper","effectWrapper","setState","depthCullingState","depthTest","stencilState","stencilTest","enableEffect","_drawWrapper","onApplyObservable","notifyObservers","restoreStates","draw","drawElementsType","_isRenderTargetTexture","texture","renderTarget","undefined","render","outputTexture","isReady","out","bindFramebuffer","unBindFramebuffer","dispose","_releaseBuffer","remove","EffectWrapper","creationOptions","effectCreationOptions","uniformNames","vertexShader","fragmentSource","fragmentShader","vertexSource","spectorName","name","push","vertex","setFloat2","defines","join","useShaderStore","fragment","createEffect","attributeNames","samplerNames","onCompiled","shaderLanguage","_pipelineContext","_wasPreviouslyReady","_prepareEffect","getEngine"],"sourceRoot":"","sources":["../../../../lts/core/generated/Materials/effectRenderer.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { Viewport } from \"../Maths/math.viewport\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Effect } from \"./effect\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { DrawWrapper } from \"./drawWrapper\";\r\nimport type { IRenderTargetTexture, RenderTargetWrapper } from \"../Engines/renderTargetWrapper\";\r\nimport type { ShaderLanguage } from \"./shaderLanguage\";\r\n\r\n// Prevents ES6 Crash if not imported.\r\nimport \"../Shaders/postprocess.vertex\";\r\n\r\n/**\r\n * Effect Render Options\r\n */\r\nexport interface IEffectRendererOptions {\r\n    /**\r\n     * Defines the vertices positions.\r\n     */\r\n    positions?: number[];\r\n    /**\r\n     * Defines the indices.\r\n     */\r\n    indices?: number[];\r\n}\r\n\r\n// Fullscreen quad buffers by default.\r\nconst defaultOptions = {\r\n    positions: [1, 1, -1, 1, -1, -1, 1, -1],\r\n    indices: [0, 1, 2, 0, 2, 3],\r\n};\r\n\r\n/**\r\n * Helper class to render one or more effects.\r\n * You can access the previous rendering in your shader by declaring a sampler named textureSampler\r\n */\r\nexport class EffectRenderer {\r\n    /**\r\n     * The engine the effect renderer has been created for.\r\n     */\r\n    public readonly engine: ThinEngine;\r\n\r\n    private _vertexBuffers: { [key: string]: VertexBuffer };\r\n    private _indexBuffer: DataBuffer;\r\n\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _onContextRestoredObserver: Nullable<Observer<ThinEngine>>;\r\n\r\n    /**\r\n     * Creates an effect renderer\r\n     * @param engine the engine to use for rendering\r\n     * @param options defines the options of the effect renderer\r\n     */\r\n    constructor(engine: ThinEngine, options: IEffectRendererOptions = defaultOptions) {\r\n        const positions = options.positions ?? defaultOptions.positions;\r\n        const indices = options.indices ?? defaultOptions.indices;\r\n\r\n        this.engine = engine;\r\n        this._vertexBuffers = {\r\n            [VertexBuffer.PositionKind]: new VertexBuffer(engine, positions, VertexBuffer.PositionKind, false, false, 2),\r\n        };\r\n        this._indexBuffer = engine.createIndexBuffer(indices);\r\n\r\n        this._onContextRestoredObserver = engine.onContextRestoredObservable.add(() => {\r\n            this._indexBuffer = engine.createIndexBuffer(indices);\r\n\r\n            for (const key in this._vertexBuffers) {\r\n                const vertexBuffer = this._vertexBuffers[key];\r\n                vertexBuffer._rebuild();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the current viewport in normalized coordinates 0-1\r\n     * @param viewport Defines the viewport to set (defaults to 0 0 1 1)\r\n     */\r\n    public setViewport(viewport = this._fullscreenViewport): void {\r\n        this.engine.setViewport(viewport);\r\n    }\r\n\r\n    /**\r\n     * Binds the embedded attributes buffer to the effect.\r\n     * @param effect Defines the effect to bind the attributes for\r\n     */\r\n    public bindBuffers(effect: Effect): void {\r\n        this.engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\r\n    }\r\n\r\n    /**\r\n     * Sets the current effect wrapper to use during draw.\r\n     * The effect needs to be ready before calling this api.\r\n     * This also sets the default full screen position attribute.\r\n     * @param effectWrapper Defines the effect to draw with\r\n     */\r\n    public applyEffectWrapper(effectWrapper: EffectWrapper): void {\r\n        this.engine.setState(true);\r\n        this.engine.depthCullingState.depthTest = false;\r\n        this.engine.stencilState.stencilTest = false;\r\n        this.engine.enableEffect(effectWrapper._drawWrapper);\r\n        this.bindBuffers(effectWrapper.effect);\r\n        effectWrapper.onApplyObservable.notifyObservers({});\r\n    }\r\n\r\n    /**\r\n     * Restores engine states\r\n     */\r\n    public restoreStates(): void {\r\n        this.engine.depthCullingState.depthTest = true;\r\n        this.engine.stencilState.stencilTest = true;\r\n    }\r\n\r\n    /**\r\n     * Draws a full screen quad.\r\n     */\r\n    public draw(): void {\r\n        this.engine.drawElementsType(Constants.MATERIAL_TriangleFillMode, 0, 6);\r\n    }\r\n\r\n    private _isRenderTargetTexture(texture: RenderTargetWrapper | IRenderTargetTexture): texture is IRenderTargetTexture {\r\n        return (texture as IRenderTargetTexture).renderTarget !== undefined;\r\n    }\r\n\r\n    /**\r\n     * renders one or more effects to a specified texture\r\n     * @param effectWrapper the effect to renderer\r\n     * @param outputTexture texture to draw to, if null it will render to the screen.\r\n     */\r\n    public render(effectWrapper: EffectWrapper, outputTexture: Nullable<RenderTargetWrapper | IRenderTargetTexture> = null) {\r\n        // Ensure effect is ready\r\n        if (!effectWrapper.effect.isReady()) {\r\n            return;\r\n        }\r\n\r\n        // Reset state\r\n        this.setViewport();\r\n\r\n        const out = outputTexture === null ? null : this._isRenderTargetTexture(outputTexture) ? outputTexture.renderTarget! : outputTexture;\r\n\r\n        if (out) {\r\n            this.engine.bindFramebuffer(out);\r\n        }\r\n\r\n        this.applyEffectWrapper(effectWrapper);\r\n\r\n        this.draw();\r\n\r\n        if (out) {\r\n            this.engine.unBindFramebuffer(out);\r\n        }\r\n\r\n        this.restoreStates();\r\n    }\r\n\r\n    /**\r\n     * Disposes of the effect renderer\r\n     */\r\n    dispose() {\r\n        const vertexBuffer = this._vertexBuffers[VertexBuffer.PositionKind];\r\n        if (vertexBuffer) {\r\n            vertexBuffer.dispose();\r\n            delete this._vertexBuffers[VertexBuffer.PositionKind];\r\n        }\r\n\r\n        if (this._indexBuffer) {\r\n            this.engine._releaseBuffer(this._indexBuffer);\r\n        }\r\n\r\n        if (this._onContextRestoredObserver) {\r\n            this.engine.onContextRestoredObservable.remove(this._onContextRestoredObserver);\r\n            this._onContextRestoredObserver = null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Options to create an EffectWrapper\r\n */\r\ninterface EffectWrapperCreationOptions {\r\n    /**\r\n     * Engine to use to create the effect\r\n     */\r\n    engine: ThinEngine;\r\n    /**\r\n     * Fragment shader for the effect\r\n     */\r\n    fragmentShader: string;\r\n    /**\r\n     * Use the shader store instead of direct source code\r\n     */\r\n    useShaderStore?: boolean;\r\n    /**\r\n     * Vertex shader for the effect\r\n     */\r\n    vertexShader?: string;\r\n    /**\r\n     * Attributes to use in the shader\r\n     */\r\n    attributeNames?: Array<string>;\r\n    /**\r\n     * Uniforms to use in the shader\r\n     */\r\n    uniformNames?: Array<string>;\r\n    /**\r\n     * Texture sampler names to use in the shader\r\n     */\r\n    samplerNames?: Array<string>;\r\n    /**\r\n     * Defines to use in the shader\r\n     */\r\n    defines?: Array<string>;\r\n    /**\r\n     * Callback when effect is compiled\r\n     */\r\n    onCompiled?: Nullable<(effect: Effect) => void>;\r\n    /**\r\n     * The friendly name of the effect displayed in Spector.\r\n     */\r\n    name?: string;\r\n    /**\r\n     * The language the shader is written in (default: GLSL)\r\n     */\r\n    shaderLanguage?: ShaderLanguage;\r\n}\r\n\r\n/**\r\n * Wraps an effect to be used for rendering\r\n */\r\nexport class EffectWrapper {\r\n    /**\r\n     * Event that is fired right before the effect is drawn (should be used to update uniforms)\r\n     */\r\n    public onApplyObservable = new Observable<{}>();\r\n    /**\r\n     * The underlying effect\r\n     */\r\n    public get effect(): Effect {\r\n        return this._drawWrapper.effect!;\r\n    }\r\n\r\n    public set effect(effect: Effect) {\r\n        this._drawWrapper.effect = effect;\r\n    }\r\n\r\n    /** @internal */\r\n    public _drawWrapper: DrawWrapper;\r\n\r\n    private _onContextRestoredObserver: Nullable<Observer<ThinEngine>>;\r\n\r\n    /**\r\n     * Creates an effect to be renderer\r\n     * @param creationOptions options to create the effect\r\n     */\r\n    constructor(creationOptions: EffectWrapperCreationOptions) {\r\n        let effectCreationOptions: any;\r\n        const uniformNames = creationOptions.uniformNames || [];\r\n\r\n        if (creationOptions.vertexShader) {\r\n            effectCreationOptions = {\r\n                fragmentSource: creationOptions.fragmentShader,\r\n                vertexSource: creationOptions.vertexShader,\r\n                spectorName: creationOptions.name || \"effectWrapper\",\r\n            };\r\n        } else {\r\n            // Default scale to use in post process vertex shader.\r\n            uniformNames.push(\"scale\");\r\n\r\n            effectCreationOptions = {\r\n                fragmentSource: creationOptions.fragmentShader,\r\n                vertex: \"postprocess\",\r\n                spectorName: creationOptions.name || \"effectWrapper\",\r\n            };\r\n\r\n            // Sets the default scale to identity for the post process vertex shader.\r\n            this.onApplyObservable.add(() => {\r\n                this.effect.setFloat2(\"scale\", 1, 1);\r\n            });\r\n        }\r\n\r\n        const defines = creationOptions.defines ? creationOptions.defines.join(\"\\n\") : \"\";\r\n        this._drawWrapper = new DrawWrapper(creationOptions.engine);\r\n\r\n        if (creationOptions.useShaderStore) {\r\n            effectCreationOptions.fragment = effectCreationOptions.fragmentSource;\r\n            if (!effectCreationOptions.vertex) {\r\n                effectCreationOptions.vertex = effectCreationOptions.vertexSource;\r\n            }\r\n\r\n            delete effectCreationOptions.fragmentSource;\r\n            delete effectCreationOptions.vertexSource;\r\n\r\n            this.effect = creationOptions.engine.createEffect(\r\n                effectCreationOptions,\r\n                creationOptions.attributeNames || [\"position\"],\r\n                uniformNames,\r\n                creationOptions.samplerNames,\r\n                defines,\r\n                undefined,\r\n                creationOptions.onCompiled,\r\n                undefined,\r\n                undefined,\r\n                creationOptions.shaderLanguage\r\n            );\r\n        } else {\r\n            this.effect = new Effect(\r\n                effectCreationOptions,\r\n                creationOptions.attributeNames || [\"position\"],\r\n                uniformNames,\r\n                creationOptions.samplerNames,\r\n                creationOptions.engine,\r\n                defines,\r\n                undefined,\r\n                creationOptions.onCompiled,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                creationOptions.shaderLanguage\r\n            );\r\n\r\n            this._onContextRestoredObserver = creationOptions.engine.onContextRestoredObservable.add(() => {\r\n                this.effect._pipelineContext = null; // because _prepareEffect will try to dispose this pipeline before recreating it and that would lead to webgl errors\r\n                this.effect._wasPreviouslyReady = false;\r\n                this.effect._prepareEffect();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes of the effect wrapper\r\n     */\r\n    public dispose() {\r\n        if (this._onContextRestoredObserver) {\r\n            this.effect.getEngine().onContextRestoredObservable.remove(this._onContextRestoredObserver);\r\n            this._onContextRestoredObserver = null;\r\n        }\r\n        this.effect.dispose();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}