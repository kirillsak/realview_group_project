{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { SerializationHelper, serialize } from \"../Misc/decorators.js\";\nimport { MaterialPluginManager } from \"./materialPluginManager.js\";\n\n/**\n * Base class for material plugins.\n * @since 5.0\n */\nexport class MaterialPluginBase {\n  /**\n   * Creates a new material plugin\n   * @param material parent material of the plugin\n   * @param name name of the plugin\n   * @param priority priority of the plugin\n   * @param defines list of defines used by the plugin. The value of the property is the default value for this property\n   * @param addToPluginList true to add the plugin to the list of plugins managed by the material plugin manager of the material (default: true)\n   * @param enable true to enable the plugin (it is handy if the plugin does not handle properties to switch its current activation)\n   */\n  constructor(material, name, priority, defines, addToPluginList = true, enable = false) {\n    /**\n     * Defines the priority of the plugin. Lower numbers run first.\n     */\n    this.priority = 500;\n    /**\n     * Indicates that this plugin should be notified for the extra events (HasRenderTargetTextures / FillRenderTargetTextures / HardBindForSubMesh)\n     */\n    this.registerForExtraEvents = false;\n    this._material = material;\n    this.name = name;\n    this.priority = priority;\n    if (!material.pluginManager) {\n      material.pluginManager = new MaterialPluginManager(material);\n    }\n    this._pluginDefineNames = defines;\n    this._pluginManager = material.pluginManager;\n    if (addToPluginList) {\n      this._pluginManager._addPlugin(this);\n    }\n    if (enable) {\n      this._enable(true);\n    }\n    this.markAllDefinesAsDirty = material._dirtyCallbacks[63];\n  }\n  _enable(enable) {\n    if (enable) {\n      this._pluginManager._activatePlugin(this);\n    }\n  }\n  /**\n   * Gets the current class name useful for serialization or dynamic coding.\n   * @returns The class name.\n   */\n  getClassName() {\n    return \"MaterialPluginBase\";\n  }\n  /**\n   * Specifies that the submesh is ready to be used.\n   * @param defines the list of \"defines\" to update.\n   * @param scene defines the scene the material belongs to.\n   * @param engine the engine this scene belongs to.\n   * @param subMesh the submesh to check for readiness\n   * @returns - boolean indicating that the submesh is ready or not.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isReadyForSubMesh(defines, scene, engine, subMesh) {\n    return true;\n  }\n  /**\n   * Binds the material data (this function is called even if mustRebind() returns false)\n   * @param uniformBuffer defines the Uniform buffer to fill in.\n   * @param scene defines the scene the material belongs to.\n   * @param engine defines the engine the material belongs to.\n   * @param subMesh the submesh to bind data for\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  hardBindForSubMesh(uniformBuffer, scene, engine, subMesh) {}\n  /**\n   * Binds the material data.\n   * @param uniformBuffer defines the Uniform buffer to fill in.\n   * @param scene defines the scene the material belongs to.\n   * @param engine the engine this scene belongs to.\n   * @param subMesh the submesh to bind data for\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  bindForSubMesh(uniformBuffer, scene, engine, subMesh) {}\n  /**\n   * Disposes the resources of the material.\n   * @param forceDisposeTextures - Forces the disposal of all textures.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  dispose(forceDisposeTextures) {}\n  /**\n   * Returns a list of custom shader code fragments to customize the shader.\n   * @param shaderType \"vertex\" or \"fragment\"\n   * @returns null if no code to be added, or a list of pointName => code.\n   * Note that `pointName` can also be a regular expression if it starts with a `!`.\n   * In that case, the string found by the regular expression (if any) will be\n   * replaced by the code provided.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getCustomCode(shaderType) {\n    return null;\n  }\n  /**\n   * Collects all defines.\n   * @param defines The object to append to.\n   */\n  collectDefines(defines) {\n    if (!this._pluginDefineNames) {\n      return;\n    }\n    for (const key of Object.keys(this._pluginDefineNames)) {\n      if (key[0] === \"_\") {\n        continue;\n      }\n      const type = typeof this._pluginDefineNames[key];\n      defines[key] = {\n        type: type === \"number\" ? \"number\" : type === \"string\" ? \"string\" : type === \"boolean\" ? \"boolean\" : \"object\",\n        default: this._pluginDefineNames[key]\n      };\n    }\n  }\n  /**\n   * Sets the defines for the next rendering. Called before MaterialHelper.PrepareDefinesForAttributes is called.\n   * @param defines the list of \"defines\" to update.\n   * @param scene defines the scene to the material belongs to.\n   * @param mesh the mesh being rendered\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  prepareDefinesBeforeAttributes(defines, scene, mesh) {}\n  /**\n   * Sets the defines for the next rendering\n   * @param defines the list of \"defines\" to update.\n   * @param scene defines the scene to the material belongs to.\n   * @param mesh the mesh being rendered\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  prepareDefines(defines, scene, mesh) {}\n  /**\n   * Checks to see if a texture is used in the material.\n   * @param texture - Base texture to use.\n   * @returns - Boolean specifying if a texture is used in the material.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  hasTexture(texture) {\n    return false;\n  }\n  /**\n   * Gets a boolean indicating that current material needs to register RTT\n   * @returns true if this uses a render target otherwise false.\n   */\n  hasRenderTargetTextures() {\n    return false;\n  }\n  /**\n   * Fills the list of render target textures.\n   * @param renderTargets the list of render targets to update\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  fillRenderTargetTextures(renderTargets) {}\n  /**\n   * Returns an array of the actively used textures.\n   * @param activeTextures Array of BaseTextures\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getActiveTextures(activeTextures) {}\n  /**\n   * Returns the animatable textures.\n   * @param animatables Array of animatable textures.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getAnimatables(animatables) {}\n  /**\n   * Add fallbacks to the effect fallbacks list.\n   * @param defines defines the Base texture to use.\n   * @param fallbacks defines the current fallback list.\n   * @param currentRank defines the current fallback rank.\n   * @returns the new fallback rank.\n   */\n  addFallbacks(defines, fallbacks, currentRank) {\n    return currentRank;\n  }\n  /**\n   * Gets the samplers used by the plugin.\n   * @param samplers list that the sampler names should be added to.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getSamplers(samplers) {}\n  /**\n   * Gets the attributes used by the plugin.\n   * @param attributes list that the attribute names should be added to.\n   * @param scene the scene that the material belongs to.\n   * @param mesh the mesh being rendered.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getAttributes(attributes, scene, mesh) {}\n  /**\n   * Gets the uniform buffers names added by the plugin.\n   * @param ubos list that the ubo names should be added to.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getUniformBuffersNames(ubos) {}\n  /**\n   * Gets the description of the uniforms to add to the ubo (if engine supports ubos) or to inject directly in the vertex/fragment shaders (if engine does not support ubos)\n   * @returns the description of the uniforms\n   */\n  getUniforms() {\n    return {};\n  }\n  /**\n   * Makes a duplicate of the current configuration into another one.\n   * @param plugin define the config where to copy the info\n   */\n  copyTo(plugin) {\n    SerializationHelper.Clone(() => plugin, this);\n  }\n  /**\n   * Serializes this clear coat configuration.\n   * @returns - An object with the serialized config.\n   */\n  serialize() {\n    return SerializationHelper.Serialize(this);\n  }\n  /**\n   * Parses a anisotropy Configuration from a serialized object.\n   * @param source - Serialized object.\n   * @param scene Defines the scene we are parsing for\n   * @param rootUrl Defines the rootUrl to load from\n   */\n  parse(source, scene, rootUrl) {\n    SerializationHelper.Parse(() => this, source, scene, rootUrl);\n  }\n}\n__decorate([serialize()], MaterialPluginBase.prototype, \"name\", void 0);\n__decorate([serialize()], MaterialPluginBase.prototype, \"priority\", void 0);\n__decorate([serialize()], MaterialPluginBase.prototype, \"registerForExtraEvents\", void 0);","map":{"version":3,"mappings":"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","names":["SerializationHelper","serialize","MaterialPluginManager","MaterialPluginBase","constructor","material","name","priority","defines","addToPluginList","enable","_material","pluginManager","_pluginDefineNames","_pluginManager","_addPlugin","_enable","markAllDefinesAsDirty","_dirtyCallbacks","_activatePlugin","getClassName","isReadyForSubMesh","scene","engine","subMesh","hardBindForSubMesh","uniformBuffer","bindForSubMesh","dispose","forceDisposeTextures","getCustomCode","shaderType","collectDefines","key","Object","keys","type","default","prepareDefinesBeforeAttributes","mesh","prepareDefines","hasTexture","texture","hasRenderTargetTextures","fillRenderTargetTextures","renderTargets","getActiveTextures","activeTextures","getAnimatables","animatables","addFallbacks","fallbacks","currentRank","getSamplers","samplers","getAttributes","attributes","getUniformBuffersNames","ubos","getUniforms","copyTo","plugin","Clone","Serialize","parse","source","rootUrl","Parse","__decorate"],"sourceRoot":"","sources":["../../../../lts/core/generated/Materials/materialPluginBase.ts"],"sourcesContent":["import { SerializationHelper, serialize } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\nimport { MaterialPluginManager } from \"./materialPluginManager\";\r\nimport type { SmartArray } from \"../Misc/smartArray\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\ndeclare type Engine = import(\"../Engines/engine\").Engine;\r\ndeclare type Scene = import(\"../scene\").Scene;\r\ndeclare type AbstractMesh = import(\"../Meshes/abstractMesh\").AbstractMesh;\r\ndeclare type SubMesh = import(\"../Meshes/subMesh\").SubMesh;\r\ndeclare type IAnimatable = import(\"../Animations/animatable.interface\").IAnimatable;\r\ndeclare type UniformBuffer = import(\"./uniformBuffer\").UniformBuffer;\r\ndeclare type EffectFallbacks = import(\"./effectFallbacks\").EffectFallbacks;\r\ndeclare type MaterialDefines = import(\"./materialDefines\").MaterialDefines;\r\ndeclare type Material = import(\"./material\").Material;\r\ndeclare type BaseTexture = import(\"./Textures/baseTexture\").BaseTexture;\r\ndeclare type RenderTargetTexture = import(\"./Textures/renderTargetTexture\").RenderTargetTexture;\r\n\r\n/**\r\n * Base class for material plugins.\r\n * @since 5.0\r\n */\r\nexport class MaterialPluginBase {\r\n    /**\r\n     * Defines the name of the plugin\r\n     */\r\n    @serialize()\r\n    public name: string;\r\n\r\n    /**\r\n     * Defines the priority of the plugin. Lower numbers run first.\r\n     */\r\n    @serialize()\r\n    public priority: number = 500;\r\n\r\n    /**\r\n     * Indicates that this plugin should be notified for the extra events (HasRenderTargetTextures / FillRenderTargetTextures / HardBindForSubMesh)\r\n     */\r\n    @serialize()\r\n    public registerForExtraEvents: boolean = false;\r\n\r\n    protected _material: Material;\r\n    protected _pluginManager: MaterialPluginManager;\r\n    protected _pluginDefineNames?: { [name: string]: any };\r\n\r\n    protected _enable(enable: boolean) {\r\n        if (enable) {\r\n            this._pluginManager._activatePlugin(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to mark defines as being dirty.\r\n     */\r\n    public readonly markAllDefinesAsDirty: () => void;\r\n\r\n    /**\r\n     * Creates a new material plugin\r\n     * @param material parent material of the plugin\r\n     * @param name name of the plugin\r\n     * @param priority priority of the plugin\r\n     * @param defines list of defines used by the plugin. The value of the property is the default value for this property\r\n     * @param addToPluginList true to add the plugin to the list of plugins managed by the material plugin manager of the material (default: true)\r\n     * @param enable true to enable the plugin (it is handy if the plugin does not handle properties to switch its current activation)\r\n     */\r\n    constructor(material: Material, name: string, priority: number, defines?: { [key: string]: any }, addToPluginList = true, enable = false) {\r\n        this._material = material;\r\n        this.name = name;\r\n        this.priority = priority;\r\n\r\n        if (!material.pluginManager) {\r\n            material.pluginManager = new MaterialPluginManager(material);\r\n        }\r\n\r\n        this._pluginDefineNames = defines;\r\n        this._pluginManager = material.pluginManager;\r\n\r\n        if (addToPluginList) {\r\n            this._pluginManager._addPlugin(this);\r\n        }\r\n\r\n        if (enable) {\r\n            this._enable(true);\r\n        }\r\n\r\n        this.markAllDefinesAsDirty = material._dirtyCallbacks[Constants.MATERIAL_AllDirtyFlag];\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name useful for serialization or dynamic coding.\r\n     * @returns The class name.\r\n     */\r\n    public getClassName(): string {\r\n        return \"MaterialPluginBase\";\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used.\r\n     * @param defines the list of \"defines\" to update.\r\n     * @param scene defines the scene the material belongs to.\r\n     * @param engine the engine this scene belongs to.\r\n     * @param subMesh the submesh to check for readiness\r\n     * @returns - boolean indicating that the submesh is ready or not.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public isReadyForSubMesh(defines: MaterialDefines, scene: Scene, engine: Engine, subMesh: SubMesh): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Binds the material data (this function is called even if mustRebind() returns false)\r\n     * @param uniformBuffer defines the Uniform buffer to fill in.\r\n     * @param scene defines the scene the material belongs to.\r\n     * @param engine defines the engine the material belongs to.\r\n     * @param subMesh the submesh to bind data for\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public hardBindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, subMesh: SubMesh): void {}\r\n\r\n    /**\r\n     * Binds the material data.\r\n     * @param uniformBuffer defines the Uniform buffer to fill in.\r\n     * @param scene defines the scene the material belongs to.\r\n     * @param engine the engine this scene belongs to.\r\n     * @param subMesh the submesh to bind data for\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, subMesh: SubMesh): void {}\r\n\r\n    /**\r\n     * Disposes the resources of the material.\r\n     * @param forceDisposeTextures - Forces the disposal of all textures.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public dispose(forceDisposeTextures?: boolean): void {}\r\n\r\n    /**\r\n     * Returns a list of custom shader code fragments to customize the shader.\r\n     * @param shaderType \"vertex\" or \"fragment\"\r\n     * @returns null if no code to be added, or a list of pointName => code.\r\n     * Note that `pointName` can also be a regular expression if it starts with a `!`.\r\n     * In that case, the string found by the regular expression (if any) will be\r\n     * replaced by the code provided.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getCustomCode(shaderType: string): Nullable<{ [pointName: string]: string }> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Collects all defines.\r\n     * @param defines The object to append to.\r\n     */\r\n    public collectDefines(defines: { [name: string]: { type: string; default: any } }): void {\r\n        if (!this._pluginDefineNames) {\r\n            return;\r\n        }\r\n        for (const key of Object.keys(this._pluginDefineNames)) {\r\n            if (key[0] === \"_\") {\r\n                continue;\r\n            }\r\n\r\n            const type = typeof this._pluginDefineNames[key];\r\n            defines[key] = {\r\n                type: type === \"number\" ? \"number\" : type === \"string\" ? \"string\" : type === \"boolean\" ? \"boolean\" : \"object\",\r\n                default: this._pluginDefineNames[key],\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the defines for the next rendering. Called before MaterialHelper.PrepareDefinesForAttributes is called.\r\n     * @param defines the list of \"defines\" to update.\r\n     * @param scene defines the scene to the material belongs to.\r\n     * @param mesh the mesh being rendered\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public prepareDefinesBeforeAttributes(defines: MaterialDefines, scene: Scene, mesh: AbstractMesh): void {}\r\n\r\n    /**\r\n     * Sets the defines for the next rendering\r\n     * @param defines the list of \"defines\" to update.\r\n     * @param scene defines the scene to the material belongs to.\r\n     * @param mesh the mesh being rendered\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public prepareDefines(defines: MaterialDefines, scene: Scene, mesh: AbstractMesh): void {}\r\n\r\n    /**\r\n     * Checks to see if a texture is used in the material.\r\n     * @param texture - Base texture to use.\r\n     * @returns - Boolean specifying if a texture is used in the material.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     * @returns true if this uses a render target otherwise false.\r\n     */\r\n    public hasRenderTargetTextures(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Fills the list of render target textures.\r\n     * @param renderTargets the list of render targets to update\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fillRenderTargetTextures(renderTargets: SmartArray<RenderTargetTexture>): void {}\r\n\r\n    /**\r\n     * Returns an array of the actively used textures.\r\n     * @param activeTextures Array of BaseTextures\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getActiveTextures(activeTextures: BaseTexture[]): void {}\r\n\r\n    /**\r\n     * Returns the animatable textures.\r\n     * @param animatables Array of animatable textures.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getAnimatables(animatables: IAnimatable[]): void {}\r\n\r\n    /**\r\n     * Add fallbacks to the effect fallbacks list.\r\n     * @param defines defines the Base texture to use.\r\n     * @param fallbacks defines the current fallback list.\r\n     * @param currentRank defines the current fallback rank.\r\n     * @returns the new fallback rank.\r\n     */\r\n    public addFallbacks(defines: MaterialDefines, fallbacks: EffectFallbacks, currentRank: number): number {\r\n        return currentRank;\r\n    }\r\n\r\n    /**\r\n     * Gets the samplers used by the plugin.\r\n     * @param samplers list that the sampler names should be added to.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getSamplers(samplers: string[]): void {}\r\n\r\n    /**\r\n     * Gets the attributes used by the plugin.\r\n     * @param attributes list that the attribute names should be added to.\r\n     * @param scene the scene that the material belongs to.\r\n     * @param mesh the mesh being rendered.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getAttributes(attributes: string[], scene: Scene, mesh: AbstractMesh): void {}\r\n\r\n    /**\r\n     * Gets the uniform buffers names added by the plugin.\r\n     * @param ubos list that the ubo names should be added to.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getUniformBuffersNames(ubos: string[]): void {}\r\n\r\n    /**\r\n     * Gets the description of the uniforms to add to the ubo (if engine supports ubos) or to inject directly in the vertex/fragment shaders (if engine does not support ubos)\r\n     * @returns the description of the uniforms\r\n     */\r\n    public getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {};\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the current configuration into another one.\r\n     * @param plugin define the config where to copy the info\r\n     */\r\n    public copyTo(plugin: MaterialPluginBase): void {\r\n        SerializationHelper.Clone(() => plugin, this);\r\n    }\r\n\r\n    /**\r\n     * Serializes this clear coat configuration.\r\n     * @returns - An object with the serialized config.\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses a anisotropy Configuration from a serialized object.\r\n     * @param source - Serialized object.\r\n     * @param scene Defines the scene we are parsing for\r\n     * @param rootUrl Defines the rootUrl to load from\r\n     */\r\n    public parse(source: any, scene: Scene, rootUrl: string): void {\r\n        SerializationHelper.Parse(() => this, source, scene, rootUrl);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}