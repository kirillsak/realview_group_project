{"ast":null,"code":"import { Logger } from \"../Misc/logger.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { WebXRManagedOutputCanvas, WebXRManagedOutputCanvasOptions } from \"./webXRManagedOutputCanvas.js\";\nimport { NativeXRLayerWrapper, NativeXRRenderTarget } from \"./native/nativeXRRenderTarget.js\";\nimport { WebXRWebGLLayerWrapper } from \"./webXRWebGLLayer.js\";\n/**\n * Manages an XRSession to work with Babylon's engine\n * @see https://doc.babylonjs.com/features/featuresDeepDive/webXR/webXRSessionManagers\n */\nexport class WebXRSessionManager {\n  /**\n   * Constructs a WebXRSessionManager, this must be initialized within a user action before usage\n   * @param scene The scene which the session should be created for\n   */\n  constructor( /** The scene which the session should be created for */\n  scene) {\n    this.scene = scene;\n    /** WebXR timestamp updated every frame */\n    this.currentTimestamp = -1;\n    /**\n     * Used just in case of a failure to initialize an immersive session.\n     * The viewer reference space is compensated using this height, creating a kind of \"viewer-floor\" reference space\n     */\n    this.defaultHeightCompensation = 1.7;\n    /**\n     * Fires every time a new xrFrame arrives which can be used to update the camera\n     */\n    this.onXRFrameObservable = new Observable();\n    /**\n     * Fires when the reference space changed\n     */\n    this.onXRReferenceSpaceChanged = new Observable();\n    /**\n     * Fires when the xr session is ended either by the device or manually done\n     */\n    this.onXRSessionEnded = new Observable();\n    /**\n     * Fires when the xr session is initialized: right after requestSession was called and returned with a successful result\n     */\n    this.onXRSessionInit = new Observable();\n    /**\n     * Are we currently in the XR loop?\n     */\n    this.inXRFrameLoop = false;\n    /**\n     * Are we in an XR session?\n     */\n    this.inXRSession = false;\n    this._engine = scene.getEngine();\n    this._onEngineDisposedObserver = this._engine.onDisposeObservable.addOnce(() => {\n      this._engine = null;\n    });\n    scene.onDisposeObservable.addOnce(() => {\n      this.dispose();\n    });\n  }\n  /**\n   * The current reference space used in this session. This reference space can constantly change!\n   * It is mainly used to offset the camera's position.\n   */\n  get referenceSpace() {\n    return this._referenceSpace;\n  }\n  /**\n   * Set a new reference space and triggers the observable\n   */\n  set referenceSpace(newReferenceSpace) {\n    this._referenceSpace = newReferenceSpace;\n    this.onXRReferenceSpaceChanged.notifyObservers(this._referenceSpace);\n  }\n  /**\n   * The mode for the managed XR session\n   */\n  get sessionMode() {\n    return this._sessionMode;\n  }\n  /**\n   * Disposes of the session manager\n   * This should be called explicitly by the dev, if required.\n   */\n  dispose() {\n    var _a;\n    // disposing without leaving XR? Exit XR first\n    if (this.inXRSession) {\n      this.exitXRAsync();\n    }\n    this.onXRFrameObservable.clear();\n    this.onXRSessionEnded.clear();\n    this.onXRReferenceSpaceChanged.clear();\n    this.onXRSessionInit.clear();\n    (_a = this._engine) === null || _a === void 0 ? void 0 : _a.onDisposeObservable.remove(this._onEngineDisposedObserver);\n    this._engine = null;\n  }\n  /**\n   * Stops the xrSession and restores the render loop\n   * @returns Promise which resolves after it exits XR\n   */\n  exitXRAsync() {\n    if (this.session && this.inXRSession) {\n      this.inXRSession = false;\n      return this.session.end().catch(() => {\n        Logger.Warn(\"Could not end XR session.\");\n      });\n    }\n    return Promise.resolve();\n  }\n  /**\n   * Attempts to set the framebuffer-size-normalized viewport to be rendered this frame for this view.\n   * In the event of a failure, the supplied viewport is not updated.\n   * @param viewport the viewport to which the view will be rendered\n   * @param view the view for which to set the viewport\n   * @returns whether the operation was successful\n   */\n  trySetViewportForView(viewport, view) {\n    var _a;\n    return ((_a = this._baseLayerRTTProvider) === null || _a === void 0 ? void 0 : _a.trySetViewportForView(viewport, view)) || false;\n  }\n  /**\n   * Gets the correct render target texture to be rendered this frame for this eye\n   * @param eye the eye for which to get the render target\n   * @returns the render target for the specified eye or null if not available\n   */\n  getRenderTargetTextureForEye(eye) {\n    var _a;\n    return ((_a = this._baseLayerRTTProvider) === null || _a === void 0 ? void 0 : _a.getRenderTargetTextureForEye(eye)) || null;\n  }\n  /**\n   * Gets the correct render target texture to be rendered this frame for this view\n   * @param view the view for which to get the render target\n   * @returns the render target for the specified view or null if not available\n   */\n  getRenderTargetTextureForView(view) {\n    var _a;\n    return ((_a = this._baseLayerRTTProvider) === null || _a === void 0 ? void 0 : _a.getRenderTargetTextureForView(view)) || null;\n  }\n  /**\n   * Creates a WebXRRenderTarget object for the XR session\n   * @param options optional options to provide when creating a new render target\n   * @returns a WebXR render target to which the session can render\n   */\n  getWebXRRenderTarget(options) {\n    const engine = this.scene.getEngine();\n    if (this._xrNavigator.xr.native) {\n      return new NativeXRRenderTarget(this);\n    } else {\n      options = options || WebXRManagedOutputCanvasOptions.GetDefaults(engine);\n      options.canvasElement = options.canvasElement || engine.getRenderingCanvas() || undefined;\n      return new WebXRManagedOutputCanvas(this, options);\n    }\n  }\n  /**\n   * Initializes the manager\n   * After initialization enterXR can be called to start an XR session\n   * @returns Promise which resolves after it is initialized\n   */\n  initializeAsync() {\n    // Check if the browser supports webXR\n    this._xrNavigator = navigator;\n    if (!this._xrNavigator.xr) {\n      return Promise.reject(\"WebXR not available\");\n    }\n    return Promise.resolve();\n  }\n  /**\n   * Initializes an xr session\n   * @param xrSessionMode mode to initialize\n   * @param xrSessionInit defines optional and required values to pass to the session builder\n   * @returns a promise which will resolve once the session has been initialized\n   */\n  initializeSessionAsync(xrSessionMode = \"immersive-vr\", xrSessionInit = {}) {\n    return this._xrNavigator.xr.requestSession(xrSessionMode, xrSessionInit).then(session => {\n      this.session = session;\n      this._sessionMode = xrSessionMode;\n      this.onXRSessionInit.notifyObservers(session);\n      this.inXRSession = true;\n      // handle when the session is ended (By calling session.end or device ends its own session eg. pressing home button on phone)\n      this.session.addEventListener(\"end\", () => {\n        var _a;\n        this.inXRSession = false;\n        // Notify frame observers\n        this.onXRSessionEnded.notifyObservers(null);\n        if (this._engine) {\n          // make sure dimensions object is restored\n          this._engine.framebufferDimensionsObject = null;\n          // Restore frame buffer to avoid clear on xr framebuffer after session end\n          this._engine.restoreDefaultFramebuffer();\n          // Need to restart render loop as after the session is ended the last request for new frame will never call callback\n          this._engine.customAnimationFrameRequester = null;\n          this._engine._renderLoop();\n        }\n        // Dispose render target textures.\n        // Only dispose on native because we can't destroy opaque textures on browser.\n        if (this.isNative) {\n          (_a = this._baseLayerRTTProvider) === null || _a === void 0 ? void 0 : _a.dispose();\n        }\n        this._baseLayerRTTProvider = null;\n        this._baseLayerWrapper = null;\n      }, {\n        once: true\n      });\n      return this.session;\n    });\n  }\n  /**\n   * Checks if a session would be supported for the creation options specified\n   * @param sessionMode session mode to check if supported eg. immersive-vr\n   * @returns A Promise that resolves to true if supported and false if not\n   */\n  isSessionSupportedAsync(sessionMode) {\n    return WebXRSessionManager.IsSessionSupportedAsync(sessionMode);\n  }\n  /**\n   * Resets the reference space to the one started the session\n   */\n  resetReferenceSpace() {\n    this.referenceSpace = this.baseReferenceSpace;\n  }\n  /**\n   * Starts rendering to the xr layer\n   */\n  runXRRenderLoop() {\n    var _a;\n    if (!this.inXRSession || !this._engine) {\n      return;\n    }\n    // Tell the engine's render loop to be driven by the xr session's refresh rate and provide xr pose information\n    this._engine.customAnimationFrameRequester = {\n      requestAnimationFrame: this.session.requestAnimationFrame.bind(this.session),\n      renderFunction: (timestamp, xrFrame) => {\n        var _a;\n        if (!this.inXRSession || !this._engine) {\n          return;\n        }\n        // Store the XR frame and timestamp in the session manager\n        this.currentFrame = xrFrame;\n        this.currentTimestamp = timestamp;\n        if (xrFrame) {\n          this.inXRFrameLoop = true;\n          this._engine.framebufferDimensionsObject = ((_a = this._baseLayerRTTProvider) === null || _a === void 0 ? void 0 : _a.getFramebufferDimensions()) || null;\n          this.onXRFrameObservable.notifyObservers(xrFrame);\n          this._engine._renderLoop();\n          this._engine.framebufferDimensionsObject = null;\n          this.inXRFrameLoop = false;\n        }\n      }\n    };\n    this._engine.framebufferDimensionsObject = ((_a = this._baseLayerRTTProvider) === null || _a === void 0 ? void 0 : _a.getFramebufferDimensions()) || null;\n    // Stop window's animation frame and trigger sessions animation frame\n    if (typeof window !== \"undefined\" && window.cancelAnimationFrame) {\n      window.cancelAnimationFrame(this._engine._frameHandler);\n    }\n    this._engine._renderLoop();\n  }\n  /**\n   * Sets the reference space on the xr session\n   * @param referenceSpaceType space to set\n   * @returns a promise that will resolve once the reference space has been set\n   */\n  setReferenceSpaceTypeAsync(referenceSpaceType = \"local-floor\") {\n    return this.session.requestReferenceSpace(referenceSpaceType).then(referenceSpace => {\n      return referenceSpace;\n    }, rejectionReason => {\n      Logger.Error(\"XR.requestReferenceSpace failed for the following reason: \");\n      Logger.Error(rejectionReason);\n      Logger.Log('Defaulting to universally-supported \"viewer\" reference space type.');\n      return this.session.requestReferenceSpace(\"viewer\").then(referenceSpace => {\n        const heightCompensation = new XRRigidTransform({\n          x: 0,\n          y: -this.defaultHeightCompensation,\n          z: 0\n        });\n        return referenceSpace.getOffsetReferenceSpace(heightCompensation);\n      }, rejectionReason => {\n        Logger.Error(rejectionReason);\n        throw 'XR initialization failed: required \"viewer\" reference space type not supported.';\n      });\n    }).then(referenceSpace => {\n      // create viewer reference space before setting the first reference space\n      return this.session.requestReferenceSpace(\"viewer\").then(viewerReferenceSpace => {\n        this.viewerReferenceSpace = viewerReferenceSpace;\n        return referenceSpace;\n      });\n    }).then(referenceSpace => {\n      // initialize the base and offset (currently the same)\n      this.referenceSpace = this.baseReferenceSpace = referenceSpace;\n      return this.referenceSpace;\n    });\n  }\n  /**\n   * Updates the render state of the session.\n   * Note that this is deprecated in favor of WebXRSessionManager.updateRenderState().\n   * @param state state to set\n   * @returns a promise that resolves once the render state has been updated\n   * @deprecated\n   */\n  updateRenderStateAsync(state) {\n    return Promise.resolve(this.session.updateRenderState(state));\n  }\n  /**\n   * @internal\n   */\n  _setBaseLayerWrapper(baseLayerWrapper) {\n    var _a, _b;\n    if (this.isNative) {\n      (_a = this._baseLayerRTTProvider) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n    this._baseLayerWrapper = baseLayerWrapper;\n    this._baseLayerRTTProvider = ((_b = this._baseLayerWrapper) === null || _b === void 0 ? void 0 : _b.createRenderTargetTextureProvider(this)) || null;\n  }\n  /**\n   * Updates the render state of the session\n   * @param state state to set\n   */\n  updateRenderState(state) {\n    if (state.baseLayer) {\n      this._setBaseLayerWrapper(this.isNative ? new NativeXRLayerWrapper(state.baseLayer) : new WebXRWebGLLayerWrapper(state.baseLayer));\n    }\n    this.session.updateRenderState(state);\n  }\n  /**\n   * Returns a promise that resolves with a boolean indicating if the provided session mode is supported by this browser\n   * @param sessionMode defines the session to test\n   * @returns a promise with boolean as final value\n   */\n  static IsSessionSupportedAsync(sessionMode) {\n    if (!navigator.xr) {\n      return Promise.resolve(false);\n    }\n    // When the specs are final, remove supportsSession!\n    const functionToUse = navigator.xr.isSessionSupported || navigator.xr.supportsSession;\n    if (!functionToUse) {\n      return Promise.resolve(false);\n    } else {\n      return functionToUse.call(navigator.xr, sessionMode).then(result => {\n        const returnValue = typeof result === \"undefined\" ? true : result;\n        return Promise.resolve(returnValue);\n      }).catch(e => {\n        Logger.Warn(e);\n        return Promise.resolve(false);\n      });\n    }\n  }\n  /**\n   * Returns true if Babylon.js is using the BabylonNative backend, otherwise false\n   */\n  get isNative() {\n    var _a;\n    return (_a = this._xrNavigator.xr.native) !== null && _a !== void 0 ? _a : false;\n  }\n  /**\n   * The current frame rate as reported by the device\n   */\n  get currentFrameRate() {\n    var _a;\n    return (_a = this.session) === null || _a === void 0 ? void 0 : _a.frameRate;\n  }\n  /**\n   * A list of supported frame rates (only available in-session!\n   */\n  get supportedFrameRates() {\n    var _a;\n    return (_a = this.session) === null || _a === void 0 ? void 0 : _a.supportedFrameRates;\n  }\n  /**\n   * Set the framerate of the session.\n   * @param rate the new framerate. This value needs to be in the supportedFrameRates array\n   * @returns a promise that resolves once the framerate has been set\n   */\n  updateTargetFrameRate(rate) {\n    return this.session.updateTargetFrameRate(rate);\n  }\n  /**\n   * Run a callback in the xr render loop\n   * @param callback the callback to call when in XR Frame\n   * @param ignoreIfNotInSession if no session is currently running, run it first thing on the next session\n   */\n  runInXRFrame(callback, ignoreIfNotInSession = true) {\n    if (this.inXRFrameLoop) {\n      callback();\n    } else if (this.inXRSession || !ignoreIfNotInSession) {\n      this.onXRFrameObservable.addOnce(callback);\n    }\n  }\n  /**\n   * Check if fixed foveation is supported on this device\n   */\n  get isFixedFoveationSupported() {\n    var _a;\n    return ((_a = this._baseLayerWrapper) === null || _a === void 0 ? void 0 : _a.isFixedFoveationSupported) || false;\n  }\n  /**\n   * Get the fixed foveation currently set, as specified by the webxr specs\n   * If this returns null, then fixed foveation is not supported\n   */\n  get fixedFoveation() {\n    var _a;\n    return ((_a = this._baseLayerWrapper) === null || _a === void 0 ? void 0 : _a.fixedFoveation) || null;\n  }\n  /**\n   * Set the fixed foveation to the specified value, as specified by the webxr specs\n   * This value will be normalized to be between 0 and 1, 1 being max foveation, 0 being no foveation\n   */\n  set fixedFoveation(value) {\n    const val = Math.max(0, Math.min(1, value || 0));\n    if (this._baseLayerWrapper) {\n      this._baseLayerWrapper.fixedFoveation = val;\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["Logger","Observable","WebXRManagedOutputCanvas","WebXRManagedOutputCanvasOptions","NativeXRLayerWrapper","NativeXRRenderTarget","WebXRWebGLLayerWrapper","WebXRSessionManager","constructor","scene","_engine","getEngine","_onEngineDisposedObserver","onDisposeObservable","addOnce","dispose","referenceSpace","_referenceSpace","newReferenceSpace","onXRReferenceSpaceChanged","notifyObservers","sessionMode","_sessionMode","inXRSession","exitXRAsync","onXRFrameObservable","clear","onXRSessionEnded","onXRSessionInit","remove","session","end","catch","Warn","Promise","resolve","trySetViewportForView","viewport","view","_baseLayerRTTProvider","getRenderTargetTextureForEye","eye","getRenderTargetTextureForView","getWebXRRenderTarget","options","engine","_xrNavigator","xr","native","GetDefaults","canvasElement","getRenderingCanvas","undefined","initializeAsync","navigator","reject","initializeSessionAsync","xrSessionMode","xrSessionInit","requestSession","then","addEventListener","framebufferDimensionsObject","restoreDefaultFramebuffer","customAnimationFrameRequester","_renderLoop","isNative","_baseLayerWrapper","once","isSessionSupportedAsync","IsSessionSupportedAsync","resetReferenceSpace","baseReferenceSpace","runXRRenderLoop","requestAnimationFrame","bind","renderFunction","timestamp","xrFrame","currentFrame","currentTimestamp","inXRFrameLoop","getFramebufferDimensions","window","cancelAnimationFrame","_frameHandler","setReferenceSpaceTypeAsync","referenceSpaceType","requestReferenceSpace","rejectionReason","Error","Log","heightCompensation","XRRigidTransform","x","y","defaultHeightCompensation","z","getOffsetReferenceSpace","viewerReferenceSpace","updateRenderStateAsync","state","updateRenderState","_setBaseLayerWrapper","baseLayerWrapper","createRenderTargetTextureProvider","baseLayer","functionToUse","isSessionSupported","supportsSession","call","result","returnValue","e","currentFrameRate","frameRate","supportedFrameRates","updateTargetFrameRate","rate","runInXRFrame","callback","ignoreIfNotInSession","isFixedFoveationSupported","fixedFoveation","value","val","Math","max","min"],"sourceRoot":"","sources":["../../../../lts/core/generated/XR/webXRSessionManager.ts"],"sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { IDisposable, Scene } from \"../scene\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport type { WebXRRenderTarget } from \"./webXRTypes\";\r\nimport { WebXRManagedOutputCanvas, WebXRManagedOutputCanvasOptions } from \"./webXRManagedOutputCanvas\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { IWebXRRenderTargetTextureProvider, WebXRLayerRenderTargetTextureProvider } from \"./webXRRenderTargetTextureProvider\";\r\nimport type { Viewport } from \"../Maths/math.viewport\";\r\nimport type { WebXRLayerWrapper } from \"./webXRLayerWrapper\";\r\nimport { NativeXRLayerWrapper, NativeXRRenderTarget } from \"./native/nativeXRRenderTarget\";\r\nimport { WebXRWebGLLayerWrapper } from \"./webXRWebGLLayer\";\r\nimport type { ThinEngine } from \"../Engines/thinEngine\";\r\n\r\n/**\r\n * Manages an XRSession to work with Babylon's engine\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/webXR/webXRSessionManagers\r\n */\r\nexport class WebXRSessionManager implements IDisposable, IWebXRRenderTargetTextureProvider {\r\n    private _engine: Nullable<Engine>;\r\n    private _referenceSpace: XRReferenceSpace;\r\n    private _baseLayerWrapper: Nullable<WebXRLayerWrapper>;\r\n    private _baseLayerRTTProvider: Nullable<WebXRLayerRenderTargetTextureProvider>;\r\n    private _xrNavigator: any;\r\n    private _sessionMode: XRSessionMode;\r\n    private _onEngineDisposedObserver: Nullable<Observer<ThinEngine>>;\r\n\r\n    /**\r\n     * The base reference space from which the session started. good if you want to reset your\r\n     * reference space\r\n     */\r\n    public baseReferenceSpace: XRReferenceSpace;\r\n    /**\r\n     * Current XR frame\r\n     */\r\n    public currentFrame: Nullable<XRFrame>;\r\n    /** WebXR timestamp updated every frame */\r\n    public currentTimestamp: number = -1;\r\n    /**\r\n     * Used just in case of a failure to initialize an immersive session.\r\n     * The viewer reference space is compensated using this height, creating a kind of \"viewer-floor\" reference space\r\n     */\r\n    public defaultHeightCompensation = 1.7;\r\n    /**\r\n     * Fires every time a new xrFrame arrives which can be used to update the camera\r\n     */\r\n    public onXRFrameObservable: Observable<XRFrame> = new Observable<XRFrame>();\r\n    /**\r\n     * Fires when the reference space changed\r\n     */\r\n    public onXRReferenceSpaceChanged: Observable<XRReferenceSpace> = new Observable();\r\n    /**\r\n     * Fires when the xr session is ended either by the device or manually done\r\n     */\r\n    public onXRSessionEnded: Observable<any> = new Observable<any>();\r\n    /**\r\n     * Fires when the xr session is initialized: right after requestSession was called and returned with a successful result\r\n     */\r\n    public onXRSessionInit: Observable<XRSession> = new Observable<XRSession>();\r\n    /**\r\n     * Underlying xr session\r\n     */\r\n    public session: XRSession;\r\n    /**\r\n     * The viewer (head position) reference space. This can be used to get the XR world coordinates\r\n     * or get the offset the player is currently at.\r\n     */\r\n    public viewerReferenceSpace: XRReferenceSpace;\r\n    /**\r\n     * Are we currently in the XR loop?\r\n     */\r\n    public inXRFrameLoop: boolean = false;\r\n    /**\r\n     * Are we in an XR session?\r\n     */\r\n    public inXRSession: boolean = false;\r\n\r\n    /**\r\n     * Constructs a WebXRSessionManager, this must be initialized within a user action before usage\r\n     * @param scene The scene which the session should be created for\r\n     */\r\n    constructor(\r\n        /** The scene which the session should be created for */\r\n        public scene: Scene\r\n    ) {\r\n        this._engine = scene.getEngine();\r\n        this._onEngineDisposedObserver = this._engine.onDisposeObservable.addOnce(() => {\r\n            this._engine = null;\r\n        });\r\n        scene.onDisposeObservable.addOnce(() => {\r\n            this.dispose();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The current reference space used in this session. This reference space can constantly change!\r\n     * It is mainly used to offset the camera's position.\r\n     */\r\n    public get referenceSpace(): XRReferenceSpace {\r\n        return this._referenceSpace;\r\n    }\r\n\r\n    /**\r\n     * Set a new reference space and triggers the observable\r\n     */\r\n    public set referenceSpace(newReferenceSpace: XRReferenceSpace) {\r\n        this._referenceSpace = newReferenceSpace;\r\n        this.onXRReferenceSpaceChanged.notifyObservers(this._referenceSpace);\r\n    }\r\n\r\n    /**\r\n     * The mode for the managed XR session\r\n     */\r\n    public get sessionMode(): XRSessionMode {\r\n        return this._sessionMode;\r\n    }\r\n\r\n    /**\r\n     * Disposes of the session manager\r\n     * This should be called explicitly by the dev, if required.\r\n     */\r\n    public dispose() {\r\n        // disposing without leaving XR? Exit XR first\r\n        if (this.inXRSession) {\r\n            this.exitXRAsync();\r\n        }\r\n        this.onXRFrameObservable.clear();\r\n        this.onXRSessionEnded.clear();\r\n        this.onXRReferenceSpaceChanged.clear();\r\n        this.onXRSessionInit.clear();\r\n        this._engine?.onDisposeObservable.remove(this._onEngineDisposedObserver);\r\n        this._engine = null;\r\n    }\r\n\r\n    /**\r\n     * Stops the xrSession and restores the render loop\r\n     * @returns Promise which resolves after it exits XR\r\n     */\r\n    public exitXRAsync() {\r\n        if (this.session && this.inXRSession) {\r\n            this.inXRSession = false;\r\n            return this.session.end().catch(() => {\r\n                Logger.Warn(\"Could not end XR session.\");\r\n            });\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Attempts to set the framebuffer-size-normalized viewport to be rendered this frame for this view.\r\n     * In the event of a failure, the supplied viewport is not updated.\r\n     * @param viewport the viewport to which the view will be rendered\r\n     * @param view the view for which to set the viewport\r\n     * @returns whether the operation was successful\r\n     */\r\n    public trySetViewportForView(viewport: Viewport, view: XRView): boolean {\r\n        return this._baseLayerRTTProvider?.trySetViewportForView(viewport, view) || false;\r\n    }\r\n\r\n    /**\r\n     * Gets the correct render target texture to be rendered this frame for this eye\r\n     * @param eye the eye for which to get the render target\r\n     * @returns the render target for the specified eye or null if not available\r\n     */\r\n    public getRenderTargetTextureForEye(eye: XREye): Nullable<RenderTargetTexture> {\r\n        return this._baseLayerRTTProvider?.getRenderTargetTextureForEye(eye) || null;\r\n    }\r\n\r\n    /**\r\n     * Gets the correct render target texture to be rendered this frame for this view\r\n     * @param view the view for which to get the render target\r\n     * @returns the render target for the specified view or null if not available\r\n     */\r\n    public getRenderTargetTextureForView(view: XRView): Nullable<RenderTargetTexture> {\r\n        return this._baseLayerRTTProvider?.getRenderTargetTextureForView(view) || null;\r\n    }\r\n\r\n    /**\r\n     * Creates a WebXRRenderTarget object for the XR session\r\n     * @param options optional options to provide when creating a new render target\r\n     * @returns a WebXR render target to which the session can render\r\n     */\r\n    public getWebXRRenderTarget(options?: WebXRManagedOutputCanvasOptions): WebXRRenderTarget {\r\n        const engine = this.scene.getEngine();\r\n        if (this._xrNavigator.xr.native) {\r\n            return new NativeXRRenderTarget(this);\r\n        } else {\r\n            options = options || WebXRManagedOutputCanvasOptions.GetDefaults(engine);\r\n            options.canvasElement = options.canvasElement || engine.getRenderingCanvas() || undefined;\r\n            return new WebXRManagedOutputCanvas(this, options);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the manager\r\n     * After initialization enterXR can be called to start an XR session\r\n     * @returns Promise which resolves after it is initialized\r\n     */\r\n    public initializeAsync(): Promise<void> {\r\n        // Check if the browser supports webXR\r\n        this._xrNavigator = navigator;\r\n        if (!this._xrNavigator.xr) {\r\n            return Promise.reject(\"WebXR not available\");\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Initializes an xr session\r\n     * @param xrSessionMode mode to initialize\r\n     * @param xrSessionInit defines optional and required values to pass to the session builder\r\n     * @returns a promise which will resolve once the session has been initialized\r\n     */\r\n    public initializeSessionAsync(xrSessionMode: XRSessionMode = \"immersive-vr\", xrSessionInit: XRSessionInit = {}): Promise<XRSession> {\r\n        return this._xrNavigator.xr.requestSession(xrSessionMode, xrSessionInit).then((session: XRSession) => {\r\n            this.session = session;\r\n            this._sessionMode = xrSessionMode;\r\n            this.onXRSessionInit.notifyObservers(session);\r\n            this.inXRSession = true;\r\n\r\n            // handle when the session is ended (By calling session.end or device ends its own session eg. pressing home button on phone)\r\n            this.session.addEventListener(\r\n                \"end\",\r\n                () => {\r\n                    this.inXRSession = false;\r\n\r\n                    // Notify frame observers\r\n                    this.onXRSessionEnded.notifyObservers(null);\r\n\r\n                    if (this._engine) {\r\n                        // make sure dimensions object is restored\r\n                        this._engine.framebufferDimensionsObject = null;\r\n\r\n                        // Restore frame buffer to avoid clear on xr framebuffer after session end\r\n                        this._engine.restoreDefaultFramebuffer();\r\n\r\n                        // Need to restart render loop as after the session is ended the last request for new frame will never call callback\r\n                        this._engine.customAnimationFrameRequester = null;\r\n                        this._engine._renderLoop();\r\n                    }\r\n\r\n                    // Dispose render target textures.\r\n                    // Only dispose on native because we can't destroy opaque textures on browser.\r\n                    if (this.isNative) {\r\n                        this._baseLayerRTTProvider?.dispose();\r\n                    }\r\n                    this._baseLayerRTTProvider = null;\r\n                    this._baseLayerWrapper = null;\r\n                },\r\n                { once: true }\r\n            );\r\n\r\n            return this.session;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if a session would be supported for the creation options specified\r\n     * @param sessionMode session mode to check if supported eg. immersive-vr\r\n     * @returns A Promise that resolves to true if supported and false if not\r\n     */\r\n    public isSessionSupportedAsync(sessionMode: XRSessionMode): Promise<boolean> {\r\n        return WebXRSessionManager.IsSessionSupportedAsync(sessionMode);\r\n    }\r\n\r\n    /**\r\n     * Resets the reference space to the one started the session\r\n     */\r\n    public resetReferenceSpace() {\r\n        this.referenceSpace = this.baseReferenceSpace;\r\n    }\r\n\r\n    /**\r\n     * Starts rendering to the xr layer\r\n     */\r\n    public runXRRenderLoop() {\r\n        if (!this.inXRSession || !this._engine) {\r\n            return;\r\n        }\r\n\r\n        // Tell the engine's render loop to be driven by the xr session's refresh rate and provide xr pose information\r\n        this._engine.customAnimationFrameRequester = {\r\n            requestAnimationFrame: this.session.requestAnimationFrame.bind(this.session),\r\n            renderFunction: (timestamp: number, xrFrame: Nullable<XRFrame>) => {\r\n                if (!this.inXRSession || !this._engine) {\r\n                    return;\r\n                }\r\n                // Store the XR frame and timestamp in the session manager\r\n                this.currentFrame = xrFrame;\r\n                this.currentTimestamp = timestamp;\r\n                if (xrFrame) {\r\n                    this.inXRFrameLoop = true;\r\n                    this._engine.framebufferDimensionsObject = this._baseLayerRTTProvider?.getFramebufferDimensions() || null;\r\n                    this.onXRFrameObservable.notifyObservers(xrFrame);\r\n                    this._engine._renderLoop();\r\n                    this._engine.framebufferDimensionsObject = null;\r\n                    this.inXRFrameLoop = false;\r\n                }\r\n            },\r\n        };\r\n\r\n        this._engine.framebufferDimensionsObject = this._baseLayerRTTProvider?.getFramebufferDimensions() || null;\r\n\r\n        // Stop window's animation frame and trigger sessions animation frame\r\n        if (typeof window !== \"undefined\" && window.cancelAnimationFrame) {\r\n            window.cancelAnimationFrame(this._engine._frameHandler);\r\n        }\r\n        this._engine._renderLoop();\r\n    }\r\n\r\n    /**\r\n     * Sets the reference space on the xr session\r\n     * @param referenceSpaceType space to set\r\n     * @returns a promise that will resolve once the reference space has been set\r\n     */\r\n    public setReferenceSpaceTypeAsync(referenceSpaceType: XRReferenceSpaceType = \"local-floor\"): Promise<XRReferenceSpace> {\r\n        return this.session\r\n            .requestReferenceSpace(referenceSpaceType)\r\n            .then(\r\n                (referenceSpace) => {\r\n                    return referenceSpace as XRReferenceSpace;\r\n                },\r\n                (rejectionReason) => {\r\n                    Logger.Error(\"XR.requestReferenceSpace failed for the following reason: \");\r\n                    Logger.Error(rejectionReason);\r\n                    Logger.Log('Defaulting to universally-supported \"viewer\" reference space type.');\r\n\r\n                    return this.session.requestReferenceSpace(\"viewer\").then(\r\n                        (referenceSpace) => {\r\n                            const heightCompensation = new XRRigidTransform({ x: 0, y: -this.defaultHeightCompensation, z: 0 });\r\n                            return (referenceSpace as XRReferenceSpace).getOffsetReferenceSpace(heightCompensation);\r\n                        },\r\n                        (rejectionReason) => {\r\n                            Logger.Error(rejectionReason);\r\n                            throw 'XR initialization failed: required \"viewer\" reference space type not supported.';\r\n                        }\r\n                    );\r\n                }\r\n            )\r\n            .then((referenceSpace) => {\r\n                // create viewer reference space before setting the first reference space\r\n                return this.session.requestReferenceSpace(\"viewer\").then((viewerReferenceSpace) => {\r\n                    this.viewerReferenceSpace = viewerReferenceSpace as XRReferenceSpace;\r\n                    return referenceSpace;\r\n                });\r\n            })\r\n            .then((referenceSpace) => {\r\n                // initialize the base and offset (currently the same)\r\n                this.referenceSpace = this.baseReferenceSpace = referenceSpace;\r\n                return this.referenceSpace;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Updates the render state of the session.\r\n     * Note that this is deprecated in favor of WebXRSessionManager.updateRenderState().\r\n     * @param state state to set\r\n     * @returns a promise that resolves once the render state has been updated\r\n     * @deprecated\r\n     */\r\n    public updateRenderStateAsync(state: XRRenderState): Promise<void> {\r\n        return Promise.resolve(this.session.updateRenderState(state));\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setBaseLayerWrapper(baseLayerWrapper: Nullable<WebXRLayerWrapper>): void {\r\n        if (this.isNative) {\r\n            this._baseLayerRTTProvider?.dispose();\r\n        }\r\n        this._baseLayerWrapper = baseLayerWrapper;\r\n        this._baseLayerRTTProvider = this._baseLayerWrapper?.createRenderTargetTextureProvider(this) || null;\r\n    }\r\n\r\n    /**\r\n     * Updates the render state of the session\r\n     * @param state state to set\r\n     */\r\n    public updateRenderState(state: XRRenderStateInit): void {\r\n        if (state.baseLayer) {\r\n            this._setBaseLayerWrapper(this.isNative ? new NativeXRLayerWrapper(state.baseLayer) : new WebXRWebGLLayerWrapper(state.baseLayer));\r\n        }\r\n\r\n        this.session.updateRenderState(state);\r\n    }\r\n\r\n    /**\r\n     * Returns a promise that resolves with a boolean indicating if the provided session mode is supported by this browser\r\n     * @param sessionMode defines the session to test\r\n     * @returns a promise with boolean as final value\r\n     */\r\n    public static IsSessionSupportedAsync(sessionMode: XRSessionMode): Promise<boolean> {\r\n        if (!(navigator as any).xr) {\r\n            return Promise.resolve(false);\r\n        }\r\n        // When the specs are final, remove supportsSession!\r\n        const functionToUse = (navigator as any).xr.isSessionSupported || (navigator as any).xr.supportsSession;\r\n        if (!functionToUse) {\r\n            return Promise.resolve(false);\r\n        } else {\r\n            return functionToUse\r\n                .call((navigator as any).xr, sessionMode)\r\n                .then((result: boolean) => {\r\n                    const returnValue = typeof result === \"undefined\" ? true : result;\r\n                    return Promise.resolve(returnValue);\r\n                })\r\n                .catch((e: any) => {\r\n                    Logger.Warn(e);\r\n                    return Promise.resolve(false);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if Babylon.js is using the BabylonNative backend, otherwise false\r\n     */\r\n    public get isNative(): boolean {\r\n        return this._xrNavigator.xr.native ?? false;\r\n    }\r\n\r\n    /**\r\n     * The current frame rate as reported by the device\r\n     */\r\n    public get currentFrameRate(): number | undefined {\r\n        return this.session?.frameRate;\r\n    }\r\n\r\n    /**\r\n     * A list of supported frame rates (only available in-session!\r\n     */\r\n    public get supportedFrameRates(): Float32Array | undefined {\r\n        return this.session?.supportedFrameRates;\r\n    }\r\n\r\n    /**\r\n     * Set the framerate of the session.\r\n     * @param rate the new framerate. This value needs to be in the supportedFrameRates array\r\n     * @returns a promise that resolves once the framerate has been set\r\n     */\r\n    public updateTargetFrameRate(rate: number): Promise<void> {\r\n        return this.session.updateTargetFrameRate(rate);\r\n    }\r\n\r\n    /**\r\n     * Run a callback in the xr render loop\r\n     * @param callback the callback to call when in XR Frame\r\n     * @param ignoreIfNotInSession if no session is currently running, run it first thing on the next session\r\n     */\r\n    public runInXRFrame(callback: () => void, ignoreIfNotInSession = true): void {\r\n        if (this.inXRFrameLoop) {\r\n            callback();\r\n        } else if (this.inXRSession || !ignoreIfNotInSession) {\r\n            this.onXRFrameObservable.addOnce(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if fixed foveation is supported on this device\r\n     */\r\n    public get isFixedFoveationSupported(): boolean {\r\n        return this._baseLayerWrapper?.isFixedFoveationSupported || false;\r\n    }\r\n\r\n    /**\r\n     * Get the fixed foveation currently set, as specified by the webxr specs\r\n     * If this returns null, then fixed foveation is not supported\r\n     */\r\n    public get fixedFoveation(): Nullable<number> {\r\n        return this._baseLayerWrapper?.fixedFoveation || null;\r\n    }\r\n\r\n    /**\r\n     * Set the fixed foveation to the specified value, as specified by the webxr specs\r\n     * This value will be normalized to be between 0 and 1, 1 being max foveation, 0 being no foveation\r\n     */\r\n    public set fixedFoveation(value: Nullable<number>) {\r\n        const val = Math.max(0, Math.min(1, value || 0));\r\n        if (this._baseLayerWrapper) {\r\n            this._baseLayerWrapper.fixedFoveation = val;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}