{"ast":null,"code":"/**\n * @internal\n **/\nexport class StencilStateComposer {\n  constructor(reset = true) {\n    this._isStencilTestDirty = false;\n    this._isStencilMaskDirty = false;\n    this._isStencilFuncDirty = false;\n    this._isStencilOpDirty = false;\n    this.useStencilGlobalOnly = false;\n    if (reset) {\n      this.reset();\n    }\n  }\n  get isDirty() {\n    return this._isStencilTestDirty || this._isStencilMaskDirty || this._isStencilFuncDirty || this._isStencilOpDirty;\n  }\n  get func() {\n    return this._func;\n  }\n  set func(value) {\n    if (this._func === value) {\n      return;\n    }\n    this._func = value;\n    this._isStencilFuncDirty = true;\n  }\n  get funcRef() {\n    return this._funcRef;\n  }\n  set funcRef(value) {\n    if (this._funcRef === value) {\n      return;\n    }\n    this._funcRef = value;\n    this._isStencilFuncDirty = true;\n  }\n  get funcMask() {\n    return this._funcMask;\n  }\n  set funcMask(value) {\n    if (this._funcMask === value) {\n      return;\n    }\n    this._funcMask = value;\n    this._isStencilFuncDirty = true;\n  }\n  get opStencilFail() {\n    return this._opStencilFail;\n  }\n  set opStencilFail(value) {\n    if (this._opStencilFail === value) {\n      return;\n    }\n    this._opStencilFail = value;\n    this._isStencilOpDirty = true;\n  }\n  get opDepthFail() {\n    return this._opDepthFail;\n  }\n  set opDepthFail(value) {\n    if (this._opDepthFail === value) {\n      return;\n    }\n    this._opDepthFail = value;\n    this._isStencilOpDirty = true;\n  }\n  get opStencilDepthPass() {\n    return this._opStencilDepthPass;\n  }\n  set opStencilDepthPass(value) {\n    if (this._opStencilDepthPass === value) {\n      return;\n    }\n    this._opStencilDepthPass = value;\n    this._isStencilOpDirty = true;\n  }\n  get mask() {\n    return this._mask;\n  }\n  set mask(value) {\n    if (this._mask === value) {\n      return;\n    }\n    this._mask = value;\n    this._isStencilMaskDirty = true;\n  }\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(value) {\n    if (this._enabled === value) {\n      return;\n    }\n    this._enabled = value;\n    this._isStencilTestDirty = true;\n  }\n  reset() {\n    var _a;\n    this.stencilMaterial = undefined;\n    (_a = this.stencilGlobal) === null || _a === void 0 ? void 0 : _a.reset();\n    this._isStencilTestDirty = true;\n    this._isStencilMaskDirty = true;\n    this._isStencilFuncDirty = true;\n    this._isStencilOpDirty = true;\n  }\n  apply(gl) {\n    var _a;\n    if (!gl) {\n      return;\n    }\n    const stencilMaterialEnabled = !this.useStencilGlobalOnly && !!((_a = this.stencilMaterial) === null || _a === void 0 ? void 0 : _a.enabled);\n    this.enabled = stencilMaterialEnabled ? this.stencilMaterial.enabled : this.stencilGlobal.enabled;\n    this.func = stencilMaterialEnabled ? this.stencilMaterial.func : this.stencilGlobal.func;\n    this.funcRef = stencilMaterialEnabled ? this.stencilMaterial.funcRef : this.stencilGlobal.funcRef;\n    this.funcMask = stencilMaterialEnabled ? this.stencilMaterial.funcMask : this.stencilGlobal.funcMask;\n    this.opStencilFail = stencilMaterialEnabled ? this.stencilMaterial.opStencilFail : this.stencilGlobal.opStencilFail;\n    this.opDepthFail = stencilMaterialEnabled ? this.stencilMaterial.opDepthFail : this.stencilGlobal.opDepthFail;\n    this.opStencilDepthPass = stencilMaterialEnabled ? this.stencilMaterial.opStencilDepthPass : this.stencilGlobal.opStencilDepthPass;\n    this.mask = stencilMaterialEnabled ? this.stencilMaterial.mask : this.stencilGlobal.mask;\n    if (!this.isDirty) {\n      return;\n    }\n    // Stencil test\n    if (this._isStencilTestDirty) {\n      if (this.enabled) {\n        gl.enable(gl.STENCIL_TEST);\n      } else {\n        gl.disable(gl.STENCIL_TEST);\n      }\n      this._isStencilTestDirty = false;\n    }\n    // Stencil mask\n    if (this._isStencilMaskDirty) {\n      gl.stencilMask(this.mask);\n      this._isStencilMaskDirty = false;\n    }\n    // Stencil func\n    if (this._isStencilFuncDirty) {\n      gl.stencilFunc(this.func, this.funcRef, this.funcMask);\n      this._isStencilFuncDirty = false;\n    }\n    // Stencil op\n    if (this._isStencilOpDirty) {\n      gl.stencilOp(this.opStencilFail, this.opDepthFail, this.opStencilDepthPass);\n      this._isStencilOpDirty = false;\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["StencilStateComposer","constructor","reset","isDirty","_isStencilTestDirty","_isStencilMaskDirty","_isStencilFuncDirty","_isStencilOpDirty","func","_func","value","funcRef","_funcRef","funcMask","_funcMask","opStencilFail","_opStencilFail","opDepthFail","_opDepthFail","opStencilDepthPass","_opStencilDepthPass","mask","_mask","enabled","_enabled","stencilMaterial","undefined","stencilGlobal","apply","gl","stencilMaterialEnabled","useStencilGlobalOnly","enable","STENCIL_TEST","disable","stencilMask","stencilFunc","stencilOp"],"sourceRoot":"","sources":["../../../../lts/core/generated/States/stencilStateComposer.ts"],"sourcesContent":["import type { IStencilState } from \"./IStencilState\";\r\n\r\n/**\r\n * @internal\r\n **/\r\nexport class StencilStateComposer {\r\n    protected _isStencilTestDirty = false;\r\n    protected _isStencilMaskDirty = false;\r\n    protected _isStencilFuncDirty = false;\r\n    protected _isStencilOpDirty = false;\r\n\r\n    protected _enabled: boolean;\r\n\r\n    protected _mask: number;\r\n\r\n    protected _func: number;\r\n    protected _funcRef: number;\r\n    protected _funcMask: number;\r\n\r\n    protected _opStencilFail: number;\r\n    protected _opDepthFail: number;\r\n    protected _opStencilDepthPass: number;\r\n\r\n    public stencilGlobal: IStencilState;\r\n    public stencilMaterial: IStencilState | undefined;\r\n\r\n    public useStencilGlobalOnly = false;\r\n\r\n    public get isDirty(): boolean {\r\n        return this._isStencilTestDirty || this._isStencilMaskDirty || this._isStencilFuncDirty || this._isStencilOpDirty;\r\n    }\r\n\r\n    public get func(): number {\r\n        return this._func;\r\n    }\r\n\r\n    public set func(value: number) {\r\n        if (this._func === value) {\r\n            return;\r\n        }\r\n\r\n        this._func = value;\r\n        this._isStencilFuncDirty = true;\r\n    }\r\n\r\n    public get funcRef(): number {\r\n        return this._funcRef;\r\n    }\r\n\r\n    public set funcRef(value: number) {\r\n        if (this._funcRef === value) {\r\n            return;\r\n        }\r\n\r\n        this._funcRef = value;\r\n        this._isStencilFuncDirty = true;\r\n    }\r\n\r\n    public get funcMask(): number {\r\n        return this._funcMask;\r\n    }\r\n\r\n    public set funcMask(value: number) {\r\n        if (this._funcMask === value) {\r\n            return;\r\n        }\r\n\r\n        this._funcMask = value;\r\n        this._isStencilFuncDirty = true;\r\n    }\r\n\r\n    public get opStencilFail(): number {\r\n        return this._opStencilFail;\r\n    }\r\n\r\n    public set opStencilFail(value: number) {\r\n        if (this._opStencilFail === value) {\r\n            return;\r\n        }\r\n\r\n        this._opStencilFail = value;\r\n        this._isStencilOpDirty = true;\r\n    }\r\n\r\n    public get opDepthFail(): number {\r\n        return this._opDepthFail;\r\n    }\r\n\r\n    public set opDepthFail(value: number) {\r\n        if (this._opDepthFail === value) {\r\n            return;\r\n        }\r\n\r\n        this._opDepthFail = value;\r\n        this._isStencilOpDirty = true;\r\n    }\r\n\r\n    public get opStencilDepthPass(): number {\r\n        return this._opStencilDepthPass;\r\n    }\r\n\r\n    public set opStencilDepthPass(value: number) {\r\n        if (this._opStencilDepthPass === value) {\r\n            return;\r\n        }\r\n\r\n        this._opStencilDepthPass = value;\r\n        this._isStencilOpDirty = true;\r\n    }\r\n\r\n    public get mask(): number {\r\n        return this._mask;\r\n    }\r\n\r\n    public set mask(value: number) {\r\n        if (this._mask === value) {\r\n            return;\r\n        }\r\n\r\n        this._mask = value;\r\n        this._isStencilMaskDirty = true;\r\n    }\r\n\r\n    public get enabled(): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    public set enabled(value: boolean) {\r\n        if (this._enabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._enabled = value;\r\n        this._isStencilTestDirty = true;\r\n    }\r\n\r\n    public constructor(reset = true) {\r\n        if (reset) {\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.stencilMaterial = undefined;\r\n\r\n        this.stencilGlobal?.reset();\r\n\r\n        this._isStencilTestDirty = true;\r\n        this._isStencilMaskDirty = true;\r\n        this._isStencilFuncDirty = true;\r\n        this._isStencilOpDirty = true;\r\n    }\r\n\r\n    public apply(gl?: WebGLRenderingContext) {\r\n        if (!gl) {\r\n            return;\r\n        }\r\n\r\n        const stencilMaterialEnabled = !this.useStencilGlobalOnly && !!this.stencilMaterial?.enabled;\r\n\r\n        this.enabled = stencilMaterialEnabled ? this.stencilMaterial!.enabled : this.stencilGlobal.enabled;\r\n        this.func = stencilMaterialEnabled ? this.stencilMaterial!.func : this.stencilGlobal.func;\r\n        this.funcRef = stencilMaterialEnabled ? this.stencilMaterial!.funcRef : this.stencilGlobal.funcRef;\r\n        this.funcMask = stencilMaterialEnabled ? this.stencilMaterial!.funcMask : this.stencilGlobal.funcMask;\r\n        this.opStencilFail = stencilMaterialEnabled ? this.stencilMaterial!.opStencilFail : this.stencilGlobal.opStencilFail;\r\n        this.opDepthFail = stencilMaterialEnabled ? this.stencilMaterial!.opDepthFail : this.stencilGlobal.opDepthFail;\r\n        this.opStencilDepthPass = stencilMaterialEnabled ? this.stencilMaterial!.opStencilDepthPass : this.stencilGlobal.opStencilDepthPass;\r\n        this.mask = stencilMaterialEnabled ? this.stencilMaterial!.mask : this.stencilGlobal.mask;\r\n\r\n        if (!this.isDirty) {\r\n            return;\r\n        }\r\n\r\n        // Stencil test\r\n        if (this._isStencilTestDirty) {\r\n            if (this.enabled) {\r\n                gl.enable(gl.STENCIL_TEST);\r\n            } else {\r\n                gl.disable(gl.STENCIL_TEST);\r\n            }\r\n            this._isStencilTestDirty = false;\r\n        }\r\n\r\n        // Stencil mask\r\n        if (this._isStencilMaskDirty) {\r\n            gl.stencilMask(this.mask);\r\n            this._isStencilMaskDirty = false;\r\n        }\r\n\r\n        // Stencil func\r\n        if (this._isStencilFuncDirty) {\r\n            gl.stencilFunc(this.func, this.funcRef, this.funcMask);\r\n            this._isStencilFuncDirty = false;\r\n        }\r\n\r\n        // Stencil op\r\n        if (this._isStencilOpDirty) {\r\n            gl.stencilOp(this.opStencilFail, this.opDepthFail, this.opStencilDepthPass);\r\n            this._isStencilOpDirty = false;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}