{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { SerializationHelper, serialize } from \"../Misc/decorators.js\";\n/**\n * Class that holds the different stencil states of a material\n * Usage example: https://playground.babylonjs.com/#CW5PRI#10\n */\nexport class MaterialStencilState {\n  /**\n   * Creates a material stencil state instance\n   */\n  constructor() {\n    this.reset();\n  }\n  /**\n   * Resets all the stencil states to default values\n   */\n  reset() {\n    this.enabled = false;\n    this.mask = 0xff;\n    this.func = 519;\n    this.funcRef = 1;\n    this.funcMask = 0xff;\n    this.opStencilFail = 7680;\n    this.opDepthFail = 7680;\n    this.opStencilDepthPass = 7681;\n  }\n  /**\n   * Gets or sets the stencil function\n   */\n  get func() {\n    return this._func;\n  }\n  set func(value) {\n    this._func = value;\n  }\n  /**\n   * Gets or sets the stencil function reference\n   */\n  get funcRef() {\n    return this._funcRef;\n  }\n  set funcRef(value) {\n    this._funcRef = value;\n  }\n  /**\n   * Gets or sets the stencil function mask\n   */\n  get funcMask() {\n    return this._funcMask;\n  }\n  set funcMask(value) {\n    this._funcMask = value;\n  }\n  /**\n   * Gets or sets the operation when the stencil test fails\n   */\n  get opStencilFail() {\n    return this._opStencilFail;\n  }\n  set opStencilFail(value) {\n    this._opStencilFail = value;\n  }\n  /**\n   * Gets or sets the operation when the depth test fails\n   */\n  get opDepthFail() {\n    return this._opDepthFail;\n  }\n  set opDepthFail(value) {\n    this._opDepthFail = value;\n  }\n  /**\n   * Gets or sets the operation when the stencil+depth test succeeds\n   */\n  get opStencilDepthPass() {\n    return this._opStencilDepthPass;\n  }\n  set opStencilDepthPass(value) {\n    this._opStencilDepthPass = value;\n  }\n  /**\n   * Gets or sets the stencil mask\n   */\n  get mask() {\n    return this._mask;\n  }\n  set mask(value) {\n    this._mask = value;\n  }\n  /**\n   * Enables or disables the stencil test\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(value) {\n    this._enabled = value;\n  }\n  /**\n   * Get the current class name, useful for serialization or dynamic coding.\n   * @returns \"MaterialStencilState\"\n   */\n  getClassName() {\n    return \"MaterialStencilState\";\n  }\n  /**\n   * Makes a duplicate of the current configuration into another one.\n   * @param stencilState defines stencil state where to copy the info\n   */\n  copyTo(stencilState) {\n    SerializationHelper.Clone(() => stencilState, this);\n  }\n  /**\n   * Serializes this stencil configuration.\n   * @returns - An object with the serialized config.\n   */\n  serialize() {\n    return SerializationHelper.Serialize(this);\n  }\n  /**\n   * Parses a stencil state configuration from a serialized object.\n   * @param source - Serialized object.\n   * @param scene Defines the scene we are parsing for\n   * @param rootUrl Defines the rootUrl to load from\n   */\n  parse(source, scene, rootUrl) {\n    SerializationHelper.Parse(() => this, source, scene, rootUrl);\n  }\n}\n__decorate([serialize()], MaterialStencilState.prototype, \"func\", null);\n__decorate([serialize()], MaterialStencilState.prototype, \"funcRef\", null);\n__decorate([serialize()], MaterialStencilState.prototype, \"funcMask\", null);\n__decorate([serialize()], MaterialStencilState.prototype, \"opStencilFail\", null);\n__decorate([serialize()], MaterialStencilState.prototype, \"opDepthFail\", null);\n__decorate([serialize()], MaterialStencilState.prototype, \"opStencilDepthPass\", null);\n__decorate([serialize()], MaterialStencilState.prototype, \"mask\", null);\n__decorate([serialize()], MaterialStencilState.prototype, \"enabled\", null);","map":{"version":3,"mappings":";AACA,SAASA,mBAAmB,EAAEC,SAAS,QAAQ,uBAAqB;AAKpE;;;;AAIA,OAAM,MAAOC,oBAAoB;EAC7B;;;EAGAC;IACI,IAAI,CAACC,KAAK,EAAE;EAChB;EAEA;;;EAGOA,KAAK;IACR,IAAI,CAACC,OAAO,GAAG,KAAK;IACpB,IAAI,CAACC,IAAI,GAAG,IAAI;IAEhB,IAAI,CAACC,IAAI,GAAG;IACZ,IAAI,CAACC,OAAO,GAAG,CAAC;IAChB,IAAI,CAACC,QAAQ,GAAG,IAAI;IAEpB,IAAI,CAACC,aAAa,GAAG;IACrB,IAAI,CAACC,WAAW,GAAG;IACnB,IAAI,CAACC,kBAAkB,GAAG;EAC9B;EAGA;;;EAIA,IAAWL,IAAI;IACX,OAAO,IAAI,CAACM,KAAK;EACrB;EAEA,IAAWN,IAAI,CAACO,KAAa;IACzB,IAAI,CAACD,KAAK,GAAGC,KAAK;EACtB;EAGA;;;EAIA,IAAWN,OAAO;IACd,OAAO,IAAI,CAACO,QAAQ;EACxB;EAEA,IAAWP,OAAO,CAACM,KAAa;IAC5B,IAAI,CAACC,QAAQ,GAAGD,KAAK;EACzB;EAGA;;;EAIA,IAAWL,QAAQ;IACf,OAAO,IAAI,CAACO,SAAS;EACzB;EAEA,IAAWP,QAAQ,CAACK,KAAa;IAC7B,IAAI,CAACE,SAAS,GAAGF,KAAK;EAC1B;EAGA;;;EAIA,IAAWJ,aAAa;IACpB,OAAO,IAAI,CAACO,cAAc;EAC9B;EAEA,IAAWP,aAAa,CAACI,KAAa;IAClC,IAAI,CAACG,cAAc,GAAGH,KAAK;EAC/B;EAGA;;;EAIA,IAAWH,WAAW;IAClB,OAAO,IAAI,CAACO,YAAY;EAC5B;EAEA,IAAWP,WAAW,CAACG,KAAa;IAChC,IAAI,CAACI,YAAY,GAAGJ,KAAK;EAC7B;EAGA;;;EAIA,IAAWF,kBAAkB;IACzB,OAAO,IAAI,CAACO,mBAAmB;EACnC;EAEA,IAAWP,kBAAkB,CAACE,KAAa;IACvC,IAAI,CAACK,mBAAmB,GAAGL,KAAK;EACpC;EAGA;;;EAIA,IAAWR,IAAI;IACX,OAAO,IAAI,CAACc,KAAK;EACrB;EAEA,IAAWd,IAAI,CAACQ,KAAa;IACzB,IAAI,CAACM,KAAK,GAAGN,KAAK;EACtB;EAGA;;;EAIA,IAAWT,OAAO;IACd,OAAO,IAAI,CAACgB,QAAQ;EACxB;EAEA,IAAWhB,OAAO,CAACS,KAAc;IAC7B,IAAI,CAACO,QAAQ,GAAGP,KAAK;EACzB;EAEA;;;;EAIOQ,YAAY;IACf,OAAO,sBAAsB;EACjC;EAEA;;;;EAIOC,MAAM,CAACC,YAAkC;IAC5CxB,mBAAmB,CAACyB,KAAK,CAAC,MAAMD,YAAY,EAAE,IAAI,CAAC;EACvD;EAEA;;;;EAIOvB,SAAS;IACZ,OAAOD,mBAAmB,CAAC0B,SAAS,CAAC,IAAI,CAAC;EAC9C;EAEA;;;;;;EAMOC,KAAK,CAACC,MAAW,EAAEC,KAAY,EAAEC,OAAe;IACnD9B,mBAAmB,CAAC+B,KAAK,CAAC,MAAM,IAAI,EAAEH,MAAM,EAAEC,KAAK,EAAEC,OAAO,CAAC;EACjE;;AAnIAE,YADC/B,SAAS,EAAE,gDAGX;AAWD+B,YADC/B,SAAS,EAAE,mDAGX;AAWD+B,YADC/B,SAAS,EAAE,oDAGX;AAWD+B,YADC/B,SAAS,EAAE,yDAGX;AAWD+B,YADC/B,SAAS,EAAE,uDAGX;AAWD+B,YADC/B,SAAS,EAAE,8DAGX;AAWD+B,YADC/B,SAAS,EAAE,gDAGX;AAWD+B,YADC/B,SAAS,EAAE,mDAGX","names":["SerializationHelper","serialize","MaterialStencilState","constructor","reset","enabled","mask","func","funcRef","funcMask","opStencilFail","opDepthFail","opStencilDepthPass","_func","value","_funcRef","_funcMask","_opStencilFail","_opDepthFail","_opStencilDepthPass","_mask","_enabled","getClassName","copyTo","stencilState","Clone","Serialize","parse","source","scene","rootUrl","Parse","__decorate"],"sourceRoot":"","sources":["../../../../lts/core/generated/Materials/materialStencilState.ts"],"sourcesContent":["import { Constants } from \"../Engines/constants\";\r\nimport { SerializationHelper, serialize } from \"../Misc/decorators\";\r\nimport type { IStencilState } from \"../States/IStencilState\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * Class that holds the different stencil states of a material\r\n * Usage example: https://playground.babylonjs.com/#CW5PRI#10\r\n */\r\nexport class MaterialStencilState implements IStencilState {\r\n    /**\r\n     * Creates a material stencil state instance\r\n     */\r\n    public constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Resets all the stencil states to default values\r\n     */\r\n    public reset() {\r\n        this.enabled = false;\r\n        this.mask = 0xff;\r\n\r\n        this.func = Constants.ALWAYS;\r\n        this.funcRef = 1;\r\n        this.funcMask = 0xff;\r\n\r\n        this.opStencilFail = Constants.KEEP;\r\n        this.opDepthFail = Constants.KEEP;\r\n        this.opStencilDepthPass = Constants.REPLACE;\r\n    }\r\n\r\n    private _func: number;\r\n    /**\r\n     * Gets or sets the stencil function\r\n     */\r\n    @serialize()\r\n    public get func(): number {\r\n        return this._func;\r\n    }\r\n\r\n    public set func(value: number) {\r\n        this._func = value;\r\n    }\r\n\r\n    private _funcRef: number;\r\n    /**\r\n     * Gets or sets the stencil function reference\r\n     */\r\n    @serialize()\r\n    public get funcRef(): number {\r\n        return this._funcRef;\r\n    }\r\n\r\n    public set funcRef(value: number) {\r\n        this._funcRef = value;\r\n    }\r\n\r\n    private _funcMask: number;\r\n    /**\r\n     * Gets or sets the stencil function mask\r\n     */\r\n    @serialize()\r\n    public get funcMask(): number {\r\n        return this._funcMask;\r\n    }\r\n\r\n    public set funcMask(value: number) {\r\n        this._funcMask = value;\r\n    }\r\n\r\n    private _opStencilFail: number;\r\n    /**\r\n     * Gets or sets the operation when the stencil test fails\r\n     */\r\n    @serialize()\r\n    public get opStencilFail(): number {\r\n        return this._opStencilFail;\r\n    }\r\n\r\n    public set opStencilFail(value: number) {\r\n        this._opStencilFail = value;\r\n    }\r\n\r\n    private _opDepthFail: number;\r\n    /**\r\n     * Gets or sets the operation when the depth test fails\r\n     */\r\n    @serialize()\r\n    public get opDepthFail(): number {\r\n        return this._opDepthFail;\r\n    }\r\n\r\n    public set opDepthFail(value: number) {\r\n        this._opDepthFail = value;\r\n    }\r\n\r\n    private _opStencilDepthPass: number;\r\n    /**\r\n     * Gets or sets the operation when the stencil+depth test succeeds\r\n     */\r\n    @serialize()\r\n    public get opStencilDepthPass(): number {\r\n        return this._opStencilDepthPass;\r\n    }\r\n\r\n    public set opStencilDepthPass(value: number) {\r\n        this._opStencilDepthPass = value;\r\n    }\r\n\r\n    private _mask: number;\r\n    /**\r\n     * Gets or sets the stencil mask\r\n     */\r\n    @serialize()\r\n    public get mask(): number {\r\n        return this._mask;\r\n    }\r\n\r\n    public set mask(value: number) {\r\n        this._mask = value;\r\n    }\r\n\r\n    private _enabled: boolean;\r\n    /**\r\n     * Enables or disables the stencil test\r\n     */\r\n    @serialize()\r\n    public get enabled(): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    public set enabled(value: boolean) {\r\n        this._enabled = value;\r\n    }\r\n\r\n    /**\r\n     * Get the current class name, useful for serialization or dynamic coding.\r\n     * @returns \"MaterialStencilState\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"MaterialStencilState\";\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the current configuration into another one.\r\n     * @param stencilState defines stencil state where to copy the info\r\n     */\r\n    public copyTo(stencilState: MaterialStencilState): void {\r\n        SerializationHelper.Clone(() => stencilState, this);\r\n    }\r\n\r\n    /**\r\n     * Serializes this stencil configuration.\r\n     * @returns - An object with the serialized config.\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses a stencil state configuration from a serialized object.\r\n     * @param source - Serialized object.\r\n     * @param scene Defines the scene we are parsing for\r\n     * @param rootUrl Defines the rootUrl to load from\r\n     */\r\n    public parse(source: any, scene: Scene, rootUrl: string): void {\r\n        SerializationHelper.Parse(() => this, source, scene, rootUrl);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}