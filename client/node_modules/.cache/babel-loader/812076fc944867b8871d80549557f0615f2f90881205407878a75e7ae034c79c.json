{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nconst NAME = \"KHR_materials_pbrSpecularGlossiness\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Archived/KHR_materials_pbrSpecularGlossiness/README.md)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_materials_pbrSpecularGlossiness {\n  /**\n   * @internal\n   */\n  constructor(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n    this.order = 200;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @internal */\n  dispose() {\n    this._loader = null;\n  }\n  /**\n   * @internal\n   */\n  loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, (extensionContext, extension) => {\n      const promises = new Array();\n      promises.push(this._loader.loadMaterialBasePropertiesAsync(context, material, babylonMaterial));\n      promises.push(this._loadSpecularGlossinessPropertiesAsync(extensionContext, material, extension, babylonMaterial));\n      this._loader.loadMaterialAlphaProperties(context, material, babylonMaterial);\n      return Promise.all(promises).then(() => {});\n    });\n  }\n  _loadSpecularGlossinessPropertiesAsync(context, material, properties, babylonMaterial) {\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(`${context}: Material type not supported`);\n    }\n    const promises = new Array();\n    babylonMaterial.metallic = null;\n    babylonMaterial.roughness = null;\n    if (properties.diffuseFactor) {\n      babylonMaterial.albedoColor = Color3.FromArray(properties.diffuseFactor);\n      babylonMaterial.alpha = properties.diffuseFactor[3];\n    } else {\n      babylonMaterial.albedoColor = Color3.White();\n    }\n    babylonMaterial.reflectivityColor = properties.specularFactor ? Color3.FromArray(properties.specularFactor) : Color3.White();\n    babylonMaterial.microSurface = properties.glossinessFactor == undefined ? 1 : properties.glossinessFactor;\n    if (properties.diffuseTexture) {\n      promises.push(this._loader.loadTextureInfoAsync(`${context}/diffuseTexture`, properties.diffuseTexture, texture => {\n        texture.name = `${babylonMaterial.name} (Diffuse)`;\n        babylonMaterial.albedoTexture = texture;\n      }));\n    }\n    if (properties.specularGlossinessTexture) {\n      promises.push(this._loader.loadTextureInfoAsync(`${context}/specularGlossinessTexture`, properties.specularGlossinessTexture, texture => {\n        texture.name = `${babylonMaterial.name} (Specular Glossiness)`;\n        babylonMaterial.reflectivityTexture = texture;\n        babylonMaterial.reflectivityTexture.hasAlpha = true;\n      }));\n      babylonMaterial.useMicroSurfaceFromReflectivityMapAlpha = true;\n    }\n    return Promise.all(promises).then(() => {});\n  }\n}\nGLTFLoader.RegisterExtension(NAME, loader => new KHR_materials_pbrSpecularGlossiness(loader));","map":{"version":3,"mappings":"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","names":["Color3","PBRMaterial","GLTFLoader","NAME","KHR_materials_pbrSpecularGlossiness","constructor","loader","_loader","enabled","isExtensionUsed","dispose","loadMaterialPropertiesAsync","context","material","babylonMaterial","LoadExtensionAsync","name","extensionContext","extension","promises","Array","push","loadMaterialBasePropertiesAsync","_loadSpecularGlossinessPropertiesAsync","loadMaterialAlphaProperties","Promise","all","then","properties","Error","metallic","roughness","diffuseFactor","albedoColor","FromArray","alpha","White","reflectivityColor","specularFactor","microSurface","glossinessFactor","undefined","diffuseTexture","loadTextureInfoAsync","texture","albedoTexture","specularGlossinessTexture","reflectivityTexture","hasAlpha","useMicroSurfaceFromReflectivityMapAlpha","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_materials_pbrSpecularGlossiness.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsPbrSpecularGlossiness } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_materials_pbrSpecularGlossiness\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Archived/KHR_materials_pbrSpecularGlossiness/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_pbrSpecularGlossiness implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 200;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsPbrSpecularGlossiness>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialBasePropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadSpecularGlossinessPropertiesAsync(extensionContext, material, extension, babylonMaterial));\r\n            this._loader.loadMaterialAlphaProperties(context, material, babylonMaterial);\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadSpecularGlossinessPropertiesAsync(context: string, material: IMaterial, properties: IKHRMaterialsPbrSpecularGlossiness, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        babylonMaterial.metallic = null;\r\n        babylonMaterial.roughness = null;\r\n\r\n        if (properties.diffuseFactor) {\r\n            babylonMaterial.albedoColor = Color3.FromArray(properties.diffuseFactor);\r\n            babylonMaterial.alpha = properties.diffuseFactor[3];\r\n        } else {\r\n            babylonMaterial.albedoColor = Color3.White();\r\n        }\r\n\r\n        babylonMaterial.reflectivityColor = properties.specularFactor ? Color3.FromArray(properties.specularFactor) : Color3.White();\r\n        babylonMaterial.microSurface = properties.glossinessFactor == undefined ? 1 : properties.glossinessFactor;\r\n\r\n        if (properties.diffuseTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/diffuseTexture`, properties.diffuseTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Diffuse)`;\r\n                    babylonMaterial.albedoTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.specularGlossinessTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/specularGlossinessTexture`, properties.specularGlossinessTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Specular Glossiness)`;\r\n                    babylonMaterial.reflectivityTexture = texture;\r\n                    babylonMaterial.reflectivityTexture.hasAlpha = true;\r\n                })\r\n            );\r\n\r\n            babylonMaterial.useMicroSurfaceFromReflectivityMapAlpha = true;\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_pbrSpecularGlossiness(loader));\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}