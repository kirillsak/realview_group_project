{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../../../tslib.es6.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\n/**\n * Block used to implement the sheen module of the PBR material\n */\nexport class SheenBlock extends NodeMaterialBlock {\n  /**\n   * Create a new SheenBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Fragment);\n    /**\n     * If true, the sheen effect is layered above the base BRDF with the albedo-scaling technique.\n     * It allows the strength of the sheen effect to not depend on the base color of the material,\n     * making it easier to setup and tweak the effect\n     */\n    this.albedoScaling = false;\n    /**\n     * Defines if the sheen is linked to the sheen color.\n     */\n    this.linkSheenWithAlbedo = false;\n    this._isUnique = true;\n    this.registerInput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"sheen\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"sheen\", this, NodeMaterialConnectionPointDirection.Output, SheenBlock, \"SheenBlock\"));\n  }\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n  initialize(state) {\n    state._excludeVariableName(\"sheenOut\");\n    state._excludeVariableName(\"sheenMapData\");\n    state._excludeVariableName(\"vSheenColor\");\n    state._excludeVariableName(\"vSheenRoughness\");\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"SheenBlock\";\n  }\n  /**\n   * Gets the intensity input component\n   */\n  get intensity() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the color input component\n   */\n  get color() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the roughness input component\n   */\n  get roughness() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the sheen object output component\n   */\n  get sheen() {\n    return this._outputs[0];\n  }\n  prepareDefines(mesh, nodeMaterial, defines) {\n    super.prepareDefines(mesh, nodeMaterial, defines);\n    defines.setValue(\"SHEEN\", true);\n    defines.setValue(\"SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE\", true, true);\n    defines.setValue(\"SHEEN_LINKWITHALBEDO\", this.linkSheenWithAlbedo, true);\n    defines.setValue(\"SHEEN_ROUGHNESS\", this.roughness.isConnected, true);\n    defines.setValue(\"SHEEN_ALBEDOSCALING\", this.albedoScaling, true);\n  }\n  /**\n   * Gets the main code of the block (fragment side)\n   * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\n   * @returns the shader code\n   */\n  getCode(reflectionBlock) {\n    let code = \"\";\n    const color = this.color.isConnected ? this.color.associatedVariableName : \"vec3(1.)\";\n    const intensity = this.intensity.isConnected ? this.intensity.associatedVariableName : \"1.\";\n    const roughness = this.roughness.isConnected ? this.roughness.associatedVariableName : \"0.\";\n    const texture = \"vec4(0.)\";\n    code = `#ifdef SHEEN\n            sheenOutParams sheenOut;\n\n            vec4 vSheenColor = vec4(${color}, ${intensity});\n\n            sheenBlock(\n                vSheenColor,\n            #ifdef SHEEN_ROUGHNESS\n                ${roughness},\n            #endif\n                roughness,\n            #ifdef SHEEN_TEXTURE\n                ${texture},\n                1.0,\n            #endif\n                reflectance,\n            #ifdef SHEEN_LINKWITHALBEDO\n                baseColor,\n                surfaceAlbedo,\n            #endif\n            #ifdef ENVIRONMENTBRDF\n                NdotV,\n                environmentBrdf,\n            #endif\n            #if defined(REFLECTION) && defined(ENVIRONMENTBRDF)\n                AARoughnessFactors,\n                ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionMicrosurfaceInfosName},\n                ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionInfosName},\n                ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock.reflectionColor},\n                vLightingIntensity,\n                #ifdef ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName}\n                    ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName},\n                #else\n                    ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName},\n                #endif\n                reflectionOut.reflectionCoords,\n                NdotVUnclamped,\n                #ifndef LODBASEDMICROSFURACE\n                    #ifdef ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName}\n                        ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName},\n                        ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName},\n                    #else\n                        ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName},\n                        ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName},\n                    #endif\n                #endif\n                #if !defined(${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName}) && defined(RADIANCEOCCLUSION)\n                    seo,\n                #endif\n                #if !defined(${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName}) && defined(HORIZONOCCLUSION) && defined(BUMP) && defined(${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName})\n                    eho,\n                #endif\n            #endif\n                sheenOut\n            );\n\n            #ifdef SHEEN_LINKWITHALBEDO\n                surfaceAlbedo = sheenOut.surfaceAlbedo;\n            #endif\n        #endif\\r\\n`;\n    return code;\n  }\n  _buildBlock(state) {\n    if (state.target === NodeMaterialBlockTargets.Fragment) {\n      state.sharedData.blocksWithDefines.push(this);\n    }\n    return this;\n  }\n  _dumpPropertiesCode() {\n    let codeString = super._dumpPropertiesCode();\n    codeString += `${this._codeVariableName}.albedoScaling = ${this.albedoScaling};\\r\\n`;\n    codeString += `${this._codeVariableName}.linkSheenWithAlbedo = ${this.linkSheenWithAlbedo};\\r\\n`;\n    return codeString;\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.albedoScaling = this.albedoScaling;\n    serializationObject.linkSheenWithAlbedo = this.linkSheenWithAlbedo;\n    return serializationObject;\n  }\n  _deserialize(serializationObject, scene, rootUrl) {\n    super._deserialize(serializationObject, scene, rootUrl);\n    this.albedoScaling = serializationObject.albedoScaling;\n    this.linkSheenWithAlbedo = serializationObject.linkSheenWithAlbedo;\n  }\n}\n__decorate([editableInPropertyPage(\"Albedo scaling\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", {\n  notifiers: {\n    update: true\n  }\n})], SheenBlock.prototype, \"albedoScaling\", void 0);\n__decorate([editableInPropertyPage(\"Link sheen with albedo\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", {\n  notifiers: {\n    update: true\n  }\n})], SheenBlock.prototype, \"linkSheenWithAlbedo\", void 0);\nRegisterClass(\"BABYLON.SheenBlock\", SheenBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialConnectionPointDirection","NodeMaterialBlockTargets","RegisterClass","editableInPropertyPage","PropertyTypeForEdition","NodeMaterialConnectionPointCustomObject","SheenBlock","constructor","name","Fragment","_isUnique","registerInput","Float","Color3","registerOutput","Object","Output","initialize","state","_excludeVariableName","getClassName","intensity","_inputs","color","roughness","sheen","_outputs","prepareDefines","mesh","nodeMaterial","defines","setValue","linkSheenWithAlbedo","isConnected","albedoScaling","getCode","reflectionBlock","code","associatedVariableName","texture","_vReflectionMicrosurfaceInfosName","_vReflectionInfosName","reflectionColor","_define3DName","_cubeSamplerName","_2DSamplerName","_defineSkyboxName","_buildBlock","target","sharedData","blocksWithDefines","push","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","_deserialize","scene","rootUrl","__decorate","Boolean","notifiers","update"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/PBR/sheenBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { ReflectionBlock } from \"./reflectionBlock\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport type { Nullable } from \"../../../../types\";\r\n\r\n/**\r\n * Block used to implement the sheen module of the PBR material\r\n */\r\nexport class SheenBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new SheenBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\r\n            \"sheen\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"sheen\", this, NodeMaterialConnectionPointDirection.Output, SheenBlock, \"SheenBlock\")\r\n        );\r\n    }\r\n\r\n    /**\r\n     * If true, the sheen effect is layered above the base BRDF with the albedo-scaling technique.\r\n     * It allows the strength of the sheen effect to not depend on the base color of the material,\r\n     * making it easier to setup and tweak the effect\r\n     */\r\n    @editableInPropertyPage(\"Albedo scaling\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", { notifiers: { update: true } })\r\n    public albedoScaling: boolean = false;\r\n\r\n    /**\r\n     * Defines if the sheen is linked to the sheen color.\r\n     */\r\n    @editableInPropertyPage(\"Link sheen with albedo\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", { notifiers: { update: true } })\r\n    public linkSheenWithAlbedo: boolean = false;\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"sheenOut\");\r\n        state._excludeVariableName(\"sheenMapData\");\r\n        state._excludeVariableName(\"vSheenColor\");\r\n        state._excludeVariableName(\"vSheenRoughness\");\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"SheenBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the intensity input component\r\n     */\r\n    public get intensity(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the color input component\r\n     */\r\n    public get color(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the roughness input component\r\n     */\r\n    public get roughness(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the sheen object output component\r\n     */\r\n    public get sheen(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        super.prepareDefines(mesh, nodeMaterial, defines);\r\n\r\n        defines.setValue(\"SHEEN\", true);\r\n        defines.setValue(\"SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE\", true, true);\r\n        defines.setValue(\"SHEEN_LINKWITHALBEDO\", this.linkSheenWithAlbedo, true);\r\n        defines.setValue(\"SHEEN_ROUGHNESS\", this.roughness.isConnected, true);\r\n        defines.setValue(\"SHEEN_ALBEDOSCALING\", this.albedoScaling, true);\r\n    }\r\n\r\n    /**\r\n     * Gets the main code of the block (fragment side)\r\n     * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\r\n     * @returns the shader code\r\n     */\r\n    public getCode(reflectionBlock: Nullable<ReflectionBlock>): string {\r\n        let code = \"\";\r\n\r\n        const color = this.color.isConnected ? this.color.associatedVariableName : \"vec3(1.)\";\r\n        const intensity = this.intensity.isConnected ? this.intensity.associatedVariableName : \"1.\";\r\n        const roughness = this.roughness.isConnected ? this.roughness.associatedVariableName : \"0.\";\r\n        const texture = \"vec4(0.)\";\r\n\r\n        code = `#ifdef SHEEN\r\n            sheenOutParams sheenOut;\r\n\r\n            vec4 vSheenColor = vec4(${color}, ${intensity});\r\n\r\n            sheenBlock(\r\n                vSheenColor,\r\n            #ifdef SHEEN_ROUGHNESS\r\n                ${roughness},\r\n            #endif\r\n                roughness,\r\n            #ifdef SHEEN_TEXTURE\r\n                ${texture},\r\n                1.0,\r\n            #endif\r\n                reflectance,\r\n            #ifdef SHEEN_LINKWITHALBEDO\r\n                baseColor,\r\n                surfaceAlbedo,\r\n            #endif\r\n            #ifdef ENVIRONMENTBRDF\r\n                NdotV,\r\n                environmentBrdf,\r\n            #endif\r\n            #if defined(REFLECTION) && defined(ENVIRONMENTBRDF)\r\n                AARoughnessFactors,\r\n                ${reflectionBlock?._vReflectionMicrosurfaceInfosName},\r\n                ${reflectionBlock?._vReflectionInfosName},\r\n                ${reflectionBlock?.reflectionColor},\r\n                vLightingIntensity,\r\n                #ifdef ${reflectionBlock?._define3DName}\r\n                    ${reflectionBlock?._cubeSamplerName},\r\n                #else\r\n                    ${reflectionBlock?._2DSamplerName},\r\n                #endif\r\n                reflectionOut.reflectionCoords,\r\n                NdotVUnclamped,\r\n                #ifndef LODBASEDMICROSFURACE\r\n                    #ifdef ${reflectionBlock?._define3DName}\r\n                        ${reflectionBlock?._cubeSamplerName},\r\n                        ${reflectionBlock?._cubeSamplerName},\r\n                    #else\r\n                        ${reflectionBlock?._2DSamplerName},\r\n                        ${reflectionBlock?._2DSamplerName},\r\n                    #endif\r\n                #endif\r\n                #if !defined(${reflectionBlock?._defineSkyboxName}) && defined(RADIANCEOCCLUSION)\r\n                    seo,\r\n                #endif\r\n                #if !defined(${reflectionBlock?._defineSkyboxName}) && defined(HORIZONOCCLUSION) && defined(BUMP) && defined(${reflectionBlock?._define3DName})\r\n                    eho,\r\n                #endif\r\n            #endif\r\n                sheenOut\r\n            );\r\n\r\n            #ifdef SHEEN_LINKWITHALBEDO\r\n                surfaceAlbedo = sheenOut.surfaceAlbedo;\r\n            #endif\r\n        #endif\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.sharedData.blocksWithDefines.push(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode();\r\n\r\n        codeString += `${this._codeVariableName}.albedoScaling = ${this.albedoScaling};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.linkSheenWithAlbedo = ${this.linkSheenWithAlbedo};\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.albedoScaling = this.albedoScaling;\r\n        serializationObject.linkSheenWithAlbedo = this.linkSheenWithAlbedo;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.albedoScaling = serializationObject.albedoScaling;\r\n        this.linkSheenWithAlbedo = serializationObject.linkSheenWithAlbedo;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.SheenBlock\", SheenBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}