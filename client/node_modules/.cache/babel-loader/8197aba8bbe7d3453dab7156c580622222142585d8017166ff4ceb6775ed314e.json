{"ast":null,"code":"import { Engine } from \"./engine.js\";\nimport { NullEngine } from \"./nullEngine.js\";\nimport { WebGPUEngine } from \"./webgpuEngine.js\";\n/**\n * Helper class to create the best engine depending on the current hardware\n */\nexport class EngineFactory {\n  /**\n   * Creates an engine based on the capabilities of the underlying hardware\n   * @param canvas Defines the canvas to use to display the result\n   * @param options Defines the options passed to the engine to create the context dependencies\n   * @returns a promise that resolves with the created engine\n   */\n  static CreateAsync(canvas, options) {\n    return WebGPUEngine.IsSupportedAsync.then(supported => {\n      if (supported) {\n        return WebGPUEngine.CreateAsync(canvas, options);\n      } else if (Engine.IsSupported) {\n        return new Promise(resolve => {\n          resolve(new Engine(canvas, undefined, options));\n        });\n      }\n      return new Promise(resolve => {\n        resolve(new NullEngine(options));\n      });\n    });\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAQ,aAAW;AAClC,SAASC,UAAU,QAAQ,iBAAe;AAC1C,SAASC,YAAY,QAAQ,mBAAiB;AAE9C;;;AAGA,OAAM,MAAOC,aAAa;EACtB;;;;;;EAMO,OAAOC,WAAW,CAACC,MAAyB,EAAEC,OAAY;IAC7D,OAAOJ,YAAY,CAACK,gBAAgB,CAACC,IAAI,CAAEC,SAAS,IAAI;MACpD,IAAIA,SAAS,EAAE;QACX,OAAOP,YAAY,CAACE,WAAW,CAACC,MAAM,EAAEC,OAAO,CAAC;OACnD,MAAM,IAAIN,MAAM,CAACU,WAAW,EAAE;QAC3B,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAI;UAC3BA,OAAO,CAAC,IAAIZ,MAAM,CAACK,MAAM,EAAEQ,SAAS,EAAEP,OAAO,CAAC,CAAC;QACnD,CAAC,CAAC;;MAEN,OAAO,IAAIK,OAAO,CAAEC,OAAO,IAAI;QAC3BA,OAAO,CAAC,IAAIX,UAAU,CAACK,OAAO,CAAC,CAAC;MACpC,CAAC,CAAC;IACN,CAAC,CAAC;EACN","names":["Engine","NullEngine","WebGPUEngine","EngineFactory","CreateAsync","canvas","options","IsSupportedAsync","then","supported","IsSupported","Promise","resolve","undefined"],"sourceRoot":"","sources":["../../../../lts/core/generated/Engines/engineFactory.ts"],"sourcesContent":["import { Engine } from \"./engine\";\r\nimport { NullEngine } from \"./nullEngine\";\r\nimport { WebGPUEngine } from \"./webgpuEngine\";\r\n\r\n/**\r\n * Helper class to create the best engine depending on the current hardware\r\n */\r\nexport class EngineFactory {\r\n    /**\r\n     * Creates an engine based on the capabilities of the underlying hardware\r\n     * @param canvas Defines the canvas to use to display the result\r\n     * @param options Defines the options passed to the engine to create the context dependencies\r\n     * @returns a promise that resolves with the created engine\r\n     */\r\n    public static CreateAsync(canvas: HTMLCanvasElement, options: any): Promise<Engine> {\r\n        return WebGPUEngine.IsSupportedAsync.then((supported) => {\r\n            if (supported) {\r\n                return WebGPUEngine.CreateAsync(canvas, options);\r\n            } else if (Engine.IsSupported) {\r\n                return new Promise((resolve) => {\r\n                    resolve(new Engine(canvas, undefined, options));\r\n                });\r\n            }\r\n            return new Promise((resolve) => {\r\n                resolve(new NullEngine(options));\r\n            });\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}