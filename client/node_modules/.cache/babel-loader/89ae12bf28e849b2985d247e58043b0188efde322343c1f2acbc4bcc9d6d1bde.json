{"ast":null,"code":"import { Engine } from \"../../Engines/engine.js\";\nimport { Size } from \"../../Maths/math.size.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { IsWindowObjectExist } from \"../../Misc/domManagement.js\";\nObject.defineProperty(Engine.prototype, \"isInVRExclusivePointerMode\", {\n  get: function () {\n    return this._vrExclusivePointerMode;\n  },\n  enumerable: true,\n  configurable: true\n});\nEngine.prototype._prepareVRComponent = function () {\n  this._vrSupported = false;\n  this._vrExclusivePointerMode = false;\n  this.onVRDisplayChangedObservable = new Observable();\n  this.onVRRequestPresentComplete = new Observable();\n  this.onVRRequestPresentStart = new Observable();\n};\nEngine.prototype.isVRDevicePresent = function () {\n  return !!this._vrDisplay;\n};\nEngine.prototype.getVRDevice = function () {\n  return this._vrDisplay;\n};\nEngine.prototype.initWebVR = function () {\n  this.initWebVRAsync();\n  return this.onVRDisplayChangedObservable;\n};\nEngine.prototype.initWebVRAsync = function () {\n  const notifyObservers = () => {\n    const eventArgs = {\n      vrDisplay: this._vrDisplay,\n      vrSupported: this._vrSupported\n    };\n    this.onVRDisplayChangedObservable.notifyObservers(eventArgs);\n    this._webVRInitPromise = new Promise(res => {\n      res(eventArgs);\n    });\n  };\n  if (!this._onVrDisplayConnect) {\n    this._onVrDisplayConnect = event => {\n      this._vrDisplay = event.display;\n      notifyObservers();\n    };\n    this._onVrDisplayDisconnect = () => {\n      this._vrDisplay.cancelAnimationFrame(this._frameHandler);\n      this._vrDisplay = undefined;\n      this._frameHandler = Engine.QueueNewFrame(this._boundRenderFunction);\n      notifyObservers();\n    };\n    this._onVrDisplayPresentChange = () => {\n      this._vrExclusivePointerMode = this._vrDisplay && this._vrDisplay.isPresenting;\n    };\n    const hostWindow = this.getHostWindow();\n    if (hostWindow) {\n      hostWindow.addEventListener(\"vrdisplayconnect\", this._onVrDisplayConnect);\n      hostWindow.addEventListener(\"vrdisplaydisconnect\", this._onVrDisplayDisconnect);\n      hostWindow.addEventListener(\"vrdisplaypresentchange\", this._onVrDisplayPresentChange);\n    }\n  }\n  this._webVRInitPromise = this._webVRInitPromise || this._getVRDisplaysAsync();\n  this._webVRInitPromise.then(notifyObservers);\n  return this._webVRInitPromise;\n};\nEngine.prototype._getVRDisplaysAsync = function () {\n  return new Promise(res => {\n    if (navigator.getVRDisplays) {\n      navigator.getVRDisplays().then(devices => {\n        this._vrSupported = true;\n        // note that devices may actually be an empty array. This is fine;\n        // we expect this._vrDisplay to be undefined in this case.\n        this._vrDisplay = devices[0];\n        res({\n          vrDisplay: this._vrDisplay,\n          vrSupported: this._vrSupported\n        });\n      });\n    } else {\n      this._vrDisplay = undefined;\n      this._vrSupported = false;\n      res({\n        vrDisplay: this._vrDisplay,\n        vrSupported: this._vrSupported\n      });\n    }\n  });\n};\nEngine.prototype.enableVR = function (options) {\n  if (this._vrDisplay && !this._vrDisplay.isPresenting) {\n    const onResolved = () => {\n      this.onVRRequestPresentComplete.notifyObservers(true);\n      this._onVRFullScreenTriggered();\n    };\n    const onRejected = () => {\n      this.onVRRequestPresentComplete.notifyObservers(false);\n    };\n    this.onVRRequestPresentStart.notifyObservers(this);\n    const presentationAttributes = {\n      highRefreshRate: this.vrPresentationAttributes ? this.vrPresentationAttributes.highRefreshRate : false,\n      foveationLevel: this.vrPresentationAttributes ? this.vrPresentationAttributes.foveationLevel : 1,\n      multiview: (this.getCaps().multiview || this.getCaps().oculusMultiview) && options.useMultiview\n    };\n    this._vrDisplay.requestPresent([{\n      source: this.getRenderingCanvas(),\n      attributes: presentationAttributes,\n      ...presentationAttributes\n    }]).then(onResolved).catch(onRejected);\n  }\n};\nEngine.prototype._onVRFullScreenTriggered = function () {\n  if (this._vrDisplay && this._vrDisplay.isPresenting) {\n    //get the old size before we change\n    this._oldSize = new Size(this.getRenderWidth(), this.getRenderHeight());\n    this._oldHardwareScaleFactor = this.getHardwareScalingLevel();\n    //get the width and height, change the render size\n    const leftEye = this._vrDisplay.getEyeParameters(\"left\");\n    this.setHardwareScalingLevel(1);\n    this.setSize(leftEye.renderWidth * 2, leftEye.renderHeight);\n  } else {\n    this.setHardwareScalingLevel(this._oldHardwareScaleFactor);\n    this.setSize(this._oldSize.width, this._oldSize.height);\n  }\n};\nEngine.prototype.disableVR = function () {\n  if (this._vrDisplay && this._vrDisplay.isPresenting) {\n    this._vrDisplay.exitPresent().then(() => this._onVRFullScreenTriggered()).catch(() => this._onVRFullScreenTriggered());\n  }\n  if (IsWindowObjectExist()) {\n    window.removeEventListener(\"vrdisplaypointerrestricted\", this._onVRDisplayPointerRestricted);\n    window.removeEventListener(\"vrdisplaypointerunrestricted\", this._onVRDisplayPointerUnrestricted);\n    if (this._onVrDisplayConnect) {\n      window.removeEventListener(\"vrdisplayconnect\", this._onVrDisplayConnect);\n      if (this._onVrDisplayDisconnect) {\n        window.removeEventListener(\"vrdisplaydisconnect\", this._onVrDisplayDisconnect);\n      }\n      if (this._onVrDisplayPresentChange) {\n        window.removeEventListener(\"vrdisplaypresentchange\", this._onVrDisplayPresentChange);\n      }\n      this._onVrDisplayConnect = null;\n      this._onVrDisplayDisconnect = null;\n    }\n  }\n};\nEngine.prototype._connectVREvents = function (canvas, document) {\n  this._onVRDisplayPointerRestricted = () => {\n    if (canvas) {\n      canvas.requestPointerLock();\n    }\n  };\n  this._onVRDisplayPointerUnrestricted = () => {\n    // Edge fix - for some reason document is not present and this is window\n    if (!document) {\n      const hostWindow = this.getHostWindow();\n      if (hostWindow.document && hostWindow.document.exitPointerLock) {\n        hostWindow.document.exitPointerLock();\n      }\n      return;\n    }\n    if (!document.exitPointerLock) {\n      return;\n    }\n    document.exitPointerLock();\n  };\n  if (IsWindowObjectExist()) {\n    const hostWindow = this.getHostWindow();\n    hostWindow.addEventListener(\"vrdisplaypointerrestricted\", this._onVRDisplayPointerRestricted, false);\n    hostWindow.addEventListener(\"vrdisplaypointerunrestricted\", this._onVRDisplayPointerUnrestricted, false);\n  }\n};\nEngine.prototype._submitVRFrame = function () {\n  // Submit frame to the vr device, if enabled\n  if (this._vrDisplay && this._vrDisplay.isPresenting) {\n    // TODO: We should only submit the frame if we read frameData successfully.\n    try {\n      this._vrDisplay.submitFrame();\n    } catch (e) {\n      Tools.Warn(\"webVR submitFrame has had an unexpected failure: \" + e);\n    }\n  }\n};\nEngine.prototype.isVRPresenting = function () {\n  return this._vrDisplay && this._vrDisplay.isPresenting;\n};\nEngine.prototype._requestVRFrame = function () {\n  this._frameHandler = Engine.QueueNewFrame(this._boundRenderFunction, this._vrDisplay);\n};","map":{"version":3,"mappings":"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","names":["Engine","Size","Observable","Tools","IsWindowObjectExist","Object","defineProperty","prototype","get","_vrExclusivePointerMode","enumerable","configurable","_prepareVRComponent","_vrSupported","onVRDisplayChangedObservable","onVRRequestPresentComplete","onVRRequestPresentStart","isVRDevicePresent","_vrDisplay","getVRDevice","initWebVR","initWebVRAsync","notifyObservers","eventArgs","vrDisplay","vrSupported","_webVRInitPromise","Promise","res","_onVrDisplayConnect","event","display","_onVrDisplayDisconnect","cancelAnimationFrame","_frameHandler","undefined","QueueNewFrame","_boundRenderFunction","_onVrDisplayPresentChange","isPresenting","hostWindow","getHostWindow","addEventListener","_getVRDisplaysAsync","then","navigator","getVRDisplays","devices","enableVR","options","onResolved","_onVRFullScreenTriggered","onRejected","presentationAttributes","highRefreshRate","vrPresentationAttributes","foveationLevel","multiview","getCaps","oculusMultiview","useMultiview","requestPresent","source","getRenderingCanvas","attributes","catch","_oldSize","getRenderWidth","getRenderHeight","_oldHardwareScaleFactor","getHardwareScalingLevel","leftEye","getEyeParameters","setHardwareScalingLevel","setSize","renderWidth","renderHeight","width","height","disableVR","exitPresent","window","removeEventListener","_onVRDisplayPointerRestricted","_onVRDisplayPointerUnrestricted","_connectVREvents","canvas","document","requestPointerLock","exitPointerLock","_submitVRFrame","submitFrame","e","Warn","isVRPresenting","_requestVRFrame"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/Extensions/engine.webVR.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport type { IDisplayChangedEventArgs } from \"../../Engines/engine\";\r\nimport { Engine } from \"../../Engines/engine\";\r\nimport { Size } from \"../../Maths/math.size\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport { IsWindowObjectExist } from \"../../Misc/domManagement\";\r\nimport type { WebVROptions } from \"../../Cameras/VR/webVRCamera\";\r\n\r\n/**\r\n * Interface used to define additional presentation attributes\r\n */\r\nexport interface IVRPresentationAttributes {\r\n    /**\r\n     * Defines a boolean indicating that we want to get 72hz mode on Oculus Browser (default is off eg. 60hz)\r\n     */\r\n    highRefreshRate: boolean;\r\n    /**\r\n     * Enables foveation in VR to improve perf. 0 none, 1 low, 2 medium, 3 high (Default is 1)\r\n     */\r\n    foveationLevel: number;\r\n}\r\n\r\ndeclare module \"../../Engines/engine\" {\r\n    export interface Engine {\r\n        /** @internal */\r\n        _vrDisplay: any;\r\n        /** @internal */\r\n        _vrSupported: boolean;\r\n        /** @internal */\r\n        _oldSize: Size;\r\n        /** @internal */\r\n        _oldHardwareScaleFactor: number;\r\n        /** @internal */\r\n        _vrExclusivePointerMode: boolean;\r\n        /** @internal */\r\n        _webVRInitPromise: Promise<IDisplayChangedEventArgs>;\r\n\r\n        /** @internal */\r\n        _onVRDisplayPointerRestricted: () => void;\r\n        /** @internal */\r\n        _onVRDisplayPointerUnrestricted: () => void;\r\n\r\n        /** @internal */\r\n        _onVrDisplayConnect: Nullable<(display: any) => void>;\r\n        /** @internal */\r\n        _onVrDisplayDisconnect: Nullable<() => void>;\r\n        /** @internal */\r\n        _onVrDisplayPresentChange: Nullable<() => void>;\r\n\r\n        /**\r\n         * Observable signaled when VR display mode changes\r\n         */\r\n        onVRDisplayChangedObservable: Observable<IDisplayChangedEventArgs>;\r\n        /**\r\n         * Observable signaled when VR request present is complete\r\n         */\r\n        onVRRequestPresentComplete: Observable<boolean>;\r\n        /**\r\n         * Observable signaled when VR request present starts\r\n         */\r\n        onVRRequestPresentStart: Observable<Engine>;\r\n\r\n        /**\r\n         * Gets a boolean indicating that the engine is currently in VR exclusive mode for the pointers\r\n         * @see https://docs.microsoft.com/en-us/microsoft-edge/webvr/essentials#mouse-input\r\n         */\r\n        isInVRExclusivePointerMode: boolean;\r\n\r\n        /**\r\n         * Gets a boolean indicating if a webVR device was detected\r\n         * @returns true if a webVR device was detected\r\n         */\r\n        isVRDevicePresent(): boolean;\r\n\r\n        /**\r\n         * Gets the current webVR device\r\n         * @returns the current webVR device (or null)\r\n         */\r\n        getVRDevice(): any;\r\n\r\n        /**\r\n         * Initializes a webVR display and starts listening to display change events\r\n         * The onVRDisplayChangedObservable will be notified upon these changes\r\n         * @returns A promise containing a VRDisplay and if vr is supported\r\n         */\r\n        initWebVRAsync(): Promise<IDisplayChangedEventArgs>;\r\n\r\n        /** @internal */\r\n        _getVRDisplaysAsync(): Promise<IDisplayChangedEventArgs>;\r\n\r\n        /**\r\n         * Gets or sets the presentation attributes used to configure VR rendering\r\n         */\r\n        vrPresentationAttributes?: IVRPresentationAttributes;\r\n\r\n        /**\r\n         * Call this function to switch to webVR mode\r\n         * Will do nothing if webVR is not supported or if there is no webVR device\r\n         * @param options the webvr options provided to the camera. mainly used for multiview\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/webVRCamera\r\n         */\r\n        enableVR(options: WebVROptions): void;\r\n\r\n        /** @internal */\r\n        _onVRFullScreenTriggered(): void;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Engine.prototype, \"isInVRExclusivePointerMode\", {\r\n    get: function (this: Engine) {\r\n        return this._vrExclusivePointerMode;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nEngine.prototype._prepareVRComponent = function () {\r\n    this._vrSupported = false;\r\n    this._vrExclusivePointerMode = false;\r\n    this.onVRDisplayChangedObservable = new Observable<IDisplayChangedEventArgs>();\r\n    this.onVRRequestPresentComplete = new Observable<boolean>();\r\n    this.onVRRequestPresentStart = new Observable<Engine>();\r\n};\r\n\r\nEngine.prototype.isVRDevicePresent = function () {\r\n    return !!this._vrDisplay;\r\n};\r\n\r\nEngine.prototype.getVRDevice = function (): any {\r\n    return this._vrDisplay;\r\n};\r\n\r\nEngine.prototype.initWebVR = function (): Observable<IDisplayChangedEventArgs> {\r\n    this.initWebVRAsync();\r\n    return this.onVRDisplayChangedObservable;\r\n};\r\n\r\nEngine.prototype.initWebVRAsync = function (): Promise<IDisplayChangedEventArgs> {\r\n    const notifyObservers = () => {\r\n        const eventArgs = {\r\n            vrDisplay: this._vrDisplay,\r\n            vrSupported: this._vrSupported,\r\n        };\r\n        this.onVRDisplayChangedObservable.notifyObservers(eventArgs);\r\n        this._webVRInitPromise = new Promise((res) => {\r\n            res(eventArgs);\r\n        });\r\n    };\r\n\r\n    if (!this._onVrDisplayConnect) {\r\n        this._onVrDisplayConnect = (event) => {\r\n            this._vrDisplay = event.display;\r\n            notifyObservers();\r\n        };\r\n        this._onVrDisplayDisconnect = () => {\r\n            this._vrDisplay.cancelAnimationFrame(this._frameHandler);\r\n            this._vrDisplay = undefined;\r\n            this._frameHandler = Engine.QueueNewFrame(this._boundRenderFunction);\r\n            notifyObservers();\r\n        };\r\n        this._onVrDisplayPresentChange = () => {\r\n            this._vrExclusivePointerMode = this._vrDisplay && this._vrDisplay.isPresenting;\r\n        };\r\n        const hostWindow = this.getHostWindow();\r\n        if (hostWindow) {\r\n            hostWindow.addEventListener(\"vrdisplayconnect\", this._onVrDisplayConnect);\r\n            hostWindow.addEventListener(\"vrdisplaydisconnect\", this._onVrDisplayDisconnect);\r\n            hostWindow.addEventListener(\"vrdisplaypresentchange\", this._onVrDisplayPresentChange);\r\n        }\r\n    }\r\n    this._webVRInitPromise = this._webVRInitPromise || this._getVRDisplaysAsync();\r\n    this._webVRInitPromise.then(notifyObservers);\r\n    return this._webVRInitPromise;\r\n};\r\n\r\nEngine.prototype._getVRDisplaysAsync = function (): Promise<IDisplayChangedEventArgs> {\r\n    return new Promise((res) => {\r\n        if (navigator.getVRDisplays) {\r\n            navigator.getVRDisplays().then((devices: Array<any>) => {\r\n                this._vrSupported = true;\r\n                // note that devices may actually be an empty array. This is fine;\r\n                // we expect this._vrDisplay to be undefined in this case.\r\n                this._vrDisplay = devices[0];\r\n                res({\r\n                    vrDisplay: this._vrDisplay,\r\n                    vrSupported: this._vrSupported,\r\n                });\r\n            });\r\n        } else {\r\n            this._vrDisplay = undefined;\r\n            this._vrSupported = false;\r\n            res({\r\n                vrDisplay: this._vrDisplay,\r\n                vrSupported: this._vrSupported,\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nEngine.prototype.enableVR = function (options: WebVROptions) {\r\n    if (this._vrDisplay && !this._vrDisplay.isPresenting) {\r\n        const onResolved = () => {\r\n            this.onVRRequestPresentComplete.notifyObservers(true);\r\n            this._onVRFullScreenTriggered();\r\n        };\r\n        const onRejected = () => {\r\n            this.onVRRequestPresentComplete.notifyObservers(false);\r\n        };\r\n\r\n        this.onVRRequestPresentStart.notifyObservers(this);\r\n\r\n        const presentationAttributes = {\r\n            highRefreshRate: this.vrPresentationAttributes ? this.vrPresentationAttributes.highRefreshRate : false,\r\n            foveationLevel: this.vrPresentationAttributes ? this.vrPresentationAttributes.foveationLevel : 1,\r\n            multiview: (this.getCaps().multiview || this.getCaps().oculusMultiview) && options.useMultiview,\r\n        };\r\n\r\n        this._vrDisplay\r\n            .requestPresent([\r\n                {\r\n                    source: this.getRenderingCanvas(),\r\n                    attributes: presentationAttributes,\r\n                    ...presentationAttributes,\r\n                },\r\n            ])\r\n            .then(onResolved)\r\n            .catch(onRejected);\r\n    }\r\n};\r\n\r\nEngine.prototype._onVRFullScreenTriggered = function () {\r\n    if (this._vrDisplay && this._vrDisplay.isPresenting) {\r\n        //get the old size before we change\r\n        this._oldSize = new Size(this.getRenderWidth(), this.getRenderHeight());\r\n        this._oldHardwareScaleFactor = this.getHardwareScalingLevel();\r\n\r\n        //get the width and height, change the render size\r\n        const leftEye = this._vrDisplay.getEyeParameters(\"left\");\r\n        this.setHardwareScalingLevel(1);\r\n        this.setSize(leftEye.renderWidth * 2, leftEye.renderHeight);\r\n    } else {\r\n        this.setHardwareScalingLevel(this._oldHardwareScaleFactor);\r\n        this.setSize(this._oldSize.width, this._oldSize.height);\r\n    }\r\n};\r\n\r\nEngine.prototype.disableVR = function () {\r\n    if (this._vrDisplay && this._vrDisplay.isPresenting) {\r\n        this._vrDisplay\r\n            .exitPresent()\r\n            .then(() => this._onVRFullScreenTriggered())\r\n            .catch(() => this._onVRFullScreenTriggered());\r\n    }\r\n\r\n    if (IsWindowObjectExist()) {\r\n        window.removeEventListener(\"vrdisplaypointerrestricted\", this._onVRDisplayPointerRestricted);\r\n        window.removeEventListener(\"vrdisplaypointerunrestricted\", this._onVRDisplayPointerUnrestricted);\r\n\r\n        if (this._onVrDisplayConnect) {\r\n            window.removeEventListener(\"vrdisplayconnect\", this._onVrDisplayConnect);\r\n            if (this._onVrDisplayDisconnect) {\r\n                window.removeEventListener(\"vrdisplaydisconnect\", this._onVrDisplayDisconnect);\r\n            }\r\n\r\n            if (this._onVrDisplayPresentChange) {\r\n                window.removeEventListener(\"vrdisplaypresentchange\", this._onVrDisplayPresentChange);\r\n            }\r\n            this._onVrDisplayConnect = null;\r\n            this._onVrDisplayDisconnect = null;\r\n        }\r\n    }\r\n};\r\n\r\nEngine.prototype._connectVREvents = function (canvas?: HTMLCanvasElement, document?: any) {\r\n    this._onVRDisplayPointerRestricted = () => {\r\n        if (canvas) {\r\n            canvas.requestPointerLock();\r\n        }\r\n    };\r\n\r\n    this._onVRDisplayPointerUnrestricted = () => {\r\n        // Edge fix - for some reason document is not present and this is window\r\n        if (!document) {\r\n            const hostWindow = this.getHostWindow()!;\r\n            if (hostWindow.document && hostWindow.document.exitPointerLock) {\r\n                hostWindow.document.exitPointerLock();\r\n            }\r\n            return;\r\n        }\r\n        if (!document.exitPointerLock) {\r\n            return;\r\n        }\r\n        document.exitPointerLock();\r\n    };\r\n\r\n    if (IsWindowObjectExist()) {\r\n        const hostWindow = this.getHostWindow()!;\r\n        hostWindow.addEventListener(\"vrdisplaypointerrestricted\", this._onVRDisplayPointerRestricted, false);\r\n        hostWindow.addEventListener(\"vrdisplaypointerunrestricted\", this._onVRDisplayPointerUnrestricted, false);\r\n    }\r\n};\r\n\r\nEngine.prototype._submitVRFrame = function () {\r\n    // Submit frame to the vr device, if enabled\r\n    if (this._vrDisplay && this._vrDisplay.isPresenting) {\r\n        // TODO: We should only submit the frame if we read frameData successfully.\r\n        try {\r\n            this._vrDisplay.submitFrame();\r\n        } catch (e) {\r\n            Tools.Warn(\"webVR submitFrame has had an unexpected failure: \" + e);\r\n        }\r\n    }\r\n};\r\n\r\nEngine.prototype.isVRPresenting = function () {\r\n    return this._vrDisplay && this._vrDisplay.isPresenting;\r\n};\r\n\r\nEngine.prototype._requestVRFrame = function () {\r\n    this._frameHandler = Engine.QueueNewFrame(this._boundRenderFunction, this._vrDisplay);\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}