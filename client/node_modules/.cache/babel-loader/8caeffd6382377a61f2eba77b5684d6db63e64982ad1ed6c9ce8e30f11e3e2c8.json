{"ast":null,"code":"import { __decorate } from \"../../../tslib.es6.js\";\nimport { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { Vector2 } from \"../../../Maths/math.vector.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../nodeMaterialDecorator.js\";\n/**\n * Block used to remap a float from a range to a new one\n */\nexport class RemapBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new RemapBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Neutral);\n    /**\n     * Gets or sets the source range\n     */\n    this.sourceRange = new Vector2(-1, 1);\n    /**\n     * Gets or sets the target range\n     */\n    this.targetRange = new Vector2(0, 1);\n    this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n    this.registerInput(\"sourceMin\", NodeMaterialBlockConnectionPointTypes.Float, true);\n    this.registerInput(\"sourceMax\", NodeMaterialBlockConnectionPointTypes.Float, true);\n    this.registerInput(\"targetMin\", NodeMaterialBlockConnectionPointTypes.Float, true);\n    this.registerInput(\"targetMax\", NodeMaterialBlockConnectionPointTypes.Float, true);\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n    this._outputs[0]._typeConnectionSource = this._inputs[0];\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"RemapBlock\";\n  }\n  /**\n   * Gets the input component\n   */\n  get input() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the source min input component\n   */\n  get sourceMin() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the source max input component\n   */\n  get sourceMax() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the target min input component\n   */\n  get targetMin() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the target max input component\n   */\n  get targetMax() {\n    return this._inputs[4];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const output = this._outputs[0];\n    const sourceMin = this.sourceMin.isConnected ? this.sourceMin.associatedVariableName : this._writeFloat(this.sourceRange.x);\n    const sourceMax = this.sourceMax.isConnected ? this.sourceMax.associatedVariableName : this._writeFloat(this.sourceRange.y);\n    const targetMin = this.targetMin.isConnected ? this.targetMin.associatedVariableName : this._writeFloat(this.targetRange.x);\n    const targetMax = this.targetMax.isConnected ? this.targetMax.associatedVariableName : this._writeFloat(this.targetRange.y);\n    state.compilationString += this._declareOutput(output, state) + ` = ${targetMin} + (${this._inputs[0].associatedVariableName} - ${sourceMin}) * (${targetMax} - ${targetMin}) / (${sourceMax} - ${sourceMin});\\r\\n`;\n    return this;\n  }\n  _dumpPropertiesCode() {\n    let codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.sourceRange = new BABYLON.Vector2(${this.sourceRange.x}, ${this.sourceRange.y});\\r\\n`;\n    codeString += `${this._codeVariableName}.targetRange = new BABYLON.Vector2(${this.targetRange.x}, ${this.targetRange.y});\\r\\n`;\n    return codeString;\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.sourceRange = this.sourceRange.asArray();\n    serializationObject.targetRange = this.targetRange.asArray();\n    return serializationObject;\n  }\n  _deserialize(serializationObject, scene, rootUrl) {\n    super._deserialize(serializationObject, scene, rootUrl);\n    this.sourceRange = Vector2.FromArray(serializationObject.sourceRange);\n    this.targetRange = Vector2.FromArray(serializationObject.targetRange);\n  }\n}\n__decorate([editableInPropertyPage(\"From\", PropertyTypeForEdition.Vector2)], RemapBlock.prototype, \"sourceRange\", void 0);\n__decorate([editableInPropertyPage(\"To\", PropertyTypeForEdition.Vector2)], RemapBlock.prototype, \"targetRange\", void 0);\nRegisterClass(\"BABYLON.RemapBlock\", RemapBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","Vector2","editableInPropertyPage","PropertyTypeForEdition","RemapBlock","constructor","name","Neutral","registerInput","AutoDetect","Float","registerOutput","BasedOnInput","_outputs","_typeConnectionSource","_inputs","getClassName","input","sourceMin","sourceMax","targetMin","targetMax","output","_buildBlock","state","isConnected","associatedVariableName","_writeFloat","sourceRange","x","y","targetRange","compilationString","_declareOutput","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","asArray","_deserialize","scene","rootUrl","FromArray","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Node/Blocks/remapBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { Vector2 } from \"../../../Maths/math.vector\";\r\nimport type { Scene } from \"../../../scene\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../nodeMaterialDecorator\";\r\n/**\r\n * Block used to remap a float from a range to a new one\r\n */\r\nexport class RemapBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Gets or sets the source range\r\n     */\r\n    @editableInPropertyPage(\"From\", PropertyTypeForEdition.Vector2)\r\n    public sourceRange = new Vector2(-1, 1);\r\n\r\n    /**\r\n     * Gets or sets the target range\r\n     */\r\n    @editableInPropertyPage(\"To\", PropertyTypeForEdition.Vector2)\r\n    public targetRange = new Vector2(0, 1);\r\n\r\n    /**\r\n     * Creates a new RemapBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"sourceMin\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"sourceMax\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"targetMin\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"targetMax\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"RemapBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the source min input component\r\n     */\r\n    public get sourceMin(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the source max input component\r\n     */\r\n    public get sourceMax(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the target min input component\r\n     */\r\n    public get targetMin(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the target max input component\r\n     */\r\n    public get targetMax(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const output = this._outputs[0];\r\n\r\n        const sourceMin = this.sourceMin.isConnected ? this.sourceMin.associatedVariableName : this._writeFloat(this.sourceRange.x);\r\n        const sourceMax = this.sourceMax.isConnected ? this.sourceMax.associatedVariableName : this._writeFloat(this.sourceRange.y);\r\n\r\n        const targetMin = this.targetMin.isConnected ? this.targetMin.associatedVariableName : this._writeFloat(this.targetRange.x);\r\n        const targetMax = this.targetMax.isConnected ? this.targetMax.associatedVariableName : this._writeFloat(this.targetRange.y);\r\n\r\n        state.compilationString +=\r\n            this._declareOutput(output, state) +\r\n            ` = ${targetMin} + (${this._inputs[0].associatedVariableName} - ${sourceMin}) * (${targetMax} - ${targetMin}) / (${sourceMax} - ${sourceMin});\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.sourceRange = new BABYLON.Vector2(${this.sourceRange.x}, ${this.sourceRange.y});\\r\\n`;\r\n\r\n        codeString += `${this._codeVariableName}.targetRange = new BABYLON.Vector2(${this.targetRange.x}, ${this.targetRange.y});\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.sourceRange = this.sourceRange.asArray();\r\n        serializationObject.targetRange = this.targetRange.asArray();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.sourceRange = Vector2.FromArray(serializationObject.sourceRange);\r\n        this.targetRange = Vector2.FromArray(serializationObject.targetRange);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.RemapBlock\", RemapBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}