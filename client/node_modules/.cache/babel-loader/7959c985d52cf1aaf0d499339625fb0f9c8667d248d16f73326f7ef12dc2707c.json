{"ast":null,"code":"import { WebGPUEngine } from \"../../webgpuEngine.js\";\nimport * as WebGPUConstants from \"../webgpuConstants.js\";\nWebGPUEngine.prototype.createUniformBuffer = function (elements) {\n  let view;\n  if (elements instanceof Array) {\n    view = new Float32Array(elements);\n  } else {\n    view = elements;\n  }\n  const dataBuffer = this._bufferManager.createBuffer(view, WebGPUConstants.BufferUsage.Uniform | WebGPUConstants.BufferUsage.CopyDst);\n  return dataBuffer;\n};\nWebGPUEngine.prototype.createDynamicUniformBuffer = function (elements) {\n  return this.createUniformBuffer(elements);\n};\nWebGPUEngine.prototype.updateUniformBuffer = function (uniformBuffer, elements, offset, count) {\n  if (offset === undefined) {\n    offset = 0;\n  }\n  const dataBuffer = uniformBuffer;\n  let view;\n  if (count === undefined) {\n    if (elements instanceof Float32Array) {\n      view = elements;\n    } else {\n      view = new Float32Array(elements);\n    }\n    count = view.byteLength;\n  } else {\n    if (elements instanceof Float32Array) {\n      view = elements;\n    } else {\n      view = new Float32Array(elements);\n    }\n  }\n  this._bufferManager.setSubData(dataBuffer, offset, view, 0, count);\n};\nWebGPUEngine.prototype.bindUniformBufferBase = function (buffer, location, name) {\n  this._currentDrawContext.setBuffer(name, buffer);\n};\nWebGPUEngine.prototype.bindUniformBlock = function () {};","map":{"version":3,"mappings":"AAGA,SAASA,YAAY,QAAQ,uBAAqB;AAClD,OAAO,KAAKC,eAAe,MAAM,uBAAqB;AAEtDD,YAAY,CAACE,SAAS,CAACC,mBAAmB,GAAG,UAAUC,QAAoB;EACvE,IAAIC,IAAkB;EACtB,IAAID,QAAQ,YAAYE,KAAK,EAAE;IAC3BD,IAAI,GAAG,IAAIE,YAAY,CAACH,QAAQ,CAAC;GACpC,MAAM;IACHC,IAAI,GAAGD,QAAQ;;EAGnB,MAAMI,UAAU,GAAG,IAAI,CAACC,cAAc,CAACC,YAAY,CAACL,IAAI,EAAEJ,eAAe,CAACU,WAAW,CAACC,OAAO,GAAGX,eAAe,CAACU,WAAW,CAACE,OAAO,CAAC;EACpI,OAAOL,UAAU;AACrB,CAAC;AAEDR,YAAY,CAACE,SAAS,CAACY,0BAA0B,GAAG,UAAUV,QAAoB;EAC9E,OAAO,IAAI,CAACD,mBAAmB,CAACC,QAAQ,CAAC;AAC7C,CAAC;AAEDJ,YAAY,CAACE,SAAS,CAACa,mBAAmB,GAAG,UAAUC,aAAyB,EAAEZ,QAAoB,EAAEa,MAAe,EAAEC,KAAc;EACnI,IAAID,MAAM,KAAKE,SAAS,EAAE;IACtBF,MAAM,GAAG,CAAC;;EAGd,MAAMT,UAAU,GAAGQ,aAAiC;EACpD,IAAIX,IAAkB;EACtB,IAAIa,KAAK,KAAKC,SAAS,EAAE;IACrB,IAAIf,QAAQ,YAAYG,YAAY,EAAE;MAClCF,IAAI,GAAGD,QAAQ;KAClB,MAAM;MACHC,IAAI,GAAG,IAAIE,YAAY,CAACH,QAAQ,CAAC;;IAErCc,KAAK,GAAGb,IAAI,CAACe,UAAU;GAC1B,MAAM;IACH,IAAIhB,QAAQ,YAAYG,YAAY,EAAE;MAClCF,IAAI,GAAGD,QAAQ;KAClB,MAAM;MACHC,IAAI,GAAG,IAAIE,YAAY,CAACH,QAAQ,CAAC;;;EAIzC,IAAI,CAACK,cAAc,CAACY,UAAU,CAACb,UAAU,EAAES,MAAM,EAAEZ,IAAI,EAAE,CAAC,EAAEa,KAAK,CAAC;AACtE,CAAC;AAEDlB,YAAY,CAACE,SAAS,CAACoB,qBAAqB,GAAG,UAAUC,MAAkB,EAAEC,QAAgB,EAAEC,IAAY;EACvG,IAAI,CAACC,mBAAmB,CAACC,SAAS,CAACF,IAAI,EAAEF,MAA0B,CAAC;AACxE,CAAC;AAEDvB,YAAY,CAACE,SAAS,CAAC0B,gBAAgB,GAAG,aAAmB,CAAC","names":["WebGPUEngine","WebGPUConstants","prototype","createUniformBuffer","elements","view","Array","Float32Array","dataBuffer","_bufferManager","createBuffer","BufferUsage","Uniform","CopyDst","createDynamicUniformBuffer","updateUniformBuffer","uniformBuffer","offset","count","undefined","byteLength","setSubData","bindUniformBufferBase","buffer","location","name","_currentDrawContext","setBuffer","bindUniformBlock"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/Extensions/engine.uniformBuffer.ts"],"sourcesContent":["import type { DataBuffer } from \"../../../Buffers/dataBuffer\";\r\nimport type { WebGPUDataBuffer } from \"../../../Meshes/WebGPU/webgpuDataBuffer\";\r\nimport type { FloatArray } from \"../../../types\";\r\nimport { WebGPUEngine } from \"../../webgpuEngine\";\r\nimport * as WebGPUConstants from \"../webgpuConstants\";\r\n\r\nWebGPUEngine.prototype.createUniformBuffer = function (elements: FloatArray): DataBuffer {\r\n    let view: Float32Array;\r\n    if (elements instanceof Array) {\r\n        view = new Float32Array(elements);\r\n    } else {\r\n        view = elements;\r\n    }\r\n\r\n    const dataBuffer = this._bufferManager.createBuffer(view, WebGPUConstants.BufferUsage.Uniform | WebGPUConstants.BufferUsage.CopyDst);\r\n    return dataBuffer;\r\n};\r\n\r\nWebGPUEngine.prototype.createDynamicUniformBuffer = function (elements: FloatArray): DataBuffer {\r\n    return this.createUniformBuffer(elements);\r\n};\r\n\r\nWebGPUEngine.prototype.updateUniformBuffer = function (uniformBuffer: DataBuffer, elements: FloatArray, offset?: number, count?: number): void {\r\n    if (offset === undefined) {\r\n        offset = 0;\r\n    }\r\n\r\n    const dataBuffer = uniformBuffer as WebGPUDataBuffer;\r\n    let view: Float32Array;\r\n    if (count === undefined) {\r\n        if (elements instanceof Float32Array) {\r\n            view = elements;\r\n        } else {\r\n            view = new Float32Array(elements);\r\n        }\r\n        count = view.byteLength;\r\n    } else {\r\n        if (elements instanceof Float32Array) {\r\n            view = elements;\r\n        } else {\r\n            view = new Float32Array(elements);\r\n        }\r\n    }\r\n\r\n    this._bufferManager.setSubData(dataBuffer, offset, view, 0, count);\r\n};\r\n\r\nWebGPUEngine.prototype.bindUniformBufferBase = function (buffer: DataBuffer, location: number, name: string): void {\r\n    this._currentDrawContext.setBuffer(name, buffer as WebGPUDataBuffer);\r\n};\r\n\r\nWebGPUEngine.prototype.bindUniformBlock = function (): void {};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}