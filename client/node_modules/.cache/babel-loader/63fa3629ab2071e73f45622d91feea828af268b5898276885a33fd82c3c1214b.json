{"ast":null,"code":"import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { InputBlock } from \"./Input/inputBlock.js\";\nimport \"../../../Shaders/ShadersInclude/fresnelFunction.js\";\nimport { ViewDirectionBlock } from \"./viewDirectionBlock.js\";\n/**\n * Block used to compute fresnel value\n */\nexport class FresnelBlock extends NodeMaterialBlock {\n  /**\n   * Create a new FresnelBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Neutral);\n    this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4);\n    this.registerInput(\"viewDirection\", NodeMaterialBlockConnectionPointTypes.Vector3);\n    this.registerInput(\"bias\", NodeMaterialBlockConnectionPointTypes.Float);\n    this.registerInput(\"power\", NodeMaterialBlockConnectionPointTypes.Float);\n    this.registerOutput(\"fresnel\", NodeMaterialBlockConnectionPointTypes.Float);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"FresnelBlock\";\n  }\n  /**\n   * Gets the world normal input component\n   */\n  get worldNormal() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the view direction input component\n   */\n  get viewDirection() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the bias input component\n   */\n  get bias() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the camera (or eye) position component\n   */\n  get power() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the fresnel output component\n   */\n  get fresnel() {\n    return this._outputs[0];\n  }\n  autoConfigure(material) {\n    if (!this.viewDirection.isConnected) {\n      const viewDirectionInput = new ViewDirectionBlock(\"View direction\");\n      viewDirectionInput.output.connectTo(this.viewDirection);\n      viewDirectionInput.autoConfigure(material);\n    }\n    if (!this.bias.isConnected) {\n      const biasInput = new InputBlock(\"bias\");\n      biasInput.value = 0;\n      biasInput.output.connectTo(this.bias);\n    }\n    if (!this.power.isConnected) {\n      const powerInput = new InputBlock(\"power\");\n      powerInput.value = 1;\n      powerInput.output.connectTo(this.power);\n    }\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const comments = `//${this.name}`;\n    state._emitFunctionFromInclude(\"fresnelFunction\", comments, {\n      removeIfDef: true\n    });\n    state.compilationString += this._declareOutput(this.fresnel, state) + ` = computeFresnelTerm(${this.viewDirection.associatedVariableName}.xyz, ${this.worldNormal.associatedVariableName}.xyz, ${this.bias.associatedVariableName}, ${this.power.associatedVariableName});\\r\\n`;\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.FresnelBlock\", FresnelBlock);","map":{"version":3,"mappings":"AAAA,SAASA,iBAAiB,QAAQ,yBAAuB;AACzD,SAASC,wBAAwB,QAAQ,sCAAoC;AAC7E,SAASC,qCAAqC,QAAQ,mDAAiD;AAGvG,SAASC,aAAa,QAAQ,4BAA0B;AACxD,SAASC,UAAU,QAAQ,uBAAqB;AAGhD,OAAO,oDAAkD;AACzD,SAASC,kBAAkB,QAAQ,yBAAuB;AAE1D;;;AAGA,OAAM,MAAOC,YAAa,SAAQN,iBAAiB;EAC/C;;;;EAIAO,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,EAAEP,wBAAwB,CAACQ,OAAO,CAAC;IAE7C,IAAI,CAACC,aAAa,CAAC,aAAa,EAAER,qCAAqC,CAACS,OAAO,CAAC;IAChF,IAAI,CAACD,aAAa,CAAC,eAAe,EAAER,qCAAqC,CAACU,OAAO,CAAC;IAClF,IAAI,CAACF,aAAa,CAAC,MAAM,EAAER,qCAAqC,CAACW,KAAK,CAAC;IACvE,IAAI,CAACH,aAAa,CAAC,OAAO,EAAER,qCAAqC,CAACW,KAAK,CAAC;IAExE,IAAI,CAACC,cAAc,CAAC,SAAS,EAAEZ,qCAAqC,CAACW,KAAK,CAAC;EAC/E;EAEA;;;;EAIOE,YAAY;IACf,OAAO,cAAc;EACzB;EAEA;;;EAGA,IAAWC,WAAW;IAClB,OAAO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWC,aAAa;IACpB,OAAO,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWE,IAAI;IACX,OAAO,IAAI,CAACF,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWG,KAAK;IACZ,OAAO,IAAI,CAACH,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWI,OAAO;IACd,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEOC,aAAa,CAACC,QAAsB;IACvC,IAAI,CAAC,IAAI,CAACN,aAAa,CAACO,WAAW,EAAE;MACjC,MAAMC,kBAAkB,GAAG,IAAIrB,kBAAkB,CAAC,gBAAgB,CAAC;MACnEqB,kBAAkB,CAACC,MAAM,CAACC,SAAS,CAAC,IAAI,CAACV,aAAa,CAAC;MACvDQ,kBAAkB,CAACH,aAAa,CAACC,QAAQ,CAAC;;IAG9C,IAAI,CAAC,IAAI,CAACL,IAAI,CAACM,WAAW,EAAE;MACxB,MAAMI,SAAS,GAAG,IAAIzB,UAAU,CAAC,MAAM,CAAC;MACxCyB,SAAS,CAACC,KAAK,GAAG,CAAC;MACnBD,SAAS,CAACF,MAAM,CAACC,SAAS,CAAC,IAAI,CAACT,IAAI,CAAC;;IAGzC,IAAI,CAAC,IAAI,CAACC,KAAK,CAACK,WAAW,EAAE;MACzB,MAAMM,UAAU,GAAG,IAAI3B,UAAU,CAAC,OAAO,CAAC;MAC1C2B,UAAU,CAACD,KAAK,GAAG,CAAC;MACpBC,UAAU,CAACJ,MAAM,CAACC,SAAS,CAAC,IAAI,CAACR,KAAK,CAAC;;EAE/C;EAEUY,WAAW,CAACC,KAA6B;IAC/C,KAAK,CAACD,WAAW,CAACC,KAAK,CAAC;IAExB,MAAMC,QAAQ,GAAG,KAAK,IAAI,CAAC1B,IAAI,EAAE;IAEjCyB,KAAK,CAACE,wBAAwB,CAAC,iBAAiB,EAAED,QAAQ,EAAE;MAAEE,WAAW,EAAE;IAAI,CAAE,CAAC;IAElFH,KAAK,CAACI,iBAAiB,IACnB,IAAI,CAACC,cAAc,CAAC,IAAI,CAACjB,OAAO,EAAEY,KAAK,CAAC,GACxC,yBAAyB,IAAI,CAACf,aAAa,CAACqB,sBAAsB,SAAS,IAAI,CAACvB,WAAW,CAACuB,sBAAsB,SAAS,IAAI,CAACpB,IAAI,CAACoB,sBAAsB,KAAK,IAAI,CAACnB,KAAK,CAACmB,sBAAsB,QAAQ;IAE7M,OAAO,IAAI;EACf;;AAGJpC,aAAa,CAAC,sBAAsB,EAAEG,YAAY,CAAC","names":["NodeMaterialBlock","NodeMaterialBlockTargets","NodeMaterialBlockConnectionPointTypes","RegisterClass","InputBlock","ViewDirectionBlock","FresnelBlock","constructor","name","Neutral","registerInput","Vector4","Vector3","Float","registerOutput","getClassName","worldNormal","_inputs","viewDirection","bias","power","fresnel","_outputs","autoConfigure","material","isConnected","viewDirectionInput","output","connectTo","biasInput","value","powerInput","_buildBlock","state","comments","_emitFunctionFromInclude","removeIfDef","compilationString","_declareOutput","associatedVariableName"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Node/Blocks/fresnelBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { InputBlock } from \"./Input/inputBlock\";\r\nimport type { NodeMaterial } from \"../nodeMaterial\";\r\n\r\nimport \"../../../Shaders/ShadersInclude/fresnelFunction\";\r\nimport { ViewDirectionBlock } from \"./viewDirectionBlock\";\r\n\r\n/**\r\n * Block used to compute fresnel value\r\n */\r\nexport class FresnelBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new FresnelBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"viewDirection\", NodeMaterialBlockConnectionPointTypes.Vector3);\r\n        this.registerInput(\"bias\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerInput(\"power\", NodeMaterialBlockConnectionPointTypes.Float);\r\n\r\n        this.registerOutput(\"fresnel\", NodeMaterialBlockConnectionPointTypes.Float);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"FresnelBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the world normal input component\r\n     */\r\n    public get worldNormal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the view direction input component\r\n     */\r\n    public get viewDirection(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the bias input component\r\n     */\r\n    public get bias(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the camera (or eye) position component\r\n     */\r\n    public get power(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the fresnel output component\r\n     */\r\n    public get fresnel(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.viewDirection.isConnected) {\r\n            const viewDirectionInput = new ViewDirectionBlock(\"View direction\");\r\n            viewDirectionInput.output.connectTo(this.viewDirection);\r\n            viewDirectionInput.autoConfigure(material);\r\n        }\r\n\r\n        if (!this.bias.isConnected) {\r\n            const biasInput = new InputBlock(\"bias\");\r\n            biasInput.value = 0;\r\n            biasInput.output.connectTo(this.bias);\r\n        }\r\n\r\n        if (!this.power.isConnected) {\r\n            const powerInput = new InputBlock(\"power\");\r\n            powerInput.value = 1;\r\n            powerInput.output.connectTo(this.power);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const comments = `//${this.name}`;\r\n\r\n        state._emitFunctionFromInclude(\"fresnelFunction\", comments, { removeIfDef: true });\r\n\r\n        state.compilationString +=\r\n            this._declareOutput(this.fresnel, state) +\r\n            ` = computeFresnelTerm(${this.viewDirection.associatedVariableName}.xyz, ${this.worldNormal.associatedVariableName}.xyz, ${this.bias.associatedVariableName}, ${this.power.associatedVariableName});\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.FresnelBlock\", FresnelBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}