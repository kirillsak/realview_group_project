{"ast":null,"code":"import _defineProperty from \"/Users/kirillsakharov/Desktop/clean_project/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar Scene = require(\"@babylonjs/core\").Scene;\nvar Engine = require(\"@babylonjs/core\").Engine;\nvar Vector3 = require(\"@babylonjs/core\").Vector3;\nvar HemisphericLight = require(\"@babylonjs/core\").HemisphericLight;\nvar ArcRotateCamera = require(\"@babylonjs/core\").ArcRotateCamera;\nvar StandardMaterial = require(\"@babylonjs/core\").StandardMaterial;\nvar CubeTexture = require(\"@babylonjs/core\").CubeTexture;\nvar Ray = require(\"@babylonjs/core\").Ray;\nvar RayHelper = require(\"@babylonjs/core\").RayHelper;\nvar WebXRDefaultExperience = require(\"@babylonjs/core\").WebXRDefaultExperience;\nvar EnvironmentHelper = require(\"@babylonjs/core\").EnvironmentHelper;\nvar MeshBuilder = require(\"@babylonjs/core\").MeshBuilder;\nvar Color3 = require(\"@babylonjs/core\").Color3;\nrequire(\"@babylonjs/core/Materials/Textures/Loaders\");\nrequire(\"@babylonjs/core/Materials/Node/Blocks\");\nrequire(\"@babylonjs/loaders\");\nexport class mainScene {\n  constructor(canvas) {\n    _defineProperty(this, \"scene\", void 0);\n    _defineProperty(this, \"engine\", void 0);\n    this.engine = new Engine(canvas, true);\n    this.scene = this.CreateScene();\n    const hemiLight = new HemisphericLight(\"hemiLight\", new Vector3(0, 1, 0), this.scene);\n    hemiLight.intensity = 0.5;\n    const camera = new ArcRotateCamera(\"Camera\", -(Math.PI / 4) * 3, Math.PI / 4, 10, new Vector3(0, 0, 0), this.scene);\n    camera.attachControl(true);\n    this.initXR();\n    this.engine.runRenderLoop(() => {\n      this.scene.render();\n    });\n  }\n  CreateScene() {\n    const scene = new Scene(this.engine);\n    return scene;\n  }\n  async initXR() {\n    const envTex = CubeTexture.CreateFromPrefilteredData(\"./environment/environment.env\", this.scene);\n    const envHelper = new EnvironmentHelper({\n      groundOpacity: 3\n    }, this.scene);\n    envHelper.skybox?.dispose();\n    envHelper.ground.position.y = -1.1;\n    envHelper.ground.isPickable = false;\n    const sphereD = 1.0;\n    const sphere = MeshBuilder.CreateSphere(\"Sphere\", {\n      segments: 16,\n      diameter: sphereD\n    }, this.scene);\n    sphere.position.x = 0;\n    sphere.position.y = sphereD * 2;\n    sphere.position.z = 0;\n    sphere.isPickable = true;\n    const rMat = new StandardMaterial(\"matR\", this.scene);\n    rMat.diffuseColor = new Color3(1.0, 0, 0);\n    sphere.material = rMat;\n    this.scene.createDefaultSkybox(envTex, true);\n    this.scene.environmentIntensity = 0.5;\n    const xr = await WebXRDefaultExperience.CreateAsync(this.scene, {\n      floorMeshes: [envHelper.ground],\n      optionalFeatures: true\n    });\n    const tmpRay = new Ray(new Vector3(), new Vector3(), 3);\n    const tmpRay2 = new Vector3(new Vector3(), new Vector3(), 3);\n    const tmpRay3 = new Vector3(new Vector3(), new Vector3(), 3);\n    const rayHelper = new RayHelper(tmpRay);\n    rayHelper.show(this.scene);\n    const rayHelper2 = new RayHelper(tmpRay2);\n    rayHelper2.show(this.scene);\n    const rayHelper3 = new RayHelper(tmpRay3);\n    rayHelper3.show(this.scene);\n    let hit;\n    let tmpMesh;\n    xr.input.onControllerAddedObservable.add(controller => {\n      controller.onMotionControllerInitObservable.add(motionController => {\n        if (motionController.handness === \"right\") {\n          const xr_ids = motionController.getComponentIds();\n          const triggerComponent = motionController.getComponent(xr_ids[0]);\n          triggerComponent.onButtonStateChangedObservable.add(() => {\n            if (triggerComponent.value > 0.5) {\n              controller.getWorldPointerRayToRef(tmpRay, false);\n              hit = this.scene.pickWithRay(tmpRay);\n              if (hit) {\n                if (hit.pickedMesh !== undefined) {\n                  if (hit.pickedMesh) {\n                    tmpMesh = hit.pickedMesh;\n                    console.log(\"name:\" + hit.pickedMesh.name);\n                    tmpMesh.setParent(motionController.rootMesh);\n                  }\n                }\n              }\n            } else if (triggerComponent.value < 0.5) {\n              if (tmpMesh != undefined) {\n                tmpMesh.setParent(null);\n              }\n            }\n          });\n          const abuttonComponent = motionController.getComponent(xr_ids[3]);\n          abuttonComponent.onButtonStateChangedObservable.add(() => {\n            if (abuttonComponent.pressed) {\n              controller.getWorldPointerRayToRef(tmpRay2, false);\n              hit = this.scene.pickWithRay(tmpRay2);\n              if (hit && hit.pickedMesh) {\n                if (hit.pickedMesh) {\n                  hit.pickedMesh.scaling.x *= 0.9;\n                  hit.pickedMesh.scaling.y *= 0.9;\n                  hit.pickedMesh.scaling.z *= 0.9;\n                }\n              }\n            }\n          });\n          const bbuttonComponent = motionController.getComponent(xr_ids[4]);\n          bbuttonComponent.onButtonStateChangedObservable.add(() => {\n            if (bbuttonComponent.pressed) {\n              controller.getWorldPointerRayToRef(tmpRay3, false);\n              hit = this.scene.pickWithRay(tmpRay3);\n              if (hit && hit.pickedMesh) {\n                if (hit.pickedMesh) {\n                  hit.pickedMesh.scaling.x *= 1.1;\n                  hit.pickedMesh.scaling.y *= 1.1;\n                  hit.pickedMesh.scaling.z *= 1.1;\n                }\n              }\n            }\n          });\n        }\n      });\n    });\n  }\n}","map":{"version":3,"names":["Scene","require","Engine","Vector3","HemisphericLight","ArcRotateCamera","StandardMaterial","CubeTexture","Ray","RayHelper","WebXRDefaultExperience","EnvironmentHelper","MeshBuilder","Color3","mainScene","constructor","canvas","engine","scene","CreateScene","hemiLight","intensity","camera","Math","PI","attachControl","initXR","runRenderLoop","render","envTex","CreateFromPrefilteredData","envHelper","groundOpacity","skybox","dispose","ground","position","y","isPickable","sphereD","sphere","CreateSphere","segments","diameter","x","z","rMat","diffuseColor","material","createDefaultSkybox","environmentIntensity","xr","CreateAsync","floorMeshes","optionalFeatures","tmpRay","tmpRay2","tmpRay3","rayHelper","show","rayHelper2","rayHelper3","hit","tmpMesh","input","onControllerAddedObservable","add","controller","onMotionControllerInitObservable","motionController","handness","xr_ids","getComponentIds","triggerComponent","getComponent","onButtonStateChangedObservable","value","getWorldPointerRayToRef","pickWithRay","pickedMesh","undefined","console","log","name","setParent","rootMesh","abuttonComponent","pressed","scaling","bbuttonComponent"],"sources":["/Users/kirillsakharov/Desktop/clean_project/client/src/mainComp/mainScene.js"],"sourcesContent":["var Scene = require(\"@babylonjs/core\").Scene;\nvar Engine = require(\"@babylonjs/core\").Engine;\nvar Vector3 = require(\"@babylonjs/core\").Vector3;\nvar HemisphericLight = require(\"@babylonjs/core\").HemisphericLight;\nvar ArcRotateCamera = require(\"@babylonjs/core\").ArcRotateCamera;\nvar StandardMaterial = require(\"@babylonjs/core\").StandardMaterial;\nvar CubeTexture = require(\"@babylonjs/core\").CubeTexture;\nvar Ray = require(\"@babylonjs/core\").Ray;\nvar RayHelper = require(\"@babylonjs/core\").RayHelper;\nvar WebXRDefaultExperience = require(\"@babylonjs/core\").WebXRDefaultExperience;\nvar EnvironmentHelper = require(\"@babylonjs/core\").EnvironmentHelper;\nvar MeshBuilder = require(\"@babylonjs/core\").MeshBuilder;\nvar Color3 = require(\"@babylonjs/core\").Color3;\n\nrequire(\"@babylonjs/core/Materials/Textures/Loaders\");\nrequire(\"@babylonjs/core/Materials/Node/Blocks\");\nrequire(\"@babylonjs/loaders\");\n\nexport class mainScene {\n  scene;\n  engine;\n  constructor(canvas) {\n    this.engine = new Engine(canvas, true);\n    this.scene = this.CreateScene();\n\n    const hemiLight = new HemisphericLight(\n      \"hemiLight\",\n      new Vector3(0, 1, 0),\n      this.scene\n    );\n    hemiLight.intensity = 0.5;\n\n    const camera = new ArcRotateCamera(\n      \"Camera\",\n      -(Math.PI / 4) * 3,\n      Math.PI / 4,\n      10,\n      new Vector3(0, 0, 0),\n      this.scene\n    );\n    camera.attachControl(true);\n\n    this.initXR();\n\n    this.engine.runRenderLoop(() => {\n      this.scene.render();\n    });\n  }\n\n  CreateScene() {\n    const scene = new Scene(this.engine);\n    return scene;\n  }\n\n  async initXR() {\n    const envTex = CubeTexture.CreateFromPrefilteredData(\n      \"./environment/environment.env\",\n      this.scene\n    );\n    const envHelper = new EnvironmentHelper(\n      {\n        groundOpacity: 3,\n      },\n      this.scene\n    );\n\n    envHelper.skybox?.dispose();\n    envHelper.ground.position.y = -1.1;\n    envHelper.ground.isPickable = false;\n\n    const sphereD = 1.0;\n    const sphere = MeshBuilder.CreateSphere(\n      \"Sphere\",\n      { segments: 16, diameter: sphereD },\n      this.scene\n    );\n    sphere.position.x = 0;\n    sphere.position.y = sphereD * 2;\n    sphere.position.z = 0;\n    sphere.isPickable = true;\n\n    const rMat = new StandardMaterial(\"matR\", this.scene);\n    rMat.diffuseColor = new Color3(1.0, 0, 0);\n    sphere.material = rMat;\n\n    this.scene.createDefaultSkybox(envTex, true);\n\n    this.scene.environmentIntensity = 0.5;\n\n    const xr = await WebXRDefaultExperience.CreateAsync(this.scene, {\n      floorMeshes: [envHelper.ground],\n      optionalFeatures: true,\n    });\n\n    const tmpRay = new Ray(new Vector3(), new Vector3(), 3);\n    const tmpRay2 = new Vector3(new Vector3(), new Vector3(), 3);\n    const tmpRay3 = new Vector3(new Vector3(), new Vector3(), 3);\n\n    const rayHelper = new RayHelper(tmpRay);\n    rayHelper.show(this.scene);\n    const rayHelper2 = new RayHelper(tmpRay2);\n    rayHelper2.show(this.scene);\n    const rayHelper3 = new RayHelper(tmpRay3);\n    rayHelper3.show(this.scene);\n\n    let hit;\n    let tmpMesh;\n\n    xr.input.onControllerAddedObservable.add((controller) => {\n      controller.onMotionControllerInitObservable.add((motionController) => {\n        if (motionController.handness === \"right\") {\n          const xr_ids = motionController.getComponentIds();\n          const triggerComponent = motionController.getComponent(xr_ids[0]);\n          triggerComponent.onButtonStateChangedObservable.add(() => {\n            if (triggerComponent.value > 0.5) {\n              controller.getWorldPointerRayToRef(tmpRay, false);\n\n              hit = this.scene.pickWithRay(tmpRay);\n\n              if (hit) {\n                if (hit.pickedMesh !== undefined) {\n                  if (hit.pickedMesh) {\n                    tmpMesh = hit.pickedMesh;\n                    console.log(\"name:\" + hit.pickedMesh.name);\n                    tmpMesh.setParent(motionController.rootMesh);\n                  }\n                }\n              }\n            } else if (triggerComponent.value < 0.5) {\n              if (tmpMesh != undefined) {\n                tmpMesh.setParent(null);\n              }\n            }\n          });\n\n          const abuttonComponent = motionController.getComponent(xr_ids[3]);\n          abuttonComponent.onButtonStateChangedObservable.add(() => {\n            if (abuttonComponent.pressed) {\n              controller.getWorldPointerRayToRef(tmpRay2, false);\n\n              hit = this.scene.pickWithRay(tmpRay2);\n\n              if (hit && hit.pickedMesh) {\n                if (hit.pickedMesh) {\n                  hit.pickedMesh.scaling.x *= 0.9;\n                  hit.pickedMesh.scaling.y *= 0.9;\n                  hit.pickedMesh.scaling.z *= 0.9;\n                }\n              }\n            }\n          });\n\n          const bbuttonComponent = motionController.getComponent(xr_ids[4]);\n          bbuttonComponent.onButtonStateChangedObservable.add(() => {\n            if (bbuttonComponent.pressed) {\n              controller.getWorldPointerRayToRef(tmpRay3, false);\n\n              hit = this.scene.pickWithRay(tmpRay3);\n\n              if (hit && hit.pickedMesh) {\n                if (hit.pickedMesh) {\n                  hit.pickedMesh.scaling.x *= 1.1;\n                  hit.pickedMesh.scaling.y *= 1.1;\n                  hit.pickedMesh.scaling.z *= 1.1;\n                }\n              }\n            }\n          });\n        }\n      });\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}