{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { PhysicsRaycastResult } from \"../physicsRaycastResult.js\";\nimport { _WarnImport } from \"../../Misc/devTools.js\";\n/**\n * Class used to control physics engine\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\n/** @internal */\nexport class PhysicsEngine {\n  /**\n   * Creates a new Physics Engine\n   * @param gravity defines the gravity vector used by the simulation\n   * @param _physicsPlugin defines the plugin to use (CannonJS by default)\n   */\n  constructor(gravity, _physicsPlugin = PhysicsEngine.DefaultPluginFactory()) {\n    this._physicsPlugin = _physicsPlugin;\n    /** @internal */\n    this._physicsBodies = [];\n    this._subTimeStep = 0;\n    gravity = gravity || new Vector3(0, -9.807, 0);\n    this.setGravity(gravity);\n    this.setTimeStep();\n  }\n  /**\n   *\n   * @returns physics plugin version\n   */\n  getPluginVersion() {\n    return this._physicsPlugin.getPluginVersion();\n  }\n  /**\n   * Factory used to create the default physics plugin.\n   * @returns The default physics plugin\n   */\n  static DefaultPluginFactory() {\n    throw _WarnImport(\"\");\n  }\n  /**\n   * Sets the gravity vector used by the simulation\n   * @param gravity defines the gravity vector to use\n   */\n  setGravity(gravity) {\n    this.gravity = gravity;\n    this._physicsPlugin.setGravity(this.gravity);\n  }\n  /**\n   * Set the time step of the physics engine.\n   * Default is 1/60.\n   * To slow it down, enter 1/600 for example.\n   * To speed it up, 1/30\n   * @param newTimeStep defines the new timestep to apply to this world.\n   */\n  setTimeStep(newTimeStep = 1 / 60) {\n    this._physicsPlugin.setTimeStep(newTimeStep);\n  }\n  /**\n   * Get the time step of the physics engine.\n   * @returns the current time step\n   */\n  getTimeStep() {\n    return this._physicsPlugin.getTimeStep();\n  }\n  /**\n   * Set the sub time step of the physics engine.\n   * Default is 0 meaning there is no sub steps\n   * To increase physics resolution precision, set a small value (like 1 ms)\n   * @param subTimeStep defines the new sub timestep used for physics resolution.\n   */\n  setSubTimeStep(subTimeStep = 0) {\n    this._subTimeStep = subTimeStep;\n  }\n  /**\n   * Get the sub time step of the physics engine.\n   * @returns the current sub time step\n   */\n  getSubTimeStep() {\n    return this._subTimeStep;\n  }\n  /**\n   * Release all resources\n   */\n  dispose() {\n    this._physicsPlugin.dispose();\n  }\n  /**\n   * Gets the name of the current physics plugin\n   * @returns the name of the plugin\n   */\n  getPhysicsPluginName() {\n    return this._physicsPlugin.name;\n  }\n  /**\n   * Adding a new impostor for the impostor tracking.\n   * This will be done by the impostor itself.\n   * @param impostor the impostor to add\n   */\n  /**\n   * Called by the scene. No need to call it.\n   * @param delta defines the timespan between frames\n   */\n  _step(delta) {\n    if (delta > 0.1) {\n      delta = 0.1;\n    } else if (delta <= 0) {\n      delta = 1.0 / 60.0;\n    }\n    this._physicsPlugin.executeStep(delta, this._physicsBodies);\n  }\n  /**\n   *\n   * @param body\n   */\n  addBody(physicsBody) {\n    this._physicsBodies.push(physicsBody);\n  }\n  /**\n   *\n   */\n  removeBody(physicsBody) {\n    const index = this._physicsBodies.indexOf(physicsBody);\n    if (index > -1) {\n      /*const removed =*/this._physicsBodies.splice(index, 1);\n    }\n  }\n  /**\n   * Gets the current plugin used to run the simulation\n   * @returns current plugin\n   */\n  getPhysicsPlugin() {\n    return this._physicsPlugin;\n  }\n  /**\n   * Does a raycast in the physics world\n   * @param from when should the ray start?\n   * @param to when should the ray end?\n   * @param result resulting PhysicsRaycastResult\n   */\n  raycastToRef(from, to, result) {\n    this._physicsPlugin.raycast(from, to, result);\n  }\n  /**\n   * Does a raycast in the physics world\n   * @param from when should the ray start?\n   * @param to when should the ray end?\n   * @returns PhysicsRaycastResult\n   */\n  raycast(from, to) {\n    const result = new PhysicsRaycastResult();\n    this._physicsPlugin.raycast(from, to, result);\n    return result;\n  }\n}","map":{"version":3,"mappings":"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","names":["Vector3","PhysicsRaycastResult","_WarnImport","PhysicsEngine","constructor","gravity","_physicsPlugin","DefaultPluginFactory","setGravity","setTimeStep","getPluginVersion","newTimeStep","getTimeStep","setSubTimeStep","subTimeStep","_subTimeStep","getSubTimeStep","dispose","getPhysicsPluginName","name","_step","delta","executeStep","_physicsBodies","addBody","physicsBody","push","removeBody","index","indexOf","splice","getPhysicsPlugin","raycastToRef","from","to","result","raycast"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Physics/v2/physicsEngine.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { IPhysicsEngine } from \"../IPhysicsEngine\";\r\nimport type { IPhysicsEnginePluginV2 } from \"./IPhysicsEnginePlugin\";\r\nimport { PhysicsRaycastResult } from \"../physicsRaycastResult\";\r\nimport { _WarnImport } from \"../../Misc/devTools\";\r\nimport type { PhysicsBody } from \"./physicsBody\";\r\n\r\n/**\r\n * Class used to control physics engine\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\n/** @internal */\r\nexport class PhysicsEngine implements IPhysicsEngine {\r\n    /** @internal */\r\n    private _physicsBodies: Array<PhysicsBody> = [];\r\n    private _subTimeStep: number = 0;\r\n    //private _uniqueIdCounter = 0;\r\n\r\n    /**\r\n     * Gets the gravity vector used by the simulation\r\n     */\r\n    public gravity: Vector3;\r\n\r\n    /**\r\n     *\r\n     * @returns physics plugin version\r\n     */\r\n    public getPluginVersion(): number {\r\n        return this._physicsPlugin.getPluginVersion();\r\n    }\r\n    /**\r\n     * Factory used to create the default physics plugin.\r\n     * @returns The default physics plugin\r\n     */\r\n    public static DefaultPluginFactory(): IPhysicsEnginePluginV2 {\r\n        throw _WarnImport(\"\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new Physics Engine\r\n     * @param gravity defines the gravity vector used by the simulation\r\n     * @param _physicsPlugin defines the plugin to use (CannonJS by default)\r\n     */\r\n    constructor(gravity: Nullable<Vector3>, private _physicsPlugin: IPhysicsEnginePluginV2 = PhysicsEngine.DefaultPluginFactory()) {\r\n        gravity = gravity || new Vector3(0, -9.807, 0);\r\n        this.setGravity(gravity);\r\n        this.setTimeStep();\r\n    }\r\n\r\n    /**\r\n     * Sets the gravity vector used by the simulation\r\n     * @param gravity defines the gravity vector to use\r\n     */\r\n    public setGravity(gravity: Vector3): void {\r\n        this.gravity = gravity;\r\n        this._physicsPlugin.setGravity(this.gravity);\r\n    }\r\n\r\n    /**\r\n     * Set the time step of the physics engine.\r\n     * Default is 1/60.\r\n     * To slow it down, enter 1/600 for example.\r\n     * To speed it up, 1/30\r\n     * @param newTimeStep defines the new timestep to apply to this world.\r\n     */\r\n    public setTimeStep(newTimeStep: number = 1 / 60) {\r\n        this._physicsPlugin.setTimeStep(newTimeStep);\r\n    }\r\n\r\n    /**\r\n     * Get the time step of the physics engine.\r\n     * @returns the current time step\r\n     */\r\n    public getTimeStep(): number {\r\n        return this._physicsPlugin.getTimeStep();\r\n    }\r\n\r\n    /**\r\n     * Set the sub time step of the physics engine.\r\n     * Default is 0 meaning there is no sub steps\r\n     * To increase physics resolution precision, set a small value (like 1 ms)\r\n     * @param subTimeStep defines the new sub timestep used for physics resolution.\r\n     */\r\n    public setSubTimeStep(subTimeStep: number = 0) {\r\n        this._subTimeStep = subTimeStep;\r\n    }\r\n\r\n    /**\r\n     * Get the sub time step of the physics engine.\r\n     * @returns the current sub time step\r\n     */\r\n    public getSubTimeStep() {\r\n        return this._subTimeStep;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        this._physicsPlugin.dispose();\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the current physics plugin\r\n     * @returns the name of the plugin\r\n     */\r\n    public getPhysicsPluginName(): string {\r\n        return this._physicsPlugin.name;\r\n    }\r\n\r\n    /**\r\n     * Adding a new impostor for the impostor tracking.\r\n     * This will be done by the impostor itself.\r\n     * @param impostor the impostor to add\r\n     */\r\n\r\n    /**\r\n     * Called by the scene. No need to call it.\r\n     * @param delta defines the timespan between frames\r\n     */\r\n    public _step(delta: number) {\r\n        if (delta > 0.1) {\r\n            delta = 0.1;\r\n        } else if (delta <= 0) {\r\n            delta = 1.0 / 60.0;\r\n        }\r\n\r\n        this._physicsPlugin.executeStep(delta, this._physicsBodies);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param body\r\n     */\r\n    public addBody(physicsBody: PhysicsBody): void {\r\n        this._physicsBodies.push(physicsBody);\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    public removeBody(physicsBody: PhysicsBody): void {\r\n        const index = this._physicsBodies.indexOf(physicsBody);\r\n        if (index > -1) {\r\n            /*const removed =*/ this._physicsBodies.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current plugin used to run the simulation\r\n     * @returns current plugin\r\n     */\r\n    public getPhysicsPlugin(): IPhysicsEnginePluginV2 {\r\n        return this._physicsPlugin;\r\n    }\r\n\r\n    /**\r\n     * Does a raycast in the physics world\r\n     * @param from when should the ray start?\r\n     * @param to when should the ray end?\r\n     * @param result resulting PhysicsRaycastResult\r\n     */\r\n    public raycastToRef(from: Vector3, to: Vector3, result: PhysicsRaycastResult): void {\r\n        this._physicsPlugin.raycast(from, to, result);\r\n    }\r\n\r\n    /**\r\n     * Does a raycast in the physics world\r\n     * @param from when should the ray start?\r\n     * @param to when should the ray end?\r\n     * @returns PhysicsRaycastResult\r\n     */\r\n    public raycast(from: Vector3, to: Vector3): PhysicsRaycastResult {\r\n        const result = new PhysicsRaycastResult();\r\n        this._physicsPlugin.raycast(from, to, result);\r\n        return result;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}