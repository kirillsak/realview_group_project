{"ast":null,"code":"// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nconst name = \"volumetricLightScatteringPixelShader\";\nconst shader = `uniform sampler2D textureSampler;\nuniform sampler2D lightScatteringSampler;\nuniform float decay;\nuniform float exposure;\nuniform float weight;\nuniform float density;\nuniform vec2 meshPositionOnScreen;\nvarying vec2 vUV;\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\n#define CUSTOM_FRAGMENT_MAIN_BEGIN\nvec2 tc=vUV;\nvec2 deltaTexCoord=(tc-meshPositionOnScreen.xy);\ndeltaTexCoord*=1.0/float(NUM_SAMPLES)*density;\nfloat illuminationDecay=1.0;\nvec4 color=texture2D(lightScatteringSampler,tc)*0.4;\nfor(int i=0; i<NUM_SAMPLES; i++) {\ntc-=deltaTexCoord;\nvec4 dataSample=texture2D(lightScatteringSampler,tc)*0.4;\ndataSample*=illuminationDecay*weight;\ncolor+=dataSample;\nilluminationDecay*=decay;\n}\nvec4 realColor=texture2D(textureSampler,vUV);\ngl_FragColor=((vec4((vec3(color.r,color.g,color.b)*exposure),1))+(realColor*(1.5-0.4)));\n#define CUSTOM_FRAGMENT_MAIN_END\n}\n`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const volumetricLightScatteringPixelShader = {\n  name,\n  shader\n};","map":{"version":3,"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,2BAAyB;AAErD,MAAMC,IAAI,GAAG,sCAAsC;AACnD,MAAMC,MAAM,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2Bd;AACD;AACAF,WAAW,CAACG,YAAY,CAACF,IAAI,CAAC,GAAGC,MAAM;AACvC;AACA,OAAO,MAAME,oCAAoC,GAAG;EAAEH,IAAI;EAAEC;AAAM,CAAE","names":["ShaderStore","name","shader","ShadersStore","volumetricLightScatteringPixelShader"],"sourceRoot":"","sources":["../../../../lts/core/generated/Shaders/volumetricLightScattering.fragment.ts"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"volumetricLightScatteringPixelShader\";\nconst shader = `uniform sampler2D textureSampler;\runiform sampler2D lightScatteringSampler;\runiform float decay;\runiform float exposure;\runiform float weight;\runiform float density;\runiform vec2 meshPositionOnScreen;\rvarying vec2 vUV;\r#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_FRAGMENT_MAIN_BEGIN\nvec2 tc=vUV;\rvec2 deltaTexCoord=(tc-meshPositionOnScreen.xy);\rdeltaTexCoord*=1.0/float(NUM_SAMPLES)*density;\rfloat illuminationDecay=1.0;\rvec4 color=texture2D(lightScatteringSampler,tc)*0.4;\rfor(int i=0; i<NUM_SAMPLES; i++) {\rtc-=deltaTexCoord;\rvec4 dataSample=texture2D(lightScatteringSampler,tc)*0.4;\rdataSample*=illuminationDecay*weight;\rcolor+=dataSample;\rilluminationDecay*=decay;\r}\rvec4 realColor=texture2D(textureSampler,vUV);\rgl_FragColor=((vec4((vec3(color.r,color.g,color.b)*exposure),1))+(realColor*(1.5-0.4)));\r#define CUSTOM_FRAGMENT_MAIN_END\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const volumetricLightScatteringPixelShader = { name, shader };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}