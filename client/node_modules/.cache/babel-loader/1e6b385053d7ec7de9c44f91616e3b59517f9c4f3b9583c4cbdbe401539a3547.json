{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../../../tslib.es6.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\nimport { PBRClearCoatConfiguration } from \"../../../PBR/pbrClearCoatConfiguration.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator.js\";\nimport { TBNBlock } from \"../Fragment/TBNBlock.js\";\n/**\n * Block used to implement the clear coat module of the PBR material\n */\nexport class ClearCoatBlock extends NodeMaterialBlock {\n  /**\n   * Create a new ClearCoatBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Fragment);\n    this._tangentCorrectionFactorName = \"\";\n    /**\n     * Defines if the F0 value should be remapped to account for the interface change in the material.\n     */\n    this.remapF0OnInterfaceChange = true;\n    this._isUnique = true;\n    this.registerInput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"normalMapColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.Vector2, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"tintColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"tintAtDistance\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"tintThickness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"worldTangent\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n    this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\n    this.worldNormal.addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Color4 | NodeMaterialBlockConnectionPointTypes.Vector4 | NodeMaterialBlockConnectionPointTypes.Vector3);\n    this.registerInput(\"TBN\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.VertexAndFragment, new NodeMaterialConnectionPointCustomObject(\"TBN\", this, NodeMaterialConnectionPointDirection.Input, TBNBlock, \"TBNBlock\"));\n    this.registerOutput(\"clearcoat\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"clearcoat\", this, NodeMaterialConnectionPointDirection.Output, ClearCoatBlock, \"ClearCoatBlock\"));\n  }\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n  initialize(state) {\n    state._excludeVariableName(\"clearcoatOut\");\n    state._excludeVariableName(\"vClearCoatParams\");\n    state._excludeVariableName(\"vClearCoatTintParams\");\n    state._excludeVariableName(\"vClearCoatRefractionParams\");\n    state._excludeVariableName(\"vClearCoatTangentSpaceParams\");\n    state._excludeVariableName(\"vGeometricNormaClearCoatW\");\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"ClearCoatBlock\";\n  }\n  /**\n   * Gets the intensity input component\n   */\n  get intensity() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the roughness input component\n   */\n  get roughness() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the ior input component\n   */\n  get indexOfRefraction() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the bump texture input component\n   */\n  get normalMapColor() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the uv input component\n   */\n  get uv() {\n    return this._inputs[4];\n  }\n  /**\n   * Gets the tint color input component\n   */\n  get tintColor() {\n    return this._inputs[5];\n  }\n  /**\n   * Gets the tint \"at distance\" input component\n   */\n  get tintAtDistance() {\n    return this._inputs[6];\n  }\n  /**\n   * Gets the tint thickness input component\n   */\n  get tintThickness() {\n    return this._inputs[7];\n  }\n  /**\n   * Gets the world tangent input component\n   */\n  get worldTangent() {\n    return this._inputs[8];\n  }\n  /**\n   * Gets the world normal input component\n   */\n  get worldNormal() {\n    return this._inputs[9];\n  }\n  /**\n   * Gets the TBN input component\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  get TBN() {\n    return this._inputs[10];\n  }\n  /**\n   * Gets the clear coat object output component\n   */\n  get clearcoat() {\n    return this._outputs[0];\n  }\n  autoConfigure() {\n    if (!this.intensity.isConnected) {\n      const intensityInput = new InputBlock(\"ClearCoat intensity\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\n      intensityInput.value = 1;\n      intensityInput.output.connectTo(this.intensity);\n    }\n  }\n  prepareDefines(mesh, nodeMaterial, defines) {\n    super.prepareDefines(mesh, nodeMaterial, defines);\n    defines.setValue(\"CLEARCOAT\", true);\n    defines.setValue(\"CLEARCOAT_TEXTURE\", false, true);\n    defines.setValue(\"CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE\", true, true);\n    defines.setValue(\"CLEARCOAT_TINT\", this.tintColor.isConnected || this.tintThickness.isConnected || this.tintAtDistance.isConnected, true);\n    defines.setValue(\"CLEARCOAT_BUMP\", this.normalMapColor.isConnected, true);\n    defines.setValue(\"CLEARCOAT_DEFAULTIOR\", this.indexOfRefraction.isConnected ? this.indexOfRefraction.connectInputBlock.value === PBRClearCoatConfiguration._DefaultIndexOfRefraction : true, true);\n    defines.setValue(\"CLEARCOAT_REMAP_F0\", this.remapF0OnInterfaceChange, true);\n  }\n  bind(effect, nodeMaterial, mesh) {\n    var _a, _b;\n    super.bind(effect, nodeMaterial, mesh);\n    // Clear Coat Refraction params\n    const indexOfRefraction = (_b = (_a = this.indexOfRefraction.connectInputBlock) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n    const a = 1 - indexOfRefraction;\n    const b = 1 + indexOfRefraction;\n    const f0 = Math.pow(-a / b, 2); // Schlicks approx: (ior1 - ior2) / (ior1 + ior2) where ior2 for air is close to vacuum = 1.\n    const eta = 1 / indexOfRefraction;\n    effect.setFloat4(\"vClearCoatRefractionParams\", f0, eta, a, b);\n    // Clear Coat tangent space params\n    const mainPBRBlock = this.clearcoat.hasEndpoints ? this.clearcoat.endpoints[0].ownerBlock : null;\n    const perturbedNormalBlock = (mainPBRBlock === null || mainPBRBlock === void 0 ? void 0 : mainPBRBlock.perturbedNormal.isConnected) ? mainPBRBlock.perturbedNormal.connectedPoint.ownerBlock : null;\n    if (this._scene._mirroredCameraPosition) {\n      effect.setFloat2(\"vClearCoatTangentSpaceParams\", (perturbedNormalBlock === null || perturbedNormalBlock === void 0 ? void 0 : perturbedNormalBlock.invertX) ? 1.0 : -1.0, (perturbedNormalBlock === null || perturbedNormalBlock === void 0 ? void 0 : perturbedNormalBlock.invertY) ? 1.0 : -1.0);\n    } else {\n      effect.setFloat2(\"vClearCoatTangentSpaceParams\", (perturbedNormalBlock === null || perturbedNormalBlock === void 0 ? void 0 : perturbedNormalBlock.invertX) ? -1.0 : 1.0, (perturbedNormalBlock === null || perturbedNormalBlock === void 0 ? void 0 : perturbedNormalBlock.invertY) ? -1.0 : 1.0);\n    }\n    if (mesh) {\n      effect.setFloat(this._tangentCorrectionFactorName, mesh.getWorldMatrix().determinant() < 0 ? -1 : 1);\n    }\n  }\n  _generateTBNSpace(state, worldPositionVarName, worldNormalVarName) {\n    let code = \"\";\n    const comments = `//${this.name}`;\n    const worldTangent = this.worldTangent;\n    state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\n    const tangentReplaceString = {\n      search: /defined\\(TANGENT\\)/g,\n      replace: worldTangent.isConnected ? \"defined(TANGENT)\" : \"defined(IGNORE)\"\n    };\n    const TBN = this.TBN;\n    if (TBN.isConnected) {\n      state.compilationString += `\n            #ifdef TBNBLOCK\n            mat3 vTBN = ${TBN.associatedVariableName};\n            #endif\n            `;\n    } else if (worldTangent.isConnected) {\n      code += `vec3 tbnNormal = normalize(${worldNormalVarName}.xyz);\\r\\n`;\n      code += `vec3 tbnTangent = normalize(${worldTangent.associatedVariableName}.xyz);\\r\\n`;\n      code += `vec3 tbnBitangent = cross(tbnNormal, tbnTangent) * ${this._tangentCorrectionFactorName};\\r\\n`;\n      code += `mat3 vTBN = mat3(tbnTangent, tbnBitangent, tbnNormal);\\r\\n`;\n    }\n    state._emitFunctionFromInclude(\"bumpFragmentMainFunctions\", comments, {\n      replaceStrings: [tangentReplaceString]\n    });\n    return code;\n  }\n  /**\n   * Gets the main code of the block (fragment side)\n   * @param state current state of the node material building\n   * @param ccBlock instance of a ClearCoatBlock or null if the code must be generated without an active clear coat module\n   * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\n   * @param worldPosVarName name of the variable holding the world position\n   * @param generateTBNSpace if true, the code needed to create the TBN coordinate space is generated\n   * @param vTBNAvailable indicate that the vTBN variable is already existing because it has already been generated by another block (PerturbNormal or Anisotropy)\n   * @param worldNormalVarName name of the variable holding the world normal\n   * @returns the shader code\n   */\n  static GetCode(state, ccBlock, reflectionBlock, worldPosVarName, generateTBNSpace, vTBNAvailable, worldNormalVarName) {\n    let code = \"\";\n    const intensity = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.intensity.isConnected) ? ccBlock.intensity.associatedVariableName : \"1.\";\n    const roughness = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.roughness.isConnected) ? ccBlock.roughness.associatedVariableName : \"0.\";\n    const normalMapColor = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.normalMapColor.isConnected) ? ccBlock.normalMapColor.associatedVariableName : \"vec3(0.)\";\n    const uv = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.uv.isConnected) ? ccBlock.uv.associatedVariableName : \"vec2(0.)\";\n    const tintColor = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.tintColor.isConnected) ? ccBlock.tintColor.associatedVariableName : \"vec3(1.)\";\n    const tintThickness = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.tintThickness.isConnected) ? ccBlock.tintThickness.associatedVariableName : \"1.\";\n    const tintAtDistance = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.tintAtDistance.isConnected) ? ccBlock.tintAtDistance.associatedVariableName : \"1.\";\n    const tintTexture = \"vec4(0.)\";\n    if (ccBlock) {\n      state._emitUniformFromString(\"vClearCoatRefractionParams\", \"vec4\");\n      state._emitUniformFromString(\"vClearCoatTangentSpaceParams\", \"vec2\");\n      const normalShading = ccBlock.worldNormal;\n      code += `vec3 vGeometricNormaClearCoatW = ${normalShading.isConnected ? \"normalize(\" + normalShading.associatedVariableName + \".xyz)\" : \"geometricNormalW\"};\\r\\n`;\n    } else {\n      code += `vec3 vGeometricNormaClearCoatW = geometricNormalW;\\r\\n`;\n    }\n    if (generateTBNSpace && ccBlock) {\n      code += ccBlock._generateTBNSpace(state, worldPosVarName, worldNormalVarName);\n      vTBNAvailable = ccBlock.worldTangent.isConnected;\n    }\n    code += `clearcoatOutParams clearcoatOut;\n\n        #ifdef CLEARCOAT\n            vec2 vClearCoatParams = vec2(${intensity}, ${roughness});\n            vec4 vClearCoatTintParams = vec4(${tintColor}, ${tintThickness});\n\n            clearcoatBlock(\n                ${worldPosVarName}.xyz,\n                vGeometricNormaClearCoatW,\n                viewDirectionW,\n                vClearCoatParams,\n                specularEnvironmentR0,\n            #ifdef CLEARCOAT_TEXTURE\n                vec2(0.),\n            #endif\n            #ifdef CLEARCOAT_TINT\n                vClearCoatTintParams,\n                ${tintAtDistance},\n                vClearCoatRefractionParams,\n                #ifdef CLEARCOAT_TINT_TEXTURE\n                    ${tintTexture},\n                #endif\n            #endif\n            #ifdef CLEARCOAT_BUMP\n                vec2(0., 1.),\n                vec4(${normalMapColor}, 0.),\n                ${uv},\n                #if defined(${vTBNAvailable ? \"TANGENT\" : \"IGNORE\"}) && defined(NORMAL)\n                    vTBN,\n                #else\n                    vClearCoatTangentSpaceParams,\n                #endif\n                #ifdef OBJECTSPACE_NORMALMAP\n                    normalMatrix,\n                #endif\n            #endif\n            #if defined(FORCENORMALFORWARD) && defined(NORMAL)\n                faceNormal,\n            #endif\n            #ifdef REFLECTION\n                ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionMicrosurfaceInfosName},\n                ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionInfosName},\n                ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock.reflectionColor},\n                vLightingIntensity,\n                #ifdef ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName}\n                    ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName},\n                #else\n                    ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName},\n                #endif\n                #ifndef LODBASEDMICROSFURACE\n                    #ifdef ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName}\n                        ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName},\n                        ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName},\n                    #else\n                        ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName},\n                        ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName},\n                    #endif\n                #endif\n            #endif\n            #if defined(ENVIRONMENTBRDF) && !defined(${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName})\n                #ifdef RADIANCEOCCLUSION\n                    ambientMonochrome,\n                #endif\n            #endif\n            #if defined(CLEARCOAT_BUMP) || defined(TWOSIDEDLIGHTING)\n                (gl_FrontFacing ? 1. : -1.),\n            #endif\n                clearcoatOut\n            );\n        #else\n            clearcoatOut.specularEnvironmentR0 = specularEnvironmentR0;\n        #endif\\r\\n`;\n    return code;\n  }\n  _buildBlock(state) {\n    this._scene = state.sharedData.scene;\n    if (state.target === NodeMaterialBlockTargets.Fragment) {\n      state.sharedData.bindableBlocks.push(this);\n      state.sharedData.blocksWithDefines.push(this);\n      this._tangentCorrectionFactorName = state._getFreeDefineName(\"tangentCorrectionFactor\");\n      state._emitUniformFromString(this._tangentCorrectionFactorName, \"float\");\n    }\n    return this;\n  }\n  _dumpPropertiesCode() {\n    let codeString = super._dumpPropertiesCode();\n    codeString += `${this._codeVariableName}.remapF0OnInterfaceChange = ${this.remapF0OnInterfaceChange};\\r\\n`;\n    return codeString;\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.remapF0OnInterfaceChange = this.remapF0OnInterfaceChange;\n    return serializationObject;\n  }\n  _deserialize(serializationObject, scene, rootUrl) {\n    var _a;\n    super._deserialize(serializationObject, scene, rootUrl);\n    this.remapF0OnInterfaceChange = (_a = serializationObject.remapF0OnInterfaceChange) !== null && _a !== void 0 ? _a : true;\n  }\n}\n__decorate([editableInPropertyPage(\"Remap F0 on interface change\", PropertyTypeForEdition.Boolean, \"ADVANCED\")], ClearCoatBlock.prototype, \"remapF0OnInterfaceChange\", void 0);\nRegisterClass(\"BABYLON.ClearCoatBlock\", ClearCoatBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialConnectionPointDirection","NodeMaterialBlockTargets","RegisterClass","InputBlock","NodeMaterialConnectionPointCustomObject","PBRClearCoatConfiguration","editableInPropertyPage","PropertyTypeForEdition","TBNBlock","ClearCoatBlock","constructor","name","Fragment","_isUnique","registerInput","Float","Color3","Vector2","Vector4","AutoDetect","worldNormal","addExcludedConnectionPointFromAllowedTypes","Color4","Vector3","Object","VertexAndFragment","Input","registerOutput","Output","initialize","state","_excludeVariableName","getClassName","intensity","_inputs","roughness","indexOfRefraction","normalMapColor","uv","tintColor","tintAtDistance","tintThickness","worldTangent","TBN","clearcoat","_outputs","autoConfigure","isConnected","intensityInput","value","output","connectTo","prepareDefines","mesh","nodeMaterial","defines","setValue","connectInputBlock","_DefaultIndexOfRefraction","remapF0OnInterfaceChange","bind","effect","a","b","f0","Math","pow","eta","setFloat4","mainPBRBlock","hasEndpoints","endpoints","ownerBlock","perturbedNormalBlock","perturbedNormal","connectedPoint","_scene","_mirroredCameraPosition","setFloat2","invertX","invertY","setFloat","_tangentCorrectionFactorName","getWorldMatrix","determinant","_generateTBNSpace","worldPositionVarName","worldNormalVarName","code","comments","_emitExtension","tangentReplaceString","search","replace","compilationString","associatedVariableName","_emitFunctionFromInclude","replaceStrings","GetCode","ccBlock","reflectionBlock","worldPosVarName","generateTBNSpace","vTBNAvailable","tintTexture","_emitUniformFromString","normalShading","_vReflectionMicrosurfaceInfosName","_vReflectionInfosName","reflectionColor","_define3DName","_cubeSamplerName","_2DSamplerName","_defineSkyboxName","_buildBlock","sharedData","scene","target","bindableBlocks","push","blocksWithDefines","_getFreeDefineName","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","_deserialize","rootUrl","__decorate","Boolean"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/PBR/clearCoatBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { ReflectionBlock } from \"./reflectionBlock\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport type { Mesh } from \"../../../../Meshes/mesh\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport type { PBRMetallicRoughnessBlock } from \"./pbrMetallicRoughnessBlock\";\r\nimport type { PerturbNormalBlock } from \"../Fragment/perturbNormalBlock\";\r\nimport { PBRClearCoatConfiguration } from \"../../../PBR/pbrClearCoatConfiguration\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\r\nimport { TBNBlock } from \"../Fragment/TBNBlock\";\r\n\r\n/**\r\n * Block used to implement the clear coat module of the PBR material\r\n */\r\nexport class ClearCoatBlock extends NodeMaterialBlock {\r\n    private _scene: Scene;\r\n    private _tangentCorrectionFactorName = \"\";\r\n\r\n    /**\r\n     * Create a new ClearCoatBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"normalMapColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.Vector2, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"tintColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"tintAtDistance\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"tintThickness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"worldTangent\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\r\n        this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\r\n        this.worldNormal.addExcludedConnectionPointFromAllowedTypes(\r\n            NodeMaterialBlockConnectionPointTypes.Color4 | NodeMaterialBlockConnectionPointTypes.Vector4 | NodeMaterialBlockConnectionPointTypes.Vector3\r\n        );\r\n        this.registerInput(\r\n            \"TBN\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            true,\r\n            NodeMaterialBlockTargets.VertexAndFragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"TBN\", this, NodeMaterialConnectionPointDirection.Input, TBNBlock, \"TBNBlock\")\r\n        );\r\n\r\n        this.registerOutput(\r\n            \"clearcoat\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"clearcoat\", this, NodeMaterialConnectionPointDirection.Output, ClearCoatBlock, \"ClearCoatBlock\")\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Defines if the F0 value should be remapped to account for the interface change in the material.\r\n     */\r\n    @editableInPropertyPage(\"Remap F0 on interface change\", PropertyTypeForEdition.Boolean, \"ADVANCED\")\r\n    public remapF0OnInterfaceChange: boolean = true;\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"clearcoatOut\");\r\n        state._excludeVariableName(\"vClearCoatParams\");\r\n        state._excludeVariableName(\"vClearCoatTintParams\");\r\n        state._excludeVariableName(\"vClearCoatRefractionParams\");\r\n        state._excludeVariableName(\"vClearCoatTangentSpaceParams\");\r\n        state._excludeVariableName(\"vGeometricNormaClearCoatW\");\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ClearCoatBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the intensity input component\r\n     */\r\n    public get intensity(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the roughness input component\r\n     */\r\n    public get roughness(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the ior input component\r\n     */\r\n    public get indexOfRefraction(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the bump texture input component\r\n     */\r\n    public get normalMapColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the uv input component\r\n     */\r\n    public get uv(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the tint color input component\r\n     */\r\n    public get tintColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the tint \"at distance\" input component\r\n     */\r\n    public get tintAtDistance(): NodeMaterialConnectionPoint {\r\n        return this._inputs[6];\r\n    }\r\n\r\n    /**\r\n     * Gets the tint thickness input component\r\n     */\r\n    public get tintThickness(): NodeMaterialConnectionPoint {\r\n        return this._inputs[7];\r\n    }\r\n\r\n    /**\r\n     * Gets the world tangent input component\r\n     */\r\n    public get worldTangent(): NodeMaterialConnectionPoint {\r\n        return this._inputs[8];\r\n    }\r\n\r\n    /**\r\n     * Gets the world normal input component\r\n     */\r\n    public get worldNormal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[9];\r\n    }\r\n\r\n    /**\r\n     * Gets the TBN input component\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public get TBN(): NodeMaterialConnectionPoint {\r\n        return this._inputs[10];\r\n    }\r\n\r\n    /**\r\n     * Gets the clear coat object output component\r\n     */\r\n    public get clearcoat(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure() {\r\n        if (!this.intensity.isConnected) {\r\n            const intensityInput = new InputBlock(\"ClearCoat intensity\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\r\n            intensityInput.value = 1;\r\n            intensityInput.output.connectTo(this.intensity);\r\n        }\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        super.prepareDefines(mesh, nodeMaterial, defines);\r\n\r\n        defines.setValue(\"CLEARCOAT\", true);\r\n        defines.setValue(\"CLEARCOAT_TEXTURE\", false, true);\r\n        defines.setValue(\"CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE\", true, true);\r\n        defines.setValue(\"CLEARCOAT_TINT\", this.tintColor.isConnected || this.tintThickness.isConnected || this.tintAtDistance.isConnected, true);\r\n        defines.setValue(\"CLEARCOAT_BUMP\", this.normalMapColor.isConnected, true);\r\n        defines.setValue(\r\n            \"CLEARCOAT_DEFAULTIOR\",\r\n            this.indexOfRefraction.isConnected ? this.indexOfRefraction.connectInputBlock!.value === PBRClearCoatConfiguration._DefaultIndexOfRefraction : true,\r\n            true\r\n        );\r\n        defines.setValue(\"CLEARCOAT_REMAP_F0\", this.remapF0OnInterfaceChange, true);\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        super.bind(effect, nodeMaterial, mesh);\r\n\r\n        // Clear Coat Refraction params\r\n        const indexOfRefraction = this.indexOfRefraction.connectInputBlock?.value ?? PBRClearCoatConfiguration._DefaultIndexOfRefraction;\r\n\r\n        const a = 1 - indexOfRefraction;\r\n        const b = 1 + indexOfRefraction;\r\n        const f0 = Math.pow(-a / b, 2); // Schlicks approx: (ior1 - ior2) / (ior1 + ior2) where ior2 for air is close to vacuum = 1.\r\n        const eta = 1 / indexOfRefraction;\r\n\r\n        effect.setFloat4(\"vClearCoatRefractionParams\", f0, eta, a, b);\r\n\r\n        // Clear Coat tangent space params\r\n        const mainPBRBlock = this.clearcoat.hasEndpoints ? (this.clearcoat.endpoints[0].ownerBlock as PBRMetallicRoughnessBlock) : null;\r\n        const perturbedNormalBlock = mainPBRBlock?.perturbedNormal.isConnected ? (mainPBRBlock.perturbedNormal.connectedPoint!.ownerBlock as PerturbNormalBlock) : null;\r\n\r\n        if (this._scene._mirroredCameraPosition) {\r\n            effect.setFloat2(\"vClearCoatTangentSpaceParams\", perturbedNormalBlock?.invertX ? 1.0 : -1.0, perturbedNormalBlock?.invertY ? 1.0 : -1.0);\r\n        } else {\r\n            effect.setFloat2(\"vClearCoatTangentSpaceParams\", perturbedNormalBlock?.invertX ? -1.0 : 1.0, perturbedNormalBlock?.invertY ? -1.0 : 1.0);\r\n        }\r\n\r\n        if (mesh) {\r\n            effect.setFloat(this._tangentCorrectionFactorName, mesh.getWorldMatrix().determinant() < 0 ? -1 : 1);\r\n        }\r\n    }\r\n\r\n    private _generateTBNSpace(state: NodeMaterialBuildState, worldPositionVarName: string, worldNormalVarName: string) {\r\n        let code = \"\";\r\n\r\n        const comments = `//${this.name}`;\r\n        const worldTangent = this.worldTangent;\r\n\r\n        state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\r\n\r\n        const tangentReplaceString = { search: /defined\\(TANGENT\\)/g, replace: worldTangent.isConnected ? \"defined(TANGENT)\" : \"defined(IGNORE)\" };\r\n\r\n        const TBN = this.TBN;\r\n        if (TBN.isConnected) {\r\n            state.compilationString += `\r\n            #ifdef TBNBLOCK\r\n            mat3 vTBN = ${TBN.associatedVariableName};\r\n            #endif\r\n            `;\r\n        } else if (worldTangent.isConnected) {\r\n            code += `vec3 tbnNormal = normalize(${worldNormalVarName}.xyz);\\r\\n`;\r\n            code += `vec3 tbnTangent = normalize(${worldTangent.associatedVariableName}.xyz);\\r\\n`;\r\n            code += `vec3 tbnBitangent = cross(tbnNormal, tbnTangent) * ${this._tangentCorrectionFactorName};\\r\\n`;\r\n            code += `mat3 vTBN = mat3(tbnTangent, tbnBitangent, tbnNormal);\\r\\n`;\r\n        }\r\n\r\n        state._emitFunctionFromInclude(\"bumpFragmentMainFunctions\", comments, {\r\n            replaceStrings: [tangentReplaceString],\r\n        });\r\n\r\n        return code;\r\n    }\r\n\r\n    /**\r\n     * Gets the main code of the block (fragment side)\r\n     * @param state current state of the node material building\r\n     * @param ccBlock instance of a ClearCoatBlock or null if the code must be generated without an active clear coat module\r\n     * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\r\n     * @param worldPosVarName name of the variable holding the world position\r\n     * @param generateTBNSpace if true, the code needed to create the TBN coordinate space is generated\r\n     * @param vTBNAvailable indicate that the vTBN variable is already existing because it has already been generated by another block (PerturbNormal or Anisotropy)\r\n     * @param worldNormalVarName name of the variable holding the world normal\r\n     * @returns the shader code\r\n     */\r\n    public static GetCode(\r\n        state: NodeMaterialBuildState,\r\n        ccBlock: Nullable<ClearCoatBlock>,\r\n        reflectionBlock: Nullable<ReflectionBlock>,\r\n        worldPosVarName: string,\r\n        generateTBNSpace: boolean,\r\n        vTBNAvailable: boolean,\r\n        worldNormalVarName: string\r\n    ): string {\r\n        let code = \"\";\r\n\r\n        const intensity = ccBlock?.intensity.isConnected ? ccBlock.intensity.associatedVariableName : \"1.\";\r\n        const roughness = ccBlock?.roughness.isConnected ? ccBlock.roughness.associatedVariableName : \"0.\";\r\n        const normalMapColor = ccBlock?.normalMapColor.isConnected ? ccBlock.normalMapColor.associatedVariableName : \"vec3(0.)\";\r\n        const uv = ccBlock?.uv.isConnected ? ccBlock.uv.associatedVariableName : \"vec2(0.)\";\r\n\r\n        const tintColor = ccBlock?.tintColor.isConnected ? ccBlock.tintColor.associatedVariableName : \"vec3(1.)\";\r\n        const tintThickness = ccBlock?.tintThickness.isConnected ? ccBlock.tintThickness.associatedVariableName : \"1.\";\r\n        const tintAtDistance = ccBlock?.tintAtDistance.isConnected ? ccBlock.tintAtDistance.associatedVariableName : \"1.\";\r\n        const tintTexture = \"vec4(0.)\";\r\n\r\n        if (ccBlock) {\r\n            state._emitUniformFromString(\"vClearCoatRefractionParams\", \"vec4\");\r\n            state._emitUniformFromString(\"vClearCoatTangentSpaceParams\", \"vec2\");\r\n\r\n            const normalShading = ccBlock.worldNormal;\r\n            code += `vec3 vGeometricNormaClearCoatW = ${normalShading.isConnected ? \"normalize(\" + normalShading.associatedVariableName + \".xyz)\" : \"geometricNormalW\"};\\r\\n`;\r\n        } else {\r\n            code += `vec3 vGeometricNormaClearCoatW = geometricNormalW;\\r\\n`;\r\n        }\r\n\r\n        if (generateTBNSpace && ccBlock) {\r\n            code += ccBlock._generateTBNSpace(state, worldPosVarName, worldNormalVarName);\r\n            vTBNAvailable = ccBlock.worldTangent.isConnected;\r\n        }\r\n\r\n        code += `clearcoatOutParams clearcoatOut;\r\n\r\n        #ifdef CLEARCOAT\r\n            vec2 vClearCoatParams = vec2(${intensity}, ${roughness});\r\n            vec4 vClearCoatTintParams = vec4(${tintColor}, ${tintThickness});\r\n\r\n            clearcoatBlock(\r\n                ${worldPosVarName}.xyz,\r\n                vGeometricNormaClearCoatW,\r\n                viewDirectionW,\r\n                vClearCoatParams,\r\n                specularEnvironmentR0,\r\n            #ifdef CLEARCOAT_TEXTURE\r\n                vec2(0.),\r\n            #endif\r\n            #ifdef CLEARCOAT_TINT\r\n                vClearCoatTintParams,\r\n                ${tintAtDistance},\r\n                vClearCoatRefractionParams,\r\n                #ifdef CLEARCOAT_TINT_TEXTURE\r\n                    ${tintTexture},\r\n                #endif\r\n            #endif\r\n            #ifdef CLEARCOAT_BUMP\r\n                vec2(0., 1.),\r\n                vec4(${normalMapColor}, 0.),\r\n                ${uv},\r\n                #if defined(${vTBNAvailable ? \"TANGENT\" : \"IGNORE\"}) && defined(NORMAL)\r\n                    vTBN,\r\n                #else\r\n                    vClearCoatTangentSpaceParams,\r\n                #endif\r\n                #ifdef OBJECTSPACE_NORMALMAP\r\n                    normalMatrix,\r\n                #endif\r\n            #endif\r\n            #if defined(FORCENORMALFORWARD) && defined(NORMAL)\r\n                faceNormal,\r\n            #endif\r\n            #ifdef REFLECTION\r\n                ${reflectionBlock?._vReflectionMicrosurfaceInfosName},\r\n                ${reflectionBlock?._vReflectionInfosName},\r\n                ${reflectionBlock?.reflectionColor},\r\n                vLightingIntensity,\r\n                #ifdef ${reflectionBlock?._define3DName}\r\n                    ${reflectionBlock?._cubeSamplerName},\r\n                #else\r\n                    ${reflectionBlock?._2DSamplerName},\r\n                #endif\r\n                #ifndef LODBASEDMICROSFURACE\r\n                    #ifdef ${reflectionBlock?._define3DName}\r\n                        ${reflectionBlock?._cubeSamplerName},\r\n                        ${reflectionBlock?._cubeSamplerName},\r\n                    #else\r\n                        ${reflectionBlock?._2DSamplerName},\r\n                        ${reflectionBlock?._2DSamplerName},\r\n                    #endif\r\n                #endif\r\n            #endif\r\n            #if defined(ENVIRONMENTBRDF) && !defined(${reflectionBlock?._defineSkyboxName})\r\n                #ifdef RADIANCEOCCLUSION\r\n                    ambientMonochrome,\r\n                #endif\r\n            #endif\r\n            #if defined(CLEARCOAT_BUMP) || defined(TWOSIDEDLIGHTING)\r\n                (gl_FrontFacing ? 1. : -1.),\r\n            #endif\r\n                clearcoatOut\r\n            );\r\n        #else\r\n            clearcoatOut.specularEnvironmentR0 = specularEnvironmentR0;\r\n        #endif\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        this._scene = state.sharedData.scene;\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.sharedData.bindableBlocks.push(this);\r\n            state.sharedData.blocksWithDefines.push(this);\r\n\r\n            this._tangentCorrectionFactorName = state._getFreeDefineName(\"tangentCorrectionFactor\");\r\n            state._emitUniformFromString(this._tangentCorrectionFactorName, \"float\");\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode();\r\n\r\n        codeString += `${this._codeVariableName}.remapF0OnInterfaceChange = ${this.remapF0OnInterfaceChange};\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.remapF0OnInterfaceChange = this.remapF0OnInterfaceChange;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.remapF0OnInterfaceChange = serializationObject.remapF0OnInterfaceChange ?? true;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ClearCoatBlock\", ClearCoatBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}