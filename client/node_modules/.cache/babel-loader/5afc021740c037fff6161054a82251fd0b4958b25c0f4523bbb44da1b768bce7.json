{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Color3, Color4 } from \"../../Maths/math.color.js\";\nimport { Matrix, Vector2, Vector3 } from \"../../Maths/math.vector.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { PostProcess } from \"../../PostProcesses/postProcess.js\";\nimport { FluidRenderingTextures } from \"./fluidRenderingTextures.js\";\n/**\n * Textures that can be displayed as a debugging tool\n */\nexport var FluidRenderingDebug;\n(function (FluidRenderingDebug) {\n  FluidRenderingDebug[FluidRenderingDebug[\"DepthTexture\"] = 0] = \"DepthTexture\";\n  FluidRenderingDebug[FluidRenderingDebug[\"DepthBlurredTexture\"] = 1] = \"DepthBlurredTexture\";\n  FluidRenderingDebug[FluidRenderingDebug[\"ThicknessTexture\"] = 2] = \"ThicknessTexture\";\n  FluidRenderingDebug[FluidRenderingDebug[\"ThicknessBlurredTexture\"] = 3] = \"ThicknessBlurredTexture\";\n  FluidRenderingDebug[FluidRenderingDebug[\"DiffuseTexture\"] = 4] = \"DiffuseTexture\";\n  FluidRenderingDebug[FluidRenderingDebug[\"Normals\"] = 5] = \"Normals\";\n  FluidRenderingDebug[FluidRenderingDebug[\"DiffuseRendering\"] = 6] = \"DiffuseRendering\";\n})(FluidRenderingDebug || (FluidRenderingDebug = {}));\n/**\n * Class used to render an object as a fluid thanks to different render target textures (depth, thickness, diffuse)\n */\nexport class FluidRenderingTargetRenderer {\n  /**\n   * Creates an instance of the class\n   * @param scene Scene used to render the fluid object into\n   * @param camera Camera used to render the fluid object. If not provided, use the active camera of the scene instead\n   */\n  constructor(scene, camera) {\n    this._generateDiffuseTexture = false;\n    /**\n     * Fluid color. Not used if generateDiffuseTexture is true\n     */\n    this.fluidColor = new Color3(0.085, 0.6375, 0.765);\n    /**\n     * Density of the fluid (positive number). The higher the value, the more opaque the fluid.\n     */\n    this.density = 2;\n    /**\n     * Strength of the refraction (positive number, but generally between 0 and 0.3).\n     */\n    this.refractionStrength = 0.1;\n    /**\n     * Strength of the fresnel effect (value between 0 and 1). Lower the value if you want to soften the specular effect\n     */\n    this.fresnelClamp = 1.0;\n    /**\n     * Strength of the specular power (positive number). Increase the value to make the specular effect more concentrated\n     */\n    this.specularPower = 250;\n    /**\n     * Minimum thickness of the particles (positive number). If useFixedThickness is true, minimumThickness is the thickness used\n     */\n    this.minimumThickness = 0;\n    /**\n     * Direction of the light. The fluid is assumed to be lit by a directional light\n     */\n    this.dirLight = new Vector3(-2, -1, 1).normalize();\n    this._debugFeature = FluidRenderingDebug.DepthBlurredTexture;\n    this._debug = false;\n    this._enableBlurDepth = true;\n    this._blurDepthSizeDivisor = 1;\n    this._blurDepthFilterSize = 7;\n    this._blurDepthNumIterations = 3;\n    this._blurDepthMaxFilterSize = 100;\n    this._blurDepthDepthScale = 10;\n    this._enableBlurThickness = true;\n    this._blurThicknessSizeDivisor = 1;\n    this._blurThicknessFilterSize = 5;\n    this._blurThicknessNumIterations = 1;\n    this._useFixedThickness = false;\n    /** @internal */\n    this._onUseVelocityChanged = new Observable();\n    this._useVelocity = false;\n    this._depthMapSize = null;\n    this._thicknessMapSize = null;\n    this._diffuseMapSize = null;\n    this._samples = 1;\n    this._scene = scene;\n    this._engine = scene.getEngine();\n    this._camera = camera !== null && camera !== void 0 ? camera : scene.activeCamera;\n    this._needInitialization = true;\n    this._bgDepthTexture = null;\n    this._invProjectionMatrix = new Matrix();\n    this._depthClearColor = new Color4(1e6, 1e6, 1e6, 1);\n    this._thicknessClearColor = new Color4(0, 0, 0, 1);\n    this._depthRenderTarget = null;\n    this._diffuseRenderTarget = null;\n    this._thicknessRenderTarget = null;\n    this._renderPostProcess = null;\n  }\n  /**\n   * Returns true if the class needs to be reinitialized (because of changes in parameterization)\n   */\n  get needInitialization() {\n    return this._needInitialization;\n  }\n  /**\n   * Gets or sets a boolean indicating that the diffuse texture should be generated and used for the rendering\n   */\n  get generateDiffuseTexture() {\n    return this._generateDiffuseTexture;\n  }\n  set generateDiffuseTexture(generate) {\n    if (this._generateDiffuseTexture === generate) {\n      return;\n    }\n    this._generateDiffuseTexture = generate;\n    this._needInitialization = true;\n  }\n  /**\n   * Gets or sets the feature (texture) to be debugged. Not used if debug is false\n   */\n  get debugFeature() {\n    return this._debugFeature;\n  }\n  set debugFeature(feature) {\n    if (this._debugFeature === feature) {\n      return;\n    }\n    this._needInitialization = true;\n    this._debugFeature = feature;\n  }\n  /**\n   * Gets or sets a boolean indicating if we should display a specific texture (given by debugFeature) for debugging purpose\n   */\n  get debug() {\n    return this._debug;\n  }\n  set debug(debug) {\n    if (this._debug === debug) {\n      return;\n    }\n    this._debug = debug;\n    this._needInitialization = true;\n  }\n  /**\n   * Gets or sets the environment map used for the reflection part of the shading\n   * If null, no map will be used. If undefined, the scene.environmentMap will be used (if defined)\n   */\n  get environmentMap() {\n    return this._environmentMap;\n  }\n  set environmentMap(map) {\n    if (this._environmentMap === map) {\n      return;\n    }\n    this._needInitialization = true;\n    this._environmentMap = map;\n  }\n  /**\n   * Gets or sets a boolean indicating that the depth texture should be blurred\n   */\n  get enableBlurDepth() {\n    return this._enableBlurDepth;\n  }\n  set enableBlurDepth(enable) {\n    if (this._enableBlurDepth === enable) {\n      return;\n    }\n    this._enableBlurDepth = enable;\n    this._needInitialization = true;\n  }\n  /**\n   * Gets or sets the depth size divisor (positive number, generally between 1 and 4), which is used as a divisor when creating the texture used for blurring the depth\n   * For eg. if blurDepthSizeDivisor=2, the texture used to blur the depth will be half the size of the depth texture\n   */\n  get blurDepthSizeDivisor() {\n    return this._blurDepthSizeDivisor;\n  }\n  set blurDepthSizeDivisor(scale) {\n    if (this._blurDepthSizeDivisor === scale) {\n      return;\n    }\n    this._blurDepthSizeDivisor = scale;\n    this._needInitialization = true;\n  }\n  /**\n   * Size of the kernel used to filter the depth blur texture (positive number, generally between 1 and 20 - higher values will require more processing power from the GPU)\n   */\n  get blurDepthFilterSize() {\n    return this._blurDepthFilterSize;\n  }\n  set blurDepthFilterSize(filterSize) {\n    if (this._blurDepthFilterSize === filterSize) {\n      return;\n    }\n    this._blurDepthFilterSize = filterSize;\n    this._setBlurParameters();\n  }\n  /**\n   * Number of blurring iterations used to generate the depth blur texture (positive number, generally between 1 and 10 - higher values will require more processing power from the GPU)\n   */\n  get blurDepthNumIterations() {\n    return this._blurDepthNumIterations;\n  }\n  set blurDepthNumIterations(numIterations) {\n    if (this._blurDepthNumIterations === numIterations) {\n      return;\n    }\n    this._blurDepthNumIterations = numIterations;\n    this._setBlurParameters();\n  }\n  /**\n   * Maximum size of the kernel used to blur the depth texture (positive number, generally between 1 and 200 - higher values will require more processing power from the GPU when the particles are larger on screen)\n   */\n  get blurDepthMaxFilterSize() {\n    return this._blurDepthMaxFilterSize;\n  }\n  set blurDepthMaxFilterSize(maxFilterSize) {\n    if (this._blurDepthMaxFilterSize === maxFilterSize) {\n      return;\n    }\n    this._blurDepthMaxFilterSize = maxFilterSize;\n    this._setBlurParameters();\n  }\n  /**\n   * Depth weight in the calculation when applying the bilateral blur to generate the depth blur texture (positive number, generally between 0 and 100)\n   */\n  get blurDepthDepthScale() {\n    return this._blurDepthDepthScale;\n  }\n  set blurDepthDepthScale(scale) {\n    if (this._blurDepthDepthScale === scale) {\n      return;\n    }\n    this._blurDepthDepthScale = scale;\n    this._setBlurParameters();\n  }\n  /**\n   * Gets or sets a boolean indicating that the thickness texture should be blurred\n   */\n  get enableBlurThickness() {\n    return this._enableBlurThickness;\n  }\n  set enableBlurThickness(enable) {\n    if (this._enableBlurThickness === enable) {\n      return;\n    }\n    this._enableBlurThickness = enable;\n    this._needInitialization = true;\n  }\n  /**\n   * Gets or sets the thickness size divisor (positive number, generally between 1 and 4), which is used as a divisor when creating the texture used for blurring the thickness\n   * For eg. if blurThicknessSizeDivisor=2, the texture used to blur the thickness will be half the size of the thickness texture\n   */\n  get blurThicknessSizeDivisor() {\n    return this._blurThicknessSizeDivisor;\n  }\n  set blurThicknessSizeDivisor(scale) {\n    if (this._blurThicknessSizeDivisor === scale) {\n      return;\n    }\n    this._blurThicknessSizeDivisor = scale;\n    this._needInitialization = true;\n  }\n  /**\n   * Size of the kernel used to filter the thickness blur texture (positive number, generally between 1 and 20 - higher values will require more processing power from the GPU)\n   */\n  get blurThicknessFilterSize() {\n    return this._blurThicknessFilterSize;\n  }\n  set blurThicknessFilterSize(filterSize) {\n    if (this._blurThicknessFilterSize === filterSize) {\n      return;\n    }\n    this._blurThicknessFilterSize = filterSize;\n    this._setBlurParameters();\n  }\n  /**\n   * Number of blurring iterations used to generate the thickness blur texture (positive number, generally between 1 and 10 - higher values will require more processing power from the GPU)\n   */\n  get blurThicknessNumIterations() {\n    return this._blurThicknessNumIterations;\n  }\n  set blurThicknessNumIterations(numIterations) {\n    if (this._blurThicknessNumIterations === numIterations) {\n      return;\n    }\n    this._blurThicknessNumIterations = numIterations;\n    this._setBlurParameters();\n  }\n  /**\n   * Gets or sets a boolean indicating that a fixed thickness should be used instead of generating a thickness texture\n   */\n  get useFixedThickness() {\n    return this._useFixedThickness;\n  }\n  set useFixedThickness(use) {\n    if (this._useFixedThickness === use) {\n      return;\n    }\n    this._useFixedThickness = use;\n    this._needInitialization = true;\n  }\n  /**\n   * Gets or sets a boolean indicating that the velocity should be used when rendering the particles as a fluid.\n   * Note: the vertex buffers must contain a \"velocity\" buffer for this to work!\n   */\n  get useVelocity() {\n    return this._useVelocity;\n  }\n  set useVelocity(use) {\n    if (this._useVelocity === use) {\n      return;\n    }\n    this._useVelocity = use;\n    this._needInitialization = true;\n    this._onUseVelocityChanged.notifyObservers(this);\n  }\n  /**\n   * Defines the size of the depth texture.\n   * If null, the texture will have the size of the screen\n   */\n  get depthMapSize() {\n    return this._depthMapSize;\n  }\n  set depthMapSize(size) {\n    if (this._depthMapSize === size) {\n      return;\n    }\n    this._depthMapSize = size;\n    this._needInitialization = true;\n  }\n  /**\n   * Defines the size of the thickness texture.\n   * If null, the texture will have the size of the screen\n   */\n  get thicknessMapSize() {\n    return this._thicknessMapSize;\n  }\n  set thicknessMapSize(size) {\n    if (this._thicknessMapSize === size) {\n      return;\n    }\n    this._thicknessMapSize = size;\n    this._needInitialization = true;\n  }\n  /**\n   * Defines the size of the diffuse texture.\n   * If null, the texture will have the size of the screen\n   */\n  get diffuseMapSize() {\n    return this._diffuseMapSize;\n  }\n  set diffuseMapSize(size) {\n    if (this._diffuseMapSize === size) {\n      return;\n    }\n    this._diffuseMapSize = size;\n    this._needInitialization = true;\n  }\n  /**\n   * Gets or sets the number of samples used by MSAA\n   * Note: changing this value in WebGL does not work because depth/stencil textures can't be created with MSAA (see https://github.com/BabylonJS/Babylon.js/issues/12444)\n   */\n  get samples() {\n    return this._samples;\n  }\n  set samples(samples) {\n    if (this._samples === samples) {\n      return;\n    }\n    this._samples = samples;\n    this._needInitialization = true;\n  }\n  /**\n   * Gets the camera used for the rendering\n   */\n  get camera() {\n    return this._camera;\n  }\n  /** @internal */\n  _initialize() {\n    var _a, _b, _c;\n    this.dispose();\n    this._needInitialization = false;\n    const depthWidth = (_a = this._depthMapSize) !== null && _a !== void 0 ? _a : this._engine.getRenderWidth();\n    const depthHeight = this._depthMapSize !== null ? Math.round(this._depthMapSize * this._engine.getRenderHeight() / this._engine.getRenderWidth()) : this._engine.getRenderHeight();\n    this._depthRenderTarget = new FluidRenderingTextures(\"Depth\", this._scene, depthWidth, depthHeight, depthWidth, depthHeight, 1, 7, 1, 7, false, this._camera, true, this._samples);\n    this._initializeRenderTarget(this._depthRenderTarget);\n    if (this.generateDiffuseTexture) {\n      const diffuseWidth = (_b = this._diffuseMapSize) !== null && _b !== void 0 ? _b : this._engine.getRenderWidth();\n      const diffuseHeight = this._diffuseMapSize !== null ? Math.round(this._diffuseMapSize * this._engine.getRenderHeight() / this._engine.getRenderWidth()) : this._engine.getRenderHeight();\n      this._diffuseRenderTarget = new FluidRenderingTextures(\"Diffuse\", this._scene, diffuseWidth, diffuseHeight, 0, 0, 0, 5, 0, 5, true, this._camera, true, this._samples);\n      this._initializeRenderTarget(this._diffuseRenderTarget);\n    }\n    const thicknessWidth = (_c = this._thicknessMapSize) !== null && _c !== void 0 ? _c : this._engine.getRenderWidth();\n    const thicknessHeight = this._thicknessMapSize !== null ? Math.round(this._thicknessMapSize * this._engine.getRenderHeight() / this._engine.getRenderWidth()) : this._engine.getRenderHeight();\n    if (!this._useFixedThickness) {\n      this._thicknessRenderTarget = new FluidRenderingTextures(\"Thickness\", this._scene, thicknessWidth, thicknessHeight, thicknessWidth, thicknessHeight, 2, 6, 2, 6, true, this._camera, false, this._samples);\n      this._initializeRenderTarget(this._thicknessRenderTarget);\n    }\n    this._createLiquidRenderingPostProcess();\n  }\n  _setBlurParameters(renderTarget = null) {\n    if (renderTarget === null || renderTarget === this._depthRenderTarget) {\n      this._setBlurDepthParameters();\n    }\n    if (renderTarget === null || renderTarget === this._thicknessRenderTarget) {\n      this._setBlurThicknessParameters();\n    }\n  }\n  _setBlurDepthParameters() {\n    if (!this._depthRenderTarget) {\n      return;\n    }\n    this._depthRenderTarget.blurFilterSize = this.blurDepthFilterSize;\n    this._depthRenderTarget.blurMaxFilterSize = this.blurDepthMaxFilterSize;\n    this._depthRenderTarget.blurNumIterations = this.blurDepthNumIterations;\n    this._depthRenderTarget.blurDepthScale = this.blurDepthDepthScale;\n  }\n  _setBlurThicknessParameters() {\n    if (!this._thicknessRenderTarget) {\n      return;\n    }\n    this._thicknessRenderTarget.blurFilterSize = this.blurThicknessFilterSize;\n    this._thicknessRenderTarget.blurNumIterations = this.blurThicknessNumIterations;\n  }\n  _initializeRenderTarget(renderTarget) {\n    if (renderTarget !== this._diffuseRenderTarget) {\n      renderTarget.enableBlur = renderTarget === this._depthRenderTarget ? this.enableBlurDepth : this.enableBlurThickness;\n      renderTarget.blurSizeDivisor = renderTarget === this._depthRenderTarget ? this.blurDepthSizeDivisor : this.blurThicknessSizeDivisor;\n    }\n    this._setBlurParameters(renderTarget);\n    renderTarget.initialize();\n  }\n  _createLiquidRenderingPostProcess() {\n    var _a;\n    const engine = this._scene.getEngine();\n    const uniformNames = [\"viewMatrix\", \"projectionMatrix\", \"invProjectionMatrix\", \"texelSize\", \"dirLight\", \"cameraFar\", \"density\", \"refractionStrength\", \"fresnelClamp\", \"specularPower\"];\n    const samplerNames = [\"depthSampler\"];\n    const defines = [];\n    this.dispose(true);\n    if (!this._camera) {\n      return;\n    }\n    const texture = this._depthRenderTarget.enableBlur ? this._depthRenderTarget.textureBlur : this._depthRenderTarget.texture;\n    const texelSize = new Vector2(1 / texture.getSize().width, 1 / texture.getSize().height);\n    if (this._environmentMap !== null) {\n      const envMap = (_a = this._environmentMap) !== null && _a !== void 0 ? _a : this._scene.environmentTexture;\n      if (envMap) {\n        samplerNames.push(\"reflectionSampler\");\n        defines.push(\"#define FLUIDRENDERING_ENVIRONMENT\");\n      }\n    }\n    if (this._diffuseRenderTarget) {\n      samplerNames.push(\"diffuseSampler\");\n      defines.push(\"#define FLUIDRENDERING_DIFFUSETEXTURE\");\n    } else {\n      uniformNames.push(\"diffuseColor\");\n    }\n    if (this._useVelocity) {\n      samplerNames.push(\"velocitySampler\");\n      defines.push(\"#define FLUIDRENDERING_VELOCITY\");\n    }\n    if (this._useFixedThickness) {\n      uniformNames.push(\"thickness\");\n      samplerNames.push(\"bgDepthSampler\");\n      defines.push(\"#define FLUIDRENDERING_FIXED_THICKNESS\");\n    } else {\n      uniformNames.push(\"minimumThickness\");\n      samplerNames.push(\"thicknessSampler\");\n    }\n    if (this._debug) {\n      defines.push(\"#define FLUIDRENDERING_DEBUG\");\n      if (this._debugFeature === FluidRenderingDebug.Normals) {\n        defines.push(\"#define FLUIDRENDERING_DEBUG_SHOWNORMAL\");\n      } else if (this._debugFeature === FluidRenderingDebug.DiffuseRendering) {\n        defines.push(\"#define FLUIDRENDERING_DEBUG_DIFFUSERENDERING\");\n      } else {\n        defines.push(\"#define FLUIDRENDERING_DEBUG_TEXTURE\");\n        samplerNames.push(\"debugSampler\");\n        if (this._debugFeature === FluidRenderingDebug.DepthTexture || this._debugFeature === FluidRenderingDebug.DepthBlurredTexture) {\n          defines.push(\"#define FLUIDRENDERING_DEBUG_DEPTH\");\n        }\n      }\n    }\n    this._renderPostProcess = new PostProcess(\"FluidRendering\", \"fluidRenderingRender\", uniformNames, samplerNames, 1, null, 2, engine, false, null, 0, undefined, undefined, true, undefined);\n    this._renderPostProcess.updateEffect(defines.join(\"\\n\"));\n    this._renderPostProcess.samples = this._samples;\n    this._renderPostProcess.onApplyObservable.add(effect => {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;\n      this._invProjectionMatrix.copyFrom(this._scene.getProjectionMatrix());\n      this._invProjectionMatrix.invert();\n      if (engine.isWebGPU) {\n        effect.setTextureSampler(\"textureSamplerSampler\", this._renderPostProcess.inputTexture.texture);\n      }\n      if (!this._depthRenderTarget.enableBlur) {\n        effect.setTexture(\"depthSampler\", this._depthRenderTarget.texture);\n        if (engine.isWebGPU) {\n          effect.setTextureSampler(\"depthSamplerSampler\", (_b = (_a = this._depthRenderTarget.texture) === null || _a === void 0 ? void 0 : _a.getInternalTexture()) !== null && _b !== void 0 ? _b : null);\n        }\n      } else {\n        effect.setTexture(\"depthSampler\", this._depthRenderTarget.textureBlur);\n        if (engine.isWebGPU) {\n          effect.setTextureSampler(\"depthSamplerSampler\", (_d = (_c = this._depthRenderTarget.textureBlur) === null || _c === void 0 ? void 0 : _c.getInternalTexture()) !== null && _d !== void 0 ? _d : null);\n        }\n      }\n      if (this._diffuseRenderTarget) {\n        if (!this._diffuseRenderTarget.enableBlur) {\n          effect.setTexture(\"diffuseSampler\", this._diffuseRenderTarget.texture);\n          if (engine.isWebGPU) {\n            effect.setTextureSampler(\"diffuseSamplerSampler\", (_f = (_e = this._diffuseRenderTarget.texture) === null || _e === void 0 ? void 0 : _e.getInternalTexture()) !== null && _f !== void 0 ? _f : null);\n          }\n        } else {\n          effect.setTexture(\"diffuseSampler\", this._diffuseRenderTarget.textureBlur);\n          if (engine.isWebGPU) {\n            effect.setTextureSampler(\"diffuseSamplerSampler\", (_h = (_g = this._diffuseRenderTarget.textureBlur) === null || _g === void 0 ? void 0 : _g.getInternalTexture()) !== null && _h !== void 0 ? _h : null);\n          }\n        }\n      } else {\n        effect.setColor3(\"diffuseColor\", this.fluidColor);\n      }\n      if (this._useFixedThickness) {\n        effect.setFloat(\"thickness\", this.minimumThickness);\n        effect._bindTexture(\"bgDepthSampler\", this._bgDepthTexture);\n        if (engine.isWebGPU) {\n          effect.setTextureSampler(\"bgDepthSamplerSampler\", (_j = this._bgDepthTexture) !== null && _j !== void 0 ? _j : null);\n        }\n      } else {\n        if (!this._thicknessRenderTarget.enableBlur) {\n          effect.setTexture(\"thicknessSampler\", this._thicknessRenderTarget.texture);\n          if (engine.isWebGPU) {\n            effect.setTextureSampler(\"thicknessSamplerSampler\", (_l = (_k = this._thicknessRenderTarget.texture) === null || _k === void 0 ? void 0 : _k.getInternalTexture()) !== null && _l !== void 0 ? _l : null);\n          }\n        } else {\n          effect.setTexture(\"thicknessSampler\", this._thicknessRenderTarget.textureBlur);\n          if (engine.isWebGPU) {\n            effect.setTextureSampler(\"thicknessSamplerSampler\", (_o = (_m = this._thicknessRenderTarget.textureBlur) === null || _m === void 0 ? void 0 : _m.getInternalTexture()) !== null && _o !== void 0 ? _o : null);\n          }\n        }\n        effect.setFloat(\"minimumThickness\", this.minimumThickness);\n      }\n      if (this._environmentMap !== null) {\n        const envMap = (_p = this._environmentMap) !== null && _p !== void 0 ? _p : this._scene.environmentTexture;\n        if (envMap) {\n          effect.setTexture(\"reflectionSampler\", envMap);\n          if (engine.isWebGPU) {\n            effect.setTextureSampler(\"reflectionSamplerSampler\", (_q = envMap === null || envMap === void 0 ? void 0 : envMap.getInternalTexture()) !== null && _q !== void 0 ? _q : null);\n          }\n        }\n      }\n      effect.setMatrix(\"viewMatrix\", this._scene.getViewMatrix());\n      effect.setMatrix(\"invProjectionMatrix\", this._invProjectionMatrix);\n      effect.setMatrix(\"projectionMatrix\", this._scene.getProjectionMatrix());\n      effect.setVector2(\"texelSize\", texelSize);\n      effect.setFloat(\"density\", this.density);\n      effect.setFloat(\"refractionStrength\", this.refractionStrength);\n      effect.setFloat(\"fresnelClamp\", this.fresnelClamp);\n      effect.setFloat(\"specularPower\", this.specularPower);\n      effect.setVector3(\"dirLight\", this.dirLight);\n      effect.setFloat(\"cameraFar\", this._camera.maxZ);\n      if (this._debug) {\n        let texture = null;\n        switch (this._debugFeature) {\n          case FluidRenderingDebug.DepthTexture:\n            texture = this._depthRenderTarget.texture;\n            break;\n          case FluidRenderingDebug.DepthBlurredTexture:\n            texture = this._depthRenderTarget.enableBlur ? this._depthRenderTarget.textureBlur : this._depthRenderTarget.texture;\n            break;\n          case FluidRenderingDebug.ThicknessTexture:\n            texture = (_s = (_r = this._thicknessRenderTarget) === null || _r === void 0 ? void 0 : _r.texture) !== null && _s !== void 0 ? _s : null;\n            break;\n          case FluidRenderingDebug.ThicknessBlurredTexture:\n            texture = ((_t = this._thicknessRenderTarget) === null || _t === void 0 ? void 0 : _t.enableBlur) ? (_v = (_u = this._thicknessRenderTarget) === null || _u === void 0 ? void 0 : _u.textureBlur) !== null && _v !== void 0 ? _v : null : (_x = (_w = this._thicknessRenderTarget) === null || _w === void 0 ? void 0 : _w.texture) !== null && _x !== void 0 ? _x : null;\n            break;\n          case FluidRenderingDebug.DiffuseTexture:\n            if (this._diffuseRenderTarget) {\n              texture = this._diffuseRenderTarget.texture;\n            }\n            break;\n        }\n        if (this._debugFeature !== FluidRenderingDebug.Normals) {\n          effect.setTexture(\"debugSampler\", texture);\n          if (engine.isWebGPU) {\n            effect.setTextureSampler(\"debugSamplerSampler\", (_y = texture === null || texture === void 0 ? void 0 : texture.getInternalTexture()) !== null && _y !== void 0 ? _y : null);\n          }\n        }\n      }\n    });\n  }\n  /** @internal */\n  _clearTargets() {\n    var _a, _b, _c;\n    if ((_a = this._depthRenderTarget) === null || _a === void 0 ? void 0 : _a.renderTarget) {\n      this._engine.bindFramebuffer(this._depthRenderTarget.renderTarget);\n      this._engine.clear(this._depthClearColor, true, true, false);\n      this._engine.unBindFramebuffer(this._depthRenderTarget.renderTarget);\n    }\n    if ((_b = this._diffuseRenderTarget) === null || _b === void 0 ? void 0 : _b.renderTarget) {\n      this._engine.bindFramebuffer(this._diffuseRenderTarget.renderTarget);\n      this._engine.clear(this._thicknessClearColor, true, true, false);\n      this._engine.unBindFramebuffer(this._diffuseRenderTarget.renderTarget);\n    }\n    if ((_c = this._thicknessRenderTarget) === null || _c === void 0 ? void 0 : _c.renderTarget) {\n      this._engine.bindFramebuffer(this._thicknessRenderTarget.renderTarget);\n      // we don't clear the depth buffer because it is the depth buffer that is coming from the scene and that we reuse in the thickness rendering pass\n      this._engine.clear(this._thicknessClearColor, true, false, false);\n      this._engine.unBindFramebuffer(this._thicknessRenderTarget.renderTarget);\n    }\n  }\n  /** @internal */\n  _render(fluidObject) {\n    var _a, _b, _c, _d, _e, _f;\n    if (this._needInitialization || !fluidObject.isReady()) {\n      return;\n    }\n    const currentRenderTarget = this._engine._currentRenderTarget;\n    this._engine.setState(false, undefined, undefined, undefined, true);\n    this._engine.setDepthBuffer(true);\n    this._engine.setDepthWrite(true);\n    this._engine.setAlphaMode(0);\n    // Render the particles in the depth texture\n    if ((_a = this._depthRenderTarget) === null || _a === void 0 ? void 0 : _a.renderTarget) {\n      this._engine.bindFramebuffer(this._depthRenderTarget.renderTarget);\n      fluidObject.renderDepthTexture();\n      this._engine.unbindInstanceAttributes();\n      this._engine.unBindFramebuffer(this._depthRenderTarget.renderTarget);\n    }\n    // Render the particles in the diffuse texture\n    if ((_b = this._diffuseRenderTarget) === null || _b === void 0 ? void 0 : _b.renderTarget) {\n      this._engine.bindFramebuffer(this._diffuseRenderTarget.renderTarget);\n      fluidObject.renderDiffuseTexture();\n      this._engine.unbindInstanceAttributes();\n      this._engine.unBindFramebuffer(this._diffuseRenderTarget.renderTarget);\n    }\n    // Render the particles in the thickness texture\n    if ((_c = this._thicknessRenderTarget) === null || _c === void 0 ? void 0 : _c.renderTarget) {\n      this._engine.bindFramebuffer(this._thicknessRenderTarget.renderTarget);\n      fluidObject.renderThicknessTexture();\n      this._engine.unbindInstanceAttributes();\n      this._engine.unBindFramebuffer(this._thicknessRenderTarget.renderTarget);\n    }\n    // Run the blur post processes\n    (_d = this._depthRenderTarget) === null || _d === void 0 ? void 0 : _d.applyBlurPostProcesses();\n    (_e = this._diffuseRenderTarget) === null || _e === void 0 ? void 0 : _e.applyBlurPostProcesses();\n    (_f = this._thicknessRenderTarget) === null || _f === void 0 ? void 0 : _f.applyBlurPostProcesses();\n    if (currentRenderTarget) {\n      this._engine.bindFramebuffer(currentRenderTarget);\n    }\n  }\n  /**\n   * Releases all the ressources used by the class\n   * @param onlyPostProcesses If true, releases only the ressources used by the render post processes\n   */\n  dispose(onlyPostProcesses = false) {\n    var _a, _b, _c, _d;\n    if (!onlyPostProcesses) {\n      (_a = this._depthRenderTarget) === null || _a === void 0 ? void 0 : _a.dispose();\n      this._depthRenderTarget = null;\n      (_b = this._diffuseRenderTarget) === null || _b === void 0 ? void 0 : _b.dispose();\n      this._diffuseRenderTarget = null;\n      (_c = this._thicknessRenderTarget) === null || _c === void 0 ? void 0 : _c.dispose();\n      this._thicknessRenderTarget = null;\n    }\n    if (this._renderPostProcess && this._camera) {\n      this._camera.detachPostProcess(this._renderPostProcess);\n    }\n    (_d = this._renderPostProcess) === null || _d === void 0 ? void 0 : _d.dispose();\n    this._renderPostProcess = null;\n    this._needInitialization = false;\n  }\n}","map":{"version":3,"mappings":"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","names":["Color3","Color4","Matrix","Vector2","Vector3","Observable","PostProcess","FluidRenderingTextures","FluidRenderingDebug","FluidRenderingTargetRenderer","constructor","scene","camera","normalize","DepthBlurredTexture","_scene","_engine","getEngine","_camera","activeCamera","_needInitialization","_bgDepthTexture","_invProjectionMatrix","_depthClearColor","_thicknessClearColor","_depthRenderTarget","_diffuseRenderTarget","_thicknessRenderTarget","_renderPostProcess","needInitialization","generateDiffuseTexture","_generateDiffuseTexture","generate","debugFeature","_debugFeature","feature","debug","_debug","environmentMap","_environmentMap","map","enableBlurDepth","_enableBlurDepth","enable","blurDepthSizeDivisor","_blurDepthSizeDivisor","scale","blurDepthFilterSize","_blurDepthFilterSize","filterSize","_setBlurParameters","blurDepthNumIterations","_blurDepthNumIterations","numIterations","blurDepthMaxFilterSize","_blurDepthMaxFilterSize","maxFilterSize","blurDepthDepthScale","_blurDepthDepthScale","enableBlurThickness","_enableBlurThickness","blurThicknessSizeDivisor","_blurThicknessSizeDivisor","blurThicknessFilterSize","_blurThicknessFilterSize","blurThicknessNumIterations","_blurThicknessNumIterations","useFixedThickness","_useFixedThickness","use","useVelocity","_useVelocity","_onUseVelocityChanged","notifyObservers","depthMapSize","_depthMapSize","size","thicknessMapSize","_thicknessMapSize","diffuseMapSize","_diffuseMapSize","samples","_samples","_initialize","dispose","depthWidth","getRenderWidth","depthHeight","Math","round","getRenderHeight","_initializeRenderTarget","diffuseWidth","diffuseHeight","thicknessWidth","thicknessHeight","_createLiquidRenderingPostProcess","renderTarget","_setBlurDepthParameters","_setBlurThicknessParameters","blurFilterSize","blurMaxFilterSize","blurNumIterations","blurDepthScale","enableBlur","blurSizeDivisor","initialize","engine","uniformNames","samplerNames","defines","texture","textureBlur","texelSize","getSize","width","height","envMap","environmentTexture","push","Normals","DiffuseRendering","DepthTexture","undefined","updateEffect","join","onApplyObservable","add","effect","copyFrom","getProjectionMatrix","invert","isWebGPU","setTextureSampler","inputTexture","setTexture","getInternalTexture","setColor3","fluidColor","setFloat","minimumThickness","_bindTexture","setMatrix","getViewMatrix","setVector2","density","refractionStrength","fresnelClamp","specularPower","setVector3","dirLight","maxZ","ThicknessTexture","ThicknessBlurredTexture","DiffuseTexture","_clearTargets","bindFramebuffer","clear","unBindFramebuffer","_render","fluidObject","isReady","currentRenderTarget","_currentRenderTarget","setState","setDepthBuffer","setDepthWrite","setAlphaMode","renderDepthTexture","unbindInstanceAttributes","renderDiffuseTexture","renderThicknessTexture","applyBlurPostProcesses","onlyPostProcesses","detachPostProcess"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Rendering/fluidRenderer/fluidRenderingTargetRenderer.ts"],"sourcesContent":["import type { Camera } from \"core/Cameras/camera\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport type { Engine } from \"core/Engines/engine\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { InternalTexture } from \"core/Materials/Textures/internalTexture\";\r\nimport type { ThinTexture } from \"core/Materials/Textures/thinTexture\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\nimport { Matrix, Vector2, Vector3 } from \"core/Maths/math.vector\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { PostProcess } from \"core/PostProcesses/postProcess\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\nimport type { FluidRenderingObject } from \"./fluidRenderingObject\";\r\nimport { FluidRenderingTextures } from \"./fluidRenderingTextures\";\r\n\r\n/**\r\n * Textures that can be displayed as a debugging tool\r\n */\r\nexport enum FluidRenderingDebug {\r\n    DepthTexture,\r\n    DepthBlurredTexture,\r\n    ThicknessTexture,\r\n    ThicknessBlurredTexture,\r\n    DiffuseTexture,\r\n    Normals,\r\n    DiffuseRendering,\r\n}\r\n\r\n/**\r\n * Class used to render an object as a fluid thanks to different render target textures (depth, thickness, diffuse)\r\n */\r\nexport class FluidRenderingTargetRenderer {\r\n    protected _scene: Scene;\r\n    protected _camera: Nullable<Camera>;\r\n    protected _engine: Engine;\r\n\r\n    protected _invProjectionMatrix: Matrix;\r\n    protected _depthClearColor: Color4;\r\n    protected _thicknessClearColor: Color4;\r\n\r\n    protected _needInitialization: boolean;\r\n\r\n    /**\r\n     * Returns true if the class needs to be reinitialized (because of changes in parameterization)\r\n     */\r\n    public get needInitialization() {\r\n        return this._needInitialization;\r\n    }\r\n\r\n    private _generateDiffuseTexture = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the diffuse texture should be generated and used for the rendering\r\n     */\r\n    public get generateDiffuseTexture() {\r\n        return this._generateDiffuseTexture;\r\n    }\r\n\r\n    public set generateDiffuseTexture(generate: boolean) {\r\n        if (this._generateDiffuseTexture === generate) {\r\n            return;\r\n        }\r\n\r\n        this._generateDiffuseTexture = generate;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    /**\r\n     * Fluid color. Not used if generateDiffuseTexture is true\r\n     */\r\n    public fluidColor = new Color3(0.085, 0.6375, 0.765);\r\n\r\n    /**\r\n     * Density of the fluid (positive number). The higher the value, the more opaque the fluid.\r\n     */\r\n    public density = 2;\r\n\r\n    /**\r\n     * Strength of the refraction (positive number, but generally between 0 and 0.3).\r\n     */\r\n    public refractionStrength = 0.1;\r\n\r\n    /**\r\n     * Strength of the fresnel effect (value between 0 and 1). Lower the value if you want to soften the specular effect\r\n     */\r\n    public fresnelClamp = 1.0;\r\n\r\n    /**\r\n     * Strength of the specular power (positive number). Increase the value to make the specular effect more concentrated\r\n     */\r\n    public specularPower = 250;\r\n\r\n    /**\r\n     * Minimum thickness of the particles (positive number). If useFixedThickness is true, minimumThickness is the thickness used\r\n     */\r\n    public minimumThickness = 0;\r\n\r\n    /**\r\n     * Direction of the light. The fluid is assumed to be lit by a directional light\r\n     */\r\n    public dirLight: Vector3 = new Vector3(-2, -1, 1).normalize();\r\n\r\n    private _debugFeature: FluidRenderingDebug = FluidRenderingDebug.DepthBlurredTexture;\r\n\r\n    /**\r\n     * Gets or sets the feature (texture) to be debugged. Not used if debug is false\r\n     */\r\n    public get debugFeature() {\r\n        return this._debugFeature;\r\n    }\r\n\r\n    public set debugFeature(feature: FluidRenderingDebug) {\r\n        if (this._debugFeature === feature) {\r\n            return;\r\n        }\r\n\r\n        this._needInitialization = true;\r\n        this._debugFeature = feature;\r\n    }\r\n\r\n    private _debug = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if we should display a specific texture (given by debugFeature) for debugging purpose\r\n     */\r\n    public get debug() {\r\n        return this._debug;\r\n    }\r\n\r\n    public set debug(debug: boolean) {\r\n        if (this._debug === debug) {\r\n            return;\r\n        }\r\n\r\n        this._debug = debug;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _environmentMap?: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Gets or sets the environment map used for the reflection part of the shading\r\n     * If null, no map will be used. If undefined, the scene.environmentMap will be used (if defined)\r\n     */\r\n    public get environmentMap() {\r\n        return this._environmentMap;\r\n    }\r\n\r\n    public set environmentMap(map: Nullable<BaseTexture> | undefined) {\r\n        if (this._environmentMap === map) {\r\n            return;\r\n        }\r\n\r\n        this._needInitialization = true;\r\n        this._environmentMap = map;\r\n    }\r\n\r\n    private _enableBlurDepth = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the depth texture should be blurred\r\n     */\r\n    public get enableBlurDepth() {\r\n        return this._enableBlurDepth;\r\n    }\r\n\r\n    public set enableBlurDepth(enable: boolean) {\r\n        if (this._enableBlurDepth === enable) {\r\n            return;\r\n        }\r\n\r\n        this._enableBlurDepth = enable;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _blurDepthSizeDivisor = 1;\r\n\r\n    /**\r\n     * Gets or sets the depth size divisor (positive number, generally between 1 and 4), which is used as a divisor when creating the texture used for blurring the depth\r\n     * For eg. if blurDepthSizeDivisor=2, the texture used to blur the depth will be half the size of the depth texture\r\n     */\r\n    public get blurDepthSizeDivisor() {\r\n        return this._blurDepthSizeDivisor;\r\n    }\r\n\r\n    public set blurDepthSizeDivisor(scale: number) {\r\n        if (this._blurDepthSizeDivisor === scale) {\r\n            return;\r\n        }\r\n\r\n        this._blurDepthSizeDivisor = scale;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _blurDepthFilterSize = 7;\r\n\r\n    /**\r\n     * Size of the kernel used to filter the depth blur texture (positive number, generally between 1 and 20 - higher values will require more processing power from the GPU)\r\n     */\r\n    public get blurDepthFilterSize() {\r\n        return this._blurDepthFilterSize;\r\n    }\r\n\r\n    public set blurDepthFilterSize(filterSize: number) {\r\n        if (this._blurDepthFilterSize === filterSize) {\r\n            return;\r\n        }\r\n\r\n        this._blurDepthFilterSize = filterSize;\r\n        this._setBlurParameters();\r\n    }\r\n\r\n    private _blurDepthNumIterations = 3;\r\n\r\n    /**\r\n     * Number of blurring iterations used to generate the depth blur texture (positive number, generally between 1 and 10 - higher values will require more processing power from the GPU)\r\n     */\r\n    public get blurDepthNumIterations() {\r\n        return this._blurDepthNumIterations;\r\n    }\r\n\r\n    public set blurDepthNumIterations(numIterations: number) {\r\n        if (this._blurDepthNumIterations === numIterations) {\r\n            return;\r\n        }\r\n\r\n        this._blurDepthNumIterations = numIterations;\r\n        this._setBlurParameters();\r\n    }\r\n\r\n    private _blurDepthMaxFilterSize = 100;\r\n\r\n    /**\r\n     * Maximum size of the kernel used to blur the depth texture (positive number, generally between 1 and 200 - higher values will require more processing power from the GPU when the particles are larger on screen)\r\n     */\r\n    public get blurDepthMaxFilterSize() {\r\n        return this._blurDepthMaxFilterSize;\r\n    }\r\n\r\n    public set blurDepthMaxFilterSize(maxFilterSize: number) {\r\n        if (this._blurDepthMaxFilterSize === maxFilterSize) {\r\n            return;\r\n        }\r\n\r\n        this._blurDepthMaxFilterSize = maxFilterSize;\r\n        this._setBlurParameters();\r\n    }\r\n\r\n    private _blurDepthDepthScale = 10;\r\n\r\n    /**\r\n     * Depth weight in the calculation when applying the bilateral blur to generate the depth blur texture (positive number, generally between 0 and 100)\r\n     */\r\n    public get blurDepthDepthScale() {\r\n        return this._blurDepthDepthScale;\r\n    }\r\n\r\n    public set blurDepthDepthScale(scale: number) {\r\n        if (this._blurDepthDepthScale === scale) {\r\n            return;\r\n        }\r\n\r\n        this._blurDepthDepthScale = scale;\r\n        this._setBlurParameters();\r\n    }\r\n\r\n    private _enableBlurThickness = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the thickness texture should be blurred\r\n     */\r\n    public get enableBlurThickness() {\r\n        return this._enableBlurThickness;\r\n    }\r\n\r\n    public set enableBlurThickness(enable: boolean) {\r\n        if (this._enableBlurThickness === enable) {\r\n            return;\r\n        }\r\n\r\n        this._enableBlurThickness = enable;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _blurThicknessSizeDivisor = 1;\r\n\r\n    /**\r\n     * Gets or sets the thickness size divisor (positive number, generally between 1 and 4), which is used as a divisor when creating the texture used for blurring the thickness\r\n     * For eg. if blurThicknessSizeDivisor=2, the texture used to blur the thickness will be half the size of the thickness texture\r\n     */\r\n    public get blurThicknessSizeDivisor() {\r\n        return this._blurThicknessSizeDivisor;\r\n    }\r\n\r\n    public set blurThicknessSizeDivisor(scale: number) {\r\n        if (this._blurThicknessSizeDivisor === scale) {\r\n            return;\r\n        }\r\n\r\n        this._blurThicknessSizeDivisor = scale;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _blurThicknessFilterSize = 5;\r\n\r\n    /**\r\n     * Size of the kernel used to filter the thickness blur texture (positive number, generally between 1 and 20 - higher values will require more processing power from the GPU)\r\n     */\r\n    public get blurThicknessFilterSize() {\r\n        return this._blurThicknessFilterSize;\r\n    }\r\n\r\n    public set blurThicknessFilterSize(filterSize: number) {\r\n        if (this._blurThicknessFilterSize === filterSize) {\r\n            return;\r\n        }\r\n\r\n        this._blurThicknessFilterSize = filterSize;\r\n        this._setBlurParameters();\r\n    }\r\n\r\n    private _blurThicknessNumIterations = 1;\r\n\r\n    /**\r\n     * Number of blurring iterations used to generate the thickness blur texture (positive number, generally between 1 and 10 - higher values will require more processing power from the GPU)\r\n     */\r\n    public get blurThicknessNumIterations() {\r\n        return this._blurThicknessNumIterations;\r\n    }\r\n\r\n    public set blurThicknessNumIterations(numIterations: number) {\r\n        if (this._blurThicknessNumIterations === numIterations) {\r\n            return;\r\n        }\r\n\r\n        this._blurThicknessNumIterations = numIterations;\r\n        this._setBlurParameters();\r\n    }\r\n\r\n    private _useFixedThickness = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that a fixed thickness should be used instead of generating a thickness texture\r\n     */\r\n    public get useFixedThickness() {\r\n        return this._useFixedThickness;\r\n    }\r\n\r\n    public set useFixedThickness(use: boolean) {\r\n        if (this._useFixedThickness === use) {\r\n            return;\r\n        }\r\n\r\n        this._useFixedThickness = use;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _bgDepthTexture: Nullable<InternalTexture>;\r\n\r\n    /** @internal */\r\n    public _onUseVelocityChanged = new Observable<FluidRenderingTargetRenderer>();\r\n\r\n    private _useVelocity = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the velocity should be used when rendering the particles as a fluid.\r\n     * Note: the vertex buffers must contain a \"velocity\" buffer for this to work!\r\n     */\r\n    public get useVelocity() {\r\n        return this._useVelocity;\r\n    }\r\n\r\n    public set useVelocity(use: boolean) {\r\n        if (this._useVelocity === use) {\r\n            return;\r\n        }\r\n\r\n        this._useVelocity = use;\r\n        this._needInitialization = true;\r\n        this._onUseVelocityChanged.notifyObservers(this);\r\n    }\r\n\r\n    private _depthMapSize: Nullable<number> = null;\r\n\r\n    /**\r\n     * Defines the size of the depth texture.\r\n     * If null, the texture will have the size of the screen\r\n     */\r\n    public get depthMapSize() {\r\n        return this._depthMapSize;\r\n    }\r\n\r\n    public set depthMapSize(size: Nullable<number>) {\r\n        if (this._depthMapSize === size) {\r\n            return;\r\n        }\r\n\r\n        this._depthMapSize = size;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _thicknessMapSize: Nullable<number> = null;\r\n\r\n    /**\r\n     * Defines the size of the thickness texture.\r\n     * If null, the texture will have the size of the screen\r\n     */\r\n    public get thicknessMapSize() {\r\n        return this._thicknessMapSize;\r\n    }\r\n\r\n    public set thicknessMapSize(size: Nullable<number>) {\r\n        if (this._thicknessMapSize === size) {\r\n            return;\r\n        }\r\n\r\n        this._thicknessMapSize = size;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _diffuseMapSize: Nullable<number> = null;\r\n\r\n    /**\r\n     * Defines the size of the diffuse texture.\r\n     * If null, the texture will have the size of the screen\r\n     */\r\n    public get diffuseMapSize() {\r\n        return this._diffuseMapSize;\r\n    }\r\n\r\n    public set diffuseMapSize(size: Nullable<number>) {\r\n        if (this._diffuseMapSize === size) {\r\n            return;\r\n        }\r\n\r\n        this._diffuseMapSize = size;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _samples = 1;\r\n\r\n    /**\r\n     * Gets or sets the number of samples used by MSAA\r\n     * Note: changing this value in WebGL does not work because depth/stencil textures can't be created with MSAA (see https://github.com/BabylonJS/Babylon.js/issues/12444)\r\n     */\r\n    public get samples() {\r\n        return this._samples;\r\n    }\r\n\r\n    public set samples(samples: number) {\r\n        if (this._samples === samples) {\r\n            return;\r\n        }\r\n\r\n        this._samples = samples;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    /**\r\n     * Gets the camera used for the rendering\r\n     */\r\n    public get camera() {\r\n        return this._camera;\r\n    }\r\n\r\n    /** @internal */\r\n    public _renderPostProcess: Nullable<PostProcess>;\r\n\r\n    /** @internal */\r\n    public _depthRenderTarget: Nullable<FluidRenderingTextures>;\r\n\r\n    /** @internal */\r\n    public _diffuseRenderTarget: Nullable<FluidRenderingTextures>;\r\n\r\n    /** @internal */\r\n    public _thicknessRenderTarget: Nullable<FluidRenderingTextures>;\r\n\r\n    /**\r\n     * Creates an instance of the class\r\n     * @param scene Scene used to render the fluid object into\r\n     * @param camera Camera used to render the fluid object. If not provided, use the active camera of the scene instead\r\n     */\r\n    constructor(scene: Scene, camera?: Camera) {\r\n        this._scene = scene;\r\n        this._engine = scene.getEngine();\r\n        this._camera = camera ?? scene.activeCamera;\r\n        this._needInitialization = true;\r\n        this._bgDepthTexture = null;\r\n\r\n        this._invProjectionMatrix = new Matrix();\r\n        this._depthClearColor = new Color4(1e6, 1e6, 1e6, 1);\r\n        this._thicknessClearColor = new Color4(0, 0, 0, 1);\r\n\r\n        this._depthRenderTarget = null;\r\n        this._diffuseRenderTarget = null;\r\n        this._thicknessRenderTarget = null;\r\n\r\n        this._renderPostProcess = null;\r\n    }\r\n\r\n    /** @internal */\r\n    public _initialize(): void {\r\n        this.dispose();\r\n\r\n        this._needInitialization = false;\r\n\r\n        const depthWidth = this._depthMapSize ?? this._engine.getRenderWidth();\r\n        const depthHeight =\r\n            this._depthMapSize !== null ? Math.round((this._depthMapSize * this._engine.getRenderHeight()) / this._engine.getRenderWidth()) : this._engine.getRenderHeight();\r\n\r\n        this._depthRenderTarget = new FluidRenderingTextures(\r\n            \"Depth\",\r\n            this._scene,\r\n            depthWidth,\r\n            depthHeight,\r\n            depthWidth,\r\n            depthHeight,\r\n            Constants.TEXTURETYPE_FLOAT,\r\n            Constants.TEXTUREFORMAT_RG,\r\n            Constants.TEXTURETYPE_FLOAT,\r\n            Constants.TEXTUREFORMAT_RG,\r\n            false,\r\n            this._camera,\r\n            true,\r\n            this._samples\r\n        );\r\n\r\n        this._initializeRenderTarget(this._depthRenderTarget);\r\n\r\n        if (this.generateDiffuseTexture) {\r\n            const diffuseWidth = this._diffuseMapSize ?? this._engine.getRenderWidth();\r\n            const diffuseHeight =\r\n                this._diffuseMapSize !== null\r\n                    ? Math.round((this._diffuseMapSize * this._engine.getRenderHeight()) / this._engine.getRenderWidth())\r\n                    : this._engine.getRenderHeight();\r\n\r\n            this._diffuseRenderTarget = new FluidRenderingTextures(\r\n                \"Diffuse\",\r\n                this._scene,\r\n                diffuseWidth,\r\n                diffuseHeight,\r\n                0,\r\n                0,\r\n                Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n                Constants.TEXTUREFORMAT_RGBA,\r\n                Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n                Constants.TEXTUREFORMAT_RGBA,\r\n                true,\r\n                this._camera,\r\n                true,\r\n                this._samples\r\n            );\r\n\r\n            this._initializeRenderTarget(this._diffuseRenderTarget);\r\n        }\r\n\r\n        const thicknessWidth = this._thicknessMapSize ?? this._engine.getRenderWidth();\r\n        const thicknessHeight =\r\n            this._thicknessMapSize !== null\r\n                ? Math.round((this._thicknessMapSize * this._engine.getRenderHeight()) / this._engine.getRenderWidth())\r\n                : this._engine.getRenderHeight();\r\n\r\n        if (!this._useFixedThickness) {\r\n            this._thicknessRenderTarget = new FluidRenderingTextures(\r\n                \"Thickness\",\r\n                this._scene,\r\n                thicknessWidth,\r\n                thicknessHeight,\r\n                thicknessWidth,\r\n                thicknessHeight,\r\n                Constants.TEXTURETYPE_HALF_FLOAT,\r\n                Constants.TEXTUREFORMAT_R,\r\n                Constants.TEXTURETYPE_HALF_FLOAT,\r\n                Constants.TEXTUREFORMAT_R,\r\n                true,\r\n                this._camera,\r\n                false,\r\n                this._samples\r\n            );\r\n\r\n            this._initializeRenderTarget(this._thicknessRenderTarget);\r\n        }\r\n\r\n        this._createLiquidRenderingPostProcess();\r\n    }\r\n\r\n    protected _setBlurParameters(renderTarget: Nullable<FluidRenderingTextures> = null): void {\r\n        if (renderTarget === null || renderTarget === this._depthRenderTarget) {\r\n            this._setBlurDepthParameters();\r\n        }\r\n        if (renderTarget === null || renderTarget === this._thicknessRenderTarget) {\r\n            this._setBlurThicknessParameters();\r\n        }\r\n    }\r\n\r\n    protected _setBlurDepthParameters(): void {\r\n        if (!this._depthRenderTarget) {\r\n            return;\r\n        }\r\n        this._depthRenderTarget.blurFilterSize = this.blurDepthFilterSize;\r\n        this._depthRenderTarget.blurMaxFilterSize = this.blurDepthMaxFilterSize;\r\n        this._depthRenderTarget.blurNumIterations = this.blurDepthNumIterations;\r\n        this._depthRenderTarget.blurDepthScale = this.blurDepthDepthScale;\r\n    }\r\n\r\n    protected _setBlurThicknessParameters(): void {\r\n        if (!this._thicknessRenderTarget) {\r\n            return;\r\n        }\r\n        this._thicknessRenderTarget.blurFilterSize = this.blurThicknessFilterSize;\r\n        this._thicknessRenderTarget.blurNumIterations = this.blurThicknessNumIterations;\r\n    }\r\n\r\n    protected _initializeRenderTarget(renderTarget: FluidRenderingTextures): void {\r\n        if (renderTarget !== this._diffuseRenderTarget) {\r\n            renderTarget.enableBlur = renderTarget === this._depthRenderTarget ? this.enableBlurDepth : this.enableBlurThickness;\r\n            renderTarget.blurSizeDivisor = renderTarget === this._depthRenderTarget ? this.blurDepthSizeDivisor : this.blurThicknessSizeDivisor;\r\n        }\r\n\r\n        this._setBlurParameters(renderTarget);\r\n\r\n        renderTarget.initialize();\r\n    }\r\n\r\n    protected _createLiquidRenderingPostProcess(): void {\r\n        const engine = this._scene.getEngine();\r\n\r\n        const uniformNames = [\r\n            \"viewMatrix\",\r\n            \"projectionMatrix\",\r\n            \"invProjectionMatrix\",\r\n            \"texelSize\",\r\n            \"dirLight\",\r\n            \"cameraFar\",\r\n            \"density\",\r\n            \"refractionStrength\",\r\n            \"fresnelClamp\",\r\n            \"specularPower\",\r\n        ];\r\n        const samplerNames = [\"depthSampler\"];\r\n        const defines = [];\r\n\r\n        this.dispose(true);\r\n\r\n        if (!this._camera) {\r\n            return;\r\n        }\r\n\r\n        const texture = this._depthRenderTarget!.enableBlur ? this._depthRenderTarget!.textureBlur! : this._depthRenderTarget!.texture!;\r\n        const texelSize = new Vector2(1 / texture.getSize().width, 1 / texture.getSize().height);\r\n\r\n        if (this._environmentMap !== null) {\r\n            const envMap = this._environmentMap ?? this._scene.environmentTexture;\r\n            if (envMap) {\r\n                samplerNames.push(\"reflectionSampler\");\r\n                defines.push(\"#define FLUIDRENDERING_ENVIRONMENT\");\r\n            }\r\n        }\r\n\r\n        if (this._diffuseRenderTarget) {\r\n            samplerNames.push(\"diffuseSampler\");\r\n            defines.push(\"#define FLUIDRENDERING_DIFFUSETEXTURE\");\r\n        } else {\r\n            uniformNames.push(\"diffuseColor\");\r\n        }\r\n\r\n        if (this._useVelocity) {\r\n            samplerNames.push(\"velocitySampler\");\r\n            defines.push(\"#define FLUIDRENDERING_VELOCITY\");\r\n        }\r\n\r\n        if (this._useFixedThickness) {\r\n            uniformNames.push(\"thickness\");\r\n            samplerNames.push(\"bgDepthSampler\");\r\n            defines.push(\"#define FLUIDRENDERING_FIXED_THICKNESS\");\r\n        } else {\r\n            uniformNames.push(\"minimumThickness\");\r\n            samplerNames.push(\"thicknessSampler\");\r\n        }\r\n\r\n        if (this._debug) {\r\n            defines.push(\"#define FLUIDRENDERING_DEBUG\");\r\n            if (this._debugFeature === FluidRenderingDebug.Normals) {\r\n                defines.push(\"#define FLUIDRENDERING_DEBUG_SHOWNORMAL\");\r\n            } else if (this._debugFeature === FluidRenderingDebug.DiffuseRendering) {\r\n                defines.push(\"#define FLUIDRENDERING_DEBUG_DIFFUSERENDERING\");\r\n            } else {\r\n                defines.push(\"#define FLUIDRENDERING_DEBUG_TEXTURE\");\r\n                samplerNames.push(\"debugSampler\");\r\n                if (this._debugFeature === FluidRenderingDebug.DepthTexture || this._debugFeature === FluidRenderingDebug.DepthBlurredTexture) {\r\n                    defines.push(\"#define FLUIDRENDERING_DEBUG_DEPTH\");\r\n                }\r\n            }\r\n        }\r\n\r\n        this._renderPostProcess = new PostProcess(\r\n            \"FluidRendering\",\r\n            \"fluidRenderingRender\",\r\n            uniformNames,\r\n            samplerNames,\r\n            1,\r\n            null,\r\n            Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n            engine,\r\n            false,\r\n            null,\r\n            Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n            undefined,\r\n            undefined,\r\n            true,\r\n            undefined\r\n        );\r\n        this._renderPostProcess.updateEffect(defines.join(\"\\n\"));\r\n\r\n        this._renderPostProcess.samples = this._samples;\r\n        this._renderPostProcess.onApplyObservable.add((effect) => {\r\n            this._invProjectionMatrix.copyFrom(this._scene.getProjectionMatrix());\r\n            this._invProjectionMatrix.invert();\r\n\r\n            if (engine.isWebGPU) {\r\n                effect.setTextureSampler(\"textureSamplerSampler\", this._renderPostProcess!.inputTexture.texture);\r\n            }\r\n\r\n            if (!this._depthRenderTarget!.enableBlur) {\r\n                effect.setTexture(\"depthSampler\", this._depthRenderTarget!.texture);\r\n                if (engine.isWebGPU) {\r\n                    effect.setTextureSampler(\"depthSamplerSampler\", this._depthRenderTarget!.texture?.getInternalTexture() ?? null);\r\n                }\r\n            } else {\r\n                effect.setTexture(\"depthSampler\", this._depthRenderTarget!.textureBlur);\r\n                if (engine.isWebGPU) {\r\n                    effect.setTextureSampler(\"depthSamplerSampler\", this._depthRenderTarget!.textureBlur?.getInternalTexture() ?? null);\r\n                }\r\n            }\r\n            if (this._diffuseRenderTarget) {\r\n                if (!this._diffuseRenderTarget.enableBlur) {\r\n                    effect.setTexture(\"diffuseSampler\", this._diffuseRenderTarget.texture);\r\n                    if (engine.isWebGPU) {\r\n                        effect.setTextureSampler(\"diffuseSamplerSampler\", this._diffuseRenderTarget.texture?.getInternalTexture() ?? null);\r\n                    }\r\n                } else {\r\n                    effect.setTexture(\"diffuseSampler\", this._diffuseRenderTarget.textureBlur);\r\n                    if (engine.isWebGPU) {\r\n                        effect.setTextureSampler(\"diffuseSamplerSampler\", this._diffuseRenderTarget.textureBlur?.getInternalTexture() ?? null);\r\n                    }\r\n                }\r\n            } else {\r\n                effect.setColor3(\"diffuseColor\", this.fluidColor);\r\n            }\r\n            if (this._useFixedThickness) {\r\n                effect.setFloat(\"thickness\", this.minimumThickness);\r\n                effect._bindTexture(\"bgDepthSampler\", this._bgDepthTexture);\r\n                if (engine.isWebGPU) {\r\n                    effect.setTextureSampler(\"bgDepthSamplerSampler\", this._bgDepthTexture ?? null);\r\n                }\r\n            } else {\r\n                if (!this._thicknessRenderTarget!.enableBlur) {\r\n                    effect.setTexture(\"thicknessSampler\", this._thicknessRenderTarget!.texture);\r\n                    if (engine.isWebGPU) {\r\n                        effect.setTextureSampler(\"thicknessSamplerSampler\", this._thicknessRenderTarget!.texture?.getInternalTexture() ?? null);\r\n                    }\r\n                } else {\r\n                    effect.setTexture(\"thicknessSampler\", this._thicknessRenderTarget!.textureBlur);\r\n                    if (engine.isWebGPU) {\r\n                        effect.setTextureSampler(\"thicknessSamplerSampler\", this._thicknessRenderTarget!.textureBlur?.getInternalTexture() ?? null);\r\n                    }\r\n                }\r\n                effect.setFloat(\"minimumThickness\", this.minimumThickness);\r\n            }\r\n\r\n            if (this._environmentMap !== null) {\r\n                const envMap = this._environmentMap ?? this._scene.environmentTexture;\r\n                if (envMap) {\r\n                    effect.setTexture(\"reflectionSampler\", envMap);\r\n                    if (engine.isWebGPU) {\r\n                        effect.setTextureSampler(\"reflectionSamplerSampler\", envMap?.getInternalTexture() ?? null);\r\n                    }\r\n                }\r\n            }\r\n\r\n            effect.setMatrix(\"viewMatrix\", this._scene.getViewMatrix());\r\n            effect.setMatrix(\"invProjectionMatrix\", this._invProjectionMatrix);\r\n            effect.setMatrix(\"projectionMatrix\", this._scene.getProjectionMatrix());\r\n            effect.setVector2(\"texelSize\", texelSize);\r\n            effect.setFloat(\"density\", this.density);\r\n            effect.setFloat(\"refractionStrength\", this.refractionStrength);\r\n            effect.setFloat(\"fresnelClamp\", this.fresnelClamp);\r\n            effect.setFloat(\"specularPower\", this.specularPower);\r\n\r\n            effect.setVector3(\"dirLight\", this.dirLight);\r\n\r\n            effect.setFloat(\"cameraFar\", this._camera!.maxZ);\r\n\r\n            if (this._debug) {\r\n                let texture: Nullable<ThinTexture> = null;\r\n                switch (this._debugFeature) {\r\n                    case FluidRenderingDebug.DepthTexture:\r\n                        texture = this._depthRenderTarget!.texture;\r\n                        break;\r\n                    case FluidRenderingDebug.DepthBlurredTexture:\r\n                        texture = this._depthRenderTarget!.enableBlur ? this._depthRenderTarget!.textureBlur : this._depthRenderTarget!.texture;\r\n                        break;\r\n                    case FluidRenderingDebug.ThicknessTexture:\r\n                        texture = this._thicknessRenderTarget?.texture ?? null;\r\n                        break;\r\n                    case FluidRenderingDebug.ThicknessBlurredTexture:\r\n                        texture = this._thicknessRenderTarget?.enableBlur ? this._thicknessRenderTarget?.textureBlur ?? null : this._thicknessRenderTarget?.texture ?? null;\r\n                        break;\r\n                    case FluidRenderingDebug.DiffuseTexture:\r\n                        if (this._diffuseRenderTarget) {\r\n                            texture = this._diffuseRenderTarget.texture;\r\n                        }\r\n                        break;\r\n                }\r\n                if (this._debugFeature !== FluidRenderingDebug.Normals) {\r\n                    effect.setTexture(\"debugSampler\", texture);\r\n                    if (engine.isWebGPU) {\r\n                        effect.setTextureSampler(\"debugSamplerSampler\", texture?.getInternalTexture() ?? null);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /** @internal */\r\n    public _clearTargets(): void {\r\n        if (this._depthRenderTarget?.renderTarget) {\r\n            this._engine.bindFramebuffer(this._depthRenderTarget.renderTarget);\r\n            this._engine.clear(this._depthClearColor, true, true, false);\r\n            this._engine.unBindFramebuffer(this._depthRenderTarget.renderTarget);\r\n        }\r\n\r\n        if (this._diffuseRenderTarget?.renderTarget) {\r\n            this._engine.bindFramebuffer(this._diffuseRenderTarget.renderTarget);\r\n            this._engine.clear(this._thicknessClearColor, true, true, false);\r\n            this._engine.unBindFramebuffer(this._diffuseRenderTarget.renderTarget);\r\n        }\r\n\r\n        if (this._thicknessRenderTarget?.renderTarget) {\r\n            this._engine.bindFramebuffer(this._thicknessRenderTarget.renderTarget);\r\n            // we don't clear the depth buffer because it is the depth buffer that is coming from the scene and that we reuse in the thickness rendering pass\r\n            this._engine.clear(this._thicknessClearColor, true, false, false);\r\n            this._engine.unBindFramebuffer(this._thicknessRenderTarget.renderTarget);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _render(fluidObject: FluidRenderingObject): void {\r\n        if (this._needInitialization || !fluidObject.isReady()) {\r\n            return;\r\n        }\r\n\r\n        const currentRenderTarget = this._engine._currentRenderTarget;\r\n\r\n        this._engine.setState(false, undefined, undefined, undefined, true);\r\n        this._engine.setDepthBuffer(true);\r\n        this._engine.setDepthWrite(true);\r\n        this._engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n\r\n        // Render the particles in the depth texture\r\n        if (this._depthRenderTarget?.renderTarget) {\r\n            this._engine.bindFramebuffer(this._depthRenderTarget.renderTarget);\r\n\r\n            fluidObject.renderDepthTexture();\r\n\r\n            this._engine.unbindInstanceAttributes();\r\n            this._engine.unBindFramebuffer(this._depthRenderTarget.renderTarget);\r\n        }\r\n\r\n        // Render the particles in the diffuse texture\r\n        if (this._diffuseRenderTarget?.renderTarget) {\r\n            this._engine.bindFramebuffer(this._diffuseRenderTarget.renderTarget);\r\n\r\n            fluidObject.renderDiffuseTexture();\r\n\r\n            this._engine.unbindInstanceAttributes();\r\n            this._engine.unBindFramebuffer(this._diffuseRenderTarget.renderTarget);\r\n        }\r\n\r\n        // Render the particles in the thickness texture\r\n        if (this._thicknessRenderTarget?.renderTarget) {\r\n            this._engine.bindFramebuffer(this._thicknessRenderTarget.renderTarget);\r\n\r\n            fluidObject.renderThicknessTexture();\r\n\r\n            this._engine.unbindInstanceAttributes();\r\n            this._engine.unBindFramebuffer(this._thicknessRenderTarget.renderTarget);\r\n        }\r\n\r\n        // Run the blur post processes\r\n        this._depthRenderTarget?.applyBlurPostProcesses();\r\n        this._diffuseRenderTarget?.applyBlurPostProcesses();\r\n        this._thicknessRenderTarget?.applyBlurPostProcesses();\r\n\r\n        if (currentRenderTarget) {\r\n            this._engine.bindFramebuffer(currentRenderTarget);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all the ressources used by the class\r\n     * @param onlyPostProcesses If true, releases only the ressources used by the render post processes\r\n     */\r\n    public dispose(onlyPostProcesses = false): void {\r\n        if (!onlyPostProcesses) {\r\n            this._depthRenderTarget?.dispose();\r\n            this._depthRenderTarget = null;\r\n\r\n            this._diffuseRenderTarget?.dispose();\r\n            this._diffuseRenderTarget = null;\r\n\r\n            this._thicknessRenderTarget?.dispose();\r\n            this._thicknessRenderTarget = null;\r\n        }\r\n\r\n        if (this._renderPostProcess && this._camera) {\r\n            this._camera.detachPostProcess(this._renderPostProcess);\r\n        }\r\n        this._renderPostProcess?.dispose();\r\n        this._renderPostProcess = null;\r\n\r\n        this._needInitialization = false;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}