{"ast":null,"code":"import { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Block used to output the vertex position\n */\nexport class VertexOutputBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new VertexOutputBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Vertex, true);\n    this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.Vector4);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"VertexOutputBlock\";\n  }\n  /**\n   * Gets the vector input component\n   */\n  get vector() {\n    return this._inputs[0];\n  }\n  _isLogarithmicDepthEnabled(nodeList) {\n    for (const node of nodeList) {\n      if (node.useLogarithmicDepth) {\n        return true;\n      }\n    }\n    return false;\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const input = this.vector;\n    state.compilationString += `gl_Position = ${input.associatedVariableName};\\r\\n`;\n    if (this._isLogarithmicDepthEnabled(state.sharedData.fragmentOutputNodes)) {\n      state._emitUniformFromString(\"logarithmicDepthConstant\", \"float\");\n      state._emitVaryingFromString(\"vFragmentDepth\", \"float\");\n      state.compilationString += `vFragmentDepth = 1.0 + gl_Position.w;\\r\\n`;\n      state.compilationString += `gl_Position.z = log2(max(0.000001, vFragmentDepth)) * logarithmicDepthConstant;\\r\\n`;\n    }\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.VertexOutputBlock\", VertexOutputBlock);","map":{"version":3,"mappings":"AAAA,SAASA,iBAAiB,QAAQ,4BAA0B;AAC5D,SAASC,qCAAqC,QAAQ,sDAAoD;AAE1G,SAASC,wBAAwB,QAAQ,yCAAuC;AAEhF,SAASC,aAAa,QAAQ,+BAA6B;AAK3D;;;AAGA,OAAM,MAAOC,iBAAkB,SAAQJ,iBAAiB;EACpD;;;;EAIAK,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,EAAEJ,wBAAwB,CAACK,MAAM,EAAE,IAAI,CAAC;IAElD,IAAI,CAACC,aAAa,CAAC,QAAQ,EAAEP,qCAAqC,CAACQ,OAAO,CAAC;EAC/E;EAEA;;;;EAIOC,YAAY;IACf,OAAO,mBAAmB;EAC9B;EAEA;;;EAGA,IAAWC,MAAM;IACb,OAAO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEQC,0BAA0B,CAACC,QAAwC;IACvE,KAAK,MAAMC,IAAI,IAAID,QAAQ,EAAE;MACzB,IAAKC,IAA4B,CAACC,mBAAmB,EAAE;QACnD,OAAO,IAAI;;;IAGnB,OAAO,KAAK;EAChB;EAEUC,WAAW,CAACC,KAA6B;IAC/C,KAAK,CAACD,WAAW,CAACC,KAAK,CAAC;IAExB,MAAMC,KAAK,GAAG,IAAI,CAACR,MAAM;IAEzBO,KAAK,CAACE,iBAAiB,IAAI,iBAAiBD,KAAK,CAACE,sBAAsB,OAAO;IAE/E,IAAI,IAAI,CAACR,0BAA0B,CAACK,KAAK,CAACI,UAAU,CAACC,mBAAmB,CAAC,EAAE;MACvEL,KAAK,CAACM,sBAAsB,CAAC,0BAA0B,EAAE,OAAO,CAAC;MACjEN,KAAK,CAACO,sBAAsB,CAAC,gBAAgB,EAAE,OAAO,CAAC;MAEvDP,KAAK,CAACE,iBAAiB,IAAI,2CAA2C;MACtEF,KAAK,CAACE,iBAAiB,IAAI,qFAAqF;;IAGpH,OAAO,IAAI;EACf;;AAGJjB,aAAa,CAAC,2BAA2B,EAAEC,iBAAiB,CAAC","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","VertexOutputBlock","constructor","name","Vertex","registerInput","Vector4","getClassName","vector","_inputs","_isLogarithmicDepthEnabled","nodeList","node","useLogarithmicDepth","_buildBlock","state","input","compilationString","associatedVariableName","sharedData","fragmentOutputNodes","_emitUniformFromString","_emitVaryingFromString"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/Vertex/vertexOutputBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { Immutable } from \"../../../../types\";\r\n\r\ndeclare type FragmentOutputBlock = import(\"../Fragment/fragmentOutputBlock\").FragmentOutputBlock;\r\n\r\n/**\r\n * Block used to output the vertex position\r\n */\r\nexport class VertexOutputBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new VertexOutputBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Vertex, true);\r\n\r\n        this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"VertexOutputBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the vector input component\r\n     */\r\n    public get vector(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    private _isLogarithmicDepthEnabled(nodeList: Immutable<NodeMaterialBlock[]>): boolean {\r\n        for (const node of nodeList) {\r\n            if ((node as FragmentOutputBlock).useLogarithmicDepth) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const input = this.vector;\r\n\r\n        state.compilationString += `gl_Position = ${input.associatedVariableName};\\r\\n`;\r\n\r\n        if (this._isLogarithmicDepthEnabled(state.sharedData.fragmentOutputNodes)) {\r\n            state._emitUniformFromString(\"logarithmicDepthConstant\", \"float\");\r\n            state._emitVaryingFromString(\"vFragmentDepth\", \"float\");\r\n\r\n            state.compilationString += `vFragmentDepth = 1.0 + gl_Position.w;\\r\\n`;\r\n            state.compilationString += `gl_Position.z = log2(max(0.000001, vFragmentDepth)) * logarithmicDepthConstant;\\r\\n`;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.VertexOutputBlock\", VertexOutputBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}