{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/** @internal */\nexport class WebGPURenderItemViewport {\n  constructor(x, y, w, h) {\n    this.x = Math.floor(x);\n    this.y = Math.floor(y);\n    this.w = Math.floor(w);\n    this.h = Math.floor(h);\n  }\n  run(renderPass) {\n    renderPass.setViewport(this.x, this.y, this.w, this.h, 0, 1);\n  }\n  clone() {\n    return new WebGPURenderItemViewport(this.x, this.y, this.w, this.h);\n  }\n}\n/** @internal */\nexport class WebGPURenderItemScissor {\n  constructor(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n  run(renderPass) {\n    renderPass.setScissorRect(this.x, this.y, this.w, this.h);\n  }\n  clone() {\n    return new WebGPURenderItemScissor(this.x, this.y, this.w, this.h);\n  }\n}\n/** @internal */\nexport class WebGPURenderItemStencilRef {\n  constructor(ref) {\n    this.ref = ref;\n  }\n  run(renderPass) {\n    renderPass.setStencilReference(this.ref);\n  }\n  clone() {\n    return new WebGPURenderItemStencilRef(this.ref);\n  }\n}\n/** @internal */\nexport class WebGPURenderItemBlendColor {\n  constructor(color) {\n    this.color = color;\n  }\n  run(renderPass) {\n    renderPass.setBlendConstant(this.color);\n  }\n  clone() {\n    return new WebGPURenderItemBlendColor(this.color);\n  }\n}\n/** @internal */\nexport class WebGPURenderItemBeginOcclusionQuery {\n  constructor(query) {\n    this.query = query;\n  }\n  run(renderPass) {\n    renderPass.beginOcclusionQuery(this.query);\n  }\n  clone() {\n    return new WebGPURenderItemBeginOcclusionQuery(this.query);\n  }\n}\n/** @internal */\nexport class WebGPURenderItemEndOcclusionQuery {\n  constructor() {}\n  run(renderPass) {\n    renderPass.endOcclusionQuery();\n  }\n  clone() {\n    return new WebGPURenderItemEndOcclusionQuery();\n  }\n}\nclass WebGPURenderItemBundles {\n  constructor() {\n    this.bundles = [];\n  }\n  run(renderPass) {\n    renderPass.executeBundles(this.bundles);\n  }\n  clone() {\n    const cloned = new WebGPURenderItemBundles();\n    cloned.bundles = this.bundles;\n    return cloned;\n  }\n}\n/** @internal */\nexport class WebGPUBundleList {\n  constructor(device) {\n    this.numDrawCalls = 0;\n    this._device = device;\n    this._list = new Array(10);\n    this._listLength = 0;\n  }\n  addBundle(bundle) {\n    if (!this._currentItemIsBundle) {\n      const item = new WebGPURenderItemBundles();\n      this._list[this._listLength++] = item;\n      this._currentBundleList = item.bundles;\n      this._currentItemIsBundle = true;\n    }\n    if (bundle) {\n      this._currentBundleList.push(bundle);\n    }\n  }\n  _finishBundle() {\n    if (this._currentItemIsBundle && this._bundleEncoder) {\n      this._currentBundleList.push(this._bundleEncoder.finish());\n      this._bundleEncoder = undefined;\n      this._currentItemIsBundle = false;\n    }\n  }\n  addItem(item) {\n    this._finishBundle();\n    this._list[this._listLength++] = item;\n    this._currentItemIsBundle = false;\n  }\n  getBundleEncoder(colorFormats, depthStencilFormat, sampleCount) {\n    if (!this._currentItemIsBundle) {\n      this.addBundle();\n      this._bundleEncoder = this._device.createRenderBundleEncoder({\n        colorFormats,\n        depthStencilFormat,\n        sampleCount\n      });\n    }\n    return this._bundleEncoder;\n  }\n  close() {\n    this._finishBundle();\n  }\n  run(renderPass) {\n    this.close();\n    for (let i = 0; i < this._listLength; ++i) {\n      this._list[i].run(renderPass);\n    }\n  }\n  reset() {\n    this._listLength = 0;\n    this._currentItemIsBundle = false;\n    this.numDrawCalls = 0;\n  }\n  clone() {\n    this.close();\n    const cloned = new WebGPUBundleList(this._device);\n    cloned._list = new Array(this._listLength);\n    cloned._listLength = this._listLength;\n    cloned.numDrawCalls = this.numDrawCalls;\n    for (let i = 0; i < this._listLength; ++i) {\n      cloned._list[i] = this._list[i].clone();\n    }\n    return cloned;\n  }\n}","map":{"version":3,"mappings":"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","names":["WebGPURenderItemViewport","constructor","x","y","w","h","Math","floor","run","renderPass","setViewport","clone","WebGPURenderItemScissor","setScissorRect","WebGPURenderItemStencilRef","ref","setStencilReference","WebGPURenderItemBlendColor","color","setBlendConstant","WebGPURenderItemBeginOcclusionQuery","query","beginOcclusionQuery","WebGPURenderItemEndOcclusionQuery","endOcclusionQuery","WebGPURenderItemBundles","bundles","executeBundles","cloned","WebGPUBundleList","device","_device","_list","Array","_listLength","addBundle","bundle","_currentItemIsBundle","item","_currentBundleList","push","_finishBundle","_bundleEncoder","finish","undefined","addItem","getBundleEncoder","colorFormats","depthStencilFormat","sampleCount","createRenderBundleEncoder","close","i","reset","numDrawCalls"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/WebGPU/webgpuBundleList.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\n\r\n/** @internal */\r\ninterface IWebGPURenderItem {\r\n    run(renderPass: GPURenderPassEncoder): void;\r\n    clone(): IWebGPURenderItem;\r\n}\r\n\r\n/** @internal */\r\nexport class WebGPURenderItemViewport implements IWebGPURenderItem {\r\n    public x: number;\r\n    public y: number;\r\n    public w: number;\r\n    public h: number;\r\n\r\n    public constructor(x: number, y: number, w: number, h: number) {\r\n        this.x = Math.floor(x);\r\n        this.y = Math.floor(y);\r\n        this.w = Math.floor(w);\r\n        this.h = Math.floor(h);\r\n    }\r\n\r\n    public run(renderPass: GPURenderPassEncoder) {\r\n        renderPass.setViewport(this.x, this.y, this.w, this.h, 0, 1);\r\n    }\r\n\r\n    public clone(): WebGPURenderItemViewport {\r\n        return new WebGPURenderItemViewport(this.x, this.y, this.w, this.h);\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport class WebGPURenderItemScissor implements IWebGPURenderItem {\r\n    public constructor(public x: number, public y: number, public w: number, public h: number) {}\r\n\r\n    public run(renderPass: GPURenderPassEncoder) {\r\n        renderPass.setScissorRect(this.x, this.y, this.w, this.h);\r\n    }\r\n\r\n    public clone(): WebGPURenderItemScissor {\r\n        return new WebGPURenderItemScissor(this.x, this.y, this.w, this.h);\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport class WebGPURenderItemStencilRef implements IWebGPURenderItem {\r\n    public constructor(public ref: number) {}\r\n\r\n    public run(renderPass: GPURenderPassEncoder) {\r\n        renderPass.setStencilReference(this.ref);\r\n    }\r\n\r\n    public clone(): WebGPURenderItemStencilRef {\r\n        return new WebGPURenderItemStencilRef(this.ref);\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport class WebGPURenderItemBlendColor implements IWebGPURenderItem {\r\n    public constructor(public color: Nullable<number>[]) {}\r\n\r\n    public run(renderPass: GPURenderPassEncoder) {\r\n        renderPass.setBlendConstant(this.color as GPUColor);\r\n    }\r\n\r\n    public clone(): WebGPURenderItemBlendColor {\r\n        return new WebGPURenderItemBlendColor(this.color);\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport class WebGPURenderItemBeginOcclusionQuery implements IWebGPURenderItem {\r\n    public constructor(public query: number) {}\r\n\r\n    public run(renderPass: GPURenderPassEncoder) {\r\n        renderPass.beginOcclusionQuery(this.query);\r\n    }\r\n\r\n    public clone(): WebGPURenderItemBeginOcclusionQuery {\r\n        return new WebGPURenderItemBeginOcclusionQuery(this.query);\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport class WebGPURenderItemEndOcclusionQuery implements IWebGPURenderItem {\r\n    public constructor() {}\r\n\r\n    public run(renderPass: GPURenderPassEncoder) {\r\n        renderPass.endOcclusionQuery();\r\n    }\r\n\r\n    public clone(): WebGPURenderItemEndOcclusionQuery {\r\n        return new WebGPURenderItemEndOcclusionQuery();\r\n    }\r\n}\r\n\r\nclass WebGPURenderItemBundles implements IWebGPURenderItem {\r\n    public bundles: GPURenderBundle[];\r\n\r\n    public constructor() {\r\n        this.bundles = [];\r\n    }\r\n\r\n    public run(renderPass: GPURenderPassEncoder) {\r\n        renderPass.executeBundles(this.bundles);\r\n    }\r\n\r\n    public clone(): WebGPURenderItemBundles {\r\n        const cloned = new WebGPURenderItemBundles();\r\n        cloned.bundles = this.bundles;\r\n        return cloned;\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport class WebGPUBundleList {\r\n    private _device: GPUDevice;\r\n    private _bundleEncoder: GPURenderBundleEncoder | undefined;\r\n\r\n    private _list: IWebGPURenderItem[];\r\n    private _listLength: number;\r\n\r\n    private _currentItemIsBundle: boolean;\r\n    private _currentBundleList: GPURenderBundle[];\r\n\r\n    public numDrawCalls = 0;\r\n\r\n    public constructor(device: GPUDevice) {\r\n        this._device = device;\r\n        this._list = new Array(10);\r\n        this._listLength = 0;\r\n    }\r\n\r\n    public addBundle(bundle?: GPURenderBundle): void {\r\n        if (!this._currentItemIsBundle) {\r\n            const item = new WebGPURenderItemBundles();\r\n\r\n            this._list[this._listLength++] = item;\r\n            this._currentBundleList = item.bundles;\r\n            this._currentItemIsBundle = true;\r\n        }\r\n        if (bundle) {\r\n            this._currentBundleList.push(bundle);\r\n        }\r\n    }\r\n\r\n    private _finishBundle(): void {\r\n        if (this._currentItemIsBundle && this._bundleEncoder) {\r\n            this._currentBundleList.push(this._bundleEncoder.finish());\r\n            this._bundleEncoder = undefined;\r\n            this._currentItemIsBundle = false;\r\n        }\r\n    }\r\n\r\n    public addItem(item: IWebGPURenderItem) {\r\n        this._finishBundle();\r\n        this._list[this._listLength++] = item;\r\n        this._currentItemIsBundle = false;\r\n    }\r\n\r\n    public getBundleEncoder(colorFormats: (GPUTextureFormat | null)[], depthStencilFormat: GPUTextureFormat | undefined, sampleCount: number): GPURenderBundleEncoder {\r\n        if (!this._currentItemIsBundle) {\r\n            this.addBundle();\r\n            this._bundleEncoder = this._device.createRenderBundleEncoder({\r\n                colorFormats,\r\n                depthStencilFormat,\r\n                sampleCount,\r\n            });\r\n        }\r\n        return this._bundleEncoder!;\r\n    }\r\n\r\n    public close(): void {\r\n        this._finishBundle();\r\n    }\r\n\r\n    public run(renderPass: GPURenderPassEncoder) {\r\n        this.close();\r\n        for (let i = 0; i < this._listLength; ++i) {\r\n            this._list[i].run(renderPass);\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this._listLength = 0;\r\n        this._currentItemIsBundle = false;\r\n        this.numDrawCalls = 0;\r\n    }\r\n\r\n    public clone(): WebGPUBundleList {\r\n        this.close();\r\n\r\n        const cloned = new WebGPUBundleList(this._device);\r\n\r\n        cloned._list = new Array(this._listLength);\r\n        cloned._listLength = this._listLength;\r\n        cloned.numDrawCalls = this.numDrawCalls;\r\n\r\n        for (let i = 0; i < this._listLength; ++i) {\r\n            cloned._list[i] = this._list[i].clone();\r\n        }\r\n\r\n        return cloned;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}