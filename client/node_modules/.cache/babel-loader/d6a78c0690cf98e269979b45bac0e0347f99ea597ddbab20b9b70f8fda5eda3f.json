{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/blackAndWhite.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * Post process used to render in black and white\n */\nexport class BlackAndWhitePostProcess extends PostProcess {\n  /**\n   * Creates a black and white post process\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#black-and-white\n   * @param name The name of the effect.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   */\n  constructor(name, options, camera, samplingMode, engine, reusable) {\n    super(name, \"blackAndWhite\", [\"degree\"], null, options, camera, samplingMode, engine, reusable);\n    /**\n     * Linear about to convert he result to black and white (default: 1)\n     */\n    this.degree = 1;\n    this.onApplyObservable.add(effect => {\n      effect.setFloat(\"degree\", this.degree);\n    });\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"BlackAndWhitePostProcess\" string\n   */\n  getClassName() {\n    return \"BlackAndWhitePostProcess\";\n  }\n  /**\n   * @internal\n   */\n  static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(() => {\n      return new BlackAndWhitePostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  }\n}\n__decorate([serialize()], BlackAndWhitePostProcess.prototype, \"degree\", void 0);\nRegisterClass(\"BABYLON.BlackAndWhitePostProcess\", BlackAndWhitePostProcess);","map":{"version":3,"mappings":";AACA,SAASA,WAAW,QAAQ,kBAAgB;AAK5C,OAAO,sCAAoC;AAC3C,SAASC,aAAa,QAAQ,sBAAoB;AAClD,SAASC,SAAS,EAAEC,mBAAmB,QAAQ,uBAAqB;AAKpE;;;AAGA,OAAM,MAAOC,wBAAyB,SAAQJ,WAAW;EAerD;;;;;;;;;;EAUAK,YAAYC,IAAY,EAAEC,OAAoC,EAAEC,MAAwB,EAAEC,YAAqB,EAAEC,MAAe,EAAEC,QAAkB;IAChJ,KAAK,CAACL,IAAI,EAAE,eAAe,EAAE,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAEC,OAAO,EAAEC,MAAM,EAAEC,YAAY,EAAEC,MAAM,EAAEC,QAAQ,CAAC;IAzBnG;;;IAIO,WAAM,GAAG,CAAC;IAuBb,IAAI,CAACC,iBAAiB,CAACC,GAAG,CAAEC,MAAc,IAAI;MAC1CA,MAAM,CAACC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAACC,MAAM,CAAC;IAC1C,CAAC,CAAC;EACN;EAxBA;;;;EAIOC,YAAY;IACf,OAAO,0BAA0B;EACrC;EAoBA;;;EAGO,OAAOC,MAAM,CAACC,iBAAsB,EAAEC,YAAoB,EAAEC,KAAY,EAAEC,OAAe;IAC5F,OAAOnB,mBAAmB,CAACoB,KAAK,CAC5B,MAAK;MACD,OAAO,IAAInB,wBAAwB,CAC/Be,iBAAiB,CAACb,IAAI,EACtBa,iBAAiB,CAACZ,OAAO,EACzBa,YAAY,EACZD,iBAAiB,CAACK,wBAAwB,EAC1CH,KAAK,CAACI,SAAS,EAAE,EACjBN,iBAAiB,CAACR,QAAQ,CAC7B;IACL,CAAC,EACDQ,iBAAiB,EACjBE,KAAK,EACLC,OAAO,CACV;EACL;;AA/CAI,YADCxB,SAAS,EAAE,wDACM;AAkDtBD,aAAa,CAAC,kCAAkC,EAAEG,wBAAwB,CAAC","names":["PostProcess","RegisterClass","serialize","SerializationHelper","BlackAndWhitePostProcess","constructor","name","options","camera","samplingMode","engine","reusable","onApplyObservable","add","effect","setFloat","degree","getClassName","_Parse","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","getEngine","__decorate"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/blackAndWhitePostProcess.ts"],"sourcesContent":["import type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { Engine } from \"../Engines/engine\";\r\n\r\nimport \"../Shaders/blackAndWhite.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize, SerializationHelper } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * Post process used to render in black and white\r\n */\r\nexport class BlackAndWhitePostProcess extends PostProcess {\r\n    /**\r\n     * Linear about to convert he result to black and white (default: 1)\r\n     */\r\n    @serialize()\r\n    public degree = 1;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"BlackAndWhitePostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"BlackAndWhitePostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a black and white post process\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#black-and-white\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     */\r\n    constructor(name: string, options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean) {\r\n        super(name, \"blackAndWhite\", [\"degree\"], null, options, camera, samplingMode, engine, reusable);\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setFloat(\"degree\", this.degree);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<BlackAndWhitePostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new BlackAndWhitePostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.BlackAndWhitePostProcess\", BlackAndWhitePostProcess);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}