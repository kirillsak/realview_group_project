{"ast":null,"code":"/**\n * Helper class used to generate session unique ID\n */\nexport class UniqueIdGenerator {\n  /**\n   * Gets an unique (relatively to the current scene) Id\n   */\n  static get UniqueId() {\n    const result = this._UniqueIdCounter;\n    this._UniqueIdCounter++;\n    return result;\n  }\n}\n// Statics\nUniqueIdGenerator._UniqueIdCounter = 1;","map":{"version":3,"mappings":"AAAA;;;AAGA,OAAM,MAAOA,iBAAiB;EAI1B;;;EAGO,WAAWC,QAAQ;IACtB,MAAMC,MAAM,GAAG,IAAI,CAACC,gBAAgB;IACpC,IAAI,CAACA,gBAAgB,EAAE;IACvB,OAAOD,MAAM;EACjB;;AAVA;AACeF,kCAAgB,GAAG,CAAC","names":["UniqueIdGenerator","UniqueId","result","_UniqueIdCounter"],"sourceRoot":"","sources":["../../../../lts/core/generated/Misc/uniqueIdGenerator.ts"],"sourcesContent":["/**\r\n * Helper class used to generate session unique ID\r\n */\r\nexport class UniqueIdGenerator {\r\n    // Statics\r\n    private static _UniqueIdCounter = 1;\r\n\r\n    /**\r\n     * Gets an unique (relatively to the current scene) Id\r\n     */\r\n    public static get UniqueId() {\r\n        const result = this._UniqueIdCounter;\r\n        this._UniqueIdCounter++;\r\n        return result;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}