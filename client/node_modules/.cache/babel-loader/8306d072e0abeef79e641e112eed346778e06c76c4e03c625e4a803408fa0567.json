{"ast":null,"code":"import { ThinEngine } from \"../../Engines/thinEngine.js\";\nThinEngine.prototype.setAlphaConstants = function (r, g, b, a) {\n  this._alphaState.setAlphaBlendConstants(r, g, b, a);\n};\nThinEngine.prototype.setAlphaMode = function (mode, noDepthWriteChange = false) {\n  if (this._alphaMode === mode) {\n    return;\n  }\n  switch (mode) {\n    case 0:\n      this._alphaState.alphaBlend = false;\n      break;\n    case 7:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 8:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 2:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 6:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ZERO, this._gl.ONE);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 1:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE, this._gl.ZERO, this._gl.ONE);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 3:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ZERO, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 4:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.DST_COLOR, this._gl.ZERO, this._gl.ONE, this._gl.ONE);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 5:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 9:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.CONSTANT_COLOR, this._gl.ONE_MINUS_CONSTANT_COLOR, this._gl.CONSTANT_ALPHA, this._gl.ONE_MINUS_CONSTANT_ALPHA);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 10:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 11:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ONE, this._gl.ONE);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 12:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.DST_ALPHA, this._gl.ONE, this._gl.ZERO, this._gl.ZERO);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 13:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE_MINUS_DST_COLOR, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE_MINUS_DST_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 14:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 15:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ONE, this._gl.ZERO);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 16:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE_MINUS_DST_COLOR, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ZERO, this._gl.ONE);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 17:\n      // Same as ALPHA_COMBINE but accumulates (1 - alpha) values in the alpha channel for a later readout in order independant transparency\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\n      this._alphaState.alphaBlend = true;\n      break;\n  }\n  if (!noDepthWriteChange) {\n    this.depthCullingState.depthMask = mode === 0;\n  }\n  this._alphaMode = mode;\n};\nThinEngine.prototype.getAlphaMode = function () {\n  return this._alphaMode;\n};\nThinEngine.prototype.setAlphaEquation = function (equation) {\n  if (this._alphaEquation === equation) {\n    return;\n  }\n  switch (equation) {\n    case 0:\n      this._alphaState.setAlphaEquationParameters(32774, 32774);\n      break;\n    case 1:\n      this._alphaState.setAlphaEquationParameters(32778, 32778);\n      break;\n    case 2:\n      this._alphaState.setAlphaEquationParameters(32779, 32779);\n      break;\n    case 3:\n      this._alphaState.setAlphaEquationParameters(32776, 32776);\n      break;\n    case 4:\n      this._alphaState.setAlphaEquationParameters(32775, 32775);\n      break;\n    case 5:\n      this._alphaState.setAlphaEquationParameters(32775, 32774);\n      break;\n  }\n  this._alphaEquation = equation;\n};\nThinEngine.prototype.getAlphaEquation = function () {\n  return this._alphaEquation;\n};","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,6BAA2B;AA2CtDA,UAAU,CAACC,SAAS,CAACC,iBAAiB,GAAG,UAAUC,CAAS,EAAEC,CAAS,EAAEC,CAAS,EAAEC,CAAS;EACzF,IAAI,CAACC,WAAW,CAACC,sBAAsB,CAACL,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;AACvD,CAAC;AAEDN,UAAU,CAACC,SAAS,CAACQ,YAAY,GAAG,UAAUC,IAAY,EAAEC,qBAA8B,KAAK;EAC3F,IAAI,IAAI,CAACC,UAAU,KAAKF,IAAI,EAAE;IAC1B;;EAGJ,QAAQA,IAAI;IACR,KAAK;MACD,IAAI,CAACH,WAAW,CAACM,UAAU,GAAG,KAAK;MACnC;IACJ,KAAK;MACD,IAAI,CAACN,WAAW,CAACO,+BAA+B,CAAC,IAAI,CAACC,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACE,mBAAmB,EAAE,IAAI,CAACF,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACC,GAAG,CAAC;MACxH,IAAI,CAACT,WAAW,CAACM,UAAU,GAAG,IAAI;MAClC;IACJ,KAAK;MACD,IAAI,CAACN,WAAW,CAACO,+BAA+B,CAAC,IAAI,CAACC,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACE,mBAAmB,EAAE,IAAI,CAACF,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACE,mBAAmB,CAAC;MACxI,IAAI,CAACV,WAAW,CAACM,UAAU,GAAG,IAAI;MAClC;IACJ,KAAK;MACD,IAAI,CAACN,WAAW,CAACO,+BAA+B,CAAC,IAAI,CAACC,GAAG,CAACG,SAAS,EAAE,IAAI,CAACH,GAAG,CAACE,mBAAmB,EAAE,IAAI,CAACF,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACC,GAAG,CAAC;MAC9H,IAAI,CAACT,WAAW,CAACM,UAAU,GAAG,IAAI;MAClC;IACJ,KAAK;MACD,IAAI,CAACN,WAAW,CAACO,+BAA+B,CAAC,IAAI,CAACC,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACI,IAAI,EAAE,IAAI,CAACJ,GAAG,CAACC,GAAG,CAAC;MACzG,IAAI,CAACT,WAAW,CAACM,UAAU,GAAG,IAAI;MAClC;IACJ,KAAK;MACD,IAAI,CAACN,WAAW,CAACO,+BAA+B,CAAC,IAAI,CAACC,GAAG,CAACG,SAAS,EAAE,IAAI,CAACH,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACI,IAAI,EAAE,IAAI,CAACJ,GAAG,CAACC,GAAG,CAAC;MAC/G,IAAI,CAACT,WAAW,CAACM,UAAU,GAAG,IAAI;MAClC;IACJ,KAAK;MACD,IAAI,CAACN,WAAW,CAACO,+BAA+B,CAAC,IAAI,CAACC,GAAG,CAACI,IAAI,EAAE,IAAI,CAACJ,GAAG,CAACK,mBAAmB,EAAE,IAAI,CAACL,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACC,GAAG,CAAC;MACzH,IAAI,CAACT,WAAW,CAACM,UAAU,GAAG,IAAI;MAClC;IACJ,KAAK;MACD,IAAI,CAACN,WAAW,CAACO,+BAA+B,CAAC,IAAI,CAACC,GAAG,CAACM,SAAS,EAAE,IAAI,CAACN,GAAG,CAACI,IAAI,EAAE,IAAI,CAACJ,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACC,GAAG,CAAC;MAC/G,IAAI,CAACT,WAAW,CAACM,UAAU,GAAG,IAAI;MAClC;IACJ,KAAK;MACD,IAAI,CAACN,WAAW,CAACO,+BAA+B,CAAC,IAAI,CAACC,GAAG,CAACG,SAAS,EAAE,IAAI,CAACH,GAAG,CAACK,mBAAmB,EAAE,IAAI,CAACL,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACC,GAAG,CAAC;MAC9H,IAAI,CAACT,WAAW,CAACM,UAAU,GAAG,IAAI;MAClC;IACJ,KAAK;MACD,IAAI,CAACN,WAAW,CAACO,+BAA+B,CAC5C,IAAI,CAACC,GAAG,CAACO,cAAc,EACvB,IAAI,CAACP,GAAG,CAACQ,wBAAwB,EACjC,IAAI,CAACR,GAAG,CAACS,cAAc,EACvB,IAAI,CAACT,GAAG,CAACU,wBAAwB,CACpC;MACD,IAAI,CAAClB,WAAW,CAACM,UAAU,GAAG,IAAI;MAClC;IACJ,KAAK;MACD,IAAI,CAACN,WAAW,CAACO,+BAA+B,CAAC,IAAI,CAACC,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACK,mBAAmB,EAAE,IAAI,CAACL,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACE,mBAAmB,CAAC;MACxI,IAAI,CAACV,WAAW,CAACM,UAAU,GAAG,IAAI;MAClC;IACJ,KAAK;MACD,IAAI,CAACN,WAAW,CAACO,+BAA+B,CAAC,IAAI,CAACC,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACC,GAAG,CAAC;MACxG,IAAI,CAACT,WAAW,CAACM,UAAU,GAAG,IAAI;MAClC;IACJ,KAAK;MACD,IAAI,CAACN,WAAW,CAACO,+BAA+B,CAAC,IAAI,CAACC,GAAG,CAACW,SAAS,EAAE,IAAI,CAACX,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACI,IAAI,EAAE,IAAI,CAACJ,GAAG,CAACI,IAAI,CAAC;MAChH,IAAI,CAACZ,WAAW,CAACM,UAAU,GAAG,IAAI;MAClC;IACJ,KAAK;MACD,IAAI,CAACN,WAAW,CAACO,+BAA+B,CAC5C,IAAI,CAACC,GAAG,CAACY,mBAAmB,EAC5B,IAAI,CAACZ,GAAG,CAACK,mBAAmB,EAC5B,IAAI,CAACL,GAAG,CAACa,mBAAmB,EAC5B,IAAI,CAACb,GAAG,CAACE,mBAAmB,CAC/B;MACD,IAAI,CAACV,WAAW,CAACM,UAAU,GAAG,IAAI;MAClC;IACJ,KAAK;MACD,IAAI,CAACN,WAAW,CAACO,+BAA+B,CAAC,IAAI,CAACC,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACE,mBAAmB,EAAE,IAAI,CAACF,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACE,mBAAmB,CAAC;MACxI,IAAI,CAACV,WAAW,CAACM,UAAU,GAAG,IAAI;MAClC;IACJ,KAAK;MACD,IAAI,CAACN,WAAW,CAACO,+BAA+B,CAAC,IAAI,CAACC,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACI,IAAI,CAAC;MACzG,IAAI,CAACZ,WAAW,CAACM,UAAU,GAAG,IAAI;MAClC;IACJ,KAAK;MACD,IAAI,CAACN,WAAW,CAACO,+BAA+B,CAAC,IAAI,CAACC,GAAG,CAACY,mBAAmB,EAAE,IAAI,CAACZ,GAAG,CAACK,mBAAmB,EAAE,IAAI,CAACL,GAAG,CAACI,IAAI,EAAE,IAAI,CAACJ,GAAG,CAACC,GAAG,CAAC;MACzI,IAAI,CAACT,WAAW,CAACM,UAAU,GAAG,IAAI;MAClC;IACJ,KAAK;MACD;MACA,IAAI,CAACN,WAAW,CAACO,+BAA+B,CAAC,IAAI,CAACC,GAAG,CAACG,SAAS,EAAE,IAAI,CAACH,GAAG,CAACE,mBAAmB,EAAE,IAAI,CAACF,GAAG,CAACC,GAAG,EAAE,IAAI,CAACD,GAAG,CAACE,mBAAmB,CAAC;MAC9I,IAAI,CAACV,WAAW,CAACM,UAAU,GAAG,IAAI;MAClC;EAAM;EAEd,IAAI,CAACF,kBAAkB,EAAE;IACrB,IAAI,CAACkB,iBAAiB,CAACC,SAAS,GAAGpB,IAAI,KAAK;;EAEhD,IAAI,CAACE,UAAU,GAAGF,IAAI;AAC1B,CAAC;AAEDV,UAAU,CAACC,SAAS,CAAC8B,YAAY,GAAG;EAChC,OAAO,IAAI,CAACnB,UAAU;AAC1B,CAAC;AAEDZ,UAAU,CAACC,SAAS,CAAC+B,gBAAgB,GAAG,UAAUC,QAAgB;EAC9D,IAAI,IAAI,CAACC,cAAc,KAAKD,QAAQ,EAAE;IAClC;;EAGJ,QAAQA,QAAQ;IACZ,KAAK;MACD,IAAI,CAAC1B,WAAW,CAAC4B,0BAA0B,CAAC,YAAU;MACtD;IACJ,KAAK;MACD,IAAI,CAAC5B,WAAW,CAAC4B,0BAA0B,CAAC,YAAU;MACtD;IACJ,KAAK;MACD,IAAI,CAAC5B,WAAW,CAAC4B,0BAA0B,CAAC,YAAU;MACtD;IACJ,KAAK;MACD,IAAI,CAAC5B,WAAW,CAAC4B,0BAA0B,CAAC,YAAU;MACtD;IACJ,KAAK;MACD,IAAI,CAAC5B,WAAW,CAAC4B,0BAA0B,CAAC,YAAU;MACtD;IACJ,KAAK;MACD,IAAI,CAAC5B,WAAW,CAAC4B,0BAA0B,CAAC,YAAU;MACtD;EAAM;EAEd,IAAI,CAACD,cAAc,GAAGD,QAAQ;AAClC,CAAC;AAEDjC,UAAU,CAACC,SAAS,CAACmC,gBAAgB,GAAG;EACpC,OAAO,IAAI,CAACF,cAAc;AAC9B,CAAC","names":["ThinEngine","prototype","setAlphaConstants","r","g","b","a","_alphaState","setAlphaBlendConstants","setAlphaMode","mode","noDepthWriteChange","_alphaMode","alphaBlend","setAlphaBlendFunctionParameters","_gl","ONE","ONE_MINUS_SRC_ALPHA","SRC_ALPHA","ZERO","ONE_MINUS_SRC_COLOR","DST_COLOR","CONSTANT_COLOR","ONE_MINUS_CONSTANT_COLOR","CONSTANT_ALPHA","ONE_MINUS_CONSTANT_ALPHA","DST_ALPHA","ONE_MINUS_DST_COLOR","ONE_MINUS_DST_ALPHA","depthCullingState","depthMask","getAlphaMode","setAlphaEquation","equation","_alphaEquation","setAlphaEquationParameters","getAlphaEquation"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/Extensions/engine.alpha.ts"],"sourcesContent":["import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport { Constants } from \"../constants\";\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Sets alpha constants used by some alpha blending modes\r\n         * @param r defines the red component\r\n         * @param g defines the green component\r\n         * @param b defines the blue component\r\n         * @param a defines the alpha component\r\n         */\r\n        setAlphaConstants(r: number, g: number, b: number, a: number): void;\r\n\r\n        /**\r\n         * Sets the current alpha mode\r\n         * @param mode defines the mode to use (one of the Engine.ALPHA_XXX)\r\n         * @param noDepthWriteChange defines if depth writing state should remains unchanged (false by default)\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/advanced/transparent_rendering\r\n         */\r\n        setAlphaMode(mode: number, noDepthWriteChange?: boolean): void;\r\n\r\n        /**\r\n         * Gets the current alpha mode\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/advanced/transparent_rendering\r\n         * @returns the current alpha mode\r\n         */\r\n        getAlphaMode(): number;\r\n\r\n        /**\r\n         * Sets the current alpha equation\r\n         * @param equation defines the equation to use (one of the Engine.ALPHA_EQUATION_XXX)\r\n         */\r\n        setAlphaEquation(equation: number): void;\r\n\r\n        /**\r\n         * Gets the current alpha equation.\r\n         * @returns the current alpha equation\r\n         */\r\n        getAlphaEquation(): number;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.setAlphaConstants = function (r: number, g: number, b: number, a: number) {\r\n    this._alphaState.setAlphaBlendConstants(r, g, b, a);\r\n};\r\n\r\nThinEngine.prototype.setAlphaMode = function (mode: number, noDepthWriteChange: boolean = false): void {\r\n    if (this._alphaMode === mode) {\r\n        return;\r\n    }\r\n\r\n    switch (mode) {\r\n        case Constants.ALPHA_DISABLE:\r\n            this._alphaState.alphaBlend = false;\r\n            break;\r\n        case Constants.ALPHA_PREMULTIPLIED:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_PREMULTIPLIED_PORTERDUFF:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_COMBINE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ONEONE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ZERO, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ADD:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE, this._gl.ZERO, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_SUBTRACT:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ZERO, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_MULTIPLY:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.DST_COLOR, this._gl.ZERO, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_MAXIMIZED:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_INTERPOLATE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(\r\n                this._gl.CONSTANT_COLOR,\r\n                this._gl.ONE_MINUS_CONSTANT_COLOR,\r\n                this._gl.CONSTANT_ALPHA,\r\n                this._gl.ONE_MINUS_CONSTANT_ALPHA\r\n            );\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_SCREENMODE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ONEONE_ONEONE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ALPHATOCOLOR:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.DST_ALPHA, this._gl.ONE, this._gl.ZERO, this._gl.ZERO);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_REVERSEONEMINUS:\r\n            this._alphaState.setAlphaBlendFunctionParameters(\r\n                this._gl.ONE_MINUS_DST_COLOR,\r\n                this._gl.ONE_MINUS_SRC_COLOR,\r\n                this._gl.ONE_MINUS_DST_ALPHA,\r\n                this._gl.ONE_MINUS_SRC_ALPHA\r\n            );\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_SRC_DSTONEMINUSSRCALPHA:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ONEONE_ONEZERO:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ONE, this._gl.ZERO);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_EXCLUSION:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE_MINUS_DST_COLOR, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ZERO, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_LAYER_ACCUMULATE:\r\n            // Same as ALPHA_COMBINE but accumulates (1 - alpha) values in the alpha channel for a later readout in order independant transparency\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n    }\r\n    if (!noDepthWriteChange) {\r\n        this.depthCullingState.depthMask = mode === Constants.ALPHA_DISABLE;\r\n    }\r\n    this._alphaMode = mode;\r\n};\r\n\r\nThinEngine.prototype.getAlphaMode = function (): number {\r\n    return this._alphaMode;\r\n};\r\n\r\nThinEngine.prototype.setAlphaEquation = function (equation: number): void {\r\n    if (this._alphaEquation === equation) {\r\n        return;\r\n    }\r\n\r\n    switch (equation) {\r\n        case Constants.ALPHA_EQUATION_ADD:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_ADD, Constants.GL_ALPHA_EQUATION_ADD);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_SUBSTRACT:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_SUBTRACT, Constants.GL_ALPHA_EQUATION_SUBTRACT);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_REVERSE_SUBTRACT:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_REVERSE_SUBTRACT, Constants.GL_ALPHA_EQUATION_REVERSE_SUBTRACT);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_MAX:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_MAX, Constants.GL_ALPHA_EQUATION_MAX);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_MIN:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_MIN, Constants.GL_ALPHA_EQUATION_MIN);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_DARKEN:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_MIN, Constants.GL_ALPHA_EQUATION_ADD);\r\n            break;\r\n    }\r\n    this._alphaEquation = equation;\r\n};\r\n\r\nThinEngine.prototype.getAlphaEquation = function () {\r\n    return this._alphaEquation;\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}