{"ast":null,"code":"import { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/displayPass.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * DisplayPassPostProcess which produces an output the same as it's input\n */\nexport class DisplayPassPostProcess extends PostProcess {\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"DisplayPassPostProcess\" string\n   */\n  getClassName() {\n    return \"DisplayPassPostProcess\";\n  }\n  /**\n   * Creates the DisplayPassPostProcess\n   * @param name The name of the effect.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   */\n  constructor(name, options, camera, samplingMode, engine, reusable) {\n    super(name, \"displayPass\", [\"passSampler\"], [\"passSampler\"], options, camera, samplingMode, engine, reusable);\n  }\n  /**\n   * @internal\n   */\n  static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(() => {\n      return new DisplayPassPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  }\n}\nRegisterClass(\"BABYLON.DisplayPassPostProcess\", DisplayPassPostProcess);","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,QAAQ,kBAAgB;AAG5C,OAAO,oCAAkC;AACzC,SAASC,aAAa,QAAQ,sBAAoB;AAClD,SAASC,mBAAmB,QAAQ,uBAAqB;AAIzD;;;AAGA,OAAM,MAAOC,sBAAuB,SAAQH,WAAW;EACnD;;;;EAIOI,YAAY;IACf,OAAO,wBAAwB;EACnC;EAEA;;;;;;;;;EASAC,YAAYC,IAAY,EAAEC,OAAoC,EAAEC,MAAwB,EAAEC,YAAqB,EAAEC,MAAe,EAAEC,QAAkB;IAChJ,KAAK,CAACL,IAAI,EAAE,aAAa,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,aAAa,CAAC,EAAEC,OAAO,EAAEC,MAAM,EAAEC,YAAY,EAAEC,MAAM,EAAEC,QAAQ,CAAC;EACjH;EAEA;;;EAGO,OAAOC,MAAM,CAACC,iBAAsB,EAAEC,YAAoB,EAAEC,KAAY,EAAEC,OAAe;IAC5F,OAAOd,mBAAmB,CAACe,KAAK,CAC5B,MAAK;MACD,OAAO,IAAId,sBAAsB,CAC7BU,iBAAiB,CAACP,IAAI,EACtBO,iBAAiB,CAACN,OAAO,EACzBO,YAAY,EACZD,iBAAiB,CAACK,wBAAwB,EAC1CH,KAAK,CAACI,SAAS,EAAE,EACjBN,iBAAiB,CAACF,QAAQ,CAC7B;IACL,CAAC,EACDE,iBAAiB,EACjBE,KAAK,EACLC,OAAO,CACV;EACL;;AAGJf,aAAa,CAAC,gCAAgC,EAAEE,sBAAsB,CAAC","names":["PostProcess","RegisterClass","SerializationHelper","DisplayPassPostProcess","getClassName","constructor","name","options","camera","samplingMode","engine","reusable","_Parse","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","getEngine"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/displayPassPostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\n\r\nimport \"../Shaders/displayPass.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { SerializationHelper } from \"../Misc/decorators\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * DisplayPassPostProcess which produces an output the same as it's input\r\n */\r\nexport class DisplayPassPostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"DisplayPassPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"DisplayPassPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates the DisplayPassPostProcess\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     */\r\n    constructor(name: string, options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean) {\r\n        super(name, \"displayPass\", [\"passSampler\"], [\"passSampler\"], options, camera, samplingMode, engine, reusable);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<DisplayPassPostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new DisplayPassPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.DisplayPassPostProcess\", DisplayPassPostProcess);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}