{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Sound } from \"./sound.js\";\nimport { SoundTrack } from \"./soundTrack.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { Scene } from \"../scene.js\";\nimport { AbstractScene } from \"../abstractScene.js\";\nimport \"./audioEngine.js\";\nimport { PrecisionDate } from \"../Misc/precisionDate.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n// Adds the parser to the scene parsers.\nAbstractScene.AddParser(SceneComponentConstants.NAME_AUDIO, (parsedData, scene, container, rootUrl) => {\n  var _a;\n  // TODO: add sound\n  let loadedSounds = [];\n  let loadedSound;\n  container.sounds = container.sounds || [];\n  if (parsedData.sounds !== undefined && parsedData.sounds !== null) {\n    for (let index = 0, cache = parsedData.sounds.length; index < cache; index++) {\n      const parsedSound = parsedData.sounds[index];\n      if ((_a = Engine.audioEngine) === null || _a === void 0 ? void 0 : _a.canUseWebAudio) {\n        if (!parsedSound.url) {\n          parsedSound.url = parsedSound.name;\n        }\n        if (!loadedSounds[parsedSound.url]) {\n          loadedSound = Sound.Parse(parsedSound, scene, rootUrl);\n          loadedSounds[parsedSound.url] = loadedSound;\n          container.sounds.push(loadedSound);\n        } else {\n          container.sounds.push(Sound.Parse(parsedSound, scene, rootUrl, loadedSounds[parsedSound.url]));\n        }\n      } else {\n        container.sounds.push(new Sound(parsedSound.name, null, scene));\n      }\n    }\n  }\n  loadedSounds = [];\n});\nObject.defineProperty(Scene.prototype, \"mainSoundTrack\", {\n  get: function () {\n    let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n      this._addComponent(compo);\n    }\n    if (!this._mainSoundTrack) {\n      this._mainSoundTrack = new SoundTrack(this, {\n        mainTrack: true\n      });\n    }\n    return this._mainSoundTrack;\n  },\n  enumerable: true,\n  configurable: true\n});\nScene.prototype.getSoundByName = function (name) {\n  let index;\n  for (index = 0; index < this.mainSoundTrack.soundCollection.length; index++) {\n    if (this.mainSoundTrack.soundCollection[index].name === name) {\n      return this.mainSoundTrack.soundCollection[index];\n    }\n  }\n  if (this.soundTracks) {\n    for (let sdIndex = 0; sdIndex < this.soundTracks.length; sdIndex++) {\n      for (index = 0; index < this.soundTracks[sdIndex].soundCollection.length; index++) {\n        if (this.soundTracks[sdIndex].soundCollection[index].name === name) {\n          return this.soundTracks[sdIndex].soundCollection[index];\n        }\n      }\n    }\n  }\n  return null;\n};\nObject.defineProperty(Scene.prototype, \"audioEnabled\", {\n  get: function () {\n    let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n      this._addComponent(compo);\n    }\n    return compo.audioEnabled;\n  },\n  set: function (value) {\n    let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n      this._addComponent(compo);\n    }\n    if (value) {\n      compo.enableAudio();\n    } else {\n      compo.disableAudio();\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Scene.prototype, \"headphone\", {\n  get: function () {\n    let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n      this._addComponent(compo);\n    }\n    return compo.headphone;\n  },\n  set: function (value) {\n    let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n      this._addComponent(compo);\n    }\n    if (value) {\n      compo.switchAudioModeForHeadphones();\n    } else {\n      compo.switchAudioModeForNormalSpeakers();\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Scene.prototype, \"audioListenerPositionProvider\", {\n  get: function () {\n    let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n      this._addComponent(compo);\n    }\n    return compo.audioListenerPositionProvider;\n  },\n  set: function (value) {\n    let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n      this._addComponent(compo);\n    }\n    if (typeof value !== \"function\") {\n      throw new Error(\"The value passed to [Scene.audioListenerPositionProvider] must be a function that returns a Vector3\");\n    } else {\n      compo.audioListenerPositionProvider = value;\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Scene.prototype, \"audioListenerRotationProvider\", {\n  get: function () {\n    let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n      this._addComponent(compo);\n    }\n    return compo.audioListenerRotationProvider;\n  },\n  set: function (value) {\n    let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n      this._addComponent(compo);\n    }\n    if (typeof value !== \"function\") {\n      throw new Error(\"The value passed to [Scene.audioListenerRotationProvider] must be a function that returns a Vector3\");\n    } else {\n      compo.audioListenerRotationProvider = value;\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Scene.prototype, \"audioPositioningRefreshRate\", {\n  get: function () {\n    let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n      this._addComponent(compo);\n    }\n    return compo.audioPositioningRefreshRate;\n  },\n  set: function (value) {\n    let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n      this._addComponent(compo);\n    }\n    compo.audioPositioningRefreshRate = value;\n  },\n  enumerable: true,\n  configurable: true\n});\n/**\n * Defines the sound scene component responsible to manage any sounds\n * in a given scene.\n */\nexport class AudioSceneComponent {\n  /**\n   * Creates a new instance of the component for the given scene\n   * @param scene Defines the scene to register the component in\n   */\n  constructor(scene) {\n    /**\n     * The component name helpful to identify the component in the list of scene components.\n     */\n    this.name = SceneComponentConstants.NAME_AUDIO;\n    this._audioEnabled = true;\n    this._headphone = false;\n    /**\n     * Gets or sets a refresh rate when using 3D audio positioning\n     */\n    this.audioPositioningRefreshRate = 500;\n    /**\n     * Gets or Sets a custom listener position for all sounds in the scene\n     * By default, this is the position of the first active camera\n     */\n    this.audioListenerPositionProvider = null;\n    /**\n     * Gets or Sets a custom listener rotation for all sounds in the scene\n     * By default, this is the rotation of the first active camera\n     */\n    this.audioListenerRotationProvider = null;\n    this._cachedCameraDirection = new Vector3();\n    this._cachedCameraPosition = new Vector3();\n    this._lastCheck = 0;\n    this._invertMatrixTemp = new Matrix();\n    this._cameraDirectionTemp = new Vector3();\n    scene = scene || EngineStore.LastCreatedScene;\n    if (!scene) {\n      return;\n    }\n    this.scene = scene;\n    scene.soundTracks = new Array();\n    scene.sounds = new Array();\n  }\n  /**\n   * Gets whether audio is enabled or not.\n   * Please use related enable/disable method to switch state.\n   */\n  get audioEnabled() {\n    return this._audioEnabled;\n  }\n  /**\n   * Gets whether audio is outputting to headphone or not.\n   * Please use the according Switch methods to change output.\n   */\n  get headphone() {\n    return this._headphone;\n  }\n  /**\n   * Registers the component in a given scene\n   */\n  register() {\n    this.scene._afterRenderStage.registerStep(SceneComponentConstants.STEP_AFTERRENDER_AUDIO, this, this._afterRender);\n  }\n  /**\n   * Rebuilds the elements related to this component in case of\n   * context lost for instance.\n   */\n  rebuild() {\n    // Nothing to do here. (Not rendering related)\n  }\n  /**\n   * Serializes the component data to the specified json object\n   * @param serializationObject The object to serialize to\n   */\n  serialize(serializationObject) {\n    serializationObject.sounds = [];\n    if (this.scene.soundTracks) {\n      for (let index = 0; index < this.scene.soundTracks.length; index++) {\n        const soundtrack = this.scene.soundTracks[index];\n        for (let soundId = 0; soundId < soundtrack.soundCollection.length; soundId++) {\n          serializationObject.sounds.push(soundtrack.soundCollection[soundId].serialize());\n        }\n      }\n    }\n  }\n  /**\n   * Adds all the elements from the container to the scene\n   * @param container the container holding the elements\n   */\n  addFromContainer(container) {\n    if (!container.sounds) {\n      return;\n    }\n    container.sounds.forEach(sound => {\n      sound.play();\n      sound.autoplay = true;\n      this.scene.mainSoundTrack.addSound(sound);\n    });\n  }\n  /**\n   * Removes all the elements in the container from the scene\n   * @param container contains the elements to remove\n   * @param dispose if the removed element should be disposed (default: false)\n   */\n  removeFromContainer(container, dispose = false) {\n    if (!container.sounds) {\n      return;\n    }\n    container.sounds.forEach(sound => {\n      sound.stop();\n      sound.autoplay = false;\n      this.scene.mainSoundTrack.removeSound(sound);\n      if (dispose) {\n        sound.dispose();\n      }\n    });\n  }\n  /**\n   * Disposes the component and the associated resources.\n   */\n  dispose() {\n    const scene = this.scene;\n    if (scene._mainSoundTrack) {\n      scene.mainSoundTrack.dispose();\n    }\n    if (scene.soundTracks) {\n      for (let scIndex = 0; scIndex < scene.soundTracks.length; scIndex++) {\n        scene.soundTracks[scIndex].dispose();\n      }\n    }\n  }\n  /**\n   * Disables audio in the associated scene.\n   */\n  disableAudio() {\n    const scene = this.scene;\n    this._audioEnabled = false;\n    if (Engine.audioEngine && Engine.audioEngine.audioContext) {\n      Engine.audioEngine.audioContext.suspend();\n    }\n    let i;\n    for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\n      scene.mainSoundTrack.soundCollection[i].pause();\n    }\n    if (scene.soundTracks) {\n      for (i = 0; i < scene.soundTracks.length; i++) {\n        for (let j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\n          scene.soundTracks[i].soundCollection[j].pause();\n        }\n      }\n    }\n  }\n  /**\n   * Enables audio in the associated scene.\n   */\n  enableAudio() {\n    const scene = this.scene;\n    this._audioEnabled = true;\n    if (Engine.audioEngine && Engine.audioEngine.audioContext) {\n      Engine.audioEngine.audioContext.resume();\n    }\n    let i;\n    for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\n      if (scene.mainSoundTrack.soundCollection[i].isPaused) {\n        scene.mainSoundTrack.soundCollection[i].play();\n      }\n    }\n    if (scene.soundTracks) {\n      for (i = 0; i < scene.soundTracks.length; i++) {\n        for (let j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\n          if (scene.soundTracks[i].soundCollection[j].isPaused) {\n            scene.soundTracks[i].soundCollection[j].play();\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Switch audio to headphone output.\n   */\n  switchAudioModeForHeadphones() {\n    const scene = this.scene;\n    this._headphone = true;\n    scene.mainSoundTrack.switchPanningModelToHRTF();\n    if (scene.soundTracks) {\n      for (let i = 0; i < scene.soundTracks.length; i++) {\n        scene.soundTracks[i].switchPanningModelToHRTF();\n      }\n    }\n  }\n  /**\n   * Switch audio to normal speakers.\n   */\n  switchAudioModeForNormalSpeakers() {\n    const scene = this.scene;\n    this._headphone = false;\n    scene.mainSoundTrack.switchPanningModelToEqualPower();\n    if (scene.soundTracks) {\n      for (let i = 0; i < scene.soundTracks.length; i++) {\n        scene.soundTracks[i].switchPanningModelToEqualPower();\n      }\n    }\n  }\n  _afterRender() {\n    const now = PrecisionDate.Now;\n    if (this._lastCheck && now - this._lastCheck < this.audioPositioningRefreshRate) {\n      return;\n    }\n    this._lastCheck = now;\n    const scene = this.scene;\n    if (!this._audioEnabled || !scene._mainSoundTrack || !scene.soundTracks || scene._mainSoundTrack.soundCollection.length === 0 && scene.soundTracks.length === 1) {\n      return;\n    }\n    const audioEngine = Engine.audioEngine;\n    if (!audioEngine) {\n      return;\n    }\n    if (audioEngine.audioContext) {\n      let listeningCamera = scene.activeCamera;\n      if (scene.activeCameras && scene.activeCameras.length > 0) {\n        listeningCamera = scene.activeCameras[0];\n      }\n      // A custom listener position provider was set\n      // Use the users provided position instead of camera's\n      if (this.audioListenerPositionProvider) {\n        const position = this.audioListenerPositionProvider();\n        // Set the listener position\n        audioEngine.audioContext.listener.setPosition(position.x || 0, position.y || 0, position.z || 0);\n        // Check if there is a listening camera\n      } else if (listeningCamera) {\n        // Set the listener position to the listening camera global position\n        if (!this._cachedCameraPosition.equals(listeningCamera.globalPosition)) {\n          this._cachedCameraPosition.copyFrom(listeningCamera.globalPosition);\n          audioEngine.audioContext.listener.setPosition(listeningCamera.globalPosition.x, listeningCamera.globalPosition.y, listeningCamera.globalPosition.z);\n        }\n      }\n      // Otherwise set the listener position to 0, 0 ,0\n      else {\n        // Set the listener position\n        audioEngine.audioContext.listener.setPosition(0, 0, 0);\n      }\n      // A custom listener rotation provider was set\n      // Use the users provided rotation instead of camera's\n      if (this.audioListenerRotationProvider) {\n        const rotation = this.audioListenerRotationProvider();\n        audioEngine.audioContext.listener.setOrientation(rotation.x || 0, rotation.y || 0, rotation.z || 0, 0, 1, 0);\n        // Check if there is a listening camera\n      } else if (listeningCamera) {\n        // for VR cameras\n        if (listeningCamera.rigCameras && listeningCamera.rigCameras.length > 0) {\n          listeningCamera = listeningCamera.rigCameras[0];\n        }\n        listeningCamera.getViewMatrix().invertToRef(this._invertMatrixTemp);\n        Vector3.TransformNormalToRef(AudioSceneComponent._CameraDirection, this._invertMatrixTemp, this._cameraDirectionTemp);\n        this._cameraDirectionTemp.normalize();\n        // To avoid some errors on GearVR\n        if (!isNaN(this._cameraDirectionTemp.x) && !isNaN(this._cameraDirectionTemp.y) && !isNaN(this._cameraDirectionTemp.z)) {\n          if (!this._cachedCameraDirection.equals(this._cameraDirectionTemp)) {\n            this._cachedCameraDirection.copyFrom(this._cameraDirectionTemp);\n            audioEngine.audioContext.listener.setOrientation(this._cameraDirectionTemp.x, this._cameraDirectionTemp.y, this._cameraDirectionTemp.z, 0, 1, 0);\n          }\n        }\n      }\n      // Otherwise set the listener rotation to 0, 0 ,0\n      else {\n        // Set the listener position\n        audioEngine.audioContext.listener.setOrientation(0, 0, 0, 0, 1, 0);\n      }\n      let i;\n      for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\n        const sound = scene.mainSoundTrack.soundCollection[i];\n        if (sound.useCustomAttenuation) {\n          sound.updateDistanceFromListener();\n        }\n      }\n      if (scene.soundTracks) {\n        for (i = 0; i < scene.soundTracks.length; i++) {\n          for (let j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\n            const sound = scene.soundTracks[i].soundCollection[j];\n            if (sound.useCustomAttenuation) {\n              sound.updateDistanceFromListener();\n            }\n          }\n        }\n      }\n    }\n  }\n}\nAudioSceneComponent._CameraDirection = new Vector3(0, 0, -1);\nSound._SceneComponentInitialization = scene => {\n  let compo = scene._getComponent(SceneComponentConstants.NAME_AUDIO);\n  if (!compo) {\n    compo = new AudioSceneComponent(scene);\n    scene._addComponent(compo);\n  }\n};","map":{"version":3,"mappings":"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","names":["Sound","SoundTrack","Engine","Matrix","Vector3","SceneComponentConstants","Scene","AbstractScene","PrecisionDate","EngineStore","AddParser","NAME_AUDIO","parsedData","scene","container","rootUrl","loadedSounds","loadedSound","sounds","undefined","index","cache","length","parsedSound","audioEngine","canUseWebAudio","url","name","Parse","push","Object","defineProperty","prototype","get","compo","_getComponent","AudioSceneComponent","_addComponent","_mainSoundTrack","mainTrack","enumerable","configurable","getSoundByName","mainSoundTrack","soundCollection","soundTracks","sdIndex","audioEnabled","set","value","enableAudio","disableAudio","headphone","switchAudioModeForHeadphones","switchAudioModeForNormalSpeakers","audioListenerPositionProvider","Error","audioListenerRotationProvider","audioPositioningRefreshRate","constructor","LastCreatedScene","Array","_audioEnabled","_headphone","register","_afterRenderStage","registerStep","STEP_AFTERRENDER_AUDIO","_afterRender","rebuild","serialize","serializationObject","soundtrack","soundId","addFromContainer","forEach","sound","play","autoplay","addSound","removeFromContainer","dispose","stop","removeSound","scIndex","audioContext","suspend","i","pause","j","resume","isPaused","switchPanningModelToHRTF","switchPanningModelToEqualPower","now","Now","_lastCheck","listeningCamera","activeCamera","activeCameras","position","listener","setPosition","x","y","z","_cachedCameraPosition","equals","globalPosition","copyFrom","rotation","setOrientation","rigCameras","getViewMatrix","invertToRef","_invertMatrixTemp","TransformNormalToRef","_CameraDirection","_cameraDirectionTemp","normalize","isNaN","_cachedCameraDirection","useCustomAttenuation","updateDistanceFromListener","_SceneComponentInitialization"],"sourceRoot":"","sources":["../../../../lts/core/generated/Audio/audioSceneComponent.ts"],"sourcesContent":["import { Sound } from \"./sound\";\r\nimport { SoundTrack } from \"./soundTrack\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport type { ISceneSerializableComponent } from \"../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport { Scene } from \"../scene\";\r\nimport { AbstractScene } from \"../abstractScene\";\r\nimport type { AssetContainer } from \"../assetContainer\";\r\n\r\nimport \"./audioEngine\";\r\nimport { PrecisionDate } from \"../Misc/precisionDate\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\n// Adds the parser to the scene parsers.\r\nAbstractScene.AddParser(SceneComponentConstants.NAME_AUDIO, (parsedData: any, scene: Scene, container: AssetContainer, rootUrl: string) => {\r\n    // TODO: add sound\r\n    let loadedSounds: Sound[] = [];\r\n    let loadedSound: Sound;\r\n    container.sounds = container.sounds || [];\r\n    if (parsedData.sounds !== undefined && parsedData.sounds !== null) {\r\n        for (let index = 0, cache = parsedData.sounds.length; index < cache; index++) {\r\n            const parsedSound = parsedData.sounds[index];\r\n            if (Engine.audioEngine?.canUseWebAudio) {\r\n                if (!parsedSound.url) {\r\n                    parsedSound.url = parsedSound.name;\r\n                }\r\n                if (!loadedSounds[parsedSound.url]) {\r\n                    loadedSound = Sound.Parse(parsedSound, scene, rootUrl);\r\n                    loadedSounds[parsedSound.url] = loadedSound;\r\n                    container.sounds.push(loadedSound);\r\n                } else {\r\n                    container.sounds.push(Sound.Parse(parsedSound, scene, rootUrl, loadedSounds[parsedSound.url]));\r\n                }\r\n            } else {\r\n                container.sounds.push(new Sound(parsedSound.name, null, scene));\r\n            }\r\n        }\r\n    }\r\n\r\n    loadedSounds = [];\r\n});\r\n\r\ndeclare module \"../abstractScene\" {\r\n    export interface AbstractScene {\r\n        /**\r\n         * The list of sounds used in the scene.\r\n         */\r\n        sounds: Nullable<Array<Sound>>;\r\n    }\r\n}\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /**\r\n         * @internal\r\n         * Backing field\r\n         */\r\n        _mainSoundTrack: SoundTrack;\r\n        /**\r\n         * The main sound track played by the scene.\r\n         * It contains your primary collection of sounds.\r\n         */\r\n        mainSoundTrack: SoundTrack;\r\n        /**\r\n         * The list of sound tracks added to the scene\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n         */\r\n        soundTracks: Nullable<Array<SoundTrack>>;\r\n\r\n        /**\r\n         * Gets a sound using a given name\r\n         * @param name defines the name to search for\r\n         * @returns the found sound or null if not found at all.\r\n         */\r\n        getSoundByName(name: string): Nullable<Sound>;\r\n\r\n        /**\r\n         * Gets or sets if audio support is enabled\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n         */\r\n        audioEnabled: boolean;\r\n\r\n        /**\r\n         * Gets or sets if audio will be output to headphones\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n         */\r\n        headphone: boolean;\r\n\r\n        /**\r\n         * Gets or sets custom audio listener position provider\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n         */\r\n        audioListenerPositionProvider: Nullable<() => Vector3>;\r\n\r\n        /**\r\n         * Gets or sets custom audio listener rotation provider\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n         */\r\n        audioListenerRotationProvider: Nullable<() => Vector3>;\r\n\r\n        /**\r\n         * Gets or sets a refresh rate when using 3D audio positioning\r\n         */\r\n        audioPositioningRefreshRate: number;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Scene.prototype, \"mainSoundTrack\", {\r\n    get: function (this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        if (!this._mainSoundTrack) {\r\n            this._mainSoundTrack = new SoundTrack(this, { mainTrack: true });\r\n        }\r\n\r\n        return this._mainSoundTrack;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nScene.prototype.getSoundByName = function (name: string): Nullable<Sound> {\r\n    let index: number;\r\n    for (index = 0; index < this.mainSoundTrack.soundCollection.length; index++) {\r\n        if (this.mainSoundTrack.soundCollection[index].name === name) {\r\n            return this.mainSoundTrack.soundCollection[index];\r\n        }\r\n    }\r\n\r\n    if (this.soundTracks) {\r\n        for (let sdIndex = 0; sdIndex < this.soundTracks.length; sdIndex++) {\r\n            for (index = 0; index < this.soundTracks[sdIndex].soundCollection.length; index++) {\r\n                if (this.soundTracks[sdIndex].soundCollection[index].name === name) {\r\n                    return this.soundTracks[sdIndex].soundCollection[index];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nObject.defineProperty(Scene.prototype, \"audioEnabled\", {\r\n    get: function (this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        return compo.audioEnabled;\r\n    },\r\n    set: function (this: Scene, value: boolean) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        if (value) {\r\n            compo.enableAudio();\r\n        } else {\r\n            compo.disableAudio();\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nObject.defineProperty(Scene.prototype, \"headphone\", {\r\n    get: function (this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        return compo.headphone;\r\n    },\r\n    set: function (this: Scene, value: boolean) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        if (value) {\r\n            compo.switchAudioModeForHeadphones();\r\n        } else {\r\n            compo.switchAudioModeForNormalSpeakers();\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nObject.defineProperty(Scene.prototype, \"audioListenerPositionProvider\", {\r\n    get: function (this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        return compo.audioListenerPositionProvider;\r\n    },\r\n    set: function (this: Scene, value: () => Vector3) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        if (typeof value !== \"function\") {\r\n            throw new Error(\"The value passed to [Scene.audioListenerPositionProvider] must be a function that returns a Vector3\");\r\n        } else {\r\n            compo.audioListenerPositionProvider = value;\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nObject.defineProperty(Scene.prototype, \"audioListenerRotationProvider\", {\r\n    get: function (this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        return compo.audioListenerRotationProvider;\r\n    },\r\n    set: function (this: Scene, value: () => Vector3) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        if (typeof value !== \"function\") {\r\n            throw new Error(\"The value passed to [Scene.audioListenerRotationProvider] must be a function that returns a Vector3\");\r\n        } else {\r\n            compo.audioListenerRotationProvider = value;\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nObject.defineProperty(Scene.prototype, \"audioPositioningRefreshRate\", {\r\n    get: function (this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        return compo.audioPositioningRefreshRate;\r\n    },\r\n    set: function (this: Scene, value: number) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        compo.audioPositioningRefreshRate = value;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\n/**\r\n * Defines the sound scene component responsible to manage any sounds\r\n * in a given scene.\r\n */\r\nexport class AudioSceneComponent implements ISceneSerializableComponent {\r\n    private static _CameraDirection = new Vector3(0, 0, -1);\r\n\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_AUDIO;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    private _audioEnabled = true;\r\n    /**\r\n     * Gets whether audio is enabled or not.\r\n     * Please use related enable/disable method to switch state.\r\n     */\r\n    public get audioEnabled(): boolean {\r\n        return this._audioEnabled;\r\n    }\r\n\r\n    private _headphone = false;\r\n    /**\r\n     * Gets whether audio is outputting to headphone or not.\r\n     * Please use the according Switch methods to change output.\r\n     */\r\n    public get headphone(): boolean {\r\n        return this._headphone;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a refresh rate when using 3D audio positioning\r\n     */\r\n    public audioPositioningRefreshRate = 500;\r\n\r\n    /**\r\n     * Gets or Sets a custom listener position for all sounds in the scene\r\n     * By default, this is the position of the first active camera\r\n     */\r\n    public audioListenerPositionProvider: Nullable<() => Vector3> = null;\r\n\r\n    /**\r\n     * Gets or Sets a custom listener rotation for all sounds in the scene\r\n     * By default, this is the rotation of the first active camera\r\n     */\r\n    public audioListenerRotationProvider: Nullable<() => Vector3> = null;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene?: Nullable<Scene>) {\r\n        scene = scene || EngineStore.LastCreatedScene;\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this.scene = scene;\r\n\r\n        scene.soundTracks = new Array<SoundTrack>();\r\n        scene.sounds = new Array<Sound>();\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._afterRenderStage.registerStep(SceneComponentConstants.STEP_AFTERRENDER_AUDIO, this, this._afterRender);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do here. (Not rendering related)\r\n    }\r\n\r\n    /**\r\n     * Serializes the component data to the specified json object\r\n     * @param serializationObject The object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        serializationObject.sounds = [];\r\n\r\n        if (this.scene.soundTracks) {\r\n            for (let index = 0; index < this.scene.soundTracks.length; index++) {\r\n                const soundtrack = this.scene.soundTracks[index];\r\n\r\n                for (let soundId = 0; soundId < soundtrack.soundCollection.length; soundId++) {\r\n                    serializationObject.sounds.push(soundtrack.soundCollection[soundId].serialize());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds all the elements from the container to the scene\r\n     * @param container the container holding the elements\r\n     */\r\n    public addFromContainer(container: AbstractScene): void {\r\n        if (!container.sounds) {\r\n            return;\r\n        }\r\n        container.sounds.forEach((sound) => {\r\n            sound.play();\r\n            sound.autoplay = true;\r\n            this.scene.mainSoundTrack.addSound(sound);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes all the elements in the container from the scene\r\n     * @param container contains the elements to remove\r\n     * @param dispose if the removed element should be disposed (default: false)\r\n     */\r\n    public removeFromContainer(container: AbstractScene, dispose = false): void {\r\n        if (!container.sounds) {\r\n            return;\r\n        }\r\n        container.sounds.forEach((sound) => {\r\n            sound.stop();\r\n            sound.autoplay = false;\r\n            this.scene.mainSoundTrack.removeSound(sound);\r\n            if (dispose) {\r\n                sound.dispose();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources.\r\n     */\r\n    public dispose(): void {\r\n        const scene = this.scene;\r\n        if (scene._mainSoundTrack) {\r\n            scene.mainSoundTrack.dispose();\r\n        }\r\n\r\n        if (scene.soundTracks) {\r\n            for (let scIndex = 0; scIndex < scene.soundTracks.length; scIndex++) {\r\n                scene.soundTracks[scIndex].dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disables audio in the associated scene.\r\n     */\r\n    public disableAudio() {\r\n        const scene = this.scene;\r\n        this._audioEnabled = false;\r\n\r\n        if (Engine.audioEngine && Engine.audioEngine.audioContext) {\r\n            Engine.audioEngine.audioContext.suspend();\r\n        }\r\n\r\n        let i: number;\r\n        for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\r\n            scene.mainSoundTrack.soundCollection[i].pause();\r\n        }\r\n        if (scene.soundTracks) {\r\n            for (i = 0; i < scene.soundTracks.length; i++) {\r\n                for (let j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\r\n                    scene.soundTracks[i].soundCollection[j].pause();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enables audio in the associated scene.\r\n     */\r\n    public enableAudio() {\r\n        const scene = this.scene;\r\n        this._audioEnabled = true;\r\n\r\n        if (Engine.audioEngine && Engine.audioEngine.audioContext) {\r\n            Engine.audioEngine.audioContext.resume();\r\n        }\r\n\r\n        let i: number;\r\n        for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\r\n            if (scene.mainSoundTrack.soundCollection[i].isPaused) {\r\n                scene.mainSoundTrack.soundCollection[i].play();\r\n            }\r\n        }\r\n        if (scene.soundTracks) {\r\n            for (i = 0; i < scene.soundTracks.length; i++) {\r\n                for (let j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\r\n                    if (scene.soundTracks[i].soundCollection[j].isPaused) {\r\n                        scene.soundTracks[i].soundCollection[j].play();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch audio to headphone output.\r\n     */\r\n    public switchAudioModeForHeadphones() {\r\n        const scene = this.scene;\r\n        this._headphone = true;\r\n\r\n        scene.mainSoundTrack.switchPanningModelToHRTF();\r\n        if (scene.soundTracks) {\r\n            for (let i = 0; i < scene.soundTracks.length; i++) {\r\n                scene.soundTracks[i].switchPanningModelToHRTF();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch audio to normal speakers.\r\n     */\r\n    public switchAudioModeForNormalSpeakers() {\r\n        const scene = this.scene;\r\n        this._headphone = false;\r\n\r\n        scene.mainSoundTrack.switchPanningModelToEqualPower();\r\n\r\n        if (scene.soundTracks) {\r\n            for (let i = 0; i < scene.soundTracks.length; i++) {\r\n                scene.soundTracks[i].switchPanningModelToEqualPower();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _cachedCameraDirection = new Vector3();\r\n    private _cachedCameraPosition = new Vector3();\r\n    private _lastCheck = 0;\r\n    private _invertMatrixTemp = new Matrix();\r\n    private _cameraDirectionTemp = new Vector3();\r\n\r\n    private _afterRender() {\r\n        const now = PrecisionDate.Now;\r\n        if (this._lastCheck && now - this._lastCheck < this.audioPositioningRefreshRate) {\r\n            return;\r\n        }\r\n\r\n        this._lastCheck = now;\r\n\r\n        const scene = this.scene;\r\n        if (!this._audioEnabled || !scene._mainSoundTrack || !scene.soundTracks || (scene._mainSoundTrack.soundCollection.length === 0 && scene.soundTracks.length === 1)) {\r\n            return;\r\n        }\r\n\r\n        const audioEngine = Engine.audioEngine;\r\n\r\n        if (!audioEngine) {\r\n            return;\r\n        }\r\n\r\n        if (audioEngine.audioContext) {\r\n            let listeningCamera = scene.activeCamera;\r\n            if (scene.activeCameras && scene.activeCameras.length > 0) {\r\n                listeningCamera = scene.activeCameras[0];\r\n            }\r\n\r\n            // A custom listener position provider was set\r\n            // Use the users provided position instead of camera's\r\n            if (this.audioListenerPositionProvider) {\r\n                const position: Vector3 = this.audioListenerPositionProvider();\r\n                // Set the listener position\r\n                audioEngine.audioContext.listener.setPosition(position.x || 0, position.y || 0, position.z || 0);\r\n                // Check if there is a listening camera\r\n            } else if (listeningCamera) {\r\n                // Set the listener position to the listening camera global position\r\n                if (!this._cachedCameraPosition.equals(listeningCamera.globalPosition)) {\r\n                    this._cachedCameraPosition.copyFrom(listeningCamera.globalPosition);\r\n                    audioEngine.audioContext.listener.setPosition(listeningCamera.globalPosition.x, listeningCamera.globalPosition.y, listeningCamera.globalPosition.z);\r\n                }\r\n            }\r\n            // Otherwise set the listener position to 0, 0 ,0\r\n            else {\r\n                // Set the listener position\r\n                audioEngine.audioContext.listener.setPosition(0, 0, 0);\r\n            }\r\n\r\n            // A custom listener rotation provider was set\r\n            // Use the users provided rotation instead of camera's\r\n            if (this.audioListenerRotationProvider) {\r\n                const rotation: Vector3 = this.audioListenerRotationProvider();\r\n                audioEngine.audioContext.listener.setOrientation(rotation.x || 0, rotation.y || 0, rotation.z || 0, 0, 1, 0);\r\n                // Check if there is a listening camera\r\n            } else if (listeningCamera) {\r\n                // for VR cameras\r\n                if (listeningCamera.rigCameras && listeningCamera.rigCameras.length > 0) {\r\n                    listeningCamera = listeningCamera.rigCameras[0];\r\n                }\r\n\r\n                listeningCamera.getViewMatrix().invertToRef(this._invertMatrixTemp);\r\n                Vector3.TransformNormalToRef(AudioSceneComponent._CameraDirection, this._invertMatrixTemp, this._cameraDirectionTemp);\r\n                this._cameraDirectionTemp.normalize();\r\n                // To avoid some errors on GearVR\r\n                if (!isNaN(this._cameraDirectionTemp.x) && !isNaN(this._cameraDirectionTemp.y) && !isNaN(this._cameraDirectionTemp.z)) {\r\n                    if (!this._cachedCameraDirection.equals(this._cameraDirectionTemp)) {\r\n                        this._cachedCameraDirection.copyFrom(this._cameraDirectionTemp);\r\n                        audioEngine.audioContext.listener.setOrientation(this._cameraDirectionTemp.x, this._cameraDirectionTemp.y, this._cameraDirectionTemp.z, 0, 1, 0);\r\n                    }\r\n                }\r\n            }\r\n            // Otherwise set the listener rotation to 0, 0 ,0\r\n            else {\r\n                // Set the listener position\r\n                audioEngine.audioContext.listener.setOrientation(0, 0, 0, 0, 1, 0);\r\n            }\r\n\r\n            let i: number;\r\n            for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\r\n                const sound = scene.mainSoundTrack.soundCollection[i];\r\n                if (sound.useCustomAttenuation) {\r\n                    sound.updateDistanceFromListener();\r\n                }\r\n            }\r\n            if (scene.soundTracks) {\r\n                for (i = 0; i < scene.soundTracks.length; i++) {\r\n                    for (let j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\r\n                        const sound = scene.soundTracks[i].soundCollection[j];\r\n                        if (sound.useCustomAttenuation) {\r\n                            sound.updateDistanceFromListener();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nSound._SceneComponentInitialization = (scene: Scene) => {\r\n    let compo = scene._getComponent(SceneComponentConstants.NAME_AUDIO);\r\n    if (!compo) {\r\n        compo = new AudioSceneComponent(scene);\r\n        scene._addComponent(compo);\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}