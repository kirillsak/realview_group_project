{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { WebGPUCacheRenderPipelineTree } from \"./webgpuCacheRenderPipelineTree.js\";\nimport { WebGPUShaderProcessingContext } from \"./webgpuShaderProcessingContext.js\";\nimport { renderableTextureFormatToIndex, WebGPUTextureHelper } from \"./webgpuTextureHelper.js\";\nimport \"../../Shaders/clearQuad.vertex.js\";\nimport \"../../Shaders/clearQuad.fragment.js\";\n/** @internal */\nexport class WebGPUClearQuad {\n  constructor(device, engine, emptyVertexBuffer) {\n    this._bindGroups = {};\n    this._bundleCache = {};\n    this._keyTemp = [];\n    this._device = device;\n    this._engine = engine;\n    this._cacheRenderPipeline = new WebGPUCacheRenderPipelineTree(this._device, emptyVertexBuffer, !engine._caps.textureFloatLinearFiltering);\n    this._cacheRenderPipeline.setDepthTestEnabled(false);\n    this._cacheRenderPipeline.setStencilReadMask(0xff);\n    this._effect = engine.createEffect(\"clearQuad\", [], [\"color\", \"depthValue\"]);\n  }\n  setDepthStencilFormat(format) {\n    this._depthTextureFormat = format;\n    this._cacheRenderPipeline.setDepthStencilFormat(format);\n  }\n  setColorFormat(format) {\n    this._cacheRenderPipeline.setColorFormat(format);\n  }\n  setMRTAttachments(attachments, textureArray, textureCount) {\n    this._cacheRenderPipeline.setMRT(textureArray, textureCount);\n    this._cacheRenderPipeline.setMRTAttachments(attachments);\n  }\n  clear(renderPass, clearColor, clearDepth, clearStencil, sampleCount = 1) {\n    var _a, _b;\n    let renderPass2;\n    let bundle = null;\n    let bundleKey;\n    const isRTTPass = !!this._engine._currentRenderTarget;\n    if (renderPass) {\n      renderPass2 = renderPass;\n    } else {\n      let idx = 0;\n      this._keyTemp.length = 0;\n      for (let i = 0; i < this._cacheRenderPipeline.colorFormats.length; ++i) {\n        this._keyTemp[idx++] = renderableTextureFormatToIndex[(_a = this._cacheRenderPipeline.colorFormats[i]) !== null && _a !== void 0 ? _a : \"\"];\n      }\n      const depthStencilFormatIndex = renderableTextureFormatToIndex[(_b = this._depthTextureFormat) !== null && _b !== void 0 ? _b : 0];\n      this._keyTemp[idx] = (clearColor ? clearColor.r + clearColor.g * 256 + clearColor.b * 256 * 256 + clearColor.a * 256 * 256 * 256 : 0) + (clearDepth ? 2 ** 32 : 0) + (clearStencil ? 2 ** 33 : 0) + (this._engine.useReverseDepthBuffer ? 2 ** 34 : 0) + (isRTTPass ? 2 ** 35 : 0) + (sampleCount > 1 ? 2 ** 36 : 0) + depthStencilFormatIndex * 2 ** 37;\n      bundleKey = this._keyTemp.join(\"_\");\n      bundle = this._bundleCache[bundleKey];\n      if (bundle) {\n        return bundle;\n      }\n      renderPass2 = this._device.createRenderBundleEncoder({\n        colorFormats: this._cacheRenderPipeline.colorFormats,\n        depthStencilFormat: this._depthTextureFormat,\n        sampleCount\n      });\n    }\n    this._cacheRenderPipeline.setDepthWriteEnabled(!!clearDepth);\n    this._cacheRenderPipeline.setStencilEnabled(!!clearStencil && !!this._depthTextureFormat && WebGPUTextureHelper.HasStencilAspect(this._depthTextureFormat));\n    this._cacheRenderPipeline.setStencilWriteMask(clearStencil ? 0xff : 0);\n    this._cacheRenderPipeline.setStencilCompare(clearStencil ? 519 : 512);\n    this._cacheRenderPipeline.setStencilPassOp(clearStencil ? 7681 : 7680);\n    this._cacheRenderPipeline.setWriteMask(clearColor ? 0xf : 0);\n    const pipeline = this._cacheRenderPipeline.getRenderPipeline(7, this._effect, sampleCount);\n    const webgpuPipelineContext = this._effect._pipelineContext;\n    if (clearColor) {\n      this._effect.setDirectColor4(\"color\", clearColor);\n    }\n    this._effect.setFloat(\"depthValue\", this._engine.useReverseDepthBuffer ? this._engine._clearReverseDepthValue : this._engine._clearDepthValue);\n    webgpuPipelineContext.uniformBuffer.update();\n    const bufferInternals = isRTTPass ? this._engine._ubInvertY : this._engine._ubDontInvertY;\n    const bufferLeftOver = webgpuPipelineContext.uniformBuffer.getBuffer();\n    const key = bufferLeftOver.uniqueId + \"-\" + bufferInternals.uniqueId;\n    let bindGroups = this._bindGroups[key];\n    if (!bindGroups) {\n      const bindGroupLayouts = webgpuPipelineContext.bindGroupLayouts;\n      bindGroups = this._bindGroups[key] = [];\n      bindGroups.push(this._device.createBindGroup({\n        layout: bindGroupLayouts[0],\n        entries: []\n      }));\n      if (!WebGPUShaderProcessingContext._SimplifiedKnownBindings) {\n        bindGroups.push(this._device.createBindGroup({\n          layout: bindGroupLayouts[1],\n          entries: []\n        }));\n      }\n      bindGroups.push(this._device.createBindGroup({\n        layout: bindGroupLayouts[WebGPUShaderProcessingContext._SimplifiedKnownBindings ? 1 : 2],\n        entries: [{\n          binding: 0,\n          resource: {\n            buffer: bufferInternals.underlyingResource,\n            size: bufferInternals.capacity\n          }\n        }, {\n          binding: 1,\n          resource: {\n            buffer: bufferLeftOver.underlyingResource,\n            size: bufferLeftOver.capacity\n          }\n        }]\n      }));\n    }\n    renderPass2.setPipeline(pipeline);\n    for (let i = 0; i < bindGroups.length; ++i) {\n      renderPass2.setBindGroup(i, bindGroups[i]);\n    }\n    renderPass2.draw(4, 1, 0, 0);\n    if (!renderPass) {\n      bundle = renderPass2.finish();\n      this._bundleCache[bundleKey] = bundle;\n    }\n    return bundle;\n  }\n}","map":{"version":3,"mappings":"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","names":["WebGPUCacheRenderPipelineTree","WebGPUShaderProcessingContext","renderableTextureFormatToIndex","WebGPUTextureHelper","WebGPUClearQuad","constructor","device","engine","emptyVertexBuffer","_device","_engine","_cacheRenderPipeline","_caps","textureFloatLinearFiltering","setDepthTestEnabled","setStencilReadMask","_effect","createEffect","setDepthStencilFormat","format","_depthTextureFormat","setColorFormat","setMRTAttachments","attachments","textureArray","textureCount","setMRT","clear","renderPass","clearColor","clearDepth","clearStencil","sampleCount","renderPass2","bundle","bundleKey","isRTTPass","_currentRenderTarget","idx","_keyTemp","length","i","colorFormats","depthStencilFormatIndex","r","g","b","a","useReverseDepthBuffer","join","_bundleCache","createRenderBundleEncoder","depthStencilFormat","setDepthWriteEnabled","setStencilEnabled","HasStencilAspect","setStencilWriteMask","setStencilCompare","setStencilPassOp","setWriteMask","pipeline","getRenderPipeline","webgpuPipelineContext","_pipelineContext","setDirectColor4","setFloat","_clearReverseDepthValue","_clearDepthValue","uniformBuffer","update","bufferInternals","_ubInvertY","_ubDontInvertY","bufferLeftOver","getBuffer","key","uniqueId","bindGroups","_bindGroups","bindGroupLayouts","push","createBindGroup","layout","entries","_SimplifiedKnownBindings","binding","resource","buffer","underlyingResource","size","capacity","setPipeline","setBindGroup","draw","finish"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/WebGPU/webgpuClearQuad.ts"],"sourcesContent":["import type { Effect } from \"../../Materials/effect\";\r\nimport type { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\nimport type { IColor4Like } from \"../../Maths/math.like\";\r\nimport type { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport type { WebGPUDataBuffer } from \"../../Meshes/WebGPU/webgpuDataBuffer\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Constants } from \"../constants\";\r\nimport type { WebGPUEngine } from \"../webgpuEngine\";\r\nimport type { WebGPUCacheRenderPipeline } from \"./webgpuCacheRenderPipeline\";\r\nimport { WebGPUCacheRenderPipelineTree } from \"./webgpuCacheRenderPipelineTree\";\r\nimport type { WebGPUPipelineContext } from \"./webgpuPipelineContext\";\r\nimport { WebGPUShaderProcessingContext } from \"./webgpuShaderProcessingContext\";\r\nimport { renderableTextureFormatToIndex, WebGPUTextureHelper } from \"./webgpuTextureHelper\";\r\n\r\nimport \"../../Shaders/clearQuad.vertex\";\r\nimport \"../../Shaders/clearQuad.fragment\";\r\n\r\n/** @internal */\r\nexport class WebGPUClearQuad {\r\n    private _device: GPUDevice;\r\n    private _engine: WebGPUEngine;\r\n    private _cacheRenderPipeline: WebGPUCacheRenderPipeline;\r\n    private _effect: Effect;\r\n    private _bindGroups: { [id: string]: GPUBindGroup[] } = {};\r\n    private _depthTextureFormat: GPUTextureFormat | undefined;\r\n    private _bundleCache: { [key: string]: GPURenderBundle } = {};\r\n    private _keyTemp: number[] = [];\r\n\r\n    public setDepthStencilFormat(format: GPUTextureFormat | undefined): void {\r\n        this._depthTextureFormat = format;\r\n        this._cacheRenderPipeline.setDepthStencilFormat(format);\r\n    }\r\n\r\n    public setColorFormat(format: GPUTextureFormat | null): void {\r\n        this._cacheRenderPipeline.setColorFormat(format);\r\n    }\r\n\r\n    public setMRTAttachments(attachments: number[], textureArray: InternalTexture[], textureCount: number): void {\r\n        this._cacheRenderPipeline.setMRT(textureArray, textureCount);\r\n        this._cacheRenderPipeline.setMRTAttachments(attachments);\r\n    }\r\n\r\n    constructor(device: GPUDevice, engine: WebGPUEngine, emptyVertexBuffer: VertexBuffer) {\r\n        this._device = device;\r\n        this._engine = engine;\r\n\r\n        this._cacheRenderPipeline = new WebGPUCacheRenderPipelineTree(this._device, emptyVertexBuffer, !engine._caps.textureFloatLinearFiltering);\r\n        this._cacheRenderPipeline.setDepthTestEnabled(false);\r\n        this._cacheRenderPipeline.setStencilReadMask(0xff);\r\n\r\n        this._effect = engine.createEffect(\"clearQuad\", [], [\"color\", \"depthValue\"]);\r\n    }\r\n\r\n    public clear(\r\n        renderPass: Nullable<GPURenderPassEncoder>,\r\n        clearColor?: Nullable<IColor4Like>,\r\n        clearDepth?: boolean,\r\n        clearStencil?: boolean,\r\n        sampleCount = 1\r\n    ): Nullable<GPURenderBundle> {\r\n        let renderPass2: GPURenderPassEncoder | GPURenderBundleEncoder;\r\n        let bundle: Nullable<GPURenderBundle> = null;\r\n        let bundleKey: string;\r\n\r\n        const isRTTPass = !!this._engine._currentRenderTarget;\r\n\r\n        if (renderPass) {\r\n            renderPass2 = renderPass;\r\n        } else {\r\n            let idx = 0;\r\n            this._keyTemp.length = 0;\r\n            for (let i = 0; i < this._cacheRenderPipeline.colorFormats.length; ++i) {\r\n                this._keyTemp[idx++] = renderableTextureFormatToIndex[this._cacheRenderPipeline.colorFormats[i] ?? \"\"];\r\n            }\r\n\r\n            const depthStencilFormatIndex = renderableTextureFormatToIndex[this._depthTextureFormat ?? 0];\r\n\r\n            this._keyTemp[idx] =\r\n                (clearColor ? clearColor.r + clearColor.g * 256 + clearColor.b * 256 * 256 + clearColor.a * 256 * 256 * 256 : 0) +\r\n                (clearDepth ? 2 ** 32 : 0) +\r\n                (clearStencil ? 2 ** 33 : 0) +\r\n                (this._engine.useReverseDepthBuffer ? 2 ** 34 : 0) +\r\n                (isRTTPass ? 2 ** 35 : 0) +\r\n                (sampleCount > 1 ? 2 ** 36 : 0) +\r\n                depthStencilFormatIndex * 2 ** 37;\r\n\r\n            bundleKey = this._keyTemp.join(\"_\");\r\n            bundle = this._bundleCache[bundleKey];\r\n\r\n            if (bundle) {\r\n                return bundle;\r\n            }\r\n\r\n            renderPass2 = this._device.createRenderBundleEncoder({\r\n                colorFormats: this._cacheRenderPipeline.colorFormats,\r\n                depthStencilFormat: this._depthTextureFormat,\r\n                sampleCount,\r\n            });\r\n        }\r\n\r\n        this._cacheRenderPipeline.setDepthWriteEnabled(!!clearDepth);\r\n        this._cacheRenderPipeline.setStencilEnabled(!!clearStencil && !!this._depthTextureFormat && WebGPUTextureHelper.HasStencilAspect(this._depthTextureFormat));\r\n        this._cacheRenderPipeline.setStencilWriteMask(clearStencil ? 0xff : 0);\r\n        this._cacheRenderPipeline.setStencilCompare(clearStencil ? Constants.ALWAYS : Constants.NEVER);\r\n        this._cacheRenderPipeline.setStencilPassOp(clearStencil ? Constants.REPLACE : Constants.KEEP);\r\n        this._cacheRenderPipeline.setWriteMask(clearColor ? 0xf : 0);\r\n\r\n        const pipeline = this._cacheRenderPipeline.getRenderPipeline(Constants.MATERIAL_TriangleStripDrawMode, this._effect, sampleCount);\r\n\r\n        const webgpuPipelineContext = this._effect._pipelineContext as WebGPUPipelineContext;\r\n\r\n        if (clearColor) {\r\n            this._effect.setDirectColor4(\"color\", clearColor);\r\n        }\r\n\r\n        this._effect.setFloat(\"depthValue\", this._engine.useReverseDepthBuffer ? this._engine._clearReverseDepthValue : this._engine._clearDepthValue);\r\n\r\n        webgpuPipelineContext.uniformBuffer!.update();\r\n\r\n        const bufferInternals = isRTTPass ? this._engine._ubInvertY : this._engine._ubDontInvertY;\r\n        const bufferLeftOver = webgpuPipelineContext.uniformBuffer!.getBuffer() as WebGPUDataBuffer;\r\n\r\n        const key = bufferLeftOver.uniqueId + \"-\" + bufferInternals.uniqueId;\r\n\r\n        let bindGroups = this._bindGroups[key];\r\n\r\n        if (!bindGroups) {\r\n            const bindGroupLayouts = webgpuPipelineContext.bindGroupLayouts;\r\n            bindGroups = this._bindGroups[key] = [];\r\n            bindGroups.push(\r\n                this._device.createBindGroup({\r\n                    layout: bindGroupLayouts[0],\r\n                    entries: [],\r\n                })\r\n            );\r\n            if (!WebGPUShaderProcessingContext._SimplifiedKnownBindings) {\r\n                bindGroups.push(\r\n                    this._device.createBindGroup({\r\n                        layout: bindGroupLayouts[1],\r\n                        entries: [],\r\n                    })\r\n                );\r\n            }\r\n            bindGroups.push(\r\n                this._device.createBindGroup({\r\n                    layout: bindGroupLayouts[WebGPUShaderProcessingContext._SimplifiedKnownBindings ? 1 : 2],\r\n                    entries: [\r\n                        {\r\n                            binding: 0,\r\n                            resource: {\r\n                                buffer: bufferInternals.underlyingResource,\r\n                                size: bufferInternals.capacity,\r\n                            },\r\n                        },\r\n                        {\r\n                            binding: 1,\r\n                            resource: {\r\n                                buffer: bufferLeftOver.underlyingResource,\r\n                                size: bufferLeftOver.capacity,\r\n                            },\r\n                        },\r\n                    ],\r\n                })\r\n            );\r\n        }\r\n\r\n        renderPass2.setPipeline(pipeline);\r\n        for (let i = 0; i < bindGroups.length; ++i) {\r\n            renderPass2.setBindGroup(i, bindGroups[i]);\r\n        }\r\n        renderPass2.draw(4, 1, 0, 0);\r\n\r\n        if (!renderPass) {\r\n            bundle = (renderPass2 as GPURenderBundleEncoder).finish();\r\n            this._bundleCache[bundleKey!] = bundle;\r\n        }\r\n\r\n        return bundle;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}