{"ast":null,"code":"import { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\n/**\n * Block used to transform a vector3 or a vector4 into screen space\n */\nexport class ScreenSpaceBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new ScreenSpaceBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n    this.registerInput(\"worldViewProjection\", NodeMaterialBlockConnectionPointTypes.Matrix);\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector2);\n    this.registerOutput(\"x\", NodeMaterialBlockConnectionPointTypes.Float);\n    this.registerOutput(\"y\", NodeMaterialBlockConnectionPointTypes.Float);\n    this.inputs[0].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Color3 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"ScreenSpaceBlock\";\n  }\n  /**\n   * Gets the vector input\n   */\n  get vector() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the worldViewProjection transform input\n   */\n  get worldViewProjection() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets the x output component\n   */\n  get x() {\n    return this._outputs[1];\n  }\n  /**\n   * Gets the y output component\n   */\n  get y() {\n    return this._outputs[2];\n  }\n  autoConfigure(material) {\n    if (!this.worldViewProjection.isConnected) {\n      let worldViewProjectionInput = material.getInputBlockByPredicate(b => b.systemValue === NodeMaterialSystemValues.WorldViewProjection);\n      if (!worldViewProjectionInput) {\n        worldViewProjectionInput = new InputBlock(\"worldViewProjection\");\n        worldViewProjectionInput.setAsSystemValue(NodeMaterialSystemValues.WorldViewProjection);\n      }\n      worldViewProjectionInput.output.connectTo(this.worldViewProjection);\n    }\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const vector = this.vector;\n    const worldViewProjection = this.worldViewProjection;\n    if (!vector.connectedPoint) {\n      return;\n    }\n    const worldViewProjectionName = worldViewProjection.associatedVariableName;\n    const tempVariableName = state._getFreeVariableName(\"screenSpaceTemp\");\n    switch (vector.connectedPoint.type) {\n      case NodeMaterialBlockConnectionPointTypes.Vector3:\n        state.compilationString += `vec4 ${tempVariableName} = ${worldViewProjectionName} * vec4(${vector.associatedVariableName}, 1.0);\\r\\n`;\n        break;\n      case NodeMaterialBlockConnectionPointTypes.Vector4:\n        state.compilationString += `vec4 ${tempVariableName} = ${worldViewProjectionName} * ${vector.associatedVariableName};\\r\\n`;\n        break;\n    }\n    state.compilationString += `${tempVariableName}.xy /= ${tempVariableName}.w;`;\n    state.compilationString += `${tempVariableName}.xy = ${tempVariableName}.xy * 0.5 + vec2(0.5, 0.5);`;\n    if (this.output.hasEndpoints) {\n      state.compilationString += this._declareOutput(this.output, state) + ` = ${tempVariableName}.xy;\\r\\n`;\n    }\n    if (this.x.hasEndpoints) {\n      state.compilationString += this._declareOutput(this.x, state) + ` = ${tempVariableName}.x;\\r\\n`;\n    }\n    if (this.y.hasEndpoints) {\n      state.compilationString += this._declareOutput(this.y, state) + ` = ${tempVariableName}.y;\\r\\n`;\n    }\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.ScreenSpaceBlock\", ScreenSpaceBlock);","map":{"version":3,"mappings":"AAAA,SAASA,iBAAiB,QAAQ,4BAA0B;AAC5D,SAASC,qCAAqC,QAAQ,sDAAoD;AAE1G,SAASC,wBAAwB,QAAQ,yCAAuC;AAEhF,SAASC,aAAa,QAAQ,+BAA6B;AAE3D,SAASC,wBAAwB,QAAQ,yCAAuC;AAChF,SAASC,UAAU,QAAQ,wBAAsB;AAEjD;;;AAGA,OAAM,MAAOC,gBAAiB,SAAQN,iBAAiB;EACnD;;;;EAIAO,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,EAAEN,wBAAwB,CAACO,QAAQ,CAAC;IAE9C,IAAI,CAACC,aAAa,CAAC,QAAQ,EAAET,qCAAqC,CAACU,UAAU,CAAC;IAC9E,IAAI,CAACD,aAAa,CAAC,qBAAqB,EAAET,qCAAqC,CAACW,MAAM,CAAC;IACvF,IAAI,CAACC,cAAc,CAAC,QAAQ,EAAEZ,qCAAqC,CAACa,OAAO,CAAC;IAC5E,IAAI,CAACD,cAAc,CAAC,GAAG,EAAEZ,qCAAqC,CAACc,KAAK,CAAC;IACrE,IAAI,CAACF,cAAc,CAAC,GAAG,EAAEZ,qCAAqC,CAACc,KAAK,CAAC;IAErE,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,0CAA0C,CACrDhB,qCAAqC,CAACiB,MAAM,GAAGjB,qCAAqC,CAACkB,OAAO,GAAGlB,qCAAqC,CAACmB,OAAO,CAC/I;EACL;EAEA;;;;EAIOC,YAAY;IACf,OAAO,kBAAkB;EAC7B;EAEA;;;EAGA,IAAWC,MAAM;IACb,OAAO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWC,mBAAmB;IAC1B,OAAO,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWE,MAAM;IACb,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEA;;;EAGA,IAAWC,CAAC;IACR,OAAO,IAAI,CAACD,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEA;;;EAGA,IAAWE,CAAC;IACR,OAAO,IAAI,CAACF,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEOG,aAAa,CAACC,QAAsB;IACvC,IAAI,CAAC,IAAI,CAACN,mBAAmB,CAACO,WAAW,EAAE;MACvC,IAAIC,wBAAwB,GAAGF,QAAQ,CAACG,wBAAwB,CAAEC,CAAC,IAAKA,CAAC,CAACC,WAAW,KAAK/B,wBAAwB,CAACgC,mBAAmB,CAAC;MAEvI,IAAI,CAACJ,wBAAwB,EAAE;QAC3BA,wBAAwB,GAAG,IAAI3B,UAAU,CAAC,qBAAqB,CAAC;QAChE2B,wBAAwB,CAACK,gBAAgB,CAACjC,wBAAwB,CAACgC,mBAAmB,CAAC;;MAE3FJ,wBAAwB,CAACP,MAAM,CAACa,SAAS,CAAC,IAAI,CAACd,mBAAmB,CAAC;;EAE3E;EAEUe,WAAW,CAACC,KAA6B;IAC/C,KAAK,CAACD,WAAW,CAACC,KAAK,CAAC;IAExB,MAAMlB,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,MAAME,mBAAmB,GAAG,IAAI,CAACA,mBAAmB;IAEpD,IAAI,CAACF,MAAM,CAACmB,cAAc,EAAE;MACxB;;IAGJ,MAAMC,uBAAuB,GAAGlB,mBAAmB,CAACmB,sBAAsB;IAE1E,MAAMC,gBAAgB,GAAGJ,KAAK,CAACK,oBAAoB,CAAC,iBAAiB,CAAC;IAEtE,QAAQvB,MAAM,CAACmB,cAAc,CAACK,IAAI;MAC9B,KAAK7C,qCAAqC,CAACkB,OAAO;QAC9CqB,KAAK,CAACO,iBAAiB,IAAI,QAAQH,gBAAgB,MAAMF,uBAAuB,WAAWpB,MAAM,CAACqB,sBAAsB,aAAa;QACrI;MACJ,KAAK1C,qCAAqC,CAACmB,OAAO;QAC9CoB,KAAK,CAACO,iBAAiB,IAAI,QAAQH,gBAAgB,MAAMF,uBAAuB,MAAMpB,MAAM,CAACqB,sBAAsB,OAAO;QAC1H;IAAM;IAGdH,KAAK,CAACO,iBAAiB,IAAI,GAAGH,gBAAgB,UAAUA,gBAAgB,KAAK;IAC7EJ,KAAK,CAACO,iBAAiB,IAAI,GAAGH,gBAAgB,SAASA,gBAAgB,6BAA6B;IAEpG,IAAI,IAAI,CAACnB,MAAM,CAACuB,YAAY,EAAE;MAC1BR,KAAK,CAACO,iBAAiB,IAAI,IAAI,CAACE,cAAc,CAAC,IAAI,CAACxB,MAAM,EAAEe,KAAK,CAAC,GAAG,MAAMI,gBAAgB,UAAU;;IAEzG,IAAI,IAAI,CAACjB,CAAC,CAACqB,YAAY,EAAE;MACrBR,KAAK,CAACO,iBAAiB,IAAI,IAAI,CAACE,cAAc,CAAC,IAAI,CAACtB,CAAC,EAAEa,KAAK,CAAC,GAAG,MAAMI,gBAAgB,SAAS;;IAEnG,IAAI,IAAI,CAAChB,CAAC,CAACoB,YAAY,EAAE;MACrBR,KAAK,CAACO,iBAAiB,IAAI,IAAI,CAACE,cAAc,CAAC,IAAI,CAACrB,CAAC,EAAEY,KAAK,CAAC,GAAG,MAAMI,gBAAgB,SAAS;;IAGnG,OAAO,IAAI;EACf;;AAGJzC,aAAa,CAAC,0BAA0B,EAAEG,gBAAgB,CAAC","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","NodeMaterialSystemValues","InputBlock","ScreenSpaceBlock","constructor","name","Fragment","registerInput","AutoDetect","Matrix","registerOutput","Vector2","Float","inputs","addExcludedConnectionPointFromAllowedTypes","Color3","Vector3","Vector4","getClassName","vector","_inputs","worldViewProjection","output","_outputs","x","y","autoConfigure","material","isConnected","worldViewProjectionInput","getInputBlockByPredicate","b","systemValue","WorldViewProjection","setAsSystemValue","connectTo","_buildBlock","state","connectedPoint","worldViewProjectionName","associatedVariableName","tempVariableName","_getFreeVariableName","type","compilationString","hasEndpoints","_declareOutput"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/Fragment/screenSpaceBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { NodeMaterial } from \"../../nodeMaterial\";\r\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\n\r\n/**\r\n * Block used to transform a vector3 or a vector4 into screen space\r\n */\r\nexport class ScreenSpaceBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new ScreenSpaceBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"worldViewProjection\", NodeMaterialBlockConnectionPointTypes.Matrix);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n        this.registerOutput(\"x\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"y\", NodeMaterialBlockConnectionPointTypes.Float);\r\n\r\n        this.inputs[0].addExcludedConnectionPointFromAllowedTypes(\r\n            NodeMaterialBlockConnectionPointTypes.Color3 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ScreenSpaceBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the vector input\r\n     */\r\n    public get vector(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the worldViewProjection transform input\r\n     */\r\n    public get worldViewProjection(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the x output component\r\n     */\r\n    public get x(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the y output component\r\n     */\r\n    public get y(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.worldViewProjection.isConnected) {\r\n            let worldViewProjectionInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.WorldViewProjection);\r\n\r\n            if (!worldViewProjectionInput) {\r\n                worldViewProjectionInput = new InputBlock(\"worldViewProjection\");\r\n                worldViewProjectionInput.setAsSystemValue(NodeMaterialSystemValues.WorldViewProjection);\r\n            }\r\n            worldViewProjectionInput.output.connectTo(this.worldViewProjection);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const vector = this.vector;\r\n        const worldViewProjection = this.worldViewProjection;\r\n\r\n        if (!vector.connectedPoint) {\r\n            return;\r\n        }\r\n\r\n        const worldViewProjectionName = worldViewProjection.associatedVariableName;\r\n\r\n        const tempVariableName = state._getFreeVariableName(\"screenSpaceTemp\");\r\n\r\n        switch (vector.connectedPoint.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                state.compilationString += `vec4 ${tempVariableName} = ${worldViewProjectionName} * vec4(${vector.associatedVariableName}, 1.0);\\r\\n`;\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                state.compilationString += `vec4 ${tempVariableName} = ${worldViewProjectionName} * ${vector.associatedVariableName};\\r\\n`;\r\n                break;\r\n        }\r\n\r\n        state.compilationString += `${tempVariableName}.xy /= ${tempVariableName}.w;`;\r\n        state.compilationString += `${tempVariableName}.xy = ${tempVariableName}.xy * 0.5 + vec2(0.5, 0.5);`;\r\n\r\n        if (this.output.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(this.output, state) + ` = ${tempVariableName}.xy;\\r\\n`;\r\n        }\r\n        if (this.x.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(this.x, state) + ` = ${tempVariableName}.x;\\r\\n`;\r\n        }\r\n        if (this.y.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(this.y, state) + ` = ${tempVariableName}.y;\\r\\n`;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ScreenSpaceBlock\", ScreenSpaceBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}