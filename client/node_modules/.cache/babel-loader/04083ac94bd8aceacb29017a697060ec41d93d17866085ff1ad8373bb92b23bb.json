{"ast":null,"code":"// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"lightsFragmentFunctions\";\nconst shader = `struct lightingInfo\n{\nvec3 diffuse;\n#ifdef SPECULARTERM\nvec3 specular;\n#endif\n#ifdef NDOTL\nfloat ndl;\n#endif\n};\nlightingInfo computeLighting(vec3 viewDirectionW,vec3 vNormal,vec4 lightData,vec3 diffuseColor,vec3 specularColor,float range,float glossiness) {\nlightingInfo result;\nvec3 lightVectorW;\nfloat attenuation=1.0;\nif (lightData.w==0.)\n{\nvec3 direction=lightData.xyz-vPositionW;\nattenuation=max(0.,1.0-length(direction)/range);\nlightVectorW=normalize(direction);\n}\nelse\n{\nlightVectorW=normalize(-lightData.xyz);\n}\nfloat ndl=max(0.,dot(vNormal,lightVectorW));\n#ifdef NDOTL\nresult.ndl=ndl;\n#endif\nresult.diffuse=ndl*diffuseColor*attenuation;\n#ifdef SPECULARTERM\nvec3 angleW=normalize(viewDirectionW+lightVectorW);\nfloat specComp=max(0.,dot(vNormal,angleW));\nspecComp=pow(specComp,max(1.,glossiness));\nresult.specular=specComp*specularColor*attenuation;\n#endif\nreturn result;\n}\nlightingInfo computeSpotLighting(vec3 viewDirectionW,vec3 vNormal,vec4 lightData,vec4 lightDirection,vec3 diffuseColor,vec3 specularColor,float range,float glossiness) {\nlightingInfo result;\nvec3 direction=lightData.xyz-vPositionW;\nvec3 lightVectorW=normalize(direction);\nfloat attenuation=max(0.,1.0-length(direction)/range);\nfloat cosAngle=max(0.,dot(lightDirection.xyz,-lightVectorW));\nif (cosAngle>=lightDirection.w)\n{\ncosAngle=max(0.,pow(cosAngle,lightData.w));\nattenuation*=cosAngle;\nfloat ndl=max(0.,dot(vNormal,lightVectorW));\n#ifdef NDOTL\nresult.ndl=ndl;\n#endif\nresult.diffuse=ndl*diffuseColor*attenuation;\n#ifdef SPECULARTERM\nvec3 angleW=normalize(viewDirectionW+lightVectorW);\nfloat specComp=max(0.,dot(vNormal,angleW));\nspecComp=pow(specComp,max(1.,glossiness));\nresult.specular=specComp*specularColor*attenuation;\n#endif\nreturn result;\n}\nresult.diffuse=vec3(0.);\n#ifdef SPECULARTERM\nresult.specular=vec3(0.);\n#endif\n#ifdef NDOTL\nresult.ndl=0.;\n#endif\nreturn result;\n}\nlightingInfo computeHemisphericLighting(vec3 viewDirectionW,vec3 vNormal,vec4 lightData,vec3 diffuseColor,vec3 specularColor,vec3 groundColor,float glossiness) {\nlightingInfo result;\nfloat ndl=dot(vNormal,lightData.xyz)*0.5+0.5;\n#ifdef NDOTL\nresult.ndl=ndl;\n#endif\nresult.diffuse=mix(groundColor,diffuseColor,ndl);\n#ifdef SPECULARTERM\nvec3 angleW=normalize(viewDirectionW+lightData.xyz);\nfloat specComp=max(0.,dot(vNormal,angleW));\nspecComp=pow(specComp,max(1.,glossiness));\nresult.specular=specComp*specularColor;\n#endif\nreturn result;\n}\n#define inline\nvec3 computeProjectionTextureDiffuseLighting(sampler2D projectionLightSampler,mat4 textureProjectionMatrix){\nvec4 strq=textureProjectionMatrix*vec4(vPositionW,1.0);\nstrq/=strq.w;\nvec3 textureColor=texture2D(projectionLightSampler,strq.xy).rgb;\nreturn textureColor;\n}`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const lightsFragmentFunctions = {\n  name,\n  shader\n};","map":{"version":3,"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,8BAA4B;AAExD,MAAMC,IAAI,GAAG,yBAAyB;AACtC,MAAMC,MAAM,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA0Fb;AACF;AACAF,WAAW,CAACG,oBAAoB,CAACF,IAAI,CAAC,GAAGC,MAAM;AAC/C;AACA,OAAO,MAAME,uBAAuB,GAAG;EAAEH,IAAI;EAAEC;AAAM,CAAE","names":["ShaderStore","name","shader","IncludesShadersStore","lightsFragmentFunctions"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"lightsFragmentFunctions\";\nconst shader = `struct lightingInfo\r{\rvec3 diffuse;\r#ifdef SPECULARTERM\nvec3 specular;\r#endif\n#ifdef NDOTL\nfloat ndl;\r#endif\n};\rlightingInfo computeLighting(vec3 viewDirectionW,vec3 vNormal,vec4 lightData,vec3 diffuseColor,vec3 specularColor,float range,float glossiness) {\rlightingInfo result;\rvec3 lightVectorW;\rfloat attenuation=1.0;\rif (lightData.w==0.)\r{\rvec3 direction=lightData.xyz-vPositionW;\rattenuation=max(0.,1.0-length(direction)/range);\rlightVectorW=normalize(direction);\r}\relse\r{\rlightVectorW=normalize(-lightData.xyz);\r}\rfloat ndl=max(0.,dot(vNormal,lightVectorW));\r#ifdef NDOTL\nresult.ndl=ndl;\r#endif\nresult.diffuse=ndl*diffuseColor*attenuation;\r#ifdef SPECULARTERM\nvec3 angleW=normalize(viewDirectionW+lightVectorW);\rfloat specComp=max(0.,dot(vNormal,angleW));\rspecComp=pow(specComp,max(1.,glossiness));\rresult.specular=specComp*specularColor*attenuation;\r#endif\nreturn result;\r}\rlightingInfo computeSpotLighting(vec3 viewDirectionW,vec3 vNormal,vec4 lightData,vec4 lightDirection,vec3 diffuseColor,vec3 specularColor,float range,float glossiness) {\rlightingInfo result;\rvec3 direction=lightData.xyz-vPositionW;\rvec3 lightVectorW=normalize(direction);\rfloat attenuation=max(0.,1.0-length(direction)/range);\rfloat cosAngle=max(0.,dot(lightDirection.xyz,-lightVectorW));\rif (cosAngle>=lightDirection.w)\r{\rcosAngle=max(0.,pow(cosAngle,lightData.w));\rattenuation*=cosAngle;\rfloat ndl=max(0.,dot(vNormal,lightVectorW));\r#ifdef NDOTL\nresult.ndl=ndl;\r#endif\nresult.diffuse=ndl*diffuseColor*attenuation;\r#ifdef SPECULARTERM\nvec3 angleW=normalize(viewDirectionW+lightVectorW);\rfloat specComp=max(0.,dot(vNormal,angleW));\rspecComp=pow(specComp,max(1.,glossiness));\rresult.specular=specComp*specularColor*attenuation;\r#endif\nreturn result;\r}\rresult.diffuse=vec3(0.);\r#ifdef SPECULARTERM\nresult.specular=vec3(0.);\r#endif\n#ifdef NDOTL\nresult.ndl=0.;\r#endif\nreturn result;\r}\rlightingInfo computeHemisphericLighting(vec3 viewDirectionW,vec3 vNormal,vec4 lightData,vec3 diffuseColor,vec3 specularColor,vec3 groundColor,float glossiness) {\rlightingInfo result;\rfloat ndl=dot(vNormal,lightData.xyz)*0.5+0.5;\r#ifdef NDOTL\nresult.ndl=ndl;\r#endif\nresult.diffuse=mix(groundColor,diffuseColor,ndl);\r#ifdef SPECULARTERM\nvec3 angleW=normalize(viewDirectionW+lightData.xyz);\rfloat specComp=max(0.,dot(vNormal,angleW));\rspecComp=pow(specComp,max(1.,glossiness));\rresult.specular=specComp*specularColor;\r#endif\nreturn result;\r}\r#define inline\nvec3 computeProjectionTextureDiffuseLighting(sampler2D projectionLightSampler,mat4 textureProjectionMatrix){\rvec4 strq=textureProjectionMatrix*vec4(vPositionW,1.0);\rstrq/=strq.w;\rvec3 textureColor=texture2D(projectionLightSampler,strq.xy).rgb;\rreturn textureColor;\r}`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const lightsFragmentFunctions = { name, shader };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}