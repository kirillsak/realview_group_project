{"ast":null,"code":"import { UniversalCamera } from \"./universalCamera.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Node } from \"../node.js\";\nNode.AddNodeConstructor(\"GamepadCamera\", (name, scene) => {\n  return () => new GamepadCamera(name, Vector3.Zero(), scene);\n});\n/**\n * This represents a FPS type of camera. This is only here for back compat purpose.\n * Please use the UniversalCamera instead as both are identical.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#universal-camera\n */\nexport class GamepadCamera extends UniversalCamera {\n  /**\n   * Instantiates a new Gamepad Camera\n   * This represents a FPS type of camera. This is only here for back compat purpose.\n   * Please use the UniversalCamera instead as both are identical.\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#universal-camera\n   * @param name Define the name of the camera in the scene\n   * @param position Define the start position of the camera in the scene\n   * @param scene Define the scene the camera belongs to\n   */\n  constructor(name, position, scene) {\n    super(name, position, scene);\n  }\n  /**\n   * Gets the current object class name.\n   * @returns the class name\n   */\n  getClassName() {\n    return \"GamepadCamera\";\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,eAAe,QAAQ,sBAAoB;AAEpD,SAASC,OAAO,QAAQ,yBAAuB;AAC/C,SAASC,IAAI,QAAQ,YAAU;AAC/BA,IAAI,CAACC,kBAAkB,CAAC,eAAe,EAAE,CAACC,IAAI,EAAEC,KAAK,KAAI;EACrD,OAAO,MAAM,IAAIC,aAAa,CAACF,IAAI,EAAEH,OAAO,CAACM,IAAI,EAAE,EAAEF,KAAK,CAAC;AAC/D,CAAC,CAAC;AAEF;;;;;AAKA,OAAM,MAAOC,aAAc,SAAQN,eAAe;EAC9C;;;;;;;;;EASAQ,YAAYJ,IAAY,EAAEK,QAAiB,EAAEJ,KAAa;IACtD,KAAK,CAACD,IAAI,EAAEK,QAAQ,EAAEJ,KAAK,CAAC;EAChC;EAEA;;;;EAIOK,YAAY;IACf,OAAO,eAAe;EAC1B","names":["UniversalCamera","Vector3","Node","AddNodeConstructor","name","scene","GamepadCamera","Zero","constructor","position","getClassName"],"sourceRoot":"","sources":["../../../../lts/core/generated/Cameras/gamepadCamera.ts"],"sourcesContent":["import { UniversalCamera } from \"./universalCamera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nNode.AddNodeConstructor(\"GamepadCamera\", (name, scene) => {\r\n    return () => new GamepadCamera(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * This represents a FPS type of camera. This is only here for back compat purpose.\r\n * Please use the UniversalCamera instead as both are identical.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#universal-camera\r\n */\r\nexport class GamepadCamera extends UniversalCamera {\r\n    /**\r\n     * Instantiates a new Gamepad Camera\r\n     * This represents a FPS type of camera. This is only here for back compat purpose.\r\n     * Please use the UniversalCamera instead as both are identical.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#universal-camera\r\n     * @param name Define the name of the camera in the scene\r\n     * @param position Define the start position of the camera in the scene\r\n     * @param scene Define the scene the camera belongs to\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene) {\r\n        super(name, position, scene);\r\n    }\r\n\r\n    /**\r\n     * Gets the current object class name.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"GamepadCamera\";\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}