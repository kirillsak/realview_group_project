{"ast":null,"code":"import { CubeMapToSphericalPolynomialTools } from \"../../Misc/HighDynamicRange/cubemapToSphericalPolynomial.js\";\nimport { BaseTexture } from \"./baseTexture.js\";\nBaseTexture.prototype.forceSphericalPolynomialsRecompute = function () {\n  if (this._texture) {\n    this._texture._sphericalPolynomial = null;\n    this._texture._sphericalPolynomialPromise = null;\n    this._texture._sphericalPolynomialComputed = false;\n  }\n};\nObject.defineProperty(BaseTexture.prototype, \"sphericalPolynomial\", {\n  get: function () {\n    if (this._texture) {\n      if (this._texture._sphericalPolynomial || this._texture._sphericalPolynomialComputed) {\n        return this._texture._sphericalPolynomial;\n      }\n      if (this._texture.isReady) {\n        if (!this._texture._sphericalPolynomialPromise) {\n          this._texture._sphericalPolynomialPromise = CubeMapToSphericalPolynomialTools.ConvertCubeMapTextureToSphericalPolynomial(this);\n          if (this._texture._sphericalPolynomialPromise === null) {\n            this._texture._sphericalPolynomialComputed = true;\n          } else {\n            this._texture._sphericalPolynomialPromise.then(sphericalPolynomial => {\n              this._texture._sphericalPolynomial = sphericalPolynomial;\n              this._texture._sphericalPolynomialComputed = true;\n            });\n          }\n        }\n        return null;\n      }\n    }\n    return null;\n  },\n  set: function (value) {\n    if (this._texture) {\n      this._texture._sphericalPolynomial = value;\n    }\n  },\n  enumerable: true,\n  configurable: true\n});","map":{"version":3,"mappings":"AACA,SAASA,iCAAiC,QAAQ,6DAA2D;AAE7G,SAASC,WAAW,QAAQ,kBAAgB;AAmB5CA,WAAW,CAACC,SAAS,CAACC,kCAAkC,GAAG;EACvD,IAAI,IAAI,CAACC,QAAQ,EAAE;IACf,IAAI,CAACA,QAAQ,CAACC,oBAAoB,GAAG,IAAI;IACzC,IAAI,CAACD,QAAQ,CAACE,2BAA2B,GAAG,IAAI;IAChD,IAAI,CAACF,QAAQ,CAACG,4BAA4B,GAAG,KAAK;;AAE1D,CAAC;AAEDC,MAAM,CAACC,cAAc,CAACR,WAAW,CAACC,SAAS,EAAE,qBAAqB,EAAE;EAChEQ,GAAG,EAAE;IACD,IAAI,IAAI,CAACN,QAAQ,EAAE;MACf,IAAI,IAAI,CAACA,QAAQ,CAACC,oBAAoB,IAAI,IAAI,CAACD,QAAQ,CAACG,4BAA4B,EAAE;QAClF,OAAO,IAAI,CAACH,QAAQ,CAACC,oBAAoB;;MAG7C,IAAI,IAAI,CAACD,QAAQ,CAACO,OAAO,EAAE;QACvB,IAAI,CAAC,IAAI,CAACP,QAAQ,CAACE,2BAA2B,EAAE;UAC5C,IAAI,CAACF,QAAQ,CAACE,2BAA2B,GAAGN,iCAAiC,CAACY,0CAA0C,CAAC,IAAI,CAAC;UAC9H,IAAI,IAAI,CAACR,QAAQ,CAACE,2BAA2B,KAAK,IAAI,EAAE;YACpD,IAAI,CAACF,QAAQ,CAACG,4BAA4B,GAAG,IAAI;WACpD,MAAM;YACH,IAAI,CAACH,QAAQ,CAACE,2BAA2B,CAACO,IAAI,CAAEC,mBAAmB,IAAI;cACnE,IAAI,CAACV,QAAS,CAACC,oBAAoB,GAAGS,mBAAmB;cACzD,IAAI,CAACV,QAAS,CAACG,4BAA4B,GAAG,IAAI;YACtD,CAAC,CAAC;;;QAIV,OAAO,IAAI;;;IAInB,OAAO,IAAI;EACf,CAAC;EACDQ,GAAG,EAAE,UAA6BC,KAAoC;IAClE,IAAI,IAAI,CAACZ,QAAQ,EAAE;MACf,IAAI,CAACA,QAAQ,CAACC,oBAAoB,GAAGW,KAAK;;EAElD,CAAC;EACDC,UAAU,EAAE,IAAI;EAChBC,YAAY,EAAE;CACjB,CAAC","names":["CubeMapToSphericalPolynomialTools","BaseTexture","prototype","forceSphericalPolynomialsRecompute","_texture","_sphericalPolynomial","_sphericalPolynomialPromise","_sphericalPolynomialComputed","Object","defineProperty","get","isReady","ConvertCubeMapTextureToSphericalPolynomial","then","sphericalPolynomial","set","value","enumerable","configurable"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/Textures/baseTexture.polynomial.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { CubeMapToSphericalPolynomialTools } from \"../../Misc/HighDynamicRange/cubemapToSphericalPolynomial\";\r\nimport type { SphericalPolynomial } from \"../../Maths/sphericalPolynomial\";\r\nimport { BaseTexture } from \"./baseTexture\";\r\n\r\ndeclare module \"./baseTexture\" {\r\n    export interface BaseTexture {\r\n        /**\r\n         * Get the polynomial representation of the texture data.\r\n         * This is mainly use as a fast way to recover IBL Diffuse irradiance data.\r\n         * @see https://learnopengl.com/PBR/IBL/Diffuse-irradiance\r\n         */\r\n        sphericalPolynomial: Nullable<SphericalPolynomial>;\r\n\r\n        /**\r\n         * Force recomputation of spherical polynomials.\r\n         * Can be useful if you generate a cubemap multiple times (from a probe for eg) and you need the proper polynomials each time\r\n         */\r\n        forceSphericalPolynomialsRecompute(): void;\r\n    }\r\n}\r\n\r\nBaseTexture.prototype.forceSphericalPolynomialsRecompute = function (): void {\r\n    if (this._texture) {\r\n        this._texture._sphericalPolynomial = null;\r\n        this._texture._sphericalPolynomialPromise = null;\r\n        this._texture._sphericalPolynomialComputed = false;\r\n    }\r\n};\r\n\r\nObject.defineProperty(BaseTexture.prototype, \"sphericalPolynomial\", {\r\n    get: function (this: BaseTexture) {\r\n        if (this._texture) {\r\n            if (this._texture._sphericalPolynomial || this._texture._sphericalPolynomialComputed) {\r\n                return this._texture._sphericalPolynomial;\r\n            }\r\n\r\n            if (this._texture.isReady) {\r\n                if (!this._texture._sphericalPolynomialPromise) {\r\n                    this._texture._sphericalPolynomialPromise = CubeMapToSphericalPolynomialTools.ConvertCubeMapTextureToSphericalPolynomial(this);\r\n                    if (this._texture._sphericalPolynomialPromise === null) {\r\n                        this._texture._sphericalPolynomialComputed = true;\r\n                    } else {\r\n                        this._texture._sphericalPolynomialPromise.then((sphericalPolynomial) => {\r\n                            this._texture!._sphericalPolynomial = sphericalPolynomial;\r\n                            this._texture!._sphericalPolynomialComputed = true;\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n    set: function (this: BaseTexture, value: Nullable<SphericalPolynomial>) {\r\n        if (this._texture) {\r\n            this._texture._sphericalPolynomial = value;\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}