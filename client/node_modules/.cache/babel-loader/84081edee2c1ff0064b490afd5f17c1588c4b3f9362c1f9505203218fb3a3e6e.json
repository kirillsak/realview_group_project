{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../tslib.es6.js\";\nimport { serialize, serializeAsTexture, expandToProperty, serializeAsColor3 } from \"../../Misc/decorators.js\";\nimport { Color3 } from \"../../Maths/math.color.js\";\nimport { MaterialFlags } from \"../materialFlags.js\";\nimport { MaterialHelper } from \"../../Materials/materialHelper.js\";\nimport { MaterialPluginBase } from \"../materialPluginBase.js\";\nimport { MaterialDefines } from \"../materialDefines.js\";\n/**\n * @internal\n */\nexport class MaterialClearCoatDefines extends MaterialDefines {\n  constructor() {\n    super(...arguments);\n    this.CLEARCOAT = false;\n    this.CLEARCOAT_DEFAULTIOR = false;\n    this.CLEARCOAT_TEXTURE = false;\n    this.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n    this.CLEARCOAT_TEXTUREDIRECTUV = 0;\n    this.CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV = 0;\n    this.CLEARCOAT_BUMP = false;\n    this.CLEARCOAT_BUMPDIRECTUV = 0;\n    this.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n    this.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\n    this.CLEARCOAT_REMAP_F0 = false;\n    this.CLEARCOAT_TINT = false;\n    this.CLEARCOAT_TINT_TEXTURE = false;\n    this.CLEARCOAT_TINT_TEXTUREDIRECTUV = 0;\n    this.CLEARCOAT_TINT_GAMMATEXTURE = false;\n  }\n}\n/**\n * Plugin that implements the clear coat component of the PBR material\n */\nexport class PBRClearCoatConfiguration extends MaterialPluginBase {\n  constructor(material, addToPluginList = true) {\n    super(material, \"PBRClearCoat\", 100, new MaterialClearCoatDefines(), addToPluginList);\n    this._isEnabled = false;\n    /**\n     * Defines if the clear coat is enabled in the material.\n     */\n    this.isEnabled = false;\n    /**\n     * Defines the clear coat layer strength (between 0 and 1) it defaults to 1.\n     */\n    this.intensity = 1;\n    /**\n     * Defines the clear coat layer roughness.\n     */\n    this.roughness = 0;\n    this._indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n    /**\n     * Defines the index of refraction of the clear coat.\n     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\n     * The default fits with a polyurethane material.\n     * Changing the default value is more performance intensive.\n     */\n    this.indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n    this._texture = null;\n    /**\n     * Stores the clear coat values in a texture (red channel is intensity and green channel is roughness)\n     * If useRoughnessFromMainTexture is false, the green channel of texture is not used and the green channel of textureRoughness is used instead\n     * if textureRoughness is not empty, else no texture roughness is used\n     */\n    this.texture = null;\n    this._useRoughnessFromMainTexture = true;\n    /**\n     * Indicates that the green channel of the texture property will be used for roughness (default: true)\n     * If false, the green channel from textureRoughness is used for roughness\n     */\n    this.useRoughnessFromMainTexture = true;\n    this._textureRoughness = null;\n    /**\n     * Stores the clear coat roughness in a texture (green channel)\n     * Not used if useRoughnessFromMainTexture is true\n     */\n    this.textureRoughness = null;\n    this._remapF0OnInterfaceChange = true;\n    /**\n     * Defines if the F0 value should be remapped to account for the interface change in the material.\n     */\n    this.remapF0OnInterfaceChange = true;\n    this._bumpTexture = null;\n    /**\n     * Define the clear coat specific bump texture.\n     */\n    this.bumpTexture = null;\n    this._isTintEnabled = false;\n    /**\n     * Defines if the clear coat tint is enabled in the material.\n     */\n    this.isTintEnabled = false;\n    /**\n     * Defines the clear coat tint of the material.\n     * This is only use if tint is enabled\n     */\n    this.tintColor = Color3.White();\n    /**\n     * Defines the distance at which the tint color should be found in the\n     * clear coat media.\n     * This is only use if tint is enabled\n     */\n    this.tintColorAtDistance = 1;\n    /**\n     * Defines the clear coat layer thickness.\n     * This is only use if tint is enabled\n     */\n    this.tintThickness = 1;\n    this._tintTexture = null;\n    /**\n     * Stores the clear tint values in a texture.\n     * rgb is tint\n     * a is a thickness factor\n     */\n    this.tintTexture = null;\n    this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[1];\n  }\n  /** @internal */\n  _markAllSubMeshesAsTexturesDirty() {\n    this._enable(this._isEnabled);\n    this._internalMarkAllSubMeshesAsTexturesDirty();\n  }\n  isReadyForSubMesh(defines, scene, engine) {\n    if (!this._isEnabled) {\n      return true;\n    }\n    const disableBumpMap = this._material._disableBumpMap;\n    if (defines._areTexturesDirty) {\n      if (scene.texturesEnabled) {\n        if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n          if (!this._texture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n        if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\n          if (!this._textureRoughness.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n        if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\n          // Bump texture cannot be not blocking.\n          if (!this._bumpTexture.isReady()) {\n            return false;\n          }\n        }\n        if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n          if (!this._tintTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n  prepareDefinesBeforeAttributes(defines, scene) {\n    var _a;\n    if (this._isEnabled) {\n      defines.CLEARCOAT = true;\n      defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = this._useRoughnessFromMainTexture;\n      defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = this._texture !== null && this._texture._texture === ((_a = this._textureRoughness) === null || _a === void 0 ? void 0 : _a._texture) && this._texture.checkTransformsAreIdentical(this._textureRoughness);\n      defines.CLEARCOAT_REMAP_F0 = this._remapF0OnInterfaceChange;\n      if (defines._areTexturesDirty) {\n        if (scene.texturesEnabled) {\n          if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"CLEARCOAT_TEXTURE\");\n          } else {\n            defines.CLEARCOAT_TEXTURE = false;\n          }\n          if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._textureRoughness, defines, \"CLEARCOAT_TEXTURE_ROUGHNESS\");\n          } else {\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n          }\n          if (this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"CLEARCOAT_BUMP\");\n          } else {\n            defines.CLEARCOAT_BUMP = false;\n          }\n          defines.CLEARCOAT_DEFAULTIOR = this._indexOfRefraction === PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n          if (this._isTintEnabled) {\n            defines.CLEARCOAT_TINT = true;\n            if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n              MaterialHelper.PrepareDefinesForMergedUV(this._tintTexture, defines, \"CLEARCOAT_TINT_TEXTURE\");\n              defines.CLEARCOAT_TINT_GAMMATEXTURE = this._tintTexture.gammaSpace;\n            } else {\n              defines.CLEARCOAT_TINT_TEXTURE = false;\n            }\n          } else {\n            defines.CLEARCOAT_TINT = false;\n            defines.CLEARCOAT_TINT_TEXTURE = false;\n          }\n        }\n      }\n    } else {\n      defines.CLEARCOAT = false;\n      defines.CLEARCOAT_TEXTURE = false;\n      defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n      defines.CLEARCOAT_BUMP = false;\n      defines.CLEARCOAT_TINT = false;\n      defines.CLEARCOAT_TINT_TEXTURE = false;\n      defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n      defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\n      defines.CLEARCOAT_DEFAULTIOR = false;\n      defines.CLEARCOAT_TEXTUREDIRECTUV = 0;\n      defines.CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV = 0;\n      defines.CLEARCOAT_BUMPDIRECTUV = 0;\n      defines.CLEARCOAT_REMAP_F0 = false;\n      defines.CLEARCOAT_TINT_TEXTUREDIRECTUV = 0;\n      defines.CLEARCOAT_TINT_GAMMATEXTURE = false;\n    }\n  }\n  bindForSubMesh(uniformBuffer, scene, engine, subMesh) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    if (!this._isEnabled) {\n      return;\n    }\n    const defines = subMesh.materialDefines;\n    const isFrozen = this._material.isFrozen;\n    const disableBumpMap = this._material._disableBumpMap;\n    const invertNormalMapX = this._material._invertNormalMapX;\n    const invertNormalMapY = this._material._invertNormalMapY;\n    const identicalTextures = defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL;\n    if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n      if (identicalTextures && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vClearCoatInfos\", this._texture.coordinatesIndex, this._texture.level, -1, -1);\n        MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"clearCoat\");\n      } else if ((this._texture || this._textureRoughness) && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vClearCoatInfos\", (_b = (_a = this._texture) === null || _a === void 0 ? void 0 : _a.coordinatesIndex) !== null && _b !== void 0 ? _b : 0, (_d = (_c = this._texture) === null || _c === void 0 ? void 0 : _c.level) !== null && _d !== void 0 ? _d : 0, (_f = (_e = this._textureRoughness) === null || _e === void 0 ? void 0 : _e.coordinatesIndex) !== null && _f !== void 0 ? _f : 0, (_h = (_g = this._textureRoughness) === null || _g === void 0 ? void 0 : _g.level) !== null && _h !== void 0 ? _h : 0);\n        if (this._texture) {\n          MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"clearCoat\");\n        }\n        if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE) {\n          MaterialHelper.BindTextureMatrix(this._textureRoughness, uniformBuffer, \"clearCoatRoughness\");\n        }\n      }\n      if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatTextureEnabled && !disableBumpMap) {\n        uniformBuffer.updateFloat2(\"vClearCoatBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level);\n        MaterialHelper.BindTextureMatrix(this._bumpTexture, uniformBuffer, \"clearCoatBump\");\n        if (scene._mirroredCameraPosition) {\n          uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? 1.0 : -1.0, invertNormalMapY ? 1.0 : -1.0);\n        } else {\n          uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? -1.0 : 1.0, invertNormalMapY ? -1.0 : 1.0);\n        }\n      }\n      if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n        uniformBuffer.updateFloat2(\"vClearCoatTintInfos\", this._tintTexture.coordinatesIndex, this._tintTexture.level);\n        MaterialHelper.BindTextureMatrix(this._tintTexture, uniformBuffer, \"clearCoatTint\");\n      }\n      // Clear Coat General params\n      uniformBuffer.updateFloat2(\"vClearCoatParams\", this.intensity, this.roughness);\n      // Clear Coat Refraction params\n      const a = 1 - this._indexOfRefraction;\n      const b = 1 + this._indexOfRefraction;\n      const f0 = Math.pow(-a / b, 2); // Schlicks approx: (ior1 - ior2) / (ior1 + ior2) where ior2 for air is close to vacuum = 1.\n      const eta = 1 / this._indexOfRefraction;\n      uniformBuffer.updateFloat4(\"vClearCoatRefractionParams\", f0, eta, a, b);\n      if (this._isTintEnabled) {\n        uniformBuffer.updateFloat4(\"vClearCoatTintParams\", this.tintColor.r, this.tintColor.g, this.tintColor.b, Math.max(0.00001, this.tintThickness));\n        uniformBuffer.updateFloat(\"clearCoatColorAtDistance\", Math.max(0.00001, this.tintColorAtDistance));\n      }\n    }\n    // Textures\n    if (scene.texturesEnabled) {\n      if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.setTexture(\"clearCoatSampler\", this._texture);\n      }\n      if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.setTexture(\"clearCoatRoughnessSampler\", this._textureRoughness);\n      }\n      if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\n        uniformBuffer.setTexture(\"clearCoatBumpSampler\", this._bumpTexture);\n      }\n      if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n        uniformBuffer.setTexture(\"clearCoatTintSampler\", this._tintTexture);\n      }\n    }\n  }\n  hasTexture(texture) {\n    if (this._texture === texture) {\n      return true;\n    }\n    if (this._textureRoughness === texture) {\n      return true;\n    }\n    if (this._bumpTexture === texture) {\n      return true;\n    }\n    if (this._tintTexture === texture) {\n      return true;\n    }\n    return false;\n  }\n  getActiveTextures(activeTextures) {\n    if (this._texture) {\n      activeTextures.push(this._texture);\n    }\n    if (this._textureRoughness) {\n      activeTextures.push(this._textureRoughness);\n    }\n    if (this._bumpTexture) {\n      activeTextures.push(this._bumpTexture);\n    }\n    if (this._tintTexture) {\n      activeTextures.push(this._tintTexture);\n    }\n  }\n  getAnimatables(animatables) {\n    if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n      animatables.push(this._texture);\n    }\n    if (this._textureRoughness && this._textureRoughness.animations && this._textureRoughness.animations.length > 0) {\n      animatables.push(this._textureRoughness);\n    }\n    if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\n      animatables.push(this._bumpTexture);\n    }\n    if (this._tintTexture && this._tintTexture.animations && this._tintTexture.animations.length > 0) {\n      animatables.push(this._tintTexture);\n    }\n  }\n  dispose(forceDisposeTextures) {\n    var _a, _b, _c, _d;\n    if (forceDisposeTextures) {\n      (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n      (_b = this._textureRoughness) === null || _b === void 0 ? void 0 : _b.dispose();\n      (_c = this._bumpTexture) === null || _c === void 0 ? void 0 : _c.dispose();\n      (_d = this._tintTexture) === null || _d === void 0 ? void 0 : _d.dispose();\n    }\n  }\n  getClassName() {\n    return \"PBRClearCoatConfiguration\";\n  }\n  addFallbacks(defines, fallbacks, currentRank) {\n    if (defines.CLEARCOAT_BUMP) {\n      fallbacks.addFallback(currentRank++, \"CLEARCOAT_BUMP\");\n    }\n    if (defines.CLEARCOAT_TINT) {\n      fallbacks.addFallback(currentRank++, \"CLEARCOAT_TINT\");\n    }\n    if (defines.CLEARCOAT) {\n      fallbacks.addFallback(currentRank++, \"CLEARCOAT\");\n    }\n    return currentRank;\n  }\n  getSamplers(samplers) {\n    samplers.push(\"clearCoatSampler\", \"clearCoatRoughnessSampler\", \"clearCoatBumpSampler\", \"clearCoatTintSampler\");\n  }\n  getUniforms() {\n    return {\n      ubo: [{\n        name: \"vClearCoatParams\",\n        size: 2,\n        type: \"vec2\"\n      }, {\n        name: \"vClearCoatRefractionParams\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"vClearCoatInfos\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"clearCoatMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }, {\n        name: \"clearCoatRoughnessMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }, {\n        name: \"vClearCoatBumpInfos\",\n        size: 2,\n        type: \"vec2\"\n      }, {\n        name: \"vClearCoatTangentSpaceParams\",\n        size: 2,\n        type: \"vec2\"\n      }, {\n        name: \"clearCoatBumpMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }, {\n        name: \"vClearCoatTintParams\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"clearCoatColorAtDistance\",\n        size: 1,\n        type: \"float\"\n      }, {\n        name: \"vClearCoatTintInfos\",\n        size: 2,\n        type: \"vec2\"\n      }, {\n        name: \"clearCoatTintMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }]\n    };\n  }\n}\n/**\n * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\n * The default fits with a polyurethane material.\n * @internal\n */\nPBRClearCoatConfiguration._DefaultIndexOfRefraction = 1.5;\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"isEnabled\", void 0);\n__decorate([serialize()], PBRClearCoatConfiguration.prototype, \"intensity\", void 0);\n__decorate([serialize()], PBRClearCoatConfiguration.prototype, \"roughness\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"indexOfRefraction\", void 0);\n__decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"texture\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"useRoughnessFromMainTexture\", void 0);\n__decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"textureRoughness\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"remapF0OnInterfaceChange\", void 0);\n__decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"bumpTexture\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"isTintEnabled\", void 0);\n__decorate([serializeAsColor3()], PBRClearCoatConfiguration.prototype, \"tintColor\", void 0);\n__decorate([serialize()], PBRClearCoatConfiguration.prototype, \"tintColorAtDistance\", void 0);\n__decorate([serialize()], PBRClearCoatConfiguration.prototype, \"tintThickness\", void 0);\n__decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"tintTexture\", void 0);","map":{"version":3,"mappings":"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","names":["serialize","serializeAsTexture","expandToProperty","serializeAsColor3","Color3","MaterialFlags","MaterialHelper","MaterialPluginBase","MaterialDefines","MaterialClearCoatDefines","constructor","PBRClearCoatConfiguration","material","addToPluginList","_DefaultIndexOfRefraction","White","_internalMarkAllSubMeshesAsTexturesDirty","_dirtyCallbacks","_markAllSubMeshesAsTexturesDirty","_enable","_isEnabled","isReadyForSubMesh","defines","scene","engine","disableBumpMap","_material","_disableBumpMap","_areTexturesDirty","texturesEnabled","_texture","ClearCoatTextureEnabled","isReadyOrNotBlocking","_textureRoughness","getCaps","standardDerivatives","_bumpTexture","ClearCoatBumpTextureEnabled","isReady","_isTintEnabled","_tintTexture","ClearCoatTintTextureEnabled","prepareDefinesBeforeAttributes","CLEARCOAT","CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE","_useRoughnessFromMainTexture","CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL","checkTransformsAreIdentical","CLEARCOAT_REMAP_F0","_remapF0OnInterfaceChange","PrepareDefinesForMergedUV","CLEARCOAT_TEXTURE","CLEARCOAT_TEXTURE_ROUGHNESS","CLEARCOAT_BUMP","CLEARCOAT_DEFAULTIOR","_indexOfRefraction","CLEARCOAT_TINT","CLEARCOAT_TINT_GAMMATEXTURE","gammaSpace","CLEARCOAT_TINT_TEXTURE","CLEARCOAT_TEXTUREDIRECTUV","CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV","CLEARCOAT_BUMPDIRECTUV","CLEARCOAT_TINT_TEXTUREDIRECTUV","bindForSubMesh","uniformBuffer","subMesh","materialDefines","isFrozen","invertNormalMapX","_invertNormalMapX","invertNormalMapY","_invertNormalMapY","identicalTextures","useUbo","isSync","updateFloat4","coordinatesIndex","level","BindTextureMatrix","updateFloat2","_mirroredCameraPosition","intensity","roughness","a","b","f0","Math","pow","eta","tintColor","r","g","max","tintThickness","updateFloat","tintColorAtDistance","setTexture","hasTexture","texture","getActiveTextures","activeTextures","push","getAnimatables","animatables","animations","length","dispose","forceDisposeTextures","getClassName","addFallbacks","fallbacks","currentRank","addFallback","getSamplers","samplers","getUniforms","ubo","name","size","type","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/PBR/pbrClearCoatConfiguration.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../../types\";\r\nimport { serialize, serializeAsTexture, expandToProperty, serializeAsColor3 } from \"../../Misc/decorators\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { MaterialFlags } from \"../materialFlags\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\nimport { MaterialHelper } from \"../../Materials/materialHelper\";\r\nimport type { IAnimatable } from \"../../Animations/animatable.interface\";\r\nimport type { EffectFallbacks } from \"../effectFallbacks\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { MaterialPluginBase } from \"../materialPluginBase\";\r\nimport { MaterialDefines } from \"../materialDefines\";\r\n\r\ndeclare type Engine = import(\"../../Engines/engine\").Engine;\r\ndeclare type Scene = import(\"../../scene\").Scene;\r\ndeclare type PBRBaseMaterial = import(\"./pbrBaseMaterial\").PBRBaseMaterial;\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MaterialClearCoatDefines extends MaterialDefines {\r\n    public CLEARCOAT = false;\r\n    public CLEARCOAT_DEFAULTIOR = false;\r\n    public CLEARCOAT_TEXTURE = false;\r\n    public CLEARCOAT_TEXTURE_ROUGHNESS = false;\r\n    public CLEARCOAT_TEXTUREDIRECTUV = 0;\r\n    public CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV = 0;\r\n    public CLEARCOAT_BUMP = false;\r\n    public CLEARCOAT_BUMPDIRECTUV = 0;\r\n    public CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\r\n    public CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\r\n    public CLEARCOAT_REMAP_F0 = false;\r\n\r\n    public CLEARCOAT_TINT = false;\r\n    public CLEARCOAT_TINT_TEXTURE = false;\r\n    public CLEARCOAT_TINT_TEXTUREDIRECTUV = 0;\r\n    public CLEARCOAT_TINT_GAMMATEXTURE = false;\r\n}\r\n\r\n/**\r\n * Plugin that implements the clear coat component of the PBR material\r\n */\r\nexport class PBRClearCoatConfiguration extends MaterialPluginBase {\r\n    protected _material: PBRBaseMaterial;\r\n\r\n    /**\r\n     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\r\n     * The default fits with a polyurethane material.\r\n     * @internal\r\n     */\r\n    public static readonly _DefaultIndexOfRefraction = 1.5;\r\n\r\n    private _isEnabled = false;\r\n    /**\r\n     * Defines if the clear coat is enabled in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isEnabled = false;\r\n\r\n    /**\r\n     * Defines the clear coat layer strength (between 0 and 1) it defaults to 1.\r\n     */\r\n    @serialize()\r\n    public intensity: number = 1;\r\n\r\n    /**\r\n     * Defines the clear coat layer roughness.\r\n     */\r\n    @serialize()\r\n    public roughness: number = 0;\r\n\r\n    private _indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\r\n    /**\r\n     * Defines the index of refraction of the clear coat.\r\n     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\r\n     * The default fits with a polyurethane material.\r\n     * Changing the default value is more performance intensive.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\r\n\r\n    private _texture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the clear coat values in a texture (red channel is intensity and green channel is roughness)\r\n     * If useRoughnessFromMainTexture is false, the green channel of texture is not used and the green channel of textureRoughness is used instead\r\n     * if textureRoughness is not empty, else no texture roughness is used\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public texture: Nullable<BaseTexture> = null;\r\n\r\n    private _useRoughnessFromMainTexture = true;\r\n    /**\r\n     * Indicates that the green channel of the texture property will be used for roughness (default: true)\r\n     * If false, the green channel from textureRoughness is used for roughness\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useRoughnessFromMainTexture = true;\r\n\r\n    private _textureRoughness: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the clear coat roughness in a texture (green channel)\r\n     * Not used if useRoughnessFromMainTexture is true\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public textureRoughness: Nullable<BaseTexture> = null;\r\n\r\n    private _remapF0OnInterfaceChange = true;\r\n    /**\r\n     * Defines if the F0 value should be remapped to account for the interface change in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public remapF0OnInterfaceChange = true;\r\n\r\n    private _bumpTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define the clear coat specific bump texture.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture: Nullable<BaseTexture> = null;\r\n\r\n    private _isTintEnabled = false;\r\n    /**\r\n     * Defines if the clear coat tint is enabled in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isTintEnabled = false;\r\n\r\n    /**\r\n     * Defines the clear coat tint of the material.\r\n     * This is only use if tint is enabled\r\n     */\r\n    @serializeAsColor3()\r\n    public tintColor = Color3.White();\r\n\r\n    /**\r\n     * Defines the distance at which the tint color should be found in the\r\n     * clear coat media.\r\n     * This is only use if tint is enabled\r\n     */\r\n    @serialize()\r\n    public tintColorAtDistance = 1;\r\n\r\n    /**\r\n     * Defines the clear coat layer thickness.\r\n     * This is only use if tint is enabled\r\n     */\r\n    @serialize()\r\n    public tintThickness: number = 1;\r\n\r\n    private _tintTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the clear tint values in a texture.\r\n     * rgb is tint\r\n     * a is a thickness factor\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public tintTexture: Nullable<BaseTexture> = null;\r\n\r\n    /** @internal */\r\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\r\n\r\n    /** @internal */\r\n    public _markAllSubMeshesAsTexturesDirty(): void {\r\n        this._enable(this._isEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    constructor(material: PBRBaseMaterial, addToPluginList = true) {\r\n        super(material, \"PBRClearCoat\", 100, new MaterialClearCoatDefines(), addToPluginList);\r\n\r\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\r\n    }\r\n\r\n    public isReadyForSubMesh(defines: MaterialClearCoatDefines, scene: Scene, engine: Engine): boolean {\r\n        if (!this._isEnabled) {\r\n            return true;\r\n        }\r\n\r\n        const disableBumpMap = this._material._disableBumpMap;\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\r\n                    if (!this._texture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\r\n                    if (!this._textureRoughness.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\r\n                    // Bump texture cannot be not blocking.\r\n                    if (!this._bumpTexture.isReady()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\r\n                    if (!this._tintTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public prepareDefinesBeforeAttributes(defines: MaterialClearCoatDefines, scene: Scene): void {\r\n        if (this._isEnabled) {\r\n            defines.CLEARCOAT = true;\r\n            defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = this._useRoughnessFromMainTexture;\r\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL =\r\n                this._texture !== null && this._texture._texture === this._textureRoughness?._texture && this._texture.checkTransformsAreIdentical(this._textureRoughness);\r\n            defines.CLEARCOAT_REMAP_F0 = this._remapF0OnInterfaceChange;\r\n\r\n            if (defines._areTexturesDirty) {\r\n                if (scene.texturesEnabled) {\r\n                    if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"CLEARCOAT_TEXTURE\");\r\n                    } else {\r\n                        defines.CLEARCOAT_TEXTURE = false;\r\n                    }\r\n\r\n                    if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._textureRoughness, defines, \"CLEARCOAT_TEXTURE_ROUGHNESS\");\r\n                    } else {\r\n                        defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\r\n                    }\r\n\r\n                    if (this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"CLEARCOAT_BUMP\");\r\n                    } else {\r\n                        defines.CLEARCOAT_BUMP = false;\r\n                    }\r\n\r\n                    defines.CLEARCOAT_DEFAULTIOR = this._indexOfRefraction === PBRClearCoatConfiguration._DefaultIndexOfRefraction;\r\n\r\n                    if (this._isTintEnabled) {\r\n                        defines.CLEARCOAT_TINT = true;\r\n                        if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\r\n                            MaterialHelper.PrepareDefinesForMergedUV(this._tintTexture, defines, \"CLEARCOAT_TINT_TEXTURE\");\r\n                            defines.CLEARCOAT_TINT_GAMMATEXTURE = this._tintTexture.gammaSpace;\r\n                        } else {\r\n                            defines.CLEARCOAT_TINT_TEXTURE = false;\r\n                        }\r\n                    } else {\r\n                        defines.CLEARCOAT_TINT = false;\r\n                        defines.CLEARCOAT_TINT_TEXTURE = false;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            defines.CLEARCOAT = false;\r\n            defines.CLEARCOAT_TEXTURE = false;\r\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\r\n            defines.CLEARCOAT_BUMP = false;\r\n            defines.CLEARCOAT_TINT = false;\r\n            defines.CLEARCOAT_TINT_TEXTURE = false;\r\n            defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\r\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\r\n            defines.CLEARCOAT_DEFAULTIOR = false;\r\n            defines.CLEARCOAT_TEXTUREDIRECTUV = 0;\r\n            defines.CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV = 0;\r\n            defines.CLEARCOAT_BUMPDIRECTUV = 0;\r\n            defines.CLEARCOAT_REMAP_F0 = false;\r\n            defines.CLEARCOAT_TINT_TEXTUREDIRECTUV = 0;\r\n            defines.CLEARCOAT_TINT_GAMMATEXTURE = false;\r\n        }\r\n    }\r\n\r\n    public bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, subMesh: SubMesh): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const defines = subMesh!.materialDefines as unknown as MaterialClearCoatDefines;\r\n\r\n        const isFrozen = this._material.isFrozen;\r\n\r\n        const disableBumpMap = this._material._disableBumpMap;\r\n        const invertNormalMapX = this._material._invertNormalMapX;\r\n        const invertNormalMapY = this._material._invertNormalMapY;\r\n\r\n        const identicalTextures = defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL;\r\n\r\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\r\n            if (identicalTextures && MaterialFlags.ClearCoatTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\"vClearCoatInfos\", this._texture!.coordinatesIndex, this._texture!.level, -1, -1);\r\n                MaterialHelper.BindTextureMatrix(this._texture!, uniformBuffer, \"clearCoat\");\r\n            } else if ((this._texture || this._textureRoughness) && MaterialFlags.ClearCoatTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\r\n                    \"vClearCoatInfos\",\r\n                    this._texture?.coordinatesIndex ?? 0,\r\n                    this._texture?.level ?? 0,\r\n                    this._textureRoughness?.coordinatesIndex ?? 0,\r\n                    this._textureRoughness?.level ?? 0\r\n                );\r\n                if (this._texture) {\r\n                    MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"clearCoat\");\r\n                }\r\n                if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE) {\r\n                    MaterialHelper.BindTextureMatrix(this._textureRoughness, uniformBuffer, \"clearCoatRoughness\");\r\n                }\r\n            }\r\n\r\n            if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatTextureEnabled && !disableBumpMap) {\r\n                uniformBuffer.updateFloat2(\"vClearCoatBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level);\r\n                MaterialHelper.BindTextureMatrix(this._bumpTexture, uniformBuffer, \"clearCoatBump\");\r\n\r\n                if (scene._mirroredCameraPosition) {\r\n                    uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? 1.0 : -1.0, invertNormalMapY ? 1.0 : -1.0);\r\n                } else {\r\n                    uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? -1.0 : 1.0, invertNormalMapY ? -1.0 : 1.0);\r\n                }\r\n            }\r\n\r\n            if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\r\n                uniformBuffer.updateFloat2(\"vClearCoatTintInfos\", this._tintTexture.coordinatesIndex, this._tintTexture.level);\r\n                MaterialHelper.BindTextureMatrix(this._tintTexture, uniformBuffer, \"clearCoatTint\");\r\n            }\r\n\r\n            // Clear Coat General params\r\n            uniformBuffer.updateFloat2(\"vClearCoatParams\", this.intensity, this.roughness);\r\n\r\n            // Clear Coat Refraction params\r\n            const a = 1 - this._indexOfRefraction;\r\n            const b = 1 + this._indexOfRefraction;\r\n            const f0 = Math.pow(-a / b, 2); // Schlicks approx: (ior1 - ior2) / (ior1 + ior2) where ior2 for air is close to vacuum = 1.\r\n            const eta = 1 / this._indexOfRefraction;\r\n            uniformBuffer.updateFloat4(\"vClearCoatRefractionParams\", f0, eta, a, b);\r\n\r\n            if (this._isTintEnabled) {\r\n                uniformBuffer.updateFloat4(\"vClearCoatTintParams\", this.tintColor.r, this.tintColor.g, this.tintColor.b, Math.max(0.00001, this.tintThickness));\r\n                uniformBuffer.updateFloat(\"clearCoatColorAtDistance\", Math.max(0.00001, this.tintColorAtDistance));\r\n            }\r\n        }\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\r\n                uniformBuffer.setTexture(\"clearCoatSampler\", this._texture);\r\n            }\r\n\r\n            if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE && MaterialFlags.ClearCoatTextureEnabled) {\r\n                uniformBuffer.setTexture(\"clearCoatRoughnessSampler\", this._textureRoughness);\r\n            }\r\n\r\n            if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\r\n                uniformBuffer.setTexture(\"clearCoatBumpSampler\", this._bumpTexture);\r\n            }\r\n\r\n            if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\r\n                uniformBuffer.setTexture(\"clearCoatTintSampler\", this._tintTexture);\r\n            }\r\n        }\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (this._texture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._textureRoughness === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._tintTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getActiveTextures(activeTextures: BaseTexture[]): void {\r\n        if (this._texture) {\r\n            activeTextures.push(this._texture);\r\n        }\r\n\r\n        if (this._textureRoughness) {\r\n            activeTextures.push(this._textureRoughness);\r\n        }\r\n\r\n        if (this._bumpTexture) {\r\n            activeTextures.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._tintTexture) {\r\n            activeTextures.push(this._tintTexture);\r\n        }\r\n    }\r\n\r\n    public getAnimatables(animatables: IAnimatable[]): void {\r\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\r\n            animatables.push(this._texture);\r\n        }\r\n\r\n        if (this._textureRoughness && this._textureRoughness.animations && this._textureRoughness.animations.length > 0) {\r\n            animatables.push(this._textureRoughness);\r\n        }\r\n\r\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\r\n            animatables.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._tintTexture && this._tintTexture.animations && this._tintTexture.animations.length > 0) {\r\n            animatables.push(this._tintTexture);\r\n        }\r\n    }\r\n\r\n    public dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._texture?.dispose();\r\n            this._textureRoughness?.dispose();\r\n            this._bumpTexture?.dispose();\r\n            this._tintTexture?.dispose();\r\n        }\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"PBRClearCoatConfiguration\";\r\n    }\r\n\r\n    public addFallbacks(defines: MaterialClearCoatDefines, fallbacks: EffectFallbacks, currentRank: number): number {\r\n        if (defines.CLEARCOAT_BUMP) {\r\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT_BUMP\");\r\n        }\r\n        if (defines.CLEARCOAT_TINT) {\r\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT_TINT\");\r\n        }\r\n        if (defines.CLEARCOAT) {\r\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT\");\r\n        }\r\n        return currentRank;\r\n    }\r\n\r\n    public getSamplers(samplers: string[]): void {\r\n        samplers.push(\"clearCoatSampler\", \"clearCoatRoughnessSampler\", \"clearCoatBumpSampler\", \"clearCoatTintSampler\");\r\n    }\r\n\r\n    public getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {\r\n            ubo: [\r\n                { name: \"vClearCoatParams\", size: 2, type: \"vec2\" },\r\n                { name: \"vClearCoatRefractionParams\", size: 4, type: \"vec4\" },\r\n                { name: \"vClearCoatInfos\", size: 4, type: \"vec4\" },\r\n                { name: \"clearCoatMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"clearCoatRoughnessMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"vClearCoatBumpInfos\", size: 2, type: \"vec2\" },\r\n                { name: \"vClearCoatTangentSpaceParams\", size: 2, type: \"vec2\" },\r\n                { name: \"clearCoatBumpMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"vClearCoatTintParams\", size: 4, type: \"vec4\" },\r\n                { name: \"clearCoatColorAtDistance\", size: 1, type: \"float\" },\r\n                { name: \"vClearCoatTintInfos\", size: 2, type: \"vec2\" },\r\n                { name: \"clearCoatTintMatrix\", size: 16, type: \"mat4\" },\r\n            ],\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}