{"ast":null,"code":"import { SceneComponentConstants } from \"../../sceneComponent.js\";\nimport { PostProcessRenderPipelineManager } from \"./postProcessRenderPipelineManager.js\";\nimport { Scene } from \"../../scene.js\";\nObject.defineProperty(Scene.prototype, \"postProcessRenderPipelineManager\", {\n  get: function () {\n    if (!this._postProcessRenderPipelineManager) {\n      // Register the G Buffer component to the scene.\n      let component = this._getComponent(SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER);\n      if (!component) {\n        component = new PostProcessRenderPipelineManagerSceneComponent(this);\n        this._addComponent(component);\n      }\n      this._postProcessRenderPipelineManager = new PostProcessRenderPipelineManager();\n    }\n    return this._postProcessRenderPipelineManager;\n  },\n  enumerable: true,\n  configurable: true\n});\n/**\n * Defines the Render Pipeline scene component responsible to rendering pipelines\n */\nexport class PostProcessRenderPipelineManagerSceneComponent {\n  /**\n   * Creates a new instance of the component for the given scene\n   * @param scene Defines the scene to register the component in\n   */\n  constructor(scene) {\n    /**\n     * The component name helpful to identify the component in the list of scene components.\n     */\n    this.name = SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER;\n    this.scene = scene;\n  }\n  /**\n   * Registers the component in a given scene\n   */\n  register() {\n    this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER, this, this._gatherRenderTargets);\n  }\n  /**\n   * Rebuilds the elements related to this component in case of\n   * context lost for instance.\n   */\n  rebuild() {\n    if (this.scene._postProcessRenderPipelineManager) {\n      this.scene._postProcessRenderPipelineManager._rebuild();\n    }\n  }\n  /**\n   * Disposes the component and the associated resources\n   */\n  dispose() {\n    if (this.scene._postProcessRenderPipelineManager) {\n      this.scene._postProcessRenderPipelineManager.dispose();\n    }\n  }\n  _gatherRenderTargets() {\n    if (this.scene._postProcessRenderPipelineManager) {\n      this.scene._postProcessRenderPipelineManager.update();\n    }\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,uBAAuB,QAAQ,yBAAuB;AAC/D,SAASC,gCAAgC,QAAQ,uCAAqC;AACtF,SAASC,KAAK,QAAQ,gBAAc;AAgBpCC,MAAM,CAACC,cAAc,CAACF,KAAK,CAACG,SAAS,EAAE,kCAAkC,EAAE;EACvEC,GAAG,EAAE;IACD,IAAI,CAAC,IAAI,CAACC,iCAAiC,EAAE;MACzC;MACA,IAAIC,SAAS,GAAG,IAAI,CAACC,aAAa,CAACT,uBAAuB,CAACU,qCAAqC,CAAmD;MACnJ,IAAI,CAACF,SAAS,EAAE;QACZA,SAAS,GAAG,IAAIG,8CAA8C,CAAC,IAAI,CAAC;QACpE,IAAI,CAACC,aAAa,CAACJ,SAAS,CAAC;;MAEjC,IAAI,CAACD,iCAAiC,GAAG,IAAIN,gCAAgC,EAAE;;IAGnF,OAAO,IAAI,CAACM,iCAAiC;EACjD,CAAC;EACDM,UAAU,EAAE,IAAI;EAChBC,YAAY,EAAE;CACjB,CAAC;AAEF;;;AAGA,OAAM,MAAOH,8CAA8C;EAWvD;;;;EAIAI,YAAYC,KAAY;IAdxB;;;IAGgB,SAAI,GAAGhB,uBAAuB,CAACU,qCAAqC;IAYhF,IAAI,CAACM,KAAK,GAAGA,KAAK;EACtB;EAEA;;;EAGOC,QAAQ;IACX,IAAI,CAACD,KAAK,CAACE,yBAAyB,CAACC,YAAY,CAACnB,uBAAuB,CAACoB,yDAAyD,EAAE,IAAI,EAAE,IAAI,CAACC,oBAAoB,CAAC;EACzK;EAEA;;;;EAIOC,OAAO;IACV,IAAI,IAAI,CAACN,KAAK,CAACT,iCAAiC,EAAE;MAC9C,IAAI,CAACS,KAAK,CAACT,iCAAiC,CAACgB,QAAQ,EAAE;;EAE/D;EAEA;;;EAGOC,OAAO;IACV,IAAI,IAAI,CAACR,KAAK,CAACT,iCAAiC,EAAE;MAC9C,IAAI,CAACS,KAAK,CAACT,iCAAiC,CAACiB,OAAO,EAAE;;EAE9D;EAEQH,oBAAoB;IACxB,IAAI,IAAI,CAACL,KAAK,CAACT,iCAAiC,EAAE;MAC9C,IAAI,CAACS,KAAK,CAACT,iCAAiC,CAACkB,MAAM,EAAE;;EAE7D","names":["SceneComponentConstants","PostProcessRenderPipelineManager","Scene","Object","defineProperty","prototype","get","_postProcessRenderPipelineManager","component","_getComponent","NAME_POSTPROCESSRENDERPIPELINEMANAGER","PostProcessRenderPipelineManagerSceneComponent","_addComponent","enumerable","configurable","constructor","scene","register","_gatherRenderTargetsStage","registerStep","STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER","_gatherRenderTargets","rebuild","_rebuild","dispose","update"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.ts"],"sourcesContent":["import type { ISceneComponent } from \"../../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../../sceneComponent\";\r\nimport { PostProcessRenderPipelineManager } from \"./postProcessRenderPipelineManager\";\r\nimport { Scene } from \"../../scene\";\r\n\r\ndeclare module \"../../scene\" {\r\n    export interface Scene {\r\n        /** @internal (Backing field) */\r\n        _postProcessRenderPipelineManager: PostProcessRenderPipelineManager;\r\n\r\n        /**\r\n         * Gets the postprocess render pipeline manager\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/postProcessRenderPipeline\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/defaultRenderingPipeline\r\n         */\r\n        readonly postProcessRenderPipelineManager: PostProcessRenderPipelineManager;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Scene.prototype, \"postProcessRenderPipelineManager\", {\r\n    get: function (this: Scene) {\r\n        if (!this._postProcessRenderPipelineManager) {\r\n            // Register the G Buffer component to the scene.\r\n            let component = this._getComponent(SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER) as PostProcessRenderPipelineManagerSceneComponent;\r\n            if (!component) {\r\n                component = new PostProcessRenderPipelineManagerSceneComponent(this);\r\n                this._addComponent(component);\r\n            }\r\n            this._postProcessRenderPipelineManager = new PostProcessRenderPipelineManager();\r\n        }\r\n\r\n        return this._postProcessRenderPipelineManager;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\n/**\r\n * Defines the Render Pipeline scene component responsible to rendering pipelines\r\n */\r\nexport class PostProcessRenderPipelineManagerSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER, this, this._gatherRenderTargets);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        if (this.scene._postProcessRenderPipelineManager) {\r\n            this.scene._postProcessRenderPipelineManager._rebuild();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources\r\n     */\r\n    public dispose(): void {\r\n        if (this.scene._postProcessRenderPipelineManager) {\r\n            this.scene._postProcessRenderPipelineManager.dispose();\r\n        }\r\n    }\r\n\r\n    private _gatherRenderTargets(): void {\r\n        if (this.scene._postProcessRenderPipelineManager) {\r\n            this.scene._postProcessRenderPipelineManager.update();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}