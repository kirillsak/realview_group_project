{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { WebXRSessionManager } from \"./webXRSessionManager.js\";\nimport { WebXRCamera } from \"./webXRCamera.js\";\nimport { WebXRState } from \"./webXRTypes.js\";\nimport { WebXRFeatureName, WebXRFeaturesManager } from \"./webXRFeaturesManager.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { UniversalCamera } from \"../Cameras/universalCamera.js\";\nimport { Quaternion, Vector3 } from \"../Maths/math.vector.js\";\n/**\n * Base set of functionality needed to create an XR experience (WebXRSessionManager, Camera, StateManagement, etc.)\n * @see https://doc.babylonjs.com/features/featuresDeepDive/webXR/webXRExperienceHelpers\n */\nexport class WebXRExperienceHelper {\n  /**\n   * Creates a WebXRExperienceHelper\n   * @param _scene The scene the helper should be created in\n   */\n  constructor(_scene) {\n    this._scene = _scene;\n    this._nonVRCamera = null;\n    this._attachedToElement = false;\n    this._spectatorCamera = null;\n    this._originalSceneAutoClear = true;\n    this._supported = false;\n    this._spectatorMode = false;\n    this._lastTimestamp = 0;\n    /**\n     * Observers registered here will be triggered after the camera's initial transformation is set\n     * This can be used to set a different ground level or an extra rotation.\n     *\n     * Note that ground level is considered to be at 0. The height defined by the XR camera will be added\n     * to the position set after this observable is done executing.\n     */\n    this.onInitialXRPoseSetObservable = new Observable();\n    /**\n     * Fires when the state of the experience helper has changed\n     */\n    this.onStateChangedObservable = new Observable();\n    /**\n     * The current state of the XR experience (eg. transitioning, in XR or not in XR)\n     */\n    this.state = WebXRState.NOT_IN_XR;\n    this.sessionManager = new WebXRSessionManager(_scene);\n    this.camera = new WebXRCamera(\"webxr\", _scene, this.sessionManager);\n    this.featuresManager = new WebXRFeaturesManager(this.sessionManager);\n    _scene.onDisposeObservable.addOnce(() => {\n      this.dispose();\n    });\n  }\n  /**\n   * Creates the experience helper\n   * @param scene the scene to attach the experience helper to\n   * @returns a promise for the experience helper\n   */\n  static CreateAsync(scene) {\n    const helper = new WebXRExperienceHelper(scene);\n    return helper.sessionManager.initializeAsync().then(() => {\n      helper._supported = true;\n      return helper;\n    }).catch(e => {\n      helper._setState(WebXRState.NOT_IN_XR);\n      helper.dispose();\n      throw e;\n    });\n  }\n  /**\n   * Disposes of the experience helper\n   */\n  dispose() {\n    var _a;\n    this.exitXRAsync();\n    this.camera.dispose();\n    this.onStateChangedObservable.clear();\n    this.onInitialXRPoseSetObservable.clear();\n    this.sessionManager.dispose();\n    (_a = this._spectatorCamera) === null || _a === void 0 ? void 0 : _a.dispose();\n    if (this._nonVRCamera) {\n      this._scene.activeCamera = this._nonVRCamera;\n    }\n  }\n  /**\n   * Enters XR mode (This must be done within a user interaction in most browsers eg. button click)\n   * @param sessionMode options for the XR session\n   * @param referenceSpaceType frame of reference of the XR session\n   * @param renderTarget the output canvas that will be used to enter XR mode\n   * @param sessionCreationOptions optional XRSessionInit object to init the session with\n   * @returns promise that resolves after xr mode has entered\n   */\n  async enterXRAsync(sessionMode, referenceSpaceType, renderTarget = this.sessionManager.getWebXRRenderTarget(), sessionCreationOptions = {}) {\n    var _a, _b, _c;\n    if (!this._supported) {\n      throw \"WebXR not supported in this browser or environment\";\n    }\n    this._setState(WebXRState.ENTERING_XR);\n    if (referenceSpaceType !== \"viewer\" && referenceSpaceType !== \"local\") {\n      sessionCreationOptions.optionalFeatures = sessionCreationOptions.optionalFeatures || [];\n      sessionCreationOptions.optionalFeatures.push(referenceSpaceType);\n    }\n    sessionCreationOptions = await this.featuresManager._extendXRSessionInitObject(sessionCreationOptions);\n    // we currently recommend \"unbounded\" space in AR (#7959)\n    if (sessionMode === \"immersive-ar\" && referenceSpaceType !== \"unbounded\") {\n      Logger.Warn(\"We recommend using 'unbounded' reference space type when using 'immersive-ar' session mode\");\n    }\n    // make sure that the session mode is supported\n    try {\n      await this.sessionManager.initializeSessionAsync(sessionMode, sessionCreationOptions);\n      await this.sessionManager.setReferenceSpaceTypeAsync(referenceSpaceType);\n      const baseLayer = await renderTarget.initializeXRLayerAsync(this.sessionManager.session);\n      const xrRenderState = {\n        // if maxZ is 0 it should be \"Infinity\", but it doesn't work with the WebXR API. Setting to a large number.\n        depthFar: this.camera.maxZ || 10000,\n        depthNear: this.camera.minZ\n      };\n      // The layers feature will have already initialized the xr session's layers on session init.\n      if (!this.featuresManager.getEnabledFeature(WebXRFeatureName.LAYERS)) {\n        xrRenderState.baseLayer = baseLayer;\n      }\n      this.sessionManager.updateRenderState(xrRenderState);\n      // run the render loop\n      this.sessionManager.runXRRenderLoop();\n      // Cache pre xr scene settings\n      this._originalSceneAutoClear = this._scene.autoClear;\n      this._nonVRCamera = this._scene.activeCamera;\n      this._attachedToElement = !!((_b = (_a = this._nonVRCamera) === null || _a === void 0 ? void 0 : _a.inputs) === null || _b === void 0 ? void 0 : _b.attachedToElement);\n      (_c = this._nonVRCamera) === null || _c === void 0 ? void 0 : _c.detachControl();\n      this._scene.activeCamera = this.camera;\n      // do not compensate when AR session is used\n      if (sessionMode !== \"immersive-ar\") {\n        this._nonXRToXRCamera();\n      } else {\n        // Kept here, TODO - check if needed\n        this._scene.autoClear = false;\n        this.camera.compensateOnFirstFrame = false;\n        // reset the camera's position to the origin\n        this.camera.position.set(0, 0, 0);\n        this.camera.rotationQuaternion.set(0, 0, 0, 1);\n      }\n      this.sessionManager.onXRSessionEnded.addOnce(() => {\n        // when using the back button and not the exit button (default on mobile), the session is ending but the EXITING state was not set\n        if (this.state !== WebXRState.EXITING_XR) {\n          this._setState(WebXRState.EXITING_XR);\n        }\n        // Reset camera rigs output render target to ensure sessions render target is not drawn after it ends\n        this.camera.rigCameras.forEach(c => {\n          c.outputRenderTarget = null;\n        });\n        // Restore scene settings\n        this._scene.autoClear = this._originalSceneAutoClear;\n        this._scene.activeCamera = this._nonVRCamera;\n        if (this._attachedToElement && this._nonVRCamera) {\n          this._nonVRCamera.attachControl(!!this._nonVRCamera.inputs.noPreventDefault);\n        }\n        if (sessionMode !== \"immersive-ar\" && this.camera.compensateOnFirstFrame) {\n          if (this._nonVRCamera.setPosition) {\n            this._nonVRCamera.setPosition(this.camera.position);\n          } else {\n            this._nonVRCamera.position.copyFrom(this.camera.position);\n          }\n        }\n        this._setState(WebXRState.NOT_IN_XR);\n      });\n      // Wait until the first frame arrives before setting state to in xr\n      this.sessionManager.onXRFrameObservable.addOnce(() => {\n        this._setState(WebXRState.IN_XR);\n      });\n      return this.sessionManager;\n    } catch (e) {\n      console.log(e);\n      console.log(e.message);\n      this._setState(WebXRState.NOT_IN_XR);\n      throw e;\n    }\n  }\n  /**\n   * Exits XR mode and returns the scene to its original state\n   * @returns promise that resolves after xr mode has exited\n   */\n  exitXRAsync() {\n    // only exit if state is IN_XR\n    if (this.state !== WebXRState.IN_XR) {\n      return Promise.resolve();\n    }\n    this._setState(WebXRState.EXITING_XR);\n    return this.sessionManager.exitXRAsync();\n  }\n  /**\n   * Enable spectator mode for desktop VR experiences.\n   * When spectator mode is enabled a camera will be attached to the desktop canvas and will\n   * display the first rig camera's view on the desktop canvas.\n   * Please note that this will degrade performance, as it requires another camera render.\n   * It is also not recommended to enable this in devices like the quest, as it brings no benefit there.\n   * @param options giving WebXRSpectatorModeOption for specutator camera to setup when the spectator mode is enabled.\n   */\n  enableSpectatorMode(options) {\n    if (!this._spectatorMode) {\n      this._spectatorMode = true;\n      this._switchSpectatorMode(options);\n    }\n  }\n  /**\n   * Disable spectator mode for desktop VR experiences.\n   */\n  disableSpecatatorMode() {\n    if (this._spectatorMode) {\n      this._spectatorMode = false;\n      this._switchSpectatorMode();\n    }\n  }\n  _switchSpectatorMode(options) {\n    const fps = (options === null || options === void 0 ? void 0 : options.fps) ? options.fps : 1000.0;\n    const refreshRate = 1.0 / fps * 1000.0;\n    const cameraIndex = (options === null || options === void 0 ? void 0 : options.preferredCameraIndex) ? options === null || options === void 0 ? void 0 : options.preferredCameraIndex : 0;\n    const updateSpectatorCamera = () => {\n      if (this._spectatorCamera) {\n        const delta = this.sessionManager.currentTimestamp - this._lastTimestamp;\n        if (delta >= refreshRate) {\n          this._lastTimestamp = this.sessionManager.currentTimestamp;\n          this._spectatorCamera.position.copyFrom(this.camera.rigCameras[cameraIndex].globalPosition);\n          this._spectatorCamera.rotationQuaternion.copyFrom(this.camera.rigCameras[cameraIndex].absoluteRotation);\n        }\n      }\n    };\n    if (this._spectatorMode) {\n      if (cameraIndex >= this.camera.rigCameras.length) {\n        throw new Error(\"the preferred camera index is beyond the length of rig camera array.\");\n      }\n      const onStateChanged = () => {\n        if (this.state === WebXRState.IN_XR) {\n          this._spectatorCamera = new UniversalCamera(\"webxr-spectator\", Vector3.Zero(), this._scene);\n          this._spectatorCamera.rotationQuaternion = new Quaternion();\n          this._scene.activeCameras = [this.camera, this._spectatorCamera];\n          this.sessionManager.onXRFrameObservable.add(updateSpectatorCamera);\n          this._scene.onAfterRenderCameraObservable.add(camera => {\n            if (camera === this.camera) {\n              // reset the dimensions object for correct resizing\n              this._scene.getEngine().framebufferDimensionsObject = null;\n            }\n          });\n        } else if (this.state === WebXRState.EXITING_XR) {\n          this.sessionManager.onXRFrameObservable.removeCallback(updateSpectatorCamera);\n          this._scene.activeCameras = null;\n        }\n      };\n      this.onStateChangedObservable.add(onStateChanged);\n      onStateChanged();\n    } else {\n      this.sessionManager.onXRFrameObservable.removeCallback(updateSpectatorCamera);\n      this._scene.activeCameras = [this.camera];\n    }\n  }\n  _nonXRToXRCamera() {\n    this.camera.setTransformationFromNonVRCamera(this._nonVRCamera);\n    this.onInitialXRPoseSetObservable.notifyObservers(this.camera);\n  }\n  _setState(val) {\n    if (this.state === val) {\n      return;\n    }\n    this.state = val;\n    this.onStateChangedObservable.notifyObservers(this.state);\n  }\n}","map":{"version":3,"mappings":"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","names":["Observable","WebXRSessionManager","WebXRCamera","WebXRState","WebXRFeatureName","WebXRFeaturesManager","Logger","UniversalCamera","Quaternion","Vector3","WebXRExperienceHelper","constructor","_scene","NOT_IN_XR","sessionManager","camera","featuresManager","onDisposeObservable","addOnce","dispose","CreateAsync","scene","helper","initializeAsync","then","_supported","catch","e","_setState","exitXRAsync","onStateChangedObservable","clear","onInitialXRPoseSetObservable","_spectatorCamera","_nonVRCamera","activeCamera","enterXRAsync","sessionMode","referenceSpaceType","renderTarget","getWebXRRenderTarget","sessionCreationOptions","ENTERING_XR","optionalFeatures","push","_extendXRSessionInitObject","Warn","initializeSessionAsync","setReferenceSpaceTypeAsync","baseLayer","initializeXRLayerAsync","session","xrRenderState","depthFar","maxZ","depthNear","minZ","getEnabledFeature","LAYERS","updateRenderState","runXRRenderLoop","_originalSceneAutoClear","autoClear","_attachedToElement","inputs","attachedToElement","detachControl","_nonXRToXRCamera","compensateOnFirstFrame","position","set","rotationQuaternion","onXRSessionEnded","state","EXITING_XR","rigCameras","forEach","c","outputRenderTarget","attachControl","noPreventDefault","setPosition","copyFrom","onXRFrameObservable","IN_XR","console","log","message","Promise","resolve","enableSpectatorMode","options","_spectatorMode","_switchSpectatorMode","disableSpecatatorMode","fps","refreshRate","cameraIndex","preferredCameraIndex","updateSpectatorCamera","delta","currentTimestamp","_lastTimestamp","globalPosition","absoluteRotation","length","Error","onStateChanged","Zero","activeCameras","add","onAfterRenderCameraObservable","getEngine","framebufferDimensionsObject","removeCallback","setTransformationFromNonVRCamera","notifyObservers","val"],"sourceRoot":"","sources":["../../../../lts/core/generated/XR/webXRExperienceHelper.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { IDisposable, Scene } from \"../scene\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { WebXRSessionManager } from \"./webXRSessionManager\";\r\nimport { WebXRCamera } from \"./webXRCamera\";\r\nimport type { WebXRRenderTarget } from \"./webXRTypes\";\r\nimport { WebXRState } from \"./webXRTypes\";\r\nimport { WebXRFeatureName, WebXRFeaturesManager } from \"./webXRFeaturesManager\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { UniversalCamera } from \"../Cameras/universalCamera\";\r\nimport { Quaternion, Vector3 } from \"../Maths/math.vector\";\r\n\r\n/**\r\n * Options for setting up XR spectator camera.\r\n */\r\nexport interface WebXRSpectatorModeOption {\r\n    /**\r\n     * Expected refresh rate (frames per sec) for a spectator camera.\r\n     */\r\n    fps?: number;\r\n    /**\r\n     * The index of rigCameras array in a WebXR camera.\r\n     */\r\n    preferredCameraIndex?: number;\r\n}\r\n\r\n/**\r\n * Base set of functionality needed to create an XR experience (WebXRSessionManager, Camera, StateManagement, etc.)\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/webXR/webXRExperienceHelpers\r\n */\r\nexport class WebXRExperienceHelper implements IDisposable {\r\n    private _nonVRCamera: Nullable<Camera> = null;\r\n    private _attachedToElement: boolean = false;\r\n    private _spectatorCamera: Nullable<UniversalCamera> = null;\r\n    private _originalSceneAutoClear = true;\r\n    private _supported = false;\r\n    private _spectatorMode = false;\r\n    private _lastTimestamp = 0;\r\n\r\n    /**\r\n     * Camera used to render xr content\r\n     */\r\n    public camera: WebXRCamera;\r\n    /** A features manager for this xr session */\r\n    public featuresManager: WebXRFeaturesManager;\r\n    /**\r\n     * Observers registered here will be triggered after the camera's initial transformation is set\r\n     * This can be used to set a different ground level or an extra rotation.\r\n     *\r\n     * Note that ground level is considered to be at 0. The height defined by the XR camera will be added\r\n     * to the position set after this observable is done executing.\r\n     */\r\n    public onInitialXRPoseSetObservable = new Observable<WebXRCamera>();\r\n    /**\r\n     * Fires when the state of the experience helper has changed\r\n     */\r\n    public onStateChangedObservable = new Observable<WebXRState>();\r\n    /** Session manager used to keep track of xr session */\r\n    public sessionManager: WebXRSessionManager;\r\n    /**\r\n     * The current state of the XR experience (eg. transitioning, in XR or not in XR)\r\n     */\r\n    public state: WebXRState = WebXRState.NOT_IN_XR;\r\n\r\n    /**\r\n     * Creates a WebXRExperienceHelper\r\n     * @param _scene The scene the helper should be created in\r\n     */\r\n    private constructor(private _scene: Scene) {\r\n        this.sessionManager = new WebXRSessionManager(_scene);\r\n        this.camera = new WebXRCamera(\"webxr\", _scene, this.sessionManager);\r\n        this.featuresManager = new WebXRFeaturesManager(this.sessionManager);\r\n\r\n        _scene.onDisposeObservable.addOnce(() => {\r\n            this.dispose();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates the experience helper\r\n     * @param scene the scene to attach the experience helper to\r\n     * @returns a promise for the experience helper\r\n     */\r\n    public static CreateAsync(scene: Scene): Promise<WebXRExperienceHelper> {\r\n        const helper = new WebXRExperienceHelper(scene);\r\n        return helper.sessionManager\r\n            .initializeAsync()\r\n            .then(() => {\r\n                helper._supported = true;\r\n                return helper;\r\n            })\r\n            .catch((e) => {\r\n                helper._setState(WebXRState.NOT_IN_XR);\r\n                helper.dispose();\r\n                throw e;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Disposes of the experience helper\r\n     */\r\n    public dispose() {\r\n        this.exitXRAsync();\r\n        this.camera.dispose();\r\n        this.onStateChangedObservable.clear();\r\n        this.onInitialXRPoseSetObservable.clear();\r\n        this.sessionManager.dispose();\r\n        this._spectatorCamera?.dispose();\r\n        if (this._nonVRCamera) {\r\n            this._scene.activeCamera = this._nonVRCamera;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enters XR mode (This must be done within a user interaction in most browsers eg. button click)\r\n     * @param sessionMode options for the XR session\r\n     * @param referenceSpaceType frame of reference of the XR session\r\n     * @param renderTarget the output canvas that will be used to enter XR mode\r\n     * @param sessionCreationOptions optional XRSessionInit object to init the session with\r\n     * @returns promise that resolves after xr mode has entered\r\n     */\r\n    public async enterXRAsync(\r\n        sessionMode: XRSessionMode,\r\n        referenceSpaceType: XRReferenceSpaceType,\r\n        renderTarget: WebXRRenderTarget = this.sessionManager.getWebXRRenderTarget(),\r\n        sessionCreationOptions: XRSessionInit = {}\r\n    ): Promise<WebXRSessionManager> {\r\n        if (!this._supported) {\r\n            throw \"WebXR not supported in this browser or environment\";\r\n        }\r\n        this._setState(WebXRState.ENTERING_XR);\r\n        if (referenceSpaceType !== \"viewer\" && referenceSpaceType !== \"local\") {\r\n            sessionCreationOptions.optionalFeatures = sessionCreationOptions.optionalFeatures || [];\r\n            sessionCreationOptions.optionalFeatures.push(referenceSpaceType);\r\n        }\r\n        sessionCreationOptions = await this.featuresManager._extendXRSessionInitObject(sessionCreationOptions);\r\n        // we currently recommend \"unbounded\" space in AR (#7959)\r\n        if (sessionMode === \"immersive-ar\" && referenceSpaceType !== \"unbounded\") {\r\n            Logger.Warn(\"We recommend using 'unbounded' reference space type when using 'immersive-ar' session mode\");\r\n        }\r\n        // make sure that the session mode is supported\r\n        try {\r\n            await this.sessionManager.initializeSessionAsync(sessionMode, sessionCreationOptions);\r\n            await this.sessionManager.setReferenceSpaceTypeAsync(referenceSpaceType);\r\n            const baseLayer = await renderTarget.initializeXRLayerAsync(this.sessionManager.session);\r\n\r\n            const xrRenderState: XRRenderStateInit = {\r\n                // if maxZ is 0 it should be \"Infinity\", but it doesn't work with the WebXR API. Setting to a large number.\r\n                depthFar: this.camera.maxZ || 10000,\r\n                depthNear: this.camera.minZ,\r\n            };\r\n\r\n            // The layers feature will have already initialized the xr session's layers on session init.\r\n            if (!this.featuresManager.getEnabledFeature(WebXRFeatureName.LAYERS)) {\r\n                xrRenderState.baseLayer = baseLayer;\r\n            }\r\n\r\n            this.sessionManager.updateRenderState(xrRenderState);\r\n            // run the render loop\r\n            this.sessionManager.runXRRenderLoop();\r\n            // Cache pre xr scene settings\r\n            this._originalSceneAutoClear = this._scene.autoClear;\r\n            this._nonVRCamera = this._scene.activeCamera;\r\n            this._attachedToElement = !!this._nonVRCamera?.inputs?.attachedToElement;\r\n            this._nonVRCamera?.detachControl();\r\n\r\n            this._scene.activeCamera = this.camera;\r\n            // do not compensate when AR session is used\r\n            if (sessionMode !== \"immersive-ar\") {\r\n                this._nonXRToXRCamera();\r\n            } else {\r\n                // Kept here, TODO - check if needed\r\n                this._scene.autoClear = false;\r\n                this.camera.compensateOnFirstFrame = false;\r\n                // reset the camera's position to the origin\r\n                this.camera.position.set(0, 0, 0);\r\n                this.camera.rotationQuaternion.set(0, 0, 0, 1);\r\n            }\r\n\r\n            this.sessionManager.onXRSessionEnded.addOnce(() => {\r\n                // when using the back button and not the exit button (default on mobile), the session is ending but the EXITING state was not set\r\n                if (this.state !== WebXRState.EXITING_XR) {\r\n                    this._setState(WebXRState.EXITING_XR);\r\n                }\r\n                // Reset camera rigs output render target to ensure sessions render target is not drawn after it ends\r\n                this.camera.rigCameras.forEach((c) => {\r\n                    c.outputRenderTarget = null;\r\n                });\r\n\r\n                // Restore scene settings\r\n                this._scene.autoClear = this._originalSceneAutoClear;\r\n                this._scene.activeCamera = this._nonVRCamera;\r\n                if (this._attachedToElement && this._nonVRCamera) {\r\n                    this._nonVRCamera.attachControl(!!this._nonVRCamera.inputs.noPreventDefault);\r\n                }\r\n                if (sessionMode !== \"immersive-ar\" && this.camera.compensateOnFirstFrame) {\r\n                    if ((<any>this._nonVRCamera).setPosition) {\r\n                        (<any>this._nonVRCamera).setPosition(this.camera.position);\r\n                    } else {\r\n                        this._nonVRCamera!.position.copyFrom(this.camera.position);\r\n                    }\r\n                }\r\n\r\n                this._setState(WebXRState.NOT_IN_XR);\r\n            });\r\n\r\n            // Wait until the first frame arrives before setting state to in xr\r\n            this.sessionManager.onXRFrameObservable.addOnce(() => {\r\n                this._setState(WebXRState.IN_XR);\r\n            });\r\n            return this.sessionManager;\r\n        } catch (e) {\r\n            console.log(e);\r\n            console.log(e.message);\r\n            this._setState(WebXRState.NOT_IN_XR);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exits XR mode and returns the scene to its original state\r\n     * @returns promise that resolves after xr mode has exited\r\n     */\r\n    public exitXRAsync() {\r\n        // only exit if state is IN_XR\r\n        if (this.state !== WebXRState.IN_XR) {\r\n            return Promise.resolve();\r\n        }\r\n        this._setState(WebXRState.EXITING_XR);\r\n        return this.sessionManager.exitXRAsync();\r\n    }\r\n\r\n    /**\r\n     * Enable spectator mode for desktop VR experiences.\r\n     * When spectator mode is enabled a camera will be attached to the desktop canvas and will\r\n     * display the first rig camera's view on the desktop canvas.\r\n     * Please note that this will degrade performance, as it requires another camera render.\r\n     * It is also not recommended to enable this in devices like the quest, as it brings no benefit there.\r\n     * @param options giving WebXRSpectatorModeOption for specutator camera to setup when the spectator mode is enabled.\r\n     */\r\n    public enableSpectatorMode(options?: WebXRSpectatorModeOption): void {\r\n        if (!this._spectatorMode) {\r\n            this._spectatorMode = true;\r\n            this._switchSpectatorMode(options);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disable spectator mode for desktop VR experiences.\r\n     */\r\n    public disableSpecatatorMode(): void {\r\n        if (this._spectatorMode) {\r\n            this._spectatorMode = false;\r\n            this._switchSpectatorMode();\r\n        }\r\n    }\r\n\r\n    private _switchSpectatorMode(options?: WebXRSpectatorModeOption): void {\r\n        const fps = options?.fps ? options.fps : 1000.0;\r\n        const refreshRate = (1.0 / fps) * 1000.0;\r\n        const cameraIndex = options?.preferredCameraIndex ? options?.preferredCameraIndex : 0;\r\n\r\n        const updateSpectatorCamera = () => {\r\n            if (this._spectatorCamera) {\r\n                const delta = this.sessionManager.currentTimestamp - this._lastTimestamp;\r\n                if (delta >= refreshRate) {\r\n                    this._lastTimestamp = this.sessionManager.currentTimestamp;\r\n                    this._spectatorCamera.position.copyFrom(this.camera.rigCameras[cameraIndex].globalPosition);\r\n                    this._spectatorCamera.rotationQuaternion.copyFrom(this.camera.rigCameras[cameraIndex].absoluteRotation);\r\n                }\r\n            }\r\n        };\r\n        if (this._spectatorMode) {\r\n            if (cameraIndex >= this.camera.rigCameras.length) {\r\n                throw new Error(\"the preferred camera index is beyond the length of rig camera array.\");\r\n            }\r\n            const onStateChanged = () => {\r\n                if (this.state === WebXRState.IN_XR) {\r\n                    this._spectatorCamera = new UniversalCamera(\"webxr-spectator\", Vector3.Zero(), this._scene);\r\n                    this._spectatorCamera.rotationQuaternion = new Quaternion();\r\n                    this._scene.activeCameras = [this.camera, this._spectatorCamera];\r\n                    this.sessionManager.onXRFrameObservable.add(updateSpectatorCamera);\r\n                    this._scene.onAfterRenderCameraObservable.add((camera) => {\r\n                        if (camera === this.camera) {\r\n                            // reset the dimensions object for correct resizing\r\n                            this._scene.getEngine().framebufferDimensionsObject = null;\r\n                        }\r\n                    });\r\n                } else if (this.state === WebXRState.EXITING_XR) {\r\n                    this.sessionManager.onXRFrameObservable.removeCallback(updateSpectatorCamera);\r\n                    this._scene.activeCameras = null;\r\n                }\r\n            };\r\n            this.onStateChangedObservable.add(onStateChanged);\r\n            onStateChanged();\r\n        } else {\r\n            this.sessionManager.onXRFrameObservable.removeCallback(updateSpectatorCamera);\r\n            this._scene.activeCameras = [this.camera];\r\n        }\r\n    }\r\n\r\n    private _nonXRToXRCamera() {\r\n        this.camera.setTransformationFromNonVRCamera(this._nonVRCamera!);\r\n        this.onInitialXRPoseSetObservable.notifyObservers(this.camera);\r\n    }\r\n\r\n    private _setState(val: WebXRState) {\r\n        if (this.state === val) {\r\n            return;\r\n        }\r\n        this.state = val;\r\n        this.onStateChangedObservable.notifyObservers(this.state);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}