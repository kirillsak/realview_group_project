{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { AndOrNotEvaluator } from \"./andOrNotEvaluator.js\";\n/**\n * Class used to store custom tags\n */\nexport class Tags {\n  /**\n   * Adds support for tags on the given object\n   * @param obj defines the object to use\n   */\n  static EnableFor(obj) {\n    obj._tags = obj._tags || {};\n    obj.hasTags = () => {\n      return Tags.HasTags(obj);\n    };\n    obj.addTags = tagsString => {\n      return Tags.AddTagsTo(obj, tagsString);\n    };\n    obj.removeTags = tagsString => {\n      return Tags.RemoveTagsFrom(obj, tagsString);\n    };\n    obj.matchesTagsQuery = tagsQuery => {\n      return Tags.MatchesQuery(obj, tagsQuery);\n    };\n  }\n  /**\n   * Removes tags support\n   * @param obj defines the object to use\n   */\n  static DisableFor(obj) {\n    delete obj._tags;\n    delete obj.hasTags;\n    delete obj.addTags;\n    delete obj.removeTags;\n    delete obj.matchesTagsQuery;\n  }\n  /**\n   * Gets a boolean indicating if the given object has tags\n   * @param obj defines the object to use\n   * @returns a boolean\n   */\n  static HasTags(obj) {\n    if (!obj._tags) {\n      return false;\n    }\n    const tags = obj._tags;\n    for (const i in tags) {\n      if (Object.prototype.hasOwnProperty.call(tags, i)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Gets the tags available on a given object\n   * @param obj defines the object to use\n   * @param asString defines if the tags must be returned as a string instead of an array of strings\n   * @returns the tags\n   */\n  static GetTags(obj, asString = true) {\n    if (!obj._tags) {\n      return null;\n    }\n    if (asString) {\n      const tagsArray = [];\n      for (const tag in obj._tags) {\n        if (Object.prototype.hasOwnProperty.call(obj._tags, tag) && obj._tags[tag] === true) {\n          tagsArray.push(tag);\n        }\n      }\n      return tagsArray.join(\" \");\n    } else {\n      return obj._tags;\n    }\n  }\n  /**\n   * Adds tags to an object\n   * @param obj defines the object to use\n   * @param tagsString defines the tag string. The tags 'true' and 'false' are reserved and cannot be used as tags.\n   * A tag cannot start with '||', '&&', and '!'. It cannot contain whitespaces\n   */\n  static AddTagsTo(obj, tagsString) {\n    if (!tagsString) {\n      return;\n    }\n    if (typeof tagsString !== \"string\") {\n      return;\n    }\n    const tags = tagsString.split(\" \");\n    tags.forEach(function (tag) {\n      Tags._AddTagTo(obj, tag);\n    });\n  }\n  /**\n   * @internal\n   */\n  static _AddTagTo(obj, tag) {\n    tag = tag.trim();\n    if (tag === \"\" || tag === \"true\" || tag === \"false\") {\n      return;\n    }\n    if (tag.match(/[\\s]/) || tag.match(/^([!]|([|]|[&]){2})/)) {\n      return;\n    }\n    Tags.EnableFor(obj);\n    obj._tags[tag] = true;\n  }\n  /**\n   * Removes specific tags from a specific object\n   * @param obj defines the object to use\n   * @param tagsString defines the tags to remove\n   */\n  static RemoveTagsFrom(obj, tagsString) {\n    if (!Tags.HasTags(obj)) {\n      return;\n    }\n    const tags = tagsString.split(\" \");\n    for (const t in tags) {\n      Tags._RemoveTagFrom(obj, tags[t]);\n    }\n  }\n  /**\n   * @internal\n   */\n  static _RemoveTagFrom(obj, tag) {\n    delete obj._tags[tag];\n  }\n  /**\n   * Defines if tags hosted on an object match a given query\n   * @param obj defines the object to use\n   * @param tagsQuery defines the tag query\n   * @returns a boolean\n   */\n  static MatchesQuery(obj, tagsQuery) {\n    if (tagsQuery === undefined) {\n      return true;\n    }\n    if (tagsQuery === \"\") {\n      return Tags.HasTags(obj);\n    }\n    return AndOrNotEvaluator.Eval(tagsQuery, r => Tags.HasTags(obj) && obj._tags[r]);\n  }\n}","map":{"version":3,"mappings":"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","names":["AndOrNotEvaluator","Tags","EnableFor","obj","_tags","hasTags","HasTags","addTags","tagsString","AddTagsTo","removeTags","RemoveTagsFrom","matchesTagsQuery","tagsQuery","MatchesQuery","DisableFor","tags","i","Object","prototype","hasOwnProperty","call","GetTags","asString","tagsArray","tag","push","join","split","forEach","_AddTagTo","trim","match","t","_RemoveTagFrom","undefined","Eval","r"],"sourceRoot":"","sources":["../../../../lts/core/generated/Misc/tags.ts"],"sourcesContent":["import { AndOrNotEvaluator } from \"./andOrNotEvaluator\";\r\n\r\n/**\r\n * Class used to store custom tags\r\n */\r\nexport class Tags {\r\n    /**\r\n     * Adds support for tags on the given object\r\n     * @param obj defines the object to use\r\n     */\r\n    public static EnableFor(obj: any): void {\r\n        obj._tags = obj._tags || {};\r\n\r\n        obj.hasTags = () => {\r\n            return Tags.HasTags(obj);\r\n        };\r\n\r\n        obj.addTags = (tagsString: string) => {\r\n            return Tags.AddTagsTo(obj, tagsString);\r\n        };\r\n\r\n        obj.removeTags = (tagsString: string) => {\r\n            return Tags.RemoveTagsFrom(obj, tagsString);\r\n        };\r\n\r\n        obj.matchesTagsQuery = (tagsQuery: string) => {\r\n            return Tags.MatchesQuery(obj, tagsQuery);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Removes tags support\r\n     * @param obj defines the object to use\r\n     */\r\n    public static DisableFor(obj: any): void {\r\n        delete obj._tags;\r\n        delete obj.hasTags;\r\n        delete obj.addTags;\r\n        delete obj.removeTags;\r\n        delete obj.matchesTagsQuery;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given object has tags\r\n     * @param obj defines the object to use\r\n     * @returns a boolean\r\n     */\r\n    public static HasTags(obj: any): boolean {\r\n        if (!obj._tags) {\r\n            return false;\r\n        }\r\n\r\n        const tags = obj._tags;\r\n        for (const i in tags) {\r\n            if (Object.prototype.hasOwnProperty.call(tags, i)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets the tags available on a given object\r\n     * @param obj defines the object to use\r\n     * @param asString defines if the tags must be returned as a string instead of an array of strings\r\n     * @returns the tags\r\n     */\r\n    public static GetTags(obj: any, asString: boolean = true): any {\r\n        if (!obj._tags) {\r\n            return null;\r\n        }\r\n        if (asString) {\r\n            const tagsArray = [];\r\n            for (const tag in obj._tags) {\r\n                if (Object.prototype.hasOwnProperty.call(obj._tags, tag) && obj._tags[tag] === true) {\r\n                    tagsArray.push(tag);\r\n                }\r\n            }\r\n            return tagsArray.join(\" \");\r\n        } else {\r\n            return obj._tags;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds tags to an object\r\n     * @param obj defines the object to use\r\n     * @param tagsString defines the tag string. The tags 'true' and 'false' are reserved and cannot be used as tags.\r\n     * A tag cannot start with '||', '&&', and '!'. It cannot contain whitespaces\r\n     */\r\n    public static AddTagsTo(obj: any, tagsString: string): void {\r\n        if (!tagsString) {\r\n            return;\r\n        }\r\n\r\n        if (typeof tagsString !== \"string\") {\r\n            return;\r\n        }\r\n\r\n        const tags = tagsString.split(\" \");\r\n        tags.forEach(function (tag) {\r\n            Tags._AddTagTo(obj, tag);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _AddTagTo(obj: any, tag: string): void {\r\n        tag = tag.trim();\r\n\r\n        if (tag === \"\" || tag === \"true\" || tag === \"false\") {\r\n            return;\r\n        }\r\n\r\n        if (tag.match(/[\\s]/) || tag.match(/^([!]|([|]|[&]){2})/)) {\r\n            return;\r\n        }\r\n\r\n        Tags.EnableFor(obj);\r\n        obj._tags[tag] = true;\r\n    }\r\n\r\n    /**\r\n     * Removes specific tags from a specific object\r\n     * @param obj defines the object to use\r\n     * @param tagsString defines the tags to remove\r\n     */\r\n    public static RemoveTagsFrom(obj: any, tagsString: string) {\r\n        if (!Tags.HasTags(obj)) {\r\n            return;\r\n        }\r\n        const tags = tagsString.split(\" \");\r\n        for (const t in tags) {\r\n            Tags._RemoveTagFrom(obj, tags[t]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _RemoveTagFrom(obj: any, tag: string): void {\r\n        delete obj._tags[tag];\r\n    }\r\n\r\n    /**\r\n     * Defines if tags hosted on an object match a given query\r\n     * @param obj defines the object to use\r\n     * @param tagsQuery defines the tag query\r\n     * @returns a boolean\r\n     */\r\n    public static MatchesQuery(obj: any, tagsQuery: string): boolean {\r\n        if (tagsQuery === undefined) {\r\n            return true;\r\n        }\r\n\r\n        if (tagsQuery === \"\") {\r\n            return Tags.HasTags(obj);\r\n        }\r\n\r\n        return AndOrNotEvaluator.Eval(tagsQuery, (r) => Tags.HasTags(obj) && obj._tags[r]);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}