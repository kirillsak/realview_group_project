{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Effect } from \"./effect.js\";\nimport { RandomGUID } from \"../Misc/guid.js\";\nimport { DrawWrapper } from \"./drawWrapper.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nclass MapMap {\n  constructor() {\n    this.mm = new Map();\n  }\n  get(a, b) {\n    const m = this.mm.get(a);\n    if (m !== undefined) {\n      return m.get(b);\n    }\n    return undefined;\n  }\n  set(a, b, v) {\n    let m = this.mm.get(a);\n    if (m === undefined) {\n      this.mm.set(a, m = new Map());\n    }\n    m.set(b, v);\n  }\n}\n/**\n * Class that can be used to wrap a base material to generate accurate shadows when using custom vertex/fragment code in the base material\n */\nexport class ShadowDepthWrapper {\n  /**\n   * Instantiate a new shadow depth wrapper.\n   * It works by injecting some specific code in the vertex/fragment shaders of the base material and is used by a shadow generator to\n   * generate the shadow depth map. For more information, please refer to the documentation:\n   * https://doc.babylonjs.com/features/featuresDeepDive/lights/shadows\n   * @param baseMaterial Material to wrap\n   * @param scene Define the scene the material belongs to\n   * @param options Options used to create the wrapper\n   */\n  constructor(baseMaterial, scene, options) {\n    this._baseMaterial = baseMaterial;\n    this._scene = scene !== null && scene !== void 0 ? scene : EngineStore.LastCreatedScene;\n    this._options = options;\n    this._subMeshToEffect = new Map();\n    this._subMeshToDepthWrapper = new MapMap();\n    this._meshes = new Map();\n    // Register for onEffectCreated to store the effect of the base material when it is (re)generated. This effect will be used\n    // to create the depth effect later on\n    this._onEffectCreatedObserver = this._baseMaterial.onEffectCreatedObservable.add(params => {\n      var _a;\n      const mesh = (_a = params.subMesh) === null || _a === void 0 ? void 0 : _a.getMesh();\n      if (mesh && !this._meshes.has(mesh)) {\n        // Register for mesh onDispose to clean up our internal maps when a mesh is disposed\n        this._meshes.set(mesh, mesh.onDisposeObservable.add(mesh => {\n          const iterator = this._subMeshToEffect.keys();\n          for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\n            const subMesh = key.value;\n            if ((subMesh === null || subMesh === void 0 ? void 0 : subMesh.getMesh()) === mesh) {\n              this._subMeshToEffect.delete(subMesh);\n              this._subMeshToDepthWrapper.mm.delete(subMesh);\n            }\n          }\n        }));\n      }\n      this._subMeshToEffect.set(params.subMesh, [params.effect, this._scene.getEngine().currentRenderPassId]);\n      this._subMeshToDepthWrapper.mm.delete(params.subMesh); // trigger a depth effect recreation\n    });\n  }\n  /** Gets the standalone status of the wrapper */\n  get standalone() {\n    var _a, _b;\n    return (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.standalone) !== null && _b !== void 0 ? _b : false;\n  }\n  /** Gets the base material the wrapper is built upon */\n  get baseMaterial() {\n    return this._baseMaterial;\n  }\n  /** Gets the doNotInjectCode status of the wrapper */\n  get doNotInjectCode() {\n    var _a, _b;\n    return (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.doNotInjectCode) !== null && _b !== void 0 ? _b : false;\n  }\n  /**\n   * Gets the effect to use to generate the depth map\n   * @param subMesh subMesh to get the effect for\n   * @param shadowGenerator shadow generator to get the effect for\n   * @param passIdForDrawWrapper Id of the pass for which the effect from the draw wrapper must be retrieved from\n   * @returns the effect to use to generate the depth map for the subMesh + shadow generator specified\n   */\n  getEffect(subMesh, shadowGenerator, passIdForDrawWrapper) {\n    var _a;\n    const entry = (_a = this._subMeshToDepthWrapper.mm.get(subMesh)) === null || _a === void 0 ? void 0 : _a.get(shadowGenerator);\n    if (!entry) {\n      return null;\n    }\n    let drawWrapper = entry.drawWrapper[passIdForDrawWrapper];\n    if (!drawWrapper) {\n      drawWrapper = entry.drawWrapper[passIdForDrawWrapper] = new DrawWrapper(this._scene.getEngine());\n      drawWrapper.setEffect(entry.mainDrawWrapper.effect, entry.mainDrawWrapper.defines);\n    }\n    return drawWrapper;\n  }\n  /**\n   * Specifies that the submesh is ready to be used for depth rendering\n   * @param subMesh submesh to check\n   * @param defines the list of defines to take into account when checking the effect\n   * @param shadowGenerator combined with subMesh, it defines the effect to check\n   * @param useInstances specifies that instances should be used\n   * @param passIdForDrawWrapper Id of the pass for which the draw wrapper should be created\n   * @returns a boolean indicating that the submesh is ready or not\n   */\n  isReadyForSubMesh(subMesh, defines, shadowGenerator, useInstances, passIdForDrawWrapper) {\n    var _a, _b;\n    if (this.standalone) {\n      // will ensure the effect is (re)created for the base material\n      if (!this._baseMaterial.isReadyForSubMesh(subMesh.getMesh(), subMesh, useInstances)) {\n        return false;\n      }\n    }\n    return (_b = (_a = this._makeEffect(subMesh, defines, shadowGenerator, passIdForDrawWrapper)) === null || _a === void 0 ? void 0 : _a.isReady()) !== null && _b !== void 0 ? _b : false;\n  }\n  /**\n   * Disposes the resources\n   */\n  dispose() {\n    this._baseMaterial.onEffectCreatedObservable.remove(this._onEffectCreatedObserver);\n    this._onEffectCreatedObserver = null;\n    const iterator = this._meshes.entries();\n    for (let entry = iterator.next(); entry.done !== true; entry = iterator.next()) {\n      const [mesh, observer] = entry.value;\n      mesh.onDisposeObservable.remove(observer);\n    }\n  }\n  _makeEffect(subMesh, defines, shadowGenerator, passIdForDrawWrapper) {\n    var _a, _b, _c;\n    const engine = this._scene.getEngine();\n    const origEffectAndRenderPassId = this._subMeshToEffect.get(subMesh);\n    if (!origEffectAndRenderPassId) {\n      return null;\n    }\n    const [origEffect, origRenderPassId] = origEffectAndRenderPassId;\n    let params = this._subMeshToDepthWrapper.get(subMesh, shadowGenerator);\n    if (!params) {\n      const mainDrawWrapper = new DrawWrapper(engine);\n      mainDrawWrapper.defines = (_b = (_a = subMesh._getDrawWrapper(origRenderPassId)) === null || _a === void 0 ? void 0 : _a.defines) !== null && _b !== void 0 ? _b : null;\n      params = {\n        drawWrapper: [],\n        mainDrawWrapper,\n        depthDefines: \"\",\n        token: RandomGUID()\n      };\n      params.drawWrapper[passIdForDrawWrapper] = mainDrawWrapper;\n      this._subMeshToDepthWrapper.set(subMesh, shadowGenerator, params);\n    }\n    const join = defines.join(\"\\n\");\n    if (params.mainDrawWrapper.effect) {\n      if (join === params.depthDefines) {\n        // we already created the depth effect and it is still up to date for this submesh + shadow generator\n        return params.mainDrawWrapper.effect;\n      }\n    }\n    params.depthDefines = join;\n    const uniforms = origEffect.getUniformNames().slice();\n    // the depth effect is either out of date or has not been created yet\n    let vertexCode = origEffect.vertexSourceCodeBeforeMigration,\n      fragmentCode = origEffect.fragmentSourceCodeBeforeMigration;\n    if (!this.doNotInjectCode) {\n      // vertex code\n      const vertexNormalBiasCode = this._options && this._options.remappedVariables ? `#include<shadowMapVertexNormalBias>(${this._options.remappedVariables.join(\",\")})` : Effect.IncludesShadersStore[\"shadowMapVertexNormalBias\"],\n        vertexMetricCode = this._options && this._options.remappedVariables ? `#include<shadowMapVertexMetric>(${this._options.remappedVariables.join(\",\")})` : Effect.IncludesShadersStore[\"shadowMapVertexMetric\"],\n        fragmentSoftTransparentShadow = this._options && this._options.remappedVariables ? `#include<shadowMapFragmentSoftTransparentShadow>(${this._options.remappedVariables.join(\",\")})` : Effect.IncludesShadersStore[\"shadowMapFragmentSoftTransparentShadow\"],\n        fragmentBlockCode = Effect.IncludesShadersStore[\"shadowMapFragment\"];\n      vertexCode = vertexCode.replace(/void\\s+?main/g, Effect.IncludesShadersStore[\"shadowMapVertexExtraDeclaration\"] + \"\\r\\nvoid main\");\n      vertexCode = vertexCode.replace(/#define SHADOWDEPTH_NORMALBIAS|#define CUSTOM_VERTEX_UPDATE_WORLDPOS/g, vertexNormalBiasCode);\n      if (vertexCode.indexOf(\"#define SHADOWDEPTH_METRIC\") !== -1) {\n        vertexCode = vertexCode.replace(/#define SHADOWDEPTH_METRIC/g, vertexMetricCode);\n      } else {\n        vertexCode = vertexCode.replace(/}\\s*$/g, vertexMetricCode + \"\\r\\n}\");\n      }\n      vertexCode = vertexCode.replace(/#define SHADER_NAME.*?\\n|out vec4 glFragColor;\\n/g, \"\");\n      // fragment code\n      const hasLocationForSoftTransparentShadow = fragmentCode.indexOf(\"#define SHADOWDEPTH_SOFTTRANSPARENTSHADOW\") >= 0 || fragmentCode.indexOf(\"#define CUSTOM_FRAGMENT_BEFORE_FOG\") >= 0;\n      const hasLocationForFragment = fragmentCode.indexOf(\"#define SHADOWDEPTH_FRAGMENT\") !== -1;\n      let fragmentCodeToInjectAtEnd = \"\";\n      if (!hasLocationForSoftTransparentShadow) {\n        fragmentCodeToInjectAtEnd = fragmentSoftTransparentShadow + \"\\r\\n\";\n      } else {\n        fragmentCode = fragmentCode.replace(/#define SHADOWDEPTH_SOFTTRANSPARENTSHADOW|#define CUSTOM_FRAGMENT_BEFORE_FOG/g, fragmentSoftTransparentShadow);\n      }\n      fragmentCode = fragmentCode.replace(/void\\s+?main/g, Effect.IncludesShadersStore[\"shadowMapFragmentExtraDeclaration\"] + \"\\r\\nvoid main\");\n      if (hasLocationForFragment) {\n        fragmentCode = fragmentCode.replace(/#define SHADOWDEPTH_FRAGMENT/g, fragmentBlockCode);\n      } else {\n        fragmentCodeToInjectAtEnd += fragmentBlockCode + \"\\r\\n\";\n      }\n      if (fragmentCodeToInjectAtEnd) {\n        fragmentCode = fragmentCode.replace(/}\\s*$/g, fragmentCodeToInjectAtEnd + \"}\");\n      }\n      uniforms.push(\"biasAndScaleSM\", \"depthValuesSM\", \"lightDataSM\", \"softTransparentShadowSM\");\n    }\n    params.mainDrawWrapper.effect = engine.createEffect({\n      vertexSource: vertexCode,\n      fragmentSource: fragmentCode,\n      vertexToken: params.token,\n      fragmentToken: params.token\n    }, {\n      attributes: origEffect.getAttributesNames(),\n      uniformsNames: uniforms,\n      uniformBuffersNames: origEffect.getUniformBuffersNames(),\n      samplers: origEffect.getSamplers(),\n      defines: join + \"\\n\" + origEffect.defines.replace(\"#define SHADOWS\", \"\").replace(/#define SHADOW\\d/g, \"\"),\n      indexParameters: origEffect.getIndexParameters()\n    }, engine);\n    for (let id = 0; id < params.drawWrapper.length; ++id) {\n      if (id !== passIdForDrawWrapper) {\n        (_c = params.drawWrapper[id]) === null || _c === void 0 ? void 0 : _c.setEffect(params.mainDrawWrapper.effect, params.mainDrawWrapper.defines);\n      }\n    }\n    return params.mainDrawWrapper.effect;\n  }\n}","map":{"version":3,"mappings":"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","names":["Effect","RandomGUID","DrawWrapper","EngineStore","MapMap","constructor","Map","get","a","b","m","mm","undefined","set","v","ShadowDepthWrapper","baseMaterial","scene","options","_baseMaterial","_scene","LastCreatedScene","_options","_subMeshToEffect","_subMeshToDepthWrapper","_meshes","_onEffectCreatedObserver","onEffectCreatedObservable","add","params","mesh","subMesh","getMesh","has","onDisposeObservable","iterator","keys","key","next","done","value","delete","effect","getEngine","currentRenderPassId","standalone","doNotInjectCode","getEffect","shadowGenerator","passIdForDrawWrapper","entry","drawWrapper","setEffect","mainDrawWrapper","defines","isReadyForSubMesh","useInstances","_makeEffect","isReady","dispose","remove","entries","observer","engine","origEffectAndRenderPassId","origEffect","origRenderPassId","_getDrawWrapper","depthDefines","token","join","uniforms","getUniformNames","slice","vertexCode","vertexSourceCodeBeforeMigration","fragmentCode","fragmentSourceCodeBeforeMigration","vertexNormalBiasCode","remappedVariables","IncludesShadersStore","vertexMetricCode","fragmentSoftTransparentShadow","fragmentBlockCode","replace","indexOf","hasLocationForSoftTransparentShadow","hasLocationForFragment","fragmentCodeToInjectAtEnd","push","createEffect","vertexSource","fragmentSource","vertexToken","fragmentToken","attributes","getAttributesNames","uniformsNames","uniformBuffersNames","getUniformBuffersNames","samplers","getSamplers","indexParameters","getIndexParameters","id","length"],"sourceRoot":"","sources":["../../../../lts/core/generated/Materials/shadowDepthWrapper.ts"],"sourcesContent":["import type { Observer } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { Material } from \"./material\";\r\nimport type { IEffectCreationOptions } from \"./effect\";\r\nimport { Effect } from \"./effect\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Node } from \"../node\";\r\nimport type { ShadowGenerator } from \"../Lights/Shadows/shadowGenerator\";\r\nimport { RandomGUID } from \"../Misc/guid\";\r\nimport { DrawWrapper } from \"./drawWrapper\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\n/**\r\n * Options to be used when creating a shadow depth material\r\n */\r\nexport interface IIOptionShadowDepthMaterial {\r\n    /** Variables in the vertex shader code that need to have their names remapped.\r\n     * The format is: [\"var_name\", \"var_remapped_name\", \"var_name\", \"var_remapped_name\", ...]\r\n     * \"var_name\" should be either: worldPos or vNormalW\r\n     * So, if the variable holding the world position in your vertex shader is not named worldPos, you must tell the system\r\n     * the name to use instead by using: [\"worldPos\", \"myWorldPosVar\"] assuming the variable is named myWorldPosVar in your code.\r\n     * If the normal must also be remapped: [\"worldPos\", \"myWorldPosVar\", \"vNormalW\", \"myWorldNormal\"]\r\n     */\r\n    remappedVariables?: string[];\r\n\r\n    /** Set standalone to true if the base material wrapped by ShadowDepthMaterial is not used for a regular object but for depth shadow generation only */\r\n    standalone?: boolean;\r\n\r\n    /** Set doNotInjectCode if the specific shadow map generation code is already implemented by the material. That will prevent this code to be injected twice by ShadowDepthWrapper */\r\n    doNotInjectCode?: boolean;\r\n}\r\n\r\nclass MapMap<Ka, Kb, V> {\r\n    readonly mm = new Map<Ka, Map<Kb, V>>();\r\n\r\n    get(a: Ka, b: Kb): V | undefined {\r\n        const m = this.mm.get(a);\r\n        if (m !== undefined) {\r\n            return m.get(b);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    set(a: Ka, b: Kb, v: V): void {\r\n        let m = this.mm.get(a);\r\n        if (m === undefined) {\r\n            this.mm.set(a, (m = new Map()));\r\n        }\r\n        m.set(b, v);\r\n    }\r\n}\r\n\r\n/**\r\n * Class that can be used to wrap a base material to generate accurate shadows when using custom vertex/fragment code in the base material\r\n */\r\nexport class ShadowDepthWrapper {\r\n    private _scene: Scene;\r\n    private _options?: IIOptionShadowDepthMaterial;\r\n    private _baseMaterial: Material;\r\n    private _onEffectCreatedObserver: Nullable<Observer<{ effect: Effect; subMesh: Nullable<SubMesh> }>>;\r\n    private _subMeshToEffect: Map<Nullable<SubMesh>, [Effect, number]>;\r\n    private _subMeshToDepthWrapper: MapMap<\r\n        Nullable<SubMesh>,\r\n        ShadowGenerator,\r\n        { drawWrapper: Array<Nullable<DrawWrapper>>; mainDrawWrapper: DrawWrapper; depthDefines: string; token: string }\r\n    >; // key is (subMesh + shadowGenerator)\r\n    private _meshes: Map<AbstractMesh, Nullable<Observer<Node>>>;\r\n\r\n    /** Gets the standalone status of the wrapper */\r\n    public get standalone(): boolean {\r\n        return this._options?.standalone ?? false;\r\n    }\r\n\r\n    /** Gets the base material the wrapper is built upon */\r\n    public get baseMaterial(): Material {\r\n        return this._baseMaterial;\r\n    }\r\n\r\n    /** Gets the doNotInjectCode status of the wrapper */\r\n    public get doNotInjectCode(): boolean {\r\n        return this._options?.doNotInjectCode ?? false;\r\n    }\r\n\r\n    /**\r\n     * Instantiate a new shadow depth wrapper.\r\n     * It works by injecting some specific code in the vertex/fragment shaders of the base material and is used by a shadow generator to\r\n     * generate the shadow depth map. For more information, please refer to the documentation:\r\n     * https://doc.babylonjs.com/features/featuresDeepDive/lights/shadows\r\n     * @param baseMaterial Material to wrap\r\n     * @param scene Define the scene the material belongs to\r\n     * @param options Options used to create the wrapper\r\n     */\r\n    constructor(baseMaterial: Material, scene?: Scene, options?: IIOptionShadowDepthMaterial) {\r\n        this._baseMaterial = baseMaterial;\r\n        this._scene = scene ?? <Scene>EngineStore.LastCreatedScene;\r\n        this._options = options;\r\n\r\n        this._subMeshToEffect = new Map();\r\n        this._subMeshToDepthWrapper = new MapMap();\r\n        this._meshes = new Map();\r\n\r\n        // Register for onEffectCreated to store the effect of the base material when it is (re)generated. This effect will be used\r\n        // to create the depth effect later on\r\n        this._onEffectCreatedObserver = this._baseMaterial.onEffectCreatedObservable.add((params: { effect: Effect; subMesh: Nullable<SubMesh> }) => {\r\n            const mesh = params.subMesh?.getMesh();\r\n\r\n            if (mesh && !this._meshes.has(mesh)) {\r\n                // Register for mesh onDispose to clean up our internal maps when a mesh is disposed\r\n                this._meshes.set(\r\n                    mesh,\r\n                    mesh.onDisposeObservable.add((mesh: Node) => {\r\n                        const iterator = this._subMeshToEffect.keys();\r\n                        for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                            const subMesh = key.value;\r\n                            if (subMesh?.getMesh() === (mesh as AbstractMesh)) {\r\n                                this._subMeshToEffect.delete(subMesh);\r\n                                this._subMeshToDepthWrapper.mm.delete(subMesh);\r\n                            }\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n\r\n            this._subMeshToEffect.set(params.subMesh, [params.effect, this._scene.getEngine().currentRenderPassId]);\r\n            this._subMeshToDepthWrapper.mm.delete(params.subMesh); // trigger a depth effect recreation\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the effect to use to generate the depth map\r\n     * @param subMesh subMesh to get the effect for\r\n     * @param shadowGenerator shadow generator to get the effect for\r\n     * @param passIdForDrawWrapper Id of the pass for which the effect from the draw wrapper must be retrieved from\r\n     * @returns the effect to use to generate the depth map for the subMesh + shadow generator specified\r\n     */\r\n    public getEffect(subMesh: Nullable<SubMesh>, shadowGenerator: ShadowGenerator, passIdForDrawWrapper: number): Nullable<DrawWrapper> {\r\n        const entry = this._subMeshToDepthWrapper.mm.get(subMesh)?.get(shadowGenerator);\r\n        if (!entry) {\r\n            return null;\r\n        }\r\n        let drawWrapper = entry.drawWrapper[passIdForDrawWrapper];\r\n        if (!drawWrapper) {\r\n            drawWrapper = entry.drawWrapper[passIdForDrawWrapper] = new DrawWrapper(this._scene.getEngine());\r\n            drawWrapper.setEffect(entry.mainDrawWrapper.effect, entry.mainDrawWrapper.defines);\r\n        }\r\n\r\n        return drawWrapper;\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used for depth rendering\r\n     * @param subMesh submesh to check\r\n     * @param defines the list of defines to take into account when checking the effect\r\n     * @param shadowGenerator combined with subMesh, it defines the effect to check\r\n     * @param useInstances specifies that instances should be used\r\n     * @param passIdForDrawWrapper Id of the pass for which the draw wrapper should be created\r\n     * @returns a boolean indicating that the submesh is ready or not\r\n     */\r\n    public isReadyForSubMesh(subMesh: SubMesh, defines: string[], shadowGenerator: ShadowGenerator, useInstances: boolean, passIdForDrawWrapper: number): boolean {\r\n        if (this.standalone) {\r\n            // will ensure the effect is (re)created for the base material\r\n            if (!this._baseMaterial.isReadyForSubMesh(subMesh.getMesh(), subMesh, useInstances)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return this._makeEffect(subMesh, defines, shadowGenerator, passIdForDrawWrapper)?.isReady() ?? false;\r\n    }\r\n\r\n    /**\r\n     * Disposes the resources\r\n     */\r\n    public dispose(): void {\r\n        this._baseMaterial.onEffectCreatedObservable.remove(this._onEffectCreatedObserver);\r\n        this._onEffectCreatedObserver = null;\r\n\r\n        const iterator = this._meshes.entries();\r\n        for (let entry = iterator.next(); entry.done !== true; entry = iterator.next()) {\r\n            const [mesh, observer] = entry.value;\r\n\r\n            mesh.onDisposeObservable.remove(observer);\r\n        }\r\n    }\r\n\r\n    private _makeEffect(subMesh: SubMesh, defines: string[], shadowGenerator: ShadowGenerator, passIdForDrawWrapper: number): Nullable<Effect> {\r\n        const engine = this._scene.getEngine();\r\n        const origEffectAndRenderPassId = this._subMeshToEffect.get(subMesh);\r\n\r\n        if (!origEffectAndRenderPassId) {\r\n            return null;\r\n        }\r\n\r\n        const [origEffect, origRenderPassId] = origEffectAndRenderPassId;\r\n\r\n        let params = this._subMeshToDepthWrapper.get(subMesh, shadowGenerator);\r\n        if (!params) {\r\n            const mainDrawWrapper = new DrawWrapper(engine);\r\n            mainDrawWrapper.defines = subMesh._getDrawWrapper(origRenderPassId)?.defines ?? null;\r\n\r\n            params = {\r\n                drawWrapper: [],\r\n                mainDrawWrapper,\r\n                depthDefines: \"\",\r\n                token: RandomGUID(),\r\n            };\r\n            params.drawWrapper[passIdForDrawWrapper] = mainDrawWrapper;\r\n            this._subMeshToDepthWrapper.set(subMesh, shadowGenerator, params);\r\n        }\r\n\r\n        const join = defines.join(\"\\n\");\r\n\r\n        if (params.mainDrawWrapper.effect) {\r\n            if (join === params.depthDefines) {\r\n                // we already created the depth effect and it is still up to date for this submesh + shadow generator\r\n                return params.mainDrawWrapper.effect;\r\n            }\r\n        }\r\n\r\n        params.depthDefines = join;\r\n\r\n        const uniforms = origEffect.getUniformNames().slice();\r\n\r\n        // the depth effect is either out of date or has not been created yet\r\n        let vertexCode = origEffect.vertexSourceCodeBeforeMigration,\r\n            fragmentCode = origEffect.fragmentSourceCodeBeforeMigration;\r\n\r\n        if (!this.doNotInjectCode) {\r\n            // vertex code\r\n            const vertexNormalBiasCode =\r\n                    this._options && this._options.remappedVariables\r\n                        ? `#include<shadowMapVertexNormalBias>(${this._options.remappedVariables.join(\",\")})`\r\n                        : Effect.IncludesShadersStore[\"shadowMapVertexNormalBias\"],\r\n                vertexMetricCode =\r\n                    this._options && this._options.remappedVariables\r\n                        ? `#include<shadowMapVertexMetric>(${this._options.remappedVariables.join(\",\")})`\r\n                        : Effect.IncludesShadersStore[\"shadowMapVertexMetric\"],\r\n                fragmentSoftTransparentShadow =\r\n                    this._options && this._options.remappedVariables\r\n                        ? `#include<shadowMapFragmentSoftTransparentShadow>(${this._options.remappedVariables.join(\",\")})`\r\n                        : Effect.IncludesShadersStore[\"shadowMapFragmentSoftTransparentShadow\"],\r\n                fragmentBlockCode = Effect.IncludesShadersStore[\"shadowMapFragment\"];\r\n\r\n            vertexCode = vertexCode.replace(/void\\s+?main/g, Effect.IncludesShadersStore[\"shadowMapVertexExtraDeclaration\"] + \"\\r\\nvoid main\");\r\n            vertexCode = vertexCode.replace(/#define SHADOWDEPTH_NORMALBIAS|#define CUSTOM_VERTEX_UPDATE_WORLDPOS/g, vertexNormalBiasCode);\r\n\r\n            if (vertexCode.indexOf(\"#define SHADOWDEPTH_METRIC\") !== -1) {\r\n                vertexCode = vertexCode.replace(/#define SHADOWDEPTH_METRIC/g, vertexMetricCode);\r\n            } else {\r\n                vertexCode = vertexCode.replace(/}\\s*$/g, vertexMetricCode + \"\\r\\n}\");\r\n            }\r\n            vertexCode = vertexCode.replace(/#define SHADER_NAME.*?\\n|out vec4 glFragColor;\\n/g, \"\");\r\n\r\n            // fragment code\r\n            const hasLocationForSoftTransparentShadow =\r\n                fragmentCode.indexOf(\"#define SHADOWDEPTH_SOFTTRANSPARENTSHADOW\") >= 0 || fragmentCode.indexOf(\"#define CUSTOM_FRAGMENT_BEFORE_FOG\") >= 0;\r\n            const hasLocationForFragment = fragmentCode.indexOf(\"#define SHADOWDEPTH_FRAGMENT\") !== -1;\r\n\r\n            let fragmentCodeToInjectAtEnd = \"\";\r\n\r\n            if (!hasLocationForSoftTransparentShadow) {\r\n                fragmentCodeToInjectAtEnd = fragmentSoftTransparentShadow + \"\\r\\n\";\r\n            } else {\r\n                fragmentCode = fragmentCode.replace(/#define SHADOWDEPTH_SOFTTRANSPARENTSHADOW|#define CUSTOM_FRAGMENT_BEFORE_FOG/g, fragmentSoftTransparentShadow);\r\n            }\r\n\r\n            fragmentCode = fragmentCode.replace(/void\\s+?main/g, Effect.IncludesShadersStore[\"shadowMapFragmentExtraDeclaration\"] + \"\\r\\nvoid main\");\r\n\r\n            if (hasLocationForFragment) {\r\n                fragmentCode = fragmentCode.replace(/#define SHADOWDEPTH_FRAGMENT/g, fragmentBlockCode);\r\n            } else {\r\n                fragmentCodeToInjectAtEnd += fragmentBlockCode + \"\\r\\n\";\r\n            }\r\n            if (fragmentCodeToInjectAtEnd) {\r\n                fragmentCode = fragmentCode.replace(/}\\s*$/g, fragmentCodeToInjectAtEnd + \"}\");\r\n            }\r\n\r\n            uniforms.push(\"biasAndScaleSM\", \"depthValuesSM\", \"lightDataSM\", \"softTransparentShadowSM\");\r\n        }\r\n\r\n        params.mainDrawWrapper.effect = engine.createEffect(\r\n            {\r\n                vertexSource: vertexCode,\r\n                fragmentSource: fragmentCode,\r\n                vertexToken: params.token,\r\n                fragmentToken: params.token,\r\n            },\r\n            <IEffectCreationOptions>{\r\n                attributes: origEffect.getAttributesNames(),\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: origEffect.getUniformBuffersNames(),\r\n                samplers: origEffect.getSamplers(),\r\n                defines: join + \"\\n\" + origEffect.defines.replace(\"#define SHADOWS\", \"\").replace(/#define SHADOW\\d/g, \"\"),\r\n                indexParameters: origEffect.getIndexParameters(),\r\n            },\r\n            engine\r\n        );\r\n\r\n        for (let id = 0; id < params.drawWrapper.length; ++id) {\r\n            if (id !== passIdForDrawWrapper) {\r\n                params.drawWrapper[id]?.setEffect(params.mainDrawWrapper.effect, params.mainDrawWrapper.defines);\r\n            }\r\n        }\r\n        return params.mainDrawWrapper.effect;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}