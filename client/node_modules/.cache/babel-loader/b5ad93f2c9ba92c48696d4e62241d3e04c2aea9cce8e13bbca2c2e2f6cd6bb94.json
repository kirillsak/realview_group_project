{"ast":null,"code":"import { Observable } from \"./observable.js\";\n/**\n * A wrapper for the experimental pressure api which allows a callback to be called whenever certain thresholds are met.\n */\nexport class PressureObserverWrapper {\n  /**\n   * A pressure observer will call this callback, whenever these thresholds are met.\n   * @param options An object containing the thresholds used to decide what value to to return for each update property (average of start and end of a threshold boundary).\n   */\n  constructor(options) {\n    this._observer = null;\n    this._currentState = [];\n    /**\n     * An event triggered when the cpu usage/speed meets certain thresholds.\n     * Note: pressure is an experimental API.\n     */\n    this.onPressureChanged = new Observable();\n    if (PressureObserverWrapper.IsAvailable) {\n      this._observer = new PressureObserver(update => {\n        this._currentState = update;\n        this.onPressureChanged.notifyObservers(update);\n      }, options);\n    }\n  }\n  /**\n   * Returns true if PressureObserver is available for use, false otherwise.\n   */\n  static get IsAvailable() {\n    return typeof PressureObserver !== \"undefined\" && PressureObserver.supportedSources.includes(\"cpu\");\n  }\n  /**\n   * Method that must be called to begin observing changes, and triggering callbacks.\n   * @param source defines the source to observe\n   */\n  observe(source) {\n    var _a;\n    try {\n      (_a = this._observer) === null || _a === void 0 ? void 0 : _a.observe(source);\n      this.onPressureChanged.notifyObservers(this._currentState);\n    } catch (_b) {\n      // Ignore error\n    }\n  }\n  /**\n   * Method that must be called to stop observing changes and triggering callbacks (cleanup function).\n   * @param source defines the source to unobserve\n   */\n  unobserve(source) {\n    var _a;\n    try {\n      (_a = this._observer) === null || _a === void 0 ? void 0 : _a.unobserve(source);\n    } catch (_b) {\n      // Ignore error\n    }\n  }\n  /**\n   * Release the associated resources.\n   */\n  dispose() {\n    var _a;\n    (_a = this._observer) === null || _a === void 0 ? void 0 : _a.disconnect();\n    this._observer = null;\n    this.onPressureChanged.clear();\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,UAAU,QAAQ,iBAAe;AAE1C;;;AAGA,OAAM,MAAOC,uBAAuB;EAUhC;;;;EAIAC,YAAYC,OAAiC;IAbrC,cAAS,GAA+B,IAAI;IAC5C,kBAAa,GAAqB,EAAE;IAE5C;;;;IAIO,sBAAiB,GAAG,IAAIH,UAAU,EAAoB;IAOzD,IAAIC,uBAAuB,CAACG,WAAW,EAAE;MACrC,IAAI,CAACC,SAAS,GAAG,IAAIC,gBAAgB,CAAEC,MAAM,IAAI;QAC7C,IAAI,CAACC,aAAa,GAAGD,MAAM;QAC3B,IAAI,CAACE,iBAAiB,CAACC,eAAe,CAACH,MAAM,CAAC;MAClD,CAAC,EAAEJ,OAAO,CAAC;;EAEnB;EAEA;;;EAGO,WAAWC,WAAW;IACzB,OAAO,OAAOE,gBAAgB,KAAK,WAAW,IAAIA,gBAAgB,CAACK,gBAAgB,CAACC,QAAQ,CAAC,KAAK,CAAC;EACvG;EAEA;;;;EAIAC,OAAO,CAACC,MAAsB;;IAC1B,IAAI;MACA,UAAI,CAACT,SAAS,0CAAEQ,OAAO,CAACC,MAAM,CAAC;MAC/B,IAAI,CAACL,iBAAiB,CAACC,eAAe,CAAC,IAAI,CAACF,aAAa,CAAC;KAC7D,CAAC,WAAM;MACJ;IAAA;EAER;EAEA;;;;EAIAO,SAAS,CAACD,MAAsB;;IAC5B,IAAI;MACA,UAAI,CAACT,SAAS,0CAAEU,SAAS,CAACD,MAAM,CAAC;KACpC,CAAC,WAAM;MACJ;IAAA;EAER;EAEA;;;EAGAE,OAAO;;IACH,UAAI,CAACX,SAAS,0CAAEY,UAAU,EAAE;IAC5B,IAAI,CAACZ,SAAS,GAAG,IAAI;IACrB,IAAI,CAACI,iBAAiB,CAACS,KAAK,EAAE;EAClC","names":["Observable","PressureObserverWrapper","constructor","options","IsAvailable","_observer","PressureObserver","update","_currentState","onPressureChanged","notifyObservers","supportedSources","includes","observe","source","unobserve","dispose","disconnect","clear"],"sourceRoot":"","sources":["../../../../lts/core/generated/Misc/pressureObserverWrapper.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Observable } from \"./observable\";\r\n\r\n/**\r\n * A wrapper for the experimental pressure api which allows a callback to be called whenever certain thresholds are met.\r\n */\r\nexport class PressureObserverWrapper {\r\n    private _observer: Nullable<PressureObserver> = null;\r\n    private _currentState: PressureRecord[] = [];\r\n\r\n    /**\r\n     * An event triggered when the cpu usage/speed meets certain thresholds.\r\n     * Note: pressure is an experimental API.\r\n     */\r\n    public onPressureChanged = new Observable<PressureRecord[]>();\r\n\r\n    /**\r\n     * A pressure observer will call this callback, whenever these thresholds are met.\r\n     * @param options An object containing the thresholds used to decide what value to to return for each update property (average of start and end of a threshold boundary).\r\n     */\r\n    constructor(options?: PressureObserverOptions) {\r\n        if (PressureObserverWrapper.IsAvailable) {\r\n            this._observer = new PressureObserver((update) => {\r\n                this._currentState = update;\r\n                this.onPressureChanged.notifyObservers(update);\r\n            }, options);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if PressureObserver is available for use, false otherwise.\r\n     */\r\n    public static get IsAvailable() {\r\n        return typeof PressureObserver !== \"undefined\" && PressureObserver.supportedSources.includes(\"cpu\");\r\n    }\r\n\r\n    /**\r\n     * Method that must be called to begin observing changes, and triggering callbacks.\r\n     * @param source defines the source to observe\r\n     */\r\n    observe(source: PressureSource): void {\r\n        try {\r\n            this._observer?.observe(source);\r\n            this.onPressureChanged.notifyObservers(this._currentState);\r\n        } catch {\r\n            // Ignore error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method that must be called to stop observing changes and triggering callbacks (cleanup function).\r\n     * @param source defines the source to unobserve\r\n     */\r\n    unobserve(source: PressureSource): void {\r\n        try {\r\n            this._observer?.unobserve(source);\r\n        } catch {\r\n            // Ignore error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release the associated resources.\r\n     */\r\n    dispose() {\r\n        this._observer?.disconnect();\r\n        this._observer = null;\r\n        this.onPressureChanged.clear();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}