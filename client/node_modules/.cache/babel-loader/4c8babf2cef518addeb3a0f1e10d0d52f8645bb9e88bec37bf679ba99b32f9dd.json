{"ast":null,"code":"import { WebXRLayerWrapper } from \"../webXRLayerWrapper.js\";\nimport { WebXRLayerRenderTargetTextureProvider } from \"../webXRRenderTargetTextureProvider.js\";\n/**\n * Wraps XRWebGLLayer's created by Babylon Native.\n * @internal\n */\nexport class NativeXRLayerWrapper extends WebXRLayerWrapper {\n  constructor(layer) {\n    super(() => layer.framebufferWidth, () => layer.framebufferHeight, layer, \"XRWebGLLayer\", sessionManager => new NativeXRLayerRenderTargetTextureProvider(sessionManager, this));\n    this.layer = layer;\n  }\n}\n/**\n * Provides render target textures for layers created by Babylon Native.\n * @internal\n */\nexport class NativeXRLayerRenderTargetTextureProvider extends WebXRLayerRenderTargetTextureProvider {\n  constructor(sessionManager, layerWrapper) {\n    super(sessionManager.scene, layerWrapper);\n    this.layerWrapper = layerWrapper;\n    this._nativeRTTProvider = navigator.xr.getNativeRenderTargetProvider(sessionManager.session, this._createRenderTargetTexture.bind(this), this._destroyRenderTargetTexture.bind(this));\n    this._nativeLayer = layerWrapper.layer;\n  }\n  trySetViewportForView(viewport) {\n    viewport.x = 0;\n    viewport.y = 0;\n    viewport.width = 1;\n    viewport.height = 1;\n    return true;\n  }\n  getRenderTargetTextureForEye(eye) {\n    // TODO (rgerd): Update the contract on the BabylonNative side to call this \"getRenderTargetTextureForEye\"\n    return this._nativeRTTProvider.getRenderTargetForEye(eye);\n  }\n  getRenderTargetTextureForView(view) {\n    return this._nativeRTTProvider.getRenderTargetForEye(view.eye);\n  }\n  getFramebufferDimensions() {\n    return {\n      framebufferWidth: this._nativeLayer.framebufferWidth,\n      framebufferHeight: this._nativeLayer.framebufferHeight\n    };\n  }\n}\n/**\n * Creates the xr layer that will be used as the xr session's base layer.\n * @internal\n */\nexport class NativeXRRenderTarget {\n  constructor(_xrSessionManager) {\n    this._nativeRenderTarget = navigator.xr.getWebXRRenderTarget(_xrSessionManager.scene.getEngine());\n  }\n  async initializeXRLayerAsync(xrSession) {\n    await this._nativeRenderTarget.initializeXRLayerAsync(xrSession);\n    this.xrLayer = this._nativeRenderTarget.xrLayer;\n    return this.xrLayer;\n  }\n  dispose() {\n    /* empty */\n  }\n}","map":{"version":3,"mappings":"AAGA,SAASA,iBAAiB,QAAQ,yBAAuB;AACzD,SAASC,qCAAqC,QAAQ,wCAAsC;AAI5F;;;;AAIA,OAAM,MAAOC,oBAAqB,SAAQF,iBAAiB;EACvDG,YAA4BC,KAAmB;IAC3C,KAAK,CACD,MAAMA,KAAK,CAACC,gBAAgB,EAC5B,MAAMD,KAAK,CAACE,iBAAiB,EAC7BF,KAAK,EACL,cAAc,EACbG,cAAc,IAAK,IAAIC,wCAAwC,CAACD,cAAc,EAAE,IAAI,CAAC,CACzF;IAPuB,UAAK,GAALH,KAAK;EAQjC;;AAGJ;;;;AAIA,OAAM,MAAOI,wCAAyC,SAAQP,qCAAqC;EAI/FE,YAAYI,cAAmC,EAAkBE,YAAkC;IAC/F,KAAK,CAACF,cAAc,CAACG,KAAK,EAAED,YAAY,CAAC;IADoB,iBAAY,GAAZA,YAAY;IAEzE,IAAI,CAACE,kBAAkB,GAAIC,SAAiB,CAACC,EAAE,CAACC,6BAA6B,CACzEP,cAAc,CAACQ,OAAO,EACtB,IAAI,CAACC,0BAA0B,CAACC,IAAI,CAAC,IAAI,CAAC,EAC1C,IAAI,CAACC,2BAA2B,CAACD,IAAI,CAAC,IAAI,CAAC,CAC9C;IACD,IAAI,CAACE,YAAY,GAAGV,YAAY,CAACL,KAAK;EAC1C;EAEOgB,qBAAqB,CAACC,QAAkB;IAC3CA,QAAQ,CAACC,CAAC,GAAG,CAAC;IACdD,QAAQ,CAACE,CAAC,GAAG,CAAC;IACdF,QAAQ,CAACG,KAAK,GAAG,CAAC;IAClBH,QAAQ,CAACI,MAAM,GAAG,CAAC;IACnB,OAAO,IAAI;EACf;EAEOC,4BAA4B,CAACC,GAAU;IAC1C;IACA,OAAQ,IAAI,CAAChB,kBAA0B,CAACiB,qBAAqB,CAACD,GAAG,CAAC;EACtE;EAEOE,6BAA6B,CAACC,IAAY;IAC7C,OAAQ,IAAI,CAACnB,kBAA0B,CAACiB,qBAAqB,CAACE,IAAI,CAACH,GAAG,CAAC;EAC3E;EAEOI,wBAAwB;IAC3B,OAAO;MACH1B,gBAAgB,EAAE,IAAI,CAACc,YAAY,CAACd,gBAAgB;MACpDC,iBAAiB,EAAE,IAAI,CAACa,YAAY,CAACb;KACxC;EACL;;AAGJ;;;;AAIA,OAAM,MAAO0B,oBAAoB;EAM7B7B,YAAY8B,iBAAsC;IAC9C,IAAI,CAACC,mBAAmB,GAAItB,SAAiB,CAACC,EAAE,CAACsB,oBAAoB,CAACF,iBAAiB,CAACvB,KAAK,CAAC0B,SAAS,EAAE,CAAC;EAC9G;EAEO,MAAMC,sBAAsB,CAACC,SAAoB;IACpD,MAAM,IAAI,CAACJ,mBAAmB,CAACG,sBAAsB,CAACC,SAAS,CAAC;IAChE,IAAI,CAACC,OAAO,GAAG,IAAI,CAACL,mBAAmB,CAACK,OAAQ;IAChD,OAAO,IAAI,CAACA,OAAO;EACvB;EAEAC,OAAO;IACH;EAAA","names":["WebXRLayerWrapper","WebXRLayerRenderTargetTextureProvider","NativeXRLayerWrapper","constructor","layer","framebufferWidth","framebufferHeight","sessionManager","NativeXRLayerRenderTargetTextureProvider","layerWrapper","scene","_nativeRTTProvider","navigator","xr","getNativeRenderTargetProvider","session","_createRenderTargetTexture","bind","_destroyRenderTargetTexture","_nativeLayer","trySetViewportForView","viewport","x","y","width","height","getRenderTargetTextureForEye","eye","getRenderTargetForEye","getRenderTargetTextureForView","view","getFramebufferDimensions","NativeXRRenderTarget","_xrSessionManager","_nativeRenderTarget","getWebXRRenderTarget","getEngine","initializeXRLayerAsync","xrSession","xrLayer","dispose"],"sourceRoot":"","sources":["../../../../../lts/core/generated/XR/native/nativeXRRenderTarget.ts"],"sourcesContent":["import type { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\nimport type { Viewport } from \"../../Maths/math.viewport\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { WebXRLayerWrapper } from \"../webXRLayerWrapper\";\r\nimport { WebXRLayerRenderTargetTextureProvider } from \"../webXRRenderTargetTextureProvider\";\r\nimport type { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport type { WebXRRenderTarget } from \"../webXRTypes\";\r\n\r\n/**\r\n * Wraps XRWebGLLayer's created by Babylon Native.\r\n * @internal\r\n */\r\nexport class NativeXRLayerWrapper extends WebXRLayerWrapper {\r\n    constructor(public readonly layer: XRWebGLLayer) {\r\n        super(\r\n            () => layer.framebufferWidth,\r\n            () => layer.framebufferHeight,\r\n            layer,\r\n            \"XRWebGLLayer\",\r\n            (sessionManager) => new NativeXRLayerRenderTargetTextureProvider(sessionManager, this)\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Provides render target textures for layers created by Babylon Native.\r\n * @internal\r\n */\r\nexport class NativeXRLayerRenderTargetTextureProvider extends WebXRLayerRenderTargetTextureProvider {\r\n    private _nativeRTTProvider: WebXRLayerRenderTargetTextureProvider;\r\n    private _nativeLayer: XRWebGLLayer;\r\n\r\n    constructor(sessionManager: WebXRSessionManager, public readonly layerWrapper: NativeXRLayerWrapper) {\r\n        super(sessionManager.scene, layerWrapper);\r\n        this._nativeRTTProvider = (navigator as any).xr.getNativeRenderTargetProvider(\r\n            sessionManager.session,\r\n            this._createRenderTargetTexture.bind(this),\r\n            this._destroyRenderTargetTexture.bind(this)\r\n        );\r\n        this._nativeLayer = layerWrapper.layer;\r\n    }\r\n\r\n    public trySetViewportForView(viewport: Viewport): boolean {\r\n        viewport.x = 0;\r\n        viewport.y = 0;\r\n        viewport.width = 1;\r\n        viewport.height = 1;\r\n        return true;\r\n    }\r\n\r\n    public getRenderTargetTextureForEye(eye: XREye): Nullable<RenderTargetTexture> {\r\n        // TODO (rgerd): Update the contract on the BabylonNative side to call this \"getRenderTargetTextureForEye\"\r\n        return (this._nativeRTTProvider as any).getRenderTargetForEye(eye);\r\n    }\r\n\r\n    public getRenderTargetTextureForView(view: XRView): Nullable<RenderTargetTexture> {\r\n        return (this._nativeRTTProvider as any).getRenderTargetForEye(view.eye);\r\n    }\r\n\r\n    public getFramebufferDimensions(): Nullable<{ framebufferWidth: number; framebufferHeight: number }> {\r\n        return {\r\n            framebufferWidth: this._nativeLayer.framebufferWidth,\r\n            framebufferHeight: this._nativeLayer.framebufferHeight,\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Creates the xr layer that will be used as the xr session's base layer.\r\n * @internal\r\n */\r\nexport class NativeXRRenderTarget implements WebXRRenderTarget {\r\n    public canvasContext: WebGLRenderingContext;\r\n    public xrLayer: Nullable<XRWebGLLayer>;\r\n\r\n    private _nativeRenderTarget: WebXRRenderTarget;\r\n\r\n    constructor(_xrSessionManager: WebXRSessionManager) {\r\n        this._nativeRenderTarget = (navigator as any).xr.getWebXRRenderTarget(_xrSessionManager.scene.getEngine());\r\n    }\r\n\r\n    public async initializeXRLayerAsync(xrSession: XRSession): Promise<XRWebGLLayer> {\r\n        await this._nativeRenderTarget.initializeXRLayerAsync(xrSession);\r\n        this.xrLayer = this._nativeRenderTarget.xrLayer!;\r\n        return this.xrLayer;\r\n    }\r\n\r\n    dispose(): void {\r\n        /* empty */\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}