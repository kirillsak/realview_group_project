{"ast":null,"code":"import { Logger } from \"../Misc/logger.js\";\nimport { Vector3 } from \"./math.vector.js\";\n/**\n * Class representing an isovector a vector containing 2 INTEGER coordinates\n * x axis is horizontal\n * y axis is 60 deg counter clockwise from positive y axis\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _IsoVector {\n  /**\n   * Creates a new isovector from the given x and y coordinates\n   * @param x defines the first coordinate, must be an integer\n   * @param y defines the second coordinate, must be an integer\n   */\n  constructor( /** defines the first coordinate */\n  x = 0, /** defines the second coordinate */\n  y = 0) {\n    this.x = x;\n    this.y = y;\n    if (x !== Math.floor(x)) {\n      x === Math.floor(x);\n      Logger.Warn(\"x is not an integer, floor(x) used\");\n    }\n    if (y !== Math.floor(y)) {\n      y === Math.floor(y);\n      Logger.Warn(\"y is not an integer, floor(y) used\");\n    }\n  }\n  // Operators\n  /**\n   * Gets a new IsoVector copied from the IsoVector\n   * @returns a new IsoVector\n   */\n  clone() {\n    return new _IsoVector(this.x, this.y);\n  }\n  /**\n   * Rotates one IsoVector 60 degrees counter clockwise about another\n   * Please note that this is an in place operation\n   * @param other an IsoVector a center of rotation\n   * @returns the rotated IsoVector\n   */\n  rotate60About(other) {\n    //other IsoVector\n    const x = this.x;\n    this.x = other.x + other.y - this.y;\n    this.y = x + this.y - other.x;\n    return this;\n  }\n  /**\n   * Rotates one IsoVector 60 degrees clockwise about another\n   * Please note that this is an in place operation\n   * @param other an IsoVector as center of rotation\n   * @returns the rotated IsoVector\n   */\n  rotateNeg60About(other) {\n    const x = this.x;\n    this.x = x + this.y - other.y;\n    this.y = other.x + other.y - x;\n    return this;\n  }\n  /**\n   * For an equilateral triangle OAB with O at isovector (0, 0) and A at isovector (m, n)\n   * Rotates one IsoVector 120 degrees counter clockwise about the center of the triangle\n   * Please note that this is an in place operation\n   * @param m integer a measure a Primary triangle of order (m, n) m > n\n   * @param n >= 0 integer a measure for a Primary triangle of order (m, n)\n   * @returns the rotated IsoVector\n   */\n  rotate120(m, n) {\n    //m, n integers\n    if (m !== Math.floor(m)) {\n      m === Math.floor(m);\n      Logger.Warn(\"m not an integer only floor(m) used\");\n    }\n    if (n !== Math.floor(n)) {\n      n === Math.floor(n);\n      Logger.Warn(\"n not an integer only floor(n) used\");\n    }\n    const x = this.x;\n    this.x = m - x - this.y;\n    this.y = n + x;\n    return this;\n  }\n  /**\n   * For an equilateral triangle OAB with O at isovector (0, 0) and A at isovector (m, n)\n   * Rotates one IsoVector 120 degrees clockwise about the center of the triangle\n   * Please note that this is an in place operation\n   * @param m integer a measure a Primary triangle of order (m, n) m > n\n   * @param n >= 0 integer a measure for a Primary triangle of order (m, n)\n   * @returns the rotated IsoVector\n   */\n  rotateNeg120(m, n) {\n    //m, n integers\n    if (m !== Math.floor(m)) {\n      m === Math.floor(m);\n      Logger.Warn(\"m is not an integer, floor(m) used\");\n    }\n    if (n !== Math.floor(n)) {\n      n === Math.floor(n);\n      Logger.Warn(\"n is not an integer,   floor(n) used\");\n    }\n    const x = this.x;\n    this.x = this.y - n;\n    this.y = m + n - x - this.y;\n    return this;\n  }\n  /**\n   * Transforms an IsoVector to one in Cartesian 3D space based on an isovector\n   * @param origin an IsoVector\n   * @param isoGridSize\n   * @returns Point as a Vector3\n   */\n  toCartesianOrigin(origin, isoGridSize) {\n    const point = Vector3.Zero();\n    point.x = origin.x + 2 * this.x * isoGridSize + this.y * isoGridSize;\n    point.y = origin.y + Math.sqrt(3) * this.y * isoGridSize;\n    return point;\n  }\n  // Statics\n  /**\n   * Gets a new IsoVector(0, 0)\n   * @returns a new IsoVector\n   */\n  static Zero() {\n    return new _IsoVector(0, 0);\n  }\n}","map":{"version":3,"mappings":"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","names":["Logger","Vector3","_IsoVector","constructor","x","y","Math","floor","Warn","clone","rotate60About","other","rotateNeg60About","rotate120","m","n","rotateNeg120","toCartesianOrigin","origin","isoGridSize","point","Zero","sqrt"],"sourceRoot":"","sources":["../../../../lts/core/generated/Maths/math.isovector.ts"],"sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport { Vector3 } from \"./math.vector\";\r\n\r\n/**\r\n * Class representing an isovector a vector containing 2 INTEGER coordinates\r\n * x axis is horizontal\r\n * y axis is 60 deg counter clockwise from positive y axis\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _IsoVector {\r\n    /**\r\n     * Creates a new isovector from the given x and y coordinates\r\n     * @param x defines the first coordinate, must be an integer\r\n     * @param y defines the second coordinate, must be an integer\r\n     */\r\n    constructor(\r\n        /** defines the first coordinate */\r\n        public x: number = 0,\r\n        /** defines the second coordinate */\r\n        public y: number = 0\r\n    ) {\r\n        if (x !== Math.floor(x)) {\r\n            x === Math.floor(x);\r\n            Logger.Warn(\"x is not an integer, floor(x) used\");\r\n        }\r\n        if (y !== Math.floor(y)) {\r\n            y === Math.floor(y);\r\n            Logger.Warn(\"y is not an integer, floor(y) used\");\r\n        }\r\n    }\r\n\r\n    // Operators\r\n\r\n    /**\r\n     * Gets a new IsoVector copied from the IsoVector\r\n     * @returns a new IsoVector\r\n     */\r\n    public clone(): _IsoVector {\r\n        return new _IsoVector(this.x, this.y);\r\n    }\r\n\r\n    /**\r\n     * Rotates one IsoVector 60 degrees counter clockwise about another\r\n     * Please note that this is an in place operation\r\n     * @param other an IsoVector a center of rotation\r\n     * @returns the rotated IsoVector\r\n     */\r\n    public rotate60About(other: _IsoVector) {\r\n        //other IsoVector\r\n        const x: number = this.x;\r\n        this.x = other.x + other.y - this.y;\r\n        this.y = x + this.y - other.x;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotates one IsoVector 60 degrees clockwise about another\r\n     * Please note that this is an in place operation\r\n     * @param other an IsoVector as center of rotation\r\n     * @returns the rotated IsoVector\r\n     */\r\n    public rotateNeg60About(other: _IsoVector) {\r\n        const x = this.x;\r\n        this.x = x + this.y - other.y;\r\n        this.y = other.x + other.y - x;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * For an equilateral triangle OAB with O at isovector (0, 0) and A at isovector (m, n)\r\n     * Rotates one IsoVector 120 degrees counter clockwise about the center of the triangle\r\n     * Please note that this is an in place operation\r\n     * @param m integer a measure a Primary triangle of order (m, n) m > n\r\n     * @param n >= 0 integer a measure for a Primary triangle of order (m, n)\r\n     * @returns the rotated IsoVector\r\n     */\r\n    public rotate120(m: number, n: number) {\r\n        //m, n integers\r\n        if (m !== Math.floor(m)) {\r\n            m === Math.floor(m);\r\n            Logger.Warn(\"m not an integer only floor(m) used\");\r\n        }\r\n        if (n !== Math.floor(n)) {\r\n            n === Math.floor(n);\r\n            Logger.Warn(\"n not an integer only floor(n) used\");\r\n        }\r\n        const x = this.x;\r\n        this.x = m - x - this.y;\r\n        this.y = n + x;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * For an equilateral triangle OAB with O at isovector (0, 0) and A at isovector (m, n)\r\n     * Rotates one IsoVector 120 degrees clockwise about the center of the triangle\r\n     * Please note that this is an in place operation\r\n     * @param m integer a measure a Primary triangle of order (m, n) m > n\r\n     * @param n >= 0 integer a measure for a Primary triangle of order (m, n)\r\n     * @returns the rotated IsoVector\r\n     */\r\n    public rotateNeg120(m: number, n: number) {\r\n        //m, n integers\r\n        if (m !== Math.floor(m)) {\r\n            m === Math.floor(m);\r\n            Logger.Warn(\"m is not an integer, floor(m) used\");\r\n        }\r\n        if (n !== Math.floor(n)) {\r\n            n === Math.floor(n);\r\n            Logger.Warn(\"n is not an integer,   floor(n) used\");\r\n        }\r\n        const x = this.x;\r\n        this.x = this.y - n;\r\n        this.y = m + n - x - this.y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Transforms an IsoVector to one in Cartesian 3D space based on an isovector\r\n     * @param origin an IsoVector\r\n     * @param isoGridSize\r\n     * @returns Point as a Vector3\r\n     */\r\n    public toCartesianOrigin(origin: _IsoVector, isoGridSize: number) {\r\n        const point = Vector3.Zero();\r\n        point.x = origin.x + 2 * this.x * isoGridSize + this.y * isoGridSize;\r\n        point.y = origin.y + Math.sqrt(3) * this.y * isoGridSize;\r\n        return point;\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Gets a new IsoVector(0, 0)\r\n     * @returns a new IsoVector\r\n     */\r\n    public static Zero(): _IsoVector {\r\n        return new _IsoVector(0, 0);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}