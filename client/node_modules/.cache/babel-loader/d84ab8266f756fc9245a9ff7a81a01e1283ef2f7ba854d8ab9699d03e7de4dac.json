{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector2, Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3, Color4 } from \"../Maths/math.color.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * The action to be carried out following a trigger\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#available-actions\n */\nexport class Action {\n  /**\n   * Creates a new Action\n   * @param triggerOptions the trigger, with or without parameters, for the action\n   * @param condition an optional determinant of action\n   */\n  constructor( /** the trigger, with or without parameters, for the action */\n  triggerOptions, condition) {\n    this.triggerOptions = triggerOptions;\n    /**\n     * An event triggered prior to action being executed.\n     */\n    this.onBeforeExecuteObservable = new Observable();\n    if (triggerOptions.parameter) {\n      this.trigger = triggerOptions.trigger;\n      this._triggerParameter = triggerOptions.parameter;\n    } else if (triggerOptions.trigger) {\n      this.trigger = triggerOptions.trigger;\n    } else {\n      this.trigger = triggerOptions;\n    }\n    this._nextActiveAction = this;\n    this._condition = condition;\n  }\n  /**\n   * Internal only\n   * @internal\n   */\n  _prepare() {}\n  /**\n   * Gets the trigger parameter\n   * @returns the trigger parameter\n   */\n  getTriggerParameter() {\n    return this._triggerParameter;\n  }\n  /**\n   * Sets the trigger parameter\n   * @param value defines the new trigger parameter\n   */\n  setTriggerParameter(value) {\n    this._triggerParameter = value;\n  }\n  /**\n   * Internal only - Returns if the current condition allows to run the action\n   * @internal\n   */\n  _evaluateConditionForCurrentFrame() {\n    const condition = this._condition;\n    if (!condition) {\n      return true;\n    }\n    const currentRenderId = this._actionManager.getScene().getRenderId();\n    // We cache the current evaluation for the current frame\n    if (condition._evaluationId !== currentRenderId) {\n      condition._evaluationId = currentRenderId;\n      condition._currentResult = condition.isValid();\n    }\n    return condition._currentResult;\n  }\n  /**\n   * Internal only - executes current action event\n   * @internal\n   */\n  _executeCurrent(evt) {\n    const isConditionValid = this._evaluateConditionForCurrentFrame();\n    if (!isConditionValid) {\n      return;\n    }\n    this.onBeforeExecuteObservable.notifyObservers(this);\n    this._nextActiveAction.execute(evt);\n    this.skipToNextActiveAction();\n  }\n  /**\n   * Execute placeholder for child classes\n   * @param evt optional action event\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  execute(evt) {}\n  /**\n   * Skips to next active action\n   */\n  skipToNextActiveAction() {\n    if (this._nextActiveAction._child) {\n      if (!this._nextActiveAction._child._actionManager) {\n        this._nextActiveAction._child._actionManager = this._actionManager;\n      }\n      this._nextActiveAction = this._nextActiveAction._child;\n    } else {\n      this._nextActiveAction = this;\n    }\n  }\n  /**\n   * Adds action to chain of actions, may be a DoNothingAction\n   * @param action defines the next action to execute\n   * @returns The action passed in\n   * @see https://www.babylonjs-playground.com/#1T30HR#0\n   */\n  then(action) {\n    this._child = action;\n    action._actionManager = this._actionManager;\n    action._prepare();\n    return action;\n  }\n  /**\n   * Internal only\n   * @internal\n   */\n  _getProperty(propertyPath) {\n    return this._actionManager._getProperty(propertyPath);\n  }\n  /**\n   * @internal\n   */\n  _getEffectiveTarget(target, propertyPath) {\n    return this._actionManager._getEffectiveTarget(target, propertyPath);\n  }\n  /**\n   * Serialize placeholder for child classes\n   * @param parent of child\n   * @returns the serialized object\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serialize(parent) {}\n  /**\n   * Internal only called by serialize\n   * @internal\n   */\n  _serialize(serializedAction, parent) {\n    const serializationObject = {\n      type: 1,\n      children: [],\n      name: serializedAction.name,\n      properties: serializedAction.properties || []\n    };\n    // Serialize child\n    if (this._child) {\n      this._child.serialize(serializationObject);\n    }\n    // Check if \"this\" has a condition\n    if (this._condition) {\n      const serializedCondition = this._condition.serialize();\n      serializedCondition.children.push(serializationObject);\n      if (parent) {\n        parent.children.push(serializedCondition);\n      }\n      return serializedCondition;\n    }\n    if (parent) {\n      parent.children.push(serializationObject);\n    }\n    return serializationObject;\n  }\n}\n/**\n * Internal only\n * @internal\n */\nAction._SerializeValueAsString = value => {\n  if (typeof value === \"number\") {\n    return value.toString();\n  }\n  if (typeof value === \"boolean\") {\n    return value ? \"true\" : \"false\";\n  }\n  if (value instanceof Vector2) {\n    return value.x + \", \" + value.y;\n  }\n  if (value instanceof Vector3) {\n    return value.x + \", \" + value.y + \", \" + value.z;\n  }\n  if (value instanceof Color3) {\n    return value.r + \", \" + value.g + \", \" + value.b;\n  }\n  if (value instanceof Color4) {\n    return value.r + \", \" + value.g + \", \" + value.b + \", \" + value.a;\n  }\n  return value; // string\n};\n/**\n * Internal only\n * @internal\n */\nAction._GetTargetProperty = target => {\n  return {\n    name: \"target\",\n    targetType: target._isMesh ? \"MeshProperties\" : target._isLight ? \"LightProperties\" : target._isCamera ? \"CameraProperties\" : target._isMaterial ? \"MaterialProperties\" : \"SceneProperties\",\n    value: target._isScene ? \"Scene\" : target.name\n  };\n};\nRegisterClass(\"BABYLON.Action\", Action);","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,uBAAqB;AAChD,SAASC,OAAO,EAAEC,OAAO,QAAQ,yBAAuB;AACxD,SAASC,MAAM,EAAEC,MAAM,QAAQ,wBAAsB;AAErD,SAASC,aAAa,QAAQ,sBAAoB;AAiElD;;;;AAIA,OAAM,MAAOC,MAAM;EAsBf;;;;;EAKAC,aACI;EACOC,cAAmB,EAC1BC,SAAqB;IADd,mBAAc,GAAdD,cAAc;IAZzB;;;IAGO,8BAAyB,GAAG,IAAIR,UAAU,EAAU;IAYvD,IAAIQ,cAAc,CAACE,SAAS,EAAE;MAC1B,IAAI,CAACC,OAAO,GAAGH,cAAc,CAACG,OAAO;MACrC,IAAI,CAACC,iBAAiB,GAAGJ,cAAc,CAACE,SAAS;KACpD,MAAM,IAAIF,cAAc,CAACG,OAAO,EAAE;MAC/B,IAAI,CAACA,OAAO,GAAGH,cAAc,CAACG,OAAO;KACxC,MAAM;MACH,IAAI,CAACA,OAAO,GAAGH,cAAc;;IAGjC,IAAI,CAACK,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,UAAU,GAAGL,SAAS;EAC/B;EAEA;;;;EAIOM,QAAQ,IAAU;EAEzB;;;;EAIOC,mBAAmB;IACtB,OAAO,IAAI,CAACJ,iBAAiB;EACjC;EAEA;;;;EAIOK,mBAAmB,CAACC,KAAU;IACjC,IAAI,CAACN,iBAAiB,GAAGM,KAAK;EAClC;EAEA;;;;EAIOC,iCAAiC;IACpC,MAAMV,SAAS,GAAG,IAAI,CAACK,UAAU;IACjC,IAAI,CAACL,SAAS,EAAE;MACZ,OAAO,IAAI;;IAGf,MAAMW,eAAe,GAAG,IAAI,CAACC,cAAc,CAACC,QAAQ,EAAE,CAACC,WAAW,EAAE;IAEpE;IACA,IAAId,SAAS,CAACe,aAAa,KAAKJ,eAAe,EAAE;MAC7CX,SAAS,CAACe,aAAa,GAAGJ,eAAe;MACzCX,SAAS,CAACgB,cAAc,GAAGhB,SAAS,CAACiB,OAAO,EAAE;;IAGlD,OAAOjB,SAAS,CAACgB,cAAc;EACnC;EAEA;;;;EAIOE,eAAe,CAACC,GAAiB;IACpC,MAAMC,gBAAgB,GAAG,IAAI,CAACV,iCAAiC,EAAE;IACjE,IAAI,CAACU,gBAAgB,EAAE;MACnB;;IAGJ,IAAI,CAACC,yBAAyB,CAACC,eAAe,CAAC,IAAI,CAAC;IACpD,IAAI,CAAClB,iBAAiB,CAACmB,OAAO,CAACJ,GAAG,CAAC;IAEnC,IAAI,CAACK,sBAAsB,EAAE;EACjC;EAEA;;;;EAIA;EACOD,OAAO,CAACJ,GAAiB,GAAS;EAEzC;;;EAGOK,sBAAsB;IACzB,IAAI,IAAI,CAACpB,iBAAiB,CAACqB,MAAM,EAAE;MAC/B,IAAI,CAAC,IAAI,CAACrB,iBAAiB,CAACqB,MAAM,CAACb,cAAc,EAAE;QAC/C,IAAI,CAACR,iBAAiB,CAACqB,MAAM,CAACb,cAAc,GAAG,IAAI,CAACA,cAAc;;MAGtE,IAAI,CAACR,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAACqB,MAAM;KACzD,MAAM;MACH,IAAI,CAACrB,iBAAiB,GAAG,IAAI;;EAErC;EAEA;;;;;;EAMOsB,IAAI,CAACC,MAAc;IACtB,IAAI,CAACF,MAAM,GAAGE,MAAM;IAEpBA,MAAM,CAACf,cAAc,GAAG,IAAI,CAACA,cAAc;IAC3Ce,MAAM,CAACrB,QAAQ,EAAE;IAEjB,OAAOqB,MAAM;EACjB;EAEA;;;;EAIOC,YAAY,CAACC,YAAoB;IACpC,OAAO,IAAI,CAACjB,cAAc,CAACgB,YAAY,CAACC,YAAY,CAAC;EACzD;EAEA;;;EAGOC,mBAAmB,CAACC,MAAW,EAAEF,YAAoB;IACxD,OAAO,IAAI,CAACjB,cAAc,CAACkB,mBAAmB,CAACC,MAAM,EAAEF,YAAY,CAAC;EACxE;EAEA;;;;;EAKA;EACOG,SAAS,CAACC,MAAW,GAAQ;EAEpC;;;;EAIUC,UAAU,CAACC,gBAAqB,EAAEF,MAAY;IACpD,MAAMG,mBAAmB,GAAQ;MAC7BC,IAAI,EAAE,CAAC;MACPC,QAAQ,EAAE,EAAE;MACZC,IAAI,EAAEJ,gBAAgB,CAACI,IAAI;MAC3BC,UAAU,EAAEL,gBAAgB,CAACK,UAAU,IAAI;KAC9C;IAED;IACA,IAAI,IAAI,CAACf,MAAM,EAAE;MACb,IAAI,CAACA,MAAM,CAACO,SAAS,CAACI,mBAAmB,CAAC;;IAG9C;IACA,IAAI,IAAI,CAAC/B,UAAU,EAAE;MACjB,MAAMoC,mBAAmB,GAAG,IAAI,CAACpC,UAAU,CAAC2B,SAAS,EAAE;MACvDS,mBAAmB,CAACH,QAAQ,CAACI,IAAI,CAACN,mBAAmB,CAAC;MAEtD,IAAIH,MAAM,EAAE;QACRA,MAAM,CAACK,QAAQ,CAACI,IAAI,CAACD,mBAAmB,CAAC;;MAE7C,OAAOA,mBAAmB;;IAG9B,IAAIR,MAAM,EAAE;MACRA,MAAM,CAACK,QAAQ,CAACI,IAAI,CAACN,mBAAmB,CAAC;;IAE7C,OAAOA,mBAAmB;EAC9B;;AAEA;;;;AAIcvC,8BAAuB,GAAIY,KAAU,IAAY;EAC3D,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC3B,OAAOA,KAAK,CAACkC,QAAQ,EAAE;;EAG3B,IAAI,OAAOlC,KAAK,KAAK,SAAS,EAAE;IAC5B,OAAOA,KAAK,GAAG,MAAM,GAAG,OAAO;;EAGnC,IAAIA,KAAK,YAAYjB,OAAO,EAAE;IAC1B,OAAOiB,KAAK,CAACmC,CAAC,GAAG,IAAI,GAAGnC,KAAK,CAACoC,CAAC;;EAEnC,IAAIpC,KAAK,YAAYhB,OAAO,EAAE;IAC1B,OAAOgB,KAAK,CAACmC,CAAC,GAAG,IAAI,GAAGnC,KAAK,CAACoC,CAAC,GAAG,IAAI,GAAGpC,KAAK,CAACqC,CAAC;;EAGpD,IAAIrC,KAAK,YAAYf,MAAM,EAAE;IACzB,OAAOe,KAAK,CAACsC,CAAC,GAAG,IAAI,GAAGtC,KAAK,CAACuC,CAAC,GAAG,IAAI,GAAGvC,KAAK,CAACwC,CAAC;;EAEpD,IAAIxC,KAAK,YAAYd,MAAM,EAAE;IACzB,OAAOc,KAAK,CAACsC,CAAC,GAAG,IAAI,GAAGtC,KAAK,CAACuC,CAAC,GAAG,IAAI,GAAGvC,KAAK,CAACwC,CAAC,GAAG,IAAI,GAAGxC,KAAK,CAACyC,CAAC;;EAGrE,OAAOzC,KAAK,CAAC,CAAC;AAClB,CAAC;AAED;;;;AAIcZ,yBAAkB,GAAIkC,MAA+B,IAAI;EACnE,OAAO;IACHQ,IAAI,EAAE,QAAQ;IACdY,UAAU,EAASpB,MAAO,CAACqB,OAAO,GAC5B,gBAAgB,GACRrB,MAAO,CAACsB,QAAQ,GACxB,iBAAiB,GACRtB,MAAO,CAACuB,SAAS,GAC1B,kBAAkB,GACPvB,MAAO,CAACwB,WAAW,GAC9B,oBAAoB,GACpB,iBAAiB;IACvB9C,KAAK,EAAUsB,MAAO,CAACyB,QAAQ,GAAG,OAAO,GAAUzB,MAAO,CAACQ;GAC9D;AACL,CAAC;AAGL3C,aAAa,CAAC,gBAAgB,EAAEC,MAAM,CAAC","names":["Observable","Vector2","Vector3","Color3","Color4","RegisterClass","Action","constructor","triggerOptions","condition","parameter","trigger","_triggerParameter","_nextActiveAction","_condition","_prepare","getTriggerParameter","setTriggerParameter","value","_evaluateConditionForCurrentFrame","currentRenderId","_actionManager","getScene","getRenderId","_evaluationId","_currentResult","isValid","_executeCurrent","evt","isConditionValid","onBeforeExecuteObservable","notifyObservers","execute","skipToNextActiveAction","_child","then","action","_getProperty","propertyPath","_getEffectiveTarget","target","serialize","parent","_serialize","serializedAction","serializationObject","type","children","name","properties","serializedCondition","push","toString","x","y","z","r","g","b","a","targetType","_isMesh","_isLight","_isCamera","_isMaterial","_isScene"],"sourceRoot":"","sources":["../../../../lts/core/generated/Actions/action.ts"],"sourcesContent":["import { Observable } from \"../Misc/observable\";\r\nimport { Vector2, Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport type { Condition } from \"./condition\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport type { AbstractActionManager } from \"./abstractActionManager\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Material } from \"../Materials/material\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\ndeclare type ActionManager = import(\"./actionManager\").ActionManager;\r\ndeclare type ActionEvent = import(\"./actionEvent\").ActionEvent;\r\ndeclare type Mesh = import(\"../Meshes/mesh\").Mesh;\r\ndeclare type Light = import(\"../Lights/light\").Light;\r\ndeclare type Camera = import(\"../Cameras/camera\").Camera;\r\ndeclare type Node = import(\"../node\").Node;\r\n\r\n/**\r\n * Interface used to define Action\r\n */\r\nexport interface IAction {\r\n    /**\r\n     * Trigger for the action\r\n     */\r\n    trigger: number;\r\n\r\n    /** Options of the trigger */\r\n    triggerOptions: any;\r\n\r\n    /**\r\n     * Gets the trigger parameters\r\n     * @returns the trigger parameters\r\n     */\r\n    getTriggerParameter(): any;\r\n\r\n    /**\r\n     * Internal only - executes current action event\r\n     * @internal\r\n     */\r\n    _executeCurrent(evt?: ActionEvent): void;\r\n\r\n    /**\r\n     * Serialize placeholder for child classes\r\n     * @param parent of child\r\n     * @returns the serialized object\r\n     */\r\n    serialize(parent: any): any;\r\n\r\n    /**\r\n     * Internal only\r\n     * @internal\r\n     */\r\n    _prepare(): void;\r\n\r\n    /**\r\n     * Internal only - manager for action\r\n     * @internal\r\n     */\r\n    _actionManager: Nullable<AbstractActionManager>;\r\n\r\n    /**\r\n     * Adds action to chain of actions, may be a DoNothingAction\r\n     * @param action defines the next action to execute\r\n     * @returns The action passed in\r\n     * @see https://www.babylonjs-playground.com/#1T30HR#0\r\n     */\r\n    then(action: IAction): IAction;\r\n}\r\n\r\n/**\r\n * The action to be carried out following a trigger\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#available-actions\r\n */\r\nexport class Action implements IAction {\r\n    /**\r\n     * Trigger for the action\r\n     */\r\n    public trigger: number;\r\n\r\n    /**\r\n     * Internal only - manager for action\r\n     * @internal\r\n     */\r\n    public _actionManager: ActionManager;\r\n\r\n    private _nextActiveAction: Action;\r\n    private _child: Action;\r\n    private _condition?: Condition;\r\n    private _triggerParameter: any;\r\n\r\n    /**\r\n     * An event triggered prior to action being executed.\r\n     */\r\n    public onBeforeExecuteObservable = new Observable<Action>();\r\n\r\n    /**\r\n     * Creates a new Action\r\n     * @param triggerOptions the trigger, with or without parameters, for the action\r\n     * @param condition an optional determinant of action\r\n     */\r\n    constructor(\r\n        /** the trigger, with or without parameters, for the action */\r\n        public triggerOptions: any,\r\n        condition?: Condition\r\n    ) {\r\n        if (triggerOptions.parameter) {\r\n            this.trigger = triggerOptions.trigger;\r\n            this._triggerParameter = triggerOptions.parameter;\r\n        } else if (triggerOptions.trigger) {\r\n            this.trigger = triggerOptions.trigger;\r\n        } else {\r\n            this.trigger = triggerOptions;\r\n        }\r\n\r\n        this._nextActiveAction = this;\r\n        this._condition = condition;\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @internal\r\n     */\r\n    public _prepare(): void {}\r\n\r\n    /**\r\n     * Gets the trigger parameter\r\n     * @returns the trigger parameter\r\n     */\r\n    public getTriggerParameter(): any {\r\n        return this._triggerParameter;\r\n    }\r\n\r\n    /**\r\n     * Sets the trigger parameter\r\n     * @param value defines the new trigger parameter\r\n     */\r\n    public setTriggerParameter(value: any) {\r\n        this._triggerParameter = value;\r\n    }\r\n\r\n    /**\r\n     * Internal only - Returns if the current condition allows to run the action\r\n     * @internal\r\n     */\r\n    public _evaluateConditionForCurrentFrame(): boolean {\r\n        const condition = this._condition;\r\n        if (!condition) {\r\n            return true;\r\n        }\r\n\r\n        const currentRenderId = this._actionManager.getScene().getRenderId();\r\n\r\n        // We cache the current evaluation for the current frame\r\n        if (condition._evaluationId !== currentRenderId) {\r\n            condition._evaluationId = currentRenderId;\r\n            condition._currentResult = condition.isValid();\r\n        }\r\n\r\n        return condition._currentResult;\r\n    }\r\n\r\n    /**\r\n     * Internal only - executes current action event\r\n     * @internal\r\n     */\r\n    public _executeCurrent(evt?: ActionEvent): void {\r\n        const isConditionValid = this._evaluateConditionForCurrentFrame();\r\n        if (!isConditionValid) {\r\n            return;\r\n        }\r\n\r\n        this.onBeforeExecuteObservable.notifyObservers(this);\r\n        this._nextActiveAction.execute(evt);\r\n\r\n        this.skipToNextActiveAction();\r\n    }\r\n\r\n    /**\r\n     * Execute placeholder for child classes\r\n     * @param evt optional action event\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public execute(evt?: ActionEvent): void {}\r\n\r\n    /**\r\n     * Skips to next active action\r\n     */\r\n    public skipToNextActiveAction(): void {\r\n        if (this._nextActiveAction._child) {\r\n            if (!this._nextActiveAction._child._actionManager) {\r\n                this._nextActiveAction._child._actionManager = this._actionManager;\r\n            }\r\n\r\n            this._nextActiveAction = this._nextActiveAction._child;\r\n        } else {\r\n            this._nextActiveAction = this;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds action to chain of actions, may be a DoNothingAction\r\n     * @param action defines the next action to execute\r\n     * @returns The action passed in\r\n     * @see https://www.babylonjs-playground.com/#1T30HR#0\r\n     */\r\n    public then(action: Action): Action {\r\n        this._child = action;\r\n\r\n        action._actionManager = this._actionManager;\r\n        action._prepare();\r\n\r\n        return action;\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @internal\r\n     */\r\n    public _getProperty(propertyPath: string): string {\r\n        return this._actionManager._getProperty(propertyPath);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getEffectiveTarget(target: any, propertyPath: string): any {\r\n        return this._actionManager._getEffectiveTarget(target, propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Serialize placeholder for child classes\r\n     * @param parent of child\r\n     * @returns the serialized object\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public serialize(parent: any): any {}\r\n\r\n    /**\r\n     * Internal only called by serialize\r\n     * @internal\r\n     */\r\n    protected _serialize(serializedAction: any, parent?: any): any {\r\n        const serializationObject: any = {\r\n            type: 1,\r\n            children: [],\r\n            name: serializedAction.name,\r\n            properties: serializedAction.properties || [],\r\n        };\r\n\r\n        // Serialize child\r\n        if (this._child) {\r\n            this._child.serialize(serializationObject);\r\n        }\r\n\r\n        // Check if \"this\" has a condition\r\n        if (this._condition) {\r\n            const serializedCondition = this._condition.serialize();\r\n            serializedCondition.children.push(serializationObject);\r\n\r\n            if (parent) {\r\n                parent.children.push(serializedCondition);\r\n            }\r\n            return serializedCondition;\r\n        }\r\n\r\n        if (parent) {\r\n            parent.children.push(serializationObject);\r\n        }\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @internal\r\n     */\r\n    public static _SerializeValueAsString = (value: any): string => {\r\n        if (typeof value === \"number\") {\r\n            return value.toString();\r\n        }\r\n\r\n        if (typeof value === \"boolean\") {\r\n            return value ? \"true\" : \"false\";\r\n        }\r\n\r\n        if (value instanceof Vector2) {\r\n            return value.x + \", \" + value.y;\r\n        }\r\n        if (value instanceof Vector3) {\r\n            return value.x + \", \" + value.y + \", \" + value.z;\r\n        }\r\n\r\n        if (value instanceof Color3) {\r\n            return value.r + \", \" + value.g + \", \" + value.b;\r\n        }\r\n        if (value instanceof Color4) {\r\n            return value.r + \", \" + value.g + \", \" + value.b + \", \" + value.a;\r\n        }\r\n\r\n        return value; // string\r\n    };\r\n\r\n    /**\r\n     * Internal only\r\n     * @internal\r\n     */\r\n    public static _GetTargetProperty = (target: Scene | Node | Material) => {\r\n        return {\r\n            name: \"target\",\r\n            targetType: (<Mesh>target)._isMesh\r\n                ? \"MeshProperties\"\r\n                : (<Light>target)._isLight\r\n                ? \"LightProperties\"\r\n                : (<Camera>target)._isCamera\r\n                ? \"CameraProperties\"\r\n                : (<Material>target)._isMaterial\r\n                ? \"MaterialProperties\"\r\n                : \"SceneProperties\",\r\n            value: (<Scene>target)._isScene ? \"Scene\" : (<Node>target).name,\r\n        };\r\n    };\r\n}\r\n\r\nRegisterClass(\"BABYLON.Action\", Action);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}