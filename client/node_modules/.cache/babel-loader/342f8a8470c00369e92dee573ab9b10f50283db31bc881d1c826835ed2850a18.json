{"ast":null,"code":"/**\n * @internal\n **/\nexport class StencilState {\n  constructor() {\n    this.reset();\n  }\n  reset() {\n    this.enabled = false;\n    this.mask = 0xff;\n    this.func = StencilState.ALWAYS;\n    this.funcRef = 1;\n    this.funcMask = 0xff;\n    this.opStencilFail = StencilState.KEEP;\n    this.opDepthFail = StencilState.KEEP;\n    this.opStencilDepthPass = StencilState.REPLACE;\n  }\n  get stencilFunc() {\n    return this.func;\n  }\n  set stencilFunc(value) {\n    this.func = value;\n  }\n  get stencilFuncRef() {\n    return this.funcRef;\n  }\n  set stencilFuncRef(value) {\n    this.funcRef = value;\n  }\n  get stencilFuncMask() {\n    return this.funcMask;\n  }\n  set stencilFuncMask(value) {\n    this.funcMask = value;\n  }\n  get stencilOpStencilFail() {\n    return this.opStencilFail;\n  }\n  set stencilOpStencilFail(value) {\n    this.opStencilFail = value;\n  }\n  get stencilOpDepthFail() {\n    return this.opDepthFail;\n  }\n  set stencilOpDepthFail(value) {\n    this.opDepthFail = value;\n  }\n  get stencilOpStencilDepthPass() {\n    return this.opStencilDepthPass;\n  }\n  set stencilOpStencilDepthPass(value) {\n    this.opStencilDepthPass = value;\n  }\n  get stencilMask() {\n    return this.mask;\n  }\n  set stencilMask(value) {\n    this.mask = value;\n  }\n  get stencilTest() {\n    return this.enabled;\n  }\n  set stencilTest(value) {\n    this.enabled = value;\n  }\n}\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\nStencilState.ALWAYS = 519;\n/** Passed to stencilOperation to specify that stencil value must be kept */\nStencilState.KEEP = 7680;\n/** Passed to stencilOperation to specify that stencil value must be replaced */\nStencilState.REPLACE = 7681;","map":{"version":3,"mappings":"AAGA;;;AAGA,OAAM,MAAOA,YAAY;EAQrBC;IACI,IAAI,CAACC,KAAK,EAAE;EAChB;EAEOA,KAAK;IACR,IAAI,CAACC,OAAO,GAAG,KAAK;IACpB,IAAI,CAACC,IAAI,GAAG,IAAI;IAEhB,IAAI,CAACC,IAAI,GAAGL,YAAY,CAACM,MAAM;IAC/B,IAAI,CAACC,OAAO,GAAG,CAAC;IAChB,IAAI,CAACC,QAAQ,GAAG,IAAI;IAEpB,IAAI,CAACC,aAAa,GAAGT,YAAY,CAACU,IAAI;IACtC,IAAI,CAACC,WAAW,GAAGX,YAAY,CAACU,IAAI;IACpC,IAAI,CAACE,kBAAkB,GAAGZ,YAAY,CAACa,OAAO;EAClD;EAGA,IAAWC,WAAW;IAClB,OAAO,IAAI,CAACT,IAAI;EACpB;EAEA,IAAWS,WAAW,CAACC,KAAa;IAChC,IAAI,CAACV,IAAI,GAAGU,KAAK;EACrB;EAGA,IAAWC,cAAc;IACrB,OAAO,IAAI,CAACT,OAAO;EACvB;EAEA,IAAWS,cAAc,CAACD,KAAa;IACnC,IAAI,CAACR,OAAO,GAAGQ,KAAK;EACxB;EAGA,IAAWE,eAAe;IACtB,OAAO,IAAI,CAACT,QAAQ;EACxB;EAEA,IAAWS,eAAe,CAACF,KAAa;IACpC,IAAI,CAACP,QAAQ,GAAGO,KAAK;EACzB;EAGA,IAAWG,oBAAoB;IAC3B,OAAO,IAAI,CAACT,aAAa;EAC7B;EAEA,IAAWS,oBAAoB,CAACH,KAAa;IACzC,IAAI,CAACN,aAAa,GAAGM,KAAK;EAC9B;EAGA,IAAWI,kBAAkB;IACzB,OAAO,IAAI,CAACR,WAAW;EAC3B;EAEA,IAAWQ,kBAAkB,CAACJ,KAAa;IACvC,IAAI,CAACJ,WAAW,GAAGI,KAAK;EAC5B;EAGA,IAAWK,yBAAyB;IAChC,OAAO,IAAI,CAACR,kBAAkB;EAClC;EAEA,IAAWQ,yBAAyB,CAACL,KAAa;IAC9C,IAAI,CAACH,kBAAkB,GAAGG,KAAK;EACnC;EAGA,IAAWM,WAAW;IAClB,OAAO,IAAI,CAACjB,IAAI;EACpB;EAEA,IAAWiB,WAAW,CAACN,KAAa;IAChC,IAAI,CAACX,IAAI,GAAGW,KAAK;EACrB;EAGA,IAAWO,WAAW;IAClB,OAAO,IAAI,CAACnB,OAAO;EACvB;EAEA,IAAWmB,WAAW,CAACP,KAAc;IACjC,IAAI,CAACZ,OAAO,GAAGY,KAAK;EACxB;;AA9FA;AACuBf,mBAAM,GAAG;AAChC;AACuBA,iBAAI,GAAG;AAC9B;AACuBA,oBAAO,GAAG","names":["StencilState","constructor","reset","enabled","mask","func","ALWAYS","funcRef","funcMask","opStencilFail","KEEP","opDepthFail","opStencilDepthPass","REPLACE","stencilFunc","value","stencilFuncRef","stencilFuncMask","stencilOpStencilFail","stencilOpDepthFail","stencilOpStencilDepthPass","stencilMask","stencilTest"],"sourceRoot":"","sources":["../../../../lts/core/generated/States/stencilState.ts"],"sourcesContent":["import { Constants } from \"../Engines/constants\";\r\nimport type { IStencilState } from \"./IStencilState\";\r\n\r\n/**\r\n * @internal\r\n **/\r\nexport class StencilState implements IStencilState {\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\r\n    public static readonly ALWAYS = Constants.ALWAYS;\r\n    /** Passed to stencilOperation to specify that stencil value must be kept */\r\n    public static readonly KEEP = Constants.KEEP;\r\n    /** Passed to stencilOperation to specify that stencil value must be replaced */\r\n    public static readonly REPLACE = Constants.REPLACE;\r\n\r\n    public constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public reset() {\r\n        this.enabled = false;\r\n        this.mask = 0xff;\r\n\r\n        this.func = StencilState.ALWAYS;\r\n        this.funcRef = 1;\r\n        this.funcMask = 0xff;\r\n\r\n        this.opStencilFail = StencilState.KEEP;\r\n        this.opDepthFail = StencilState.KEEP;\r\n        this.opStencilDepthPass = StencilState.REPLACE;\r\n    }\r\n\r\n    public func: number;\r\n    public get stencilFunc(): number {\r\n        return this.func;\r\n    }\r\n\r\n    public set stencilFunc(value: number) {\r\n        this.func = value;\r\n    }\r\n\r\n    public funcRef: number;\r\n    public get stencilFuncRef(): number {\r\n        return this.funcRef;\r\n    }\r\n\r\n    public set stencilFuncRef(value: number) {\r\n        this.funcRef = value;\r\n    }\r\n\r\n    public funcMask: number;\r\n    public get stencilFuncMask(): number {\r\n        return this.funcMask;\r\n    }\r\n\r\n    public set stencilFuncMask(value: number) {\r\n        this.funcMask = value;\r\n    }\r\n\r\n    public opStencilFail: number;\r\n    public get stencilOpStencilFail(): number {\r\n        return this.opStencilFail;\r\n    }\r\n\r\n    public set stencilOpStencilFail(value: number) {\r\n        this.opStencilFail = value;\r\n    }\r\n\r\n    public opDepthFail: number;\r\n    public get stencilOpDepthFail(): number {\r\n        return this.opDepthFail;\r\n    }\r\n\r\n    public set stencilOpDepthFail(value: number) {\r\n        this.opDepthFail = value;\r\n    }\r\n\r\n    public opStencilDepthPass: number;\r\n    public get stencilOpStencilDepthPass(): number {\r\n        return this.opStencilDepthPass;\r\n    }\r\n\r\n    public set stencilOpStencilDepthPass(value: number) {\r\n        this.opStencilDepthPass = value;\r\n    }\r\n\r\n    public mask: number;\r\n    public get stencilMask(): number {\r\n        return this.mask;\r\n    }\r\n\r\n    public set stencilMask(value: number) {\r\n        this.mask = value;\r\n    }\r\n\r\n    public enabled: boolean;\r\n    public get stencilTest(): boolean {\r\n        return this.enabled;\r\n    }\r\n\r\n    public set stencilTest(value: boolean) {\r\n        this.enabled = value;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}