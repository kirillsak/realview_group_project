{"ast":null,"code":"import { Camera } from \"../../Cameras/camera.js\";\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera.js\";\nimport { VRCameraMetrics } from \"./vrCameraMetrics.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setVRRigMode } from \"../RigModes/vrRigMode.js\";\nimport \"../Inputs/arcRotateCameraVRDeviceOrientationInput.js\";\nNode.AddNodeConstructor(\"VRDeviceOrientationArcRotateCamera\", (name, scene) => {\n  return () => new VRDeviceOrientationArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), scene);\n});\n/**\n * Camera used to simulate VR rendering (based on ArcRotateCamera)\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#vr-device-orientation-cameras\n */\nexport class VRDeviceOrientationArcRotateCamera extends ArcRotateCamera {\n  /**\n   * Creates a new VRDeviceOrientationArcRotateCamera\n   * @param name defines camera name\n   * @param alpha defines the camera rotation along the longitudinal axis\n   * @param beta defines the camera rotation along the latitudinal axis\n   * @param radius defines the camera distance from its target\n   * @param target defines the camera target\n   * @param scene defines the scene the camera belongs to\n   * @param compensateDistortion defines if the camera needs to compensate the lens distortion\n   * @param vrCameraMetrics defines the vr metrics associated to the camera\n   */\n  constructor(name, alpha, beta, radius, target, scene, compensateDistortion = true, vrCameraMetrics = VRCameraMetrics.GetDefault()) {\n    super(name, alpha, beta, radius, target, scene);\n    this._setRigMode = setVRRigMode.bind(null, this);\n    vrCameraMetrics.compensateDistortion = compensateDistortion;\n    this.setCameraRigMode(Camera.RIG_MODE_VR, {\n      vrCameraMetrics: vrCameraMetrics\n    });\n    this.inputs.addVRDeviceOrientation();\n  }\n  /**\n   * Gets camera class name\n   * @returns VRDeviceOrientationArcRotateCamera\n   */\n  getClassName() {\n    return \"VRDeviceOrientationArcRotateCamera\";\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAQ,yBAAuB;AAC9C,SAASC,eAAe,QAAQ,kCAAgC;AAChE,SAASC,eAAe,QAAQ,sBAAoB;AAEpD,SAASC,OAAO,QAAQ,4BAA0B;AAClD,SAASC,IAAI,QAAQ,eAAa;AAClC,SAASC,YAAY,QAAQ,0BAAwB;AAErD,OAAO,sDAAoD;AAE3DD,IAAI,CAACE,kBAAkB,CAAC,oCAAoC,EAAE,CAACC,IAAI,EAAEC,KAAK,KAAI;EAC1E,OAAO,MAAM,IAAIC,kCAAkC,CAACF,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAEJ,OAAO,CAACO,IAAI,EAAE,EAAEF,KAAK,CAAC;AAC/F,CAAC,CAAC;AAEF;;;;AAIA,OAAM,MAAOC,kCAAmC,SAAQR,eAAe;EACnE;;;;;;;;;;;EAWAU,YACIJ,IAAY,EACZK,KAAa,EACbC,IAAY,EACZC,MAAc,EACdC,MAAe,EACfP,KAAa,EACbQ,oBAAoB,GAAG,IAAI,EAC3BC,kBAAmCf,eAAe,CAACgB,UAAU,EAAE;IAE/D,KAAK,CAACX,IAAI,EAAEK,KAAK,EAAEC,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEP,KAAK,CAAC;IAgBzC,gBAAW,GAAGH,YAAY,CAACc,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;IAdjDF,eAAe,CAACD,oBAAoB,GAAGA,oBAAoB;IAC3D,IAAI,CAACI,gBAAgB,CAACpB,MAAM,CAACqB,WAAW,EAAE;MAAEJ,eAAe,EAAEA;IAAe,CAAE,CAAC;IAE/E,IAAI,CAACK,MAAM,CAACC,sBAAsB,EAAE;EACxC;EAEA;;;;EAIOC,YAAY;IACf,OAAO,oCAAoC;EAC/C","names":["Camera","ArcRotateCamera","VRCameraMetrics","Vector3","Node","setVRRigMode","AddNodeConstructor","name","scene","VRDeviceOrientationArcRotateCamera","Zero","constructor","alpha","beta","radius","target","compensateDistortion","vrCameraMetrics","GetDefault","bind","setCameraRigMode","RIG_MODE_VR","inputs","addVRDeviceOrientation","getClassName"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/VR/vrDeviceOrientationArcRotateCamera.ts"],"sourcesContent":["import { Camera } from \"../../Cameras/camera\";\r\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport { VRCameraMetrics } from \"./vrCameraMetrics\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Node } from \"../../node\";\r\nimport { setVRRigMode } from \"../RigModes/vrRigMode\";\r\n\r\nimport \"../Inputs/arcRotateCameraVRDeviceOrientationInput\";\r\n\r\nNode.AddNodeConstructor(\"VRDeviceOrientationArcRotateCamera\", (name, scene) => {\r\n    return () => new VRDeviceOrientationArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * Camera used to simulate VR rendering (based on ArcRotateCamera)\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#vr-device-orientation-cameras\r\n */\r\nexport class VRDeviceOrientationArcRotateCamera extends ArcRotateCamera {\r\n    /**\r\n     * Creates a new VRDeviceOrientationArcRotateCamera\r\n     * @param name defines camera name\r\n     * @param alpha defines the camera rotation along the longitudinal axis\r\n     * @param beta defines the camera rotation along the latitudinal axis\r\n     * @param radius defines the camera distance from its target\r\n     * @param target defines the camera target\r\n     * @param scene defines the scene the camera belongs to\r\n     * @param compensateDistortion defines if the camera needs to compensate the lens distortion\r\n     * @param vrCameraMetrics defines the vr metrics associated to the camera\r\n     */\r\n    constructor(\r\n        name: string,\r\n        alpha: number,\r\n        beta: number,\r\n        radius: number,\r\n        target: Vector3,\r\n        scene?: Scene,\r\n        compensateDistortion = true,\r\n        vrCameraMetrics: VRCameraMetrics = VRCameraMetrics.GetDefault()\r\n    ) {\r\n        super(name, alpha, beta, radius, target, scene);\r\n\r\n        vrCameraMetrics.compensateDistortion = compensateDistortion;\r\n        this.setCameraRigMode(Camera.RIG_MODE_VR, { vrCameraMetrics: vrCameraMetrics });\r\n\r\n        this.inputs.addVRDeviceOrientation();\r\n    }\r\n\r\n    /**\r\n     * Gets camera class name\r\n     * @returns VRDeviceOrientationArcRotateCamera\r\n     */\r\n    public getClassName(): string {\r\n        return \"VRDeviceOrientationArcRotateCamera\";\r\n    }\r\n\r\n    protected _setRigMode = setVRRigMode.bind(null, this);\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}