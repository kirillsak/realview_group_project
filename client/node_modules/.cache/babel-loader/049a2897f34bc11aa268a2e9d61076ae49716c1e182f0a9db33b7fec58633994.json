{"ast":null,"code":"import { __decorate } from \"../../tslib.es6.js\";\nimport { serialize, SerializationHelper, serializeAsColor3, expandToProperty, serializeAsTexture } from \"../../Misc/decorators.js\";\nimport { PBRBaseSimpleMaterial } from \"./pbrBaseSimpleMaterial.js\";\nimport { RegisterClass } from \"../../Misc/typeStore.js\";\n/**\n * The PBR material of BJS following the metal roughness convention.\n *\n * This fits to the PBR convention in the GLTF definition:\n * https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Archived/KHR_materials_pbrSpecularGlossiness/README.md\n */\nexport class PBRMetallicRoughnessMaterial extends PBRBaseSimpleMaterial {\n  /**\n   * Instantiates a new PBRMetalRoughnessMaterial instance.\n   *\n   * @param name The material name\n   * @param scene The scene the material will be use in.\n   */\n  constructor(name, scene) {\n    super(name, scene);\n    this._useRoughnessFromMetallicTextureAlpha = false;\n    this._useRoughnessFromMetallicTextureGreen = true;\n    this._useMetallnessFromMetallicTextureBlue = true;\n    this.metallic = 1.0;\n    this.roughness = 1.0;\n  }\n  /**\n   * Return the current class name of the material.\n   */\n  getClassName() {\n    return \"PBRMetallicRoughnessMaterial\";\n  }\n  /**\n   * Makes a duplicate of the current material.\n   * @param name - name to use for the new material.\n   */\n  clone(name) {\n    const clone = SerializationHelper.Clone(() => new PBRMetallicRoughnessMaterial(name, this.getScene()), this);\n    clone.id = name;\n    clone.name = name;\n    this.clearCoat.copyTo(clone.clearCoat);\n    this.anisotropy.copyTo(clone.anisotropy);\n    this.brdf.copyTo(clone.brdf);\n    this.sheen.copyTo(clone.sheen);\n    this.subSurface.copyTo(clone.subSurface);\n    return clone;\n  }\n  /**\n   * Serialize the material to a parsable JSON object.\n   */\n  serialize() {\n    const serializationObject = SerializationHelper.Serialize(this);\n    serializationObject.customType = \"BABYLON.PBRMetallicRoughnessMaterial\";\n    serializationObject.clearCoat = this.clearCoat.serialize();\n    serializationObject.anisotropy = this.anisotropy.serialize();\n    serializationObject.brdf = this.brdf.serialize();\n    serializationObject.sheen = this.sheen.serialize();\n    serializationObject.subSurface = this.subSurface.serialize();\n    serializationObject.iridescence = this.iridescence.serialize();\n    return serializationObject;\n  }\n  /**\n   * Parses a JSON object corresponding to the serialize function.\n   * @param source\n   * @param scene\n   * @param rootUrl\n   */\n  static Parse(source, scene, rootUrl) {\n    const material = SerializationHelper.Parse(() => new PBRMetallicRoughnessMaterial(source.name, scene), source, scene, rootUrl);\n    if (source.clearCoat) {\n      material.clearCoat.parse(source.clearCoat, scene, rootUrl);\n    }\n    if (source.anisotropy) {\n      material.anisotropy.parse(source.anisotropy, scene, rootUrl);\n    }\n    if (source.brdf) {\n      material.brdf.parse(source.brdf, scene, rootUrl);\n    }\n    if (source.sheen) {\n      material.sheen.parse(source.sheen, scene, rootUrl);\n    }\n    if (source.subSurface) {\n      material.subSurface.parse(source.subSurface, scene, rootUrl);\n    }\n    if (source.iridescence) {\n      material.iridescence.parse(source.iridescence, scene, rootUrl);\n    }\n    return material;\n  }\n}\n__decorate([serializeAsColor3(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoColor\")], PBRMetallicRoughnessMaterial.prototype, \"baseColor\", void 0);\n__decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoTexture\")], PBRMetallicRoughnessMaterial.prototype, \"baseTexture\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRMetallicRoughnessMaterial.prototype, \"metallic\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRMetallicRoughnessMaterial.prototype, \"roughness\", void 0);\n__decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_metallicTexture\")], PBRMetallicRoughnessMaterial.prototype, \"metallicRoughnessTexture\", void 0);\nRegisterClass(\"BABYLON.PBRMetallicRoughnessMaterial\", PBRMetallicRoughnessMaterial);","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,mBAAmB,EAAEC,iBAAiB,EAAEC,gBAAgB,EAAEC,kBAAkB,QAAQ,0BAAwB;AAIhI,SAASC,qBAAqB,QAAQ,4BAA0B;AAChE,SAASC,aAAa,QAAQ,yBAAuB;AAGrD;;;;;;AAMA,OAAM,MAAOC,4BAA6B,SAAQF,qBAAqB;EA2CnE;;;;;;EAMAG,YAAYC,IAAY,EAAEC,KAAa;IACnC,KAAK,CAACD,IAAI,EAAEC,KAAK,CAAC;IAClB,IAAI,CAACC,qCAAqC,GAAG,KAAK;IAClD,IAAI,CAACC,qCAAqC,GAAG,IAAI;IACjD,IAAI,CAACC,qCAAqC,GAAG,IAAI;IACjD,IAAI,CAACC,QAAQ,GAAG,GAAG;IACnB,IAAI,CAACC,SAAS,GAAG,GAAG;EACxB;EAEA;;;EAGOC,YAAY;IACf,OAAO,8BAA8B;EACzC;EAEA;;;;EAIOC,KAAK,CAACR,IAAY;IACrB,MAAMQ,KAAK,GAAGhB,mBAAmB,CAACiB,KAAK,CAAC,MAAM,IAAIX,4BAA4B,CAACE,IAAI,EAAE,IAAI,CAACU,QAAQ,EAAE,CAAC,EAAE,IAAI,CAAC;IAE5GF,KAAK,CAACG,EAAE,GAAGX,IAAI;IACfQ,KAAK,CAACR,IAAI,GAAGA,IAAI;IAEjB,IAAI,CAACY,SAAS,CAACC,MAAM,CAACL,KAAK,CAACI,SAAS,CAAC;IACtC,IAAI,CAACE,UAAU,CAACD,MAAM,CAACL,KAAK,CAACM,UAAU,CAAC;IACxC,IAAI,CAACC,IAAI,CAACF,MAAM,CAACL,KAAK,CAACO,IAAI,CAAC;IAC5B,IAAI,CAACC,KAAK,CAACH,MAAM,CAACL,KAAK,CAACQ,KAAK,CAAC;IAC9B,IAAI,CAACC,UAAU,CAACJ,MAAM,CAACL,KAAK,CAACS,UAAU,CAAC;IAExC,OAAOT,KAAK;EAChB;EAEA;;;EAGOjB,SAAS;IACZ,MAAM2B,mBAAmB,GAAG1B,mBAAmB,CAAC2B,SAAS,CAAC,IAAI,CAAC;IAC/DD,mBAAmB,CAACE,UAAU,GAAG,sCAAsC;IAEvEF,mBAAmB,CAACN,SAAS,GAAG,IAAI,CAACA,SAAS,CAACrB,SAAS,EAAE;IAC1D2B,mBAAmB,CAACJ,UAAU,GAAG,IAAI,CAACA,UAAU,CAACvB,SAAS,EAAE;IAC5D2B,mBAAmB,CAACH,IAAI,GAAG,IAAI,CAACA,IAAI,CAACxB,SAAS,EAAE;IAChD2B,mBAAmB,CAACF,KAAK,GAAG,IAAI,CAACA,KAAK,CAACzB,SAAS,EAAE;IAClD2B,mBAAmB,CAACD,UAAU,GAAG,IAAI,CAACA,UAAU,CAAC1B,SAAS,EAAE;IAC5D2B,mBAAmB,CAACG,WAAW,GAAG,IAAI,CAACA,WAAW,CAAC9B,SAAS,EAAE;IAE9D,OAAO2B,mBAAmB;EAC9B;EAEA;;;;;;EAMO,OAAOI,KAAK,CAACC,MAAW,EAAEtB,KAAY,EAAEuB,OAAe;IAC1D,MAAMC,QAAQ,GAAGjC,mBAAmB,CAAC8B,KAAK,CAAC,MAAM,IAAIxB,4BAA4B,CAACyB,MAAM,CAACvB,IAAI,EAAEC,KAAK,CAAC,EAAEsB,MAAM,EAAEtB,KAAK,EAAEuB,OAAO,CAAC;IAC9H,IAAID,MAAM,CAACX,SAAS,EAAE;MAClBa,QAAQ,CAACb,SAAS,CAACc,KAAK,CAACH,MAAM,CAACX,SAAS,EAAEX,KAAK,EAAEuB,OAAO,CAAC;;IAE9D,IAAID,MAAM,CAACT,UAAU,EAAE;MACnBW,QAAQ,CAACX,UAAU,CAACY,KAAK,CAACH,MAAM,CAACT,UAAU,EAAEb,KAAK,EAAEuB,OAAO,CAAC;;IAEhE,IAAID,MAAM,CAACR,IAAI,EAAE;MACbU,QAAQ,CAACV,IAAI,CAACW,KAAK,CAACH,MAAM,CAACR,IAAI,EAAEd,KAAK,EAAEuB,OAAO,CAAC;;IAEpD,IAAID,MAAM,CAACP,KAAK,EAAE;MACdS,QAAQ,CAACT,KAAK,CAACU,KAAK,CAACH,MAAM,CAACP,KAAK,EAAEf,KAAK,EAAEuB,OAAO,CAAC;;IAEtD,IAAID,MAAM,CAACN,UAAU,EAAE;MACnBQ,QAAQ,CAACR,UAAU,CAACS,KAAK,CAACH,MAAM,CAACN,UAAU,EAAEhB,KAAK,EAAEuB,OAAO,CAAC;;IAEhE,IAAID,MAAM,CAACF,WAAW,EAAE;MACpBI,QAAQ,CAACJ,WAAW,CAACK,KAAK,CAACH,MAAM,CAACF,WAAW,EAAEpB,KAAK,EAAEuB,OAAO,CAAC;;IAElE,OAAOC,QAAQ;EACnB;;AAvHAE,YAFClC,iBAAiB,EAAE,EACnBC,gBAAgB,CAAC,kCAAkC,EAAE,cAAc,CAAC,+DAC5C;AAQzBiC,YAFChC,kBAAkB,EAAE,EACpBD,gBAAgB,CAAC,kCAAkC,EAAE,gBAAgB,CAAC,iEAC7B;AAQ1CiC,YAFCpC,SAAS,EAAE,EACXG,gBAAgB,CAAC,kCAAkC,CAAC,8DAC7B;AAQxBiC,YAFCpC,SAAS,EAAE,EACXG,gBAAgB,CAAC,kCAAkC,CAAC,+DAC5B;AAQzBiC,YAFChC,kBAAkB,EAAE,EACpBD,gBAAgB,CAAC,kCAAkC,EAAE,kBAAkB,CAAC,8EAClB;AA0F3DG,aAAa,CAAC,sCAAsC,EAAEC,4BAA4B,CAAC","names":["serialize","SerializationHelper","serializeAsColor3","expandToProperty","serializeAsTexture","PBRBaseSimpleMaterial","RegisterClass","PBRMetallicRoughnessMaterial","constructor","name","scene","_useRoughnessFromMetallicTextureAlpha","_useRoughnessFromMetallicTextureGreen","_useMetallnessFromMetallicTextureBlue","metallic","roughness","getClassName","clone","Clone","getScene","id","clearCoat","copyTo","anisotropy","brdf","sheen","subSurface","serializationObject","Serialize","customType","iridescence","Parse","source","rootUrl","material","parse","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/PBR/pbrMetallicRoughnessMaterial.ts"],"sourcesContent":["import { serialize, SerializationHelper, serializeAsColor3, expandToProperty, serializeAsTexture } from \"../../Misc/decorators\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Color3 } from \"../../Maths/math.color\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { PBRBaseSimpleMaterial } from \"./pbrBaseSimpleMaterial\";\r\nimport { RegisterClass } from \"../../Misc/typeStore\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n/**\r\n * The PBR material of BJS following the metal roughness convention.\r\n *\r\n * This fits to the PBR convention in the GLTF definition:\r\n * https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Archived/KHR_materials_pbrSpecularGlossiness/README.md\r\n */\r\nexport class PBRMetallicRoughnessMaterial extends PBRBaseSimpleMaterial {\r\n    /**\r\n     * The base color has two different interpretations depending on the value of metalness.\r\n     * When the material is a metal, the base color is the specific measured reflectance value\r\n     * at normal incidence (F0). For a non-metal the base color represents the reflected diffuse color\r\n     * of the material.\r\n     */\r\n    @serializeAsColor3()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoColor\")\r\n    public baseColor: Color3;\r\n\r\n    /**\r\n     * Base texture of the metallic workflow. It contains both the baseColor information in RGB as\r\n     * well as opacity information in the alpha channel.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoTexture\")\r\n    public baseTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Specifies the metallic scalar value of the material.\r\n     * Can also be used to scale the metalness values of the metallic texture.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public metallic: number;\r\n\r\n    /**\r\n     * Specifies the roughness scalar value of the material.\r\n     * Can also be used to scale the roughness values of the metallic texture.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public roughness: number;\r\n\r\n    /**\r\n     * Texture containing both the metallic value in the B channel and the\r\n     * roughness value in the G channel to keep better precision.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_metallicTexture\")\r\n    public metallicRoughnessTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Instantiates a new PBRMetalRoughnessMaterial instance.\r\n     *\r\n     * @param name The material name\r\n     * @param scene The scene the material will be use in.\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this._useRoughnessFromMetallicTextureAlpha = false;\r\n        this._useRoughnessFromMetallicTextureGreen = true;\r\n        this._useMetallnessFromMetallicTextureBlue = true;\r\n        this.metallic = 1.0;\r\n        this.roughness = 1.0;\r\n    }\r\n\r\n    /**\r\n     * Return the current class name of the material.\r\n     */\r\n    public getClassName(): string {\r\n        return \"PBRMetallicRoughnessMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the current material.\r\n     * @param name - name to use for the new material.\r\n     */\r\n    public clone(name: string): PBRMetallicRoughnessMaterial {\r\n        const clone = SerializationHelper.Clone(() => new PBRMetallicRoughnessMaterial(name, this.getScene()), this);\r\n\r\n        clone.id = name;\r\n        clone.name = name;\r\n\r\n        this.clearCoat.copyTo(clone.clearCoat);\r\n        this.anisotropy.copyTo(clone.anisotropy);\r\n        this.brdf.copyTo(clone.brdf);\r\n        this.sheen.copyTo(clone.sheen);\r\n        this.subSurface.copyTo(clone.subSurface);\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Serialize the material to a parsable JSON object.\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.PBRMetallicRoughnessMaterial\";\r\n\r\n        serializationObject.clearCoat = this.clearCoat.serialize();\r\n        serializationObject.anisotropy = this.anisotropy.serialize();\r\n        serializationObject.brdf = this.brdf.serialize();\r\n        serializationObject.sheen = this.sheen.serialize();\r\n        serializationObject.subSurface = this.subSurface.serialize();\r\n        serializationObject.iridescence = this.iridescence.serialize();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parses a JSON object corresponding to the serialize function.\r\n     * @param source\r\n     * @param scene\r\n     * @param rootUrl\r\n     */\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): PBRMetallicRoughnessMaterial {\r\n        const material = SerializationHelper.Parse(() => new PBRMetallicRoughnessMaterial(source.name, scene), source, scene, rootUrl);\r\n        if (source.clearCoat) {\r\n            material.clearCoat.parse(source.clearCoat, scene, rootUrl);\r\n        }\r\n        if (source.anisotropy) {\r\n            material.anisotropy.parse(source.anisotropy, scene, rootUrl);\r\n        }\r\n        if (source.brdf) {\r\n            material.brdf.parse(source.brdf, scene, rootUrl);\r\n        }\r\n        if (source.sheen) {\r\n            material.sheen.parse(source.sheen, scene, rootUrl);\r\n        }\r\n        if (source.subSurface) {\r\n            material.subSurface.parse(source.subSurface, scene, rootUrl);\r\n        }\r\n        if (source.iridescence) {\r\n            material.iridescence.parse(source.iridescence, scene, rootUrl);\r\n        }\r\n        return material;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.PBRMetallicRoughnessMaterial\", PBRMetallicRoughnessMaterial);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}