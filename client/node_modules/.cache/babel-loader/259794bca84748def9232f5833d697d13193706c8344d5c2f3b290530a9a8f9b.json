{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../tslib.es6.js\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { serialize, expandToProperty, serializeAsColor3, serializeAsTexture } from \"../../Misc/decorators.js\";\nimport { Color3 } from \"../../Maths/math.color.js\";\nimport { MaterialFlags } from \"../../Materials/materialFlags.js\";\nimport { MaterialHelper } from \"../../Materials/materialHelper.js\";\nimport { MaterialPluginBase } from \"../materialPluginBase.js\";\nimport { MaterialDefines } from \"../materialDefines.js\";\n/**\n * @internal\n */\nexport class MaterialSheenDefines extends MaterialDefines {\n  constructor() {\n    super(...arguments);\n    this.SHEEN = false;\n    this.SHEEN_TEXTURE = false;\n    this.SHEEN_GAMMATEXTURE = false;\n    this.SHEEN_TEXTURE_ROUGHNESS = false;\n    this.SHEEN_TEXTUREDIRECTUV = 0;\n    this.SHEEN_TEXTURE_ROUGHNESSDIRECTUV = 0;\n    this.SHEEN_LINKWITHALBEDO = false;\n    this.SHEEN_ROUGHNESS = false;\n    this.SHEEN_ALBEDOSCALING = false;\n    this.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n    this.SHEEN_TEXTURE_ROUGHNESS_IDENTICAL = false;\n  }\n}\n/**\n * Plugin that implements the sheen component of the PBR material.\n */\nexport class PBRSheenConfiguration extends MaterialPluginBase {\n  constructor(material, addToPluginList = true) {\n    super(material, \"Sheen\", 120, new MaterialSheenDefines(), addToPluginList);\n    this._isEnabled = false;\n    /**\n     * Defines if the material uses sheen.\n     */\n    this.isEnabled = false;\n    this._linkSheenWithAlbedo = false;\n    /**\n     * Defines if the sheen is linked to the sheen color.\n     */\n    this.linkSheenWithAlbedo = false;\n    /**\n     * Defines the sheen intensity.\n     */\n    this.intensity = 1;\n    /**\n     * Defines the sheen color.\n     */\n    this.color = Color3.White();\n    this._texture = null;\n    /**\n     * Stores the sheen tint values in a texture.\n     * rgb is tint\n     * a is a intensity or roughness if the roughness property has been defined and useRoughnessFromTexture is true (in that case, textureRoughness won't be used)\n     * If the roughness property has been defined and useRoughnessFromTexture is false then the alpha channel is not used to modulate roughness\n     */\n    this.texture = null;\n    this._useRoughnessFromMainTexture = true;\n    /**\n     * Indicates that the alpha channel of the texture property will be used for roughness.\n     * Has no effect if the roughness (and texture!) property is not defined\n     */\n    this.useRoughnessFromMainTexture = true;\n    this._roughness = null;\n    /**\n     * Defines the sheen roughness.\n     * It is not taken into account if linkSheenWithAlbedo is true.\n     * To stay backward compatible, material roughness is used instead if sheen roughness = null\n     */\n    this.roughness = null;\n    this._textureRoughness = null;\n    /**\n     * Stores the sheen roughness in a texture.\n     * alpha channel is the roughness. This texture won't be used if the texture property is not empty and useRoughnessFromTexture is true\n     */\n    this.textureRoughness = null;\n    this._albedoScaling = false;\n    /**\n     * If true, the sheen effect is layered above the base BRDF with the albedo-scaling technique.\n     * It allows the strength of the sheen effect to not depend on the base color of the material,\n     * making it easier to setup and tweak the effect\n     */\n    this.albedoScaling = false;\n    this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[1];\n  }\n  /** @internal */\n  _markAllSubMeshesAsTexturesDirty() {\n    this._enable(this._isEnabled);\n    this._internalMarkAllSubMeshesAsTexturesDirty();\n  }\n  isReadyForSubMesh(defines, scene) {\n    if (!this._isEnabled) {\n      return true;\n    }\n    if (defines._areTexturesDirty) {\n      if (scene.texturesEnabled) {\n        if (this._texture && MaterialFlags.SheenTextureEnabled) {\n          if (!this._texture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n        if (this._textureRoughness && MaterialFlags.SheenTextureEnabled) {\n          if (!this._textureRoughness.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n  prepareDefinesBeforeAttributes(defines, scene) {\n    var _a;\n    if (this._isEnabled) {\n      defines.SHEEN = true;\n      defines.SHEEN_LINKWITHALBEDO = this._linkSheenWithAlbedo;\n      defines.SHEEN_ROUGHNESS = this._roughness !== null;\n      defines.SHEEN_ALBEDOSCALING = this._albedoScaling;\n      defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = this._useRoughnessFromMainTexture;\n      defines.SHEEN_TEXTURE_ROUGHNESS_IDENTICAL = this._texture !== null && this._texture._texture === ((_a = this._textureRoughness) === null || _a === void 0 ? void 0 : _a._texture) && this._texture.checkTransformsAreIdentical(this._textureRoughness);\n      if (defines._areTexturesDirty) {\n        if (scene.texturesEnabled) {\n          if (this._texture && MaterialFlags.SheenTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"SHEEN_TEXTURE\");\n            defines.SHEEN_GAMMATEXTURE = this._texture.gammaSpace;\n          } else {\n            defines.SHEEN_TEXTURE = false;\n          }\n          if (this._textureRoughness && MaterialFlags.SheenTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._textureRoughness, defines, \"SHEEN_TEXTURE_ROUGHNESS\");\n          } else {\n            defines.SHEEN_TEXTURE_ROUGHNESS = false;\n          }\n        }\n      }\n    } else {\n      defines.SHEEN = false;\n      defines.SHEEN_TEXTURE = false;\n      defines.SHEEN_TEXTURE_ROUGHNESS = false;\n      defines.SHEEN_LINKWITHALBEDO = false;\n      defines.SHEEN_ROUGHNESS = false;\n      defines.SHEEN_ALBEDOSCALING = false;\n      defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n      defines.SHEEN_TEXTURE_ROUGHNESS_IDENTICAL = false;\n      defines.SHEEN_GAMMATEXTURE = false;\n      defines.SHEEN_TEXTUREDIRECTUV = 0;\n      defines.SHEEN_TEXTURE_ROUGHNESSDIRECTUV = 0;\n    }\n  }\n  bindForSubMesh(uniformBuffer, scene, engine, subMesh) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    if (!this._isEnabled) {\n      return;\n    }\n    const defines = subMesh.materialDefines;\n    const isFrozen = this._material.isFrozen;\n    const identicalTextures = defines.SHEEN_TEXTURE_ROUGHNESS_IDENTICAL;\n    if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n      if (identicalTextures && MaterialFlags.SheenTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vSheenInfos\", this._texture.coordinatesIndex, this._texture.level, -1, -1);\n        MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"sheen\");\n      } else if ((this._texture || this._textureRoughness) && MaterialFlags.SheenTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vSheenInfos\", (_b = (_a = this._texture) === null || _a === void 0 ? void 0 : _a.coordinatesIndex) !== null && _b !== void 0 ? _b : 0, (_d = (_c = this._texture) === null || _c === void 0 ? void 0 : _c.level) !== null && _d !== void 0 ? _d : 0, (_f = (_e = this._textureRoughness) === null || _e === void 0 ? void 0 : _e.coordinatesIndex) !== null && _f !== void 0 ? _f : 0, (_h = (_g = this._textureRoughness) === null || _g === void 0 ? void 0 : _g.level) !== null && _h !== void 0 ? _h : 0);\n        if (this._texture) {\n          MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"sheen\");\n        }\n        if (this._textureRoughness && !identicalTextures && !defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE) {\n          MaterialHelper.BindTextureMatrix(this._textureRoughness, uniformBuffer, \"sheenRoughness\");\n        }\n      }\n      // Sheen\n      uniformBuffer.updateFloat4(\"vSheenColor\", this.color.r, this.color.g, this.color.b, this.intensity);\n      if (this._roughness !== null) {\n        uniformBuffer.updateFloat(\"vSheenRoughness\", this._roughness);\n      }\n    }\n    // Textures\n    if (scene.texturesEnabled) {\n      if (this._texture && MaterialFlags.SheenTextureEnabled) {\n        uniformBuffer.setTexture(\"sheenSampler\", this._texture);\n      }\n      if (this._textureRoughness && !identicalTextures && !defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE && MaterialFlags.SheenTextureEnabled) {\n        uniformBuffer.setTexture(\"sheenRoughnessSampler\", this._textureRoughness);\n      }\n    }\n  }\n  hasTexture(texture) {\n    if (this._texture === texture) {\n      return true;\n    }\n    if (this._textureRoughness === texture) {\n      return true;\n    }\n    return false;\n  }\n  getActiveTextures(activeTextures) {\n    if (this._texture) {\n      activeTextures.push(this._texture);\n    }\n    if (this._textureRoughness) {\n      activeTextures.push(this._textureRoughness);\n    }\n  }\n  getAnimatables(animatables) {\n    if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n      animatables.push(this._texture);\n    }\n    if (this._textureRoughness && this._textureRoughness.animations && this._textureRoughness.animations.length > 0) {\n      animatables.push(this._textureRoughness);\n    }\n  }\n  dispose(forceDisposeTextures) {\n    var _a, _b;\n    if (forceDisposeTextures) {\n      (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n      (_b = this._textureRoughness) === null || _b === void 0 ? void 0 : _b.dispose();\n    }\n  }\n  getClassName() {\n    return \"PBRSheenConfiguration\";\n  }\n  addFallbacks(defines, fallbacks, currentRank) {\n    if (defines.SHEEN) {\n      fallbacks.addFallback(currentRank++, \"SHEEN\");\n    }\n    return currentRank;\n  }\n  getSamplers(samplers) {\n    samplers.push(\"sheenSampler\", \"sheenRoughnessSampler\");\n  }\n  getUniforms() {\n    return {\n      ubo: [{\n        name: \"vSheenColor\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"vSheenRoughness\",\n        size: 1,\n        type: \"float\"\n      }, {\n        name: \"vSheenInfos\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"sheenMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }, {\n        name: \"sheenRoughnessMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }]\n    };\n  }\n}\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRSheenConfiguration.prototype, \"isEnabled\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRSheenConfiguration.prototype, \"linkSheenWithAlbedo\", void 0);\n__decorate([serialize()], PBRSheenConfiguration.prototype, \"intensity\", void 0);\n__decorate([serializeAsColor3()], PBRSheenConfiguration.prototype, \"color\", void 0);\n__decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRSheenConfiguration.prototype, \"texture\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRSheenConfiguration.prototype, \"useRoughnessFromMainTexture\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRSheenConfiguration.prototype, \"roughness\", void 0);\n__decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRSheenConfiguration.prototype, \"textureRoughness\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRSheenConfiguration.prototype, \"albedoScaling\", void 0);","map":{"version":3,"mappings":"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","names":["serialize","expandToProperty","serializeAsColor3","serializeAsTexture","Color3","MaterialFlags","MaterialHelper","MaterialPluginBase","MaterialDefines","MaterialSheenDefines","constructor","PBRSheenConfiguration","material","addToPluginList","White","_internalMarkAllSubMeshesAsTexturesDirty","_dirtyCallbacks","_markAllSubMeshesAsTexturesDirty","_enable","_isEnabled","isReadyForSubMesh","defines","scene","_areTexturesDirty","texturesEnabled","_texture","SheenTextureEnabled","isReadyOrNotBlocking","_textureRoughness","prepareDefinesBeforeAttributes","SHEEN","SHEEN_LINKWITHALBEDO","_linkSheenWithAlbedo","SHEEN_ROUGHNESS","_roughness","SHEEN_ALBEDOSCALING","_albedoScaling","SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE","_useRoughnessFromMainTexture","SHEEN_TEXTURE_ROUGHNESS_IDENTICAL","checkTransformsAreIdentical","PrepareDefinesForMergedUV","SHEEN_GAMMATEXTURE","gammaSpace","SHEEN_TEXTURE","SHEEN_TEXTURE_ROUGHNESS","SHEEN_TEXTUREDIRECTUV","SHEEN_TEXTURE_ROUGHNESSDIRECTUV","bindForSubMesh","uniformBuffer","engine","subMesh","materialDefines","isFrozen","_material","identicalTextures","useUbo","isSync","updateFloat4","coordinatesIndex","level","BindTextureMatrix","color","r","g","b","intensity","updateFloat","setTexture","hasTexture","texture","getActiveTextures","activeTextures","push","getAnimatables","animatables","animations","length","dispose","forceDisposeTextures","getClassName","addFallbacks","fallbacks","currentRank","addFallback","getSamplers","samplers","getUniforms","ubo","name","size","type","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/PBR/pbrSheenConfiguration.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serialize, expandToProperty, serializeAsColor3, serializeAsTexture } from \"../../Misc/decorators\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport { MaterialFlags } from \"../../Materials/materialFlags\";\r\nimport { MaterialHelper } from \"../../Materials/materialHelper\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { IAnimatable } from \"../../Animations/animatable.interface\";\r\nimport type { EffectFallbacks } from \"../effectFallbacks\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { MaterialPluginBase } from \"../materialPluginBase\";\r\nimport { MaterialDefines } from \"../materialDefines\";\r\n\r\ndeclare type Engine = import(\"../../Engines/engine\").Engine;\r\ndeclare type Scene = import(\"../../scene\").Scene;\r\ndeclare type PBRBaseMaterial = import(\"./pbrBaseMaterial\").PBRBaseMaterial;\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MaterialSheenDefines extends MaterialDefines {\r\n    public SHEEN = false;\r\n    public SHEEN_TEXTURE = false;\r\n    public SHEEN_GAMMATEXTURE = false;\r\n    public SHEEN_TEXTURE_ROUGHNESS = false;\r\n    public SHEEN_TEXTUREDIRECTUV = 0;\r\n    public SHEEN_TEXTURE_ROUGHNESSDIRECTUV = 0;\r\n    public SHEEN_LINKWITHALBEDO = false;\r\n    public SHEEN_ROUGHNESS = false;\r\n    public SHEEN_ALBEDOSCALING = false;\r\n    public SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\r\n    public SHEEN_TEXTURE_ROUGHNESS_IDENTICAL = false;\r\n}\r\n\r\n/**\r\n * Plugin that implements the sheen component of the PBR material.\r\n */\r\nexport class PBRSheenConfiguration extends MaterialPluginBase {\r\n    private _isEnabled = false;\r\n    /**\r\n     * Defines if the material uses sheen.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isEnabled = false;\r\n\r\n    private _linkSheenWithAlbedo = false;\r\n    /**\r\n     * Defines if the sheen is linked to the sheen color.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public linkSheenWithAlbedo = false;\r\n\r\n    /**\r\n     * Defines the sheen intensity.\r\n     */\r\n    @serialize()\r\n    public intensity = 1;\r\n\r\n    /**\r\n     * Defines the sheen color.\r\n     */\r\n    @serializeAsColor3()\r\n    public color = Color3.White();\r\n\r\n    private _texture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the sheen tint values in a texture.\r\n     * rgb is tint\r\n     * a is a intensity or roughness if the roughness property has been defined and useRoughnessFromTexture is true (in that case, textureRoughness won't be used)\r\n     * If the roughness property has been defined and useRoughnessFromTexture is false then the alpha channel is not used to modulate roughness\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public texture: Nullable<BaseTexture> = null;\r\n\r\n    private _useRoughnessFromMainTexture = true;\r\n    /**\r\n     * Indicates that the alpha channel of the texture property will be used for roughness.\r\n     * Has no effect if the roughness (and texture!) property is not defined\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useRoughnessFromMainTexture = true;\r\n\r\n    private _roughness: Nullable<number> = null;\r\n    /**\r\n     * Defines the sheen roughness.\r\n     * It is not taken into account if linkSheenWithAlbedo is true.\r\n     * To stay backward compatible, material roughness is used instead if sheen roughness = null\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public roughness: Nullable<number> = null;\r\n\r\n    private _textureRoughness: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the sheen roughness in a texture.\r\n     * alpha channel is the roughness. This texture won't be used if the texture property is not empty and useRoughnessFromTexture is true\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public textureRoughness: Nullable<BaseTexture> = null;\r\n\r\n    private _albedoScaling = false;\r\n    /**\r\n     * If true, the sheen effect is layered above the base BRDF with the albedo-scaling technique.\r\n     * It allows the strength of the sheen effect to not depend on the base color of the material,\r\n     * making it easier to setup and tweak the effect\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public albedoScaling = false;\r\n\r\n    /** @internal */\r\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\r\n\r\n    /** @internal */\r\n    public _markAllSubMeshesAsTexturesDirty(): void {\r\n        this._enable(this._isEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    constructor(material: PBRBaseMaterial, addToPluginList = true) {\r\n        super(material, \"Sheen\", 120, new MaterialSheenDefines(), addToPluginList);\r\n\r\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\r\n    }\r\n\r\n    public isReadyForSubMesh(defines: MaterialSheenDefines, scene: Scene): boolean {\r\n        if (!this._isEnabled) {\r\n            return true;\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (this._texture && MaterialFlags.SheenTextureEnabled) {\r\n                    if (!this._texture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._textureRoughness && MaterialFlags.SheenTextureEnabled) {\r\n                    if (!this._textureRoughness.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public prepareDefinesBeforeAttributes(defines: MaterialSheenDefines, scene: Scene): void {\r\n        if (this._isEnabled) {\r\n            defines.SHEEN = true;\r\n            defines.SHEEN_LINKWITHALBEDO = this._linkSheenWithAlbedo;\r\n            defines.SHEEN_ROUGHNESS = this._roughness !== null;\r\n            defines.SHEEN_ALBEDOSCALING = this._albedoScaling;\r\n            defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = this._useRoughnessFromMainTexture;\r\n            defines.SHEEN_TEXTURE_ROUGHNESS_IDENTICAL =\r\n                this._texture !== null && this._texture._texture === this._textureRoughness?._texture && this._texture.checkTransformsAreIdentical(this._textureRoughness);\r\n\r\n            if (defines._areTexturesDirty) {\r\n                if (scene.texturesEnabled) {\r\n                    if (this._texture && MaterialFlags.SheenTextureEnabled) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"SHEEN_TEXTURE\");\r\n                        defines.SHEEN_GAMMATEXTURE = this._texture.gammaSpace;\r\n                    } else {\r\n                        defines.SHEEN_TEXTURE = false;\r\n                    }\r\n\r\n                    if (this._textureRoughness && MaterialFlags.SheenTextureEnabled) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._textureRoughness, defines, \"SHEEN_TEXTURE_ROUGHNESS\");\r\n                    } else {\r\n                        defines.SHEEN_TEXTURE_ROUGHNESS = false;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            defines.SHEEN = false;\r\n            defines.SHEEN_TEXTURE = false;\r\n            defines.SHEEN_TEXTURE_ROUGHNESS = false;\r\n            defines.SHEEN_LINKWITHALBEDO = false;\r\n            defines.SHEEN_ROUGHNESS = false;\r\n            defines.SHEEN_ALBEDOSCALING = false;\r\n            defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\r\n            defines.SHEEN_TEXTURE_ROUGHNESS_IDENTICAL = false;\r\n            defines.SHEEN_GAMMATEXTURE = false;\r\n            defines.SHEEN_TEXTUREDIRECTUV = 0;\r\n            defines.SHEEN_TEXTURE_ROUGHNESSDIRECTUV = 0;\r\n        }\r\n    }\r\n\r\n    public bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, subMesh: SubMesh): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const defines = subMesh!.materialDefines as unknown as MaterialSheenDefines;\r\n\r\n        const isFrozen = this._material.isFrozen;\r\n\r\n        const identicalTextures = defines.SHEEN_TEXTURE_ROUGHNESS_IDENTICAL;\r\n\r\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\r\n            if (identicalTextures && MaterialFlags.SheenTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\"vSheenInfos\", this._texture!.coordinatesIndex, this._texture!.level, -1, -1);\r\n                MaterialHelper.BindTextureMatrix(this._texture!, uniformBuffer, \"sheen\");\r\n            } else if ((this._texture || this._textureRoughness) && MaterialFlags.SheenTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\r\n                    \"vSheenInfos\",\r\n                    this._texture?.coordinatesIndex ?? 0,\r\n                    this._texture?.level ?? 0,\r\n                    this._textureRoughness?.coordinatesIndex ?? 0,\r\n                    this._textureRoughness?.level ?? 0\r\n                );\r\n                if (this._texture) {\r\n                    MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"sheen\");\r\n                }\r\n                if (this._textureRoughness && !identicalTextures && !defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE) {\r\n                    MaterialHelper.BindTextureMatrix(this._textureRoughness, uniformBuffer, \"sheenRoughness\");\r\n                }\r\n            }\r\n\r\n            // Sheen\r\n            uniformBuffer.updateFloat4(\"vSheenColor\", this.color.r, this.color.g, this.color.b, this.intensity);\r\n\r\n            if (this._roughness !== null) {\r\n                uniformBuffer.updateFloat(\"vSheenRoughness\", this._roughness);\r\n            }\r\n        }\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this._texture && MaterialFlags.SheenTextureEnabled) {\r\n                uniformBuffer.setTexture(\"sheenSampler\", this._texture);\r\n            }\r\n\r\n            if (this._textureRoughness && !identicalTextures && !defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE && MaterialFlags.SheenTextureEnabled) {\r\n                uniformBuffer.setTexture(\"sheenRoughnessSampler\", this._textureRoughness);\r\n            }\r\n        }\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (this._texture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._textureRoughness === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getActiveTextures(activeTextures: BaseTexture[]): void {\r\n        if (this._texture) {\r\n            activeTextures.push(this._texture);\r\n        }\r\n\r\n        if (this._textureRoughness) {\r\n            activeTextures.push(this._textureRoughness);\r\n        }\r\n    }\r\n\r\n    public getAnimatables(animatables: IAnimatable[]): void {\r\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\r\n            animatables.push(this._texture);\r\n        }\r\n\r\n        if (this._textureRoughness && this._textureRoughness.animations && this._textureRoughness.animations.length > 0) {\r\n            animatables.push(this._textureRoughness);\r\n        }\r\n    }\r\n\r\n    public dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._texture?.dispose();\r\n            this._textureRoughness?.dispose();\r\n        }\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"PBRSheenConfiguration\";\r\n    }\r\n\r\n    public addFallbacks(defines: MaterialSheenDefines, fallbacks: EffectFallbacks, currentRank: number): number {\r\n        if (defines.SHEEN) {\r\n            fallbacks.addFallback(currentRank++, \"SHEEN\");\r\n        }\r\n        return currentRank;\r\n    }\r\n\r\n    public getSamplers(samplers: string[]): void {\r\n        samplers.push(\"sheenSampler\", \"sheenRoughnessSampler\");\r\n    }\r\n\r\n    public getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {\r\n            ubo: [\r\n                { name: \"vSheenColor\", size: 4, type: \"vec4\" },\r\n                { name: \"vSheenRoughness\", size: 1, type: \"float\" },\r\n                { name: \"vSheenInfos\", size: 4, type: \"vec4\" },\r\n                { name: \"sheenMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"sheenRoughnessMatrix\", size: 16, type: \"mat4\" },\r\n            ],\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}