{"ast":null,"code":"import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * block used to Generate a Simplex Perlin 3d Noise Pattern\n */\n//\n//  Wombat\n//  An efficient texture-free GLSL procedural noise library\n//  Source: https://github.com/BrianSharpe/Wombat\n//  Derived from: https://github.com/BrianSharpe/GPU-Noise-Lib\n//\n//  I'm not one for copyrights.  Use the code however you wish.\n//  All I ask is that credit be given back to the blog or myself when appropriate.\n//  And also to let me know if you come up with any changes, improvements, thoughts or interesting uses for this stuff. :)\n//  Thanks!\n//\n//  Brian Sharpe\n//  brisharpe CIRCLE_A yahoo DOT com\n//  http://briansharpe.wordpress.com\n//  https://github.com/BrianSharpe\n//\n//\n//  This is a modified version of Stefan Gustavson's and Ian McEwan's work at http://github.com/ashima/webgl-noise\n//  Modifications are...\n//  - faster random number generation\n//  - analytical final normalization\n//  - space scaled can have an approx feature size of 1.0\n//  - filter kernel changed to fix discontinuities at tetrahedron boundaries\n//\n//  Converted to BJS by Pryme8\n//\n//  Simplex Perlin Noise 3D\n//  Return value range of -1.0->1.0\n//\nexport class SimplexPerlin3DBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new SimplexPerlin3DBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Neutral);\n    this.registerInput(\"seed\", NodeMaterialBlockConnectionPointTypes.Vector3);\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"SimplexPerlin3DBlock\";\n  }\n  /**\n   * Gets the seed operand input component\n   */\n  get seed() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    if (!this.seed.isConnected) {\n      return;\n    }\n    if (!this._outputs[0].hasEndpoints) {\n      return;\n    }\n    let functionString = `const float SKEWFACTOR = 1.0/3.0;\\r\\n`;\n    functionString += `const float UNSKEWFACTOR = 1.0/6.0;\\r\\n`;\n    functionString += `const float SIMPLEX_CORNER_POS = 0.5;\\r\\n`;\n    functionString += `const float SIMPLEX_TETRAHADRON_HEIGHT = 0.70710678118654752440084436210485;\\r\\n`;\n    functionString += `float SimplexPerlin3D( vec3 P ){\\r\\n`;\n    functionString += `    P.x = P == vec3(0., 0., 0.) ? 0.00001 : P.x;\\r\\n`;\n    functionString += `    P *= SIMPLEX_TETRAHADRON_HEIGHT;\\r\\n`;\n    functionString += `    vec3 Pi = floor( P + dot( P, vec3( SKEWFACTOR) ) );`;\n    functionString += `    vec3 x0 = P - Pi + dot(Pi, vec3( UNSKEWFACTOR ) );\\r\\n`;\n    functionString += `    vec3 g = step(x0.yzx, x0.xyz);\\r\\n`;\n    functionString += `    vec3 l = 1.0 - g;\\r\\n`;\n    functionString += `    vec3 Pi_1 = min( g.xyz, l.zxy );\\r\\n`;\n    functionString += `    vec3 Pi_2 = max( g.xyz, l.zxy );\\r\\n`;\n    functionString += `    vec3 x1 = x0 - Pi_1 + UNSKEWFACTOR;\\r\\n`;\n    functionString += `    vec3 x2 = x0 - Pi_2 + SKEWFACTOR;\\r\\n`;\n    functionString += `    vec3 x3 = x0 - SIMPLEX_CORNER_POS;\\r\\n`;\n    functionString += `    vec4 v1234_x = vec4( x0.x, x1.x, x2.x, x3.x );\\r\\n`;\n    functionString += `    vec4 v1234_y = vec4( x0.y, x1.y, x2.y, x3.y );\\r\\n`;\n    functionString += `    vec4 v1234_z = vec4( x0.z, x1.z, x2.z, x3.z );\\r\\n`;\n    functionString += `    Pi.xyz = Pi.xyz - floor(Pi.xyz * ( 1.0 / 69.0 )) * 69.0;\\r\\n`;\n    functionString += `    vec3 Pi_inc1 = step( Pi, vec3( 69.0 - 1.5 ) ) * ( Pi + 1.0 );\\r\\n`;\n    functionString += `    vec4 Pt = vec4( Pi.xy, Pi_inc1.xy ) + vec2( 50.0, 161.0 ).xyxy;\\r\\n`;\n    functionString += `    Pt *= Pt;\\r\\n`;\n    functionString += `    vec4 V1xy_V2xy = mix( Pt.xyxy, Pt.zwzw, vec4( Pi_1.xy, Pi_2.xy ) );\\r\\n`;\n    functionString += `    Pt = vec4( Pt.x, V1xy_V2xy.xz, Pt.z ) * vec4( Pt.y, V1xy_V2xy.yw, Pt.w );\\r\\n`;\n    functionString += `    const vec3 SOMELARGEFLOATS = vec3( 635.298681, 682.357502, 668.926525 );\\r\\n`;\n    functionString += `    const vec3 ZINC = vec3( 48.500388, 65.294118, 63.934599 );\\r\\n`;\n    functionString += `    vec3 lowz_mods = vec3( 1.0 / ( SOMELARGEFLOATS.xyz + Pi.zzz * ZINC.xyz ) );\\r\\n`;\n    functionString += `    vec3 highz_mods = vec3( 1.0 / ( SOMELARGEFLOATS.xyz + Pi_inc1.zzz * ZINC.xyz ) );\\r\\n`;\n    functionString += `    Pi_1 = ( Pi_1.z < 0.5 ) ? lowz_mods : highz_mods;\\r\\n`;\n    functionString += `    Pi_2 = ( Pi_2.z < 0.5 ) ? lowz_mods : highz_mods;\\r\\n`;\n    functionString += `    vec4 hash_0 = fract( Pt * vec4( lowz_mods.x, Pi_1.x, Pi_2.x, highz_mods.x ) ) - 0.49999;\\r\\n`;\n    functionString += `    vec4 hash_1 = fract( Pt * vec4( lowz_mods.y, Pi_1.y, Pi_2.y, highz_mods.y ) ) - 0.49999;\\r\\n`;\n    functionString += `    vec4 hash_2 = fract( Pt * vec4( lowz_mods.z, Pi_1.z, Pi_2.z, highz_mods.z ) ) - 0.49999;\\r\\n`;\n    functionString += `    vec4 grad_results = inversesqrt( hash_0 * hash_0 + hash_1 * hash_1 + hash_2 * hash_2 ) * ( hash_0 * v1234_x + hash_1 * v1234_y + hash_2 * v1234_z );\\r\\n`;\n    functionString += `    const float FINAL_NORMALIZATION = 37.837227241611314102871574478976;\\r\\n`;\n    functionString += `    vec4 kernel_weights = v1234_x * v1234_x + v1234_y * v1234_y + v1234_z * v1234_z;\\r\\n`;\n    functionString += `    kernel_weights = max(0.5 - kernel_weights, 0.0);\\r\\n`;\n    functionString += `    kernel_weights = kernel_weights*kernel_weights*kernel_weights;\\r\\n`;\n    functionString += `    return dot( kernel_weights, grad_results ) * FINAL_NORMALIZATION;\\r\\n`;\n    functionString += `}\\r\\n`;\n    state._emitFunction(\"SimplexPerlin3D\", functionString, \"// SimplexPerlin3D\");\n    state.compilationString += this._declareOutput(this._outputs[0], state) + ` = SimplexPerlin3D(${this.seed.associatedVariableName});\\r\\n`;\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.SimplexPerlin3DBlock\", SimplexPerlin3DBlock);","map":{"version":3,"mappings":"AAAA,SAASA,iBAAiB,QAAQ,yBAAuB;AACzD,SAASC,qCAAqC,QAAQ,mDAAiD;AAGvG,SAASC,wBAAwB,QAAQ,sCAAoC;AAC7E,SAASC,aAAa,QAAQ,4BAA0B;AACxD;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM,MAAOC,oBAAqB,SAAQJ,iBAAiB;EACvD;;;;EAIAK,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,EAAEJ,wBAAwB,CAACK,OAAO,CAAC;IAC7C,IAAI,CAACC,aAAa,CAAC,MAAM,EAAEP,qCAAqC,CAACQ,OAAO,CAAC;IACzE,IAAI,CAACC,cAAc,CAAC,QAAQ,EAAET,qCAAqC,CAACU,KAAK,CAAC;EAC9E;EAEA;;;;EAIOC,YAAY;IACf,OAAO,sBAAsB;EACjC;EAEA;;;EAGA,IAAWC,IAAI;IACX,OAAO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWC,MAAM;IACb,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEUC,WAAW,CAACC,KAA6B;IAC/C,KAAK,CAACD,WAAW,CAACC,KAAK,CAAC;IAExB,IAAI,CAAC,IAAI,CAACL,IAAI,CAACM,WAAW,EAAE;MACxB;;IAGJ,IAAI,CAAC,IAAI,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACI,YAAY,EAAE;MAChC;;IAGJ,IAAIC,cAAc,GAAG,uCAAuC;IAC5DA,cAAc,IAAI,yCAAyC;IAC3DA,cAAc,IAAI,2CAA2C;IAC7DA,cAAc,IAAI,kFAAkF;IACpGA,cAAc,IAAI,sCAAsC;IACxDA,cAAc,IAAI,sDAAsD;IACxEA,cAAc,IAAI,0CAA0C;IAC5DA,cAAc,IAAI,yDAAyD;IAC3EA,cAAc,IAAI,4DAA4D;IAC9EA,cAAc,IAAI,wCAAwC;IAC1DA,cAAc,IAAI,2BAA2B;IAC7CA,cAAc,IAAI,0CAA0C;IAC5DA,cAAc,IAAI,0CAA0C;IAC5DA,cAAc,IAAI,6CAA6C;IAC/DA,cAAc,IAAI,2CAA2C;IAC7DA,cAAc,IAAI,4CAA4C;IAC9DA,cAAc,IAAI,wDAAwD;IAC1EA,cAAc,IAAI,wDAAwD;IAC1EA,cAAc,IAAI,wDAAwD;IAC1EA,cAAc,IAAI,kEAAkE;IACpFA,cAAc,IAAI,uEAAuE;IACzFA,cAAc,IAAI,yEAAyE;IAC3FA,cAAc,IAAI,mBAAmB;IACrCA,cAAc,IAAI,6EAA6E;IAC/FA,cAAc,IAAI,mFAAmF;IACrGA,cAAc,IAAI,kFAAkF;IACpGA,cAAc,IAAI,oEAAoE;IACtFA,cAAc,IAAI,qFAAqF;IACvGA,cAAc,IAAI,2FAA2F;IAC7GA,cAAc,IAAI,2DAA2D;IAC7EA,cAAc,IAAI,2DAA2D;IAC7EA,cAAc,IAAI,kGAAkG;IACpHA,cAAc,IAAI,kGAAkG;IACpHA,cAAc,IAAI,kGAAkG;IACpHA,cAAc,IAAI,8JAA8J;IAChLA,cAAc,IAAI,8EAA8E;IAChGA,cAAc,IAAI,0FAA0F;IAC5GA,cAAc,IAAI,0DAA0D;IAC5EA,cAAc,IAAI,wEAAwE;IAC1FA,cAAc,IAAI,2EAA2E;IAC7FA,cAAc,IAAI,OAAO;IAEzBH,KAAK,CAACI,aAAa,CAAC,iBAAiB,EAAED,cAAc,EAAE,oBAAoB,CAAC;IAC5EH,KAAK,CAACK,iBAAiB,IAAI,IAAI,CAACC,cAAc,CAAC,IAAI,CAACR,QAAQ,CAAC,CAAC,CAAC,EAAEE,KAAK,CAAC,GAAG,sBAAsB,IAAI,CAACL,IAAI,CAACY,sBAAsB,QAAQ;IAExI,OAAO,IAAI;EACf;;AAGJtB,aAAa,CAAC,8BAA8B,EAAEC,oBAAoB,CAAC","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","SimplexPerlin3DBlock","constructor","name","Neutral","registerInput","Vector3","registerOutput","Float","getClassName","seed","_inputs","output","_outputs","_buildBlock","state","isConnected","hasEndpoints","functionString","_emitFunction","compilationString","_declareOutput","associatedVariableName"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Node/Blocks/simplexPerlin3DBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\n/**\r\n * block used to Generate a Simplex Perlin 3d Noise Pattern\r\n */\r\n//\r\n//  Wombat\r\n//  An efficient texture-free GLSL procedural noise library\r\n//  Source: https://github.com/BrianSharpe/Wombat\r\n//  Derived from: https://github.com/BrianSharpe/GPU-Noise-Lib\r\n//\r\n//  I'm not one for copyrights.  Use the code however you wish.\r\n//  All I ask is that credit be given back to the blog or myself when appropriate.\r\n//  And also to let me know if you come up with any changes, improvements, thoughts or interesting uses for this stuff. :)\r\n//  Thanks!\r\n//\r\n//  Brian Sharpe\r\n//  brisharpe CIRCLE_A yahoo DOT com\r\n//  http://briansharpe.wordpress.com\r\n//  https://github.com/BrianSharpe\r\n//\r\n//\r\n//  This is a modified version of Stefan Gustavson's and Ian McEwan's work at http://github.com/ashima/webgl-noise\r\n//  Modifications are...\r\n//  - faster random number generation\r\n//  - analytical final normalization\r\n//  - space scaled can have an approx feature size of 1.0\r\n//  - filter kernel changed to fix discontinuities at tetrahedron boundaries\r\n//\r\n//  Converted to BJS by Pryme8\r\n//\r\n//  Simplex Perlin Noise 3D\r\n//  Return value range of -1.0->1.0\r\n//\r\nexport class SimplexPerlin3DBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new SimplexPerlin3DBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n        this.registerInput(\"seed\", NodeMaterialBlockConnectionPointTypes.Vector3);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"SimplexPerlin3DBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the seed operand input component\r\n     */\r\n    public get seed(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (!this.seed.isConnected) {\r\n            return;\r\n        }\r\n\r\n        if (!this._outputs[0].hasEndpoints) {\r\n            return;\r\n        }\r\n\r\n        let functionString = `const float SKEWFACTOR = 1.0/3.0;\\r\\n`;\r\n        functionString += `const float UNSKEWFACTOR = 1.0/6.0;\\r\\n`;\r\n        functionString += `const float SIMPLEX_CORNER_POS = 0.5;\\r\\n`;\r\n        functionString += `const float SIMPLEX_TETRAHADRON_HEIGHT = 0.70710678118654752440084436210485;\\r\\n`;\r\n        functionString += `float SimplexPerlin3D( vec3 P ){\\r\\n`;\r\n        functionString += `    P.x = P == vec3(0., 0., 0.) ? 0.00001 : P.x;\\r\\n`;\r\n        functionString += `    P *= SIMPLEX_TETRAHADRON_HEIGHT;\\r\\n`;\r\n        functionString += `    vec3 Pi = floor( P + dot( P, vec3( SKEWFACTOR) ) );`;\r\n        functionString += `    vec3 x0 = P - Pi + dot(Pi, vec3( UNSKEWFACTOR ) );\\r\\n`;\r\n        functionString += `    vec3 g = step(x0.yzx, x0.xyz);\\r\\n`;\r\n        functionString += `    vec3 l = 1.0 - g;\\r\\n`;\r\n        functionString += `    vec3 Pi_1 = min( g.xyz, l.zxy );\\r\\n`;\r\n        functionString += `    vec3 Pi_2 = max( g.xyz, l.zxy );\\r\\n`;\r\n        functionString += `    vec3 x1 = x0 - Pi_1 + UNSKEWFACTOR;\\r\\n`;\r\n        functionString += `    vec3 x2 = x0 - Pi_2 + SKEWFACTOR;\\r\\n`;\r\n        functionString += `    vec3 x3 = x0 - SIMPLEX_CORNER_POS;\\r\\n`;\r\n        functionString += `    vec4 v1234_x = vec4( x0.x, x1.x, x2.x, x3.x );\\r\\n`;\r\n        functionString += `    vec4 v1234_y = vec4( x0.y, x1.y, x2.y, x3.y );\\r\\n`;\r\n        functionString += `    vec4 v1234_z = vec4( x0.z, x1.z, x2.z, x3.z );\\r\\n`;\r\n        functionString += `    Pi.xyz = Pi.xyz - floor(Pi.xyz * ( 1.0 / 69.0 )) * 69.0;\\r\\n`;\r\n        functionString += `    vec3 Pi_inc1 = step( Pi, vec3( 69.0 - 1.5 ) ) * ( Pi + 1.0 );\\r\\n`;\r\n        functionString += `    vec4 Pt = vec4( Pi.xy, Pi_inc1.xy ) + vec2( 50.0, 161.0 ).xyxy;\\r\\n`;\r\n        functionString += `    Pt *= Pt;\\r\\n`;\r\n        functionString += `    vec4 V1xy_V2xy = mix( Pt.xyxy, Pt.zwzw, vec4( Pi_1.xy, Pi_2.xy ) );\\r\\n`;\r\n        functionString += `    Pt = vec4( Pt.x, V1xy_V2xy.xz, Pt.z ) * vec4( Pt.y, V1xy_V2xy.yw, Pt.w );\\r\\n`;\r\n        functionString += `    const vec3 SOMELARGEFLOATS = vec3( 635.298681, 682.357502, 668.926525 );\\r\\n`;\r\n        functionString += `    const vec3 ZINC = vec3( 48.500388, 65.294118, 63.934599 );\\r\\n`;\r\n        functionString += `    vec3 lowz_mods = vec3( 1.0 / ( SOMELARGEFLOATS.xyz + Pi.zzz * ZINC.xyz ) );\\r\\n`;\r\n        functionString += `    vec3 highz_mods = vec3( 1.0 / ( SOMELARGEFLOATS.xyz + Pi_inc1.zzz * ZINC.xyz ) );\\r\\n`;\r\n        functionString += `    Pi_1 = ( Pi_1.z < 0.5 ) ? lowz_mods : highz_mods;\\r\\n`;\r\n        functionString += `    Pi_2 = ( Pi_2.z < 0.5 ) ? lowz_mods : highz_mods;\\r\\n`;\r\n        functionString += `    vec4 hash_0 = fract( Pt * vec4( lowz_mods.x, Pi_1.x, Pi_2.x, highz_mods.x ) ) - 0.49999;\\r\\n`;\r\n        functionString += `    vec4 hash_1 = fract( Pt * vec4( lowz_mods.y, Pi_1.y, Pi_2.y, highz_mods.y ) ) - 0.49999;\\r\\n`;\r\n        functionString += `    vec4 hash_2 = fract( Pt * vec4( lowz_mods.z, Pi_1.z, Pi_2.z, highz_mods.z ) ) - 0.49999;\\r\\n`;\r\n        functionString += `    vec4 grad_results = inversesqrt( hash_0 * hash_0 + hash_1 * hash_1 + hash_2 * hash_2 ) * ( hash_0 * v1234_x + hash_1 * v1234_y + hash_2 * v1234_z );\\r\\n`;\r\n        functionString += `    const float FINAL_NORMALIZATION = 37.837227241611314102871574478976;\\r\\n`;\r\n        functionString += `    vec4 kernel_weights = v1234_x * v1234_x + v1234_y * v1234_y + v1234_z * v1234_z;\\r\\n`;\r\n        functionString += `    kernel_weights = max(0.5 - kernel_weights, 0.0);\\r\\n`;\r\n        functionString += `    kernel_weights = kernel_weights*kernel_weights*kernel_weights;\\r\\n`;\r\n        functionString += `    return dot( kernel_weights, grad_results ) * FINAL_NORMALIZATION;\\r\\n`;\r\n        functionString += `}\\r\\n`;\r\n\r\n        state._emitFunction(\"SimplexPerlin3D\", functionString, \"// SimplexPerlin3D\");\r\n        state.compilationString += this._declareOutput(this._outputs[0], state) + ` = SimplexPerlin3D(${this.seed.associatedVariableName});\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.SimplexPerlin3DBlock\", SimplexPerlin3DBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}