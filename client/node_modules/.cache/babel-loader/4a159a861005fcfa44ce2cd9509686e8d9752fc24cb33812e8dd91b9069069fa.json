{"ast":null,"code":"import { Camera } from \"../../Cameras/camera.js\";\nimport { UniversalCamera } from \"../../Cameras/universalCamera.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setStereoscopicRigMode } from \"../RigModes/stereoscopicRigMode.js\";\nNode.AddNodeConstructor(\"StereoscopicFreeCamera\", (name, scene, options) => {\n  return () => new StereoscopicUniversalCamera(name, Vector3.Zero(), options.interaxial_distance, options.isStereoscopicSideBySide, scene);\n});\n/**\n * Camera used to simulate stereoscopic rendering (based on UniversalCamera)\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\n */\nexport class StereoscopicUniversalCamera extends UniversalCamera {\n  /**\n   * Creates a new StereoscopicUniversalCamera\n   * @param name defines camera name\n   * @param position defines initial position\n   * @param interaxialDistance defines distance between each color axis\n   * @param isStereoscopicSideBySide defines is stereoscopic is done side by side or over under\n   * @param scene defines the hosting scene\n   */\n  constructor(name, position, interaxialDistance, isStereoscopicSideBySide, scene) {\n    super(name, position, scene);\n    this._setRigMode = setStereoscopicRigMode.bind(null, this);\n    this.interaxialDistance = interaxialDistance;\n    this.isStereoscopicSideBySide = isStereoscopicSideBySide;\n    this.setCameraRigMode(isStereoscopicSideBySide ? Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL : Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER, {\n      interaxialDistance: interaxialDistance\n    });\n  }\n  /**\n   * Gets camera class name\n   * @returns StereoscopicUniversalCamera\n   */\n  getClassName() {\n    return \"StereoscopicUniversalCamera\";\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAQ,yBAAuB;AAC9C,SAASC,eAAe,QAAQ,kCAAgC;AAEhE,SAASC,OAAO,QAAQ,4BAA0B;AAClD,SAASC,IAAI,QAAQ,eAAa;AAClC,SAASC,sBAAsB,QAAQ,oCAAkC;AAEzED,IAAI,CAACE,kBAAkB,CAAC,wBAAwB,EAAE,CAACC,IAAI,EAAEC,KAAK,EAAEC,OAAO,KAAI;EACvE,OAAO,MAAM,IAAIC,2BAA2B,CAACH,IAAI,EAAEJ,OAAO,CAACQ,IAAI,EAAE,EAAEF,OAAO,CAACG,mBAAmB,EAAEH,OAAO,CAACI,wBAAwB,EAAEL,KAAK,CAAC;AAC5I,CAAC,CAAC;AACF;;;;AAIA,OAAM,MAAOE,2BAA4B,SAAQR,eAAe;EAC5D;;;;;;;;EAQAY,YAAYP,IAAY,EAAEQ,QAAiB,EAAEC,kBAA0B,EAAEH,wBAAiC,EAAEL,KAAa;IACrH,KAAK,CAACD,IAAI,EAAEQ,QAAQ,EAAEP,KAAK,CAAC;IAgBtB,gBAAW,GAAGH,sBAAsB,CAACY,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;IAf3D,IAAI,CAACD,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACH,wBAAwB,GAAGA,wBAAwB;IACxD,IAAI,CAACK,gBAAgB,CAACL,wBAAwB,GAAGZ,MAAM,CAACkB,yCAAyC,GAAGlB,MAAM,CAACmB,+BAA+B,EAAE;MACxIJ,kBAAkB,EAAEA;KACvB,CAAC;EACN;EAEA;;;;EAIOK,YAAY;IACf,OAAO,6BAA6B;EACxC","names":["Camera","UniversalCamera","Vector3","Node","setStereoscopicRigMode","AddNodeConstructor","name","scene","options","StereoscopicUniversalCamera","Zero","interaxial_distance","isStereoscopicSideBySide","constructor","position","interaxialDistance","bind","setCameraRigMode","RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL","RIG_MODE_STEREOSCOPIC_OVERUNDER","getClassName"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/Stereoscopic/stereoscopicUniversalCamera.ts"],"sourcesContent":["import { Camera } from \"../../Cameras/camera\";\r\nimport { UniversalCamera } from \"../../Cameras/universalCamera\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Node } from \"../../node\";\r\nimport { setStereoscopicRigMode } from \"../RigModes/stereoscopicRigMode\";\r\n\r\nNode.AddNodeConstructor(\"StereoscopicFreeCamera\", (name, scene, options) => {\r\n    return () => new StereoscopicUniversalCamera(name, Vector3.Zero(), options.interaxial_distance, options.isStereoscopicSideBySide, scene);\r\n});\r\n/**\r\n * Camera used to simulate stereoscopic rendering (based on UniversalCamera)\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\r\n */\r\nexport class StereoscopicUniversalCamera extends UniversalCamera {\r\n    /**\r\n     * Creates a new StereoscopicUniversalCamera\r\n     * @param name defines camera name\r\n     * @param position defines initial position\r\n     * @param interaxialDistance defines distance between each color axis\r\n     * @param isStereoscopicSideBySide defines is stereoscopic is done side by side or over under\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, position: Vector3, interaxialDistance: number, isStereoscopicSideBySide: boolean, scene?: Scene) {\r\n        super(name, position, scene);\r\n        this.interaxialDistance = interaxialDistance;\r\n        this.isStereoscopicSideBySide = isStereoscopicSideBySide;\r\n        this.setCameraRigMode(isStereoscopicSideBySide ? Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL : Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER, {\r\n            interaxialDistance: interaxialDistance,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets camera class name\r\n     * @returns StereoscopicUniversalCamera\r\n     */\r\n    public getClassName(): string {\r\n        return \"StereoscopicUniversalCamera\";\r\n    }\r\n\r\n    protected _setRigMode = setStereoscopicRigMode.bind(null, this);\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}