{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { SubSurfaceScatteringPostProcess } from \"../PostProcesses/subSurfaceScatteringPostProcess.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\n\n/**\n * Contains all parameters needed for the prepass to perform\n * screen space subsurface scattering\n */\nexport class SubSurfaceConfiguration {\n  /**\n   * Builds a subsurface configuration object\n   * @param scene The scene\n   */\n  constructor(scene) {\n    this._ssDiffusionS = [];\n    this._ssFilterRadii = [];\n    this._ssDiffusionD = [];\n    /**\n     * Is subsurface enabled\n     */\n    this.enabled = false;\n    /**\n     * Does the output of this prepass need to go through imageprocessing\n     */\n    this.needsImageProcessing = true;\n    /**\n     * Name of the configuration\n     */\n    this.name = SceneComponentConstants.NAME_SUBSURFACE;\n    /**\n     * Diffusion profile colors for subsurface scattering\n     * You can add one diffusion color using `addDiffusionProfile` on `scene.prePassRenderer`\n     * See ...\n     * Note that you can only store up to 5 of them\n     */\n    this.ssDiffusionProfileColors = [];\n    /**\n     * Defines the ratio real world => scene units.\n     * Used for subsurface scattering\n     */\n    this.metersPerUnit = 1;\n    /**\n     * Textures that should be present in the MRT for this effect to work\n     */\n    this.texturesRequired = [5, 7, 4, 0];\n    // Adding default diffusion profile\n    this.addDiffusionProfile(new Color3(1, 1, 1));\n    this._scene = scene;\n    SubSurfaceConfiguration._SceneComponentInitialization(this._scene);\n  }\n  /**\n   * Diffusion profile color for subsurface scattering\n   */\n  get ssDiffusionS() {\n    return this._ssDiffusionS;\n  }\n  /**\n   * Diffusion profile max color channel value for subsurface scattering\n   */\n  get ssDiffusionD() {\n    return this._ssDiffusionD;\n  }\n  /**\n   * Diffusion profile filter radius for subsurface scattering\n   */\n  get ssFilterRadii() {\n    return this._ssFilterRadii;\n  }\n  /**\n   * Adds a new diffusion profile.\n   * Useful for more realistic subsurface scattering on diverse materials.\n   * @param color The color of the diffusion profile. Should be the average color of the material.\n   * @returns The index of the diffusion profile for the material subsurface configuration\n   */\n  addDiffusionProfile(color) {\n    if (this.ssDiffusionD.length >= 5) {\n      // We only suppport 5 diffusion profiles\n      Logger.Error(\"You already reached the maximum number of diffusion profiles.\");\n      return 0; // default profile\n    }\n    // Do not add doubles\n    for (let i = 0; i < this._ssDiffusionS.length / 3; i++) {\n      if (this._ssDiffusionS[i * 3] === color.r && this._ssDiffusionS[i * 3 + 1] === color.g && this._ssDiffusionS[i * 3 + 2] === color.b) {\n        return i;\n      }\n    }\n    this._ssDiffusionS.push(color.r, color.b, color.g);\n    this._ssDiffusionD.push(Math.max(Math.max(color.r, color.b), color.g));\n    this._ssFilterRadii.push(this.getDiffusionProfileParameters(color));\n    this.ssDiffusionProfileColors.push(color);\n    return this._ssDiffusionD.length - 1;\n  }\n  /**\n   * Creates the sss post process\n   * @returns The created post process\n   */\n  createPostProcess() {\n    this.postProcess = new SubSurfaceScatteringPostProcess(\"subSurfaceScattering\", this._scene, 1, null, undefined, this._scene.getEngine());\n    this.postProcess.autoClear = false;\n    return this.postProcess;\n  }\n  /**\n   * Deletes all diffusion profiles.\n   * Note that in order to render subsurface scattering, you should have at least 1 diffusion profile.\n   */\n  clearAllDiffusionProfiles() {\n    this._ssDiffusionD = [];\n    this._ssDiffusionS = [];\n    this._ssFilterRadii = [];\n    this.ssDiffusionProfileColors = [];\n  }\n  /**\n   * Disposes this object\n   */\n  dispose() {\n    this.clearAllDiffusionProfiles();\n    if (this.postProcess) {\n      this.postProcess.dispose();\n    }\n  }\n  /**\n   * @internal\n   * https://zero-radiance.github.io/post/sampling-diffusion/\n   *\n   * Importance sample the normalized diffuse reflectance profile for the computed value of 's'.\n   * ------------------------------------------------------------------------------------\n   * R[r, phi, s]   = s * (Exp[-r * s] + Exp[-r * s / 3]) / (8 * Pi * r)\n   * PDF[r, phi, s] = r * R[r, phi, s]\n   * CDF[r, s]      = 1 - 1/4 * Exp[-r * s] - 3/4 * Exp[-r * s / 3]\n   * ------------------------------------------------------------------------------------\n   * We importance sample the color channel with the widest scattering distance.\n   */\n  getDiffusionProfileParameters(color) {\n    const cdf = 0.997;\n    const maxScatteringDistance = Math.max(color.r, color.g, color.b);\n    return this._sampleBurleyDiffusionProfile(cdf, maxScatteringDistance);\n  }\n  /**\n   * Performs sampling of a Normalized Burley diffusion profile in polar coordinates.\n   * 'u' is the random number (the value of the CDF): [0, 1).\n   * rcp(s) = 1 / ShapeParam = ScatteringDistance.\n   * Returns the sampled radial distance, s.t. (u = 0 -> r = 0) and (u = 1 -> r = Inf).\n   * @param u\n   * @param rcpS\n   */\n  _sampleBurleyDiffusionProfile(u, rcpS) {\n    u = 1 - u; // Convert CDF to CCDF\n    const g = 1 + 4 * u * (2 * u + Math.sqrt(1 + 4 * u * u));\n    const n = Math.pow(g, -1.0 / 3.0); // g^(-1/3)\n    const p = g * n * n; // g^(+1/3)\n    const c = 1 + p + n; // 1 + g^(+1/3) + g^(-1/3)\n    const x = 3 * Math.log(c / (4 * u));\n    return x * rcpS;\n  }\n}\n/**\n * @internal\n */\nSubSurfaceConfiguration._SceneComponentInitialization = _ => {\n  throw _WarnImport(\"SubSurfaceSceneComponent\");\n};","map":{"version":3,"mappings":"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","names":["Logger","Color3","SubSurfaceScatteringPostProcess","SceneComponentConstants","_WarnImport","SubSurfaceConfiguration","constructor","scene","NAME_SUBSURFACE","addDiffusionProfile","_scene","_SceneComponentInitialization","ssDiffusionS","_ssDiffusionS","ssDiffusionD","_ssDiffusionD","ssFilterRadii","_ssFilterRadii","color","length","Error","i","r","g","b","push","Math","max","getDiffusionProfileParameters","ssDiffusionProfileColors","createPostProcess","postProcess","undefined","getEngine","autoClear","clearAllDiffusionProfiles","dispose","cdf","maxScatteringDistance","_sampleBurleyDiffusionProfile","u","rcpS","sqrt","n","pow","p","c","x","log","_"],"sourceRoot":"","sources":["../../../../lts/core/generated/Rendering/subSurfaceConfiguration.ts"],"sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { SubSurfaceScatteringPostProcess } from \"../PostProcesses/subSurfaceScatteringPostProcess\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport type { PrePassEffectConfiguration } from \"./prePassEffectConfiguration\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * Contains all parameters needed for the prepass to perform\r\n * screen space subsurface scattering\r\n */\r\nexport class SubSurfaceConfiguration implements PrePassEffectConfiguration {\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _WarnImport(\"SubSurfaceSceneComponent\");\r\n    };\r\n\r\n    private _ssDiffusionS: number[] = [];\r\n    private _ssFilterRadii: number[] = [];\r\n    private _ssDiffusionD: number[] = [];\r\n\r\n    /**\r\n     * Post process to attach for screen space subsurface scattering\r\n     */\r\n    public postProcess: SubSurfaceScatteringPostProcess;\r\n\r\n    /**\r\n     * Diffusion profile color for subsurface scattering\r\n     */\r\n    public get ssDiffusionS() {\r\n        return this._ssDiffusionS;\r\n    }\r\n\r\n    /**\r\n     * Diffusion profile max color channel value for subsurface scattering\r\n     */\r\n    public get ssDiffusionD() {\r\n        return this._ssDiffusionD;\r\n    }\r\n\r\n    /**\r\n     * Diffusion profile filter radius for subsurface scattering\r\n     */\r\n    public get ssFilterRadii() {\r\n        return this._ssFilterRadii;\r\n    }\r\n\r\n    /**\r\n     * Is subsurface enabled\r\n     */\r\n    public enabled = false;\r\n\r\n    /**\r\n     * Does the output of this prepass need to go through imageprocessing\r\n     */\r\n    public needsImageProcessing = true;\r\n\r\n    /**\r\n     * Name of the configuration\r\n     */\r\n    public name = SceneComponentConstants.NAME_SUBSURFACE;\r\n\r\n    /**\r\n     * Diffusion profile colors for subsurface scattering\r\n     * You can add one diffusion color using `addDiffusionProfile` on `scene.prePassRenderer`\r\n     * See ...\r\n     * Note that you can only store up to 5 of them\r\n     */\r\n    public ssDiffusionProfileColors: Color3[] = [];\r\n\r\n    /**\r\n     * Defines the ratio real world => scene units.\r\n     * Used for subsurface scattering\r\n     */\r\n    public metersPerUnit: number = 1;\r\n\r\n    /**\r\n     * Textures that should be present in the MRT for this effect to work\r\n     */\r\n    public readonly texturesRequired: number[] = [\r\n        Constants.PREPASS_DEPTH_TEXTURE_TYPE,\r\n        Constants.PREPASS_ALBEDO_SQRT_TEXTURE_TYPE,\r\n        Constants.PREPASS_COLOR_TEXTURE_TYPE,\r\n        Constants.PREPASS_IRRADIANCE_TEXTURE_TYPE,\r\n    ];\r\n\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Builds a subsurface configuration object\r\n     * @param scene The scene\r\n     */\r\n    constructor(scene: Scene) {\r\n        // Adding default diffusion profile\r\n        this.addDiffusionProfile(new Color3(1, 1, 1));\r\n        this._scene = scene;\r\n\r\n        SubSurfaceConfiguration._SceneComponentInitialization(this._scene);\r\n    }\r\n\r\n    /**\r\n     * Adds a new diffusion profile.\r\n     * Useful for more realistic subsurface scattering on diverse materials.\r\n     * @param color The color of the diffusion profile. Should be the average color of the material.\r\n     * @returns The index of the diffusion profile for the material subsurface configuration\r\n     */\r\n    public addDiffusionProfile(color: Color3): number {\r\n        if (this.ssDiffusionD.length >= 5) {\r\n            // We only suppport 5 diffusion profiles\r\n            Logger.Error(\"You already reached the maximum number of diffusion profiles.\");\r\n            return 0; // default profile\r\n        }\r\n\r\n        // Do not add doubles\r\n        for (let i = 0; i < this._ssDiffusionS.length / 3; i++) {\r\n            if (this._ssDiffusionS[i * 3] === color.r && this._ssDiffusionS[i * 3 + 1] === color.g && this._ssDiffusionS[i * 3 + 2] === color.b) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        this._ssDiffusionS.push(color.r, color.b, color.g);\r\n        this._ssDiffusionD.push(Math.max(Math.max(color.r, color.b), color.g));\r\n        this._ssFilterRadii.push(this.getDiffusionProfileParameters(color));\r\n        this.ssDiffusionProfileColors.push(color);\r\n\r\n        return this._ssDiffusionD.length - 1;\r\n    }\r\n\r\n    /**\r\n     * Creates the sss post process\r\n     * @returns The created post process\r\n     */\r\n    public createPostProcess(): SubSurfaceScatteringPostProcess {\r\n        this.postProcess = new SubSurfaceScatteringPostProcess(\"subSurfaceScattering\", this._scene, 1, null, undefined, this._scene.getEngine());\r\n        this.postProcess.autoClear = false;\r\n\r\n        return this.postProcess;\r\n    }\r\n\r\n    /**\r\n     * Deletes all diffusion profiles.\r\n     * Note that in order to render subsurface scattering, you should have at least 1 diffusion profile.\r\n     */\r\n    public clearAllDiffusionProfiles() {\r\n        this._ssDiffusionD = [];\r\n        this._ssDiffusionS = [];\r\n        this._ssFilterRadii = [];\r\n        this.ssDiffusionProfileColors = [];\r\n    }\r\n\r\n    /**\r\n     * Disposes this object\r\n     */\r\n    public dispose() {\r\n        this.clearAllDiffusionProfiles();\r\n        if (this.postProcess) {\r\n            this.postProcess.dispose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * https://zero-radiance.github.io/post/sampling-diffusion/\r\n     *\r\n     * Importance sample the normalized diffuse reflectance profile for the computed value of 's'.\r\n     * ------------------------------------------------------------------------------------\r\n     * R[r, phi, s]   = s * (Exp[-r * s] + Exp[-r * s / 3]) / (8 * Pi * r)\r\n     * PDF[r, phi, s] = r * R[r, phi, s]\r\n     * CDF[r, s]      = 1 - 1/4 * Exp[-r * s] - 3/4 * Exp[-r * s / 3]\r\n     * ------------------------------------------------------------------------------------\r\n     * We importance sample the color channel with the widest scattering distance.\r\n     */\r\n    public getDiffusionProfileParameters(color: Color3) {\r\n        const cdf = 0.997;\r\n        const maxScatteringDistance = Math.max(color.r, color.g, color.b);\r\n\r\n        return this._sampleBurleyDiffusionProfile(cdf, maxScatteringDistance);\r\n    }\r\n\r\n    /**\r\n     * Performs sampling of a Normalized Burley diffusion profile in polar coordinates.\r\n     * 'u' is the random number (the value of the CDF): [0, 1).\r\n     * rcp(s) = 1 / ShapeParam = ScatteringDistance.\r\n     * Returns the sampled radial distance, s.t. (u = 0 -> r = 0) and (u = 1 -> r = Inf).\r\n     * @param u\r\n     * @param rcpS\r\n     */\r\n    private _sampleBurleyDiffusionProfile(u: number, rcpS: number) {\r\n        u = 1 - u; // Convert CDF to CCDF\r\n\r\n        const g = 1 + 4 * u * (2 * u + Math.sqrt(1 + 4 * u * u));\r\n        const n = Math.pow(g, -1.0 / 3.0); // g^(-1/3)\r\n        const p = g * n * n; // g^(+1/3)\r\n        const c = 1 + p + n; // 1 + g^(+1/3) + g^(-1/3)\r\n        const x = 3 * Math.log(c / (4 * u));\r\n\r\n        return x * rcpS;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}