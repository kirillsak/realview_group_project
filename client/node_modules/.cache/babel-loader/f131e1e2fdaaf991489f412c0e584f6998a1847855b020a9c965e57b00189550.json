{"ast":null,"code":"import \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { WebXRGenericTriggerMotionController } from \"./webXRGenericMotionController.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { WebXRProfiledMotionController } from \"./webXRProfiledMotionController.js\";\n/**\n * The MotionController Manager manages all registered motion controllers and loads the right one when needed.\n *\n * When this repository is complete: https://github.com/immersive-web/webxr-input-profiles/tree/master/packages/assets\n * it should be replaced with auto-loaded controllers.\n *\n * When using a model try to stay as generic as possible. Eventually there will be no need in any of the controller classes\n */\nconst controllerCache = [];\n/**\n * Motion controller manager is managing the different webxr profiles and makes sure the right\n * controller is being loaded.\n */\nexport class WebXRMotionControllerManager {\n  /**\n   * Clear the cache used for profile loading and reload when requested again\n   */\n  static ClearProfilesCache() {\n    this._ProfilesList = null;\n    this._ProfileLoadingPromises = {};\n  }\n  /**\n   * Register the default fallbacks.\n   * This function is called automatically when this file is imported.\n   */\n  static DefaultFallbacks() {\n    this.RegisterFallbacksForProfileId(\"google-daydream\", [\"generic-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"htc-vive-focus\", [\"generic-trigger-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"htc-vive\", [\"generic-trigger-squeeze-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"magicleap-one\", [\"generic-trigger-squeeze-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"windows-mixed-reality\", [\"generic-trigger-squeeze-touchpad-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"microsoft-mixed-reality\", [\"windows-mixed-reality\", \"generic-trigger-squeeze-touchpad-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"oculus-go\", [\"generic-trigger-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"oculus-touch-v2\", [\"oculus-touch\", \"generic-trigger-squeeze-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"oculus-touch\", [\"generic-trigger-squeeze-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"samsung-gearvr\", [\"windows-mixed-reality\", \"generic-trigger-squeeze-touchpad-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"samsung-odyssey\", [\"generic-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"valve-index\", [\"generic-trigger-squeeze-touchpad-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"generic-hand-select\", [\"generic-trigger\"]);\n  }\n  /**\n   * Find a fallback profile if the profile was not found. There are a few predefined generic profiles.\n   * @param profileId the profile to which a fallback needs to be found\n   * @returns an array with corresponding fallback profiles\n   */\n  static FindFallbackWithProfileId(profileId) {\n    const returnArray = this._Fallbacks[profileId] || [];\n    returnArray.unshift(profileId);\n    return returnArray;\n  }\n  /**\n   * When acquiring a new xrInput object (usually by the WebXRInput class), match it with the correct profile.\n   * The order of search:\n   *\n   * 1) Iterate the profiles array of the xr input and try finding a corresponding motion controller\n   * 2) (If not found) search in the gamepad id and try using it (legacy versions only)\n   * 3) search for registered fallbacks (should be redundant, nonetheless it makes sense to check)\n   * 4) return the generic trigger controller if none were found\n   *\n   * @param xrInput the xrInput to which a new controller is initialized\n   * @param scene the scene to which the model will be added\n   * @param forceProfile force a certain profile for this controller\n   * @returns A promise that fulfils with the motion controller class for this profile id or the generic standard class if none was found\n   */\n  static GetMotionControllerWithXRInput(xrInput, scene, forceProfile) {\n    const profileArray = [];\n    if (forceProfile) {\n      profileArray.push(forceProfile);\n    }\n    profileArray.push(...(xrInput.profiles || []));\n    // emulator support\n    if (profileArray.length && !profileArray[0]) {\n      // remove the first \"undefined\" that the emulator is adding\n      profileArray.pop();\n    }\n    // legacy support - try using the gamepad id\n    if (xrInput.gamepad && xrInput.gamepad.id) {\n      switch (xrInput.gamepad.id) {\n        case xrInput.gamepad.id.match(/oculus touch/gi) ? xrInput.gamepad.id : undefined:\n          // oculus in gamepad id\n          profileArray.push(\"oculus-touch-v2\");\n          break;\n      }\n    }\n    // make sure microsoft/windows mixed reality works correctly\n    const windowsMRIdx = profileArray.indexOf(\"windows-mixed-reality\");\n    if (windowsMRIdx !== -1) {\n      profileArray.splice(windowsMRIdx, 0, \"microsoft-mixed-reality\");\n    }\n    if (!profileArray.length) {\n      profileArray.push(\"generic-trigger\");\n    }\n    if (this.UseOnlineRepository) {\n      const firstFunction = this.PrioritizeOnlineRepository ? this._LoadProfileFromRepository : this._LoadProfilesFromAvailableControllers;\n      const secondFunction = this.PrioritizeOnlineRepository ? this._LoadProfilesFromAvailableControllers : this._LoadProfileFromRepository;\n      return firstFunction.call(this, profileArray, xrInput, scene).catch(() => {\n        return secondFunction.call(this, profileArray, xrInput, scene);\n      });\n    } else {\n      // use only available functions\n      return this._LoadProfilesFromAvailableControllers(profileArray, xrInput, scene);\n    }\n  }\n  /**\n   * Register a new controller based on its profile. This function will be called by the controller classes themselves.\n   *\n   * If you are missing a profile, make sure it is imported in your source, otherwise it will not register.\n   *\n   * @param type the profile type to register\n   * @param constructFunction the function to be called when loading this profile\n   */\n  static RegisterController(type, constructFunction) {\n    this._AvailableControllers[type] = constructFunction;\n  }\n  /**\n   * Register a fallback to a specific profile.\n   * @param profileId the profileId that will receive the fallbacks\n   * @param fallbacks A list of fallback profiles\n   */\n  static RegisterFallbacksForProfileId(profileId, fallbacks) {\n    if (this._Fallbacks[profileId]) {\n      this._Fallbacks[profileId].push(...fallbacks);\n    } else {\n      this._Fallbacks[profileId] = fallbacks;\n    }\n  }\n  /**\n   * Will update the list of profiles available in the repository\n   * @returns a promise that resolves to a map of profiles available online\n   */\n  static UpdateProfilesList() {\n    this._ProfilesList = Tools.LoadFileAsync(this.BaseRepositoryUrl + \"/profiles/profilesList.json\", false).then(data => {\n      return JSON.parse(data.toString());\n    });\n    return this._ProfilesList;\n  }\n  /**\n   * Clear the controller's cache (usually happens at the end of a session)\n   */\n  static ClearControllerCache() {\n    controllerCache.forEach(cacheItem => {\n      cacheItem.meshes.forEach(mesh => {\n        mesh.dispose(false, true);\n      });\n    });\n    controllerCache.length = 0;\n  }\n  static _LoadProfileFromRepository(profileArray, xrInput, scene) {\n    return Promise.resolve().then(() => {\n      if (!this._ProfilesList) {\n        return this.UpdateProfilesList();\n      } else {\n        return this._ProfilesList;\n      }\n    }).then(profilesList => {\n      // load the right profile\n      for (let i = 0; i < profileArray.length; ++i) {\n        // defensive\n        if (!profileArray[i]) {\n          continue;\n        }\n        if (profilesList[profileArray[i]]) {\n          return profileArray[i];\n        }\n      }\n      throw new Error(`neither controller ${profileArray[0]} nor all fallbacks were found in the repository,`);\n    }).then(profileToLoad => {\n      // load the profile\n      if (!this._ProfileLoadingPromises[profileToLoad]) {\n        this._ProfileLoadingPromises[profileToLoad] = Tools.LoadFileAsync(`${this.BaseRepositoryUrl}/profiles/${profileToLoad}/profile.json`, false).then(data => JSON.parse(data));\n      }\n      return this._ProfileLoadingPromises[profileToLoad];\n    }).then(profile => {\n      return new WebXRProfiledMotionController(scene, xrInput, profile, this.BaseRepositoryUrl, this.DisableControllerCache ? undefined : controllerCache);\n    });\n  }\n  static _LoadProfilesFromAvailableControllers(profileArray, xrInput, scene) {\n    // check fallbacks\n    for (let i = 0; i < profileArray.length; ++i) {\n      // defensive\n      if (!profileArray[i]) {\n        continue;\n      }\n      const fallbacks = this.FindFallbackWithProfileId(profileArray[i]);\n      for (let j = 0; j < fallbacks.length; ++j) {\n        const constructionFunction = this._AvailableControllers[fallbacks[j]];\n        if (constructionFunction) {\n          return Promise.resolve(constructionFunction(xrInput, scene));\n        }\n      }\n    }\n    throw new Error(`no controller requested was found in the available controllers list`);\n  }\n}\nWebXRMotionControllerManager._AvailableControllers = {};\nWebXRMotionControllerManager._Fallbacks = {};\n// cache for loading\nWebXRMotionControllerManager._ProfileLoadingPromises = {};\n/**\n * The base URL of the online controller repository. Can be changed at any time.\n */\nWebXRMotionControllerManager.BaseRepositoryUrl = \"https://immersive-web.github.io/webxr-input-profiles/packages/viewer/dist\";\n/**\n * Which repository gets priority - local or online\n */\nWebXRMotionControllerManager.PrioritizeOnlineRepository = true;\n/**\n * Use the online repository, or use only locally-defined controllers\n */\nWebXRMotionControllerManager.UseOnlineRepository = true;\n/**\n * Disable the controller cache and load the models each time a new WebXRProfileMotionController is loaded.\n * Defaults to true.\n */\nWebXRMotionControllerManager.DisableControllerCache = true;\n// register the generic profile(s) here so we will at least have them\nWebXRMotionControllerManager.RegisterController(WebXRGenericTriggerMotionController.ProfileId, (xrInput, scene) => {\n  return new WebXRGenericTriggerMotionController(scene, xrInput.gamepad, xrInput.handedness);\n});\n// register fallbacks\nWebXRMotionControllerManager.DefaultFallbacks();","map":{"version":3,"mappings":"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","names":["WebXRGenericTriggerMotionController","Tools","WebXRProfiledMotionController","controllerCache","WebXRMotionControllerManager","ClearProfilesCache","_ProfilesList","_ProfileLoadingPromises","DefaultFallbacks","RegisterFallbacksForProfileId","FindFallbackWithProfileId","profileId","returnArray","_Fallbacks","unshift","GetMotionControllerWithXRInput","xrInput","scene","forceProfile","profileArray","push","profiles","length","pop","gamepad","id","match","undefined","windowsMRIdx","indexOf","splice","UseOnlineRepository","firstFunction","PrioritizeOnlineRepository","_LoadProfileFromRepository","_LoadProfilesFromAvailableControllers","secondFunction","call","catch","RegisterController","type","constructFunction","_AvailableControllers","fallbacks","UpdateProfilesList","LoadFileAsync","BaseRepositoryUrl","then","data","JSON","parse","toString","ClearControllerCache","forEach","cacheItem","meshes","mesh","dispose","Promise","resolve","profilesList","i","Error","profileToLoad","profile","DisableControllerCache","j","constructionFunction","ProfileId","handedness"],"sourceRoot":"","sources":["../../../../../lts/core/generated/XR/motionController/webXRMotionControllerManager.ts"],"sourcesContent":["import type { WebXRAbstractMotionController, IMotionControllerProfile } from \"./webXRAbstractMotionController\";\r\nimport { WebXRGenericTriggerMotionController } from \"./webXRGenericMotionController\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport { WebXRProfiledMotionController } from \"./webXRProfiledMotionController\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\n\r\n/**\r\n * A construction function type to create a new controller based on an xrInput object\r\n */\r\nexport type MotionControllerConstructor = (xrInput: XRInputSource, scene: Scene) => WebXRAbstractMotionController;\r\n\r\n/**\r\n * The MotionController Manager manages all registered motion controllers and loads the right one when needed.\r\n *\r\n * When this repository is complete: https://github.com/immersive-web/webxr-input-profiles/tree/master/packages/assets\r\n * it should be replaced with auto-loaded controllers.\r\n *\r\n * When using a model try to stay as generic as possible. Eventually there will be no need in any of the controller classes\r\n */\r\n\r\nconst controllerCache: Array<{\r\n    filename: string;\r\n    path: string;\r\n    meshes: AbstractMesh[];\r\n}> = [];\r\n\r\n/**\r\n * Motion controller manager is managing the different webxr profiles and makes sure the right\r\n * controller is being loaded.\r\n */\r\nexport class WebXRMotionControllerManager {\r\n    private static _AvailableControllers: { [type: string]: MotionControllerConstructor } = {};\r\n    private static _Fallbacks: { [profileId: string]: string[] } = {};\r\n    // cache for loading\r\n    private static _ProfileLoadingPromises: { [profileName: string]: Promise<IMotionControllerProfile> } = {};\r\n    private static _ProfilesList: Nullable<Promise<{ [profile: string]: string }>>;\r\n\r\n    /**\r\n     * The base URL of the online controller repository. Can be changed at any time.\r\n     */\r\n    public static BaseRepositoryUrl = \"https://immersive-web.github.io/webxr-input-profiles/packages/viewer/dist\";\r\n    /**\r\n     * Which repository gets priority - local or online\r\n     */\r\n    public static PrioritizeOnlineRepository: boolean = true;\r\n    /**\r\n     * Use the online repository, or use only locally-defined controllers\r\n     */\r\n    public static UseOnlineRepository: boolean = true;\r\n\r\n    /**\r\n     * Disable the controller cache and load the models each time a new WebXRProfileMotionController is loaded.\r\n     * Defaults to true.\r\n     */\r\n    public static DisableControllerCache: boolean = true;\r\n\r\n    /**\r\n     * Clear the cache used for profile loading and reload when requested again\r\n     */\r\n    public static ClearProfilesCache() {\r\n        this._ProfilesList = null;\r\n        this._ProfileLoadingPromises = {};\r\n    }\r\n\r\n    /**\r\n     * Register the default fallbacks.\r\n     * This function is called automatically when this file is imported.\r\n     */\r\n    public static DefaultFallbacks() {\r\n        this.RegisterFallbacksForProfileId(\"google-daydream\", [\"generic-touchpad\"]);\r\n        this.RegisterFallbacksForProfileId(\"htc-vive-focus\", [\"generic-trigger-touchpad\"]);\r\n        this.RegisterFallbacksForProfileId(\"htc-vive\", [\"generic-trigger-squeeze-touchpad\"]);\r\n        this.RegisterFallbacksForProfileId(\"magicleap-one\", [\"generic-trigger-squeeze-touchpad\"]);\r\n        this.RegisterFallbacksForProfileId(\"windows-mixed-reality\", [\"generic-trigger-squeeze-touchpad-thumbstick\"]);\r\n        this.RegisterFallbacksForProfileId(\"microsoft-mixed-reality\", [\"windows-mixed-reality\", \"generic-trigger-squeeze-touchpad-thumbstick\"]);\r\n        this.RegisterFallbacksForProfileId(\"oculus-go\", [\"generic-trigger-touchpad\"]);\r\n        this.RegisterFallbacksForProfileId(\"oculus-touch-v2\", [\"oculus-touch\", \"generic-trigger-squeeze-thumbstick\"]);\r\n        this.RegisterFallbacksForProfileId(\"oculus-touch\", [\"generic-trigger-squeeze-thumbstick\"]);\r\n        this.RegisterFallbacksForProfileId(\"samsung-gearvr\", [\"windows-mixed-reality\", \"generic-trigger-squeeze-touchpad-thumbstick\"]);\r\n        this.RegisterFallbacksForProfileId(\"samsung-odyssey\", [\"generic-touchpad\"]);\r\n        this.RegisterFallbacksForProfileId(\"valve-index\", [\"generic-trigger-squeeze-touchpad-thumbstick\"]);\r\n        this.RegisterFallbacksForProfileId(\"generic-hand-select\", [\"generic-trigger\"]);\r\n    }\r\n\r\n    /**\r\n     * Find a fallback profile if the profile was not found. There are a few predefined generic profiles.\r\n     * @param profileId the profile to which a fallback needs to be found\r\n     * @returns an array with corresponding fallback profiles\r\n     */\r\n    public static FindFallbackWithProfileId(profileId: string): string[] {\r\n        const returnArray = this._Fallbacks[profileId] || [];\r\n\r\n        returnArray.unshift(profileId);\r\n        return returnArray;\r\n    }\r\n\r\n    /**\r\n     * When acquiring a new xrInput object (usually by the WebXRInput class), match it with the correct profile.\r\n     * The order of search:\r\n     *\r\n     * 1) Iterate the profiles array of the xr input and try finding a corresponding motion controller\r\n     * 2) (If not found) search in the gamepad id and try using it (legacy versions only)\r\n     * 3) search for registered fallbacks (should be redundant, nonetheless it makes sense to check)\r\n     * 4) return the generic trigger controller if none were found\r\n     *\r\n     * @param xrInput the xrInput to which a new controller is initialized\r\n     * @param scene the scene to which the model will be added\r\n     * @param forceProfile force a certain profile for this controller\r\n     * @returns A promise that fulfils with the motion controller class for this profile id or the generic standard class if none was found\r\n     */\r\n    public static GetMotionControllerWithXRInput(xrInput: XRInputSource, scene: Scene, forceProfile?: string): Promise<WebXRAbstractMotionController> {\r\n        const profileArray: string[] = [];\r\n        if (forceProfile) {\r\n            profileArray.push(forceProfile);\r\n        }\r\n        profileArray.push(...(xrInput.profiles || []));\r\n\r\n        // emulator support\r\n        if (profileArray.length && !profileArray[0]) {\r\n            // remove the first \"undefined\" that the emulator is adding\r\n            profileArray.pop();\r\n        }\r\n\r\n        // legacy support - try using the gamepad id\r\n        if (xrInput.gamepad && xrInput.gamepad.id) {\r\n            switch (xrInput.gamepad.id) {\r\n                case xrInput.gamepad.id.match(/oculus touch/gi) ? xrInput.gamepad.id : undefined:\r\n                    // oculus in gamepad id\r\n                    profileArray.push(\"oculus-touch-v2\");\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // make sure microsoft/windows mixed reality works correctly\r\n        const windowsMRIdx = profileArray.indexOf(\"windows-mixed-reality\");\r\n        if (windowsMRIdx !== -1) {\r\n            profileArray.splice(windowsMRIdx, 0, \"microsoft-mixed-reality\");\r\n        }\r\n\r\n        if (!profileArray.length) {\r\n            profileArray.push(\"generic-trigger\");\r\n        }\r\n\r\n        if (this.UseOnlineRepository) {\r\n            const firstFunction = this.PrioritizeOnlineRepository ? this._LoadProfileFromRepository : this._LoadProfilesFromAvailableControllers;\r\n            const secondFunction = this.PrioritizeOnlineRepository ? this._LoadProfilesFromAvailableControllers : this._LoadProfileFromRepository;\r\n\r\n            return firstFunction.call(this, profileArray, xrInput, scene).catch(() => {\r\n                return secondFunction.call(this, profileArray, xrInput, scene);\r\n            });\r\n        } else {\r\n            // use only available functions\r\n            return this._LoadProfilesFromAvailableControllers(profileArray, xrInput, scene);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a new controller based on its profile. This function will be called by the controller classes themselves.\r\n     *\r\n     * If you are missing a profile, make sure it is imported in your source, otherwise it will not register.\r\n     *\r\n     * @param type the profile type to register\r\n     * @param constructFunction the function to be called when loading this profile\r\n     */\r\n    public static RegisterController(type: string, constructFunction: MotionControllerConstructor) {\r\n        this._AvailableControllers[type] = constructFunction;\r\n    }\r\n\r\n    /**\r\n     * Register a fallback to a specific profile.\r\n     * @param profileId the profileId that will receive the fallbacks\r\n     * @param fallbacks A list of fallback profiles\r\n     */\r\n    public static RegisterFallbacksForProfileId(profileId: string, fallbacks: string[]): void {\r\n        if (this._Fallbacks[profileId]) {\r\n            this._Fallbacks[profileId].push(...fallbacks);\r\n        } else {\r\n            this._Fallbacks[profileId] = fallbacks;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Will update the list of profiles available in the repository\r\n     * @returns a promise that resolves to a map of profiles available online\r\n     */\r\n    public static UpdateProfilesList() {\r\n        this._ProfilesList = Tools.LoadFileAsync(this.BaseRepositoryUrl + \"/profiles/profilesList.json\", false).then((data) => {\r\n            return JSON.parse(data.toString());\r\n        });\r\n        return this._ProfilesList;\r\n    }\r\n\r\n    /**\r\n     * Clear the controller's cache (usually happens at the end of a session)\r\n     */\r\n    public static ClearControllerCache() {\r\n        controllerCache.forEach((cacheItem) => {\r\n            cacheItem.meshes.forEach((mesh) => {\r\n                mesh.dispose(false, true);\r\n            });\r\n        });\r\n        controllerCache.length = 0;\r\n    }\r\n\r\n    private static _LoadProfileFromRepository(profileArray: string[], xrInput: XRInputSource, scene: Scene): Promise<WebXRAbstractMotionController> {\r\n        return Promise.resolve()\r\n            .then(() => {\r\n                if (!this._ProfilesList) {\r\n                    return this.UpdateProfilesList();\r\n                } else {\r\n                    return this._ProfilesList;\r\n                }\r\n            })\r\n            .then((profilesList: { [profile: string]: string }) => {\r\n                // load the right profile\r\n                for (let i = 0; i < profileArray.length; ++i) {\r\n                    // defensive\r\n                    if (!profileArray[i]) {\r\n                        continue;\r\n                    }\r\n                    if (profilesList[profileArray[i]]) {\r\n                        return profileArray[i];\r\n                    }\r\n                }\r\n\r\n                throw new Error(`neither controller ${profileArray[0]} nor all fallbacks were found in the repository,`);\r\n            })\r\n            .then((profileToLoad: string) => {\r\n                // load the profile\r\n                if (!this._ProfileLoadingPromises[profileToLoad]) {\r\n                    this._ProfileLoadingPromises[profileToLoad] = Tools.LoadFileAsync(`${this.BaseRepositoryUrl}/profiles/${profileToLoad}/profile.json`, false).then(\r\n                        (data) => <IMotionControllerProfile>JSON.parse(data as string)\r\n                    );\r\n                }\r\n                return this._ProfileLoadingPromises[profileToLoad];\r\n            })\r\n            .then((profile: IMotionControllerProfile) => {\r\n                return new WebXRProfiledMotionController(scene, xrInput, profile, this.BaseRepositoryUrl, this.DisableControllerCache ? undefined : controllerCache);\r\n            });\r\n    }\r\n\r\n    private static _LoadProfilesFromAvailableControllers(profileArray: string[], xrInput: XRInputSource, scene: Scene) {\r\n        // check fallbacks\r\n        for (let i = 0; i < profileArray.length; ++i) {\r\n            // defensive\r\n            if (!profileArray[i]) {\r\n                continue;\r\n            }\r\n            const fallbacks = this.FindFallbackWithProfileId(profileArray[i]);\r\n            for (let j = 0; j < fallbacks.length; ++j) {\r\n                const constructionFunction = this._AvailableControllers[fallbacks[j]];\r\n                if (constructionFunction) {\r\n                    return Promise.resolve(constructionFunction(xrInput, scene));\r\n                }\r\n            }\r\n        }\r\n\r\n        throw new Error(`no controller requested was found in the available controllers list`);\r\n    }\r\n}\r\n\r\n// register the generic profile(s) here so we will at least have them\r\nWebXRMotionControllerManager.RegisterController(WebXRGenericTriggerMotionController.ProfileId, (xrInput: XRInputSource, scene: Scene) => {\r\n    return new WebXRGenericTriggerMotionController(scene, <any>xrInput.gamepad, xrInput.handedness);\r\n});\r\n\r\n// register fallbacks\r\nWebXRMotionControllerManager.DefaultFallbacks();\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}