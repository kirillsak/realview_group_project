{"ast":null,"code":"import { Scene } from \"../scene.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { GamepadManager } from \"./gamepadManager.js\";\nimport { FreeCameraInputsManager } from \"../Cameras/freeCameraInputsManager.js\";\nimport { FreeCameraGamepadInput } from \"../Cameras/Inputs/freeCameraGamepadInput.js\";\nimport { ArcRotateCameraInputsManager } from \"../Cameras/arcRotateCameraInputsManager.js\";\nimport { ArcRotateCameraGamepadInput } from \"../Cameras/Inputs/arcRotateCameraGamepadInput.js\";\nObject.defineProperty(Scene.prototype, \"gamepadManager\", {\n  get: function () {\n    if (!this._gamepadManager) {\n      this._gamepadManager = new GamepadManager(this);\n      let component = this._getComponent(SceneComponentConstants.NAME_GAMEPAD);\n      if (!component) {\n        component = new GamepadSystemSceneComponent(this);\n        this._addComponent(component);\n      }\n    }\n    return this._gamepadManager;\n  },\n  enumerable: true,\n  configurable: true\n});\n/**\n * Adds a gamepad to the free camera inputs manager\n */\nFreeCameraInputsManager.prototype.addGamepad = function () {\n  this.add(new FreeCameraGamepadInput());\n  return this;\n};\n/**\n * Adds a gamepad to the arc rotate camera inputs manager\n */\nArcRotateCameraInputsManager.prototype.addGamepad = function () {\n  this.add(new ArcRotateCameraGamepadInput());\n  return this;\n};\n/**\n * Defines the gamepad scene component responsible to manage gamepads in a given scene\n */\nexport class GamepadSystemSceneComponent {\n  /**\n   * Creates a new instance of the component for the given scene\n   * @param scene Defines the scene to register the component in\n   */\n  constructor(scene) {\n    /**\n     * The component name helpfull to identify the component in the list of scene components.\n     */\n    this.name = SceneComponentConstants.NAME_GAMEPAD;\n    this.scene = scene;\n  }\n  /**\n   * Registers the component in a given scene\n   */\n  register() {\n    this.scene._beforeCameraUpdateStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERAUPDATE_GAMEPAD, this, this._beforeCameraUpdate);\n  }\n  /**\n   * Rebuilds the elements related to this component in case of\n   * context lost for instance.\n   */\n  rebuild() {\n    // Nothing to do for gamepads\n  }\n  /**\n   * Disposes the component and the associated resources\n   */\n  dispose() {\n    const gamepadManager = this.scene._gamepadManager;\n    if (gamepadManager) {\n      gamepadManager.dispose();\n      this.scene._gamepadManager = null;\n    }\n  }\n  _beforeCameraUpdate() {\n    const gamepadManager = this.scene._gamepadManager;\n    if (gamepadManager && gamepadManager._isMonitoring) {\n      gamepadManager._checkGamepadsStatus();\n    }\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,KAAK,QAAQ,aAAW;AAEjC,SAASC,uBAAuB,QAAQ,sBAAoB;AAC5D,SAASC,cAAc,QAAQ,qBAAmB;AAElD,SAASC,uBAAuB,QAAQ,uCAAqC;AAC7E,SAASC,sBAAsB,QAAQ,6CAA2C;AAClF,SAASC,4BAA4B,QAAQ,4CAA0C;AACvF,SAASC,2BAA2B,QAAQ,kDAAgD;AAe5FC,MAAM,CAACC,cAAc,CAACR,KAAK,CAACS,SAAS,EAAE,gBAAgB,EAAE;EACrDC,GAAG,EAAE;IACD,IAAI,CAAC,IAAI,CAACC,eAAe,EAAE;MACvB,IAAI,CAACA,eAAe,GAAG,IAAIT,cAAc,CAAC,IAAI,CAAC;MAC/C,IAAIU,SAAS,GAAG,IAAI,CAACC,aAAa,CAACZ,uBAAuB,CAACa,YAAY,CAAgC;MACvG,IAAI,CAACF,SAAS,EAAE;QACZA,SAAS,GAAG,IAAIG,2BAA2B,CAAC,IAAI,CAAC;QACjD,IAAI,CAACC,aAAa,CAACJ,SAAS,CAAC;;;IAIrC,OAAO,IAAI,CAACD,eAAe;EAC/B,CAAC;EACDM,UAAU,EAAE,IAAI;EAChBC,YAAY,EAAE;CACjB,CAAC;AAeF;;;AAGAf,uBAAuB,CAACM,SAAS,CAACU,UAAU,GAAG;EAC3C,IAAI,CAACC,GAAG,CAAC,IAAIhB,sBAAsB,EAAE,CAAC;EACtC,OAAO,IAAI;AACf,CAAC;AAeD;;;AAGAC,4BAA4B,CAACI,SAAS,CAACU,UAAU,GAAG;EAChD,IAAI,CAACC,GAAG,CAAC,IAAId,2BAA2B,EAAE,CAAC;EAC3C,OAAO,IAAI;AACf,CAAC;AAED;;;AAGA,OAAM,MAAOS,2BAA2B;EAWpC;;;;EAIAM,YAAYC,KAAY;IAdxB;;;IAGgB,SAAI,GAAGrB,uBAAuB,CAACa,YAAY;IAYvD,IAAI,CAACQ,KAAK,GAAGA,KAAK;EACtB;EAEA;;;EAGOC,QAAQ;IACX,IAAI,CAACD,KAAK,CAACE,wBAAwB,CAACC,YAAY,CAACxB,uBAAuB,CAACyB,+BAA+B,EAAE,IAAI,EAAE,IAAI,CAACC,mBAAmB,CAAC;EAC7I;EAEA;;;;EAIOC,OAAO;IACV;EAAA;EAGJ;;;EAGOC,OAAO;IACV,MAAMC,cAAc,GAAG,IAAI,CAACR,KAAK,CAACX,eAAe;IACjD,IAAImB,cAAc,EAAE;MAChBA,cAAc,CAACD,OAAO,EAAE;MACxB,IAAI,CAACP,KAAK,CAACX,eAAe,GAAG,IAAI;;EAEzC;EAEQgB,mBAAmB;IACvB,MAAMG,cAAc,GAAG,IAAI,CAACR,KAAK,CAACX,eAAe;IAEjD,IAAImB,cAAc,IAAIA,cAAc,CAACC,aAAa,EAAE;MAChDD,cAAc,CAACE,oBAAoB,EAAE;;EAE7C","names":["Scene","SceneComponentConstants","GamepadManager","FreeCameraInputsManager","FreeCameraGamepadInput","ArcRotateCameraInputsManager","ArcRotateCameraGamepadInput","Object","defineProperty","prototype","get","_gamepadManager","component","_getComponent","NAME_GAMEPAD","GamepadSystemSceneComponent","_addComponent","enumerable","configurable","addGamepad","add","constructor","scene","register","_beforeCameraUpdateStage","registerStep","STEP_BEFORECAMERAUPDATE_GAMEPAD","_beforeCameraUpdate","rebuild","dispose","gamepadManager","_isMonitoring","_checkGamepadsStatus"],"sourceRoot":"","sources":["../../../../lts/core/generated/Gamepads/gamepadSceneComponent.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport type { ISceneComponent } from \"../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport { GamepadManager } from \"./gamepadManager\";\r\n\r\nimport { FreeCameraInputsManager } from \"../Cameras/freeCameraInputsManager\";\r\nimport { FreeCameraGamepadInput } from \"../Cameras/Inputs/freeCameraGamepadInput\";\r\nimport { ArcRotateCameraInputsManager } from \"../Cameras/arcRotateCameraInputsManager\";\r\nimport { ArcRotateCameraGamepadInput } from \"../Cameras/Inputs/arcRotateCameraGamepadInput\";\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /** @internal */\r\n        _gamepadManager: Nullable<GamepadManager>;\r\n\r\n        /**\r\n         * Gets the gamepad manager associated with the scene\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/input/gamepads\r\n         */\r\n        gamepadManager: GamepadManager;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Scene.prototype, \"gamepadManager\", {\r\n    get: function (this: Scene) {\r\n        if (!this._gamepadManager) {\r\n            this._gamepadManager = new GamepadManager(this);\r\n            let component = this._getComponent(SceneComponentConstants.NAME_GAMEPAD) as GamepadSystemSceneComponent;\r\n            if (!component) {\r\n                component = new GamepadSystemSceneComponent(this);\r\n                this._addComponent(component);\r\n            }\r\n        }\r\n\r\n        return this._gamepadManager;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\ndeclare module \"../Cameras/freeCameraInputsManager\" {\r\n    /**\r\n     * Interface representing a free camera inputs manager\r\n     */\r\n    export interface FreeCameraInputsManager {\r\n        /**\r\n         * Adds gamepad input support to the FreeCameraInputsManager.\r\n         * @returns the FreeCameraInputsManager\r\n         */\r\n        addGamepad(): FreeCameraInputsManager;\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a gamepad to the free camera inputs manager\r\n */\r\nFreeCameraInputsManager.prototype.addGamepad = function (): FreeCameraInputsManager {\r\n    this.add(new FreeCameraGamepadInput());\r\n    return this;\r\n};\r\n\r\ndeclare module \"../Cameras/arcRotateCameraInputsManager\" {\r\n    /**\r\n     * Interface representing an arc rotate camera inputs manager\r\n     */\r\n    export interface ArcRotateCameraInputsManager {\r\n        /**\r\n         * Adds gamepad input support to the ArcRotateCamera InputManager.\r\n         * @returns the camera inputs manager\r\n         */\r\n        addGamepad(): ArcRotateCameraInputsManager;\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a gamepad to the arc rotate camera inputs manager\r\n */\r\nArcRotateCameraInputsManager.prototype.addGamepad = function (): ArcRotateCameraInputsManager {\r\n    this.add(new ArcRotateCameraGamepadInput());\r\n    return this;\r\n};\r\n\r\n/**\r\n * Defines the gamepad scene component responsible to manage gamepads in a given scene\r\n */\r\nexport class GamepadSystemSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_GAMEPAD;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._beforeCameraUpdateStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERAUPDATE_GAMEPAD, this, this._beforeCameraUpdate);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do for gamepads\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources\r\n     */\r\n    public dispose(): void {\r\n        const gamepadManager = this.scene._gamepadManager;\r\n        if (gamepadManager) {\r\n            gamepadManager.dispose();\r\n            this.scene._gamepadManager = null;\r\n        }\r\n    }\r\n\r\n    private _beforeCameraUpdate(): void {\r\n        const gamepadManager = this.scene._gamepadManager;\r\n\r\n        if (gamepadManager && gamepadManager._isMonitoring) {\r\n            gamepadManager._checkGamepadsStatus();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}