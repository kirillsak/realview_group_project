{"ast":null,"code":"import { WebXRAbstractMotionController } from \"./webXRAbstractMotionController.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { Quaternion } from \"../../Maths/math.vector.js\";\nimport { WebXRMotionControllerManager } from \"./webXRMotionControllerManager.js\";\n/**\n * The motion controller class for the standard HTC-Vive controllers\n */\nexport class WebXRHTCViveMotionController extends WebXRAbstractMotionController {\n  /**\n   * Create a new Vive motion controller object\n   * @param scene the scene to use to create this controller\n   * @param gamepadObject the corresponding gamepad object\n   * @param handedness the handedness of the controller\n   */\n  constructor(scene, gamepadObject, handedness) {\n    super(scene, HTCViveLayout[handedness], gamepadObject, handedness);\n    this.profileId = \"htc-vive\";\n  }\n  _getFilenameAndPath() {\n    const filename = WebXRHTCViveMotionController.MODEL_FILENAME;\n    const path = WebXRHTCViveMotionController.MODEL_BASE_URL;\n    return {\n      filename,\n      path\n    };\n  }\n  _getModelLoadingConstraints() {\n    return true;\n  }\n  _processLoadedModel(_meshes) {\n    this.getComponentIds().forEach(id => {\n      const comp = id && this.getComponent(id);\n      if (comp) {\n        comp.onButtonStateChangedObservable.add(component => {\n          if (!this.rootMesh || this.disableAnimation) {\n            return;\n          }\n          switch (id) {\n            case \"xr-standard-trigger\":\n              this._modelRootNode.getChildren()[6].rotation.x = -component.value * 0.15;\n              return;\n            case \"xr-standard-touchpad\":\n              return;\n            case \"xr-standard-squeeze\":\n              return;\n          }\n        }, undefined, true);\n      }\n    });\n  }\n  _setRootMesh(meshes) {\n    this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\n    meshes.forEach(mesh => {\n      mesh.isPickable = false;\n    });\n    this._modelRootNode = meshes[1];\n    this._modelRootNode.parent = this.rootMesh;\n    if (!this.scene.useRightHandedSystem) {\n      this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\n    }\n  }\n  _updateModel() {\n    // no-op. model is updated using observables.\n  }\n}\n/**\n * The base url used to load the left and right controller models\n */\nWebXRHTCViveMotionController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/vive/\";\n/**\n * File name for the controller model.\n */\nWebXRHTCViveMotionController.MODEL_FILENAME = \"wand.babylon\";\n// register the profile\nWebXRMotionControllerManager.RegisterController(\"htc-vive\", (xrInput, scene) => {\n  return new WebXRHTCViveMotionController(scene, xrInput.gamepad, xrInput.handedness);\n});\n// WebXRMotionControllerManager.RegisterController(\"htc-vive-legacy\", (xrInput: XRInputSource, scene: Scene) => {\n//     return new WebXRHTCViveMotionController(scene, <any>(xrInput.gamepad), xrInput.handedness, true);\n// });\nconst HTCViveLayout = {\n  left: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {}\n      },\n      \"xr-standard-squeeze\": {\n        type: \"squeeze\",\n        gamepadIndices: {\n          button: 1\n        },\n        rootNodeName: \"xr_standard_squeeze\",\n        visualResponses: {}\n      },\n      \"xr-standard-touchpad\": {\n        type: \"touchpad\",\n        gamepadIndices: {\n          button: 2,\n          xAxis: 0,\n          yAxis: 1\n        },\n        rootNodeName: \"xr_standard_touchpad\",\n        visualResponses: {}\n      },\n      menu: {\n        type: \"button\",\n        gamepadIndices: {\n          button: 4\n        },\n        rootNodeName: \"menu\",\n        visualResponses: {}\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"htc_vive_none\",\n    assetPath: \"none.glb\"\n  },\n  right: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {}\n      },\n      \"xr-standard-squeeze\": {\n        type: \"squeeze\",\n        gamepadIndices: {\n          button: 1\n        },\n        rootNodeName: \"xr_standard_squeeze\",\n        visualResponses: {}\n      },\n      \"xr-standard-touchpad\": {\n        type: \"touchpad\",\n        gamepadIndices: {\n          button: 2,\n          xAxis: 0,\n          yAxis: 1\n        },\n        rootNodeName: \"xr_standard_touchpad\",\n        visualResponses: {}\n      },\n      menu: {\n        type: \"button\",\n        gamepadIndices: {\n          button: 4\n        },\n        rootNodeName: \"menu\",\n        visualResponses: {}\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"htc_vive_none\",\n    assetPath: \"none.glb\"\n  },\n  none: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {}\n      },\n      \"xr-standard-squeeze\": {\n        type: \"squeeze\",\n        gamepadIndices: {\n          button: 1\n        },\n        rootNodeName: \"xr_standard_squeeze\",\n        visualResponses: {}\n      },\n      \"xr-standard-touchpad\": {\n        type: \"touchpad\",\n        gamepadIndices: {\n          button: 2,\n          xAxis: 0,\n          yAxis: 1\n        },\n        rootNodeName: \"xr_standard_touchpad\",\n        visualResponses: {}\n      },\n      menu: {\n        type: \"button\",\n        gamepadIndices: {\n          button: 4\n        },\n        rootNodeName: \"menu\",\n        visualResponses: {}\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"htc-vive-none\",\n    assetPath: \"none.glb\"\n  }\n};","map":{"version":3,"mappings":"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","names":["WebXRAbstractMotionController","Mesh","Quaternion","WebXRMotionControllerManager","WebXRHTCViveMotionController","constructor","scene","gamepadObject","handedness","HTCViveLayout","_getFilenameAndPath","filename","MODEL_FILENAME","path","MODEL_BASE_URL","_getModelLoadingConstraints","_processLoadedModel","_meshes","getComponentIds","forEach","id","comp","getComponent","onButtonStateChangedObservable","add","component","rootMesh","disableAnimation","_modelRootNode","getChildren","rotation","x","value","undefined","_setRootMesh","meshes","profileId","mesh","isPickable","parent","useRightHandedSystem","rotationQuaternion","FromEulerAngles","Math","PI","_updateModel","RegisterController","xrInput","gamepad","left","selectComponentId","components","type","gamepadIndices","button","rootNodeName","visualResponses","xAxis","yAxis","menu","gamepadMapping","assetPath","right","none"],"sourceRoot":"","sources":["../../../../../lts/core/generated/XR/motionController/webXRHTCViveMotionController.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { IMotionControllerLayoutMap, IMinimalMotionControllerObject, MotionControllerHandedness } from \"./webXRAbstractMotionController\";\r\nimport { WebXRAbstractMotionController } from \"./webXRAbstractMotionController\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { Quaternion } from \"../../Maths/math.vector\";\r\nimport { WebXRMotionControllerManager } from \"./webXRMotionControllerManager\";\r\n\r\n/**\r\n * The motion controller class for the standard HTC-Vive controllers\r\n */\r\nexport class WebXRHTCViveMotionController extends WebXRAbstractMotionController {\r\n    private _modelRootNode: AbstractMesh;\r\n\r\n    /**\r\n     * The base url used to load the left and right controller models\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/vive/\";\r\n    /**\r\n     * File name for the controller model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"wand.babylon\";\r\n\r\n    public profileId = \"htc-vive\";\r\n\r\n    /**\r\n     * Create a new Vive motion controller object\r\n     * @param scene the scene to use to create this controller\r\n     * @param gamepadObject the corresponding gamepad object\r\n     * @param handedness the handedness of the controller\r\n     */\r\n    constructor(scene: Scene, gamepadObject: IMinimalMotionControllerObject, handedness: MotionControllerHandedness) {\r\n        super(scene, HTCViveLayout[handedness], gamepadObject, handedness);\r\n    }\r\n\r\n    protected _getFilenameAndPath(): { filename: string; path: string } {\r\n        const filename = WebXRHTCViveMotionController.MODEL_FILENAME;\r\n        const path = WebXRHTCViveMotionController.MODEL_BASE_URL;\r\n\r\n        return {\r\n            filename,\r\n            path,\r\n        };\r\n    }\r\n\r\n    protected _getModelLoadingConstraints(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected _processLoadedModel(_meshes: AbstractMesh[]): void {\r\n        this.getComponentIds().forEach((id) => {\r\n            const comp = id && this.getComponent(id);\r\n            if (comp) {\r\n                comp.onButtonStateChangedObservable.add(\r\n                    (component) => {\r\n                        if (!this.rootMesh || this.disableAnimation) {\r\n                            return;\r\n                        }\r\n\r\n                        switch (id) {\r\n                            case \"xr-standard-trigger\":\r\n                                (<AbstractMesh>this._modelRootNode.getChildren()[6]).rotation.x = -component.value * 0.15;\r\n                                return;\r\n                            case \"xr-standard-touchpad\":\r\n                                return;\r\n                            case \"xr-standard-squeeze\":\r\n                                return;\r\n                        }\r\n                    },\r\n                    undefined,\r\n                    true\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    protected _setRootMesh(meshes: AbstractMesh[]): void {\r\n        this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\r\n\r\n        meshes.forEach((mesh) => {\r\n            mesh.isPickable = false;\r\n        });\r\n        this._modelRootNode = meshes[1];\r\n        this._modelRootNode.parent = this.rootMesh;\r\n        if (!this.scene.useRightHandedSystem) {\r\n            this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\r\n        }\r\n    }\r\n\r\n    protected _updateModel(): void {\r\n        // no-op. model is updated using observables.\r\n    }\r\n}\r\n\r\n// register the profile\r\nWebXRMotionControllerManager.RegisterController(\"htc-vive\", (xrInput: XRInputSource, scene: Scene) => {\r\n    return new WebXRHTCViveMotionController(scene, <any>xrInput.gamepad, xrInput.handedness);\r\n});\r\n\r\n// WebXRMotionControllerManager.RegisterController(\"htc-vive-legacy\", (xrInput: XRInputSource, scene: Scene) => {\r\n//     return new WebXRHTCViveMotionController(scene, <any>(xrInput.gamepad), xrInput.handedness, true);\r\n// });\r\n\r\nconst HTCViveLayout: IMotionControllerLayoutMap = {\r\n    left: {\r\n        selectComponentId: \"xr-standard-trigger\",\r\n        components: {\r\n            \"xr-standard-trigger\": {\r\n                type: \"trigger\",\r\n                gamepadIndices: {\r\n                    button: 0,\r\n                },\r\n                rootNodeName: \"xr_standard_trigger\",\r\n                visualResponses: {},\r\n            },\r\n            \"xr-standard-squeeze\": {\r\n                type: \"squeeze\",\r\n                gamepadIndices: {\r\n                    button: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_squeeze\",\r\n                visualResponses: {},\r\n            },\r\n            \"xr-standard-touchpad\": {\r\n                type: \"touchpad\",\r\n                gamepadIndices: {\r\n                    button: 2,\r\n                    xAxis: 0,\r\n                    yAxis: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_touchpad\",\r\n                visualResponses: {},\r\n            },\r\n            menu: {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 4,\r\n                },\r\n                rootNodeName: \"menu\",\r\n                visualResponses: {},\r\n            },\r\n        },\r\n        gamepadMapping: \"xr-standard\",\r\n        rootNodeName: \"htc_vive_none\",\r\n        assetPath: \"none.glb\",\r\n    },\r\n    right: {\r\n        selectComponentId: \"xr-standard-trigger\",\r\n        components: {\r\n            \"xr-standard-trigger\": {\r\n                type: \"trigger\",\r\n                gamepadIndices: {\r\n                    button: 0,\r\n                },\r\n                rootNodeName: \"xr_standard_trigger\",\r\n                visualResponses: {},\r\n            },\r\n            \"xr-standard-squeeze\": {\r\n                type: \"squeeze\",\r\n                gamepadIndices: {\r\n                    button: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_squeeze\",\r\n                visualResponses: {},\r\n            },\r\n            \"xr-standard-touchpad\": {\r\n                type: \"touchpad\",\r\n                gamepadIndices: {\r\n                    button: 2,\r\n                    xAxis: 0,\r\n                    yAxis: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_touchpad\",\r\n                visualResponses: {},\r\n            },\r\n            menu: {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 4,\r\n                },\r\n                rootNodeName: \"menu\",\r\n                visualResponses: {},\r\n            },\r\n        },\r\n        gamepadMapping: \"xr-standard\",\r\n        rootNodeName: \"htc_vive_none\",\r\n        assetPath: \"none.glb\",\r\n    },\r\n    none: {\r\n        selectComponentId: \"xr-standard-trigger\",\r\n        components: {\r\n            \"xr-standard-trigger\": {\r\n                type: \"trigger\",\r\n                gamepadIndices: {\r\n                    button: 0,\r\n                },\r\n                rootNodeName: \"xr_standard_trigger\",\r\n                visualResponses: {},\r\n            },\r\n            \"xr-standard-squeeze\": {\r\n                type: \"squeeze\",\r\n                gamepadIndices: {\r\n                    button: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_squeeze\",\r\n                visualResponses: {},\r\n            },\r\n            \"xr-standard-touchpad\": {\r\n                type: \"touchpad\",\r\n                gamepadIndices: {\r\n                    button: 2,\r\n                    xAxis: 0,\r\n                    yAxis: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_touchpad\",\r\n                visualResponses: {},\r\n            },\r\n            menu: {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 4,\r\n                },\r\n                rootNodeName: \"menu\",\r\n                visualResponses: {},\r\n            },\r\n        },\r\n        gamepadMapping: \"xr-standard\",\r\n        rootNodeName: \"htc-vive-none\",\r\n        assetPath: \"none.glb\",\r\n    },\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}