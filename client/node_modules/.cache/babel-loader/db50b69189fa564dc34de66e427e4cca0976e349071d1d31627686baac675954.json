{"ast":null,"code":"import { AxesViewer } from \"../Debug/axesViewer.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Axis } from \"../Maths/math.axis.js\";\n/**\n * The BoneAxesViewer will attach 3 axes to a specific bone of a specific mesh\n * @see demo here: https://www.babylonjs-playground.com/#0DE8F4#8\n */\nexport class BoneAxesViewer extends AxesViewer {\n  /**\n   * Creates a new BoneAxesViewer\n   * @param scene defines the hosting scene\n   * @param bone defines the target bone\n   * @param mesh defines the target mesh\n   * @param scaleLines defines a scaling factor for line length (1 by default)\n   */\n  constructor(scene, bone, mesh, scaleLines = 1) {\n    super(scene, scaleLines);\n    /** Gets current position */\n    this.pos = Vector3.Zero();\n    /** Gets direction of X axis */\n    this.xaxis = Vector3.Zero();\n    /** Gets direction of Y axis */\n    this.yaxis = Vector3.Zero();\n    /** Gets direction of Z axis */\n    this.zaxis = Vector3.Zero();\n    this.mesh = mesh;\n    this.bone = bone;\n  }\n  /**\n   * Force the viewer to update\n   */\n  update() {\n    if (!this.mesh || !this.bone) {\n      return;\n    }\n    const bone = this.bone;\n    bone.getAbsolutePositionToRef(this.mesh, this.pos);\n    bone.getDirectionToRef(Axis.X, this.mesh, this.xaxis);\n    bone.getDirectionToRef(Axis.Y, this.mesh, this.yaxis);\n    bone.getDirectionToRef(Axis.Z, this.mesh, this.zaxis);\n    super.update(this.pos, this.xaxis, this.yaxis, this.zaxis);\n  }\n  /** Releases resources */\n  dispose() {\n    if (this.mesh) {\n      this.mesh = null;\n      this.bone = null;\n      super.dispose();\n    }\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,UAAU,QAAQ,wBAAsB;AACjD,SAASC,OAAO,QAAQ,yBAAuB;AAI/C,SAASC,IAAI,QAAQ,uBAAqB;AAE1C;;;;AAIA,OAAM,MAAOC,cAAe,SAAQH,UAAU;EAmB1C;;;;;;;EAOAI,YAAYC,KAAY,EAAEC,IAAU,EAAEC,IAAU,EAAEC,UAAU,GAAG,CAAC;IAC5D,KAAK,CAACH,KAAK,EAAEG,UAAU,CAAC;IAjB5B;IACO,QAAG,GAAGP,OAAO,CAACQ,IAAI,EAAE;IAC3B;IACO,UAAK,GAAGR,OAAO,CAACQ,IAAI,EAAE;IAC7B;IACO,UAAK,GAAGR,OAAO,CAACQ,IAAI,EAAE;IAC7B;IACO,UAAK,GAAGR,OAAO,CAACQ,IAAI,EAAE;IAYzB,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACD,IAAI,GAAGA,IAAI;EACpB;EAEA;;;EAGOI,MAAM;IACT,IAAI,CAAC,IAAI,CAACH,IAAI,IAAI,CAAC,IAAI,CAACD,IAAI,EAAE;MAC1B;;IAGJ,MAAMA,IAAI,GAAG,IAAI,CAACA,IAAI;IACtBA,IAAI,CAACK,wBAAwB,CAAC,IAAI,CAACJ,IAAI,EAAE,IAAI,CAACK,GAAG,CAAC;IAClDN,IAAI,CAACO,iBAAiB,CAACX,IAAI,CAACY,CAAC,EAAE,IAAI,CAACP,IAAI,EAAE,IAAI,CAACQ,KAAK,CAAC;IACrDT,IAAI,CAACO,iBAAiB,CAACX,IAAI,CAACc,CAAC,EAAE,IAAI,CAACT,IAAI,EAAE,IAAI,CAACU,KAAK,CAAC;IACrDX,IAAI,CAACO,iBAAiB,CAACX,IAAI,CAACgB,CAAC,EAAE,IAAI,CAACX,IAAI,EAAE,IAAI,CAACY,KAAK,CAAC;IAErD,KAAK,CAACT,MAAM,CAAC,IAAI,CAACE,GAAG,EAAE,IAAI,CAACG,KAAK,EAAE,IAAI,CAACE,KAAK,EAAE,IAAI,CAACE,KAAK,CAAC;EAC9D;EAEA;EACOC,OAAO;IACV,IAAI,IAAI,CAACb,IAAI,EAAE;MACX,IAAI,CAACA,IAAI,GAAG,IAAI;MAChB,IAAI,CAACD,IAAI,GAAG,IAAI;MAEhB,KAAK,CAACc,OAAO,EAAE;;EAEvB","names":["AxesViewer","Vector3","Axis","BoneAxesViewer","constructor","scene","bone","mesh","scaleLines","Zero","update","getAbsolutePositionToRef","pos","getDirectionToRef","X","xaxis","Y","yaxis","Z","zaxis","dispose"],"sourceRoot":"","sources":["../../../../lts/core/generated/Debug/boneAxesViewer.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { AxesViewer } from \"../Debug/axesViewer\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { Bone } from \"../Bones/bone\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Axis } from \"../Maths/math.axis\";\r\n\r\n/**\r\n * The BoneAxesViewer will attach 3 axes to a specific bone of a specific mesh\r\n * @see demo here: https://www.babylonjs-playground.com/#0DE8F4#8\r\n */\r\nexport class BoneAxesViewer extends AxesViewer {\r\n    /**\r\n     * Gets or sets the target mesh where to display the axes viewer\r\n     */\r\n    public mesh: Nullable<Mesh>;\r\n    /**\r\n     * Gets or sets the target bone where to display the axes viewer\r\n     */\r\n    public bone: Nullable<Bone>;\r\n\r\n    /** Gets current position */\r\n    public pos = Vector3.Zero();\r\n    /** Gets direction of X axis */\r\n    public xaxis = Vector3.Zero();\r\n    /** Gets direction of Y axis */\r\n    public yaxis = Vector3.Zero();\r\n    /** Gets direction of Z axis */\r\n    public zaxis = Vector3.Zero();\r\n\r\n    /**\r\n     * Creates a new BoneAxesViewer\r\n     * @param scene defines the hosting scene\r\n     * @param bone defines the target bone\r\n     * @param mesh defines the target mesh\r\n     * @param scaleLines defines a scaling factor for line length (1 by default)\r\n     */\r\n    constructor(scene: Scene, bone: Bone, mesh: Mesh, scaleLines = 1) {\r\n        super(scene, scaleLines);\r\n\r\n        this.mesh = mesh;\r\n        this.bone = bone;\r\n    }\r\n\r\n    /**\r\n     * Force the viewer to update\r\n     */\r\n    public update(): void {\r\n        if (!this.mesh || !this.bone) {\r\n            return;\r\n        }\r\n\r\n        const bone = this.bone;\r\n        bone.getAbsolutePositionToRef(this.mesh, this.pos);\r\n        bone.getDirectionToRef(Axis.X, this.mesh, this.xaxis);\r\n        bone.getDirectionToRef(Axis.Y, this.mesh, this.yaxis);\r\n        bone.getDirectionToRef(Axis.Z, this.mesh, this.zaxis);\r\n\r\n        super.update(this.pos, this.xaxis, this.yaxis, this.zaxis);\r\n    }\r\n\r\n    /** Releases resources */\r\n    public dispose() {\r\n        if (this.mesh) {\r\n            this.mesh = null;\r\n            this.bone = null;\r\n\r\n            super.dispose();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}