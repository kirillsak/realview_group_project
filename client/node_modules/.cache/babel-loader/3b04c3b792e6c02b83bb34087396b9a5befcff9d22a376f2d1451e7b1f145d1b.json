{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Scalar } from \"@babylonjs/core/Maths/math.scalar.js\";\nimport { SphericalHarmonics, SphericalPolynomial } from \"@babylonjs/core/Maths/sphericalPolynomial.js\";\nimport { Quaternion, Matrix } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { RawCubeTexture } from \"@babylonjs/core/Materials/Textures/rawCubeTexture.js\";\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader.js\";\nconst NAME = \"EXT_lights_image_based\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_lights_image_based/README.md)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class EXT_lights_image_based {\n  /**\n   * @internal\n   */\n  constructor(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @internal */\n  dispose() {\n    this._loader = null;\n    delete this._lights;\n  }\n  /** @internal */\n  onLoading() {\n    const extensions = this._loader.gltf.extensions;\n    if (extensions && extensions[this.name]) {\n      const extension = extensions[this.name];\n      this._lights = extension.lights;\n    }\n  }\n  /**\n   * @internal\n   */\n  loadSceneAsync(context, scene) {\n    return GLTFLoader.LoadExtensionAsync(context, scene, this.name, (extensionContext, extension) => {\n      const promises = new Array();\n      promises.push(this._loader.loadSceneAsync(context, scene));\n      this._loader.logOpen(`${extensionContext}`);\n      const light = ArrayItem.Get(`${extensionContext}/light`, this._lights, extension.light);\n      promises.push(this._loadLightAsync(`/extensions/${this.name}/lights/${extension.light}`, light).then(texture => {\n        this._loader.babylonScene.environmentTexture = texture;\n      }));\n      this._loader.logClose();\n      return Promise.all(promises).then(() => {});\n    });\n  }\n  _loadLightAsync(context, light) {\n    if (!light._loaded) {\n      const promises = new Array();\n      this._loader.logOpen(`${context}`);\n      const imageData = new Array(light.specularImages.length);\n      for (let mipmap = 0; mipmap < light.specularImages.length; mipmap++) {\n        const faces = light.specularImages[mipmap];\n        imageData[mipmap] = new Array(faces.length);\n        for (let face = 0; face < faces.length; face++) {\n          const specularImageContext = `${context}/specularImages/${mipmap}/${face}`;\n          this._loader.logOpen(`${specularImageContext}`);\n          const index = faces[face];\n          const image = ArrayItem.Get(specularImageContext, this._loader.gltf.images, index);\n          promises.push(this._loader.loadImageAsync(`/images/${index}`, image).then(data => {\n            imageData[mipmap][face] = data;\n          }));\n          this._loader.logClose();\n        }\n      }\n      this._loader.logClose();\n      light._loaded = Promise.all(promises).then(() => {\n        const babylonTexture = new RawCubeTexture(this._loader.babylonScene, null, light.specularImageSize);\n        babylonTexture.name = light.name || \"environment\";\n        light._babylonTexture = babylonTexture;\n        if (light.intensity != undefined) {\n          babylonTexture.level = light.intensity;\n        }\n        if (light.rotation) {\n          let rotation = Quaternion.FromArray(light.rotation);\n          // Invert the rotation so that positive rotation is counter-clockwise.\n          if (!this._loader.babylonScene.useRightHandedSystem) {\n            rotation = Quaternion.Inverse(rotation);\n          }\n          Matrix.FromQuaternionToRef(rotation, babylonTexture.getReflectionTextureMatrix());\n        }\n        if (!light.irradianceCoefficients) {\n          throw new Error(`${context}: Irradiance coefficients are missing`);\n        }\n        const sphericalHarmonics = SphericalHarmonics.FromArray(light.irradianceCoefficients);\n        sphericalHarmonics.scaleInPlace(light.intensity);\n        sphericalHarmonics.convertIrradianceToLambertianRadiance();\n        const sphericalPolynomial = SphericalPolynomial.FromHarmonics(sphericalHarmonics);\n        // Compute the lod generation scale to fit exactly to the number of levels available.\n        const lodGenerationScale = (imageData.length - 1) / Scalar.Log2(light.specularImageSize);\n        return babylonTexture.updateRGBDAsync(imageData, sphericalPolynomial, lodGenerationScale);\n      });\n    }\n    return light._loaded.then(() => {\n      return light._babylonTexture;\n    });\n  }\n}\nGLTFLoader.RegisterExtension(NAME, loader => new EXT_lights_image_based(loader));","map":{"version":3,"mappings":"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","names":["Scalar","SphericalHarmonics","SphericalPolynomial","Quaternion","Matrix","RawCubeTexture","GLTFLoader","ArrayItem","NAME","EXT_lights_image_based","constructor","loader","_loader","enabled","isExtensionUsed","dispose","_lights","onLoading","extensions","gltf","name","extension","lights","loadSceneAsync","context","scene","LoadExtensionAsync","extensionContext","promises","Array","push","logOpen","light","Get","_loadLightAsync","then","texture","babylonScene","environmentTexture","logClose","Promise","all","_loaded","imageData","specularImages","length","mipmap","faces","face","specularImageContext","index","image","images","loadImageAsync","data","babylonTexture","specularImageSize","_babylonTexture","intensity","undefined","level","rotation","FromArray","useRightHandedSystem","Inverse","FromQuaternionToRef","getReflectionTextureMatrix","irradianceCoefficients","Error","sphericalHarmonics","scaleInPlace","convertIrradianceToLambertianRadiance","sphericalPolynomial","FromHarmonics","lodGenerationScale","Log2","updateRGBDAsync","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../lts/loaders/generated/glTF/2.0/Extensions/EXT_lights_image_based.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport { Scalar } from \"core/Maths/math.scalar\";\r\nimport { SphericalHarmonics, SphericalPolynomial } from \"core/Maths/sphericalPolynomial\";\r\nimport { Quaternion, Matrix } from \"core/Maths/math.vector\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { RawCubeTexture } from \"core/Materials/Textures/rawCubeTexture\";\r\n\r\nimport type { IEXTLightsImageBased_LightReferenceImageBased, IEXTLightsImageBased_LightImageBased, IEXTLightsImageBased } from \"babylonjs-gltf2interface\";\r\nimport type { IScene } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\n\r\nconst NAME = \"EXT_lights_image_based\";\r\n\r\ndeclare module \"babylonjs-gltf2interface\" {\r\n    /** @internal */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    interface IEXTLightsImageBased_LightImageBased {\r\n        _babylonTexture?: BaseTexture;\r\n        _loaded?: Promise<void>;\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_lights_image_based/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_lights_image_based implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n    private _lights?: IEXTLightsImageBased_LightImageBased[];\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n        delete this._lights;\r\n    }\r\n\r\n    /** @internal */\r\n    public onLoading(): void {\r\n        const extensions = this._loader.gltf.extensions;\r\n        if (extensions && extensions[this.name]) {\r\n            const extension = extensions[this.name] as IEXTLightsImageBased;\r\n            this._lights = extension.lights;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadSceneAsync(context: string, scene: IScene): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTLightsImageBased_LightReferenceImageBased>(context, scene, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n\r\n            promises.push(this._loader.loadSceneAsync(context, scene));\r\n\r\n            this._loader.logOpen(`${extensionContext}`);\r\n\r\n            const light = ArrayItem.Get(`${extensionContext}/light`, this._lights, extension.light);\r\n            promises.push(\r\n                this._loadLightAsync(`/extensions/${this.name}/lights/${extension.light}`, light).then((texture) => {\r\n                    this._loader.babylonScene.environmentTexture = texture;\r\n                })\r\n            );\r\n\r\n            this._loader.logClose();\r\n\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadLightAsync(context: string, light: IEXTLightsImageBased_LightImageBased): Promise<BaseTexture> {\r\n        if (!light._loaded) {\r\n            const promises = new Array<Promise<any>>();\r\n\r\n            this._loader.logOpen(`${context}`);\r\n\r\n            const imageData = new Array<Array<ArrayBufferView>>(light.specularImages.length);\r\n            for (let mipmap = 0; mipmap < light.specularImages.length; mipmap++) {\r\n                const faces = light.specularImages[mipmap];\r\n                imageData[mipmap] = new Array<ArrayBufferView>(faces.length);\r\n                for (let face = 0; face < faces.length; face++) {\r\n                    const specularImageContext = `${context}/specularImages/${mipmap}/${face}`;\r\n                    this._loader.logOpen(`${specularImageContext}`);\r\n\r\n                    const index = faces[face];\r\n                    const image = ArrayItem.Get(specularImageContext, this._loader.gltf.images, index);\r\n                    promises.push(\r\n                        this._loader.loadImageAsync(`/images/${index}`, image).then((data) => {\r\n                            imageData[mipmap][face] = data;\r\n                        })\r\n                    );\r\n\r\n                    this._loader.logClose();\r\n                }\r\n            }\r\n\r\n            this._loader.logClose();\r\n\r\n            light._loaded = Promise.all(promises).then(() => {\r\n                const babylonTexture = new RawCubeTexture(this._loader.babylonScene, null, light.specularImageSize);\r\n                babylonTexture.name = light.name || \"environment\";\r\n                light._babylonTexture = babylonTexture;\r\n\r\n                if (light.intensity != undefined) {\r\n                    babylonTexture.level = light.intensity;\r\n                }\r\n\r\n                if (light.rotation) {\r\n                    let rotation = Quaternion.FromArray(light.rotation);\r\n\r\n                    // Invert the rotation so that positive rotation is counter-clockwise.\r\n                    if (!this._loader.babylonScene.useRightHandedSystem) {\r\n                        rotation = Quaternion.Inverse(rotation);\r\n                    }\r\n\r\n                    Matrix.FromQuaternionToRef(rotation, babylonTexture.getReflectionTextureMatrix());\r\n                }\r\n\r\n                if (!light.irradianceCoefficients) {\r\n                    throw new Error(`${context}: Irradiance coefficients are missing`);\r\n                }\r\n\r\n                const sphericalHarmonics = SphericalHarmonics.FromArray(light.irradianceCoefficients);\r\n                sphericalHarmonics.scaleInPlace(light.intensity);\r\n\r\n                sphericalHarmonics.convertIrradianceToLambertianRadiance();\r\n                const sphericalPolynomial = SphericalPolynomial.FromHarmonics(sphericalHarmonics);\r\n\r\n                // Compute the lod generation scale to fit exactly to the number of levels available.\r\n                const lodGenerationScale = (imageData.length - 1) / Scalar.Log2(light.specularImageSize);\r\n                return babylonTexture.updateRGBDAsync(imageData, sphericalPolynomial, lodGenerationScale);\r\n            });\r\n        }\r\n\r\n        return light._loaded.then(() => {\r\n            return light._babylonTexture!;\r\n        });\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new EXT_lights_image_based(loader));\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}