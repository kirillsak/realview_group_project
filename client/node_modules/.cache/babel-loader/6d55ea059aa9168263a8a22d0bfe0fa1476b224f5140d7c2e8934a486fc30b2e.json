{"ast":null,"code":"import { WebXRLayerWrapper } from \"./webXRLayerWrapper.js\";\nimport { WebXRLayerRenderTargetTextureProvider } from \"./webXRRenderTargetTextureProvider.js\";\n/**\n * Wraps xr webgl layers.\n * @internal\n */\nexport class WebXRWebGLLayerWrapper extends WebXRLayerWrapper {\n  /**\n   * @param layer is the layer to be wrapped.\n   * @returns a new WebXRLayerWrapper wrapping the provided XRWebGLLayer.\n   */\n  constructor(layer) {\n    super(() => layer.framebufferWidth, () => layer.framebufferHeight, layer, \"XRWebGLLayer\", sessionManager => new WebXRWebGLLayerRenderTargetTextureProvider(sessionManager.scene, this));\n    this.layer = layer;\n  }\n}\n/**\n * Provides render target textures and other important rendering information for a given XRWebGLLayer.\n * @internal\n */\nexport class WebXRWebGLLayerRenderTargetTextureProvider extends WebXRLayerRenderTargetTextureProvider {\n  constructor(scene, layerWrapper) {\n    super(scene, layerWrapper);\n    this.layerWrapper = layerWrapper;\n    this._layer = layerWrapper.layer;\n    this._framebufferDimensions = {\n      framebufferWidth: this._layer.framebufferWidth,\n      framebufferHeight: this._layer.framebufferHeight\n    };\n  }\n  trySetViewportForView(viewport, view) {\n    const xrViewport = this._layer.getViewport(view);\n    if (!xrViewport) {\n      return false;\n    }\n    const framebufferWidth = this._framebufferDimensions.framebufferWidth;\n    const framebufferHeight = this._framebufferDimensions.framebufferHeight;\n    viewport.x = xrViewport.x / framebufferWidth;\n    viewport.y = xrViewport.y / framebufferHeight;\n    viewport.width = xrViewport.width / framebufferWidth;\n    viewport.height = xrViewport.height / framebufferHeight;\n    return true;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getRenderTargetTextureForEye(eye) {\n    const layerWidth = this._layer.framebufferWidth;\n    const layerHeight = this._layer.framebufferHeight;\n    const framebuffer = this._layer.framebuffer;\n    if (!this._rtt || layerWidth !== this._framebufferDimensions.framebufferWidth || layerHeight !== this._framebufferDimensions.framebufferHeight || framebuffer !== this._framebuffer) {\n      this._rtt = this._createRenderTargetTexture(layerWidth, layerHeight, framebuffer);\n      this._framebufferDimensions.framebufferWidth = layerWidth;\n      this._framebufferDimensions.framebufferHeight = layerHeight;\n      this._framebuffer = framebuffer;\n    }\n    return this._rtt;\n  }\n  getRenderTargetTextureForView(view) {\n    return this.getRenderTargetTextureForEye(view.eye);\n  }\n}","map":{"version":3,"mappings":"AAIA,SAASA,iBAAiB,QAAQ,wBAAsB;AACxD,SAASC,qCAAqC,QAAQ,uCAAqC;AAE3F;;;;AAIA,OAAM,MAAOC,sBAAuB,SAAQF,iBAAiB;EACzD;;;;EAIAG,YAA4BC,KAAmB;IAC3C,KAAK,CACD,MAAMA,KAAK,CAACC,gBAAgB,EAC5B,MAAMD,KAAK,CAACE,iBAAiB,EAC7BF,KAAK,EACL,cAAc,EACbG,cAAc,IAAK,IAAIC,0CAA0C,CAACD,cAAc,CAACE,KAAK,EAAE,IAAI,CAAC,CACjG;IAPuB,UAAK,GAALL,KAAK;EAQjC;;AAGJ;;;;AAIA,OAAM,MAAOI,0CAA2C,SAAQP,qCAAqC;EAOjGE,YAAYM,KAAY,EAAkBC,YAAoC;IAC1E,KAAK,CAACD,KAAK,EAAEC,YAAY,CAAC;IADY,iBAAY,GAAZA,YAAY;IAElD,IAAI,CAACC,MAAM,GAAGD,YAAY,CAACN,KAAK;IAChC,IAAI,CAACQ,sBAAsB,GAAG;MAC1BP,gBAAgB,EAAE,IAAI,CAACM,MAAM,CAACN,gBAAgB;MAC9CC,iBAAiB,EAAE,IAAI,CAACK,MAAM,CAACL;KAClC;EACL;EAEOO,qBAAqB,CAACC,QAAkB,EAAEC,IAAY;IACzD,MAAMC,UAAU,GAAG,IAAI,CAACL,MAAM,CAACM,WAAW,CAACF,IAAI,CAAC;IAChD,IAAI,CAACC,UAAU,EAAE;MACb,OAAO,KAAK;;IAEhB,MAAMX,gBAAgB,GAAG,IAAI,CAACO,sBAAsB,CAACP,gBAAgB;IACrE,MAAMC,iBAAiB,GAAG,IAAI,CAACM,sBAAsB,CAACN,iBAAiB;IACvEQ,QAAQ,CAACI,CAAC,GAAGF,UAAU,CAACE,CAAC,GAAGb,gBAAgB;IAC5CS,QAAQ,CAACK,CAAC,GAAGH,UAAU,CAACG,CAAC,GAAGb,iBAAiB;IAC7CQ,QAAQ,CAACM,KAAK,GAAGJ,UAAU,CAACI,KAAK,GAAGf,gBAAgB;IACpDS,QAAQ,CAACO,MAAM,GAAGL,UAAU,CAACK,MAAM,GAAGf,iBAAiB;IACvD,OAAO,IAAI;EACf;EAEA;EACOgB,4BAA4B,CAACC,GAAU;IAC1C,MAAMC,UAAU,GAAG,IAAI,CAACb,MAAM,CAACN,gBAAgB;IAC/C,MAAMoB,WAAW,GAAG,IAAI,CAACd,MAAM,CAACL,iBAAiB;IACjD,MAAMoB,WAAW,GAAG,IAAI,CAACf,MAAM,CAACe,WAAW;IAE3C,IACI,CAAC,IAAI,CAACC,IAAI,IACVH,UAAU,KAAK,IAAI,CAACZ,sBAAsB,CAACP,gBAAgB,IAC3DoB,WAAW,KAAK,IAAI,CAACb,sBAAsB,CAACN,iBAAiB,IAC7DoB,WAAW,KAAK,IAAI,CAACE,YAAY,EACnC;MACE,IAAI,CAACD,IAAI,GAAG,IAAI,CAACE,0BAA0B,CAACL,UAAU,EAAEC,WAAW,EAAEC,WAAW,CAAC;MACjF,IAAI,CAACd,sBAAsB,CAACP,gBAAgB,GAAGmB,UAAU;MACzD,IAAI,CAACZ,sBAAsB,CAACN,iBAAiB,GAAGmB,WAAW;MAC3D,IAAI,CAACG,YAAY,GAAGF,WAAW;;IAGnC,OAAO,IAAI,CAACC,IAAI;EACpB;EAEOG,6BAA6B,CAACf,IAAY;IAC7C,OAAO,IAAI,CAACO,4BAA4B,CAACP,IAAI,CAACQ,GAAG,CAAC;EACtD","names":["WebXRLayerWrapper","WebXRLayerRenderTargetTextureProvider","WebXRWebGLLayerWrapper","constructor","layer","framebufferWidth","framebufferHeight","sessionManager","WebXRWebGLLayerRenderTargetTextureProvider","scene","layerWrapper","_layer","_framebufferDimensions","trySetViewportForView","viewport","view","xrViewport","getViewport","x","y","width","height","getRenderTargetTextureForEye","eye","layerWidth","layerHeight","framebuffer","_rtt","_framebuffer","_createRenderTargetTexture","getRenderTargetTextureForView"],"sourceRoot":"","sources":["../../../../lts/core/generated/XR/webXRWebGLLayer.ts"],"sourcesContent":["import type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport type { Viewport } from \"../Maths/math.viewport\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Nullable } from \"../types\";\r\nimport { WebXRLayerWrapper } from \"./webXRLayerWrapper\";\r\nimport { WebXRLayerRenderTargetTextureProvider } from \"./webXRRenderTargetTextureProvider\";\r\n\r\n/**\r\n * Wraps xr webgl layers.\r\n * @internal\r\n */\r\nexport class WebXRWebGLLayerWrapper extends WebXRLayerWrapper {\r\n    /**\r\n     * @param layer is the layer to be wrapped.\r\n     * @returns a new WebXRLayerWrapper wrapping the provided XRWebGLLayer.\r\n     */\r\n    constructor(public readonly layer: XRWebGLLayer) {\r\n        super(\r\n            () => layer.framebufferWidth,\r\n            () => layer.framebufferHeight,\r\n            layer,\r\n            \"XRWebGLLayer\",\r\n            (sessionManager) => new WebXRWebGLLayerRenderTargetTextureProvider(sessionManager.scene, this)\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Provides render target textures and other important rendering information for a given XRWebGLLayer.\r\n * @internal\r\n */\r\nexport class WebXRWebGLLayerRenderTargetTextureProvider extends WebXRLayerRenderTargetTextureProvider {\r\n    // The dimensions will always be defined in this class.\r\n    protected _framebufferDimensions: { framebufferWidth: number; framebufferHeight: number };\r\n    private _rtt: Nullable<RenderTargetTexture>;\r\n    private _framebuffer: WebGLFramebuffer;\r\n    private _layer: XRWebGLLayer;\r\n\r\n    constructor(scene: Scene, public readonly layerWrapper: WebXRWebGLLayerWrapper) {\r\n        super(scene, layerWrapper);\r\n        this._layer = layerWrapper.layer;\r\n        this._framebufferDimensions = {\r\n            framebufferWidth: this._layer.framebufferWidth,\r\n            framebufferHeight: this._layer.framebufferHeight,\r\n        };\r\n    }\r\n\r\n    public trySetViewportForView(viewport: Viewport, view: XRView): boolean {\r\n        const xrViewport = this._layer.getViewport(view);\r\n        if (!xrViewport) {\r\n            return false;\r\n        }\r\n        const framebufferWidth = this._framebufferDimensions.framebufferWidth;\r\n        const framebufferHeight = this._framebufferDimensions.framebufferHeight;\r\n        viewport.x = xrViewport.x / framebufferWidth;\r\n        viewport.y = xrViewport.y / framebufferHeight;\r\n        viewport.width = xrViewport.width / framebufferWidth;\r\n        viewport.height = xrViewport.height / framebufferHeight;\r\n        return true;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getRenderTargetTextureForEye(eye: XREye): Nullable<RenderTargetTexture> {\r\n        const layerWidth = this._layer.framebufferWidth;\r\n        const layerHeight = this._layer.framebufferHeight;\r\n        const framebuffer = this._layer.framebuffer;\r\n\r\n        if (\r\n            !this._rtt ||\r\n            layerWidth !== this._framebufferDimensions.framebufferWidth ||\r\n            layerHeight !== this._framebufferDimensions.framebufferHeight ||\r\n            framebuffer !== this._framebuffer\r\n        ) {\r\n            this._rtt = this._createRenderTargetTexture(layerWidth, layerHeight, framebuffer);\r\n            this._framebufferDimensions.framebufferWidth = layerWidth;\r\n            this._framebufferDimensions.framebufferHeight = layerHeight;\r\n            this._framebuffer = framebuffer;\r\n        }\r\n\r\n        return this._rtt;\r\n    }\r\n\r\n    public getRenderTargetTextureForView(view: XRView): Nullable<RenderTargetTexture> {\r\n        return this.getRenderTargetTextureForEye(view.eye);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}