{"ast":null,"code":"import { DeviceEventFactory } from \"./eventFactory.js\";\nimport { DeviceType } from \"./InputDevices/deviceEnums.js\";\n/** @internal */\nexport class NativeDeviceInputSystem {\n  constructor(onDeviceConnected, onDeviceDisconnected, onInputChanged) {\n    this._nativeInput = _native.DeviceInputSystem ? new _native.DeviceInputSystem(onDeviceConnected, onDeviceDisconnected, (deviceType, deviceSlot, inputIndex, currentState) => {\n      const evt = DeviceEventFactory.CreateDeviceEvent(deviceType, deviceSlot, inputIndex, currentState, this);\n      onInputChanged(deviceType, deviceSlot, evt);\n    }) : this._createDummyNativeInput();\n  }\n  // Public functions\n  /**\n   * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\n   * @param deviceType Enum specifying device type\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   * @returns Current value of input\n   */\n  pollInput(deviceType, deviceSlot, inputIndex) {\n    return this._nativeInput.pollInput(deviceType, deviceSlot, inputIndex);\n  }\n  /**\n   * Check for a specific device in the DeviceInputSystem\n   * @param deviceType Type of device to check for\n   * @returns bool with status of device's existence\n   */\n  isDeviceAvailable(deviceType) {\n    //TODO: FIx native side first\n    return deviceType === DeviceType.Mouse || deviceType === DeviceType.Touch;\n  }\n  /**\n   * Dispose of all the observables\n   */\n  dispose() {\n    this._nativeInput.dispose();\n  }\n  /**\n   * For versions of BabylonNative that don't have the NativeInput plugin initialized, create a dummy version\n   * @returns Object with dummy functions\n   */\n  _createDummyNativeInput() {\n    const nativeInput = {\n      pollInput: () => {\n        return 0;\n      },\n      isDeviceAvailable: () => {\n        return false;\n      },\n      dispose: () => {}\n    };\n    return nativeInput;\n  }\n}","map":{"version":3,"mappings":"AAEA,SAASA,kBAAkB,QAAQ,mBAAiB;AACpD,SAASC,UAAU,QAAQ,+BAA6B;AAKxD;AACA,OAAM,MAAOC,uBAAuB;EAGhCC,YACIC,iBAAuE,EACvEC,oBAA0E,EAC1EC,cAAyF;IAEzF,IAAI,CAACC,YAAY,GAAGC,OAAO,CAACC,iBAAiB,GACvC,IAAID,OAAO,CAACC,iBAAiB,CAACL,iBAAiB,EAAEC,oBAAoB,EAAE,CAACK,UAAU,EAAEC,UAAU,EAAEC,UAAU,EAAEC,YAAY,KAAI;MACxH,MAAMC,GAAG,GAAGd,kBAAkB,CAACe,iBAAiB,CAACL,UAAU,EAAEC,UAAU,EAAEC,UAAU,EAAEC,YAAY,EAAE,IAAI,CAAC;MAExGP,cAAc,CAACI,UAAU,EAAEC,UAAU,EAAEG,GAAG,CAAC;IAC/C,CAAC,CAAC,GACF,IAAI,CAACE,uBAAuB,EAAE;EACxC;EAEA;EACA;;;;;;;EAOOC,SAAS,CAACP,UAAsB,EAAEC,UAAkB,EAAEC,UAAkB;IAC3E,OAAO,IAAI,CAACL,YAAY,CAACU,SAAS,CAACP,UAAU,EAAEC,UAAU,EAAEC,UAAU,CAAC;EAC1E;EAEA;;;;;EAKOM,iBAAiB,CAACR,UAAsB;IAC3C;IACA,OAAOA,UAAU,KAAKT,UAAU,CAACkB,KAAK,IAAIT,UAAU,KAAKT,UAAU,CAACmB,KAAK;EAC7E;EAEA;;;EAGOC,OAAO;IACV,IAAI,CAACd,YAAY,CAACc,OAAO,EAAE;EAC/B;EAEA;;;;EAIQL,uBAAuB;IAC3B,MAAMM,WAAW,GAAG;MAChBL,SAAS,EAAE,MAAK;QACZ,OAAO,CAAC;MACZ,CAAC;MACDC,iBAAiB,EAAE,MAAK;QACpB,OAAO,KAAK;MAChB,CAAC;MACDG,OAAO,EAAE,MAAK,CAAE;KACnB;IAED,OAAOC,WAAW;EACtB","names":["DeviceEventFactory","DeviceType","NativeDeviceInputSystem","constructor","onDeviceConnected","onDeviceDisconnected","onInputChanged","_nativeInput","_native","DeviceInputSystem","deviceType","deviceSlot","inputIndex","currentState","evt","CreateDeviceEvent","_createDummyNativeInput","pollInput","isDeviceAvailable","Mouse","Touch","dispose","nativeInput"],"sourceRoot":"","sources":["../../../../lts/core/generated/DeviceInput/nativeDeviceInputSystem.ts"],"sourcesContent":["import type { INative } from \"../Engines/Native/nativeInterfaces\";\r\nimport type { IUIEvent } from \"../Events/deviceInputEvents\";\r\nimport { DeviceEventFactory } from \"./eventFactory\";\r\nimport { DeviceType } from \"./InputDevices/deviceEnums\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\n\r\ndeclare const _native: INative;\r\n\r\n/** @internal */\r\nexport class NativeDeviceInputSystem implements IDeviceInputSystem {\r\n    private readonly _nativeInput: IDeviceInputSystem;\r\n\r\n    public constructor(\r\n        onDeviceConnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onDeviceDisconnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onInputChanged: (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => void\r\n    ) {\r\n        this._nativeInput = _native.DeviceInputSystem\r\n            ? new _native.DeviceInputSystem(onDeviceConnected, onDeviceDisconnected, (deviceType, deviceSlot, inputIndex, currentState) => {\r\n                  const evt = DeviceEventFactory.CreateDeviceEvent(deviceType, deviceSlot, inputIndex, currentState, this);\r\n\r\n                  onInputChanged(deviceType, deviceSlot, evt);\r\n              })\r\n            : this._createDummyNativeInput();\r\n    }\r\n\r\n    // Public functions\r\n    /**\r\n     * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @returns Current value of input\r\n     */\r\n    public pollInput(deviceType: DeviceType, deviceSlot: number, inputIndex: number): number {\r\n        return this._nativeInput.pollInput(deviceType, deviceSlot, inputIndex);\r\n    }\r\n\r\n    /**\r\n     * Check for a specific device in the DeviceInputSystem\r\n     * @param deviceType Type of device to check for\r\n     * @returns bool with status of device's existence\r\n     */\r\n    public isDeviceAvailable(deviceType: DeviceType): boolean {\r\n        //TODO: FIx native side first\r\n        return deviceType === DeviceType.Mouse || deviceType === DeviceType.Touch;\r\n    }\r\n\r\n    /**\r\n     * Dispose of all the observables\r\n     */\r\n    public dispose(): void {\r\n        this._nativeInput.dispose();\r\n    }\r\n\r\n    /**\r\n     * For versions of BabylonNative that don't have the NativeInput plugin initialized, create a dummy version\r\n     * @returns Object with dummy functions\r\n     */\r\n    private _createDummyNativeInput() {\r\n        const nativeInput = {\r\n            pollInput: () => {\r\n                return 0;\r\n            },\r\n            isDeviceAvailable: () => {\r\n                return false;\r\n            },\r\n            dispose: () => {},\r\n        };\r\n\r\n        return nativeInput;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}