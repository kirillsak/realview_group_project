{"ast":null,"code":"import { __decorate } from \"../../tslib.es6.js\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Manage the mouse wheel inputs to control a follow camera.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\n */\nexport class FollowCameraMouseWheelInput {\n  constructor() {\n    /**\n     * Moue wheel controls zoom. (Mouse wheel modifies camera.radius value.)\n     */\n    this.axisControlRadius = true;\n    /**\n     * Moue wheel controls height. (Mouse wheel modifies camera.heightOffset value.)\n     */\n    this.axisControlHeight = false;\n    /**\n     * Moue wheel controls angle. (Mouse wheel modifies camera.rotationOffset value.)\n     */\n    this.axisControlRotation = false;\n    /**\n     * Gets or Set the mouse wheel precision or how fast is the camera moves in\n     * relation to mouseWheel events.\n     */\n    this.wheelPrecision = 3.0;\n    /**\n     * wheelDeltaPercentage will be used instead of wheelPrecision if different from 0.\n     * It defines the percentage of current camera.radius to use as delta when wheel is used.\n     */\n    this.wheelDeltaPercentage = 0;\n  }\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n   */\n  attachControl(noPreventDefault) {\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n    this._wheel = p => {\n      // sanity check - this should be a PointerWheel event.\n      if (p.type !== PointerEventTypes.POINTERWHEEL) {\n        return;\n      }\n      const event = p.event;\n      let delta = 0;\n      const wheelDelta = Math.max(-1, Math.min(1, event.deltaY));\n      if (this.wheelDeltaPercentage) {\n        console.assert(this.axisControlRadius + this.axisControlHeight + this.axisControlRotation <= 1, \"wheelDeltaPercentage only usable when mouse wheel \" + \"controls ONE axis. \" + \"Currently enabled: \" + \"axisControlRadius: \" + this.axisControlRadius + \", axisControlHeightOffset: \" + this.axisControlHeight + \", axisControlRotationOffset: \" + this.axisControlRotation);\n        if (this.axisControlRadius) {\n          delta = wheelDelta * 0.01 * this.wheelDeltaPercentage * this.camera.radius;\n        } else if (this.axisControlHeight) {\n          delta = wheelDelta * 0.01 * this.wheelDeltaPercentage * this.camera.heightOffset;\n        } else if (this.axisControlRotation) {\n          delta = wheelDelta * 0.01 * this.wheelDeltaPercentage * this.camera.rotationOffset;\n        }\n      } else {\n        delta = wheelDelta * this.wheelPrecision;\n      }\n      if (delta) {\n        if (this.axisControlRadius) {\n          this.camera.radius += delta;\n        } else if (this.axisControlHeight) {\n          this.camera.heightOffset -= delta;\n        } else if (this.axisControlRotation) {\n          this.camera.rotationOffset -= delta;\n        }\n      }\n      if (event.preventDefault) {\n        if (!noPreventDefault) {\n          event.preventDefault();\n        }\n      }\n    };\n    this._observer = this.camera.getScene()._inputManager._addCameraPointerObserver(this._wheel, PointerEventTypes.POINTERWHEEL);\n  }\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n  detachControl() {\n    if (this._observer) {\n      this.camera.getScene()._inputManager._removeCameraPointerObserver(this._observer);\n      this._observer = null;\n      this._wheel = null;\n    }\n  }\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n  getClassName() {\n    return \"ArcRotateCameraMouseWheelInput\";\n  }\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n  getSimpleName() {\n    return \"mousewheel\";\n  }\n}\n__decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"axisControlRadius\", void 0);\n__decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"axisControlHeight\", void 0);\n__decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"axisControlRotation\", void 0);\n__decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"wheelPrecision\", void 0);\n__decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"wheelDeltaPercentage\", void 0);\nCameraInputTypes[\"FollowCameraMouseWheelInput\"] = FollowCameraMouseWheelInput;","map":{"version":3,"mappings":";AACA,SAASA,SAAS,QAAQ,0BAAwB;AAIlD,SAASC,gBAAgB,QAAQ,sCAAoC;AAErE,SAASC,iBAAiB,QAAQ,+BAA6B;AAE/D,SAASC,KAAK,QAAQ,qBAAmB;AAEzC;;;;AAIA,OAAM,MAAOC,2BAA2B;EAAxCC;IAMI;;;IAIO,sBAAiB,GAAY,IAAI;IAExC;;;IAIO,sBAAiB,GAAY,KAAK;IAEzC;;;IAIO,wBAAmB,GAAY,KAAK;IAE3C;;;;IAKO,mBAAc,GAAG,GAAG;IAE3B;;;;IAKO,yBAAoB,GAAG,CAAC;EA2FnC;EAtFI;;;;EAIOC,aAAa,CAACC,gBAA0B;IAC3CA,gBAAgB,GAAGJ,KAAK,CAACK,gCAAgC,CAACC,SAAS,CAAC;IACpE,IAAI,CAACC,MAAM,GAAIC,CAAC,IAAI;MAChB;MACA,IAAIA,CAAC,CAACC,IAAI,KAAKV,iBAAiB,CAACW,YAAY,EAAE;QAC3C;;MAEJ,MAAMC,KAAK,GAAgBH,CAAC,CAACG,KAAK;MAClC,IAAIC,KAAK,GAAG,CAAC;MAEb,MAAMC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEL,KAAK,CAACM,MAAM,CAAC,CAAC;MAC1D,IAAI,IAAI,CAACC,oBAAoB,EAAE;QAC3BC,OAAO,CAACC,MAAM,CACQ,IAAI,CAACC,iBAAkB,GAAqB,IAAI,CAACC,iBAAkB,GAAqB,IAAI,CAACC,mBAAoB,IAAI,CAAC,EACxI,oDAAoD,GAChD,qBAAqB,GACrB,qBAAqB,GACrB,qBAAqB,GACrB,IAAI,CAACF,iBAAiB,GACtB,6BAA6B,GAC7B,IAAI,CAACC,iBAAiB,GACtB,+BAA+B,GAC/B,IAAI,CAACC,mBAAmB,CAC/B;QAED,IAAI,IAAI,CAACF,iBAAiB,EAAE;UACxBT,KAAK,GAAGC,UAAU,GAAG,IAAI,GAAG,IAAI,CAACK,oBAAoB,GAAG,IAAI,CAACM,MAAM,CAACC,MAAM;SAC7E,MAAM,IAAI,IAAI,CAACH,iBAAiB,EAAE;UAC/BV,KAAK,GAAGC,UAAU,GAAG,IAAI,GAAG,IAAI,CAACK,oBAAoB,GAAG,IAAI,CAACM,MAAM,CAACE,YAAY;SACnF,MAAM,IAAI,IAAI,CAACH,mBAAmB,EAAE;UACjCX,KAAK,GAAGC,UAAU,GAAG,IAAI,GAAG,IAAI,CAACK,oBAAoB,GAAG,IAAI,CAACM,MAAM,CAACG,cAAc;;OAEzF,MAAM;QACHf,KAAK,GAAGC,UAAU,GAAG,IAAI,CAACe,cAAc;;MAG5C,IAAIhB,KAAK,EAAE;QACP,IAAI,IAAI,CAACS,iBAAiB,EAAE;UACxB,IAAI,CAACG,MAAM,CAACC,MAAM,IAAIb,KAAK;SAC9B,MAAM,IAAI,IAAI,CAACU,iBAAiB,EAAE;UAC/B,IAAI,CAACE,MAAM,CAACE,YAAY,IAAId,KAAK;SACpC,MAAM,IAAI,IAAI,CAACW,mBAAmB,EAAE;UACjC,IAAI,CAACC,MAAM,CAACG,cAAc,IAAIf,KAAK;;;MAI3C,IAAID,KAAK,CAACkB,cAAc,EAAE;QACtB,IAAI,CAACzB,gBAAgB,EAAE;UACnBO,KAAK,CAACkB,cAAc,EAAE;;;IAGlC,CAAC;IAED,IAAI,CAACC,SAAS,GAAG,IAAI,CAACN,MAAM,CAACO,QAAQ,EAAE,CAACC,aAAa,CAACC,yBAAyB,CAAC,IAAI,CAAC1B,MAAM,EAAER,iBAAiB,CAACW,YAAY,CAAC;EAChI;EAEA;;;EAGOwB,aAAa;IAChB,IAAI,IAAI,CAACJ,SAAS,EAAE;MAChB,IAAI,CAACN,MAAM,CAACO,QAAQ,EAAE,CAACC,aAAa,CAACG,4BAA4B,CAAC,IAAI,CAACL,SAAS,CAAC;MACjF,IAAI,CAACA,SAAS,GAAG,IAAI;MACrB,IAAI,CAACvB,MAAM,GAAG,IAAI;;EAE1B;EAEA;;;;EAIO6B,YAAY;IACf,OAAO,gCAAgC;EAC3C;EAEA;;;;EAIOC,aAAa;IAChB,OAAO,YAAY;EACvB;;AApHAC,YADCzC,SAAS,EAAE,sEAC6B;AAMzCyC,YADCzC,SAAS,EAAE,sEAC8B;AAM1CyC,YADCzC,SAAS,EAAE,wEACgC;AAO5CyC,YADCzC,SAAS,EAAE,mEACgB;AAO5ByC,YADCzC,SAAS,EAAE,yEACoB;AA6F9BC,gBAAiB,CAAC,6BAA6B,CAAC,GAAGG,2BAA2B","names":["serialize","CameraInputTypes","PointerEventTypes","Tools","FollowCameraMouseWheelInput","constructor","attachControl","noPreventDefault","BackCompatCameraNoPreventDefault","arguments","_wheel","p","type","POINTERWHEEL","event","delta","wheelDelta","Math","max","min","deltaY","wheelDeltaPercentage","console","assert","axisControlRadius","axisControlHeight","axisControlRotation","camera","radius","heightOffset","rotationOffset","wheelPrecision","preventDefault","_observer","getScene","_inputManager","_addCameraPointerObserver","detachControl","_removeCameraPointerObserver","getClassName","getSimpleName","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/Inputs/followCameraMouseWheelInput.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { EventState, Observer } from \"../../Misc/observable\";\r\nimport type { FollowCamera } from \"../../Cameras/followCamera\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { PointerInfo } from \"../../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport type { IWheelEvent } from \"../../Events/deviceInputEvents\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n\r\n/**\r\n * Manage the mouse wheel inputs to control a follow camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class FollowCameraMouseWheelInput implements ICameraInput<FollowCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FollowCamera;\r\n\r\n    /**\r\n     * Moue wheel controls zoom. (Mouse wheel modifies camera.radius value.)\r\n     */\r\n    @serialize()\r\n    public axisControlRadius: boolean = true;\r\n\r\n    /**\r\n     * Moue wheel controls height. (Mouse wheel modifies camera.heightOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisControlHeight: boolean = false;\r\n\r\n    /**\r\n     * Moue wheel controls angle. (Mouse wheel modifies camera.rotationOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisControlRotation: boolean = false;\r\n\r\n    /**\r\n     * Gets or Set the mouse wheel precision or how fast is the camera moves in\r\n     * relation to mouseWheel events.\r\n     */\r\n    @serialize()\r\n    public wheelPrecision = 3.0;\r\n\r\n    /**\r\n     * wheelDeltaPercentage will be used instead of wheelPrecision if different from 0.\r\n     * It defines the percentage of current camera.radius to use as delta when wheel is used.\r\n     */\r\n    @serialize()\r\n    public wheelDeltaPercentage = 0;\r\n\r\n    private _wheel: Nullable<(p: PointerInfo, s: EventState) => void>;\r\n    private _observer: Nullable<Observer<PointerInfo>>;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        this._wheel = (p) => {\r\n            // sanity check - this should be a PointerWheel event.\r\n            if (p.type !== PointerEventTypes.POINTERWHEEL) {\r\n                return;\r\n            }\r\n            const event = <IWheelEvent>p.event;\r\n            let delta = 0;\r\n\r\n            const wheelDelta = Math.max(-1, Math.min(1, event.deltaY));\r\n            if (this.wheelDeltaPercentage) {\r\n                console.assert(\r\n                    <number>(<unknown>this.axisControlRadius) + <number>(<unknown>this.axisControlHeight) + <number>(<unknown>this.axisControlRotation) <= 1,\r\n                    \"wheelDeltaPercentage only usable when mouse wheel \" +\r\n                        \"controls ONE axis. \" +\r\n                        \"Currently enabled: \" +\r\n                        \"axisControlRadius: \" +\r\n                        this.axisControlRadius +\r\n                        \", axisControlHeightOffset: \" +\r\n                        this.axisControlHeight +\r\n                        \", axisControlRotationOffset: \" +\r\n                        this.axisControlRotation\r\n                );\r\n\r\n                if (this.axisControlRadius) {\r\n                    delta = wheelDelta * 0.01 * this.wheelDeltaPercentage * this.camera.radius;\r\n                } else if (this.axisControlHeight) {\r\n                    delta = wheelDelta * 0.01 * this.wheelDeltaPercentage * this.camera.heightOffset;\r\n                } else if (this.axisControlRotation) {\r\n                    delta = wheelDelta * 0.01 * this.wheelDeltaPercentage * this.camera.rotationOffset;\r\n                }\r\n            } else {\r\n                delta = wheelDelta * this.wheelPrecision;\r\n            }\r\n\r\n            if (delta) {\r\n                if (this.axisControlRadius) {\r\n                    this.camera.radius += delta;\r\n                } else if (this.axisControlHeight) {\r\n                    this.camera.heightOffset -= delta;\r\n                } else if (this.axisControlRotation) {\r\n                    this.camera.rotationOffset -= delta;\r\n                }\r\n            }\r\n\r\n            if (event.preventDefault) {\r\n                if (!noPreventDefault) {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this._observer = this.camera.getScene()._inputManager._addCameraPointerObserver(this._wheel, PointerEventTypes.POINTERWHEEL);\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        if (this._observer) {\r\n            this.camera.getScene()._inputManager._removeCameraPointerObserver(this._observer);\r\n            this._observer = null;\r\n            this._wheel = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ArcRotateCameraMouseWheelInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"mousewheel\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FollowCameraMouseWheelInput\"] = FollowCameraMouseWheelInput;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}