{"ast":null,"code":"/**\n * Abstract class used to decouple action Manager from scene and meshes.\n * Do not instantiate.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\n */\nexport class AbstractActionManager {\n  constructor() {\n    /** Gets the cursor to use when hovering items */\n    this.hoverCursor = \"\";\n    /** Gets the list of actions */\n    this.actions = new Array();\n    /**\n     * Gets or sets a boolean indicating that the manager is recursive meaning that it can trigger action from children\n     */\n    this.isRecursive = false;\n  }\n  /**\n   * Does exist one action manager with at least one trigger\n   **/\n  static get HasTriggers() {\n    for (const t in AbstractActionManager.Triggers) {\n      if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Does exist one action manager with at least one pick trigger\n   **/\n  static get HasPickTriggers() {\n    for (const t in AbstractActionManager.Triggers) {\n      if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\n        const tAsInt = parseInt(t);\n        if (tAsInt >= 1 && tAsInt <= 7) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  /**\n   * Does exist one action manager that handles actions of a given trigger\n   * @param trigger defines the trigger to be tested\n   * @returns a boolean indicating whether the trigger is handled by at least one action manager\n   **/\n  static HasSpecificTrigger(trigger) {\n    for (const t in AbstractActionManager.Triggers) {\n      if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\n        const tAsInt = parseInt(t);\n        if (tAsInt === trigger) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n/** Gets the list of active triggers */\nAbstractActionManager.Triggers = {};","map":{"version":3,"mappings":"AAMA;;;;;AAKA,OAAM,MAAgBA,qBAAqB;EAA3CC;IAII;IACO,gBAAW,GAAW,EAAE;IAE/B;IACO,YAAO,GAAG,IAAIC,KAAK,EAAW;IAErC;;;IAGO,gBAAW,GAAG,KAAK;EAgH9B;EA3CI;;;EAGO,WAAWC,WAAW;IACzB,KAAK,MAAMC,CAAC,IAAIJ,qBAAqB,CAACK,QAAQ,EAAE;MAC5C,IAAIC,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACT,qBAAqB,CAACK,QAAQ,EAAED,CAAC,CAAC,EAAE;QACzE,OAAO,IAAI;;;IAGnB,OAAO,KAAK;EAChB;EAEA;;;EAGO,WAAWM,eAAe;IAC7B,KAAK,MAAMN,CAAC,IAAIJ,qBAAqB,CAACK,QAAQ,EAAE;MAC5C,IAAIC,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACT,qBAAqB,CAACK,QAAQ,EAAED,CAAC,CAAC,EAAE;QACzE,MAAMO,MAAM,GAAGC,QAAQ,CAACR,CAAC,CAAC;QAC1B,IAAIO,MAAM,IAAI,WAAU;UACpB,OAAO,IAAI;;;;IAIvB,OAAO,KAAK;EAChB;EAEA;;;;;EAKO,OAAOE,kBAAkB,CAACC,OAAe;IAC5C,KAAK,MAAMV,CAAC,IAAIJ,qBAAqB,CAACK,QAAQ,EAAE;MAC5C,IAAIC,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACT,qBAAqB,CAACK,QAAQ,EAAED,CAAC,CAAC,EAAE;QACzE,MAAMO,MAAM,GAAGC,QAAQ,CAACR,CAAC,CAAC;QAC1B,IAAIO,MAAM,KAAKG,OAAO,EAAE;UACpB,OAAO,IAAI;;;;IAIvB,OAAO,KAAK;EAChB;;AA3HA;AACcd,8BAAQ,GAA8B,EAAE","names":["AbstractActionManager","constructor","Array","HasTriggers","t","Triggers","Object","prototype","hasOwnProperty","call","HasPickTriggers","tAsInt","parseInt","HasSpecificTrigger","trigger"],"sourceRoot":"","sources":["../../../../lts/core/generated/Actions/abstractActionManager.ts"],"sourcesContent":["import type { IDisposable } from \"../scene\";\r\nimport type { IActionEvent } from \"./actionEvent\";\r\nimport type { IAction } from \"./action\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Nullable } from \"../types\";\r\n\r\n/**\r\n * Abstract class used to decouple action Manager from scene and meshes.\r\n * Do not instantiate.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport abstract class AbstractActionManager implements IDisposable {\r\n    /** Gets the list of active triggers */\r\n    public static Triggers: { [key: string]: number } = {};\r\n\r\n    /** Gets the cursor to use when hovering items */\r\n    public hoverCursor: string = \"\";\r\n\r\n    /** Gets the list of actions */\r\n    public actions = new Array<IAction>();\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the manager is recursive meaning that it can trigger action from children\r\n     */\r\n    public isRecursive = false;\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public abstract dispose(): void;\r\n\r\n    /**\r\n     * Does this action manager has pointer triggers\r\n     */\r\n    public abstract get hasPointerTriggers(): boolean;\r\n\r\n    /**\r\n     * Does this action manager has pick triggers\r\n     */\r\n    public abstract get hasPickTriggers(): boolean;\r\n\r\n    /**\r\n     * Process a specific trigger\r\n     * @param trigger defines the trigger to process\r\n     * @param evt defines the event details to be processed\r\n     */\r\n    public abstract processTrigger(trigger: number, evt?: IActionEvent): void;\r\n\r\n    /**\r\n     * Does this action manager handles actions of any of the given triggers\r\n     * @param triggers defines the triggers to be tested\r\n     * @returns a boolean indicating whether one (or more) of the triggers is handled\r\n     */\r\n    public abstract hasSpecificTriggers(triggers: number[]): boolean;\r\n\r\n    /**\r\n     * Does this action manager handles actions of any of the given triggers. This function takes two arguments for\r\n     * speed.\r\n     * @param triggerA defines the trigger to be tested\r\n     * @param triggerB defines the trigger to be tested\r\n     * @returns a boolean indicating whether one (or more) of the triggers is handled\r\n     */\r\n    public abstract hasSpecificTriggers2(triggerA: number, triggerB: number): boolean;\r\n\r\n    /**\r\n     * Does this action manager handles actions of a given trigger\r\n     * @param trigger defines the trigger to be tested\r\n     * @param parameterPredicate defines an optional predicate to filter triggers by parameter\r\n     * @returns whether the trigger is handled\r\n     */\r\n    public abstract hasSpecificTrigger(trigger: number, parameterPredicate?: (parameter: any) => boolean): boolean;\r\n\r\n    /**\r\n     * Serialize this manager to a JSON object\r\n     * @param name defines the property name to store this manager\r\n     * @returns a JSON representation of this manager\r\n     */\r\n    public abstract serialize(name: string): any;\r\n\r\n    /**\r\n     * Registers an action to this action manager\r\n     * @param action defines the action to be registered\r\n     * @returns the action amended (prepared) after registration\r\n     */\r\n    public abstract registerAction(action: IAction): Nullable<IAction>;\r\n\r\n    /**\r\n     * Unregisters an action to this action manager\r\n     * @param action defines the action to be unregistered\r\n     * @returns a boolean indicating whether the action has been unregistered\r\n     */\r\n    public abstract unregisterAction(action: IAction): Boolean;\r\n\r\n    /**\r\n     * Does exist one action manager with at least one trigger\r\n     **/\r\n    public static get HasTriggers(): boolean {\r\n        for (const t in AbstractActionManager.Triggers) {\r\n            if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Does exist one action manager with at least one pick trigger\r\n     **/\r\n    public static get HasPickTriggers(): boolean {\r\n        for (const t in AbstractActionManager.Triggers) {\r\n            if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\r\n                const tAsInt = parseInt(t);\r\n                if (tAsInt >= Constants.ACTION_OnPickTrigger && tAsInt <= Constants.ACTION_OnPickUpTrigger) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Does exist one action manager that handles actions of a given trigger\r\n     * @param trigger defines the trigger to be tested\r\n     * @returns a boolean indicating whether the trigger is handled by at least one action manager\r\n     **/\r\n    public static HasSpecificTrigger(trigger: number): boolean {\r\n        for (const t in AbstractActionManager.Triggers) {\r\n            if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\r\n                const tAsInt = parseInt(t);\r\n                if (tAsInt === trigger) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}