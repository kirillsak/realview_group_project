{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Mesh } from \"../mesh.js\";\nimport { VertexData } from \"../mesh.vertexData.js\";\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions.js\";\n/**\n * Creates the VertexData of the Disc or regular Polygon\n * @param options an object used to set the following optional parameters for the disc, required but can be empty\n * * radius the radius of the disc, optional default 0.5\n * * tessellation the number of polygon sides, optional, default 64\n * * arc a number from 0 to 1, to create an unclosed polygon based on the fraction of the circumference given by the arc value, optional, default 1\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n * @param options.radius\n * @param options.tessellation\n * @param options.arc\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @returns the VertexData of the box\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function CreateDiscVertexData(options) {\n  const positions = new Array();\n  const indices = new Array();\n  const normals = new Array();\n  const uvs = new Array();\n  const radius = options.radius || 0.5;\n  const tessellation = options.tessellation || 64;\n  const arc = options.arc && (options.arc <= 0 || options.arc > 1) ? 1.0 : options.arc || 1.0;\n  const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\n  // positions and uvs\n  positions.push(0, 0, 0); // disc center first\n  uvs.push(0.5, 0.5);\n  const theta = Math.PI * 2 * arc;\n  const step = arc === 1 ? theta / tessellation : theta / (tessellation - 1);\n  let a = 0;\n  for (let t = 0; t < tessellation; t++) {\n    const x = Math.cos(a);\n    const y = Math.sin(a);\n    const u = (x + 1) / 2;\n    const v = (1 - y) / 2;\n    positions.push(radius * x, radius * y, 0);\n    uvs.push(u, CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - v : v);\n    a += step;\n  }\n  if (arc === 1) {\n    positions.push(positions[3], positions[4], positions[5]); // close the circle\n    uvs.push(uvs[2], CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - uvs[3] : uvs[3]);\n  }\n  //indices\n  const vertexNb = positions.length / 3;\n  for (let i = 1; i < vertexNb - 1; i++) {\n    indices.push(i + 1, 0, i);\n  }\n  // result\n  VertexData.ComputeNormals(positions, indices, normals);\n  VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\n  const vertexData = new VertexData();\n  vertexData.indices = indices;\n  vertexData.positions = positions;\n  vertexData.normals = normals;\n  vertexData.uvs = uvs;\n  return vertexData;\n}\n/**\n * Creates a plane polygonal mesh.  By default, this is a disc\n * * The parameter `radius` sets the radius size (float) of the polygon (default 0.5)\n * * The parameter `tessellation` sets the number of polygon sides (positive integer, default 64). So a tessellation valued to 3 will build a triangle, to 4 a square, etc\n * * You can create an unclosed polygon with the parameter `arc` (positive float, default 1), valued between 0 and 1, what is the ratio of the circumference : 2 x PI x ratio\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\n * @param name defines the name of the mesh\n * @param options defines the options used to create the mesh\n * @param options.radius\n * @param options.tessellation\n * @param options.arc\n * @param options.updatable\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @param scene defines the hosting scene\n * @returns the plane polygonal mesh\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#disc-or-regular-polygon\n */\nexport function CreateDisc(name, options = {}, scene = null) {\n  const disc = new Mesh(name, scene);\n  options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n  disc._originalBuilderSideOrientation = options.sideOrientation;\n  const vertexData = CreateDiscVertexData(options);\n  vertexData.applyToMesh(disc, options.updatable);\n  return disc;\n}\n/**\n * Class containing static functions to help procedurally build meshes\n * @deprecated please use CreateDisc directly\n */\nexport const DiscBuilder = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  CreateDisc\n};\nVertexData.CreateDisc = CreateDiscVertexData;\nMesh.CreateDisc = (name, radius, tessellation, scene = null, updatable, sideOrientation) => {\n  const options = {\n    radius,\n    tessellation,\n    sideOrientation,\n    updatable\n  };\n  return CreateDisc(name, options, scene);\n};","map":{"version":3,"mappings":"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","names":["Mesh","VertexData","CompatibilityOptions","CreateDiscVertexData","options","positions","Array","indices","normals","uvs","radius","tessellation","arc","sideOrientation","DEFAULTSIDE","push","theta","Math","PI","step","a","t","x","cos","y","sin","u","v","UseOpenGLOrientationForUV","vertexNb","length","i","ComputeNormals","_ComputeSides","frontUVs","backUVs","vertexData","CreateDisc","name","scene","disc","_GetDefaultSideOrientation","_originalBuilderSideOrientation","applyToMesh","updatable","DiscBuilder"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Meshes/Builders/discBuilder.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData of the Disc or regular Polygon\r\n * @param options an object used to set the following optional parameters for the disc, required but can be empty\r\n * * radius the radius of the disc, optional default 0.5\r\n * * tessellation the number of polygon sides, optional, default 64\r\n * * arc a number from 0 to 1, to create an unclosed polygon based on the fraction of the circumference given by the arc value, optional, default 1\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.radius\r\n * @param options.tessellation\r\n * @param options.arc\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @returns the VertexData of the box\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function CreateDiscVertexData(options: {\r\n    radius?: number;\r\n    tessellation?: number;\r\n    arc?: number;\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n}): VertexData {\r\n    const positions = new Array<number>();\r\n    const indices = new Array<number>();\r\n    const normals = new Array<number>();\r\n    const uvs = new Array<number>();\r\n\r\n    const radius = options.radius || 0.5;\r\n    const tessellation = options.tessellation || 64;\r\n    const arc: number = options.arc && (options.arc <= 0 || options.arc > 1) ? 1.0 : options.arc || 1.0;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    // positions and uvs\r\n    positions.push(0, 0, 0); // disc center first\r\n    uvs.push(0.5, 0.5);\r\n\r\n    const theta = Math.PI * 2 * arc;\r\n    const step = arc === 1 ? theta / tessellation : theta / (tessellation - 1);\r\n    let a = 0;\r\n    for (let t = 0; t < tessellation; t++) {\r\n        const x = Math.cos(a);\r\n        const y = Math.sin(a);\r\n        const u = (x + 1) / 2;\r\n        const v = (1 - y) / 2;\r\n        positions.push(radius * x, radius * y, 0);\r\n        uvs.push(u, CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - v : v);\r\n        a += step;\r\n    }\r\n    if (arc === 1) {\r\n        positions.push(positions[3], positions[4], positions[5]); // close the circle\r\n        uvs.push(uvs[2], CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - uvs[3] : uvs[3]);\r\n    }\r\n\r\n    //indices\r\n    const vertexNb = positions.length / 3;\r\n    for (let i = 1; i < vertexNb - 1; i++) {\r\n        indices.push(i + 1, 0, i);\r\n    }\r\n\r\n    // result\r\n    VertexData.ComputeNormals(positions, indices, normals);\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a plane polygonal mesh.  By default, this is a disc\r\n * * The parameter `radius` sets the radius size (float) of the polygon (default 0.5)\r\n * * The parameter `tessellation` sets the number of polygon sides (positive integer, default 64). So a tessellation valued to 3 will build a triangle, to 4 a square, etc\r\n * * You can create an unclosed polygon with the parameter `arc` (positive float, default 1), valued between 0 and 1, what is the ratio of the circumference : 2 x PI x ratio\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.radius\r\n * @param options.tessellation\r\n * @param options.arc\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param scene defines the hosting scene\r\n * @returns the plane polygonal mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#disc-or-regular-polygon\r\n */\r\nexport function CreateDisc(\r\n    name: string,\r\n    options: { radius?: number; tessellation?: number; arc?: number; updatable?: boolean; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const disc = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    disc._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateDiscVertexData(options);\r\n\r\n    vertexData.applyToMesh(disc, options.updatable);\r\n\r\n    return disc;\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated please use CreateDisc directly\r\n */\r\nexport const DiscBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateDisc,\r\n};\r\n\r\nVertexData.CreateDisc = CreateDiscVertexData;\r\n\r\n(Mesh as any).CreateDisc = (name: string, radius: number, tessellation: number, scene: Nullable<Scene> = null, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        radius,\r\n        tessellation,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreateDisc(name, options, scene);\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}