{"ast":null,"code":"/**\n * @internal\n **/\nexport class AlphaState {\n  /**\n   * Initializes the state.\n   */\n  constructor() {\n    this._blendFunctionParameters = new Array(4);\n    this._blendEquationParameters = new Array(2);\n    this._blendConstants = new Array(4);\n    this._isBlendConstantsDirty = false;\n    this._alphaBlend = false;\n    this._isAlphaBlendDirty = false;\n    this._isBlendFunctionParametersDirty = false;\n    this._isBlendEquationParametersDirty = false;\n    this.reset();\n  }\n  get isDirty() {\n    return this._isAlphaBlendDirty || this._isBlendFunctionParametersDirty || this._isBlendEquationParametersDirty;\n  }\n  get alphaBlend() {\n    return this._alphaBlend;\n  }\n  set alphaBlend(value) {\n    if (this._alphaBlend === value) {\n      return;\n    }\n    this._alphaBlend = value;\n    this._isAlphaBlendDirty = true;\n  }\n  setAlphaBlendConstants(r, g, b, a) {\n    if (this._blendConstants[0] === r && this._blendConstants[1] === g && this._blendConstants[2] === b && this._blendConstants[3] === a) {\n      return;\n    }\n    this._blendConstants[0] = r;\n    this._blendConstants[1] = g;\n    this._blendConstants[2] = b;\n    this._blendConstants[3] = a;\n    this._isBlendConstantsDirty = true;\n  }\n  setAlphaBlendFunctionParameters(value0, value1, value2, value3) {\n    if (this._blendFunctionParameters[0] === value0 && this._blendFunctionParameters[1] === value1 && this._blendFunctionParameters[2] === value2 && this._blendFunctionParameters[3] === value3) {\n      return;\n    }\n    this._blendFunctionParameters[0] = value0;\n    this._blendFunctionParameters[1] = value1;\n    this._blendFunctionParameters[2] = value2;\n    this._blendFunctionParameters[3] = value3;\n    this._isBlendFunctionParametersDirty = true;\n  }\n  setAlphaEquationParameters(rgb, alpha) {\n    if (this._blendEquationParameters[0] === rgb && this._blendEquationParameters[1] === alpha) {\n      return;\n    }\n    this._blendEquationParameters[0] = rgb;\n    this._blendEquationParameters[1] = alpha;\n    this._isBlendEquationParametersDirty = true;\n  }\n  reset() {\n    this._alphaBlend = false;\n    this._blendFunctionParameters[0] = null;\n    this._blendFunctionParameters[1] = null;\n    this._blendFunctionParameters[2] = null;\n    this._blendFunctionParameters[3] = null;\n    this._blendEquationParameters[0] = null;\n    this._blendEquationParameters[1] = null;\n    this._blendConstants[0] = null;\n    this._blendConstants[1] = null;\n    this._blendConstants[2] = null;\n    this._blendConstants[3] = null;\n    this._isAlphaBlendDirty = true;\n    this._isBlendFunctionParametersDirty = false;\n    this._isBlendEquationParametersDirty = false;\n    this._isBlendConstantsDirty = false;\n  }\n  apply(gl) {\n    if (!this.isDirty) {\n      return;\n    }\n    // Alpha blend\n    if (this._isAlphaBlendDirty) {\n      if (this._alphaBlend) {\n        gl.enable(gl.BLEND);\n      } else {\n        gl.disable(gl.BLEND);\n      }\n      this._isAlphaBlendDirty = false;\n    }\n    // Alpha function\n    if (this._isBlendFunctionParametersDirty) {\n      gl.blendFuncSeparate(this._blendFunctionParameters[0], this._blendFunctionParameters[1], this._blendFunctionParameters[2], this._blendFunctionParameters[3]);\n      this._isBlendFunctionParametersDirty = false;\n    }\n    // Alpha equation\n    if (this._isBlendEquationParametersDirty) {\n      gl.blendEquationSeparate(this._blendEquationParameters[0], this._blendEquationParameters[1]);\n      this._isBlendEquationParametersDirty = false;\n    }\n    // Constants\n    if (this._isBlendConstantsDirty) {\n      gl.blendColor(this._blendConstants[0], this._blendConstants[1], this._blendConstants[2], this._blendConstants[3]);\n      this._isBlendConstantsDirty = false;\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["AlphaState","constructor","Array","reset","isDirty","_isAlphaBlendDirty","_isBlendFunctionParametersDirty","_isBlendEquationParametersDirty","alphaBlend","_alphaBlend","value","setAlphaBlendConstants","r","g","b","a","_blendConstants","_isBlendConstantsDirty","setAlphaBlendFunctionParameters","value0","value1","value2","value3","_blendFunctionParameters","setAlphaEquationParameters","rgb","alpha","_blendEquationParameters","apply","gl","enable","BLEND","disable","blendFuncSeparate","blendEquationSeparate","blendColor"],"sourceRoot":"","sources":["../../../../lts/core/generated/States/alphaCullingState.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\n\r\n/**\r\n * @internal\r\n **/\r\nexport class AlphaState {\r\n    public _blendFunctionParameters = new Array<Nullable<number>>(4);\r\n    public _blendEquationParameters = new Array<Nullable<number>>(2);\r\n    public _blendConstants = new Array<Nullable<number>>(4);\r\n    public _isBlendConstantsDirty = false;\r\n\r\n    private _alphaBlend = false;\r\n    private _isAlphaBlendDirty = false;\r\n    private _isBlendFunctionParametersDirty = false;\r\n    private _isBlendEquationParametersDirty = false;\r\n\r\n    /**\r\n     * Initializes the state.\r\n     */\r\n    public constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public get isDirty(): boolean {\r\n        return this._isAlphaBlendDirty || this._isBlendFunctionParametersDirty || this._isBlendEquationParametersDirty;\r\n    }\r\n\r\n    public get alphaBlend(): boolean {\r\n        return this._alphaBlend;\r\n    }\r\n\r\n    public set alphaBlend(value: boolean) {\r\n        if (this._alphaBlend === value) {\r\n            return;\r\n        }\r\n\r\n        this._alphaBlend = value;\r\n        this._isAlphaBlendDirty = true;\r\n    }\r\n\r\n    public setAlphaBlendConstants(r: number, g: number, b: number, a: number): void {\r\n        if (this._blendConstants[0] === r && this._blendConstants[1] === g && this._blendConstants[2] === b && this._blendConstants[3] === a) {\r\n            return;\r\n        }\r\n\r\n        this._blendConstants[0] = r;\r\n        this._blendConstants[1] = g;\r\n        this._blendConstants[2] = b;\r\n        this._blendConstants[3] = a;\r\n\r\n        this._isBlendConstantsDirty = true;\r\n    }\r\n\r\n    public setAlphaBlendFunctionParameters(value0: number, value1: number, value2: number, value3: number): void {\r\n        if (\r\n            this._blendFunctionParameters[0] === value0 &&\r\n            this._blendFunctionParameters[1] === value1 &&\r\n            this._blendFunctionParameters[2] === value2 &&\r\n            this._blendFunctionParameters[3] === value3\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this._blendFunctionParameters[0] = value0;\r\n        this._blendFunctionParameters[1] = value1;\r\n        this._blendFunctionParameters[2] = value2;\r\n        this._blendFunctionParameters[3] = value3;\r\n\r\n        this._isBlendFunctionParametersDirty = true;\r\n    }\r\n\r\n    public setAlphaEquationParameters(rgb: number, alpha: number): void {\r\n        if (this._blendEquationParameters[0] === rgb && this._blendEquationParameters[1] === alpha) {\r\n            return;\r\n        }\r\n\r\n        this._blendEquationParameters[0] = rgb;\r\n        this._blendEquationParameters[1] = alpha;\r\n\r\n        this._isBlendEquationParametersDirty = true;\r\n    }\r\n\r\n    public reset() {\r\n        this._alphaBlend = false;\r\n        this._blendFunctionParameters[0] = null;\r\n        this._blendFunctionParameters[1] = null;\r\n        this._blendFunctionParameters[2] = null;\r\n        this._blendFunctionParameters[3] = null;\r\n\r\n        this._blendEquationParameters[0] = null;\r\n        this._blendEquationParameters[1] = null;\r\n\r\n        this._blendConstants[0] = null;\r\n        this._blendConstants[1] = null;\r\n        this._blendConstants[2] = null;\r\n        this._blendConstants[3] = null;\r\n\r\n        this._isAlphaBlendDirty = true;\r\n        this._isBlendFunctionParametersDirty = false;\r\n        this._isBlendEquationParametersDirty = false;\r\n        this._isBlendConstantsDirty = false;\r\n    }\r\n\r\n    public apply(gl: WebGLRenderingContext) {\r\n        if (!this.isDirty) {\r\n            return;\r\n        }\r\n\r\n        // Alpha blend\r\n        if (this._isAlphaBlendDirty) {\r\n            if (this._alphaBlend) {\r\n                gl.enable(gl.BLEND);\r\n            } else {\r\n                gl.disable(gl.BLEND);\r\n            }\r\n\r\n            this._isAlphaBlendDirty = false;\r\n        }\r\n\r\n        // Alpha function\r\n        if (this._isBlendFunctionParametersDirty) {\r\n            gl.blendFuncSeparate(\r\n                <number>this._blendFunctionParameters[0],\r\n                <number>this._blendFunctionParameters[1],\r\n                <number>this._blendFunctionParameters[2],\r\n                <number>this._blendFunctionParameters[3]\r\n            );\r\n            this._isBlendFunctionParametersDirty = false;\r\n        }\r\n\r\n        // Alpha equation\r\n        if (this._isBlendEquationParametersDirty) {\r\n            gl.blendEquationSeparate(this._blendEquationParameters[0]!, this._blendEquationParameters[1]!);\r\n            this._isBlendEquationParametersDirty = false;\r\n        }\r\n\r\n        // Constants\r\n        if (this._isBlendConstantsDirty) {\r\n            gl.blendColor(<number>this._blendConstants[0], <number>this._blendConstants[1], <number>this._blendConstants[2], <number>this._blendConstants[3]);\r\n            this._isBlendConstantsDirty = false;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}