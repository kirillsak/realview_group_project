{"ast":null,"code":"/* eslint-disable @typescript-eslint/naming-convention */\nimport { Animation } from \"@babylonjs/core/Animations/animation.js\";\nimport { AnimationPropertyInfo, nodeAnimationData } from \"../glTFLoaderAnimation.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\nfunction getColor3(_target, source, offset, scale) {\n  return Color3.FromArray(source, offset).scale(scale);\n}\nfunction getAlpha(_target, source, offset, scale) {\n  return source[offset + 3] * scale;\n}\nfunction getFloat(_target, source, offset, scale) {\n  return source[offset] * scale;\n}\nfunction getMinusFloat(_target, source, offset, scale) {\n  return -source[offset] * scale;\n}\nfunction getNextFloat(_target, source, offset, scale) {\n  return source[offset + 1] * scale;\n}\nfunction getFloatBy2(_target, source, offset, scale) {\n  return source[offset] * scale * 2;\n}\nfunction getTextureTransformTree(textureName) {\n  return {\n    scale: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.uScale`, getFloat, () => 2), new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.vScale`, getNextFloat, () => 2)],\n    offset: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.uOffset`, getFloat, () => 2), new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.vOffset`, getNextFloat, () => 2)],\n    rotation: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.wAng`, getMinusFloat, () => 1)]\n  };\n}\nclass CameraAnimationPropertyInfo extends AnimationPropertyInfo {\n  /** @internal */\n  buildAnimations(target, name, fps, keys, callback) {\n    callback(target._babylonCamera, this._buildAnimation(name, fps, keys));\n  }\n}\nclass MaterialAnimationPropertyInfo extends AnimationPropertyInfo {\n  /** @internal */\n  buildAnimations(target, name, fps, keys, callback) {\n    for (const fillMode in target._data) {\n      callback(target._data[fillMode].babylonMaterial, this._buildAnimation(name, fps, keys));\n    }\n  }\n}\nclass LightAnimationPropertyInfo extends AnimationPropertyInfo {\n  /** @internal */\n  buildAnimations(target, name, fps, keys, callback) {\n    callback(target._babylonLight, this._buildAnimation(name, fps, keys));\n  }\n}\nconst nodesTree = {\n  __array__: {\n    __target__: true,\n    ...nodeAnimationData\n  }\n};\nconst camerasTree = {\n  __array__: {\n    __target__: true,\n    orthographic: {\n      xmag: [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoLeft\", getMinusFloat, () => 1), new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoRight\", getNextFloat, () => 1)],\n      ymag: [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoBottom\", getMinusFloat, () => 1), new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoTop\", getNextFloat, () => 1)],\n      zfar: [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"maxZ\", getFloat, () => 1)],\n      znear: [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"minZ\", getFloat, () => 1)]\n    },\n    perspective: {\n      yfov: [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"fov\", getFloat, () => 1)],\n      zfar: [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"maxZ\", getFloat, () => 1)],\n      znear: [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"minZ\", getFloat, () => 1)]\n    }\n  }\n};\nconst materialsTree = {\n  __array__: {\n    __target__: true,\n    pbrMetallicRoughness: {\n      baseColorFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"albedoColor\", getColor3, () => 4), new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"alpha\", getAlpha, () => 4)],\n      metallicFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"metallic\", getFloat, () => 1)],\n      roughnessFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"roughness\", getFloat, () => 1)],\n      baseColorTexture: {\n        extensions: {\n          KHR_texture_transform: getTextureTransformTree(\"albedoTexture\")\n        }\n      }\n    },\n    emissiveFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"emissiveColor\", getColor3, () => 3)],\n    normalTexture: {\n      scale: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"bumpTexture.level\", getFloat, () => 1)]\n    },\n    occlusionTexture: {\n      strength: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"ambientTextureStrength\", getFloat, () => 1)],\n      extensions: {\n        KHR_texture_transform: getTextureTransformTree(\"ambientTexture\")\n      }\n    },\n    emissiveTexture: {\n      extensions: {\n        KHR_texture_transform: getTextureTransformTree(\"emissiveTexture\")\n      }\n    },\n    extensions: {\n      KHR_materials_ior: {\n        ior: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"indexOfRefraction\", getFloat, () => 1)]\n      },\n      KHR_materials_clearcoat: {\n        clearcoatFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"clearCoat.intensity\", getFloat, () => 1)],\n        clearcoatRoughnessFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"clearCoat.roughness\", getFloat, () => 1)]\n      },\n      KHR_materials_sheen: {\n        sheenColorFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"sheen.color\", getColor3, () => 3)],\n        sheenRoughnessFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"sheen.roughness\", getFloat, () => 1)]\n      },\n      KHR_materials_specular: {\n        specularFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"metallicF0Factor\", getFloat, () => 1)],\n        specularColorFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"metallicReflectanceColor\", getColor3, () => 3)]\n      },\n      KHR_materials_emissive_strength: {\n        emissiveStrength: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"emissiveIntensity\", getFloat, () => 1)]\n      },\n      KHR_materials_transmission: {\n        transmissionFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.refractionIntensity\", getFloat, () => 1)]\n      },\n      KHR_materials_volume: {\n        attenuationColor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"subSurface.tintColor\", getColor3, () => 3)],\n        attenuationDistance: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.tintColorAtDistance\", getFloat, () => 1)],\n        thicknessFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.maximumThickness\", getFloat, () => 1)]\n      },\n      KHR_materials_iridescence: {\n        iridescenceFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.intensity\", getFloat, () => 1)],\n        iridescenceIor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.indexOfRefraction\", getFloat, () => 1)],\n        iridescenceThicknessMinimum: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.minimumThickness\", getFloat, () => 1)],\n        iridescenceThicknessMaximum: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.maximumThickness\", getFloat, () => 1)]\n      }\n    }\n  }\n};\nconst extensionsTree = {\n  KHR_lights_punctual: {\n    lights: {\n      __array__: {\n        __target__: true,\n        color: [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"diffuse\", getColor3, () => 3)],\n        intensity: [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"intensity\", getFloat, () => 1)],\n        range: [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"range\", getFloat, () => 1)],\n        spot: {\n          innerConeAngle: [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"innerAngle\", getFloatBy2, () => 1)],\n          outerConeAngle: [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"angle\", getFloatBy2, () => 1)]\n        }\n      }\n    }\n  }\n};\n/** @internal */\nexport const animationPointerTree = {\n  nodes: nodesTree,\n  materials: materialsTree,\n  cameras: camerasTree,\n  extensions: extensionsTree\n};","map":{"version":3,"mappings":"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","names":["Animation","AnimationPropertyInfo","nodeAnimationData","Color3","getColor3","_target","source","offset","scale","FromArray","getAlpha","getFloat","getMinusFloat","getNextFloat","getFloatBy2","getTextureTransformTree","textureName","MaterialAnimationPropertyInfo","ANIMATIONTYPE_FLOAT","rotation","CameraAnimationPropertyInfo","buildAnimations","target","name","fps","keys","callback","_babylonCamera","_buildAnimation","fillMode","_data","babylonMaterial","LightAnimationPropertyInfo","_babylonLight","nodesTree","__array__","__target__","camerasTree","orthographic","xmag","ymag","zfar","znear","perspective","yfov","materialsTree","pbrMetallicRoughness","baseColorFactor","ANIMATIONTYPE_COLOR3","metallicFactor","roughnessFactor","baseColorTexture","extensions","KHR_texture_transform","emissiveFactor","normalTexture","occlusionTexture","strength","emissiveTexture","KHR_materials_ior","ior","KHR_materials_clearcoat","clearcoatFactor","clearcoatRoughnessFactor","KHR_materials_sheen","sheenColorFactor","sheenRoughnessFactor","KHR_materials_specular","specularFactor","specularColorFactor","KHR_materials_emissive_strength","emissiveStrength","KHR_materials_transmission","transmissionFactor","KHR_materials_volume","attenuationColor","attenuationDistance","thicknessFactor","KHR_materials_iridescence","iridescenceFactor","iridescenceIor","iridescenceThicknessMinimum","iridescenceThicknessMaximum","extensionsTree","KHR_lights_punctual","lights","color","intensity","range","spot","innerConeAngle","outerConeAngle","animationPointerTree","nodes","materials","cameras"],"sourceRoot":"","sources":["../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_animation_pointer.data.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\n\r\nimport { Animation } from \"core/Animations/animation\";\r\nimport type { ICamera, IKHRLightsPunctual_Light, IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport { AnimationPropertyInfo, nodeAnimationData } from \"../glTFLoaderAnimation\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\n\r\nfunction getColor3(_target: any, source: Float32Array, offset: number, scale: number): Color3 {\r\n    return Color3.FromArray(source, offset).scale(scale);\r\n}\r\n\r\nfunction getAlpha(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return source[offset + 3] * scale;\r\n}\r\n\r\nfunction getFloat(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return source[offset] * scale;\r\n}\r\n\r\nfunction getMinusFloat(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return -source[offset] * scale;\r\n}\r\n\r\nfunction getNextFloat(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return source[offset + 1] * scale;\r\n}\r\n\r\nfunction getFloatBy2(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return source[offset] * scale * 2;\r\n}\r\n\r\nfunction getTextureTransformTree(textureName: string) {\r\n    return {\r\n        scale: [\r\n            new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.uScale`, getFloat, () => 2),\r\n            new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.vScale`, getNextFloat, () => 2),\r\n        ],\r\n        offset: [\r\n            new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.uOffset`, getFloat, () => 2),\r\n            new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.vOffset`, getNextFloat, () => 2),\r\n        ],\r\n        rotation: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.wAng`, getMinusFloat, () => 1)],\r\n    };\r\n}\r\n\r\nclass CameraAnimationPropertyInfo extends AnimationPropertyInfo {\r\n    /** @internal */\r\n    public buildAnimations(target: ICamera, name: string, fps: number, keys: any[], callback: (babylonAnimatable: IAnimatable, babylonAnimation: Animation) => void): void {\r\n        callback(target._babylonCamera!, this._buildAnimation(name, fps, keys));\r\n    }\r\n}\r\n\r\nclass MaterialAnimationPropertyInfo extends AnimationPropertyInfo {\r\n    /** @internal */\r\n    public buildAnimations(target: IMaterial, name: string, fps: number, keys: any[], callback: (babylonAnimatable: IAnimatable, babylonAnimation: Animation) => void): void {\r\n        for (const fillMode in target._data!) {\r\n            callback(target._data![fillMode].babylonMaterial, this._buildAnimation(name, fps, keys));\r\n        }\r\n    }\r\n}\r\n\r\nclass LightAnimationPropertyInfo extends AnimationPropertyInfo {\r\n    /** @internal */\r\n    public buildAnimations(\r\n        target: IKHRLightsPunctual_Light,\r\n        name: string,\r\n        fps: number,\r\n        keys: any[],\r\n        callback: (babylonAnimatable: IAnimatable, babylonAnimation: Animation) => void\r\n    ): void {\r\n        callback(target._babylonLight!, this._buildAnimation(name, fps, keys));\r\n    }\r\n}\r\n\r\nconst nodesTree = {\r\n    __array__: {\r\n        __target__: true,\r\n        ...nodeAnimationData,\r\n    },\r\n};\r\n\r\nconst camerasTree = {\r\n    __array__: {\r\n        __target__: true,\r\n        orthographic: {\r\n            xmag: [\r\n                new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoLeft\", getMinusFloat, () => 1),\r\n                new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoRight\", getNextFloat, () => 1),\r\n            ],\r\n            ymag: [\r\n                new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoBottom\", getMinusFloat, () => 1),\r\n                new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoTop\", getNextFloat, () => 1),\r\n            ],\r\n            zfar: [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"maxZ\", getFloat, () => 1)],\r\n            znear: [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"minZ\", getFloat, () => 1)],\r\n        },\r\n        perspective: {\r\n            yfov: [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"fov\", getFloat, () => 1)],\r\n            zfar: [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"maxZ\", getFloat, () => 1)],\r\n            znear: [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"minZ\", getFloat, () => 1)],\r\n        },\r\n    },\r\n};\r\n\r\nconst materialsTree = {\r\n    __array__: {\r\n        __target__: true,\r\n        pbrMetallicRoughness: {\r\n            baseColorFactor: [\r\n                new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"albedoColor\", getColor3, () => 4),\r\n                new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"alpha\", getAlpha, () => 4),\r\n            ],\r\n            metallicFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"metallic\", getFloat, () => 1)],\r\n            roughnessFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"roughness\", getFloat, () => 1)],\r\n            baseColorTexture: {\r\n                extensions: {\r\n                    KHR_texture_transform: getTextureTransformTree(\"albedoTexture\"),\r\n                },\r\n            },\r\n        },\r\n        emissiveFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"emissiveColor\", getColor3, () => 3)],\r\n        normalTexture: {\r\n            scale: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"bumpTexture.level\", getFloat, () => 1)],\r\n        },\r\n        occlusionTexture: {\r\n            strength: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"ambientTextureStrength\", getFloat, () => 1)],\r\n            extensions: {\r\n                KHR_texture_transform: getTextureTransformTree(\"ambientTexture\"),\r\n            },\r\n        },\r\n        emissiveTexture: {\r\n            extensions: {\r\n                KHR_texture_transform: getTextureTransformTree(\"emissiveTexture\"),\r\n            },\r\n        },\r\n        extensions: {\r\n            KHR_materials_ior: {\r\n                ior: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"indexOfRefraction\", getFloat, () => 1)],\r\n            },\r\n            KHR_materials_clearcoat: {\r\n                clearcoatFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"clearCoat.intensity\", getFloat, () => 1)],\r\n                clearcoatRoughnessFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"clearCoat.roughness\", getFloat, () => 1)],\r\n            },\r\n            KHR_materials_sheen: {\r\n                sheenColorFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"sheen.color\", getColor3, () => 3)],\r\n                sheenRoughnessFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"sheen.roughness\", getFloat, () => 1)],\r\n            },\r\n            KHR_materials_specular: {\r\n                specularFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"metallicF0Factor\", getFloat, () => 1)],\r\n                specularColorFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"metallicReflectanceColor\", getColor3, () => 3)],\r\n            },\r\n            KHR_materials_emissive_strength: {\r\n                emissiveStrength: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"emissiveIntensity\", getFloat, () => 1)],\r\n            },\r\n            KHR_materials_transmission: {\r\n                transmissionFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.refractionIntensity\", getFloat, () => 1)],\r\n            },\r\n            KHR_materials_volume: {\r\n                attenuationColor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"subSurface.tintColor\", getColor3, () => 3)],\r\n                attenuationDistance: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.tintColorAtDistance\", getFloat, () => 1)],\r\n                thicknessFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.maximumThickness\", getFloat, () => 1)],\r\n            },\r\n            KHR_materials_iridescence: {\r\n                iridescenceFactor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.intensity\", getFloat, () => 1)],\r\n                iridescenceIor: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.indexOfRefraction\", getFloat, () => 1)],\r\n                iridescenceThicknessMinimum: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.minimumThickness\", getFloat, () => 1)],\r\n                iridescenceThicknessMaximum: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.maximumThickness\", getFloat, () => 1)],\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\nconst extensionsTree = {\r\n    KHR_lights_punctual: {\r\n        lights: {\r\n            __array__: {\r\n                __target__: true,\r\n                color: [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"diffuse\", getColor3, () => 3)],\r\n                intensity: [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"intensity\", getFloat, () => 1)],\r\n                range: [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"range\", getFloat, () => 1)],\r\n                spot: {\r\n                    innerConeAngle: [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"innerAngle\", getFloatBy2, () => 1)],\r\n                    outerConeAngle: [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"angle\", getFloatBy2, () => 1)],\r\n                },\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\n/** @internal */\r\nexport const animationPointerTree = {\r\n    nodes: nodesTree,\r\n    materials: materialsTree,\r\n    cameras: camerasTree,\r\n    extensions: extensionsTree,\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}