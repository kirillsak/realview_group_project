{"ast":null,"code":"import { WebGPUEngine } from \"../../webgpuEngine.js\";\nfunction IsExternalTexture(texture) {\n  return texture && texture.underlyingResource !== undefined ? true : false;\n}\nWebGPUEngine.prototype.updateVideoTexture = function (texture, video, invertY) {\n  var _a;\n  if (!texture || texture._isDisabled) {\n    return;\n  }\n  if (this._videoTextureSupported === undefined) {\n    this._videoTextureSupported = true;\n  }\n  let gpuTextureWrapper = texture._hardwareTexture;\n  if (!((_a = texture._hardwareTexture) === null || _a === void 0 ? void 0 : _a.underlyingResource)) {\n    gpuTextureWrapper = this._textureHelper.createGPUTextureForInternalTexture(texture);\n  }\n  if (IsExternalTexture(video)) {\n    this._textureHelper.copyVideoToTexture(video, texture, gpuTextureWrapper.format, !invertY);\n    if (texture.generateMipMaps) {\n      this._generateMipmaps(texture, this._uploadEncoder);\n    }\n    texture.isReady = true;\n  } else if (video) {\n    this.createImageBitmap(video).then(bitmap => {\n      this._textureHelper.updateTexture(bitmap, texture, texture.width, texture.height, texture.depth, gpuTextureWrapper.format, 0, 0, !invertY, false, 0, 0);\n      if (texture.generateMipMaps) {\n        this._generateMipmaps(texture, this._uploadEncoder);\n      }\n      texture.isReady = true;\n    }).catch(() => {\n      // Sometimes createImageBitmap(video) fails with \"Failed to execute 'createImageBitmap' on 'Window': The provided element's player has no current data.\"\n      // Just keep going on\n      texture.isReady = true;\n    });\n  }\n};","map":{"version":3,"mappings":"AAEA,SAASA,YAAY,QAAQ,uBAAqB;AAIlD,SAASC,iBAAiB,CAACC,OAAqD;EAC5E,OAAOA,OAAO,IAAKA,OAA2B,CAACC,kBAAkB,KAAKC,SAAS,GAAG,IAAI,GAAG,KAAK;AAClG;AAEAJ,YAAY,CAACK,SAAS,CAACC,kBAAkB,GAAG,UAAUJ,OAAkC,EAAEK,KAAmD,EAAEC,OAAgB;;EAC3J,IAAI,CAACN,OAAO,IAAIA,OAAO,CAACO,WAAW,EAAE;IACjC;;EAGJ,IAAI,IAAI,CAACC,sBAAsB,KAAKN,SAAS,EAAE;IAC3C,IAAI,CAACM,sBAAsB,GAAG,IAAI;;EAGtC,IAAIC,iBAAiB,GAAGT,OAAO,CAACU,gBAAyC;EAEzE,IAAI,EAAC,aAAO,CAACA,gBAAgB,0CAAET,kBAAkB,GAAE;IAC/CQ,iBAAiB,GAAG,IAAI,CAACE,cAAc,CAACC,kCAAkC,CAACZ,OAAO,CAAC;;EAGvF,IAAID,iBAAiB,CAACM,KAAK,CAAC,EAAE;IAC1B,IAAI,CAACM,cAAc,CAACE,kBAAkB,CAACR,KAAK,EAAEL,OAAO,EAAES,iBAAiB,CAACK,MAAM,EAAE,CAACR,OAAO,CAAC;IAC1F,IAAIN,OAAO,CAACe,eAAe,EAAE;MACzB,IAAI,CAACC,gBAAgB,CAAChB,OAAO,EAAE,IAAI,CAACiB,cAAc,CAAC;;IAEvDjB,OAAO,CAACkB,OAAO,GAAG,IAAI;GACzB,MAAM,IAAIb,KAAK,EAAE;IACd,IAAI,CAACc,iBAAiB,CAACd,KAAK,CAAC,CACxBe,IAAI,CAAEC,MAAM,IAAI;MACb,IAAI,CAACV,cAAc,CAACW,aAAa,CAACD,MAAM,EAAErB,OAAO,EAAEA,OAAO,CAACuB,KAAK,EAAEvB,OAAO,CAACwB,MAAM,EAAExB,OAAO,CAACyB,KAAK,EAAEhB,iBAAiB,CAACK,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAACR,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;MACvJ,IAAIN,OAAO,CAACe,eAAe,EAAE;QACzB,IAAI,CAACC,gBAAgB,CAAChB,OAAO,EAAE,IAAI,CAACiB,cAAc,CAAC;;MAGvDjB,OAAO,CAACkB,OAAO,GAAG,IAAI;IAC1B,CAAC,CAAC,CACDQ,KAAK,CAAC,MAAK;MACR;MACA;MACA1B,OAAO,CAACkB,OAAO,GAAG,IAAI;IAC1B,CAAC,CAAC;;AAEd,CAAC","names":["WebGPUEngine","IsExternalTexture","texture","underlyingResource","undefined","prototype","updateVideoTexture","video","invertY","_isDisabled","_videoTextureSupported","gpuTextureWrapper","_hardwareTexture","_textureHelper","createGPUTextureForInternalTexture","copyVideoToTexture","format","generateMipMaps","_generateMipmaps","_uploadEncoder","isReady","createImageBitmap","then","bitmap","updateTexture","width","height","depth","catch"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/Extensions/engine.videoTexture.ts"],"sourcesContent":["import type { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport type { Nullable } from \"../../../types\";\r\nimport { WebGPUEngine } from \"../../webgpuEngine\";\r\nimport type { WebGPUHardwareTexture } from \"../webgpuHardwareTexture\";\r\nimport type { ExternalTexture } from \"../../../Materials/Textures/externalTexture\";\r\n\r\nfunction IsExternalTexture(texture: Nullable<ExternalTexture> | HTMLVideoElement): texture is ExternalTexture {\r\n    return texture && (texture as ExternalTexture).underlyingResource !== undefined ? true : false;\r\n}\r\n\r\nWebGPUEngine.prototype.updateVideoTexture = function (texture: Nullable<InternalTexture>, video: HTMLVideoElement | Nullable<ExternalTexture>, invertY: boolean): void {\r\n    if (!texture || texture._isDisabled) {\r\n        return;\r\n    }\r\n\r\n    if (this._videoTextureSupported === undefined) {\r\n        this._videoTextureSupported = true;\r\n    }\r\n\r\n    let gpuTextureWrapper = texture._hardwareTexture as WebGPUHardwareTexture;\r\n\r\n    if (!texture._hardwareTexture?.underlyingResource) {\r\n        gpuTextureWrapper = this._textureHelper.createGPUTextureForInternalTexture(texture);\r\n    }\r\n\r\n    if (IsExternalTexture(video)) {\r\n        this._textureHelper.copyVideoToTexture(video, texture, gpuTextureWrapper.format, !invertY);\r\n        if (texture.generateMipMaps) {\r\n            this._generateMipmaps(texture, this._uploadEncoder);\r\n        }\r\n        texture.isReady = true;\r\n    } else if (video) {\r\n        this.createImageBitmap(video)\r\n            .then((bitmap) => {\r\n                this._textureHelper.updateTexture(bitmap, texture, texture.width, texture.height, texture.depth, gpuTextureWrapper.format, 0, 0, !invertY, false, 0, 0);\r\n                if (texture.generateMipMaps) {\r\n                    this._generateMipmaps(texture, this._uploadEncoder);\r\n                }\r\n\r\n                texture.isReady = true;\r\n            })\r\n            .catch(() => {\r\n                // Sometimes createImageBitmap(video) fails with \"Failed to execute 'createImageBitmap' on 'Window': The provided element's player has no current data.\"\r\n                // Just keep going on\r\n                texture.isReady = true;\r\n            });\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}