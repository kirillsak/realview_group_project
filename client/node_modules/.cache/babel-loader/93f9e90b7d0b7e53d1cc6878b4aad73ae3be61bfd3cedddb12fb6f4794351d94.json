{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/filter.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serializeAsMatrix, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * Applies a kernel filter to the image\n */\nexport class FilterPostProcess extends PostProcess {\n  /**\n   *\n   * @param name The name of the effect.\n   * @param kernelMatrix The matrix to be applied to the image\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   */\n  constructor(name, kernelMatrix, options, camera, samplingMode, engine, reusable) {\n    super(name, \"filter\", [\"kernelMatrix\"], null, options, camera, samplingMode, engine, reusable);\n    this.kernelMatrix = kernelMatrix;\n    this.onApply = effect => {\n      effect.setMatrix(\"kernelMatrix\", this.kernelMatrix);\n    };\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"FilterPostProcess\" string\n   */\n  getClassName() {\n    return \"FilterPostProcess\";\n  }\n  /**\n   * @internal\n   */\n  static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(() => {\n      return new FilterPostProcess(parsedPostProcess.name, parsedPostProcess.kernelMatrix, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  }\n}\n__decorate([serializeAsMatrix()], FilterPostProcess.prototype, \"kernelMatrix\", void 0);\nRegisterClass(\"BABYLON.FilterPostProcess\", FilterPostProcess);","map":{"version":3,"mappings":";AAKA,SAASA,WAAW,QAAQ,kBAAgB;AAG5C,OAAO,+BAA6B;AACpC,SAASC,aAAa,QAAQ,sBAAoB;AAClD,SAASC,iBAAiB,EAAEC,mBAAmB,QAAQ,uBAAqB;AAI5E;;;AAGA,OAAM,MAAOC,iBAAkB,SAAQJ,WAAW;EAa9C;;;;;;;;;;EAUAK,YAAYC,IAAY,EAAEC,YAAoB,EAAEC,OAAoC,EAAEC,MAAwB,EAAEC,YAAqB,EAAEC,MAAe,EAAEC,QAAkB;IACtK,KAAK,CAACN,IAAI,EAAE,QAAQ,EAAE,CAAC,cAAc,CAAC,EAAE,IAAI,EAAEE,OAAO,EAAEC,MAAM,EAAEC,YAAY,EAAEC,MAAM,EAAEC,QAAQ,CAAC;IAC9F,IAAI,CAACL,YAAY,GAAGA,YAAY;IAEhC,IAAI,CAACM,OAAO,GAAIC,MAAc,IAAI;MAC9BA,MAAM,CAACC,SAAS,CAAC,cAAc,EAAE,IAAI,CAACR,YAAY,CAAC;IACvD,CAAC;EACL;EAzBA;;;;EAIOS,YAAY;IACf,OAAO,mBAAmB;EAC9B;EAqBA;;;EAGO,OAAOC,MAAM,CAACC,iBAAsB,EAAEC,YAAoB,EAAEC,KAAY,EAAEC,OAAe;IAC5F,OAAOlB,mBAAmB,CAACmB,KAAK,CAC5B,MAAK;MACD,OAAO,IAAIlB,iBAAiB,CACxBc,iBAAiB,CAACZ,IAAI,EACtBY,iBAAiB,CAACX,YAAY,EAC9BW,iBAAiB,CAACV,OAAO,EACzBW,YAAY,EACZD,iBAAiB,CAACK,wBAAwB,EAC1CH,KAAK,CAACI,SAAS,EAAE,EACjBN,iBAAiB,CAACN,QAAQ,CAC7B;IACL,CAAC,EACDM,iBAAiB,EACjBE,KAAK,EACLC,OAAO,CACV;EACL;;AAjDAI,YADCvB,iBAAiB,EAAE,uDACQ;AAoDhCD,aAAa,CAAC,2BAA2B,EAAEG,iBAAiB,CAAC","names":["PostProcess","RegisterClass","serializeAsMatrix","SerializationHelper","FilterPostProcess","constructor","name","kernelMatrix","options","camera","samplingMode","engine","reusable","onApply","effect","setMatrix","getClassName","_Parse","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","getEngine","__decorate"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/filterPostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Matrix } from \"../Maths/math.vector\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\n\r\nimport \"../Shaders/filter.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serializeAsMatrix, SerializationHelper } from \"../Misc/decorators\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * Applies a kernel filter to the image\r\n */\r\nexport class FilterPostProcess extends PostProcess {\r\n    /** The matrix to be applied to the image */\r\n    @serializeAsMatrix()\r\n    public kernelMatrix: Matrix;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"FilterPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"FilterPostProcess\";\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param name The name of the effect.\r\n     * @param kernelMatrix The matrix to be applied to the image\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     */\r\n    constructor(name: string, kernelMatrix: Matrix, options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean) {\r\n        super(name, \"filter\", [\"kernelMatrix\"], null, options, camera, samplingMode, engine, reusable);\r\n        this.kernelMatrix = kernelMatrix;\r\n\r\n        this.onApply = (effect: Effect) => {\r\n            effect.setMatrix(\"kernelMatrix\", this.kernelMatrix);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<FilterPostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new FilterPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.kernelMatrix,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.FilterPostProcess\", FilterPostProcess);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}