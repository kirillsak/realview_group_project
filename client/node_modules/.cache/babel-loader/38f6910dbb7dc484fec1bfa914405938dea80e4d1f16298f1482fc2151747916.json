{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"./Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"./Enums/nodeMaterialBlockTargets.js\";\nimport { Effect } from \"../effect.js\";\n/**\n * Class used to store node based material build state\n */\nexport class NodeMaterialBuildState {\n  constructor() {\n    /** Gets or sets a boolean indicating if the current state can emit uniform buffers */\n    this.supportUniformBuffers = false;\n    /**\n     * Gets the list of emitted attributes\n     */\n    this.attributes = new Array();\n    /**\n     * Gets the list of emitted uniforms\n     */\n    this.uniforms = new Array();\n    /**\n     * Gets the list of emitted constants\n     */\n    this.constants = new Array();\n    /**\n     * Gets the list of emitted samplers\n     */\n    this.samplers = new Array();\n    /**\n     * Gets the list of emitted functions\n     */\n    this.functions = {};\n    /**\n     * Gets the list of emitted extensions\n     */\n    this.extensions = {};\n    /**\n     * Gets the list of emitted counters\n     */\n    this.counters = {};\n    /** @internal */\n    this._attributeDeclaration = \"\";\n    /** @internal */\n    this._uniformDeclaration = \"\";\n    /** @internal */\n    this._constantDeclaration = \"\";\n    /** @internal */\n    this._samplerDeclaration = \"\";\n    /** @internal */\n    this._varyingTransfer = \"\";\n    /** @internal */\n    this._injectAtEnd = \"\";\n    this._repeatableContentAnchorIndex = 0;\n    /** @internal */\n    this._builtCompilationString = \"\";\n    /**\n     * Gets the emitted compilation strings\n     */\n    this.compilationString = \"\";\n  }\n  /**\n   * Finalize the compilation strings\n   * @param state defines the current compilation state\n   */\n  finalize(state) {\n    const emitComments = state.sharedData.emitComments;\n    const isFragmentMode = this.target === NodeMaterialBlockTargets.Fragment;\n    this.compilationString = `\\r\\n${emitComments ? \"//Entry point\\r\\n\" : \"\"}void main(void) {\\r\\n${this.compilationString}`;\n    if (this._constantDeclaration) {\n      this.compilationString = `\\r\\n${emitComments ? \"//Constants\\r\\n\" : \"\"}${this._constantDeclaration}\\r\\n${this.compilationString}`;\n    }\n    let functionCode = \"\";\n    for (const functionName in this.functions) {\n      functionCode += this.functions[functionName] + `\\r\\n`;\n    }\n    this.compilationString = `\\r\\n${functionCode}\\r\\n${this.compilationString}`;\n    if (!isFragmentMode && this._varyingTransfer) {\n      this.compilationString = `${this.compilationString}\\r\\n${this._varyingTransfer}`;\n    }\n    if (this._injectAtEnd) {\n      this.compilationString = `${this.compilationString}\\r\\n${this._injectAtEnd}`;\n    }\n    this.compilationString = `${this.compilationString}\\r\\n}`;\n    if (this.sharedData.varyingDeclaration) {\n      this.compilationString = `\\r\\n${emitComments ? \"//Varyings\\r\\n\" : \"\"}${this.sharedData.varyingDeclaration}\\r\\n${this.compilationString}`;\n    }\n    if (this._samplerDeclaration) {\n      this.compilationString = `\\r\\n${emitComments ? \"//Samplers\\r\\n\" : \"\"}${this._samplerDeclaration}\\r\\n${this.compilationString}`;\n    }\n    if (this._uniformDeclaration) {\n      this.compilationString = `\\r\\n${emitComments ? \"//Uniforms\\r\\n\" : \"\"}${this._uniformDeclaration}\\r\\n${this.compilationString}`;\n    }\n    if (this._attributeDeclaration && !isFragmentMode) {\n      this.compilationString = `\\r\\n${emitComments ? \"//Attributes\\r\\n\" : \"\"}${this._attributeDeclaration}\\r\\n${this.compilationString}`;\n    }\n    this.compilationString = \"precision highp float;\\r\\n\" + this.compilationString;\n    for (const extensionName in this.extensions) {\n      const extension = this.extensions[extensionName];\n      this.compilationString = `\\r\\n${extension}\\r\\n${this.compilationString}`;\n    }\n    this._builtCompilationString = this.compilationString;\n  }\n  /** @internal */\n  get _repeatableContentAnchor() {\n    return `###___ANCHOR${this._repeatableContentAnchorIndex++}___###`;\n  }\n  /**\n   * @internal\n   */\n  _getFreeVariableName(prefix) {\n    prefix = prefix.replace(/[^a-zA-Z_]+/g, \"\");\n    if (this.sharedData.variableNames[prefix] === undefined) {\n      this.sharedData.variableNames[prefix] = 0;\n      // Check reserved words\n      if (prefix === \"output\" || prefix === \"texture\") {\n        return prefix + this.sharedData.variableNames[prefix];\n      }\n      return prefix;\n    } else {\n      this.sharedData.variableNames[prefix]++;\n    }\n    return prefix + this.sharedData.variableNames[prefix];\n  }\n  /**\n   * @internal\n   */\n  _getFreeDefineName(prefix) {\n    if (this.sharedData.defineNames[prefix] === undefined) {\n      this.sharedData.defineNames[prefix] = 0;\n    } else {\n      this.sharedData.defineNames[prefix]++;\n    }\n    return prefix + this.sharedData.defineNames[prefix];\n  }\n  /**\n   * @internal\n   */\n  _excludeVariableName(name) {\n    this.sharedData.variableNames[name] = 0;\n  }\n  /**\n   * @internal\n   */\n  _emit2DSampler(name) {\n    if (this.samplers.indexOf(name) < 0) {\n      this._samplerDeclaration += `uniform sampler2D ${name};\\r\\n`;\n      this.samplers.push(name);\n    }\n  }\n  /**\n   * @internal\n   */\n  _getGLType(type) {\n    switch (type) {\n      case NodeMaterialBlockConnectionPointTypes.Float:\n        return \"float\";\n      case NodeMaterialBlockConnectionPointTypes.Int:\n        return \"int\";\n      case NodeMaterialBlockConnectionPointTypes.Vector2:\n        return \"vec2\";\n      case NodeMaterialBlockConnectionPointTypes.Color3:\n      case NodeMaterialBlockConnectionPointTypes.Vector3:\n        return \"vec3\";\n      case NodeMaterialBlockConnectionPointTypes.Color4:\n      case NodeMaterialBlockConnectionPointTypes.Vector4:\n        return \"vec4\";\n      case NodeMaterialBlockConnectionPointTypes.Matrix:\n        return \"mat4\";\n    }\n    return \"\";\n  }\n  /**\n   * @internal\n   */\n  _emitExtension(name, extension, define = \"\") {\n    if (this.extensions[name]) {\n      return;\n    }\n    if (define) {\n      extension = `#if ${define}\\r\\n${extension}\\r\\n#endif`;\n    }\n    this.extensions[name] = extension;\n  }\n  /**\n   * @internal\n   */\n  _emitFunction(name, code, comments) {\n    if (this.functions[name]) {\n      return;\n    }\n    if (this.sharedData.emitComments) {\n      code = comments + `\\r\\n` + code;\n    }\n    this.functions[name] = code;\n  }\n  /**\n   * @internal\n   */\n  _emitCodeFromInclude(includeName, comments, options) {\n    if (options && options.repeatKey) {\n      return `#include<${includeName}>${options.substitutionVars ? \"(\" + options.substitutionVars + \")\" : \"\"}[0..${options.repeatKey}]\\r\\n`;\n    }\n    let code = Effect.IncludesShadersStore[includeName] + \"\\r\\n\";\n    if (this.sharedData.emitComments) {\n      code = comments + `\\r\\n` + code;\n    }\n    if (!options) {\n      return code;\n    }\n    if (options.replaceStrings) {\n      for (let index = 0; index < options.replaceStrings.length; index++) {\n        const replaceString = options.replaceStrings[index];\n        code = code.replace(replaceString.search, replaceString.replace);\n      }\n    }\n    return code;\n  }\n  /**\n   * @internal\n   */\n  _emitFunctionFromInclude(includeName, comments, options, storeKey = \"\") {\n    const key = includeName + storeKey;\n    if (this.functions[key]) {\n      return;\n    }\n    if (!options || !options.removeAttributes && !options.removeUniforms && !options.removeVaryings && !options.removeIfDef && !options.replaceStrings) {\n      if (options && options.repeatKey) {\n        this.functions[key] = `#include<${includeName}>${options.substitutionVars ? \"(\" + options.substitutionVars + \")\" : \"\"}[0..${options.repeatKey}]\\r\\n`;\n      } else {\n        this.functions[key] = `#include<${includeName}>${(options === null || options === void 0 ? void 0 : options.substitutionVars) ? \"(\" + (options === null || options === void 0 ? void 0 : options.substitutionVars) + \")\" : \"\"}\\r\\n`;\n      }\n      if (this.sharedData.emitComments) {\n        this.functions[key] = comments + `\\r\\n` + this.functions[key];\n      }\n      return;\n    }\n    this.functions[key] = Effect.IncludesShadersStore[includeName];\n    if (this.sharedData.emitComments) {\n      this.functions[key] = comments + `\\r\\n` + this.functions[key];\n    }\n    if (options.removeIfDef) {\n      this.functions[key] = this.functions[key].replace(/^\\s*?#ifdef.+$/gm, \"\");\n      this.functions[key] = this.functions[key].replace(/^\\s*?#endif.*$/gm, \"\");\n      this.functions[key] = this.functions[key].replace(/^\\s*?#else.*$/gm, \"\");\n      this.functions[key] = this.functions[key].replace(/^\\s*?#elif.*$/gm, \"\");\n    }\n    if (options.removeAttributes) {\n      this.functions[key] = this.functions[key].replace(/^\\s*?attribute.+$/gm, \"\");\n    }\n    if (options.removeUniforms) {\n      this.functions[key] = this.functions[key].replace(/^\\s*?uniform.+$/gm, \"\");\n    }\n    if (options.removeVaryings) {\n      this.functions[key] = this.functions[key].replace(/^\\s*?varying.+$/gm, \"\");\n    }\n    if (options.replaceStrings) {\n      for (let index = 0; index < options.replaceStrings.length; index++) {\n        const replaceString = options.replaceStrings[index];\n        this.functions[key] = this.functions[key].replace(replaceString.search, replaceString.replace);\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n  _registerTempVariable(name) {\n    if (this.sharedData.temps.indexOf(name) !== -1) {\n      return false;\n    }\n    this.sharedData.temps.push(name);\n    return true;\n  }\n  /**\n   * @internal\n   */\n  _emitVaryingFromString(name, type, define = \"\", notDefine = false) {\n    if (this.sharedData.varyings.indexOf(name) !== -1) {\n      return false;\n    }\n    this.sharedData.varyings.push(name);\n    if (define) {\n      if (define.startsWith(\"defined(\")) {\n        this.sharedData.varyingDeclaration += `#if ${define}\\r\\n`;\n      } else {\n        this.sharedData.varyingDeclaration += `${notDefine ? \"#ifndef\" : \"#ifdef\"} ${define}\\r\\n`;\n      }\n    }\n    this.sharedData.varyingDeclaration += `varying ${type} ${name};\\r\\n`;\n    if (define) {\n      this.sharedData.varyingDeclaration += `#endif\\r\\n`;\n    }\n    return true;\n  }\n  /**\n   * @internal\n   */\n  _emitUniformFromString(name, type, define = \"\", notDefine = false) {\n    if (this.uniforms.indexOf(name) !== -1) {\n      return;\n    }\n    this.uniforms.push(name);\n    if (define) {\n      if (define.startsWith(\"defined(\")) {\n        this._uniformDeclaration += `#if ${define}\\r\\n`;\n      } else {\n        this._uniformDeclaration += `${notDefine ? \"#ifndef\" : \"#ifdef\"} ${define}\\r\\n`;\n      }\n    }\n    this._uniformDeclaration += `uniform ${type} ${name};\\r\\n`;\n    if (define) {\n      this._uniformDeclaration += `#endif\\r\\n`;\n    }\n  }\n  /**\n   * @internal\n   */\n  _emitFloat(value) {\n    if (value.toString() === value.toFixed(0)) {\n      return `${value}.0`;\n    }\n    return value.toString();\n  }\n}","map":{"version":3,"mappings":"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","names":["NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","Effect","NodeMaterialBuildState","constructor","Array","finalize","state","emitComments","sharedData","isFragmentMode","target","Fragment","compilationString","_constantDeclaration","functionCode","functionName","functions","_varyingTransfer","_injectAtEnd","varyingDeclaration","_samplerDeclaration","_uniformDeclaration","_attributeDeclaration","extensionName","extensions","extension","_builtCompilationString","_repeatableContentAnchor","_repeatableContentAnchorIndex","_getFreeVariableName","prefix","replace","variableNames","undefined","_getFreeDefineName","defineNames","_excludeVariableName","name","_emit2DSampler","samplers","indexOf","push","_getGLType","type","Float","Int","Vector2","Color3","Vector3","Color4","Vector4","Matrix","_emitExtension","define","_emitFunction","code","comments","_emitCodeFromInclude","includeName","options","repeatKey","substitutionVars","IncludesShadersStore","replaceStrings","index","length","replaceString","search","_emitFunctionFromInclude","storeKey","key","removeAttributes","removeUniforms","removeVaryings","removeIfDef","_registerTempVariable","temps","_emitVaryingFromString","notDefine","varyings","startsWith","_emitUniformFromString","uniforms","_emitFloat","value","toString","toFixed"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/Node/nodeMaterialBuildState.ts"],"sourcesContent":["import { NodeMaterialBlockConnectionPointTypes } from \"./Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport { NodeMaterialBlockTargets } from \"./Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialBuildStateSharedData } from \"./nodeMaterialBuildStateSharedData\";\r\nimport { Effect } from \"../effect\";\r\n\r\n/**\r\n * Class used to store node based material build state\r\n */\r\nexport class NodeMaterialBuildState {\r\n    /** Gets or sets a boolean indicating if the current state can emit uniform buffers */\r\n    public supportUniformBuffers = false;\r\n    /**\r\n     * Gets the list of emitted attributes\r\n     */\r\n    public attributes = new Array<string>();\r\n    /**\r\n     * Gets the list of emitted uniforms\r\n     */\r\n    public uniforms = new Array<string>();\r\n    /**\r\n     * Gets the list of emitted constants\r\n     */\r\n    public constants = new Array<string>();\r\n    /**\r\n     * Gets the list of emitted samplers\r\n     */\r\n    public samplers = new Array<string>();\r\n    /**\r\n     * Gets the list of emitted functions\r\n     */\r\n    public functions: { [key: string]: string } = {};\r\n    /**\r\n     * Gets the list of emitted extensions\r\n     */\r\n    public extensions: { [key: string]: string } = {};\r\n\r\n    /**\r\n     * Gets the target of the compilation state\r\n     */\r\n    public target: NodeMaterialBlockTargets;\r\n    /**\r\n     * Gets the list of emitted counters\r\n     */\r\n    public counters: { [key: string]: number } = {};\r\n\r\n    /**\r\n     * Shared data between multiple NodeMaterialBuildState instances\r\n     */\r\n    public sharedData: NodeMaterialBuildStateSharedData;\r\n\r\n    /** @internal */\r\n    public _vertexState: NodeMaterialBuildState;\r\n\r\n    /** @internal */\r\n    public _attributeDeclaration = \"\";\r\n    /** @internal */\r\n    public _uniformDeclaration = \"\";\r\n    /** @internal */\r\n    public _constantDeclaration = \"\";\r\n    /** @internal */\r\n    public _samplerDeclaration = \"\";\r\n    /** @internal */\r\n    public _varyingTransfer = \"\";\r\n    /** @internal */\r\n    public _injectAtEnd = \"\";\r\n\r\n    private _repeatableContentAnchorIndex = 0;\r\n    /** @internal */\r\n    public _builtCompilationString = \"\";\r\n\r\n    /**\r\n     * Gets the emitted compilation strings\r\n     */\r\n    public compilationString = \"\";\r\n\r\n    /**\r\n     * Finalize the compilation strings\r\n     * @param state defines the current compilation state\r\n     */\r\n    public finalize(state: NodeMaterialBuildState) {\r\n        const emitComments = state.sharedData.emitComments;\r\n        const isFragmentMode = this.target === NodeMaterialBlockTargets.Fragment;\r\n\r\n        this.compilationString = `\\r\\n${emitComments ? \"//Entry point\\r\\n\" : \"\"}void main(void) {\\r\\n${this.compilationString}`;\r\n\r\n        if (this._constantDeclaration) {\r\n            this.compilationString = `\\r\\n${emitComments ? \"//Constants\\r\\n\" : \"\"}${this._constantDeclaration}\\r\\n${this.compilationString}`;\r\n        }\r\n\r\n        let functionCode = \"\";\r\n        for (const functionName in this.functions) {\r\n            functionCode += this.functions[functionName] + `\\r\\n`;\r\n        }\r\n        this.compilationString = `\\r\\n${functionCode}\\r\\n${this.compilationString}`;\r\n\r\n        if (!isFragmentMode && this._varyingTransfer) {\r\n            this.compilationString = `${this.compilationString}\\r\\n${this._varyingTransfer}`;\r\n        }\r\n\r\n        if (this._injectAtEnd) {\r\n            this.compilationString = `${this.compilationString}\\r\\n${this._injectAtEnd}`;\r\n        }\r\n\r\n        this.compilationString = `${this.compilationString}\\r\\n}`;\r\n\r\n        if (this.sharedData.varyingDeclaration) {\r\n            this.compilationString = `\\r\\n${emitComments ? \"//Varyings\\r\\n\" : \"\"}${this.sharedData.varyingDeclaration}\\r\\n${this.compilationString}`;\r\n        }\r\n\r\n        if (this._samplerDeclaration) {\r\n            this.compilationString = `\\r\\n${emitComments ? \"//Samplers\\r\\n\" : \"\"}${this._samplerDeclaration}\\r\\n${this.compilationString}`;\r\n        }\r\n\r\n        if (this._uniformDeclaration) {\r\n            this.compilationString = `\\r\\n${emitComments ? \"//Uniforms\\r\\n\" : \"\"}${this._uniformDeclaration}\\r\\n${this.compilationString}`;\r\n        }\r\n\r\n        if (this._attributeDeclaration && !isFragmentMode) {\r\n            this.compilationString = `\\r\\n${emitComments ? \"//Attributes\\r\\n\" : \"\"}${this._attributeDeclaration}\\r\\n${this.compilationString}`;\r\n        }\r\n\r\n        this.compilationString = \"precision highp float;\\r\\n\" + this.compilationString;\r\n\r\n        for (const extensionName in this.extensions) {\r\n            const extension = this.extensions[extensionName];\r\n            this.compilationString = `\\r\\n${extension}\\r\\n${this.compilationString}`;\r\n        }\r\n\r\n        this._builtCompilationString = this.compilationString;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _repeatableContentAnchor(): string {\r\n        return `###___ANCHOR${this._repeatableContentAnchorIndex++}___###`;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getFreeVariableName(prefix: string): string {\r\n        prefix = prefix.replace(/[^a-zA-Z_]+/g, \"\");\r\n\r\n        if (this.sharedData.variableNames[prefix] === undefined) {\r\n            this.sharedData.variableNames[prefix] = 0;\r\n\r\n            // Check reserved words\r\n            if (prefix === \"output\" || prefix === \"texture\") {\r\n                return prefix + this.sharedData.variableNames[prefix];\r\n            }\r\n\r\n            return prefix;\r\n        } else {\r\n            this.sharedData.variableNames[prefix]++;\r\n        }\r\n\r\n        return prefix + this.sharedData.variableNames[prefix];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getFreeDefineName(prefix: string): string {\r\n        if (this.sharedData.defineNames[prefix] === undefined) {\r\n            this.sharedData.defineNames[prefix] = 0;\r\n        } else {\r\n            this.sharedData.defineNames[prefix]++;\r\n        }\r\n\r\n        return prefix + this.sharedData.defineNames[prefix];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _excludeVariableName(name: string) {\r\n        this.sharedData.variableNames[name] = 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _emit2DSampler(name: string) {\r\n        if (this.samplers.indexOf(name) < 0) {\r\n            this._samplerDeclaration += `uniform sampler2D ${name};\\r\\n`;\r\n            this.samplers.push(name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getGLType(type: NodeMaterialBlockConnectionPointTypes): string {\r\n        switch (type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float:\r\n                return \"float\";\r\n            case NodeMaterialBlockConnectionPointTypes.Int:\r\n                return \"int\";\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                return \"vec2\";\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                return \"vec3\";\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                return \"vec4\";\r\n            case NodeMaterialBlockConnectionPointTypes.Matrix:\r\n                return \"mat4\";\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _emitExtension(name: string, extension: string, define: string = \"\") {\r\n        if (this.extensions[name]) {\r\n            return;\r\n        }\r\n\r\n        if (define) {\r\n            extension = `#if ${define}\\r\\n${extension}\\r\\n#endif`;\r\n        }\r\n        this.extensions[name] = extension;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _emitFunction(name: string, code: string, comments: string) {\r\n        if (this.functions[name]) {\r\n            return;\r\n        }\r\n\r\n        if (this.sharedData.emitComments) {\r\n            code = comments + `\\r\\n` + code;\r\n        }\r\n\r\n        this.functions[name] = code;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _emitCodeFromInclude(\r\n        includeName: string,\r\n        comments: string,\r\n        options?: {\r\n            replaceStrings?: { search: RegExp; replace: string }[];\r\n            repeatKey?: string;\r\n            substitutionVars?: string;\r\n        }\r\n    ) {\r\n        if (options && options.repeatKey) {\r\n            return `#include<${includeName}>${options.substitutionVars ? \"(\" + options.substitutionVars + \")\" : \"\"}[0..${options.repeatKey}]\\r\\n`;\r\n        }\r\n\r\n        let code = Effect.IncludesShadersStore[includeName] + \"\\r\\n\";\r\n\r\n        if (this.sharedData.emitComments) {\r\n            code = comments + `\\r\\n` + code;\r\n        }\r\n\r\n        if (!options) {\r\n            return code;\r\n        }\r\n\r\n        if (options.replaceStrings) {\r\n            for (let index = 0; index < options.replaceStrings.length; index++) {\r\n                const replaceString = options.replaceStrings[index];\r\n                code = code.replace(replaceString.search, replaceString.replace);\r\n            }\r\n        }\r\n\r\n        return code;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _emitFunctionFromInclude(\r\n        includeName: string,\r\n        comments: string,\r\n        options?: {\r\n            repeatKey?: string;\r\n            substitutionVars?: string;\r\n            removeAttributes?: boolean;\r\n            removeUniforms?: boolean;\r\n            removeVaryings?: boolean;\r\n            removeIfDef?: boolean;\r\n            replaceStrings?: { search: RegExp; replace: string }[];\r\n        },\r\n        storeKey: string = \"\"\r\n    ) {\r\n        const key = includeName + storeKey;\r\n        if (this.functions[key]) {\r\n            return;\r\n        }\r\n\r\n        if (!options || (!options.removeAttributes && !options.removeUniforms && !options.removeVaryings && !options.removeIfDef && !options.replaceStrings)) {\r\n            if (options && options.repeatKey) {\r\n                this.functions[key] = `#include<${includeName}>${options.substitutionVars ? \"(\" + options.substitutionVars + \")\" : \"\"}[0..${options.repeatKey}]\\r\\n`;\r\n            } else {\r\n                this.functions[key] = `#include<${includeName}>${options?.substitutionVars ? \"(\" + options?.substitutionVars + \")\" : \"\"}\\r\\n`;\r\n            }\r\n\r\n            if (this.sharedData.emitComments) {\r\n                this.functions[key] = comments + `\\r\\n` + this.functions[key];\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        this.functions[key] = Effect.IncludesShadersStore[includeName];\r\n\r\n        if (this.sharedData.emitComments) {\r\n            this.functions[key] = comments + `\\r\\n` + this.functions[key];\r\n        }\r\n\r\n        if (options.removeIfDef) {\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?#ifdef.+$/gm, \"\");\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?#endif.*$/gm, \"\");\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?#else.*$/gm, \"\");\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?#elif.*$/gm, \"\");\r\n        }\r\n\r\n        if (options.removeAttributes) {\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?attribute.+$/gm, \"\");\r\n        }\r\n\r\n        if (options.removeUniforms) {\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?uniform.+$/gm, \"\");\r\n        }\r\n\r\n        if (options.removeVaryings) {\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?varying.+$/gm, \"\");\r\n        }\r\n\r\n        if (options.replaceStrings) {\r\n            for (let index = 0; index < options.replaceStrings.length; index++) {\r\n                const replaceString = options.replaceStrings[index];\r\n                this.functions[key] = this.functions[key].replace(replaceString.search, replaceString.replace);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _registerTempVariable(name: string) {\r\n        if (this.sharedData.temps.indexOf(name) !== -1) {\r\n            return false;\r\n        }\r\n\r\n        this.sharedData.temps.push(name);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _emitVaryingFromString(name: string, type: string, define: string = \"\", notDefine = false) {\r\n        if (this.sharedData.varyings.indexOf(name) !== -1) {\r\n            return false;\r\n        }\r\n\r\n        this.sharedData.varyings.push(name);\r\n\r\n        if (define) {\r\n            if (define.startsWith(\"defined(\")) {\r\n                this.sharedData.varyingDeclaration += `#if ${define}\\r\\n`;\r\n            } else {\r\n                this.sharedData.varyingDeclaration += `${notDefine ? \"#ifndef\" : \"#ifdef\"} ${define}\\r\\n`;\r\n            }\r\n        }\r\n        this.sharedData.varyingDeclaration += `varying ${type} ${name};\\r\\n`;\r\n        if (define) {\r\n            this.sharedData.varyingDeclaration += `#endif\\r\\n`;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _emitUniformFromString(name: string, type: string, define: string = \"\", notDefine = false) {\r\n        if (this.uniforms.indexOf(name) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this.uniforms.push(name);\r\n\r\n        if (define) {\r\n            if (define.startsWith(\"defined(\")) {\r\n                this._uniformDeclaration += `#if ${define}\\r\\n`;\r\n            } else {\r\n                this._uniformDeclaration += `${notDefine ? \"#ifndef\" : \"#ifdef\"} ${define}\\r\\n`;\r\n            }\r\n        }\r\n        this._uniformDeclaration += `uniform ${type} ${name};\\r\\n`;\r\n        if (define) {\r\n            this._uniformDeclaration += `#endif\\r\\n`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _emitFloat(value: number) {\r\n        if (value.toString() === value.toFixed(0)) {\r\n            return `${value}.0`;\r\n        }\r\n\r\n        return value.toString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}