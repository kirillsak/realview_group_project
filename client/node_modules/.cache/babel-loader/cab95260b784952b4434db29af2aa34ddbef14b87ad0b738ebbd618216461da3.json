{"ast":null,"code":"import { Quaternion } from \"../../Maths/math.vector.js\";\n/**\n * PhysicsBody is useful for creating a physics body that can be used in a physics engine. It allows\n * the user to set the mass and velocity of the body, which can then be used to calculate the\n * motion of the body in the physics engine.\n */\nexport class PhysicsBody {\n  /**\n   * Constructs a new physics body for the given node.\n   * @param transformNode - The Transform Node to construct the physics body for.\n   * @param scene - The scene containing the physics engine.\n   *\n   * This code is useful for creating a physics body for a given Transform Node in a scene.\n   * It checks the version of the physics engine and the physics plugin, and initializes the body accordingly.\n   * It also sets the node's rotation quaternion if it is not already set. Finally, it adds the body to the physics engine.\n   */\n  constructor(transformNode, scene) {\n    /**\n     * V2 Physics plugin private data for single Transform\n     */\n    this._pluginData = undefined;\n    /**\n     * V2 Physics plugin private data for instances\n     */\n    this._pluginDataInstances = [];\n    /**\n     * Disable pre-step that consists in updating Physics Body from Transform Node Translation/Orientation.\n     * True by default for maximum performance.\n     */\n    this.disablePreStep = true;\n    if (!scene) {\n      return;\n    }\n    const physicsEngine = scene.getPhysicsEngine();\n    if (!physicsEngine) {\n      throw new Error(\"No Physics Engine available.\");\n    }\n    if (physicsEngine.getPluginVersion() != 2) {\n      throw new Error(\"Plugin version is incorrect. Expected version 2.\");\n    }\n    const physicsPlugin = physicsEngine.getPhysicsPlugin();\n    if (!physicsPlugin) {\n      throw new Error(\"No Physics Plugin available.\");\n    }\n    this._physicsPlugin = physicsPlugin;\n    if (!transformNode.rotationQuaternion) {\n      transformNode.rotationQuaternion = Quaternion.FromEulerAngles(transformNode.rotation.x, transformNode.rotation.y, transformNode.rotation.z);\n    }\n    // instances?\n    const m = transformNode;\n    if (m.hasThinInstances) {\n      this._physicsPlugin.initBodyInstances(this, m);\n    } else {\n      // single instance\n      this._physicsPlugin.initBody(this, transformNode.position, transformNode.rotationQuaternion);\n    }\n    this.transformNode = transformNode;\n    transformNode.physicsBody = this;\n    physicsEngine.addBody(this);\n  }\n  /**\n   * Sets the shape of the physics body.\n   * @param shape - The shape of the physics body.\n   *\n   * This method is useful for setting the shape of the physics body, which is necessary for the physics engine to accurately simulate the body's behavior.\n   * The shape is used to calculate the body's mass, inertia, and other properties.\n   */\n  setShape(shape) {\n    this._physicsPlugin.setShape(this, shape);\n  }\n  /**\n   * Retrieves the physics shape associated with this object.\n   *\n   * @returns The physics shape associated with this object, or `undefined` if no\n   * shape is associated.\n   *\n   * This method is useful for retrieving the physics shape associated with this object,\n   * which can be used to apply physical forces to the object or to detect collisions.\n   */\n  getShape() {\n    return this._physicsPlugin.getShape(this);\n  }\n  /**\n   * Sets the filter group of the physics body.\n   * @param group - The filter group of the physics body.\n   *\n   * This method is useful for setting the filter group of the physics body.\n   * The filter group is used to determine which bodies should collide with each other.\n   * This allows for more control over the physics engine and can be used to create more realistic simulations.\n   */\n  setFilterGroup(group) {\n    this._physicsPlugin.setFilterGroup(this, group);\n  }\n  /**\n   * Gets the filter group of the physics engine.\n   *\n   * @returns The filter group of the physics engine.\n   *\n   * This method is useful for getting the filter group of the physics engine,\n   * which is used to determine which objects will interact with each other.\n   * This is important for creating realistic physics simulations.\n   */\n  getFilterGroup() {\n    return this._physicsPlugin.getFilterGroup(this);\n  }\n  /**\n   * Sets the event mask for the physics engine.\n   *\n   * @param eventMask - A bitmask that determines which events will be sent to the physics engine.\n   *\n   * This method is useful for setting the event mask for the physics engine, which determines which events\n   * will be sent to the physics engine. This allows the user to control which events the physics engine will respond to.\n   */\n  setEventMask(eventMask) {\n    this._physicsPlugin.setEventMask(this, eventMask);\n  }\n  /**\n   * Gets the event mask of the physics engine.\n   *\n   * @returns The event mask of the physics engine.\n   *\n   * This method is useful for getting the event mask of the physics engine,\n   * which is used to determine which events the engine will respond to.\n   * This is important for ensuring that the engine is responding to the correct events and not\n   * wasting resources on unnecessary events.\n   */\n  getEventMask() {\n    return this._physicsPlugin.getEventMask(this);\n  }\n  /**\n   * Sets the mass properties of the physics object.\n   *\n   * @param massProps - The mass properties to set.\n   *\n   * This method is useful for setting the mass properties of a physics object, such as its mass,\n   * inertia, and center of mass. This is important for accurately simulating the physics of the object in the physics engine.\n   */\n  setMassProperties(massProps) {\n    this._physicsPlugin.setMassProperties(this, massProps);\n  }\n  /**\n   * Retrieves the mass properties of the object.\n   *\n   * @returns The mass properties of the object, or `undefined` if the physics\n   * plugin does not support mass properties.\n   *\n   * This method is useful for physics simulations, as it allows the user to\n   * retrieve the mass properties of the object, such as its mass, center of mass,\n   * and moment of inertia. This information is necessary for accurate physics\n   * simulations.\n   */\n  getMassProperties() {\n    return this._physicsPlugin.getMassProperties(this);\n  }\n  /**\n   * Sets the linear damping of the physics body.\n   *\n   * @param damping - The linear damping value.\n   *\n   * This method is useful for controlling the linear damping of the physics body,\n   * which is the rate at which the body's velocity decreases over time. This is useful for simulating\n   * the effects of air resistance or other forms of friction.\n   */\n  setLinearDamping(damping) {\n    this._physicsPlugin.setLinearDamping(this, damping);\n  }\n  /**\n   * Gets the linear damping of the physics body.\n   * @returns The linear damping of the physics body.\n   *\n   * This method is useful for retrieving the linear damping of the physics body, which is the amount of\n   * resistance the body has to linear motion. This is useful for simulating realistic physics behavior\n   * in a game.\n   */\n  getLinearDamping() {\n    return this._physicsPlugin.getLinearDamping(this);\n  }\n  /**\n   * Sets the angular damping of the physics body.\n   * @param damping The angular damping of the body.\n   *\n   * This method is useful for controlling the angular velocity of a physics body.\n   * By setting the damping, the body's angular velocity will be reduced over time, simulating the effect of friction.\n   * This can be used to create realistic physical behavior in a physics engine.\n   */\n  setAngularDamping(damping) {\n    this._physicsPlugin.setAngularDamping(this, damping);\n  }\n  /**\n   * Gets the angular damping of the physics body.\n   *\n   * @returns The angular damping of the physics body.\n   *\n   * This method is useful for getting the angular damping of the physics body,\n   * which is the rate of reduction of the angular velocity over time.\n   * This is important for simulating realistic physics behavior in a game.\n   */\n  getAngularDamping() {\n    return this._physicsPlugin.getAngularDamping(this);\n  }\n  /**\n   * Sets the linear velocity of the physics object.\n   * @param linVel - The linear velocity to set.\n   *\n   * This method is useful for setting the linear velocity of a physics object,\n   * which is necessary for simulating realistic physics in a game engine.\n   * By setting the linear velocity, the physics object will move in the direction and speed specified by the vector.\n   * This allows for realistic physics simulations, such as simulating the motion of a ball rolling down a hill.\n   */\n  setLinearVelocity(linVel) {\n    this._physicsPlugin.setLinearVelocity(this, linVel);\n  }\n  /**\n   * Gets the linear velocity of the physics body and stores it in the given vector3.\n   * @param linVel - The vector3 to store the linear velocity in.\n   *\n   * This method is useful for getting the linear velocity of a physics body in a physics engine.\n   * This can be used to determine the speed and direction of the body, which can be used to calculate the motion of the body.*/\n  getLinearVelocityToRef(linVel) {\n    return this._physicsPlugin.getLinearVelocityToRef(this, linVel);\n  }\n  /**\n   * Sets the angular velocity of the physics object.\n   * @param angVel - The angular velocity to set.\n   *\n   * This method is useful for setting the angular velocity of a physics object, which is necessary for\n   * simulating realistic physics behavior. The angular velocity is used to determine the rate of rotation of the object,\n   * which is important for simulating realistic motion.\n   */\n  setAngularVelocity(angVel) {\n    this._physicsPlugin.setAngularVelocity(this, angVel);\n  }\n  /**\n   * Gets the angular velocity of the physics body and stores it in the given vector3.\n   * @param angVel - The vector3 to store the angular velocity in.\n   *\n   * This method is useful for getting the angular velocity of a physics body, which can be used to determine the body's\n   * rotational speed. This information can be used to create realistic physics simulations.\n   */\n  getAngularVelocityToRef(angVel) {\n    return this._physicsPlugin.getAngularVelocityToRef(this, angVel);\n  }\n  /**\n   * Applies an impulse to the physics object.\n   *\n   * @param location The location of the impulse.\n   * @param impulse The impulse vector.\n   *\n   * This method is useful for applying an impulse to a physics object, which can be used to simulate physical forces such as gravity,\n   * collisions, and explosions. This can be used to create realistic physics simulations in a game or other application.\n   */\n  applyImpulse(location, impulse) {\n    this._physicsPlugin.applyImpulse(this, location, impulse);\n  }\n  /**\n   * Retrieves the geometry of the body from the physics plugin.\n   *\n   * @returns The geometry of the body.\n   *\n   * This method is useful for retrieving the geometry of the body from the physics plugin, which can be used for various physics calculations.\n   */\n  getGeometry() {\n    return this._physicsPlugin.getBodyGeometry(this);\n  }\n  /**\n   * Disposes the body from the physics engine.\n   *\n   * This method is useful for cleaning up the physics engine when a body is no longer needed. Disposing the body will free up resources and prevent memory leaks.\n   */\n  dispose() {\n    this._physicsPlugin.disposeBody(this);\n  }\n}","map":{"version":3,"mappings":"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","names":["Quaternion","PhysicsBody","constructor","transformNode","scene","undefined","physicsEngine","getPhysicsEngine","Error","getPluginVersion","physicsPlugin","getPhysicsPlugin","_physicsPlugin","rotationQuaternion","FromEulerAngles","rotation","x","y","z","m","hasThinInstances","initBodyInstances","initBody","position","physicsBody","addBody","setShape","shape","getShape","setFilterGroup","group","getFilterGroup","setEventMask","eventMask","getEventMask","setMassProperties","massProps","getMassProperties","setLinearDamping","damping","getLinearDamping","setAngularDamping","getAngularDamping","setLinearVelocity","linVel","getLinearVelocityToRef","setAngularVelocity","angVel","getAngularVelocityToRef","applyImpulse","location","impulse","getGeometry","getBodyGeometry","dispose","disposeBody"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Physics/v2/physicsBody.ts"],"sourcesContent":["import type { IPhysicsEnginePluginV2, MassProperties } from \"./IPhysicsEnginePlugin\";\r\nimport type { PhysicsShape } from \"./physicsShape\";\r\nimport type { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Quaternion } from \"../../Maths/math.vector\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { PhysicsEngine } from \"./physicsEngine\";\r\nimport type { Mesh, TransformNode } from \"../../Meshes\";\r\n\r\n/**\r\n * PhysicsBody is useful for creating a physics body that can be used in a physics engine. It allows\r\n * the user to set the mass and velocity of the body, which can then be used to calculate the\r\n * motion of the body in the physics engine.\r\n */\r\nexport class PhysicsBody {\r\n    /**\r\n     * V2 Physics plugin private data for single Transform\r\n     */\r\n    public _pluginData: any = undefined;\r\n    /**\r\n     * V2 Physics plugin private data for instances\r\n     */\r\n    public _pluginDataInstances: Array<any> = [];\r\n    /**\r\n     * The V2 plugin used to create and manage this Physics Body\r\n     */\r\n    private _physicsPlugin: IPhysicsEnginePluginV2;\r\n    /**\r\n     * The transform node associated with this Physics Body\r\n     */\r\n    transformNode: TransformNode;\r\n    /**\r\n     * Disable pre-step that consists in updating Physics Body from Transform Node Translation/Orientation.\r\n     * True by default for maximum performance.\r\n     */\r\n    disablePreStep: boolean = true;\r\n\r\n    /**\r\n     * Constructs a new physics body for the given node.\r\n     * @param transformNode - The Transform Node to construct the physics body for.\r\n     * @param scene - The scene containing the physics engine.\r\n     *\r\n     * This code is useful for creating a physics body for a given Transform Node in a scene.\r\n     * It checks the version of the physics engine and the physics plugin, and initializes the body accordingly.\r\n     * It also sets the node's rotation quaternion if it is not already set. Finally, it adds the body to the physics engine.\r\n     */\r\n    constructor(transformNode: TransformNode, scene: Scene) {\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        const physicsEngine = scene.getPhysicsEngine() as PhysicsEngine;\r\n        if (!physicsEngine) {\r\n            throw new Error(\"No Physics Engine available.\");\r\n        }\r\n        if (physicsEngine.getPluginVersion() != 2) {\r\n            throw new Error(\"Plugin version is incorrect. Expected version 2.\");\r\n        }\r\n        const physicsPlugin = physicsEngine.getPhysicsPlugin();\r\n        if (!physicsPlugin) {\r\n            throw new Error(\"No Physics Plugin available.\");\r\n        }\r\n\r\n        this._physicsPlugin = physicsPlugin as IPhysicsEnginePluginV2;\r\n        if (!transformNode.rotationQuaternion) {\r\n            transformNode.rotationQuaternion = Quaternion.FromEulerAngles(transformNode.rotation.x, transformNode.rotation.y, transformNode.rotation.z);\r\n        }\r\n        // instances?\r\n        const m = transformNode as Mesh;\r\n        if (m.hasThinInstances) {\r\n            this._physicsPlugin.initBodyInstances(this, m);\r\n        } else {\r\n            // single instance\r\n            this._physicsPlugin.initBody(this, transformNode.position, transformNode.rotationQuaternion);\r\n        }\r\n        this.transformNode = transformNode;\r\n        transformNode.physicsBody = this;\r\n        physicsEngine.addBody(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the shape of the physics body.\r\n     * @param shape - The shape of the physics body.\r\n     *\r\n     * This method is useful for setting the shape of the physics body, which is necessary for the physics engine to accurately simulate the body's behavior.\r\n     * The shape is used to calculate the body's mass, inertia, and other properties.\r\n     */\r\n    public setShape(shape: PhysicsShape): void {\r\n        this._physicsPlugin.setShape(this, shape);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the physics shape associated with this object.\r\n     *\r\n     * @returns The physics shape associated with this object, or `undefined` if no\r\n     * shape is associated.\r\n     *\r\n     * This method is useful for retrieving the physics shape associated with this object,\r\n     * which can be used to apply physical forces to the object or to detect collisions.\r\n     */\r\n    public getShape(): PhysicsShape | undefined {\r\n        return this._physicsPlugin.getShape(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the filter group of the physics body.\r\n     * @param group - The filter group of the physics body.\r\n     *\r\n     * This method is useful for setting the filter group of the physics body.\r\n     * The filter group is used to determine which bodies should collide with each other.\r\n     * This allows for more control over the physics engine and can be used to create more realistic simulations.\r\n     */\r\n    public setFilterGroup(group: number): void {\r\n        this._physicsPlugin.setFilterGroup(this, group);\r\n    }\r\n\r\n    /**\r\n     * Gets the filter group of the physics engine.\r\n     *\r\n     * @returns The filter group of the physics engine.\r\n     *\r\n     * This method is useful for getting the filter group of the physics engine,\r\n     * which is used to determine which objects will interact with each other.\r\n     * This is important for creating realistic physics simulations.\r\n     */\r\n    public getFilterGroup(): number {\r\n        return this._physicsPlugin.getFilterGroup(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the event mask for the physics engine.\r\n     *\r\n     * @param eventMask - A bitmask that determines which events will be sent to the physics engine.\r\n     *\r\n     * This method is useful for setting the event mask for the physics engine, which determines which events\r\n     * will be sent to the physics engine. This allows the user to control which events the physics engine will respond to.\r\n     */\r\n    public setEventMask(eventMask: number): void {\r\n        this._physicsPlugin.setEventMask(this, eventMask);\r\n    }\r\n\r\n    /**\r\n     * Gets the event mask of the physics engine.\r\n     *\r\n     * @returns The event mask of the physics engine.\r\n     *\r\n     * This method is useful for getting the event mask of the physics engine,\r\n     * which is used to determine which events the engine will respond to.\r\n     * This is important for ensuring that the engine is responding to the correct events and not\r\n     * wasting resources on unnecessary events.\r\n     */\r\n    public getEventMask(): number {\r\n        return this._physicsPlugin.getEventMask(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the mass properties of the physics object.\r\n     *\r\n     * @param massProps - The mass properties to set.\r\n     *\r\n     * This method is useful for setting the mass properties of a physics object, such as its mass,\r\n     * inertia, and center of mass. This is important for accurately simulating the physics of the object in the physics engine.\r\n     */\r\n    public setMassProperties(massProps: MassProperties): void {\r\n        this._physicsPlugin.setMassProperties(this, massProps);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the mass properties of the object.\r\n     *\r\n     * @returns The mass properties of the object, or `undefined` if the physics\r\n     * plugin does not support mass properties.\r\n     *\r\n     * This method is useful for physics simulations, as it allows the user to\r\n     * retrieve the mass properties of the object, such as its mass, center of mass,\r\n     * and moment of inertia. This information is necessary for accurate physics\r\n     * simulations.\r\n     */\r\n    public getMassProperties(): MassProperties | undefined {\r\n        return this._physicsPlugin.getMassProperties(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the linear damping of the physics body.\r\n     *\r\n     * @param damping - The linear damping value.\r\n     *\r\n     * This method is useful for controlling the linear damping of the physics body,\r\n     * which is the rate at which the body's velocity decreases over time. This is useful for simulating\r\n     * the effects of air resistance or other forms of friction.\r\n     */\r\n    public setLinearDamping(damping: number): void {\r\n        this._physicsPlugin.setLinearDamping(this, damping);\r\n    }\r\n\r\n    /**\r\n     * Gets the linear damping of the physics body.\r\n     * @returns The linear damping of the physics body.\r\n     *\r\n     * This method is useful for retrieving the linear damping of the physics body, which is the amount of\r\n     * resistance the body has to linear motion. This is useful for simulating realistic physics behavior\r\n     * in a game.\r\n     */\r\n    public getLinearDamping(): number {\r\n        return this._physicsPlugin.getLinearDamping(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the angular damping of the physics body.\r\n     * @param damping The angular damping of the body.\r\n     *\r\n     * This method is useful for controlling the angular velocity of a physics body.\r\n     * By setting the damping, the body's angular velocity will be reduced over time, simulating the effect of friction.\r\n     * This can be used to create realistic physical behavior in a physics engine.\r\n     */\r\n    public setAngularDamping(damping: number): void {\r\n        this._physicsPlugin.setAngularDamping(this, damping);\r\n    }\r\n\r\n    /**\r\n     * Gets the angular damping of the physics body.\r\n     *\r\n     * @returns The angular damping of the physics body.\r\n     *\r\n     * This method is useful for getting the angular damping of the physics body,\r\n     * which is the rate of reduction of the angular velocity over time.\r\n     * This is important for simulating realistic physics behavior in a game.\r\n     */\r\n    public getAngularDamping(): number {\r\n        return this._physicsPlugin.getAngularDamping(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the linear velocity of the physics object.\r\n     * @param linVel - The linear velocity to set.\r\n     *\r\n     * This method is useful for setting the linear velocity of a physics object,\r\n     * which is necessary for simulating realistic physics in a game engine.\r\n     * By setting the linear velocity, the physics object will move in the direction and speed specified by the vector.\r\n     * This allows for realistic physics simulations, such as simulating the motion of a ball rolling down a hill.\r\n     */\r\n    public setLinearVelocity(linVel: Vector3): void {\r\n        this._physicsPlugin.setLinearVelocity(this, linVel);\r\n    }\r\n\r\n    /**\r\n     * Gets the linear velocity of the physics body and stores it in the given vector3.\r\n     * @param linVel - The vector3 to store the linear velocity in.\r\n     *\r\n     * This method is useful for getting the linear velocity of a physics body in a physics engine.\r\n     * This can be used to determine the speed and direction of the body, which can be used to calculate the motion of the body.*/\r\n    public getLinearVelocityToRef(linVel: Vector3): void {\r\n        return this._physicsPlugin.getLinearVelocityToRef(this, linVel);\r\n    }\r\n\r\n    /**\r\n     * Sets the angular velocity of the physics object.\r\n     * @param angVel - The angular velocity to set.\r\n     *\r\n     * This method is useful for setting the angular velocity of a physics object, which is necessary for\r\n     * simulating realistic physics behavior. The angular velocity is used to determine the rate of rotation of the object,\r\n     * which is important for simulating realistic motion.\r\n     */\r\n    public setAngularVelocity(angVel: Vector3): void {\r\n        this._physicsPlugin.setAngularVelocity(this, angVel);\r\n    }\r\n\r\n    /**\r\n     * Gets the angular velocity of the physics body and stores it in the given vector3.\r\n     * @param angVel - The vector3 to store the angular velocity in.\r\n     *\r\n     * This method is useful for getting the angular velocity of a physics body, which can be used to determine the body's\r\n     * rotational speed. This information can be used to create realistic physics simulations.\r\n     */\r\n    public getAngularVelocityToRef(angVel: Vector3): void {\r\n        return this._physicsPlugin.getAngularVelocityToRef(this, angVel);\r\n    }\r\n\r\n    /**\r\n     * Applies an impulse to the physics object.\r\n     *\r\n     * @param location The location of the impulse.\r\n     * @param impulse The impulse vector.\r\n     *\r\n     * This method is useful for applying an impulse to a physics object, which can be used to simulate physical forces such as gravity,\r\n     * collisions, and explosions. This can be used to create realistic physics simulations in a game or other application.\r\n     */\r\n    public applyImpulse(location: Vector3, impulse: Vector3): void {\r\n        this._physicsPlugin.applyImpulse(this, location, impulse);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the geometry of the body from the physics plugin.\r\n     *\r\n     * @returns The geometry of the body.\r\n     *\r\n     * This method is useful for retrieving the geometry of the body from the physics plugin, which can be used for various physics calculations.\r\n     */\r\n    public getGeometry(): {} {\r\n        return this._physicsPlugin.getBodyGeometry(this);\r\n    }\r\n\r\n    /**\r\n     * Disposes the body from the physics engine.\r\n     *\r\n     * This method is useful for cleaning up the physics engine when a body is no longer needed. Disposing the body will free up resources and prevent memory leaks.\r\n     */\r\n    public dispose() {\r\n        this._physicsPlugin.disposeBody(this);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}