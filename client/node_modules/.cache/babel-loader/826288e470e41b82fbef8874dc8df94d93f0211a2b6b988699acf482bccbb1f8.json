{"ast":null,"code":"import { ThinEngine } from \"../Engines/thinEngine.js\";\nimport { EffectRenderer, EffectWrapper } from \"../Materials/effectRenderer.js\";\nimport { Tools } from \"./tools.js\";\nimport { passPixelShader } from \"../Shaders/pass.fragment.js\";\n/**\n * Class containing a set of static utilities functions to dump data from a canvas\n */\nexport class DumpTools {\n  static _CreateDumpRenderer() {\n    if (!DumpTools._DumpToolsEngine) {\n      const canvas = document.createElement(\"canvas\");\n      const engine = new ThinEngine(canvas, false, {\n        preserveDrawingBuffer: true,\n        depth: false,\n        stencil: false,\n        alpha: true,\n        premultipliedAlpha: false,\n        antialias: false,\n        failIfMajorPerformanceCaveat: false\n      });\n      engine.getCaps().parallelShaderCompile = undefined;\n      const renderer = new EffectRenderer(engine);\n      const wrapper = new EffectWrapper({\n        engine,\n        name: passPixelShader.name,\n        fragmentShader: passPixelShader.shader,\n        samplerNames: [\"textureSampler\"]\n      });\n      DumpTools._DumpToolsEngine = {\n        canvas,\n        engine,\n        renderer,\n        wrapper\n      };\n    }\n    return DumpTools._DumpToolsEngine;\n  }\n  /**\n   * Dumps the current bound framebuffer\n   * @param width defines the rendering width\n   * @param height defines the rendering height\n   * @param engine defines the hosting engine\n   * @param successCallback defines the callback triggered once the data are available\n   * @param mimeType defines the mime type of the result\n   * @param fileName defines the filename to download. If present, the result will automatically be downloaded\n   * @returns a void promise\n   */\n  static async DumpFramebuffer(width, height, engine, successCallback, mimeType = \"image/png\", fileName) {\n    // Read the contents of the framebuffer\n    const bufferView = await engine.readPixels(0, 0, width, height);\n    const data = new Uint8Array(bufferView.buffer);\n    DumpTools.DumpData(width, height, data, successCallback, mimeType, fileName, true);\n  }\n  /**\n   * Dumps an array buffer\n   * @param width defines the rendering width\n   * @param height defines the rendering height\n   * @param data the data array\n   * @param mimeType defines the mime type of the result\n   * @param fileName defines the filename to download. If present, the result will automatically be downloaded\n   * @param invertY true to invert the picture in the Y dimension\n   * @param toArrayBuffer true to convert the data to an ArrayBuffer (encoded as `mimeType`) instead of a base64 string\n   * @param quality defines the quality of the result\n   * @returns a promise that resolve to the final data\n   */\n  static DumpDataAsync(width, height, data, mimeType = \"image/png\", fileName, invertY = false, toArrayBuffer = false, quality) {\n    return new Promise(resolve => {\n      DumpTools.DumpData(width, height, data, result => resolve(result), mimeType, fileName, invertY, toArrayBuffer, quality);\n    });\n  }\n  /**\n   * Dumps an array buffer\n   * @param width defines the rendering width\n   * @param height defines the rendering height\n   * @param data the data array\n   * @param successCallback defines the callback triggered once the data are available\n   * @param mimeType defines the mime type of the result\n   * @param fileName defines the filename to download. If present, the result will automatically be downloaded\n   * @param invertY true to invert the picture in the Y dimension\n   * @param toArrayBuffer true to convert the data to an ArrayBuffer (encoded as `mimeType`) instead of a base64 string\n   * @param quality defines the quality of the result\n   */\n  static DumpData(width, height, data, successCallback, mimeType = \"image/png\", fileName, invertY = false, toArrayBuffer = false, quality) {\n    const renderer = DumpTools._CreateDumpRenderer();\n    renderer.engine.setSize(width, height, true);\n    // Convert if data are float32\n    if (data instanceof Float32Array) {\n      const data2 = new Uint8Array(data.length);\n      let n = data.length;\n      while (n--) {\n        const v = data[n];\n        data2[n] = v < 0 ? 0 : v > 1 ? 1 : Math.round(v * 255);\n      }\n      data = data2;\n    }\n    // Create the image\n    const texture = renderer.engine.createRawTexture(data, width, height, 5, false, !invertY, 1);\n    renderer.renderer.setViewport();\n    renderer.renderer.applyEffectWrapper(renderer.wrapper);\n    renderer.wrapper.effect._bindTexture(\"textureSampler\", texture);\n    renderer.renderer.draw();\n    if (toArrayBuffer) {\n      Tools.ToBlob(renderer.canvas, blob => {\n        const fileReader = new FileReader();\n        fileReader.onload = event => {\n          const arrayBuffer = event.target.result;\n          if (successCallback) {\n            successCallback(arrayBuffer);\n          }\n        };\n        fileReader.readAsArrayBuffer(blob);\n      }, mimeType, quality);\n    } else {\n      Tools.EncodeScreenshotCanvasData(renderer.canvas, successCallback, mimeType, fileName, quality);\n    }\n    texture.dispose();\n  }\n  /**\n   * Dispose the dump tools associated resources\n   */\n  static Dispose() {\n    if (DumpTools._DumpToolsEngine) {\n      DumpTools._DumpToolsEngine.wrapper.dispose();\n      DumpTools._DumpToolsEngine.renderer.dispose();\n      DumpTools._DumpToolsEngine.engine.dispose();\n    }\n    DumpTools._DumpToolsEngine = null;\n  }\n}\n/**\n * This will be executed automatically for UMD and es5.\n * If esm dev wants the side effects to execute they will have to run it manually\n * Once we build native modules those need to be exported.\n * @internal\n */\nconst initSideEffects = () => {\n  // References the dependencies.\n  Tools.DumpData = DumpTools.DumpData;\n  Tools.DumpDataAsync = DumpTools.DumpDataAsync;\n  Tools.DumpFramebuffer = DumpTools.DumpFramebuffer;\n};\ninitSideEffects();","map":{"version":3,"mappings":"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","names":["ThinEngine","EffectRenderer","EffectWrapper","Tools","passPixelShader","DumpTools","_CreateDumpRenderer","_DumpToolsEngine","canvas","document","createElement","engine","preserveDrawingBuffer","depth","stencil","alpha","premultipliedAlpha","antialias","failIfMajorPerformanceCaveat","getCaps","parallelShaderCompile","undefined","renderer","wrapper","name","fragmentShader","shader","samplerNames","DumpFramebuffer","width","height","successCallback","mimeType","fileName","bufferView","readPixels","data","Uint8Array","buffer","DumpData","DumpDataAsync","invertY","toArrayBuffer","quality","Promise","resolve","result","setSize","Float32Array","data2","length","n","v","Math","round","texture","createRawTexture","setViewport","applyEffectWrapper","effect","_bindTexture","draw","ToBlob","blob","fileReader","FileReader","onload","event","arrayBuffer","target","readAsArrayBuffer","EncodeScreenshotCanvasData","dispose","Dispose","initSideEffects"],"sourceRoot":"","sources":["../../../../lts/core/generated/Misc/dumpTools.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { _WarnImport } from \"./devTools\";\r\nimport type { Engine } from \"../Engines/engine\";\r\n\r\nimport { ThinEngine } from \"../Engines/thinEngine\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { EffectRenderer, EffectWrapper } from \"../Materials/effectRenderer\";\r\nimport { Tools } from \"./tools\";\r\nimport type { Nullable } from \"../types\";\r\n\r\nimport { passPixelShader } from \"../Shaders/pass.fragment\";\r\n\r\ntype DumpToolsEngine = {\r\n    canvas: HTMLCanvasElement;\r\n    engine: ThinEngine;\r\n    renderer: EffectRenderer;\r\n    wrapper: EffectWrapper;\r\n};\r\n\r\n/**\r\n * Class containing a set of static utilities functions to dump data from a canvas\r\n */\r\nexport class DumpTools {\r\n    private static _DumpToolsEngine: Nullable<DumpToolsEngine>;\r\n\r\n    private static _CreateDumpRenderer(): DumpToolsEngine {\r\n        if (!DumpTools._DumpToolsEngine) {\r\n            const canvas = document.createElement(\"canvas\");\r\n            const engine = new ThinEngine(canvas, false, {\r\n                preserveDrawingBuffer: true,\r\n                depth: false,\r\n                stencil: false,\r\n                alpha: true,\r\n                premultipliedAlpha: false,\r\n                antialias: false,\r\n                failIfMajorPerformanceCaveat: false,\r\n            });\r\n            engine.getCaps().parallelShaderCompile = undefined;\r\n            const renderer = new EffectRenderer(engine);\r\n            const wrapper = new EffectWrapper({\r\n                engine,\r\n                name: passPixelShader.name,\r\n                fragmentShader: passPixelShader.shader,\r\n                samplerNames: [\"textureSampler\"],\r\n            });\r\n            DumpTools._DumpToolsEngine = {\r\n                canvas,\r\n                engine,\r\n                renderer,\r\n                wrapper,\r\n            };\r\n        }\r\n        return DumpTools._DumpToolsEngine!;\r\n    }\r\n\r\n    /**\r\n     * Dumps the current bound framebuffer\r\n     * @param width defines the rendering width\r\n     * @param height defines the rendering height\r\n     * @param engine defines the hosting engine\r\n     * @param successCallback defines the callback triggered once the data are available\r\n     * @param mimeType defines the mime type of the result\r\n     * @param fileName defines the filename to download. If present, the result will automatically be downloaded\r\n     * @returns a void promise\r\n     */\r\n    public static async DumpFramebuffer(\r\n        width: number,\r\n        height: number,\r\n        engine: Engine,\r\n        successCallback?: (data: string) => void,\r\n        mimeType: string = \"image/png\",\r\n        fileName?: string\r\n    ) {\r\n        // Read the contents of the framebuffer\r\n        const bufferView = await engine.readPixels(0, 0, width, height);\r\n\r\n        const data = new Uint8Array(bufferView.buffer);\r\n\r\n        DumpTools.DumpData(width, height, data, successCallback as (data: string | ArrayBuffer) => void, mimeType, fileName, true);\r\n    }\r\n\r\n    /**\r\n     * Dumps an array buffer\r\n     * @param width defines the rendering width\r\n     * @param height defines the rendering height\r\n     * @param data the data array\r\n     * @param mimeType defines the mime type of the result\r\n     * @param fileName defines the filename to download. If present, the result will automatically be downloaded\r\n     * @param invertY true to invert the picture in the Y dimension\r\n     * @param toArrayBuffer true to convert the data to an ArrayBuffer (encoded as `mimeType`) instead of a base64 string\r\n     * @param quality defines the quality of the result\r\n     * @returns a promise that resolve to the final data\r\n     */\r\n    public static DumpDataAsync(\r\n        width: number,\r\n        height: number,\r\n        data: ArrayBufferView,\r\n        mimeType: string = \"image/png\",\r\n        fileName?: string,\r\n        invertY = false,\r\n        toArrayBuffer = false,\r\n        quality?: number\r\n    ): Promise<string | ArrayBuffer> {\r\n        return new Promise((resolve) => {\r\n            DumpTools.DumpData(width, height, data, (result) => resolve(result), mimeType, fileName, invertY, toArrayBuffer, quality);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dumps an array buffer\r\n     * @param width defines the rendering width\r\n     * @param height defines the rendering height\r\n     * @param data the data array\r\n     * @param successCallback defines the callback triggered once the data are available\r\n     * @param mimeType defines the mime type of the result\r\n     * @param fileName defines the filename to download. If present, the result will automatically be downloaded\r\n     * @param invertY true to invert the picture in the Y dimension\r\n     * @param toArrayBuffer true to convert the data to an ArrayBuffer (encoded as `mimeType`) instead of a base64 string\r\n     * @param quality defines the quality of the result\r\n     */\r\n    public static DumpData(\r\n        width: number,\r\n        height: number,\r\n        data: ArrayBufferView,\r\n        successCallback?: (data: string | ArrayBuffer) => void,\r\n        mimeType: string = \"image/png\",\r\n        fileName?: string,\r\n        invertY = false,\r\n        toArrayBuffer = false,\r\n        quality?: number\r\n    ) {\r\n        const renderer = DumpTools._CreateDumpRenderer();\r\n        renderer.engine.setSize(width, height, true);\r\n\r\n        // Convert if data are float32\r\n        if (data instanceof Float32Array) {\r\n            const data2 = new Uint8Array(data.length);\r\n            let n = data.length;\r\n            while (n--) {\r\n                const v = data[n];\r\n                data2[n] = v < 0 ? 0 : v > 1 ? 1 : Math.round(v * 255);\r\n            }\r\n            data = data2;\r\n        }\r\n\r\n        // Create the image\r\n        const texture = renderer.engine.createRawTexture(data, width, height, Constants.TEXTUREFORMAT_RGBA, false, !invertY, Constants.TEXTURE_NEAREST_NEAREST);\r\n\r\n        renderer.renderer.setViewport();\r\n        renderer.renderer.applyEffectWrapper(renderer.wrapper);\r\n        renderer.wrapper.effect._bindTexture(\"textureSampler\", texture);\r\n        renderer.renderer.draw();\r\n\r\n        if (toArrayBuffer) {\r\n            Tools.ToBlob(\r\n                renderer.canvas,\r\n                (blob) => {\r\n                    const fileReader = new FileReader();\r\n                    fileReader.onload = (event: any) => {\r\n                        const arrayBuffer = event.target!.result as ArrayBuffer;\r\n                        if (successCallback) {\r\n                            successCallback(arrayBuffer);\r\n                        }\r\n                    };\r\n                    fileReader.readAsArrayBuffer(blob!);\r\n                },\r\n                mimeType,\r\n                quality\r\n            );\r\n        } else {\r\n            Tools.EncodeScreenshotCanvasData(renderer.canvas, successCallback, mimeType, fileName, quality);\r\n        }\r\n\r\n        texture.dispose();\r\n    }\r\n\r\n    /**\r\n     * Dispose the dump tools associated resources\r\n     */\r\n    public static Dispose() {\r\n        if (DumpTools._DumpToolsEngine) {\r\n            DumpTools._DumpToolsEngine.wrapper.dispose();\r\n            DumpTools._DumpToolsEngine.renderer.dispose();\r\n            DumpTools._DumpToolsEngine.engine.dispose();\r\n        }\r\n        DumpTools._DumpToolsEngine = null;\r\n    }\r\n}\r\n\r\n/**\r\n * This will be executed automatically for UMD and es5.\r\n * If esm dev wants the side effects to execute they will have to run it manually\r\n * Once we build native modules those need to be exported.\r\n * @internal\r\n */\r\nconst initSideEffects = () => {\r\n    // References the dependencies.\r\n    Tools.DumpData = DumpTools.DumpData;\r\n    Tools.DumpDataAsync = DumpTools.DumpDataAsync;\r\n    Tools.DumpFramebuffer = DumpTools.DumpFramebuffer;\r\n};\r\n\r\ninitSideEffects();\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}