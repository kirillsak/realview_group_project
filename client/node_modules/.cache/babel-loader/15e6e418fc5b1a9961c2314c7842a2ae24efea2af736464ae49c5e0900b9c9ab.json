{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * Helper class to push actions to a pool of workers.\n */\nexport class WorkerPool {\n  /**\n   * Constructor\n   * @param workers Array of workers to use for actions\n   */\n  constructor(workers) {\n    this._pendingActions = new Array();\n    this._workerInfos = workers.map(worker => ({\n      workerPromise: Promise.resolve(worker),\n      idle: true\n    }));\n  }\n  /**\n   * Terminates all workers and clears any pending actions.\n   */\n  dispose() {\n    for (const workerInfo of this._workerInfos) {\n      workerInfo.workerPromise.then(worker => {\n        worker.terminate();\n      });\n    }\n    this._workerInfos.length = 0;\n    this._pendingActions.length = 0;\n  }\n  /**\n   * Pushes an action to the worker pool. If all the workers are active, the action will be\n   * pended until a worker has completed its action.\n   * @param action The action to perform. Call onComplete when the action is complete.\n   */\n  push(action) {\n    if (!this._executeOnIdleWorker(action)) {\n      this._pendingActions.push(action);\n    }\n  }\n  _executeOnIdleWorker(action) {\n    for (const workerInfo of this._workerInfos) {\n      if (workerInfo.idle) {\n        this._execute(workerInfo, action);\n        return true;\n      }\n    }\n    return false;\n  }\n  _execute(workerInfo, action) {\n    workerInfo.idle = false;\n    workerInfo.workerPromise.then(worker => {\n      action(worker, () => {\n        const nextAction = this._pendingActions.shift();\n        if (nextAction) {\n          this._execute(workerInfo, nextAction);\n        } else {\n          workerInfo.idle = true;\n        }\n      });\n    });\n  }\n}\n/**\n * Similar to the WorkerPool class except it creates and destroys workers automatically with a maximum of `maxWorkers` workers.\n * Workers are terminated when it is idle for at least `idleTimeElapsedBeforeRelease` milliseconds.\n */\nexport class AutoReleaseWorkerPool extends WorkerPool {\n  constructor(maxWorkers, createWorkerAsync, options = AutoReleaseWorkerPool.DefaultOptions) {\n    super([]);\n    this._maxWorkers = maxWorkers;\n    this._createWorkerAsync = createWorkerAsync;\n    this._options = options;\n  }\n  push(action) {\n    if (!this._executeOnIdleWorker(action)) {\n      if (this._workerInfos.length < this._maxWorkers) {\n        const workerInfo = {\n          workerPromise: this._createWorkerAsync(),\n          idle: false\n        };\n        this._workerInfos.push(workerInfo);\n        this._execute(workerInfo, action);\n      } else {\n        this._pendingActions.push(action);\n      }\n    }\n  }\n  _execute(workerInfo, action) {\n    // Reset the idle timeout.\n    if (workerInfo.timeoutId) {\n      clearTimeout(workerInfo.timeoutId);\n      delete workerInfo.timeoutId;\n    }\n    super._execute(workerInfo, (worker, onComplete) => {\n      action(worker, () => {\n        onComplete();\n        if (workerInfo.idle) {\n          // Schedule the worker to be terminated after the elapsed time.\n          workerInfo.timeoutId = setTimeout(() => {\n            workerInfo.workerPromise.then(worker => {\n              worker.terminate();\n            });\n            const indexOf = this._workerInfos.indexOf(workerInfo);\n            if (indexOf !== -1) {\n              this._workerInfos.splice(indexOf, 1);\n            }\n          }, this._options.idleTimeElapsedBeforeRelease);\n        }\n      });\n    });\n  }\n}\n/**\n * Default options for the constructor.\n * Override to change the defaults.\n */\nAutoReleaseWorkerPool.DefaultOptions = {\n  idleTimeElapsedBeforeRelease: 1000\n};","map":{"version":3,"mappings":"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","names":["WorkerPool","constructor","workers","Array","_workerInfos","map","worker","workerPromise","Promise","resolve","idle","dispose","workerInfo","then","terminate","length","_pendingActions","push","action","_executeOnIdleWorker","_execute","nextAction","shift","AutoReleaseWorkerPool","maxWorkers","createWorkerAsync","options","DefaultOptions","_maxWorkers","_createWorkerAsync","_options","timeoutId","clearTimeout","onComplete","setTimeout","indexOf","splice","idleTimeElapsedBeforeRelease"],"sourceRoot":"","sources":["../../../../lts/core/generated/Misc/workerPool.ts"],"sourcesContent":["import type { IDisposable } from \"../scene\";\r\n\r\n/** @ignore */\r\ninterface WorkerInfo {\r\n    workerPromise: Promise<Worker>;\r\n    idle: boolean;\r\n    timeoutId?: ReturnType<typeof setTimeout>;\r\n}\r\n\r\n/**\r\n * Helper class to push actions to a pool of workers.\r\n */\r\nexport class WorkerPool implements IDisposable {\r\n    protected _workerInfos: Array<WorkerInfo>;\r\n    protected _pendingActions = new Array<(worker: Worker, onComplete: () => void) => void>();\r\n\r\n    /**\r\n     * Constructor\r\n     * @param workers Array of workers to use for actions\r\n     */\r\n    constructor(workers: Array<Worker>) {\r\n        this._workerInfos = workers.map((worker) => ({\r\n            workerPromise: Promise.resolve(worker),\r\n            idle: true,\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Terminates all workers and clears any pending actions.\r\n     */\r\n    public dispose(): void {\r\n        for (const workerInfo of this._workerInfos) {\r\n            workerInfo.workerPromise.then((worker) => {\r\n                worker.terminate();\r\n            });\r\n        }\r\n\r\n        this._workerInfos.length = 0;\r\n        this._pendingActions.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Pushes an action to the worker pool. If all the workers are active, the action will be\r\n     * pended until a worker has completed its action.\r\n     * @param action The action to perform. Call onComplete when the action is complete.\r\n     */\r\n    public push(action: (worker: Worker, onComplete: () => void) => void): void {\r\n        if (!this._executeOnIdleWorker(action)) {\r\n            this._pendingActions.push(action);\r\n        }\r\n    }\r\n\r\n    protected _executeOnIdleWorker(action: (worker: Worker, onComplete: () => void) => void): boolean {\r\n        for (const workerInfo of this._workerInfos) {\r\n            if (workerInfo.idle) {\r\n                this._execute(workerInfo, action);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected _execute(workerInfo: WorkerInfo, action: (worker: Worker, onComplete: () => void) => void): void {\r\n        workerInfo.idle = false;\r\n        workerInfo.workerPromise.then((worker) => {\r\n            action(worker, () => {\r\n                const nextAction = this._pendingActions.shift();\r\n                if (nextAction) {\r\n                    this._execute(workerInfo, nextAction);\r\n                } else {\r\n                    workerInfo.idle = true;\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Options for AutoReleaseWorkerPool\r\n */\r\nexport interface AutoReleaseWorkerPoolOptions {\r\n    /**\r\n     * Idle time elapsed before workers are terminated.\r\n     */\r\n    idleTimeElapsedBeforeRelease: number;\r\n}\r\n\r\n/**\r\n * Similar to the WorkerPool class except it creates and destroys workers automatically with a maximum of `maxWorkers` workers.\r\n * Workers are terminated when it is idle for at least `idleTimeElapsedBeforeRelease` milliseconds.\r\n */\r\nexport class AutoReleaseWorkerPool extends WorkerPool {\r\n    /**\r\n     * Default options for the constructor.\r\n     * Override to change the defaults.\r\n     */\r\n    public static DefaultOptions: AutoReleaseWorkerPoolOptions = {\r\n        idleTimeElapsedBeforeRelease: 1000,\r\n    };\r\n\r\n    private readonly _maxWorkers: number;\r\n    private readonly _createWorkerAsync: () => Promise<Worker>;\r\n    private readonly _options: AutoReleaseWorkerPoolOptions;\r\n\r\n    constructor(maxWorkers: number, createWorkerAsync: () => Promise<Worker>, options = AutoReleaseWorkerPool.DefaultOptions) {\r\n        super([]);\r\n\r\n        this._maxWorkers = maxWorkers;\r\n        this._createWorkerAsync = createWorkerAsync;\r\n        this._options = options;\r\n    }\r\n\r\n    public push(action: (worker: Worker, onComplete: () => void) => void): void {\r\n        if (!this._executeOnIdleWorker(action)) {\r\n            if (this._workerInfos.length < this._maxWorkers) {\r\n                const workerInfo: WorkerInfo = {\r\n                    workerPromise: this._createWorkerAsync(),\r\n                    idle: false,\r\n                };\r\n                this._workerInfos.push(workerInfo);\r\n                this._execute(workerInfo, action);\r\n            } else {\r\n                this._pendingActions.push(action);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _execute(workerInfo: WorkerInfo, action: (worker: Worker, onComplete: () => void) => void): void {\r\n        // Reset the idle timeout.\r\n        if (workerInfo.timeoutId) {\r\n            clearTimeout(workerInfo.timeoutId);\r\n            delete workerInfo.timeoutId;\r\n        }\r\n\r\n        super._execute(workerInfo, (worker, onComplete) => {\r\n            action(worker, () => {\r\n                onComplete();\r\n\r\n                if (workerInfo.idle) {\r\n                    // Schedule the worker to be terminated after the elapsed time.\r\n                    workerInfo.timeoutId = setTimeout(() => {\r\n                        workerInfo.workerPromise.then((worker) => {\r\n                            worker.terminate();\r\n                        });\r\n\r\n                        const indexOf = this._workerInfos.indexOf(workerInfo);\r\n                        if (indexOf !== -1) {\r\n                            this._workerInfos.splice(indexOf, 1);\r\n                        }\r\n                    }, this._options.idleTimeElapsedBeforeRelease);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}