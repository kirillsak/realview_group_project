{"ast":null,"code":"import { GLTFLoader } from \"../glTFLoader.js\";\nconst NAME = \"KHR_mesh_quantization\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_mesh_quantization/README.md)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_mesh_quantization {\n  /**\n   * @internal\n   */\n  constructor(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    this.enabled = loader.isExtensionUsed(NAME);\n  }\n  /** @internal */\n  dispose() {}\n}\nGLTFLoader.RegisterExtension(NAME, loader => new KHR_mesh_quantization(loader));","map":{"version":3,"mappings":"AACA,SAASA,UAAU,QAAQ,kBAAgB;AAE3C,MAAMC,IAAI,GAAG,uBAAuB;AAEpC;;;AAGA;AACA,OAAM,MAAOC,qBAAqB;EAW9B;;;EAGAC,YAAYC,MAAkB;IAb9B;;;IAGgB,SAAI,GAAGH,IAAI;IAWvB,IAAI,CAACI,OAAO,GAAGD,MAAM,CAACE,eAAe,CAACL,IAAI,CAAC;EAC/C;EAEA;EACOM,OAAO,IAAI;;AAGtBP,UAAU,CAACQ,iBAAiB,CAACP,IAAI,EAAGG,MAAM,IAAK,IAAIF,qBAAqB,CAACE,MAAM,CAAC,CAAC","names":["GLTFLoader","NAME","KHR_mesh_quantization","constructor","loader","enabled","isExtensionUsed","dispose","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_mesh_quantization.ts"],"sourcesContent":["import type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\n\r\nconst NAME = \"KHR_mesh_quantization\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_mesh_quantization/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_mesh_quantization implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this.enabled = loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {}\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_mesh_quantization(loader));\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}