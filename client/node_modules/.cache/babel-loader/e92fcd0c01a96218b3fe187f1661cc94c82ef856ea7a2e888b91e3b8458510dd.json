{"ast":null,"code":"import { __decorate } from \"../../tslib.es6.js\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { BaseCameraMouseWheelInput } from \"../../Cameras/Inputs/BaseCameraMouseWheelInput.js\";\nimport { Matrix, Vector3 } from \"../../Maths/math.vector.js\";\nimport { Coordinate } from \"../../Maths/math.axis.js\";\n// eslint-disable-next-line @typescript-eslint/naming-convention\nvar _CameraProperty;\n(function (_CameraProperty) {\n  _CameraProperty[_CameraProperty[\"MoveRelative\"] = 0] = \"MoveRelative\";\n  _CameraProperty[_CameraProperty[\"RotateRelative\"] = 1] = \"RotateRelative\";\n  _CameraProperty[_CameraProperty[\"MoveScene\"] = 2] = \"MoveScene\";\n})(_CameraProperty || (_CameraProperty = {}));\n/**\n * Manage the mouse wheel inputs to control a free camera.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\n */\nexport class FreeCameraMouseWheelInput extends BaseCameraMouseWheelInput {\n  constructor() {\n    super(...arguments);\n    this._moveRelative = Vector3.Zero();\n    this._rotateRelative = Vector3.Zero();\n    this._moveScene = Vector3.Zero();\n    /**\n     * These are set to the desired default behaviour.\n     */\n    this._wheelXAction = _CameraProperty.MoveRelative;\n    this._wheelXActionCoordinate = Coordinate.X;\n    this._wheelYAction = _CameraProperty.MoveRelative;\n    this._wheelYActionCoordinate = Coordinate.Z;\n    this._wheelZAction = null;\n    this._wheelZActionCoordinate = null;\n  }\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n  getClassName() {\n    return \"FreeCameraMouseWheelInput\";\n  }\n  /**\n   * Set which movement axis (relative to camera's orientation) the mouse\n   * wheel's X axis controls.\n   * @param axis The axis to be moved. Set null to clear.\n   */\n  set wheelXMoveRelative(axis) {\n    if (axis === null && this._wheelXAction !== _CameraProperty.MoveRelative) {\n      // Attempting to clear different _wheelXAction.\n      return;\n    }\n    this._wheelXAction = _CameraProperty.MoveRelative;\n    this._wheelXActionCoordinate = axis;\n  }\n  /**\n   * Get the configured movement axis (relative to camera's orientation) the\n   * mouse wheel's X axis controls.\n   * @returns The configured axis or null if none.\n   */\n  get wheelXMoveRelative() {\n    if (this._wheelXAction !== _CameraProperty.MoveRelative) {\n      return null;\n    }\n    return this._wheelXActionCoordinate;\n  }\n  /**\n   * Set which movement axis (relative to camera's orientation) the mouse\n   * wheel's Y axis controls.\n   * @param axis The axis to be moved. Set null to clear.\n   */\n  set wheelYMoveRelative(axis) {\n    if (axis === null && this._wheelYAction !== _CameraProperty.MoveRelative) {\n      // Attempting to clear different _wheelYAction.\n      return;\n    }\n    this._wheelYAction = _CameraProperty.MoveRelative;\n    this._wheelYActionCoordinate = axis;\n  }\n  /**\n   * Get the configured movement axis (relative to camera's orientation) the\n   * mouse wheel's Y axis controls.\n   * @returns The configured axis or null if none.\n   */\n  get wheelYMoveRelative() {\n    if (this._wheelYAction !== _CameraProperty.MoveRelative) {\n      return null;\n    }\n    return this._wheelYActionCoordinate;\n  }\n  /**\n   * Set which movement axis (relative to camera's orientation) the mouse\n   * wheel's Z axis controls.\n   * @param axis The axis to be moved. Set null to clear.\n   */\n  set wheelZMoveRelative(axis) {\n    if (axis === null && this._wheelZAction !== _CameraProperty.MoveRelative) {\n      // Attempting to clear different _wheelZAction.\n      return;\n    }\n    this._wheelZAction = _CameraProperty.MoveRelative;\n    this._wheelZActionCoordinate = axis;\n  }\n  /**\n   * Get the configured movement axis (relative to camera's orientation) the\n   * mouse wheel's Z axis controls.\n   * @returns The configured axis or null if none.\n   */\n  get wheelZMoveRelative() {\n    if (this._wheelZAction !== _CameraProperty.MoveRelative) {\n      return null;\n    }\n    return this._wheelZActionCoordinate;\n  }\n  /**\n   * Set which rotation axis (relative to camera's orientation) the mouse\n   * wheel's X axis controls.\n   * @param axis The axis to be moved. Set null to clear.\n   */\n  set wheelXRotateRelative(axis) {\n    if (axis === null && this._wheelXAction !== _CameraProperty.RotateRelative) {\n      // Attempting to clear different _wheelXAction.\n      return;\n    }\n    this._wheelXAction = _CameraProperty.RotateRelative;\n    this._wheelXActionCoordinate = axis;\n  }\n  /**\n   * Get the configured rotation axis (relative to camera's orientation) the\n   * mouse wheel's X axis controls.\n   * @returns The configured axis or null if none.\n   */\n  get wheelXRotateRelative() {\n    if (this._wheelXAction !== _CameraProperty.RotateRelative) {\n      return null;\n    }\n    return this._wheelXActionCoordinate;\n  }\n  /**\n   * Set which rotation axis (relative to camera's orientation) the mouse\n   * wheel's Y axis controls.\n   * @param axis The axis to be moved. Set null to clear.\n   */\n  set wheelYRotateRelative(axis) {\n    if (axis === null && this._wheelYAction !== _CameraProperty.RotateRelative) {\n      // Attempting to clear different _wheelYAction.\n      return;\n    }\n    this._wheelYAction = _CameraProperty.RotateRelative;\n    this._wheelYActionCoordinate = axis;\n  }\n  /**\n   * Get the configured rotation axis (relative to camera's orientation) the\n   * mouse wheel's Y axis controls.\n   * @returns The configured axis or null if none.\n   */\n  get wheelYRotateRelative() {\n    if (this._wheelYAction !== _CameraProperty.RotateRelative) {\n      return null;\n    }\n    return this._wheelYActionCoordinate;\n  }\n  /**\n   * Set which rotation axis (relative to camera's orientation) the mouse\n   * wheel's Z axis controls.\n   * @param axis The axis to be moved. Set null to clear.\n   */\n  set wheelZRotateRelative(axis) {\n    if (axis === null && this._wheelZAction !== _CameraProperty.RotateRelative) {\n      // Attempting to clear different _wheelZAction.\n      return;\n    }\n    this._wheelZAction = _CameraProperty.RotateRelative;\n    this._wheelZActionCoordinate = axis;\n  }\n  /**\n   * Get the configured rotation axis (relative to camera's orientation) the\n   * mouse wheel's Z axis controls.\n   * @returns The configured axis or null if none.\n   */\n  get wheelZRotateRelative() {\n    if (this._wheelZAction !== _CameraProperty.RotateRelative) {\n      return null;\n    }\n    return this._wheelZActionCoordinate;\n  }\n  /**\n   * Set which movement axis (relative to the scene) the mouse wheel's X axis\n   * controls.\n   * @param axis The axis to be moved. Set null to clear.\n   */\n  set wheelXMoveScene(axis) {\n    if (axis === null && this._wheelXAction !== _CameraProperty.MoveScene) {\n      // Attempting to clear different _wheelXAction.\n      return;\n    }\n    this._wheelXAction = _CameraProperty.MoveScene;\n    this._wheelXActionCoordinate = axis;\n  }\n  /**\n   * Get the configured movement axis (relative to the scene) the mouse wheel's\n   * X axis controls.\n   * @returns The configured axis or null if none.\n   */\n  get wheelXMoveScene() {\n    if (this._wheelXAction !== _CameraProperty.MoveScene) {\n      return null;\n    }\n    return this._wheelXActionCoordinate;\n  }\n  /**\n   * Set which movement axis (relative to the scene) the mouse wheel's Y axis\n   * controls.\n   * @param axis The axis to be moved. Set null to clear.\n   */\n  set wheelYMoveScene(axis) {\n    if (axis === null && this._wheelYAction !== _CameraProperty.MoveScene) {\n      // Attempting to clear different _wheelYAction.\n      return;\n    }\n    this._wheelYAction = _CameraProperty.MoveScene;\n    this._wheelYActionCoordinate = axis;\n  }\n  /**\n   * Get the configured movement axis (relative to the scene) the mouse wheel's\n   * Y axis controls.\n   * @returns The configured axis or null if none.\n   */\n  get wheelYMoveScene() {\n    if (this._wheelYAction !== _CameraProperty.MoveScene) {\n      return null;\n    }\n    return this._wheelYActionCoordinate;\n  }\n  /**\n   * Set which movement axis (relative to the scene) the mouse wheel's Z axis\n   * controls.\n   * @param axis The axis to be moved. Set null to clear.\n   */\n  set wheelZMoveScene(axis) {\n    if (axis === null && this._wheelZAction !== _CameraProperty.MoveScene) {\n      // Attempting to clear different _wheelZAction.\n      return;\n    }\n    this._wheelZAction = _CameraProperty.MoveScene;\n    this._wheelZActionCoordinate = axis;\n  }\n  /**\n   * Get the configured movement axis (relative to the scene) the mouse wheel's\n   * Z axis controls.\n   * @returns The configured axis or null if none.\n   */\n  get wheelZMoveScene() {\n    if (this._wheelZAction !== _CameraProperty.MoveScene) {\n      return null;\n    }\n    return this._wheelZActionCoordinate;\n  }\n  /**\n   * Called for each rendered frame.\n   */\n  checkInputs() {\n    if (this._wheelDeltaX === 0 && this._wheelDeltaY === 0 && this._wheelDeltaZ == 0) {\n      return;\n    }\n    // Clear the camera properties that we might be updating.\n    this._moveRelative.setAll(0);\n    this._rotateRelative.setAll(0);\n    this._moveScene.setAll(0);\n    // Set the camera properties that are to be updated.\n    this._updateCamera();\n    if (this.camera.getScene().useRightHandedSystem) {\n      // TODO: Does this need done for worldUpdate too?\n      this._moveRelative.z *= -1;\n    }\n    // Convert updates relative to camera to world position update.\n    const cameraTransformMatrix = Matrix.Zero();\n    this.camera.getViewMatrix().invertToRef(cameraTransformMatrix);\n    const transformedDirection = Vector3.Zero();\n    Vector3.TransformNormalToRef(this._moveRelative, cameraTransformMatrix, transformedDirection);\n    // Apply updates to camera position.\n    this.camera.cameraRotation.x += this._rotateRelative.x / 200;\n    this.camera.cameraRotation.y += this._rotateRelative.y / 200;\n    this.camera.cameraDirection.addInPlace(transformedDirection);\n    this.camera.cameraDirection.addInPlace(this._moveScene);\n    // Call the base class implementation to handle observers and do cleanup.\n    super.checkInputs();\n  }\n  /**\n   * Update the camera according to any configured properties for the 3\n   * mouse-wheel axis.\n   */\n  _updateCamera() {\n    // Do the camera updates for each of the 3 touch-wheel axis.\n    this._updateCameraProperty(this._wheelDeltaX, this._wheelXAction, this._wheelXActionCoordinate);\n    this._updateCameraProperty(this._wheelDeltaY, this._wheelYAction, this._wheelYActionCoordinate);\n    this._updateCameraProperty(this._wheelDeltaZ, this._wheelZAction, this._wheelZActionCoordinate);\n  }\n  /**\n   * Update one property of the camera.\n   * @param value\n   * @param cameraProperty\n   * @param coordinate\n   */\n  _updateCameraProperty( /* Mouse-wheel delta. */\n  value, /* Camera property to be changed. */\n  cameraProperty, /* Axis of Camera property to be changed. */\n  coordinate) {\n    if (value === 0) {\n      // Mouse wheel has not moved.\n      return;\n    }\n    if (cameraProperty === null || coordinate === null) {\n      // Mouse wheel axis not configured.\n      return;\n    }\n    let action = null;\n    switch (cameraProperty) {\n      case _CameraProperty.MoveRelative:\n        action = this._moveRelative;\n        break;\n      case _CameraProperty.RotateRelative:\n        action = this._rotateRelative;\n        break;\n      case _CameraProperty.MoveScene:\n        action = this._moveScene;\n        break;\n    }\n    switch (coordinate) {\n      case Coordinate.X:\n        action.set(value, 0, 0);\n        break;\n      case Coordinate.Y:\n        action.set(0, value, 0);\n        break;\n      case Coordinate.Z:\n        action.set(0, 0, value);\n        break;\n    }\n  }\n}\n__decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelXMoveRelative\", null);\n__decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelYMoveRelative\", null);\n__decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelZMoveRelative\", null);\n__decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelXRotateRelative\", null);\n__decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelYRotateRelative\", null);\n__decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelZRotateRelative\", null);\n__decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelXMoveScene\", null);\n__decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelYMoveScene\", null);\n__decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelZMoveScene\", null);\nCameraInputTypes[\"FreeCameraMouseWheelInput\"] = FreeCameraMouseWheelInput;","map":{"version":3,"mappings":"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","names":["serialize","CameraInputTypes","BaseCameraMouseWheelInput","Matrix","Vector3","Coordinate","_CameraProperty","FreeCameraMouseWheelInput","constructor","Zero","MoveRelative","X","Z","getClassName","wheelXMoveRelative","axis","_wheelXAction","_wheelXActionCoordinate","wheelYMoveRelative","_wheelYAction","_wheelYActionCoordinate","wheelZMoveRelative","_wheelZAction","_wheelZActionCoordinate","wheelXRotateRelative","RotateRelative","wheelYRotateRelative","wheelZRotateRelative","wheelXMoveScene","MoveScene","wheelYMoveScene","wheelZMoveScene","checkInputs","_wheelDeltaX","_wheelDeltaY","_wheelDeltaZ","_moveRelative","setAll","_rotateRelative","_moveScene","_updateCamera","camera","getScene","useRightHandedSystem","z","cameraTransformMatrix","getViewMatrix","invertToRef","transformedDirection","TransformNormalToRef","cameraRotation","x","y","cameraDirection","addInPlace","_updateCameraProperty","value","cameraProperty","coordinate","action","set","Y","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/Inputs/freeCameraMouseWheelInput.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { BaseCameraMouseWheelInput } from \"../../Cameras/Inputs/BaseCameraMouseWheelInput\";\r\nimport { Matrix, Vector3 } from \"../../Maths/math.vector\";\r\nimport { Coordinate } from \"../../Maths/math.axis\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nenum _CameraProperty {\r\n    MoveRelative,\r\n    RotateRelative,\r\n    MoveScene,\r\n}\r\n\r\n/**\r\n * Manage the mouse wheel inputs to control a free camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class FreeCameraMouseWheelInput extends BaseCameraMouseWheelInput {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FreeCamera;\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraMouseWheelInput\";\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to camera's orientation) the mouse\r\n     * wheel's X axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelXMoveRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelXAction !== _CameraProperty.MoveRelative) {\r\n            // Attempting to clear different _wheelXAction.\r\n            return;\r\n        }\r\n        this._wheelXAction = _CameraProperty.MoveRelative;\r\n        this._wheelXActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to camera's orientation) the\r\n     * mouse wheel's X axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelXMoveRelative(): Nullable<Coordinate> {\r\n        if (this._wheelXAction !== _CameraProperty.MoveRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelXActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to camera's orientation) the mouse\r\n     * wheel's Y axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelYMoveRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelYAction !== _CameraProperty.MoveRelative) {\r\n            // Attempting to clear different _wheelYAction.\r\n            return;\r\n        }\r\n        this._wheelYAction = _CameraProperty.MoveRelative;\r\n        this._wheelYActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to camera's orientation) the\r\n     * mouse wheel's Y axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelYMoveRelative(): Nullable<Coordinate> {\r\n        if (this._wheelYAction !== _CameraProperty.MoveRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelYActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to camera's orientation) the mouse\r\n     * wheel's Z axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelZMoveRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelZAction !== _CameraProperty.MoveRelative) {\r\n            // Attempting to clear different _wheelZAction.\r\n            return;\r\n        }\r\n        this._wheelZAction = _CameraProperty.MoveRelative;\r\n        this._wheelZActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to camera's orientation) the\r\n     * mouse wheel's Z axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelZMoveRelative(): Nullable<Coordinate> {\r\n        if (this._wheelZAction !== _CameraProperty.MoveRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelZActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which rotation axis (relative to camera's orientation) the mouse\r\n     * wheel's X axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelXRotateRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelXAction !== _CameraProperty.RotateRelative) {\r\n            // Attempting to clear different _wheelXAction.\r\n            return;\r\n        }\r\n        this._wheelXAction = _CameraProperty.RotateRelative;\r\n        this._wheelXActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured rotation axis (relative to camera's orientation) the\r\n     * mouse wheel's X axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelXRotateRelative(): Nullable<Coordinate> {\r\n        if (this._wheelXAction !== _CameraProperty.RotateRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelXActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which rotation axis (relative to camera's orientation) the mouse\r\n     * wheel's Y axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelYRotateRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelYAction !== _CameraProperty.RotateRelative) {\r\n            // Attempting to clear different _wheelYAction.\r\n            return;\r\n        }\r\n        this._wheelYAction = _CameraProperty.RotateRelative;\r\n        this._wheelYActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured rotation axis (relative to camera's orientation) the\r\n     * mouse wheel's Y axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelYRotateRelative(): Nullable<Coordinate> {\r\n        if (this._wheelYAction !== _CameraProperty.RotateRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelYActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which rotation axis (relative to camera's orientation) the mouse\r\n     * wheel's Z axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelZRotateRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelZAction !== _CameraProperty.RotateRelative) {\r\n            // Attempting to clear different _wheelZAction.\r\n            return;\r\n        }\r\n        this._wheelZAction = _CameraProperty.RotateRelative;\r\n        this._wheelZActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured rotation axis (relative to camera's orientation) the\r\n     * mouse wheel's Z axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelZRotateRelative(): Nullable<Coordinate> {\r\n        if (this._wheelZAction !== _CameraProperty.RotateRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelZActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to the scene) the mouse wheel's X axis\r\n     * controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelXMoveScene(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelXAction !== _CameraProperty.MoveScene) {\r\n            // Attempting to clear different _wheelXAction.\r\n            return;\r\n        }\r\n        this._wheelXAction = _CameraProperty.MoveScene;\r\n        this._wheelXActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\r\n     * X axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelXMoveScene(): Nullable<Coordinate> {\r\n        if (this._wheelXAction !== _CameraProperty.MoveScene) {\r\n            return null;\r\n        }\r\n        return this._wheelXActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to the scene) the mouse wheel's Y axis\r\n     * controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelYMoveScene(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelYAction !== _CameraProperty.MoveScene) {\r\n            // Attempting to clear different _wheelYAction.\r\n            return;\r\n        }\r\n        this._wheelYAction = _CameraProperty.MoveScene;\r\n        this._wheelYActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\r\n     * Y axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelYMoveScene(): Nullable<Coordinate> {\r\n        if (this._wheelYAction !== _CameraProperty.MoveScene) {\r\n            return null;\r\n        }\r\n        return this._wheelYActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to the scene) the mouse wheel's Z axis\r\n     * controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelZMoveScene(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelZAction !== _CameraProperty.MoveScene) {\r\n            // Attempting to clear different _wheelZAction.\r\n            return;\r\n        }\r\n        this._wheelZAction = _CameraProperty.MoveScene;\r\n        this._wheelZActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\r\n     * Z axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelZMoveScene(): Nullable<Coordinate> {\r\n        if (this._wheelZAction !== _CameraProperty.MoveScene) {\r\n            return null;\r\n        }\r\n        return this._wheelZActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Called for each rendered frame.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this._wheelDeltaX === 0 && this._wheelDeltaY === 0 && this._wheelDeltaZ == 0) {\r\n            return;\r\n        }\r\n\r\n        // Clear the camera properties that we might be updating.\r\n        this._moveRelative.setAll(0);\r\n        this._rotateRelative.setAll(0);\r\n        this._moveScene.setAll(0);\r\n\r\n        // Set the camera properties that are to be updated.\r\n        this._updateCamera();\r\n\r\n        if (this.camera.getScene().useRightHandedSystem) {\r\n            // TODO: Does this need done for worldUpdate too?\r\n            this._moveRelative.z *= -1;\r\n        }\r\n\r\n        // Convert updates relative to camera to world position update.\r\n        const cameraTransformMatrix = Matrix.Zero();\r\n        this.camera.getViewMatrix().invertToRef(cameraTransformMatrix);\r\n\r\n        const transformedDirection = Vector3.Zero();\r\n        Vector3.TransformNormalToRef(this._moveRelative, cameraTransformMatrix, transformedDirection);\r\n\r\n        // Apply updates to camera position.\r\n        this.camera.cameraRotation.x += this._rotateRelative.x / 200;\r\n        this.camera.cameraRotation.y += this._rotateRelative.y / 200;\r\n        this.camera.cameraDirection.addInPlace(transformedDirection);\r\n        this.camera.cameraDirection.addInPlace(this._moveScene);\r\n\r\n        // Call the base class implementation to handle observers and do cleanup.\r\n        super.checkInputs();\r\n    }\r\n\r\n    private _moveRelative = Vector3.Zero();\r\n    private _rotateRelative = Vector3.Zero();\r\n    private _moveScene = Vector3.Zero();\r\n\r\n    /**\r\n     * These are set to the desired default behaviour.\r\n     */\r\n    private _wheelXAction: Nullable<_CameraProperty> = _CameraProperty.MoveRelative;\r\n    private _wheelXActionCoordinate: Nullable<Coordinate> = Coordinate.X;\r\n    private _wheelYAction: Nullable<_CameraProperty> = _CameraProperty.MoveRelative;\r\n    private _wheelYActionCoordinate: Nullable<Coordinate> = Coordinate.Z;\r\n    private _wheelZAction: Nullable<_CameraProperty> = null;\r\n    private _wheelZActionCoordinate: Nullable<Coordinate> = null;\r\n\r\n    /**\r\n     * Update the camera according to any configured properties for the 3\r\n     * mouse-wheel axis.\r\n     */\r\n    private _updateCamera(): void {\r\n        // Do the camera updates for each of the 3 touch-wheel axis.\r\n        this._updateCameraProperty(this._wheelDeltaX, this._wheelXAction, this._wheelXActionCoordinate);\r\n        this._updateCameraProperty(this._wheelDeltaY, this._wheelYAction, this._wheelYActionCoordinate);\r\n        this._updateCameraProperty(this._wheelDeltaZ, this._wheelZAction, this._wheelZActionCoordinate);\r\n    }\r\n\r\n    /**\r\n     * Update one property of the camera.\r\n     * @param value\r\n     * @param cameraProperty\r\n     * @param coordinate\r\n     */\r\n    private _updateCameraProperty(\r\n        /* Mouse-wheel delta. */\r\n        value: number,\r\n        /* Camera property to be changed. */\r\n        cameraProperty: Nullable<_CameraProperty>,\r\n        /* Axis of Camera property to be changed. */\r\n        coordinate: Nullable<Coordinate>\r\n    ): void {\r\n        if (value === 0) {\r\n            // Mouse wheel has not moved.\r\n            return;\r\n        }\r\n        if (cameraProperty === null || coordinate === null) {\r\n            // Mouse wheel axis not configured.\r\n            return;\r\n        }\r\n\r\n        let action = null;\r\n        switch (cameraProperty) {\r\n            case _CameraProperty.MoveRelative:\r\n                action = this._moveRelative;\r\n                break;\r\n            case _CameraProperty.RotateRelative:\r\n                action = this._rotateRelative;\r\n                break;\r\n            case _CameraProperty.MoveScene:\r\n                action = this._moveScene;\r\n                break;\r\n        }\r\n\r\n        switch (coordinate) {\r\n            case Coordinate.X:\r\n                action.set(value, 0, 0);\r\n                break;\r\n            case Coordinate.Y:\r\n                action.set(0, value, 0);\r\n                break;\r\n            case Coordinate.Z:\r\n                action.set(0, 0, value);\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraMouseWheelInput\"] = FreeCameraMouseWheelInput;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}