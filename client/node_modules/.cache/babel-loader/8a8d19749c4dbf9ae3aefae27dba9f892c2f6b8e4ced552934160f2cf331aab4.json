{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport \"../Shaders/colorCorrection.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper, serialize } from \"../Misc/decorators.js\";\n/**\n *\n * This post-process allows the modification of rendered colors by using\n * a 'look-up table' (LUT). This effect is also called Color Grading.\n *\n * The object needs to be provided an url to a texture containing the color\n * look-up table: the texture must be 256 pixels wide and 16 pixels high.\n * Use an image editing software to tweak the LUT to match your needs.\n *\n * For an example of a color LUT, see here:\n * @see http://udn.epicgames.com/Three/rsrc/Three/ColorGrading/RGBTable16x1.png\n * For explanations on color grading, see here:\n * @see http://udn.epicgames.com/Three/ColorGrading.html\n *\n */\nexport class ColorCorrectionPostProcess extends PostProcess {\n  constructor(name, colorTableUrl, options, camera, samplingMode, engine, reusable) {\n    super(name, \"colorCorrection\", null, [\"colorTable\"], options, camera, samplingMode, engine, reusable);\n    const scene = (camera === null || camera === void 0 ? void 0 : camera.getScene()) || null;\n    this._colorTableTexture = new Texture(colorTableUrl, scene, true, false, Texture.TRILINEAR_SAMPLINGMODE);\n    this._colorTableTexture.anisotropicFilteringLevel = 1;\n    this._colorTableTexture.wrapU = Texture.CLAMP_ADDRESSMODE;\n    this._colorTableTexture.wrapV = Texture.CLAMP_ADDRESSMODE;\n    this.colorTableUrl = colorTableUrl;\n    this.onApply = effect => {\n      effect.setTexture(\"colorTable\", this._colorTableTexture);\n    };\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"ColorCorrectionPostProcess\" string\n   */\n  getClassName() {\n    return \"ColorCorrectionPostProcess\";\n  }\n  /**\n   * @internal\n   */\n  static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(() => {\n      return new ColorCorrectionPostProcess(parsedPostProcess.name, parsedPostProcess.colorTableUrl, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  }\n}\n__decorate([serialize()], ColorCorrectionPostProcess.prototype, \"colorTableUrl\", void 0);\nRegisterClass(\"BABYLON.ColorCorrectionPostProcess\", ColorCorrectionPostProcess);","map":{"version":3,"mappings":";AACA,SAASA,WAAW,QAAQ,kBAAgB;AAE5C,SAASC,OAAO,QAAQ,kCAAgC;AAIxD,OAAO,wCAAsC;AAC7C,SAASC,aAAa,QAAQ,sBAAoB;AAClD,SAASC,mBAAmB,EAAEC,SAAS,QAAQ,uBAAqB;AAKpE;;;;;;;;;;;;;;;AAeA,OAAM,MAAOC,0BAA2B,SAAQL,WAAW;EAiBvDM,YAAYC,IAAY,EAAEC,aAAqB,EAAEC,OAAoC,EAAEC,MAAwB,EAAEC,YAAqB,EAAEC,MAAe,EAAEC,QAAkB;IACvK,KAAK,CAACN,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,YAAY,CAAC,EAAEE,OAAO,EAAEC,MAAM,EAAEC,YAAY,EAAEC,MAAM,EAAEC,QAAQ,CAAC;IAErG,MAAMC,KAAK,GAAG,OAAM,aAANJ,MAAM,uBAANA,MAAM,CAAEK,QAAQ,EAAE,KAAI,IAAI;IACxC,IAAI,CAACC,kBAAkB,GAAG,IAAIf,OAAO,CAACO,aAAa,EAAEM,KAAK,EAAE,IAAI,EAAE,KAAK,EAAEb,OAAO,CAACgB,sBAAsB,CAAC;IACxG,IAAI,CAACD,kBAAkB,CAACE,yBAAyB,GAAG,CAAC;IACrD,IAAI,CAACF,kBAAkB,CAACG,KAAK,GAAGlB,OAAO,CAACmB,iBAAiB;IACzD,IAAI,CAACJ,kBAAkB,CAACK,KAAK,GAAGpB,OAAO,CAACmB,iBAAiB;IAEzD,IAAI,CAACZ,aAAa,GAAGA,aAAa;IAElC,IAAI,CAACc,OAAO,GAAIC,MAAc,IAAI;MAC9BA,MAAM,CAACC,UAAU,CAAC,YAAY,EAAE,IAAI,CAACR,kBAAkB,CAAC;IAC5D,CAAC;EACL;EAtBA;;;;EAIOS,YAAY;IACf,OAAO,4BAA4B;EACvC;EAkBA;;;EAGO,OAAOC,MAAM,CAACC,iBAAsB,EAAEC,YAAoB,EAAEd,KAAY,EAAEe,OAAe;IAC5F,OAAO1B,mBAAmB,CAAC2B,KAAK,CAC5B,MAAK;MACD,OAAO,IAAIzB,0BAA0B,CACjCsB,iBAAiB,CAACpB,IAAI,EACtBoB,iBAAiB,CAACnB,aAAa,EAC/BmB,iBAAiB,CAAClB,OAAO,EACzBmB,YAAY,EACZD,iBAAiB,CAACI,wBAAwB,EAC1CjB,KAAK,CAACkB,SAAS,EAAE,EACjBL,iBAAiB,CAACd,QAAQ,CAC7B;IACL,CAAC,EACDc,iBAAiB,EACjBb,KAAK,EACLe,OAAO,CACV;EACL;;AA9CAI,YADC7B,SAAS,EAAE,iEACiB;AAiDjCF,aAAa,CAAC,oCAAoC,EAAEG,0BAA0B,CAAC","names":["PostProcess","Texture","RegisterClass","SerializationHelper","serialize","ColorCorrectionPostProcess","constructor","name","colorTableUrl","options","camera","samplingMode","engine","reusable","scene","getScene","_colorTableTexture","TRILINEAR_SAMPLINGMODE","anisotropicFilteringLevel","wrapU","CLAMP_ADDRESSMODE","wrapV","onApply","effect","setTexture","getClassName","_Parse","parsedPostProcess","targetCamera","rootUrl","Parse","renderTargetSamplingMode","getEngine","__decorate"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/colorCorrectionPostProcess.ts"],"sourcesContent":["import type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\n\r\nimport \"../Shaders/colorCorrection.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { SerializationHelper, serialize } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n *\r\n * This post-process allows the modification of rendered colors by using\r\n * a 'look-up table' (LUT). This effect is also called Color Grading.\r\n *\r\n * The object needs to be provided an url to a texture containing the color\r\n * look-up table: the texture must be 256 pixels wide and 16 pixels high.\r\n * Use an image editing software to tweak the LUT to match your needs.\r\n *\r\n * For an example of a color LUT, see here:\r\n * @see http://udn.epicgames.com/Three/rsrc/Three/ColorGrading/RGBTable16x1.png\r\n * For explanations on color grading, see here:\r\n * @see http://udn.epicgames.com/Three/ColorGrading.html\r\n *\r\n */\r\nexport class ColorCorrectionPostProcess extends PostProcess {\r\n    private _colorTableTexture: Texture;\r\n\r\n    /**\r\n     * Gets the color table url used to create the LUT texture\r\n     */\r\n    @serialize()\r\n    public colorTableUrl: string;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"ColorCorrectionPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"ColorCorrectionPostProcess\";\r\n    }\r\n\r\n    constructor(name: string, colorTableUrl: string, options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean) {\r\n        super(name, \"colorCorrection\", null, [\"colorTable\"], options, camera, samplingMode, engine, reusable);\r\n\r\n        const scene = camera?.getScene() || null;\r\n        this._colorTableTexture = new Texture(colorTableUrl, scene, true, false, Texture.TRILINEAR_SAMPLINGMODE);\r\n        this._colorTableTexture.anisotropicFilteringLevel = 1;\r\n        this._colorTableTexture.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this._colorTableTexture.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n\r\n        this.colorTableUrl = colorTableUrl;\r\n\r\n        this.onApply = (effect: Effect) => {\r\n            effect.setTexture(\"colorTable\", this._colorTableTexture);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<ColorCorrectionPostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new ColorCorrectionPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.colorTableUrl,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ColorCorrectionPostProcess\", ColorCorrectionPostProcess);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}