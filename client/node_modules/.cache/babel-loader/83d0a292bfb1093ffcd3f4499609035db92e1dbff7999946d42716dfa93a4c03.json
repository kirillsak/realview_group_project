{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Scene } from \"../scene.js\";\nimport { DepthRenderer } from \"./depthRenderer.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nScene.prototype.enableDepthRenderer = function (camera, storeNonLinearDepth = false, force32bitsFloat = false, samplingMode = 3) {\n  camera = camera || this.activeCamera;\n  if (!camera) {\n    throw \"No camera available to enable depth renderer\";\n  }\n  if (!this._depthRenderer) {\n    this._depthRenderer = {};\n  }\n  if (!this._depthRenderer[camera.id]) {\n    const supportFullfloat = !!this.getEngine().getCaps().textureFloatRender;\n    let textureType = 0;\n    if (this.getEngine().getCaps().textureHalfFloatRender && (!force32bitsFloat || !supportFullfloat)) {\n      textureType = 2;\n    } else if (supportFullfloat) {\n      textureType = 1;\n    } else {\n      textureType = 0;\n    }\n    this._depthRenderer[camera.id] = new DepthRenderer(this, textureType, camera, storeNonLinearDepth, samplingMode);\n  }\n  return this._depthRenderer[camera.id];\n};\nScene.prototype.disableDepthRenderer = function (camera) {\n  camera = camera || this.activeCamera;\n  if (!camera || !this._depthRenderer || !this._depthRenderer[camera.id]) {\n    return;\n  }\n  this._depthRenderer[camera.id].dispose();\n};\n/**\n * Defines the Depth Renderer scene component responsible to manage a depth buffer useful\n * in several rendering techniques.\n */\nexport class DepthRendererSceneComponent {\n  /**\n   * Creates a new instance of the component for the given scene\n   * @param scene Defines the scene to register the component in\n   */\n  constructor(scene) {\n    /**\n     * The component name helpful to identify the component in the list of scene components.\n     */\n    this.name = SceneComponentConstants.NAME_DEPTHRENDERER;\n    this.scene = scene;\n  }\n  /**\n   * Registers the component in a given scene\n   */\n  register() {\n    this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_DEPTHRENDERER, this, this._gatherRenderTargets);\n    this.scene._gatherActiveCameraRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERACTIVECAMERARENDERTARGETS_DEPTHRENDERER, this, this._gatherActiveCameraRenderTargets);\n  }\n  /**\n   * Rebuilds the elements related to this component in case of\n   * context lost for instance.\n   */\n  rebuild() {\n    // Nothing to do for this component\n  }\n  /**\n   * Disposes the component and the associated resources\n   */\n  dispose() {\n    for (const key in this.scene._depthRenderer) {\n      this.scene._depthRenderer[key].dispose();\n    }\n  }\n  _gatherRenderTargets(renderTargets) {\n    if (this.scene._depthRenderer) {\n      for (const key in this.scene._depthRenderer) {\n        const depthRenderer = this.scene._depthRenderer[key];\n        if (depthRenderer.enabled && !depthRenderer.useOnlyInActiveCamera) {\n          renderTargets.push(depthRenderer.getDepthMap());\n        }\n      }\n    }\n  }\n  _gatherActiveCameraRenderTargets(renderTargets) {\n    if (this.scene._depthRenderer) {\n      for (const key in this.scene._depthRenderer) {\n        const depthRenderer = this.scene._depthRenderer[key];\n        if (depthRenderer.enabled && depthRenderer.useOnlyInActiveCamera && this.scene.activeCamera.id === key) {\n          renderTargets.push(depthRenderer.getDepthMap());\n        }\n      }\n    }\n  }\n}\nDepthRenderer._SceneComponentInitialization = scene => {\n  // Register the G Buffer component to the scene.\n  let component = scene._getComponent(SceneComponentConstants.NAME_DEPTHRENDERER);\n  if (!component) {\n    component = new DepthRendererSceneComponent(scene);\n    scene._addComponent(component);\n  }\n};","map":{"version":3,"mappings":"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","names":["Scene","DepthRenderer","SceneComponentConstants","prototype","enableDepthRenderer","camera","storeNonLinearDepth","force32bitsFloat","samplingMode","activeCamera","_depthRenderer","id","supportFullfloat","getEngine","getCaps","textureFloatRender","textureType","textureHalfFloatRender","disableDepthRenderer","dispose","DepthRendererSceneComponent","constructor","scene","NAME_DEPTHRENDERER","register","_gatherRenderTargetsStage","registerStep","STEP_GATHERRENDERTARGETS_DEPTHRENDERER","_gatherRenderTargets","_gatherActiveCameraRenderTargetsStage","STEP_GATHERACTIVECAMERARENDERTARGETS_DEPTHRENDERER","_gatherActiveCameraRenderTargets","rebuild","key","renderTargets","depthRenderer","enabled","useOnlyInActiveCamera","push","getDepthMap","_SceneComponentInitialization","component","_getComponent","_addComponent"],"sourceRoot":"","sources":["../../../../lts/core/generated/Rendering/depthRendererSceneComponent.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport type { SmartArrayNoDuplicate } from \"../Misc/smartArray\";\r\nimport { DepthRenderer } from \"./depthRenderer\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { ISceneComponent } from \"../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /** @internal (Backing field) */\r\n        _depthRenderer: { [id: string]: DepthRenderer };\r\n\r\n        /**\r\n         * Creates a depth renderer a given camera which contains a depth map which can be used for post processing.\r\n         * @param camera The camera to create the depth renderer on (default: scene's active camera)\r\n         * @param storeNonLinearDepth Defines whether the depth is stored linearly like in Babylon Shadows or directly like glFragCoord.z\r\n         * @param force32bitsFloat Forces 32 bits float when supported (else 16 bits float is prioritized over 32 bits float if supported)\r\n         * @param samplingMode The sampling mode to be used with the render target (Linear, Nearest...)\r\n         * @returns the created depth renderer\r\n         */\r\n        enableDepthRenderer(camera?: Nullable<Camera>, storeNonLinearDepth?: boolean, force32bitsFloat?: boolean, samplingMode?: number): DepthRenderer;\r\n\r\n        /**\r\n         * Disables a depth renderer for a given camera\r\n         * @param camera The camera to disable the depth renderer on (default: scene's active camera)\r\n         */\r\n        disableDepthRenderer(camera?: Nullable<Camera>): void;\r\n    }\r\n}\r\n\r\nScene.prototype.enableDepthRenderer = function (\r\n    camera?: Nullable<Camera>,\r\n    storeNonLinearDepth = false,\r\n    force32bitsFloat: boolean = false,\r\n    samplingMode = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE\r\n): DepthRenderer {\r\n    camera = camera || this.activeCamera;\r\n    if (!camera) {\r\n        throw \"No camera available to enable depth renderer\";\r\n    }\r\n    if (!this._depthRenderer) {\r\n        this._depthRenderer = {};\r\n    }\r\n    if (!this._depthRenderer[camera.id]) {\r\n        const supportFullfloat = !!this.getEngine().getCaps().textureFloatRender;\r\n        let textureType = 0;\r\n        if (this.getEngine().getCaps().textureHalfFloatRender && (!force32bitsFloat || !supportFullfloat)) {\r\n            textureType = Constants.TEXTURETYPE_HALF_FLOAT;\r\n        } else if (supportFullfloat) {\r\n            textureType = Constants.TEXTURETYPE_FLOAT;\r\n        } else {\r\n            textureType = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n        }\r\n        this._depthRenderer[camera.id] = new DepthRenderer(this, textureType, camera, storeNonLinearDepth, samplingMode);\r\n    }\r\n\r\n    return this._depthRenderer[camera.id];\r\n};\r\n\r\nScene.prototype.disableDepthRenderer = function (camera?: Nullable<Camera>): void {\r\n    camera = camera || this.activeCamera;\r\n    if (!camera || !this._depthRenderer || !this._depthRenderer[camera.id]) {\r\n        return;\r\n    }\r\n\r\n    this._depthRenderer[camera.id].dispose();\r\n};\r\n\r\n/**\r\n * Defines the Depth Renderer scene component responsible to manage a depth buffer useful\r\n * in several rendering techniques.\r\n */\r\nexport class DepthRendererSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_DEPTHRENDERER;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_DEPTHRENDERER, this, this._gatherRenderTargets);\r\n        this.scene._gatherActiveCameraRenderTargetsStage.registerStep(\r\n            SceneComponentConstants.STEP_GATHERACTIVECAMERARENDERTARGETS_DEPTHRENDERER,\r\n            this,\r\n            this._gatherActiveCameraRenderTargets\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do for this component\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources\r\n     */\r\n    public dispose(): void {\r\n        for (const key in this.scene._depthRenderer) {\r\n            this.scene._depthRenderer[key].dispose();\r\n        }\r\n    }\r\n\r\n    private _gatherRenderTargets(renderTargets: SmartArrayNoDuplicate<RenderTargetTexture>): void {\r\n        if (this.scene._depthRenderer) {\r\n            for (const key in this.scene._depthRenderer) {\r\n                const depthRenderer = this.scene._depthRenderer[key];\r\n                if (depthRenderer.enabled && !depthRenderer.useOnlyInActiveCamera) {\r\n                    renderTargets.push(depthRenderer.getDepthMap());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _gatherActiveCameraRenderTargets(renderTargets: SmartArrayNoDuplicate<RenderTargetTexture>): void {\r\n        if (this.scene._depthRenderer) {\r\n            for (const key in this.scene._depthRenderer) {\r\n                const depthRenderer = this.scene._depthRenderer[key];\r\n                if (depthRenderer.enabled && depthRenderer.useOnlyInActiveCamera && this.scene.activeCamera!.id === key) {\r\n                    renderTargets.push(depthRenderer.getDepthMap());\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nDepthRenderer._SceneComponentInitialization = (scene: Scene) => {\r\n    // Register the G Buffer component to the scene.\r\n    let component = scene._getComponent(SceneComponentConstants.NAME_DEPTHRENDERER) as DepthRendererSceneComponent;\r\n    if (!component) {\r\n        component = new DepthRendererSceneComponent(scene);\r\n        scene._addComponent(component);\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}