{"ast":null,"code":"import { DeviceType } from \"./deviceEnums.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { InternalDeviceSourceManager } from \"../internalDeviceSourceManager.js\";\n/**\n * Class to keep track of devices\n */\nexport class DeviceSourceManager {\n  /**\n   * Default constructor\n   * @param engine - Used to get canvas (if applicable)\n   */\n  constructor(engine) {\n    const numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\n    this._devices = new Array(numberOfDeviceTypes);\n    this._firstDevice = new Array(numberOfDeviceTypes);\n    this._engine = engine;\n    if (!this._engine._deviceSourceManager) {\n      this._engine._deviceSourceManager = new InternalDeviceSourceManager(engine);\n    }\n    this._engine._deviceSourceManager._refCount++;\n    // Observables\n    this.onDeviceConnectedObservable = new Observable(observer => {\n      for (const devices of this._devices) {\n        if (devices) {\n          for (const device of devices) {\n            if (device) {\n              this.onDeviceConnectedObservable.notifyObserver(observer, device);\n            }\n          }\n        }\n      }\n    });\n    this.onDeviceDisconnectedObservable = new Observable();\n    this._engine._deviceSourceManager.registerManager(this);\n    this._onDisposeObserver = engine.onDisposeObservable.add(() => {\n      this.dispose();\n    });\n  }\n  // Public Functions\n  /**\n   * Gets a DeviceSource, given a type and slot\n   * @param deviceType - Type of Device\n   * @param deviceSlot - Slot or ID of device\n   * @returns DeviceSource\n   */\n  getDeviceSource(deviceType, deviceSlot) {\n    if (deviceSlot === undefined) {\n      if (this._firstDevice[deviceType] === undefined) {\n        return null;\n      }\n      deviceSlot = this._firstDevice[deviceType];\n    }\n    if (!this._devices[deviceType] || this._devices[deviceType][deviceSlot] === undefined) {\n      return null;\n    }\n    return this._devices[deviceType][deviceSlot];\n  }\n  /**\n   * Gets an array of DeviceSource objects for a given device type\n   * @param deviceType - Type of Device\n   * @returns All available DeviceSources of a given type\n   */\n  getDeviceSources(deviceType) {\n    // If device type hasn't had any devices connected yet, return empty array.\n    if (!this._devices[deviceType]) {\n      return [];\n    }\n    return this._devices[deviceType].filter(source => {\n      return !!source;\n    });\n  }\n  /**\n   * Dispose of DeviceSourceManager\n   */\n  dispose() {\n    // Null out observable refs\n    this.onDeviceConnectedObservable.clear();\n    this.onDeviceDisconnectedObservable.clear();\n    if (this._engine._deviceSourceManager) {\n      this._engine._deviceSourceManager.unregisterManager(this);\n      if (--this._engine._deviceSourceManager._refCount < 1) {\n        this._engine._deviceSourceManager.dispose();\n        delete this._engine._deviceSourceManager;\n      }\n    }\n    this._engine.onDisposeObservable.remove(this._onDisposeObserver);\n  }\n  // Hidden Functions\n  /**\n   * @param deviceSource - Source to add\n   * @internal\n   */\n  _addDevice(deviceSource) {\n    if (!this._devices[deviceSource.deviceType]) {\n      this._devices[deviceSource.deviceType] = new Array();\n    }\n    if (!this._devices[deviceSource.deviceType][deviceSource.deviceSlot]) {\n      this._devices[deviceSource.deviceType][deviceSource.deviceSlot] = deviceSource;\n      this._updateFirstDevices(deviceSource.deviceType);\n    }\n    this.onDeviceConnectedObservable.notifyObservers(deviceSource);\n  }\n  /**\n   * @param deviceType - DeviceType\n   * @param deviceSlot - DeviceSlot\n   * @internal\n   */\n  _removeDevice(deviceType, deviceSlot) {\n    var _a, _b;\n    const deviceSource = (_a = this._devices[deviceType]) === null || _a === void 0 ? void 0 : _a[deviceSlot]; // Grab local reference to use before removing from devices\n    this.onDeviceDisconnectedObservable.notifyObservers(deviceSource);\n    if ((_b = this._devices[deviceType]) === null || _b === void 0 ? void 0 : _b[deviceSlot]) {\n      delete this._devices[deviceType][deviceSlot];\n    }\n    // Even if we don't delete a device, we should still check for the first device as things may have gotten out of sync.\n    this._updateFirstDevices(deviceType);\n  }\n  /**\n   * @param deviceType - DeviceType\n   * @param deviceSlot - DeviceSlot\n   * @param eventData - Event\n   * @internal\n   */\n  _onInputChanged(deviceType, deviceSlot, eventData) {\n    var _a, _b;\n    (_b = (_a = this._devices[deviceType]) === null || _a === void 0 ? void 0 : _a[deviceSlot]) === null || _b === void 0 ? void 0 : _b.onInputChangedObservable.notifyObservers(eventData);\n  }\n  // Private Functions\n  _updateFirstDevices(type) {\n    switch (type) {\n      case DeviceType.Keyboard:\n      case DeviceType.Mouse:\n        this._firstDevice[type] = 0;\n        break;\n      case DeviceType.Touch:\n      case DeviceType.DualSense:\n      case DeviceType.DualShock:\n      case DeviceType.Xbox:\n      case DeviceType.Switch:\n      case DeviceType.Generic:\n        {\n          delete this._firstDevice[type];\n          // eslint-disable-next-line no-case-declarations\n          const devices = this._devices[type];\n          if (devices) {\n            for (let i = 0; i < devices.length; i++) {\n              if (devices[i]) {\n                this._firstDevice[type] = i;\n                break;\n              }\n            }\n          }\n          break;\n        }\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["DeviceType","Observable","InternalDeviceSourceManager","DeviceSourceManager","constructor","engine","numberOfDeviceTypes","Object","keys","length","_devices","Array","_firstDevice","_engine","_deviceSourceManager","_refCount","onDeviceConnectedObservable","observer","devices","device","notifyObserver","onDeviceDisconnectedObservable","registerManager","_onDisposeObserver","onDisposeObservable","add","dispose","getDeviceSource","deviceType","deviceSlot","undefined","getDeviceSources","filter","source","clear","unregisterManager","remove","_addDevice","deviceSource","_updateFirstDevices","notifyObservers","_removeDevice","_onInputChanged","eventData","onInputChangedObservable","type","Keyboard","Mouse","Touch","DualSense","DualShock","Xbox","Switch","Generic","i"],"sourceRoot":"","sources":["../../../../../lts/core/generated/DeviceInput/InputDevices/deviceSourceManager.ts"],"sourcesContent":["import type { Engine } from \"../../Engines/engine\";\r\nimport { DeviceType } from \"./deviceEnums\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { DeviceSource } from \"./deviceSource\";\r\nimport type { IObservableManager, DeviceSourceType } from \"../internalDeviceSourceManager\";\r\nimport { InternalDeviceSourceManager } from \"../internalDeviceSourceManager\";\r\nimport type { IDisposable } from \"../../scene\";\r\nimport type { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport type { IKeyboardEvent, IPointerEvent, IUIEvent, IWheelEvent } from \"../../Events/deviceInputEvents\";\r\n\r\n/**\r\n * Class to keep track of devices\r\n */\r\nexport class DeviceSourceManager implements IDisposable, IObservableManager {\r\n    // Public Members\r\n    /**\r\n     * Observable to be triggered when after a device is connected, any new observers added will be triggered against already connected devices\r\n     */\r\n    public readonly onDeviceConnectedObservable: Observable<DeviceSourceType>;\r\n\r\n    /**\r\n     * Observable to be triggered when after a device is disconnected\r\n     */\r\n    public readonly onDeviceDisconnectedObservable: Observable<DeviceSourceType>;\r\n\r\n    // Private Members\r\n    private _engine: Engine;\r\n    private _onDisposeObserver: Nullable<Observer<ThinEngine>>;\r\n    private readonly _devices: Array<Array<DeviceSource<DeviceType>>>;\r\n    private readonly _firstDevice: Array<number>;\r\n\r\n    // Public Functions\r\n    /**\r\n     * Gets a DeviceSource, given a type and slot\r\n     * @param deviceType - Type of Device\r\n     * @param deviceSlot - Slot or ID of device\r\n     * @returns DeviceSource\r\n     */\r\n    public getDeviceSource<T extends DeviceType>(deviceType: T, deviceSlot?: number): Nullable<DeviceSource<T>> {\r\n        if (deviceSlot === undefined) {\r\n            if (this._firstDevice[deviceType] === undefined) {\r\n                return null;\r\n            }\r\n\r\n            deviceSlot = this._firstDevice[deviceType];\r\n        }\r\n\r\n        if (!this._devices[deviceType] || this._devices[deviceType][deviceSlot] === undefined) {\r\n            return null;\r\n        }\r\n\r\n        return this._devices[deviceType][deviceSlot] as DeviceSource<T>;\r\n    }\r\n    /**\r\n     * Gets an array of DeviceSource objects for a given device type\r\n     * @param deviceType - Type of Device\r\n     * @returns All available DeviceSources of a given type\r\n     */\r\n    public getDeviceSources<T extends DeviceType>(deviceType: T): ReadonlyArray<DeviceSource<T>> {\r\n        // If device type hasn't had any devices connected yet, return empty array.\r\n        if (!this._devices[deviceType]) {\r\n            return [];\r\n        }\r\n        return this._devices[deviceType].filter((source) => {\r\n            return !!source;\r\n        }) as Array<DeviceSource<T>>;\r\n    }\r\n\r\n    /**\r\n     * Default constructor\r\n     * @param engine - Used to get canvas (if applicable)\r\n     */\r\n    constructor(engine: Engine) {\r\n        const numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\r\n        this._devices = new Array(numberOfDeviceTypes);\r\n        this._firstDevice = new Array(numberOfDeviceTypes);\r\n        this._engine = engine;\r\n\r\n        if (!this._engine._deviceSourceManager) {\r\n            this._engine._deviceSourceManager = new InternalDeviceSourceManager(engine);\r\n        }\r\n        this._engine._deviceSourceManager._refCount++;\r\n\r\n        // Observables\r\n        this.onDeviceConnectedObservable = new Observable((observer) => {\r\n            for (const devices of this._devices) {\r\n                if (devices) {\r\n                    for (const device of devices) {\r\n                        if (device) {\r\n                            this.onDeviceConnectedObservable.notifyObserver(observer, device as DeviceSourceType);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this.onDeviceDisconnectedObservable = new Observable();\r\n\r\n        this._engine._deviceSourceManager.registerManager(this);\r\n\r\n        this._onDisposeObserver = engine.onDisposeObservable.add(() => {\r\n            this.dispose();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose of DeviceSourceManager\r\n     */\r\n    public dispose(): void {\r\n        // Null out observable refs\r\n        this.onDeviceConnectedObservable.clear();\r\n        this.onDeviceDisconnectedObservable.clear();\r\n\r\n        if (this._engine._deviceSourceManager) {\r\n            this._engine._deviceSourceManager.unregisterManager(this);\r\n            if (--this._engine._deviceSourceManager._refCount < 1) {\r\n                this._engine._deviceSourceManager.dispose();\r\n                delete this._engine._deviceSourceManager;\r\n            }\r\n        }\r\n        this._engine.onDisposeObservable.remove(this._onDisposeObserver);\r\n    }\r\n\r\n    // Hidden Functions\r\n    /**\r\n     * @param deviceSource - Source to add\r\n     * @internal\r\n     */\r\n    public _addDevice(deviceSource: DeviceSourceType): void {\r\n        if (!this._devices[deviceSource.deviceType]) {\r\n            this._devices[deviceSource.deviceType] = new Array();\r\n        }\r\n\r\n        if (!this._devices[deviceSource.deviceType][deviceSource.deviceSlot]) {\r\n            this._devices[deviceSource.deviceType][deviceSource.deviceSlot] = deviceSource;\r\n            this._updateFirstDevices(deviceSource.deviceType);\r\n        }\r\n\r\n        this.onDeviceConnectedObservable.notifyObservers(deviceSource);\r\n    }\r\n\r\n    /**\r\n     * @param deviceType - DeviceType\r\n     * @param deviceSlot - DeviceSlot\r\n     * @internal\r\n     */\r\n    public _removeDevice(deviceType: DeviceType, deviceSlot: number): void {\r\n        const deviceSource = this._devices[deviceType]?.[deviceSlot]; // Grab local reference to use before removing from devices\r\n        this.onDeviceDisconnectedObservable.notifyObservers(deviceSource as DeviceSourceType);\r\n        if (this._devices[deviceType]?.[deviceSlot]) {\r\n            delete this._devices[deviceType][deviceSlot];\r\n        }\r\n        // Even if we don't delete a device, we should still check for the first device as things may have gotten out of sync.\r\n        this._updateFirstDevices(deviceType);\r\n    }\r\n\r\n    /**\r\n     * @param deviceType - DeviceType\r\n     * @param deviceSlot - DeviceSlot\r\n     * @param eventData - Event\r\n     * @internal\r\n     */\r\n    public _onInputChanged<T extends DeviceType>(deviceType: T, deviceSlot: number, eventData: IUIEvent): void {\r\n        this._devices[deviceType]?.[deviceSlot]?.onInputChangedObservable.notifyObservers(eventData as IKeyboardEvent | IWheelEvent | IPointerEvent);\r\n    }\r\n\r\n    // Private Functions\r\n    private _updateFirstDevices(type: DeviceType): void {\r\n        switch (type) {\r\n            case DeviceType.Keyboard:\r\n            case DeviceType.Mouse:\r\n                this._firstDevice[type] = 0;\r\n                break;\r\n            case DeviceType.Touch:\r\n            case DeviceType.DualSense:\r\n            case DeviceType.DualShock:\r\n            case DeviceType.Xbox:\r\n            case DeviceType.Switch:\r\n            case DeviceType.Generic: {\r\n                delete this._firstDevice[type];\r\n                // eslint-disable-next-line no-case-declarations\r\n                const devices = this._devices[type];\r\n                if (devices) {\r\n                    for (let i = 0; i < devices.length; i++) {\r\n                        if (devices[i]) {\r\n                            this._firstDevice[type] = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}