{"ast":null,"code":"import { BezierCurve } from \"../Maths/math.path.js\";\n/**\n * Base class used for every default easing function.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\n */\nexport class EasingFunction {\n  constructor() {\n    this._easingMode = EasingFunction.EASINGMODE_EASEIN;\n  }\n  /**\n   * Sets the easing mode of the current function.\n   * @param easingMode Defines the willing mode (EASINGMODE_EASEIN, EASINGMODE_EASEOUT or EASINGMODE_EASEINOUT)\n   */\n  setEasingMode(easingMode) {\n    const n = Math.min(Math.max(easingMode, 0), 2);\n    this._easingMode = n;\n  }\n  /**\n   * Gets the current easing mode.\n   * @returns the easing mode\n   */\n  getEasingMode() {\n    return this._easingMode;\n  }\n  /**\n   * @internal\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  easeInCore(gradient) {\n    throw new Error(\"You must implement this method\");\n  }\n  /**\n   * Given an input gradient between 0 and 1, this returns the corresponding value\n   * of the easing function.\n   * @param gradient Defines the value between 0 and 1 we want the easing value for\n   * @returns the corresponding value on the curve defined by the easing function\n   */\n  ease(gradient) {\n    switch (this._easingMode) {\n      case EasingFunction.EASINGMODE_EASEIN:\n        return this.easeInCore(gradient);\n      case EasingFunction.EASINGMODE_EASEOUT:\n        return 1 - this.easeInCore(1 - gradient);\n    }\n    if (gradient >= 0.5) {\n      return (1 - this.easeInCore((1 - gradient) * 2)) * 0.5 + 0.5;\n    }\n    return this.easeInCore(gradient * 2) * 0.5;\n  }\n}\n/**\n * Interpolation follows the mathematical formula associated with the easing function.\n */\nEasingFunction.EASINGMODE_EASEIN = 0;\n/**\n * Interpolation follows 100% interpolation minus the output of the formula associated with the easing function.\n */\nEasingFunction.EASINGMODE_EASEOUT = 1;\n/**\n * Interpolation uses EaseIn for the first half of the animation and EaseOut for the second half.\n */\nEasingFunction.EASINGMODE_EASEINOUT = 2;\n/**\n * Easing function with a circle shape (see link below).\n * @see https://easings.net/#easeInCirc\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\n */\nexport class CircleEase extends EasingFunction {\n  /**\n   * @internal\n   */\n  easeInCore(gradient) {\n    gradient = Math.max(0, Math.min(1, gradient));\n    return 1.0 - Math.sqrt(1.0 - gradient * gradient);\n  }\n}\n/**\n * Easing function with a ease back shape (see link below).\n * @see https://easings.net/#easeInBack\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\n */\nexport class BackEase extends EasingFunction {\n  /**\n   * Instantiates a back ease easing\n   * @see https://easings.net/#easeInBack\n   * @param amplitude Defines the amplitude of the function\n   */\n  constructor( /** Defines the amplitude of the function */\n  amplitude = 1) {\n    super();\n    this.amplitude = amplitude;\n  }\n  /**\n   * @internal\n   */\n  easeInCore(gradient) {\n    const num = Math.max(0, this.amplitude);\n    return Math.pow(gradient, 3.0) - gradient * num * Math.sin(3.1415926535897931 * gradient);\n  }\n}\n/**\n * Easing function with a bouncing shape (see link below).\n * @see https://easings.net/#easeInBounce\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\n */\nexport class BounceEase extends EasingFunction {\n  /**\n   * Instantiates a bounce easing\n   * @see https://easings.net/#easeInBounce\n   * @param bounces Defines the number of bounces\n   * @param bounciness Defines the amplitude of the bounce\n   */\n  constructor( /** Defines the number of bounces */\n  bounces = 3, /** Defines the amplitude of the bounce */\n  bounciness = 2) {\n    super();\n    this.bounces = bounces;\n    this.bounciness = bounciness;\n  }\n  /**\n   * @internal\n   */\n  easeInCore(gradient) {\n    const y = Math.max(0.0, this.bounces);\n    let bounciness = this.bounciness;\n    if (bounciness <= 1.0) {\n      bounciness = 1.001;\n    }\n    const num9 = Math.pow(bounciness, y);\n    const num5 = 1.0 - bounciness;\n    const num4 = (1.0 - num9) / num5 + num9 * 0.5;\n    const num15 = gradient * num4;\n    const num65 = Math.log(-num15 * (1.0 - bounciness) + 1.0) / Math.log(bounciness);\n    const num3 = Math.floor(num65);\n    const num13 = num3 + 1.0;\n    const num8 = (1.0 - Math.pow(bounciness, num3)) / (num5 * num4);\n    const num12 = (1.0 - Math.pow(bounciness, num13)) / (num5 * num4);\n    const num7 = (num8 + num12) * 0.5;\n    const num6 = gradient - num7;\n    const num2 = num7 - num8;\n    return -Math.pow(1.0 / bounciness, y - num3) / (num2 * num2) * (num6 - num2) * (num6 + num2);\n  }\n}\n/**\n * Easing function with a power of 3 shape (see link below).\n * @see https://easings.net/#easeInCubic\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\n */\nexport class CubicEase extends EasingFunction {\n  /**\n   * @internal\n   */\n  easeInCore(gradient) {\n    return gradient * gradient * gradient;\n  }\n}\n/**\n * Easing function with an elastic shape (see link below).\n * @see https://easings.net/#easeInElastic\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\n */\nexport class ElasticEase extends EasingFunction {\n  /**\n   * Instantiates an elastic easing function\n   * @see https://easings.net/#easeInElastic\n   * @param oscillations Defines the number of oscillations\n   * @param springiness Defines the amplitude of the oscillations\n   */\n  constructor( /** Defines the number of oscillations*/\n  oscillations = 3, /** Defines the amplitude of the oscillations*/\n  springiness = 3) {\n    super();\n    this.oscillations = oscillations;\n    this.springiness = springiness;\n  }\n  /**\n   * @internal\n   */\n  easeInCore(gradient) {\n    let num2;\n    const num3 = Math.max(0.0, this.oscillations);\n    const num = Math.max(0.0, this.springiness);\n    if (num == 0) {\n      num2 = gradient;\n    } else {\n      num2 = (Math.exp(num * gradient) - 1.0) / (Math.exp(num) - 1.0);\n    }\n    return num2 * Math.sin((6.2831853071795862 * num3 + 1.5707963267948966) * gradient);\n  }\n}\n/**\n * Easing function with an exponential shape (see link below).\n * @see https://easings.net/#easeInExpo\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\n */\nexport class ExponentialEase extends EasingFunction {\n  /**\n   * Instantiates an exponential easing function\n   * @see https://easings.net/#easeInExpo\n   * @param exponent Defines the exponent of the function\n   */\n  constructor( /** Defines the exponent of the function */\n  exponent = 2) {\n    super();\n    this.exponent = exponent;\n  }\n  /**\n   * @internal\n   */\n  easeInCore(gradient) {\n    if (this.exponent <= 0) {\n      return gradient;\n    }\n    return (Math.exp(this.exponent * gradient) - 1.0) / (Math.exp(this.exponent) - 1.0);\n  }\n}\n/**\n * Easing function with a power shape (see link below).\n * @see https://easings.net/#easeInQuad\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\n */\nexport class PowerEase extends EasingFunction {\n  /**\n   * Instantiates an power base easing function\n   * @see https://easings.net/#easeInQuad\n   * @param power Defines the power of the function\n   */\n  constructor( /** Defines the power of the function */\n  power = 2) {\n    super();\n    this.power = power;\n  }\n  /**\n   * @internal\n   */\n  easeInCore(gradient) {\n    const y = Math.max(0.0, this.power);\n    return Math.pow(gradient, y);\n  }\n}\n/**\n * Easing function with a power of 2 shape (see link below).\n * @see https://easings.net/#easeInQuad\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\n */\nexport class QuadraticEase extends EasingFunction {\n  /**\n   * @internal\n   */\n  easeInCore(gradient) {\n    return gradient * gradient;\n  }\n}\n/**\n * Easing function with a power of 4 shape (see link below).\n * @see https://easings.net/#easeInQuart\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\n */\nexport class QuarticEase extends EasingFunction {\n  /**\n   * @internal\n   */\n  easeInCore(gradient) {\n    return gradient * gradient * gradient * gradient;\n  }\n}\n/**\n * Easing function with a power of 5 shape (see link below).\n * @see https://easings.net/#easeInQuint\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\n */\nexport class QuinticEase extends EasingFunction {\n  /**\n   * @internal\n   */\n  easeInCore(gradient) {\n    return gradient * gradient * gradient * gradient * gradient;\n  }\n}\n/**\n * Easing function with a sin shape (see link below).\n * @see https://easings.net/#easeInSine\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\n */\nexport class SineEase extends EasingFunction {\n  /**\n   * @internal\n   */\n  easeInCore(gradient) {\n    return 1.0 - Math.sin(1.5707963267948966 * (1.0 - gradient));\n  }\n}\n/**\n * Easing function with a bezier shape (see link below).\n * @see http://cubic-bezier.com/#.17,.67,.83,.67\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\n */\nexport class BezierCurveEase extends EasingFunction {\n  /**\n   * Instantiates a bezier function\n   * @see http://cubic-bezier.com/#.17,.67,.83,.67\n   * @param x1 Defines the x component of the start tangent in the bezier curve\n   * @param y1 Defines the y component of the start tangent in the bezier curve\n   * @param x2 Defines the x component of the end tangent in the bezier curve\n   * @param y2 Defines the y component of the end tangent in the bezier curve\n   */\n  constructor( /** Defines the x component of the start tangent in the bezier curve */\n  x1 = 0, /** Defines the y component of the start tangent in the bezier curve */\n  y1 = 0, /** Defines the x component of the end tangent in the bezier curve */\n  x2 = 1, /** Defines the y component of the end tangent in the bezier curve */\n  y2 = 1) {\n    super();\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n  }\n  /**\n   * @internal\n   */\n  easeInCore(gradient) {\n    return BezierCurve.Interpolate(gradient, this.x1, this.y1, this.x2, this.y2);\n  }\n}","map":{"version":3,"mappings":"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","names":["BezierCurve","EasingFunction","constructor","EASINGMODE_EASEIN","setEasingMode","easingMode","n","Math","min","max","_easingMode","getEasingMode","easeInCore","gradient","Error","ease","EASINGMODE_EASEOUT","CircleEase","sqrt","BackEase","amplitude","num","pow","sin","BounceEase","bounces","bounciness","y","num9","num5","num4","num15","num65","log","num3","floor","num13","num8","num12","num7","num6","num2","CubicEase","ElasticEase","oscillations","springiness","exp","ExponentialEase","exponent","PowerEase","power","QuadraticEase","QuarticEase","QuinticEase","SineEase","BezierCurveEase","x1","y1","x2","y2","Interpolate"],"sourceRoot":"","sources":["../../../../lts/core/generated/Animations/easing.ts"],"sourcesContent":["import { BezierCurve } from \"../Maths/math.path\";\r\n\r\n/**\r\n * This represents the main contract an easing function should follow.\r\n * Easing functions are used throughout the animation system.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport interface IEasingFunction {\r\n    /**\r\n     * Given an input gradient between 0 and 1, this returns the corresponding value\r\n     * of the easing function.\r\n     * The link below provides some of the most common examples of easing functions.\r\n     * @see https://easings.net/\r\n     * @param gradient Defines the value between 0 and 1 we want the easing value for\r\n     * @returns the corresponding value on the curve defined by the easing function\r\n     */\r\n    ease(gradient: number): number;\r\n}\r\n\r\n/**\r\n * Base class used for every default easing function.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Interpolation follows the mathematical formula associated with the easing function.\r\n     */\r\n    public static readonly EASINGMODE_EASEIN = 0;\r\n\r\n    /**\r\n     * Interpolation follows 100% interpolation minus the output of the formula associated with the easing function.\r\n     */\r\n    public static readonly EASINGMODE_EASEOUT = 1;\r\n\r\n    /**\r\n     * Interpolation uses EaseIn for the first half of the animation and EaseOut for the second half.\r\n     */\r\n    public static readonly EASINGMODE_EASEINOUT = 2;\r\n\r\n    private _easingMode = EasingFunction.EASINGMODE_EASEIN;\r\n\r\n    /**\r\n     * Sets the easing mode of the current function.\r\n     * @param easingMode Defines the willing mode (EASINGMODE_EASEIN, EASINGMODE_EASEOUT or EASINGMODE_EASEINOUT)\r\n     */\r\n    public setEasingMode(easingMode: number) {\r\n        const n = Math.min(Math.max(easingMode, 0), 2);\r\n        this._easingMode = n;\r\n    }\r\n    /**\r\n     * Gets the current easing mode.\r\n     * @returns the easing mode\r\n     */\r\n    public getEasingMode(): number {\r\n        return this._easingMode;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public easeInCore(gradient: number): number {\r\n        throw new Error(\"You must implement this method\");\r\n    }\r\n\r\n    /**\r\n     * Given an input gradient between 0 and 1, this returns the corresponding value\r\n     * of the easing function.\r\n     * @param gradient Defines the value between 0 and 1 we want the easing value for\r\n     * @returns the corresponding value on the curve defined by the easing function\r\n     */\r\n    public ease(gradient: number): number {\r\n        switch (this._easingMode) {\r\n            case EasingFunction.EASINGMODE_EASEIN:\r\n                return this.easeInCore(gradient);\r\n            case EasingFunction.EASINGMODE_EASEOUT:\r\n                return 1 - this.easeInCore(1 - gradient);\r\n        }\r\n\r\n        if (gradient >= 0.5) {\r\n            return (1 - this.easeInCore((1 - gradient) * 2)) * 0.5 + 0.5;\r\n        }\r\n\r\n        return this.easeInCore(gradient * 2) * 0.5;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a circle shape (see link below).\r\n * @see https://easings.net/#easeInCirc\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class CircleEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        gradient = Math.max(0, Math.min(1, gradient));\r\n        return 1.0 - Math.sqrt(1.0 - gradient * gradient);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a ease back shape (see link below).\r\n * @see https://easings.net/#easeInBack\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class BackEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates a back ease easing\r\n     * @see https://easings.net/#easeInBack\r\n     * @param amplitude Defines the amplitude of the function\r\n     */\r\n    constructor(\r\n        /** Defines the amplitude of the function */\r\n        public amplitude: number = 1\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        const num = Math.max(0, this.amplitude);\r\n        return Math.pow(gradient, 3.0) - gradient * num * Math.sin(3.1415926535897931 * gradient);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a bouncing shape (see link below).\r\n * @see https://easings.net/#easeInBounce\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class BounceEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates a bounce easing\r\n     * @see https://easings.net/#easeInBounce\r\n     * @param bounces Defines the number of bounces\r\n     * @param bounciness Defines the amplitude of the bounce\r\n     */\r\n    constructor(\r\n        /** Defines the number of bounces */\r\n        public bounces: number = 3,\r\n        /** Defines the amplitude of the bounce */\r\n        public bounciness: number = 2\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        const y = Math.max(0.0, this.bounces);\r\n        let bounciness = this.bounciness;\r\n        if (bounciness <= 1.0) {\r\n            bounciness = 1.001;\r\n        }\r\n        const num9 = Math.pow(bounciness, y);\r\n        const num5 = 1.0 - bounciness;\r\n        const num4 = (1.0 - num9) / num5 + num9 * 0.5;\r\n        const num15 = gradient * num4;\r\n        const num65 = Math.log(-num15 * (1.0 - bounciness) + 1.0) / Math.log(bounciness);\r\n        const num3 = Math.floor(num65);\r\n        const num13 = num3 + 1.0;\r\n        const num8 = (1.0 - Math.pow(bounciness, num3)) / (num5 * num4);\r\n        const num12 = (1.0 - Math.pow(bounciness, num13)) / (num5 * num4);\r\n        const num7 = (num8 + num12) * 0.5;\r\n        const num6 = gradient - num7;\r\n        const num2 = num7 - num8;\r\n        return (-Math.pow(1.0 / bounciness, y - num3) / (num2 * num2)) * (num6 - num2) * (num6 + num2);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 3 shape (see link below).\r\n * @see https://easings.net/#easeInCubic\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class CubicEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        return gradient * gradient * gradient;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with an elastic shape (see link below).\r\n * @see https://easings.net/#easeInElastic\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class ElasticEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates an elastic easing function\r\n     * @see https://easings.net/#easeInElastic\r\n     * @param oscillations Defines the number of oscillations\r\n     * @param springiness Defines the amplitude of the oscillations\r\n     */\r\n    constructor(\r\n        /** Defines the number of oscillations*/\r\n        public oscillations: number = 3,\r\n        /** Defines the amplitude of the oscillations*/\r\n        public springiness: number = 3\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        let num2;\r\n        const num3 = Math.max(0.0, this.oscillations);\r\n        const num = Math.max(0.0, this.springiness);\r\n\r\n        if (num == 0) {\r\n            num2 = gradient;\r\n        } else {\r\n            num2 = (Math.exp(num * gradient) - 1.0) / (Math.exp(num) - 1.0);\r\n        }\r\n        return num2 * Math.sin((6.2831853071795862 * num3 + 1.5707963267948966) * gradient);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with an exponential shape (see link below).\r\n * @see https://easings.net/#easeInExpo\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class ExponentialEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates an exponential easing function\r\n     * @see https://easings.net/#easeInExpo\r\n     * @param exponent Defines the exponent of the function\r\n     */\r\n    constructor(\r\n        /** Defines the exponent of the function */\r\n        public exponent: number = 2\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        if (this.exponent <= 0) {\r\n            return gradient;\r\n        }\r\n\r\n        return (Math.exp(this.exponent * gradient) - 1.0) / (Math.exp(this.exponent) - 1.0);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power shape (see link below).\r\n * @see https://easings.net/#easeInQuad\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class PowerEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates an power base easing function\r\n     * @see https://easings.net/#easeInQuad\r\n     * @param power Defines the power of the function\r\n     */\r\n    constructor(\r\n        /** Defines the power of the function */\r\n        public power: number = 2\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        const y = Math.max(0.0, this.power);\r\n        return Math.pow(gradient, y);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 2 shape (see link below).\r\n * @see https://easings.net/#easeInQuad\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class QuadraticEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        return gradient * gradient;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 4 shape (see link below).\r\n * @see https://easings.net/#easeInQuart\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class QuarticEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        return gradient * gradient * gradient * gradient;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 5 shape (see link below).\r\n * @see https://easings.net/#easeInQuint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class QuinticEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        return gradient * gradient * gradient * gradient * gradient;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a sin shape (see link below).\r\n * @see https://easings.net/#easeInSine\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class SineEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        return 1.0 - Math.sin(1.5707963267948966 * (1.0 - gradient));\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a bezier shape (see link below).\r\n * @see http://cubic-bezier.com/#.17,.67,.83,.67\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class BezierCurveEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates a bezier function\r\n     * @see http://cubic-bezier.com/#.17,.67,.83,.67\r\n     * @param x1 Defines the x component of the start tangent in the bezier curve\r\n     * @param y1 Defines the y component of the start tangent in the bezier curve\r\n     * @param x2 Defines the x component of the end tangent in the bezier curve\r\n     * @param y2 Defines the y component of the end tangent in the bezier curve\r\n     */\r\n    constructor(\r\n        /** Defines the x component of the start tangent in the bezier curve */\r\n        public x1: number = 0,\r\n        /** Defines the y component of the start tangent in the bezier curve */\r\n        public y1: number = 0,\r\n        /** Defines the x component of the end tangent in the bezier curve */\r\n        public x2: number = 1,\r\n        /** Defines the y component of the end tangent in the bezier curve */\r\n        public y2: number = 1\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        return BezierCurve.Interpolate(gradient, this.x1, this.y1, this.x2, this.y2);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}