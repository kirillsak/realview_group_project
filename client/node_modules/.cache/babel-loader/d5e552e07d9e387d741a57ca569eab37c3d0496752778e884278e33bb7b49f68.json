{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { InternalTexture, InternalTextureSource } from \"../Materials/Textures/internalTexture.js\";\nimport { IsDocumentAvailable, IsWindowObjectExist } from \"../Misc/domManagement.js\";\nimport { EngineStore } from \"./engineStore.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\nimport { ThinEngine } from \"./thinEngine.js\";\nimport { PerformanceMonitor } from \"../Misc/performanceMonitor.js\";\nimport { PerfCounter } from \"../Misc/perfCounter.js\";\nimport { WebGLDataBuffer } from \"../Meshes/WebGL/webGLDataBuffer.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { WebGLHardwareTexture } from \"./WebGL/webGLHardwareTexture.js\";\nimport \"./Extensions/engine.alpha.js\";\nimport \"./Extensions/engine.readTexture.js\";\nimport \"./Extensions/engine.dynamicBuffer.js\";\n/**\n * The engine class is responsible for interfacing with all lower-level APIs such as WebGL and Audio\n */\nexport class Engine extends ThinEngine {\n  /**\n   * Creates a new engine\n   * @param canvasOrContext defines the canvas or WebGL context to use for rendering. If you provide a WebGL context, Babylon.js will not hook events on the canvas (like pointers, keyboards, etc...) so no event observables will be available. This is mostly used when Babylon.js is used as a plugin on a system which already used the WebGL context\n   * @param antialias defines enable antialiasing (default: false)\n   * @param options defines further options to be sent to the getContext() function\n   * @param adaptToDeviceRatio defines whether to adapt to the device's viewport characteristics (default: false)\n   */\n  constructor(canvasOrContext, antialias, options, adaptToDeviceRatio = false) {\n    super(canvasOrContext, antialias, options, adaptToDeviceRatio);\n    // Members\n    /**\n     * Gets or sets a boolean to enable/disable IndexedDB support and avoid XHR on .manifest\n     **/\n    this.enableOfflineSupport = false;\n    /**\n     * Gets or sets a boolean to enable/disable checking manifest if IndexedDB support is enabled (js will always consider the database is up to date)\n     **/\n    this.disableManifestCheck = false;\n    /**\n     * Gets or sets a boolean to enable/disable the context menu (right-click) from appearing on the main canvas\n     */\n    this.disableContextMenu = true;\n    /**\n     * Gets the list of created scenes\n     */\n    this.scenes = new Array();\n    /** @internal */\n    this._virtualScenes = new Array();\n    /**\n     * Event raised when a new scene is created\n     */\n    this.onNewSceneAddedObservable = new Observable();\n    /**\n     * Gets the list of created postprocesses\n     */\n    this.postProcesses = new Array();\n    /**\n     * Gets a boolean indicating if the pointer is currently locked\n     */\n    this.isPointerLock = false;\n    // Observables\n    /**\n     * Observable event triggered each time the rendering canvas is resized\n     */\n    this.onResizeObservable = new Observable();\n    /**\n     * Observable event triggered each time the canvas loses focus\n     */\n    this.onCanvasBlurObservable = new Observable();\n    /**\n     * Observable event triggered each time the canvas gains focus\n     */\n    this.onCanvasFocusObservable = new Observable();\n    /**\n     * Observable event triggered each time the canvas receives pointerout event\n     */\n    this.onCanvasPointerOutObservable = new Observable();\n    /**\n     * Observable raised when the engine begins a new frame\n     */\n    this.onBeginFrameObservable = new Observable();\n    /**\n     * If set, will be used to request the next animation frame for the render loop\n     */\n    this.customAnimationFrameRequester = null;\n    /**\n     * Observable raised when the engine ends the current frame\n     */\n    this.onEndFrameObservable = new Observable();\n    /**\n     * Observable raised when the engine is about to compile a shader\n     */\n    this.onBeforeShaderCompilationObservable = new Observable();\n    /**\n     * Observable raised when the engine has just compiled a shader\n     */\n    this.onAfterShaderCompilationObservable = new Observable();\n    // Deterministic lockstepMaxSteps\n    this._deterministicLockstep = false;\n    this._lockstepMaxSteps = 4;\n    this._timeStep = 1 / 60;\n    // FPS\n    this._fps = 60;\n    this._deltaTime = 0;\n    /** @internal */\n    this._drawCalls = new PerfCounter();\n    /** Gets or sets the tab index to set to the rendering canvas. 1 is the minimum value to set to be able to capture keyboard events */\n    this.canvasTabIndex = 1;\n    /**\n     * Turn this value on if you want to pause FPS computation when in background\n     */\n    this.disablePerformanceMonitorInBackground = false;\n    this._performanceMonitor = new PerformanceMonitor();\n    this._compatibilityMode = true;\n    /**\n     * Gets or sets the current render pass id\n     */\n    this.currentRenderPassId = 0;\n    this._renderPassNames = [\"main\"];\n    Engine.Instances.push(this);\n    if (!canvasOrContext) {\n      return;\n    }\n    this._features.supportRenderPasses = true;\n    options = this._creationOptions;\n    if (canvasOrContext.getContext) {\n      const canvas = canvasOrContext;\n      this._sharedInit(canvas, !!options.doNotHandleTouchAction, options.audioEngine);\n      if (IsDocumentAvailable()) {\n        // Fullscreen\n        this._onFullscreenChange = () => {\n          this.isFullscreen = !!document.fullscreenElement;\n          // Pointer lock\n          if (this.isFullscreen && this._pointerLockRequested && canvas) {\n            Engine._RequestPointerlock(canvas);\n          }\n        };\n        document.addEventListener(\"fullscreenchange\", this._onFullscreenChange, false);\n        document.addEventListener(\"webkitfullscreenchange\", this._onFullscreenChange, false);\n        // Pointer lock\n        this._onPointerLockChange = () => {\n          this.isPointerLock = document.pointerLockElement === canvas;\n        };\n        document.addEventListener(\"pointerlockchange\", this._onPointerLockChange, false);\n        document.addEventListener(\"webkitpointerlockchange\", this._onPointerLockChange, false);\n        // Create Audio Engine if needed.\n        if (!Engine.audioEngine && options.audioEngine && Engine.AudioEngineFactory) {\n          Engine.audioEngine = Engine.AudioEngineFactory(this.getRenderingCanvas(), this.getAudioContext(), this.getAudioDestination());\n        }\n      }\n      this._connectVREvents();\n      this.enableOfflineSupport = Engine.OfflineProviderFactory !== undefined;\n      this._deterministicLockstep = !!options.deterministicLockstep;\n      this._lockstepMaxSteps = options.lockstepMaxSteps || 0;\n      this._timeStep = options.timeStep || 1 / 60;\n    }\n    // Load WebVR Devices\n    this._prepareVRComponent();\n    if (options.autoEnableWebVR) {\n      this.initWebVR();\n    }\n  }\n  /**\n   * Returns the current npm package of the sdk\n   */\n  // Not mixed with Version for tooling purpose.\n  static get NpmPackage() {\n    return ThinEngine.NpmPackage;\n  }\n  /**\n   * Returns the current version of the framework\n   */\n  static get Version() {\n    return ThinEngine.Version;\n  }\n  /** Gets the list of created engines */\n  static get Instances() {\n    return EngineStore.Instances;\n  }\n  /**\n   * Gets the latest created engine\n   */\n  static get LastCreatedEngine() {\n    return EngineStore.LastCreatedEngine;\n  }\n  /**\n   * Gets the latest created scene\n   */\n  static get LastCreatedScene() {\n    return EngineStore.LastCreatedScene;\n  }\n  /** @internal */\n  /**\n   * Engine abstraction for loading and creating an image bitmap from a given source string.\n   * @param imageSource source to load the image from.\n   * @param options An object that sets options for the image's extraction.\n   * @returns ImageBitmap.\n   */\n  _createImageBitmapFromSource(imageSource, options) {\n    const promise = new Promise((resolve, reject) => {\n      const image = new Image();\n      image.onload = () => {\n        image.decode().then(() => {\n          this.createImageBitmap(image, options).then(imageBitmap => {\n            resolve(imageBitmap);\n          });\n        });\n      };\n      image.onerror = () => {\n        reject(`Error loading image ${image.src}`);\n      };\n      image.src = imageSource;\n    });\n    return promise;\n  }\n  /**\n   * Engine abstraction for createImageBitmap\n   * @param image source for image\n   * @param options An object that sets options for the image's extraction.\n   * @returns ImageBitmap\n   */\n  createImageBitmap(image, options) {\n    return createImageBitmap(image, options);\n  }\n  /**\n   * Resize an image and returns the image data as an uint8array\n   * @param image image to resize\n   * @param bufferWidth destination buffer width\n   * @param bufferHeight destination buffer height\n   * @returns an uint8array containing RGBA values of bufferWidth * bufferHeight size\n   */\n  resizeImageBitmap(image, bufferWidth, bufferHeight) {\n    const canvas = this.createCanvas(bufferWidth, bufferHeight);\n    const context = canvas.getContext(\"2d\");\n    if (!context) {\n      throw new Error(\"Unable to get 2d context for resizeImageBitmap\");\n    }\n    context.drawImage(image, 0, 0);\n    // Create VertexData from map data\n    // Cast is due to wrong definition in lib.d.ts from ts 1.3 - https://github.com/Microsoft/TypeScript/issues/949\n    const buffer = context.getImageData(0, 0, bufferWidth, bufferHeight).data;\n    return buffer;\n  }\n  /**\n   * Will flag all materials in all scenes in all engines as dirty to trigger new shader compilation\n   * @param flag defines which part of the materials must be marked as dirty\n   * @param predicate defines a predicate used to filter which materials should be affected\n   */\n  static MarkAllMaterialsAsDirty(flag, predicate) {\n    for (let engineIndex = 0; engineIndex < Engine.Instances.length; engineIndex++) {\n      const engine = Engine.Instances[engineIndex];\n      for (let sceneIndex = 0; sceneIndex < engine.scenes.length; sceneIndex++) {\n        engine.scenes[sceneIndex].markAllMaterialsAsDirty(flag, predicate);\n      }\n    }\n  }\n  /**\n   * Method called to create the default loading screen.\n   * This can be overridden in your own app.\n   * @param canvas The rendering canvas element\n   * @returns The loading screen\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static DefaultLoadingScreenFactory(canvas) {\n    throw _WarnImport(\"LoadingScreen\");\n  }\n  get _supportsHardwareTextureRescaling() {\n    return !!Engine._RescalePostProcessFactory;\n  }\n  /**\n   * Gets the performance monitor attached to this engine\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#engineinstrumentation\n   */\n  get performanceMonitor() {\n    return this._performanceMonitor;\n  }\n  /**\n   * (WebGPU only) True (default) to be in compatibility mode, meaning rendering all existing scenes without artifacts (same rendering than WebGL).\n   * Setting the property to false will improve performances but may not work in some scenes if some precautions are not taken.\n   * See https://doc.babylonjs.com/setup/support/webGPU/webGPUOptimization/webGPUNonCompatibilityMode for more details\n   */\n  get compatibilityMode() {\n    return this._compatibilityMode;\n  }\n  set compatibilityMode(mode) {\n    // not supported in WebGL\n    this._compatibilityMode = true;\n  }\n  // Events\n  /**\n   * Gets the HTML element used to attach event listeners\n   * @returns a HTML element\n   */\n  getInputElement() {\n    return this._renderingCanvas;\n  }\n  _initGLContext() {\n    super._initGLContext();\n    this._rescalePostProcess = null;\n  }\n  /**\n   * Shared initialization across engines types.\n   * @param canvas The canvas associated with this instance of the engine.\n   * @param doNotHandleTouchAction Defines that engine should ignore modifying touch action attribute and style\n   * @param audioEngine Defines if an audio engine should be created by default\n   */\n  _sharedInit(canvas, doNotHandleTouchAction, audioEngine) {\n    super._sharedInit(canvas, doNotHandleTouchAction, audioEngine);\n    this._onCanvasFocus = () => {\n      this.onCanvasFocusObservable.notifyObservers(this);\n    };\n    this._onCanvasBlur = () => {\n      this.onCanvasBlurObservable.notifyObservers(this);\n    };\n    this._onCanvasContextMenu = evt => {\n      if (this.disableContextMenu) {\n        evt.preventDefault();\n      }\n    };\n    canvas.addEventListener(\"focus\", this._onCanvasFocus);\n    canvas.addEventListener(\"blur\", this._onCanvasBlur);\n    canvas.addEventListener(\"contextmenu\", this._onCanvasContextMenu);\n    this._onBlur = () => {\n      if (this.disablePerformanceMonitorInBackground) {\n        this._performanceMonitor.disable();\n      }\n      this._windowIsBackground = true;\n    };\n    this._onFocus = () => {\n      if (this.disablePerformanceMonitorInBackground) {\n        this._performanceMonitor.enable();\n      }\n      this._windowIsBackground = false;\n    };\n    this._onCanvasPointerOut = ev => {\n      // Check that the element at the point of the pointer out isn't the canvas and if it isn't, notify observers\n      // Note: This is a workaround for a bug with Safari\n      if (document.elementFromPoint(ev.clientX, ev.clientY) !== canvas) {\n        this.onCanvasPointerOutObservable.notifyObservers(ev);\n      }\n    };\n    const hostWindow = this.getHostWindow(); // it calls IsWindowObjectExist()\n    if (hostWindow && typeof hostWindow.addEventListener === \"function\") {\n      hostWindow.addEventListener(\"blur\", this._onBlur);\n      hostWindow.addEventListener(\"focus\", this._onFocus);\n    }\n    canvas.addEventListener(\"pointerout\", this._onCanvasPointerOut);\n    if (!doNotHandleTouchAction) {\n      this._disableTouchAction();\n    }\n    // Create Audio Engine if needed.\n    if (!Engine.audioEngine && audioEngine && Engine.AudioEngineFactory) {\n      Engine.audioEngine = Engine.AudioEngineFactory(this.getRenderingCanvas(), this.getAudioContext(), this.getAudioDestination());\n    }\n  }\n  /**\n   * Gets current aspect ratio\n   * @param viewportOwner defines the camera to use to get the aspect ratio\n   * @param useScreen defines if screen size must be used (or the current render target if any)\n   * @returns a number defining the aspect ratio\n   */\n  getAspectRatio(viewportOwner, useScreen = false) {\n    const viewport = viewportOwner.viewport;\n    return this.getRenderWidth(useScreen) * viewport.width / (this.getRenderHeight(useScreen) * viewport.height);\n  }\n  /**\n   * Gets current screen aspect ratio\n   * @returns a number defining the aspect ratio\n   */\n  getScreenAspectRatio() {\n    return this.getRenderWidth(true) / this.getRenderHeight(true);\n  }\n  /**\n   * Gets the client rect of the HTML canvas attached with the current webGL context\n   * @returns a client rectangle\n   */\n  getRenderingCanvasClientRect() {\n    if (!this._renderingCanvas) {\n      return null;\n    }\n    return this._renderingCanvas.getBoundingClientRect();\n  }\n  /**\n   * Gets the client rect of the HTML element used for events\n   * @returns a client rectangle\n   */\n  getInputElementClientRect() {\n    if (!this._renderingCanvas) {\n      return null;\n    }\n    return this.getInputElement().getBoundingClientRect();\n  }\n  /**\n   * Gets a boolean indicating that the engine is running in deterministic lock step mode\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n   * @returns true if engine is in deterministic lock step mode\n   */\n  isDeterministicLockStep() {\n    return this._deterministicLockstep;\n  }\n  /**\n   * Gets the max steps when engine is running in deterministic lock step\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n   * @returns the max steps\n   */\n  getLockstepMaxSteps() {\n    return this._lockstepMaxSteps;\n  }\n  /**\n   * Returns the time in ms between steps when using deterministic lock step.\n   * @returns time step in (ms)\n   */\n  getTimeStep() {\n    return this._timeStep * 1000;\n  }\n  /**\n   * Force the mipmap generation for the given render target texture\n   * @param texture defines the render target texture to use\n   * @param unbind defines whether or not to unbind the texture after generation. Defaults to true.\n   */\n  generateMipMapsForCubemap(texture, unbind = true) {\n    if (texture.generateMipMaps) {\n      const gl = this._gl;\n      this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\n      gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n      if (unbind) {\n        this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\n      }\n    }\n  }\n  /** States */\n  /**\n   * Gets a boolean indicating if depth writing is enabled\n   * @returns the current depth writing state\n   */\n  getDepthWrite() {\n    return this._depthCullingState.depthMask;\n  }\n  /**\n   * Enable or disable depth writing\n   * @param enable defines the state to set\n   */\n  setDepthWrite(enable) {\n    this._depthCullingState.depthMask = enable;\n  }\n  /**\n   * Gets a boolean indicating if stencil buffer is enabled\n   * @returns the current stencil buffer state\n   */\n  getStencilBuffer() {\n    return this._stencilState.stencilTest;\n  }\n  /**\n   * Enable or disable the stencil buffer\n   * @param enable defines if the stencil buffer must be enabled or disabled\n   */\n  setStencilBuffer(enable) {\n    this._stencilState.stencilTest = enable;\n  }\n  /**\n   * Gets the current stencil mask\n   * @returns a number defining the new stencil mask to use\n   */\n  getStencilMask() {\n    return this._stencilState.stencilMask;\n  }\n  /**\n   * Sets the current stencil mask\n   * @param mask defines the new stencil mask to use\n   */\n  setStencilMask(mask) {\n    this._stencilState.stencilMask = mask;\n  }\n  /**\n   * Gets the current stencil function\n   * @returns a number defining the stencil function to use\n   */\n  getStencilFunction() {\n    return this._stencilState.stencilFunc;\n  }\n  /**\n   * Gets the current stencil reference value\n   * @returns a number defining the stencil reference value to use\n   */\n  getStencilFunctionReference() {\n    return this._stencilState.stencilFuncRef;\n  }\n  /**\n   * Gets the current stencil mask\n   * @returns a number defining the stencil mask to use\n   */\n  getStencilFunctionMask() {\n    return this._stencilState.stencilFuncMask;\n  }\n  /**\n   * Sets the current stencil function\n   * @param stencilFunc defines the new stencil function to use\n   */\n  setStencilFunction(stencilFunc) {\n    this._stencilState.stencilFunc = stencilFunc;\n  }\n  /**\n   * Sets the current stencil reference\n   * @param reference defines the new stencil reference to use\n   */\n  setStencilFunctionReference(reference) {\n    this._stencilState.stencilFuncRef = reference;\n  }\n  /**\n   * Sets the current stencil mask\n   * @param mask defines the new stencil mask to use\n   */\n  setStencilFunctionMask(mask) {\n    this._stencilState.stencilFuncMask = mask;\n  }\n  /**\n   * Gets the current stencil operation when stencil fails\n   * @returns a number defining stencil operation to use when stencil fails\n   */\n  getStencilOperationFail() {\n    return this._stencilState.stencilOpStencilFail;\n  }\n  /**\n   * Gets the current stencil operation when depth fails\n   * @returns a number defining stencil operation to use when depth fails\n   */\n  getStencilOperationDepthFail() {\n    return this._stencilState.stencilOpDepthFail;\n  }\n  /**\n   * Gets the current stencil operation when stencil passes\n   * @returns a number defining stencil operation to use when stencil passes\n   */\n  getStencilOperationPass() {\n    return this._stencilState.stencilOpStencilDepthPass;\n  }\n  /**\n   * Sets the stencil operation to use when stencil fails\n   * @param operation defines the stencil operation to use when stencil fails\n   */\n  setStencilOperationFail(operation) {\n    this._stencilState.stencilOpStencilFail = operation;\n  }\n  /**\n   * Sets the stencil operation to use when depth fails\n   * @param operation defines the stencil operation to use when depth fails\n   */\n  setStencilOperationDepthFail(operation) {\n    this._stencilState.stencilOpDepthFail = operation;\n  }\n  /**\n   * Sets the stencil operation to use when stencil passes\n   * @param operation defines the stencil operation to use when stencil passes\n   */\n  setStencilOperationPass(operation) {\n    this._stencilState.stencilOpStencilDepthPass = operation;\n  }\n  /**\n   * Sets a boolean indicating if the dithering state is enabled or disabled\n   * @param value defines the dithering state\n   */\n  setDitheringState(value) {\n    if (value) {\n      this._gl.enable(this._gl.DITHER);\n    } else {\n      this._gl.disable(this._gl.DITHER);\n    }\n  }\n  /**\n   * Sets a boolean indicating if the rasterizer state is enabled or disabled\n   * @param value defines the rasterizer state\n   */\n  setRasterizerState(value) {\n    if (value) {\n      this._gl.disable(this._gl.RASTERIZER_DISCARD);\n    } else {\n      this._gl.enable(this._gl.RASTERIZER_DISCARD);\n    }\n  }\n  /**\n   * Gets the current depth function\n   * @returns a number defining the depth function\n   */\n  getDepthFunction() {\n    return this._depthCullingState.depthFunc;\n  }\n  /**\n   * Sets the current depth function\n   * @param depthFunc defines the function to use\n   */\n  setDepthFunction(depthFunc) {\n    this._depthCullingState.depthFunc = depthFunc;\n  }\n  /**\n   * Sets the current depth function to GREATER\n   */\n  setDepthFunctionToGreater() {\n    this.setDepthFunction(516);\n  }\n  /**\n   * Sets the current depth function to GEQUAL\n   */\n  setDepthFunctionToGreaterOrEqual() {\n    this.setDepthFunction(518);\n  }\n  /**\n   * Sets the current depth function to LESS\n   */\n  setDepthFunctionToLess() {\n    this.setDepthFunction(513);\n  }\n  /**\n   * Sets the current depth function to LEQUAL\n   */\n  setDepthFunctionToLessOrEqual() {\n    this.setDepthFunction(515);\n  }\n  /**\n   * Caches the the state of the stencil buffer\n   */\n  cacheStencilState() {\n    this._cachedStencilBuffer = this.getStencilBuffer();\n    this._cachedStencilFunction = this.getStencilFunction();\n    this._cachedStencilMask = this.getStencilMask();\n    this._cachedStencilOperationPass = this.getStencilOperationPass();\n    this._cachedStencilOperationFail = this.getStencilOperationFail();\n    this._cachedStencilOperationDepthFail = this.getStencilOperationDepthFail();\n    this._cachedStencilReference = this.getStencilFunctionReference();\n  }\n  /**\n   * Restores the state of the stencil buffer\n   */\n  restoreStencilState() {\n    this.setStencilFunction(this._cachedStencilFunction);\n    this.setStencilMask(this._cachedStencilMask);\n    this.setStencilBuffer(this._cachedStencilBuffer);\n    this.setStencilOperationPass(this._cachedStencilOperationPass);\n    this.setStencilOperationFail(this._cachedStencilOperationFail);\n    this.setStencilOperationDepthFail(this._cachedStencilOperationDepthFail);\n    this.setStencilFunctionReference(this._cachedStencilReference);\n  }\n  /**\n   * Directly set the WebGL Viewport\n   * @param x defines the x coordinate of the viewport (in screen space)\n   * @param y defines the y coordinate of the viewport (in screen space)\n   * @param width defines the width of the viewport (in screen space)\n   * @param height defines the height of the viewport (in screen space)\n   * @returns the current viewport Object (if any) that is being replaced by this call. You can restore this viewport later on to go back to the original state\n   */\n  setDirectViewport(x, y, width, height) {\n    const currentViewport = this._cachedViewport;\n    this._cachedViewport = null;\n    this._viewport(x, y, width, height);\n    return currentViewport;\n  }\n  /**\n   * Executes a scissor clear (ie. a clear on a specific portion of the screen)\n   * @param x defines the x-coordinate of the bottom left corner of the clear rectangle\n   * @param y defines the y-coordinate of the corner of the clear rectangle\n   * @param width defines the width of the clear rectangle\n   * @param height defines the height of the clear rectangle\n   * @param clearColor defines the clear color\n   */\n  scissorClear(x, y, width, height, clearColor) {\n    this.enableScissor(x, y, width, height);\n    this.clear(clearColor, true, true, true);\n    this.disableScissor();\n  }\n  /**\n   * Enable scissor test on a specific rectangle (ie. render will only be executed on a specific portion of the screen)\n   * @param x defines the x-coordinate of the bottom left corner of the clear rectangle\n   * @param y defines the y-coordinate of the corner of the clear rectangle\n   * @param width defines the width of the clear rectangle\n   * @param height defines the height of the clear rectangle\n   */\n  enableScissor(x, y, width, height) {\n    const gl = this._gl;\n    // Change state\n    gl.enable(gl.SCISSOR_TEST);\n    gl.scissor(x, y, width, height);\n  }\n  /**\n   * Disable previously set scissor test rectangle\n   */\n  disableScissor() {\n    const gl = this._gl;\n    gl.disable(gl.SCISSOR_TEST);\n  }\n  /**\n   * @internal\n   */\n  _reportDrawCall(numDrawCalls = 1) {\n    this._drawCalls.addCount(numDrawCalls, false);\n  }\n  /**\n   * Initializes a webVR display and starts listening to display change events\n   * The onVRDisplayChangedObservable will be notified upon these changes\n   * @returns The onVRDisplayChangedObservable\n   */\n  initWebVR() {\n    throw _WarnImport(\"WebVRCamera\");\n  }\n  /** @internal */\n  _prepareVRComponent() {\n    // Do nothing as the engine side effect will overload it\n  }\n  /**\n   * @internal\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _connectVREvents(canvas, document) {\n    // Do nothing as the engine side effect will overload it\n  }\n  /** @internal */\n  _submitVRFrame() {\n    // Do nothing as the engine side effect will overload it\n  }\n  /**\n   * Call this function to leave webVR mode\n   * Will do nothing if webVR is not supported or if there is no webVR device\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/webVRCamera\n   */\n  disableVR() {\n    // Do nothing as the engine side effect will overload it\n  }\n  /**\n   * Gets a boolean indicating that the system is in VR mode and is presenting\n   * @returns true if VR mode is engaged\n   */\n  isVRPresenting() {\n    return false;\n  }\n  /** @internal */\n  _requestVRFrame() {\n    // Do nothing as the engine side effect will overload it\n  }\n  /**\n   * @internal\n   */\n  _loadFileAsync(url, offlineProvider, useArrayBuffer) {\n    return new Promise((resolve, reject) => {\n      this._loadFile(url, data => {\n        resolve(data);\n      }, undefined, offlineProvider, useArrayBuffer, (request, exception) => {\n        reject(exception);\n      });\n    });\n  }\n  /**\n   * Gets the source code of the vertex shader associated with a specific webGL program\n   * @param program defines the program to use\n   * @returns a string containing the source code of the vertex shader associated with the program\n   */\n  getVertexShaderSource(program) {\n    const shaders = this._gl.getAttachedShaders(program);\n    if (!shaders) {\n      return null;\n    }\n    return this._gl.getShaderSource(shaders[0]);\n  }\n  /**\n   * Gets the source code of the fragment shader associated with a specific webGL program\n   * @param program defines the program to use\n   * @returns a string containing the source code of the fragment shader associated with the program\n   */\n  getFragmentShaderSource(program) {\n    const shaders = this._gl.getAttachedShaders(program);\n    if (!shaders) {\n      return null;\n    }\n    return this._gl.getShaderSource(shaders[1]);\n  }\n  /**\n   * Sets a depth stencil texture from a render target to the according uniform.\n   * @param channel The texture channel\n   * @param uniform The uniform to set\n   * @param texture The render target texture containing the depth stencil texture to apply\n   * @param name The texture name\n   */\n  setDepthStencilTexture(channel, uniform, texture, name) {\n    if (channel === undefined) {\n      return;\n    }\n    if (uniform) {\n      this._boundUniforms[channel] = uniform;\n    }\n    if (!texture || !texture.depthStencilTexture) {\n      this._setTexture(channel, null, undefined, undefined, name);\n    } else {\n      this._setTexture(channel, texture, false, true, name);\n    }\n  }\n  /**\n   * Sets a texture to the webGL context from a postprocess\n   * @param channel defines the channel to use\n   * @param postProcess defines the source postprocess\n   * @param name name of the channel\n   */\n  setTextureFromPostProcess(channel, postProcess, name) {\n    var _a;\n    let postProcessInput = null;\n    if (postProcess) {\n      if (postProcess._textures.data[postProcess._currentRenderTextureInd]) {\n        postProcessInput = postProcess._textures.data[postProcess._currentRenderTextureInd];\n      } else if (postProcess._forcedOutputTexture) {\n        postProcessInput = postProcess._forcedOutputTexture;\n      }\n    }\n    this._bindTexture(channel, (_a = postProcessInput === null || postProcessInput === void 0 ? void 0 : postProcessInput.texture) !== null && _a !== void 0 ? _a : null, name);\n  }\n  /**\n   * Binds the output of the passed in post process to the texture channel specified\n   * @param channel The channel the texture should be bound to\n   * @param postProcess The post process which's output should be bound\n   * @param name name of the channel\n   */\n  setTextureFromPostProcessOutput(channel, postProcess, name) {\n    var _a, _b;\n    this._bindTexture(channel, (_b = (_a = postProcess === null || postProcess === void 0 ? void 0 : postProcess._outputTexture) === null || _a === void 0 ? void 0 : _a.texture) !== null && _b !== void 0 ? _b : null, name);\n  }\n  _rebuildBuffers() {\n    // Index / Vertex\n    for (const scene of this.scenes) {\n      scene.resetCachedMaterial();\n      scene._rebuildGeometries();\n      scene._rebuildTextures();\n    }\n    for (const scene of this._virtualScenes) {\n      scene.resetCachedMaterial();\n      scene._rebuildGeometries();\n      scene._rebuildTextures();\n    }\n    super._rebuildBuffers();\n  }\n  /** @internal */\n  _renderFrame() {\n    for (let index = 0; index < this._activeRenderLoops.length; index++) {\n      const renderFunction = this._activeRenderLoops[index];\n      renderFunction();\n    }\n  }\n  _renderLoop() {\n    if (!this._contextWasLost) {\n      let shouldRender = true;\n      if (!this.renderEvenInBackground && this._windowIsBackground) {\n        shouldRender = false;\n      }\n      if (shouldRender) {\n        // Start new frame\n        this.beginFrame();\n        // Child canvases\n        if (!this._renderViews()) {\n          // Main frame\n          this._renderFrame();\n        }\n        // Present\n        this.endFrame();\n      }\n    }\n    if (this._activeRenderLoops.length > 0) {\n      // Register new frame\n      if (this.customAnimationFrameRequester) {\n        this.customAnimationFrameRequester.requestID = this._queueNewFrame(this.customAnimationFrameRequester.renderFunction || this._boundRenderFunction, this.customAnimationFrameRequester);\n        this._frameHandler = this.customAnimationFrameRequester.requestID;\n      } else if (this.isVRPresenting()) {\n        this._requestVRFrame();\n      } else {\n        this._frameHandler = this._queueNewFrame(this._boundRenderFunction, this.getHostWindow());\n      }\n    } else {\n      this._renderingQueueLaunched = false;\n    }\n  }\n  /** @internal */\n  _renderViews() {\n    return false;\n  }\n  /**\n   * Toggle full screen mode\n   * @param requestPointerLock defines if a pointer lock should be requested from the user\n   */\n  switchFullscreen(requestPointerLock) {\n    if (this.isFullscreen) {\n      this.exitFullscreen();\n    } else {\n      this.enterFullscreen(requestPointerLock);\n    }\n  }\n  /**\n   * Enters full screen mode\n   * @param requestPointerLock defines if a pointer lock should be requested from the user\n   */\n  enterFullscreen(requestPointerLock) {\n    if (!this.isFullscreen) {\n      this._pointerLockRequested = requestPointerLock;\n      if (this._renderingCanvas) {\n        Engine._RequestFullscreen(this._renderingCanvas);\n      }\n    }\n  }\n  /**\n   * Exits full screen mode\n   */\n  exitFullscreen() {\n    if (this.isFullscreen) {\n      Engine._ExitFullscreen();\n    }\n  }\n  /**\n   * Enters Pointerlock mode\n   */\n  enterPointerlock() {\n    if (this._renderingCanvas) {\n      Engine._RequestPointerlock(this._renderingCanvas);\n    }\n  }\n  /**\n   * Exits Pointerlock mode\n   */\n  exitPointerlock() {\n    Engine._ExitPointerlock();\n  }\n  /**\n   * Begin a new frame\n   */\n  beginFrame() {\n    this._measureFps();\n    this.onBeginFrameObservable.notifyObservers(this);\n    super.beginFrame();\n  }\n  /**\n   * End the current frame\n   */\n  endFrame() {\n    super.endFrame();\n    this._submitVRFrame();\n    this.onEndFrameObservable.notifyObservers(this);\n  }\n  /**\n   * Resize the view according to the canvas' size\n   * @param forceSetSize true to force setting the sizes of the underlying canvas\n   */\n  resize(forceSetSize = false) {\n    // We're not resizing the size of the canvas while in VR mode & presenting\n    if (this.isVRPresenting()) {\n      return;\n    }\n    super.resize(forceSetSize);\n  }\n  /**\n   * Force a specific size of the canvas\n   * @param width defines the new canvas' width\n   * @param height defines the new canvas' height\n   * @param forceSetSize true to force setting the sizes of the underlying canvas\n   * @returns true if the size was changed\n   */\n  setSize(width, height, forceSetSize = false) {\n    if (!this._renderingCanvas) {\n      return false;\n    }\n    if (!super.setSize(width, height, forceSetSize)) {\n      return false;\n    }\n    if (this.scenes) {\n      for (let index = 0; index < this.scenes.length; index++) {\n        const scene = this.scenes[index];\n        for (let camIndex = 0; camIndex < scene.cameras.length; camIndex++) {\n          const cam = scene.cameras[camIndex];\n          cam._currentRenderId = 0;\n        }\n      }\n      if (this.onResizeObservable.hasObservers()) {\n        this.onResizeObservable.notifyObservers(this);\n      }\n    }\n    return true;\n  }\n  _deletePipelineContext(pipelineContext) {\n    const webGLPipelineContext = pipelineContext;\n    if (webGLPipelineContext && webGLPipelineContext.program) {\n      if (webGLPipelineContext.transformFeedback) {\n        this.deleteTransformFeedback(webGLPipelineContext.transformFeedback);\n        webGLPipelineContext.transformFeedback = null;\n      }\n    }\n    super._deletePipelineContext(pipelineContext);\n  }\n  createShaderProgram(pipelineContext, vertexCode, fragmentCode, defines, context, transformFeedbackVaryings = null) {\n    context = context || this._gl;\n    this.onBeforeShaderCompilationObservable.notifyObservers(this);\n    const program = super.createShaderProgram(pipelineContext, vertexCode, fragmentCode, defines, context, transformFeedbackVaryings);\n    this.onAfterShaderCompilationObservable.notifyObservers(this);\n    return program;\n  }\n  _createShaderProgram(pipelineContext, vertexShader, fragmentShader, context, transformFeedbackVaryings = null) {\n    const shaderProgram = context.createProgram();\n    pipelineContext.program = shaderProgram;\n    if (!shaderProgram) {\n      throw new Error(\"Unable to create program\");\n    }\n    context.attachShader(shaderProgram, vertexShader);\n    context.attachShader(shaderProgram, fragmentShader);\n    if (this.webGLVersion > 1 && transformFeedbackVaryings) {\n      const transformFeedback = this.createTransformFeedback();\n      this.bindTransformFeedback(transformFeedback);\n      this.setTranformFeedbackVaryings(shaderProgram, transformFeedbackVaryings);\n      pipelineContext.transformFeedback = transformFeedback;\n    }\n    context.linkProgram(shaderProgram);\n    if (this.webGLVersion > 1 && transformFeedbackVaryings) {\n      this.bindTransformFeedback(null);\n    }\n    pipelineContext.context = context;\n    pipelineContext.vertexShader = vertexShader;\n    pipelineContext.fragmentShader = fragmentShader;\n    if (!pipelineContext.isParallelCompiled) {\n      this._finalizePipelineContext(pipelineContext);\n    }\n    return shaderProgram;\n  }\n  /**\n   * @internal\n   */\n  _releaseTexture(texture) {\n    super._releaseTexture(texture);\n  }\n  /**\n   * @internal\n   */\n  _releaseRenderTargetWrapper(rtWrapper) {\n    super._releaseRenderTargetWrapper(rtWrapper);\n    // Set output texture of post process to null if the framebuffer has been released/disposed\n    this.scenes.forEach(scene => {\n      scene.postProcesses.forEach(postProcess => {\n        if (postProcess._outputTexture === rtWrapper) {\n          postProcess._outputTexture = null;\n        }\n      });\n      scene.cameras.forEach(camera => {\n        camera._postProcesses.forEach(postProcess => {\n          if (postProcess) {\n            if (postProcess._outputTexture === rtWrapper) {\n              postProcess._outputTexture = null;\n            }\n          }\n        });\n      });\n    });\n  }\n  /**\n   * Gets the names of the render passes that are currently created\n   * @returns list of the render pass names\n   */\n  getRenderPassNames() {\n    return this._renderPassNames;\n  }\n  /**\n   * Gets the name of the current render pass\n   * @returns name of the current render pass\n   */\n  getCurrentRenderPassName() {\n    return this._renderPassNames[this.currentRenderPassId];\n  }\n  /**\n   * Creates a render pass id\n   * @param name Name of the render pass (for debug purpose only)\n   * @returns the id of the new render pass\n   */\n  createRenderPassId(name) {\n    // Note: render pass id == 0 is always for the main render pass\n    const id = ++Engine._RenderPassIdCounter;\n    this._renderPassNames[id] = name !== null && name !== void 0 ? name : \"NONAME\";\n    return id;\n  }\n  /**\n   * Releases a render pass id\n   * @param id id of the render pass to release\n   */\n  releaseRenderPassId(id) {\n    this._renderPassNames[id] = undefined;\n    for (let s = 0; s < this.scenes.length; ++s) {\n      const scene = this.scenes[s];\n      for (let m = 0; m < scene.meshes.length; ++m) {\n        const mesh = scene.meshes[m];\n        if (mesh.subMeshes) {\n          for (let b = 0; b < mesh.subMeshes.length; ++b) {\n            const subMesh = mesh.subMeshes[b];\n            subMesh._removeDrawWrapper(id);\n          }\n        }\n      }\n    }\n  }\n  /**\n   * @internal\n   * Rescales a texture\n   * @param source input texture\n   * @param destination destination texture\n   * @param scene scene to use to render the resize\n   * @param internalFormat format to use when resizing\n   * @param onComplete callback to be called when resize has completed\n   */\n  _rescaleTexture(source, destination, scene, internalFormat, onComplete) {\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.LINEAR);\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.LINEAR);\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_S, this._gl.CLAMP_TO_EDGE);\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_T, this._gl.CLAMP_TO_EDGE);\n    const rtt = this.createRenderTargetTexture({\n      width: destination.width,\n      height: destination.height\n    }, {\n      generateMipMaps: false,\n      type: 0,\n      samplingMode: 2,\n      generateDepthBuffer: false,\n      generateStencilBuffer: false\n    });\n    if (!this._rescalePostProcess && Engine._RescalePostProcessFactory) {\n      this._rescalePostProcess = Engine._RescalePostProcessFactory(this);\n    }\n    if (this._rescalePostProcess) {\n      this._rescalePostProcess.externalTextureSamplerBinding = true;\n      this._rescalePostProcess.getEffect().executeWhenCompiled(() => {\n        this._rescalePostProcess.onApply = function (effect) {\n          effect._bindTexture(\"textureSampler\", source);\n        };\n        let hostingScene = scene;\n        if (!hostingScene) {\n          hostingScene = this.scenes[this.scenes.length - 1];\n        }\n        hostingScene.postProcessManager.directRender([this._rescalePostProcess], rtt, true);\n        this._bindTextureDirectly(this._gl.TEXTURE_2D, destination, true);\n        this._gl.copyTexImage2D(this._gl.TEXTURE_2D, 0, internalFormat, 0, 0, destination.width, destination.height, 0);\n        this.unBindFramebuffer(rtt);\n        rtt.dispose();\n        if (onComplete) {\n          onComplete();\n        }\n      });\n    }\n  }\n  // FPS\n  /**\n   * Gets the current framerate\n   * @returns a number representing the framerate\n   */\n  getFps() {\n    return this._fps;\n  }\n  /**\n   * Gets the time spent between current and previous frame\n   * @returns a number representing the delta time in ms\n   */\n  getDeltaTime() {\n    return this._deltaTime;\n  }\n  _measureFps() {\n    this._performanceMonitor.sampleFrame();\n    this._fps = this._performanceMonitor.averageFPS;\n    this._deltaTime = this._performanceMonitor.instantaneousFrameTime || 0;\n  }\n  /**\n   * Wraps an external web gl texture in a Babylon texture.\n   * @param texture defines the external texture\n   * @returns the babylon internal texture\n   */\n  wrapWebGLTexture(texture) {\n    const hardwareTexture = new WebGLHardwareTexture(texture, this._gl);\n    const internalTexture = new InternalTexture(this, InternalTextureSource.Unknown, true);\n    internalTexture._hardwareTexture = hardwareTexture;\n    internalTexture.isReady = true;\n    return internalTexture;\n  }\n  /**\n   * @internal\n   */\n  _uploadImageToTexture(texture, image, faceIndex = 0, lod = 0) {\n    const gl = this._gl;\n    const textureType = this._getWebGLTextureType(texture.type);\n    const format = this._getInternalFormat(texture.format);\n    const internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, format);\n    const bindTarget = texture.isCube ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;\n    this._bindTextureDirectly(bindTarget, texture, true);\n    this._unpackFlipY(texture.invertY);\n    let target = gl.TEXTURE_2D;\n    if (texture.isCube) {\n      target = gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex;\n    }\n    gl.texImage2D(target, lod, internalFormat, format, textureType, image);\n    this._bindTextureDirectly(bindTarget, null, true);\n  }\n  /**\n   * Updates a depth texture Comparison Mode and Function.\n   * If the comparison Function is equal to 0, the mode will be set to none.\n   * Otherwise, this only works in webgl 2 and requires a shadow sampler in the shader.\n   * @param texture The texture to set the comparison function for\n   * @param comparisonFunction The comparison function to set, 0 if no comparison required\n   */\n  updateTextureComparisonFunction(texture, comparisonFunction) {\n    if (this.webGLVersion === 1) {\n      Logger.Error(\"WebGL 1 does not support texture comparison.\");\n      return;\n    }\n    const gl = this._gl;\n    if (texture.isCube) {\n      this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, texture, true);\n      if (comparisonFunction === 0) {\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, 515);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.NONE);\n      } else {\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\n      }\n      this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, null);\n    } else {\n      this._bindTextureDirectly(this._gl.TEXTURE_2D, texture, true);\n      if (comparisonFunction === 0) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, 515);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.NONE);\n      } else {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\n      }\n      this._bindTextureDirectly(this._gl.TEXTURE_2D, null);\n    }\n    texture._comparisonFunction = comparisonFunction;\n  }\n  /**\n   * Creates a webGL buffer to use with instantiation\n   * @param capacity defines the size of the buffer\n   * @returns the webGL buffer\n   */\n  createInstancesBuffer(capacity) {\n    const buffer = this._gl.createBuffer();\n    if (!buffer) {\n      throw new Error(\"Unable to create instance buffer\");\n    }\n    const result = new WebGLDataBuffer(buffer);\n    result.capacity = capacity;\n    this.bindArrayBuffer(result);\n    this._gl.bufferData(this._gl.ARRAY_BUFFER, capacity, this._gl.DYNAMIC_DRAW);\n    result.references = 1;\n    return result;\n  }\n  /**\n   * Delete a webGL buffer used with instantiation\n   * @param buffer defines the webGL buffer to delete\n   */\n  deleteInstancesBuffer(buffer) {\n    this._gl.deleteBuffer(buffer);\n  }\n  _clientWaitAsync(sync, flags = 0, intervalms = 10) {\n    const gl = this._gl;\n    return new Promise((resolve, reject) => {\n      const check = () => {\n        const res = gl.clientWaitSync(sync, flags, 0);\n        if (res == gl.WAIT_FAILED) {\n          reject();\n          return;\n        }\n        if (res == gl.TIMEOUT_EXPIRED) {\n          setTimeout(check, intervalms);\n          return;\n        }\n        resolve();\n      };\n      check();\n    });\n  }\n  /**\n   * @internal\n   */\n  _readPixelsAsync(x, y, w, h, format, type, outputBuffer) {\n    if (this._webGLVersion < 2) {\n      throw new Error(\"_readPixelsAsync only work on WebGL2+\");\n    }\n    const gl = this._gl;\n    const buf = gl.createBuffer();\n    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\n    gl.bufferData(gl.PIXEL_PACK_BUFFER, outputBuffer.byteLength, gl.STREAM_READ);\n    gl.readPixels(x, y, w, h, format, type, 0);\n    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\n    const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    if (!sync) {\n      return null;\n    }\n    gl.flush();\n    return this._clientWaitAsync(sync, 0, 10).then(() => {\n      gl.deleteSync(sync);\n      gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\n      gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, outputBuffer);\n      gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\n      gl.deleteBuffer(buf);\n      return outputBuffer;\n    });\n  }\n  dispose() {\n    this.hideLoadingUI();\n    this.onNewSceneAddedObservable.clear();\n    // Release postProcesses\n    while (this.postProcesses.length) {\n      this.postProcesses[0].dispose();\n    }\n    // Rescale PP\n    if (this._rescalePostProcess) {\n      this._rescalePostProcess.dispose();\n    }\n    // Release scenes\n    while (this.scenes.length) {\n      this.scenes[0].dispose();\n    }\n    while (this._virtualScenes.length) {\n      this._virtualScenes[0].dispose();\n    }\n    // Release audio engine\n    if (Engine.Instances.length === 1 && Engine.audioEngine) {\n      Engine.audioEngine.dispose();\n      Engine.audioEngine = null;\n    }\n    //WebVR\n    this.disableVR();\n    // Events\n    const hostWindow = this.getHostWindow(); // it calls IsWindowObjectExist()\n    if (hostWindow && typeof hostWindow.removeEventListener === \"function\") {\n      hostWindow.removeEventListener(\"blur\", this._onBlur);\n      hostWindow.removeEventListener(\"focus\", this._onFocus);\n    }\n    if (this._renderingCanvas) {\n      this._renderingCanvas.removeEventListener(\"focus\", this._onCanvasFocus);\n      this._renderingCanvas.removeEventListener(\"blur\", this._onCanvasBlur);\n      this._renderingCanvas.removeEventListener(\"pointerout\", this._onCanvasPointerOut);\n      this._renderingCanvas.removeEventListener(\"contextmenu\", this._onCanvasContextMenu);\n    }\n    if (IsDocumentAvailable()) {\n      document.removeEventListener(\"fullscreenchange\", this._onFullscreenChange);\n      document.removeEventListener(\"mozfullscreenchange\", this._onFullscreenChange);\n      document.removeEventListener(\"webkitfullscreenchange\", this._onFullscreenChange);\n      document.removeEventListener(\"msfullscreenchange\", this._onFullscreenChange);\n      document.removeEventListener(\"pointerlockchange\", this._onPointerLockChange);\n      document.removeEventListener(\"mspointerlockchange\", this._onPointerLockChange);\n      document.removeEventListener(\"mozpointerlockchange\", this._onPointerLockChange);\n      document.removeEventListener(\"webkitpointerlockchange\", this._onPointerLockChange);\n    }\n    super.dispose();\n    // Remove from Instances\n    const index = Engine.Instances.indexOf(this);\n    if (index >= 0) {\n      Engine.Instances.splice(index, 1);\n    }\n    // Observables\n    this.onResizeObservable.clear();\n    this.onCanvasBlurObservable.clear();\n    this.onCanvasFocusObservable.clear();\n    this.onCanvasPointerOutObservable.clear();\n    this.onBeginFrameObservable.clear();\n    this.onEndFrameObservable.clear();\n  }\n  _disableTouchAction() {\n    if (!this._renderingCanvas || !this._renderingCanvas.setAttribute) {\n      return;\n    }\n    this._renderingCanvas.setAttribute(\"touch-action\", \"none\");\n    this._renderingCanvas.style.touchAction = \"none\";\n    this._renderingCanvas.style.webkitTapHighlightColor = \"transparent\";\n  }\n  // Loading screen\n  /**\n   * Display the loading screen\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\n   */\n  displayLoadingUI() {\n    if (!IsWindowObjectExist()) {\n      return;\n    }\n    const loadingScreen = this.loadingScreen;\n    if (loadingScreen) {\n      loadingScreen.displayLoadingUI();\n    }\n  }\n  /**\n   * Hide the loading screen\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\n   */\n  hideLoadingUI() {\n    if (!IsWindowObjectExist()) {\n      return;\n    }\n    const loadingScreen = this._loadingScreen;\n    if (loadingScreen) {\n      loadingScreen.hideLoadingUI();\n    }\n  }\n  /**\n   * Gets the current loading screen object\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\n   */\n  get loadingScreen() {\n    if (!this._loadingScreen && this._renderingCanvas) {\n      this._loadingScreen = Engine.DefaultLoadingScreenFactory(this._renderingCanvas);\n    }\n    return this._loadingScreen;\n  }\n  /**\n   * Sets the current loading screen object\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\n   */\n  set loadingScreen(loadingScreen) {\n    this._loadingScreen = loadingScreen;\n  }\n  /**\n   * Sets the current loading screen text\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\n   */\n  set loadingUIText(text) {\n    this.loadingScreen.loadingUIText = text;\n  }\n  /**\n   * Sets the current loading screen background color\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\n   */\n  set loadingUIBackgroundColor(color) {\n    this.loadingScreen.loadingUIBackgroundColor = color;\n  }\n  /**\n   * creates and returns a new video element\n   * @param constraints video constraints\n   * @returns video element\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  createVideoElement(constraints) {\n    return document.createElement(\"video\");\n  }\n  /** Pointerlock and fullscreen */\n  /**\n   * Ask the browser to promote the current element to pointerlock mode\n   * @param element defines the DOM element to promote\n   */\n  static _RequestPointerlock(element) {\n    if (element.requestPointerLock) {\n      element.requestPointerLock();\n      element.focus();\n    }\n  }\n  /**\n   * Asks the browser to exit pointerlock mode\n   */\n  static _ExitPointerlock() {\n    if (document.exitPointerLock) {\n      document.exitPointerLock();\n    }\n  }\n  /**\n   * Ask the browser to promote the current element to fullscreen rendering mode\n   * @param element defines the DOM element to promote\n   */\n  static _RequestFullscreen(element) {\n    const requestFunction = element.requestFullscreen || element.webkitRequestFullscreen;\n    if (!requestFunction) {\n      return;\n    }\n    requestFunction.call(element);\n  }\n  /**\n   * Asks the browser to exit fullscreen mode\n   */\n  static _ExitFullscreen() {\n    const anyDoc = document;\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (anyDoc.webkitCancelFullScreen) {\n      anyDoc.webkitCancelFullScreen();\n    }\n  }\n  /**\n   * Get Font size information\n   * @param font font name\n   * @returns an object containing ascent, height and descent\n   */\n  getFontOffset(font) {\n    const text = document.createElement(\"span\");\n    text.innerHTML = \"Hg\";\n    text.setAttribute(\"style\", `font: ${font} !important`);\n    const block = document.createElement(\"div\");\n    block.style.display = \"inline-block\";\n    block.style.width = \"1px\";\n    block.style.height = \"0px\";\n    block.style.verticalAlign = \"bottom\";\n    const div = document.createElement(\"div\");\n    div.style.whiteSpace = \"nowrap\";\n    div.appendChild(text);\n    div.appendChild(block);\n    document.body.appendChild(div);\n    let fontAscent = 0;\n    let fontHeight = 0;\n    try {\n      fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\n      block.style.verticalAlign = \"baseline\";\n      fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\n    } finally {\n      document.body.removeChild(div);\n    }\n    return {\n      ascent: fontAscent,\n      height: fontHeight,\n      descent: fontHeight - fontAscent\n    };\n  }\n}\n// Const statics\n/** Defines that alpha blending is disabled */\nEngine.ALPHA_DISABLE = 0;\n/** Defines that alpha blending to SRC ALPHA * SRC + DEST */\nEngine.ALPHA_ADD = 1;\n/** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\nEngine.ALPHA_COMBINE = 2;\n/** Defines that alpha blending to DEST - SRC * DEST */\nEngine.ALPHA_SUBTRACT = 3;\n/** Defines that alpha blending to SRC * DEST */\nEngine.ALPHA_MULTIPLY = 4;\n/** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC) * DEST */\nEngine.ALPHA_MAXIMIZED = 5;\n/** Defines that alpha blending to SRC + DEST */\nEngine.ALPHA_ONEONE = 6;\n/** Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST */\nEngine.ALPHA_PREMULTIPLIED = 7;\n/**\n * Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST\n * Alpha will be set to (1 - SRC ALPHA) * DEST ALPHA\n */\nEngine.ALPHA_PREMULTIPLIED_PORTERDUFF = 8;\n/** Defines that alpha blending to CST * SRC + (1 - CST) * DEST */\nEngine.ALPHA_INTERPOLATE = 9;\n/**\n * Defines that alpha blending to SRC + (1 - SRC) * DEST\n * Alpha will be set to SRC ALPHA + (1 - SRC ALPHA) * DEST ALPHA\n */\nEngine.ALPHA_SCREENMODE = 10;\n/** Defines that the resource is not delayed*/\nEngine.DELAYLOADSTATE_NONE = 0;\n/** Defines that the resource was successfully delay loaded */\nEngine.DELAYLOADSTATE_LOADED = 1;\n/** Defines that the resource is currently delay loading */\nEngine.DELAYLOADSTATE_LOADING = 2;\n/** Defines that the resource is delayed and has not started loading */\nEngine.DELAYLOADSTATE_NOTLOADED = 4;\n// Depht or Stencil test Constants.\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass. i.e. Nothing will be drawn */\nEngine.NEVER = 512;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\nEngine.ALWAYS = 519;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value */\nEngine.LESS = 513;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value */\nEngine.EQUAL = 514;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value */\nEngine.LEQUAL = 515;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value */\nEngine.GREATER = 516;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value */\nEngine.GEQUAL = 518;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value */\nEngine.NOTEQUAL = 517;\n// Stencil Actions Constants.\n/** Passed to stencilOperation to specify that stencil value must be kept */\nEngine.KEEP = 7680;\n/** Passed to stencilOperation to specify that stencil value must be replaced */\nEngine.REPLACE = 7681;\n/** Passed to stencilOperation to specify that stencil value must be incremented */\nEngine.INCR = 7682;\n/** Passed to stencilOperation to specify that stencil value must be decremented */\nEngine.DECR = 7683;\n/** Passed to stencilOperation to specify that stencil value must be inverted */\nEngine.INVERT = 5386;\n/** Passed to stencilOperation to specify that stencil value must be incremented with wrapping */\nEngine.INCR_WRAP = 34055;\n/** Passed to stencilOperation to specify that stencil value must be decremented with wrapping */\nEngine.DECR_WRAP = 34056;\n/** Texture is not repeating outside of 0..1 UVs */\nEngine.TEXTURE_CLAMP_ADDRESSMODE = 0;\n/** Texture is repeating outside of 0..1 UVs */\nEngine.TEXTURE_WRAP_ADDRESSMODE = 1;\n/** Texture is repeating and mirrored */\nEngine.TEXTURE_MIRROR_ADDRESSMODE = 2;\n/** ALPHA */\nEngine.TEXTUREFORMAT_ALPHA = 0;\n/** LUMINANCE */\nEngine.TEXTUREFORMAT_LUMINANCE = 1;\n/** LUMINANCE_ALPHA */\nEngine.TEXTUREFORMAT_LUMINANCE_ALPHA = 2;\n/** RGB */\nEngine.TEXTUREFORMAT_RGB = 4;\n/** RGBA */\nEngine.TEXTUREFORMAT_RGBA = 5;\n/** RED */\nEngine.TEXTUREFORMAT_RED = 6;\n/** RED (2nd reference) */\nEngine.TEXTUREFORMAT_R = 6;\n/** RG */\nEngine.TEXTUREFORMAT_RG = 7;\n/** RED_INTEGER */\nEngine.TEXTUREFORMAT_RED_INTEGER = 8;\n/** RED_INTEGER (2nd reference) */\nEngine.TEXTUREFORMAT_R_INTEGER = 8;\n/** RG_INTEGER */\nEngine.TEXTUREFORMAT_RG_INTEGER = 9;\n/** RGB_INTEGER */\nEngine.TEXTUREFORMAT_RGB_INTEGER = 10;\n/** RGBA_INTEGER */\nEngine.TEXTUREFORMAT_RGBA_INTEGER = 11;\n/** UNSIGNED_BYTE */\nEngine.TEXTURETYPE_UNSIGNED_BYTE = 0;\n/** UNSIGNED_BYTE (2nd reference) */\nEngine.TEXTURETYPE_UNSIGNED_INT = 0;\n/** FLOAT */\nEngine.TEXTURETYPE_FLOAT = 1;\n/** HALF_FLOAT */\nEngine.TEXTURETYPE_HALF_FLOAT = 2;\n/** BYTE */\nEngine.TEXTURETYPE_BYTE = 3;\n/** SHORT */\nEngine.TEXTURETYPE_SHORT = 4;\n/** UNSIGNED_SHORT */\nEngine.TEXTURETYPE_UNSIGNED_SHORT = 5;\n/** INT */\nEngine.TEXTURETYPE_INT = 6;\n/** UNSIGNED_INT */\nEngine.TEXTURETYPE_UNSIGNED_INTEGER = 7;\n/** UNSIGNED_SHORT_4_4_4_4 */\nEngine.TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 = 8;\n/** UNSIGNED_SHORT_5_5_5_1 */\nEngine.TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 = 9;\n/** UNSIGNED_SHORT_5_6_5 */\nEngine.TEXTURETYPE_UNSIGNED_SHORT_5_6_5 = 10;\n/** UNSIGNED_INT_2_10_10_10_REV */\nEngine.TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV = 11;\n/** UNSIGNED_INT_24_8 */\nEngine.TEXTURETYPE_UNSIGNED_INT_24_8 = 12;\n/** UNSIGNED_INT_10F_11F_11F_REV */\nEngine.TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV = 13;\n/** UNSIGNED_INT_5_9_9_9_REV */\nEngine.TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV = 14;\n/** FLOAT_32_UNSIGNED_INT_24_8_REV */\nEngine.TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV = 15;\n/** nearest is mag = nearest and min = nearest and mip = none */\nEngine.TEXTURE_NEAREST_SAMPLINGMODE = 1;\n/** Bilinear is mag = linear and min = linear and mip = nearest */\nEngine.TEXTURE_BILINEAR_SAMPLINGMODE = 2;\n/** Trilinear is mag = linear and min = linear and mip = linear */\nEngine.TEXTURE_TRILINEAR_SAMPLINGMODE = 3;\n/** nearest is mag = nearest and min = nearest and mip = linear */\nEngine.TEXTURE_NEAREST_NEAREST_MIPLINEAR = 8;\n/** Bilinear is mag = linear and min = linear and mip = nearest */\nEngine.TEXTURE_LINEAR_LINEAR_MIPNEAREST = 11;\n/** Trilinear is mag = linear and min = linear and mip = linear */\nEngine.TEXTURE_LINEAR_LINEAR_MIPLINEAR = 3;\n/** mag = nearest and min = nearest and mip = nearest */\nEngine.TEXTURE_NEAREST_NEAREST_MIPNEAREST = 4;\n/** mag = nearest and min = linear and mip = nearest */\nEngine.TEXTURE_NEAREST_LINEAR_MIPNEAREST = 5;\n/** mag = nearest and min = linear and mip = linear */\nEngine.TEXTURE_NEAREST_LINEAR_MIPLINEAR = 6;\n/** mag = nearest and min = linear and mip = none */\nEngine.TEXTURE_NEAREST_LINEAR = 7;\n/** mag = nearest and min = nearest and mip = none */\nEngine.TEXTURE_NEAREST_NEAREST = 1;\n/** mag = linear and min = nearest and mip = nearest */\nEngine.TEXTURE_LINEAR_NEAREST_MIPNEAREST = 9;\n/** mag = linear and min = nearest and mip = linear */\nEngine.TEXTURE_LINEAR_NEAREST_MIPLINEAR = 10;\n/** mag = linear and min = linear and mip = none */\nEngine.TEXTURE_LINEAR_LINEAR = 2;\n/** mag = linear and min = nearest and mip = none */\nEngine.TEXTURE_LINEAR_NEAREST = 12;\n/** Explicit coordinates mode */\nEngine.TEXTURE_EXPLICIT_MODE = 0;\n/** Spherical coordinates mode */\nEngine.TEXTURE_SPHERICAL_MODE = 1;\n/** Planar coordinates mode */\nEngine.TEXTURE_PLANAR_MODE = 2;\n/** Cubic coordinates mode */\nEngine.TEXTURE_CUBIC_MODE = 3;\n/** Projection coordinates mode */\nEngine.TEXTURE_PROJECTION_MODE = 4;\n/** Skybox coordinates mode */\nEngine.TEXTURE_SKYBOX_MODE = 5;\n/** Inverse Cubic coordinates mode */\nEngine.TEXTURE_INVCUBIC_MODE = 6;\n/** Equirectangular coordinates mode */\nEngine.TEXTURE_EQUIRECTANGULAR_MODE = 7;\n/** Equirectangular Fixed coordinates mode */\nEngine.TEXTURE_FIXED_EQUIRECTANGULAR_MODE = 8;\n/** Equirectangular Fixed Mirrored coordinates mode */\nEngine.TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE = 9;\n// Texture rescaling mode\n/** Defines that texture rescaling will use a floor to find the closer power of 2 size */\nEngine.SCALEMODE_FLOOR = 1;\n/** Defines that texture rescaling will look for the nearest power of 2 size */\nEngine.SCALEMODE_NEAREST = 2;\n/** Defines that texture rescaling will use a ceil to find the closer power of 2 size */\nEngine.SCALEMODE_CEILING = 3;\n/**\n * Method called to create the default rescale post process on each engine.\n */\nEngine._RescalePostProcessFactory = null;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nEngine._RenderPassIdCounter = 0;","map":{"version":3,"mappings":"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","names":["Observable","InternalTexture","InternalTextureSource","IsDocumentAvailable","IsWindowObjectExist","EngineStore","_WarnImport","ThinEngine","PerformanceMonitor","PerfCounter","WebGLDataBuffer","Logger","WebGLHardwareTexture","Engine","constructor","canvasOrContext","antialias","options","adaptToDeviceRatio","Array","Instances","push","_features","supportRenderPasses","_creationOptions","getContext","canvas","_sharedInit","doNotHandleTouchAction","audioEngine","_onFullscreenChange","isFullscreen","document","fullscreenElement","_pointerLockRequested","_RequestPointerlock","addEventListener","_onPointerLockChange","isPointerLock","pointerLockElement","AudioEngineFactory","getRenderingCanvas","getAudioContext","getAudioDestination","_connectVREvents","enableOfflineSupport","OfflineProviderFactory","undefined","_deterministicLockstep","deterministicLockstep","_lockstepMaxSteps","lockstepMaxSteps","_timeStep","timeStep","_prepareVRComponent","autoEnableWebVR","initWebVR","NpmPackage","Version","LastCreatedEngine","LastCreatedScene","_createImageBitmapFromSource","imageSource","promise","Promise","resolve","reject","image","Image","onload","decode","then","createImageBitmap","imageBitmap","onerror","src","resizeImageBitmap","bufferWidth","bufferHeight","createCanvas","context","Error","drawImage","buffer","getImageData","data","MarkAllMaterialsAsDirty","flag","predicate","engineIndex","length","engine","sceneIndex","scenes","markAllMaterialsAsDirty","DefaultLoadingScreenFactory","_supportsHardwareTextureRescaling","_RescalePostProcessFactory","performanceMonitor","_performanceMonitor","compatibilityMode","_compatibilityMode","mode","getInputElement","_renderingCanvas","_initGLContext","_rescalePostProcess","_onCanvasFocus","onCanvasFocusObservable","notifyObservers","_onCanvasBlur","onCanvasBlurObservable","_onCanvasContextMenu","evt","disableContextMenu","preventDefault","_onBlur","disablePerformanceMonitorInBackground","disable","_windowIsBackground","_onFocus","enable","_onCanvasPointerOut","ev","elementFromPoint","clientX","clientY","onCanvasPointerOutObservable","hostWindow","getHostWindow","_disableTouchAction","getAspectRatio","viewportOwner","useScreen","viewport","getRenderWidth","width","getRenderHeight","height","getScreenAspectRatio","getRenderingCanvasClientRect","getBoundingClientRect","getInputElementClientRect","isDeterministicLockStep","getLockstepMaxSteps","getTimeStep","generateMipMapsForCubemap","texture","unbind","generateMipMaps","gl","_gl","_bindTextureDirectly","TEXTURE_CUBE_MAP","generateMipmap","getDepthWrite","_depthCullingState","depthMask","setDepthWrite","getStencilBuffer","_stencilState","stencilTest","setStencilBuffer","getStencilMask","stencilMask","setStencilMask","mask","getStencilFunction","stencilFunc","getStencilFunctionReference","stencilFuncRef","getStencilFunctionMask","stencilFuncMask","setStencilFunction","setStencilFunctionReference","reference","setStencilFunctionMask","getStencilOperationFail","stencilOpStencilFail","getStencilOperationDepthFail","stencilOpDepthFail","getStencilOperationPass","stencilOpStencilDepthPass","setStencilOperationFail","operation","setStencilOperationDepthFail","setStencilOperationPass","setDitheringState","value","DITHER","setRasterizerState","RASTERIZER_DISCARD","getDepthFunction","depthFunc","setDepthFunction","setDepthFunctionToGreater","setDepthFunctionToGreaterOrEqual","setDepthFunctionToLess","setDepthFunctionToLessOrEqual","cacheStencilState","_cachedStencilBuffer","_cachedStencilFunction","_cachedStencilMask","_cachedStencilOperationPass","_cachedStencilOperationFail","_cachedStencilOperationDepthFail","_cachedStencilReference","restoreStencilState","setDirectViewport","x","y","currentViewport","_cachedViewport","_viewport","scissorClear","clearColor","enableScissor","clear","disableScissor","SCISSOR_TEST","scissor","_reportDrawCall","numDrawCalls","_drawCalls","addCount","_submitVRFrame","disableVR","isVRPresenting","_requestVRFrame","_loadFileAsync","url","offlineProvider","useArrayBuffer","_loadFile","request","exception","getVertexShaderSource","program","shaders","getAttachedShaders","getShaderSource","getFragmentShaderSource","setDepthStencilTexture","channel","uniform","name","_boundUniforms","depthStencilTexture","_setTexture","setTextureFromPostProcess","postProcess","postProcessInput","_textures","_currentRenderTextureInd","_forcedOutputTexture","_bindTexture","setTextureFromPostProcessOutput","_outputTexture","_rebuildBuffers","scene","resetCachedMaterial","_rebuildGeometries","_rebuildTextures","_virtualScenes","_renderFrame","index","_activeRenderLoops","renderFunction","_renderLoop","_contextWasLost","shouldRender","renderEvenInBackground","beginFrame","_renderViews","endFrame","customAnimationFrameRequester","requestID","_queueNewFrame","_boundRenderFunction","_frameHandler","_renderingQueueLaunched","switchFullscreen","requestPointerLock","exitFullscreen","enterFullscreen","_RequestFullscreen","_ExitFullscreen","enterPointerlock","exitPointerlock","_ExitPointerlock","_measureFps","onBeginFrameObservable","onEndFrameObservable","resize","forceSetSize","setSize","camIndex","cameras","cam","_currentRenderId","onResizeObservable","hasObservers","_deletePipelineContext","pipelineContext","webGLPipelineContext","transformFeedback","deleteTransformFeedback","createShaderProgram","vertexCode","fragmentCode","defines","transformFeedbackVaryings","onBeforeShaderCompilationObservable","onAfterShaderCompilationObservable","_createShaderProgram","vertexShader","fragmentShader","shaderProgram","createProgram","attachShader","webGLVersion","createTransformFeedback","bindTransformFeedback","setTranformFeedbackVaryings","linkProgram","isParallelCompiled","_finalizePipelineContext","_releaseTexture","_releaseRenderTargetWrapper","rtWrapper","forEach","postProcesses","camera","_postProcesses","getRenderPassNames","_renderPassNames","getCurrentRenderPassName","currentRenderPassId","createRenderPassId","id","_RenderPassIdCounter","releaseRenderPassId","s","m","meshes","mesh","subMeshes","b","subMesh","_removeDrawWrapper","_rescaleTexture","source","destination","internalFormat","onComplete","texParameteri","TEXTURE_2D","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","rtt","createRenderTargetTexture","type","samplingMode","generateDepthBuffer","generateStencilBuffer","externalTextureSamplerBinding","getEffect","executeWhenCompiled","onApply","effect","hostingScene","postProcessManager","directRender","copyTexImage2D","unBindFramebuffer","dispose","getFps","_fps","getDeltaTime","_deltaTime","sampleFrame","averageFPS","instantaneousFrameTime","wrapWebGLTexture","hardwareTexture","internalTexture","Unknown","_hardwareTexture","isReady","_uploadImageToTexture","faceIndex","lod","textureType","_getWebGLTextureType","format","_getInternalFormat","_getRGBABufferInternalSizedFormat","bindTarget","isCube","_unpackFlipY","invertY","target","TEXTURE_CUBE_MAP_POSITIVE_X","texImage2D","updateTextureComparisonFunction","comparisonFunction","TEXTURE_COMPARE_FUNC","TEXTURE_COMPARE_MODE","NONE","COMPARE_REF_TO_TEXTURE","_comparisonFunction","createInstancesBuffer","capacity","createBuffer","result","bindArrayBuffer","bufferData","ARRAY_BUFFER","DYNAMIC_DRAW","references","deleteInstancesBuffer","deleteBuffer","_clientWaitAsync","sync","flags","intervalms","check","res","clientWaitSync","WAIT_FAILED","TIMEOUT_EXPIRED","setTimeout","_readPixelsAsync","w","h","outputBuffer","_webGLVersion","buf","bindBuffer","PIXEL_PACK_BUFFER","byteLength","STREAM_READ","readPixels","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","deleteSync","getBufferSubData","hideLoadingUI","onNewSceneAddedObservable","removeEventListener","indexOf","splice","setAttribute","style","touchAction","webkitTapHighlightColor","displayLoadingUI","loadingScreen","_loadingScreen","loadingUIText","text","loadingUIBackgroundColor","color","createVideoElement","constraints","createElement","element","focus","exitPointerLock","requestFunction","requestFullscreen","webkitRequestFullscreen","call","anyDoc","webkitCancelFullScreen","getFontOffset","font","innerHTML","block","display","verticalAlign","div","whiteSpace","appendChild","body","fontAscent","fontHeight","top","removeChild","ascent","descent"],"sourceRoot":"","sources":["../../../../lts/core/generated/Engines/engine.ts"],"sourcesContent":["import { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { InternalTexture, InternalTextureSource } from \"../Materials/Textures/internalTexture\";\r\nimport type { IOfflineProvider } from \"../Offline/IOfflineProvider\";\r\nimport type { ILoadingScreen } from \"../Loading/loadingScreen\";\r\nimport { IsDocumentAvailable, IsWindowObjectExist } from \"../Misc/domManagement\";\r\nimport { EngineStore } from \"./engineStore\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport type { WebGLPipelineContext } from \"./WebGL/webGLPipelineContext\";\r\nimport type { IPipelineContext } from \"./IPipelineContext\";\r\nimport type { ICustomAnimationFrameRequester } from \"../Misc/customAnimationFrameRequester\";\r\nimport type { EngineOptions } from \"./thinEngine\";\r\nimport { ThinEngine } from \"./thinEngine\";\r\nimport { Constants } from \"./constants\";\r\nimport type { IViewportLike, IColor4Like } from \"../Maths/math.like\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { PerformanceMonitor } from \"../Misc/performanceMonitor\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { PerfCounter } from \"../Misc/perfCounter\";\r\nimport { WebGLDataBuffer } from \"../Meshes/WebGL/webGLDataBuffer\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { RenderTargetWrapper } from \"./renderTargetWrapper\";\r\nimport { WebGLHardwareTexture } from \"./WebGL/webGLHardwareTexture\";\r\n\r\nimport \"./Extensions/engine.alpha\";\r\nimport \"./Extensions/engine.readTexture\";\r\nimport \"./Extensions/engine.dynamicBuffer\";\r\nimport type { IAudioEngine } from \"../Audio/Interfaces/IAudioEngine\";\r\n\r\ndeclare type Material = import(\"../Materials/material\").Material;\r\ndeclare type PostProcess = import(\"../PostProcesses/postProcess\").PostProcess;\r\n\r\n/**\r\n * Defines the interface used by display changed events\r\n */\r\nexport interface IDisplayChangedEventArgs {\r\n    /** Gets the vrDisplay object (if any) */\r\n    vrDisplay: Nullable<any>;\r\n    /** Gets a boolean indicating if webVR is supported */\r\n    vrSupported: boolean;\r\n}\r\n\r\n/**\r\n * Defines the interface used by objects containing a viewport (like a camera)\r\n */\r\ninterface IViewportOwnerLike {\r\n    /**\r\n     * Gets or sets the viewport\r\n     */\r\n    viewport: IViewportLike;\r\n}\r\n\r\n/**\r\n * The engine class is responsible for interfacing with all lower-level APIs such as WebGL and Audio\r\n */\r\nexport class Engine extends ThinEngine {\r\n    // Const statics\r\n\r\n    /** Defines that alpha blending is disabled */\r\n    public static readonly ALPHA_DISABLE = Constants.ALPHA_DISABLE;\r\n    /** Defines that alpha blending to SRC ALPHA * SRC + DEST */\r\n    public static readonly ALPHA_ADD = Constants.ALPHA_ADD;\r\n    /** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\r\n    public static readonly ALPHA_COMBINE = Constants.ALPHA_COMBINE;\r\n    /** Defines that alpha blending to DEST - SRC * DEST */\r\n    public static readonly ALPHA_SUBTRACT = Constants.ALPHA_SUBTRACT;\r\n    /** Defines that alpha blending to SRC * DEST */\r\n    public static readonly ALPHA_MULTIPLY = Constants.ALPHA_MULTIPLY;\r\n    /** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC) * DEST */\r\n    public static readonly ALPHA_MAXIMIZED = Constants.ALPHA_MAXIMIZED;\r\n    /** Defines that alpha blending to SRC + DEST */\r\n    public static readonly ALPHA_ONEONE = Constants.ALPHA_ONEONE;\r\n    /** Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST */\r\n    public static readonly ALPHA_PREMULTIPLIED = Constants.ALPHA_PREMULTIPLIED;\r\n    /**\r\n     * Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST\r\n     * Alpha will be set to (1 - SRC ALPHA) * DEST ALPHA\r\n     */\r\n    public static readonly ALPHA_PREMULTIPLIED_PORTERDUFF = Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\r\n    /** Defines that alpha blending to CST * SRC + (1 - CST) * DEST */\r\n    public static readonly ALPHA_INTERPOLATE = Constants.ALPHA_INTERPOLATE;\r\n    /**\r\n     * Defines that alpha blending to SRC + (1 - SRC) * DEST\r\n     * Alpha will be set to SRC ALPHA + (1 - SRC ALPHA) * DEST ALPHA\r\n     */\r\n    public static readonly ALPHA_SCREENMODE = Constants.ALPHA_SCREENMODE;\r\n\r\n    /** Defines that the resource is not delayed*/\r\n    public static readonly DELAYLOADSTATE_NONE = Constants.DELAYLOADSTATE_NONE;\r\n    /** Defines that the resource was successfully delay loaded */\r\n    public static readonly DELAYLOADSTATE_LOADED = Constants.DELAYLOADSTATE_LOADED;\r\n    /** Defines that the resource is currently delay loading */\r\n    public static readonly DELAYLOADSTATE_LOADING = Constants.DELAYLOADSTATE_LOADING;\r\n    /** Defines that the resource is delayed and has not started loading */\r\n    public static readonly DELAYLOADSTATE_NOTLOADED = Constants.DELAYLOADSTATE_NOTLOADED;\r\n\r\n    // Depht or Stencil test Constants.\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass. i.e. Nothing will be drawn */\r\n    public static readonly NEVER = Constants.NEVER;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\r\n    public static readonly ALWAYS = Constants.ALWAYS;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value */\r\n    public static readonly LESS = Constants.LESS;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value */\r\n    public static readonly EQUAL = Constants.EQUAL;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value */\r\n    public static readonly LEQUAL = Constants.LEQUAL;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value */\r\n    public static readonly GREATER = Constants.GREATER;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value */\r\n    public static readonly GEQUAL = Constants.GEQUAL;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value */\r\n    public static readonly NOTEQUAL = Constants.NOTEQUAL;\r\n\r\n    // Stencil Actions Constants.\r\n    /** Passed to stencilOperation to specify that stencil value must be kept */\r\n    public static readonly KEEP = Constants.KEEP;\r\n    /** Passed to stencilOperation to specify that stencil value must be replaced */\r\n    public static readonly REPLACE = Constants.REPLACE;\r\n    /** Passed to stencilOperation to specify that stencil value must be incremented */\r\n    public static readonly INCR = Constants.INCR;\r\n    /** Passed to stencilOperation to specify that stencil value must be decremented */\r\n    public static readonly DECR = Constants.DECR;\r\n    /** Passed to stencilOperation to specify that stencil value must be inverted */\r\n    public static readonly INVERT = Constants.INVERT;\r\n    /** Passed to stencilOperation to specify that stencil value must be incremented with wrapping */\r\n    public static readonly INCR_WRAP = Constants.INCR_WRAP;\r\n    /** Passed to stencilOperation to specify that stencil value must be decremented with wrapping */\r\n    public static readonly DECR_WRAP = Constants.DECR_WRAP;\r\n\r\n    /** Texture is not repeating outside of 0..1 UVs */\r\n    public static readonly TEXTURE_CLAMP_ADDRESSMODE = Constants.TEXTURE_CLAMP_ADDRESSMODE;\r\n    /** Texture is repeating outside of 0..1 UVs */\r\n    public static readonly TEXTURE_WRAP_ADDRESSMODE = Constants.TEXTURE_WRAP_ADDRESSMODE;\r\n    /** Texture is repeating and mirrored */\r\n    public static readonly TEXTURE_MIRROR_ADDRESSMODE = Constants.TEXTURE_MIRROR_ADDRESSMODE;\r\n\r\n    /** ALPHA */\r\n    public static readonly TEXTUREFORMAT_ALPHA = Constants.TEXTUREFORMAT_ALPHA;\r\n    /** LUMINANCE */\r\n    public static readonly TEXTUREFORMAT_LUMINANCE = Constants.TEXTUREFORMAT_LUMINANCE;\r\n    /** LUMINANCE_ALPHA */\r\n    public static readonly TEXTUREFORMAT_LUMINANCE_ALPHA = Constants.TEXTUREFORMAT_LUMINANCE_ALPHA;\r\n    /** RGB */\r\n    public static readonly TEXTUREFORMAT_RGB = Constants.TEXTUREFORMAT_RGB;\r\n    /** RGBA */\r\n    public static readonly TEXTUREFORMAT_RGBA = Constants.TEXTUREFORMAT_RGBA;\r\n    /** RED */\r\n    public static readonly TEXTUREFORMAT_RED = Constants.TEXTUREFORMAT_RED;\r\n    /** RED (2nd reference) */\r\n    public static readonly TEXTUREFORMAT_R = Constants.TEXTUREFORMAT_R;\r\n    /** RG */\r\n    public static readonly TEXTUREFORMAT_RG = Constants.TEXTUREFORMAT_RG;\r\n    /** RED_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RED_INTEGER = Constants.TEXTUREFORMAT_RED_INTEGER;\r\n    /** RED_INTEGER (2nd reference) */\r\n    public static readonly TEXTUREFORMAT_R_INTEGER = Constants.TEXTUREFORMAT_R_INTEGER;\r\n    /** RG_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RG_INTEGER = Constants.TEXTUREFORMAT_RG_INTEGER;\r\n    /** RGB_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RGB_INTEGER = Constants.TEXTUREFORMAT_RGB_INTEGER;\r\n    /** RGBA_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RGBA_INTEGER = Constants.TEXTUREFORMAT_RGBA_INTEGER;\r\n\r\n    /** UNSIGNED_BYTE */\r\n    public static readonly TEXTURETYPE_UNSIGNED_BYTE = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n    /** UNSIGNED_BYTE (2nd reference) */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT = Constants.TEXTURETYPE_UNSIGNED_INT;\r\n    /** FLOAT */\r\n    public static readonly TEXTURETYPE_FLOAT = Constants.TEXTURETYPE_FLOAT;\r\n    /** HALF_FLOAT */\r\n    public static readonly TEXTURETYPE_HALF_FLOAT = Constants.TEXTURETYPE_HALF_FLOAT;\r\n    /** BYTE */\r\n    public static readonly TEXTURETYPE_BYTE = Constants.TEXTURETYPE_BYTE;\r\n    /** SHORT */\r\n    public static readonly TEXTURETYPE_SHORT = Constants.TEXTURETYPE_SHORT;\r\n    /** UNSIGNED_SHORT */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT = Constants.TEXTURETYPE_UNSIGNED_SHORT;\r\n    /** INT */\r\n    public static readonly TEXTURETYPE_INT = Constants.TEXTURETYPE_INT;\r\n    /** UNSIGNED_INT */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INTEGER = Constants.TEXTURETYPE_UNSIGNED_INTEGER;\r\n    /** UNSIGNED_SHORT_4_4_4_4 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 = Constants.TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4;\r\n    /** UNSIGNED_SHORT_5_5_5_1 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 = Constants.TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1;\r\n    /** UNSIGNED_SHORT_5_6_5 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_5_6_5 = Constants.TEXTURETYPE_UNSIGNED_SHORT_5_6_5;\r\n    /** UNSIGNED_INT_2_10_10_10_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV = Constants.TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV;\r\n    /** UNSIGNED_INT_24_8 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_24_8 = Constants.TEXTURETYPE_UNSIGNED_INT_24_8;\r\n    /** UNSIGNED_INT_10F_11F_11F_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV = Constants.TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV;\r\n    /** UNSIGNED_INT_5_9_9_9_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV = Constants.TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV;\r\n    /** FLOAT_32_UNSIGNED_INT_24_8_REV */\r\n    public static readonly TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV = Constants.TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV;\r\n\r\n    /** nearest is mag = nearest and min = nearest and mip = none */\r\n    public static readonly TEXTURE_NEAREST_SAMPLINGMODE = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_BILINEAR_SAMPLINGMODE = Constants.TEXTURE_BILINEAR_SAMPLINGMODE;\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TEXTURE_TRILINEAR_SAMPLINGMODE = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE;\r\n    /** nearest is mag = nearest and min = nearest and mip = linear */\r\n    public static readonly TEXTURE_NEAREST_NEAREST_MIPLINEAR = Constants.TEXTURE_NEAREST_NEAREST_MIPLINEAR;\r\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_LINEAR_LINEAR_MIPNEAREST = Constants.TEXTURE_LINEAR_LINEAR_MIPNEAREST;\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TEXTURE_LINEAR_LINEAR_MIPLINEAR = Constants.TEXTURE_LINEAR_LINEAR_MIPLINEAR;\r\n    /** mag = nearest and min = nearest and mip = nearest */\r\n    public static readonly TEXTURE_NEAREST_NEAREST_MIPNEAREST = Constants.TEXTURE_NEAREST_NEAREST_MIPNEAREST;\r\n    /** mag = nearest and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_NEAREST_LINEAR_MIPNEAREST = Constants.TEXTURE_NEAREST_LINEAR_MIPNEAREST;\r\n    /** mag = nearest and min = linear and mip = linear */\r\n    public static readonly TEXTURE_NEAREST_LINEAR_MIPLINEAR = Constants.TEXTURE_NEAREST_LINEAR_MIPLINEAR;\r\n    /** mag = nearest and min = linear and mip = none */\r\n    public static readonly TEXTURE_NEAREST_LINEAR = Constants.TEXTURE_NEAREST_LINEAR;\r\n    /** mag = nearest and min = nearest and mip = none */\r\n    public static readonly TEXTURE_NEAREST_NEAREST = Constants.TEXTURE_NEAREST_NEAREST;\r\n    /** mag = linear and min = nearest and mip = nearest */\r\n    public static readonly TEXTURE_LINEAR_NEAREST_MIPNEAREST = Constants.TEXTURE_LINEAR_NEAREST_MIPNEAREST;\r\n    /** mag = linear and min = nearest and mip = linear */\r\n    public static readonly TEXTURE_LINEAR_NEAREST_MIPLINEAR = Constants.TEXTURE_LINEAR_NEAREST_MIPLINEAR;\r\n    /** mag = linear and min = linear and mip = none */\r\n    public static readonly TEXTURE_LINEAR_LINEAR = Constants.TEXTURE_LINEAR_LINEAR;\r\n    /** mag = linear and min = nearest and mip = none */\r\n    public static readonly TEXTURE_LINEAR_NEAREST = Constants.TEXTURE_LINEAR_NEAREST;\r\n\r\n    /** Explicit coordinates mode */\r\n    public static readonly TEXTURE_EXPLICIT_MODE = Constants.TEXTURE_EXPLICIT_MODE;\r\n    /** Spherical coordinates mode */\r\n    public static readonly TEXTURE_SPHERICAL_MODE = Constants.TEXTURE_SPHERICAL_MODE;\r\n    /** Planar coordinates mode */\r\n    public static readonly TEXTURE_PLANAR_MODE = Constants.TEXTURE_PLANAR_MODE;\r\n    /** Cubic coordinates mode */\r\n    public static readonly TEXTURE_CUBIC_MODE = Constants.TEXTURE_CUBIC_MODE;\r\n    /** Projection coordinates mode */\r\n    public static readonly TEXTURE_PROJECTION_MODE = Constants.TEXTURE_PROJECTION_MODE;\r\n    /** Skybox coordinates mode */\r\n    public static readonly TEXTURE_SKYBOX_MODE = Constants.TEXTURE_SKYBOX_MODE;\r\n    /** Inverse Cubic coordinates mode */\r\n    public static readonly TEXTURE_INVCUBIC_MODE = Constants.TEXTURE_INVCUBIC_MODE;\r\n    /** Equirectangular coordinates mode */\r\n    public static readonly TEXTURE_EQUIRECTANGULAR_MODE = Constants.TEXTURE_EQUIRECTANGULAR_MODE;\r\n    /** Equirectangular Fixed coordinates mode */\r\n    public static readonly TEXTURE_FIXED_EQUIRECTANGULAR_MODE = Constants.TEXTURE_FIXED_EQUIRECTANGULAR_MODE;\r\n    /** Equirectangular Fixed Mirrored coordinates mode */\r\n    public static readonly TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE = Constants.TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE;\r\n\r\n    // Texture rescaling mode\r\n    /** Defines that texture rescaling will use a floor to find the closer power of 2 size */\r\n    public static readonly SCALEMODE_FLOOR = Constants.SCALEMODE_FLOOR;\r\n    /** Defines that texture rescaling will look for the nearest power of 2 size */\r\n    public static readonly SCALEMODE_NEAREST = Constants.SCALEMODE_NEAREST;\r\n    /** Defines that texture rescaling will use a ceil to find the closer power of 2 size */\r\n    public static readonly SCALEMODE_CEILING = Constants.SCALEMODE_CEILING;\r\n\r\n    /**\r\n     * Returns the current npm package of the sdk\r\n     */\r\n    // Not mixed with Version for tooling purpose.\r\n    public static get NpmPackage(): string {\r\n        return ThinEngine.NpmPackage;\r\n    }\r\n\r\n    /**\r\n     * Returns the current version of the framework\r\n     */\r\n    public static get Version(): string {\r\n        return ThinEngine.Version;\r\n    }\r\n\r\n    /** Gets the list of created engines */\r\n    public static get Instances(): Engine[] {\r\n        return EngineStore.Instances;\r\n    }\r\n\r\n    /**\r\n     * Gets the latest created engine\r\n     */\r\n    public static get LastCreatedEngine(): Nullable<Engine> {\r\n        return EngineStore.LastCreatedEngine;\r\n    }\r\n\r\n    /**\r\n     * Gets the latest created scene\r\n     */\r\n    public static get LastCreatedScene(): Nullable<Scene> {\r\n        return EngineStore.LastCreatedScene;\r\n    }\r\n\r\n    /** @internal */\r\n    /**\r\n     * Engine abstraction for loading and creating an image bitmap from a given source string.\r\n     * @param imageSource source to load the image from.\r\n     * @param options An object that sets options for the image's extraction.\r\n     * @returns ImageBitmap.\r\n     */\r\n    public _createImageBitmapFromSource(imageSource: string, options?: ImageBitmapOptions): Promise<ImageBitmap> {\r\n        const promise = new Promise<ImageBitmap>((resolve, reject) => {\r\n            const image = new Image();\r\n            image.onload = () => {\r\n                image.decode().then(() => {\r\n                    this.createImageBitmap(image, options).then((imageBitmap) => {\r\n                        resolve(imageBitmap);\r\n                    });\r\n                });\r\n            };\r\n            image.onerror = () => {\r\n                reject(`Error loading image ${image.src}`);\r\n            };\r\n\r\n            image.src = imageSource;\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Engine abstraction for createImageBitmap\r\n     * @param image source for image\r\n     * @param options An object that sets options for the image's extraction.\r\n     * @returns ImageBitmap\r\n     */\r\n    public createImageBitmap(image: ImageBitmapSource, options?: ImageBitmapOptions): Promise<ImageBitmap> {\r\n        return createImageBitmap(image, options);\r\n    }\r\n\r\n    /**\r\n     * Resize an image and returns the image data as an uint8array\r\n     * @param image image to resize\r\n     * @param bufferWidth destination buffer width\r\n     * @param bufferHeight destination buffer height\r\n     * @returns an uint8array containing RGBA values of bufferWidth * bufferHeight size\r\n     */\r\n    public resizeImageBitmap(image: HTMLImageElement | ImageBitmap, bufferWidth: number, bufferHeight: number): Uint8Array {\r\n        const canvas = this.createCanvas(bufferWidth, bufferHeight);\r\n        const context = canvas.getContext(\"2d\");\r\n\r\n        if (!context) {\r\n            throw new Error(\"Unable to get 2d context for resizeImageBitmap\");\r\n        }\r\n\r\n        context.drawImage(image, 0, 0);\r\n\r\n        // Create VertexData from map data\r\n        // Cast is due to wrong definition in lib.d.ts from ts 1.3 - https://github.com/Microsoft/TypeScript/issues/949\r\n        const buffer = <Uint8Array>(<any>context.getImageData(0, 0, bufferWidth, bufferHeight).data);\r\n        return buffer;\r\n    }\r\n\r\n    /**\r\n     * Will flag all materials in all scenes in all engines as dirty to trigger new shader compilation\r\n     * @param flag defines which part of the materials must be marked as dirty\r\n     * @param predicate defines a predicate used to filter which materials should be affected\r\n     */\r\n    public static MarkAllMaterialsAsDirty(flag: number, predicate?: (mat: Material) => boolean): void {\r\n        for (let engineIndex = 0; engineIndex < Engine.Instances.length; engineIndex++) {\r\n            const engine = Engine.Instances[engineIndex];\r\n\r\n            for (let sceneIndex = 0; sceneIndex < engine.scenes.length; sceneIndex++) {\r\n                engine.scenes[sceneIndex].markAllMaterialsAsDirty(flag, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method called to create the default loading screen.\r\n     * This can be overridden in your own app.\r\n     * @param canvas The rendering canvas element\r\n     * @returns The loading screen\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static DefaultLoadingScreenFactory(canvas: HTMLCanvasElement): ILoadingScreen {\r\n        throw _WarnImport(\"LoadingScreen\");\r\n    }\r\n\r\n    /**\r\n     * Method called to create the default rescale post process on each engine.\r\n     */\r\n    public static _RescalePostProcessFactory: Nullable<(engine: Engine) => PostProcess> = null;\r\n\r\n    // Members\r\n\r\n    /**\r\n     * Gets or sets a boolean to enable/disable IndexedDB support and avoid XHR on .manifest\r\n     **/\r\n    public enableOfflineSupport = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean to enable/disable checking manifest if IndexedDB support is enabled (js will always consider the database is up to date)\r\n     **/\r\n    public disableManifestCheck = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean to enable/disable the context menu (right-click) from appearing on the main canvas\r\n     */\r\n    public disableContextMenu: boolean = true;\r\n\r\n    /**\r\n     * Gets the list of created scenes\r\n     */\r\n    public scenes = new Array<Scene>();\r\n\r\n    /** @internal */\r\n    public _virtualScenes = new Array<Scene>();\r\n\r\n    /**\r\n     * Event raised when a new scene is created\r\n     */\r\n    public onNewSceneAddedObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * Gets the list of created postprocesses\r\n     */\r\n    public postProcesses = new Array<PostProcess>();\r\n\r\n    /**\r\n     * Gets a boolean indicating if the pointer is currently locked\r\n     */\r\n    public isPointerLock = false;\r\n\r\n    // Observables\r\n\r\n    /**\r\n     * Observable event triggered each time the rendering canvas is resized\r\n     */\r\n    public onResizeObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable event triggered each time the canvas loses focus\r\n     */\r\n    public onCanvasBlurObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable event triggered each time the canvas gains focus\r\n     */\r\n    public onCanvasFocusObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable event triggered each time the canvas receives pointerout event\r\n     */\r\n    public onCanvasPointerOutObservable = new Observable<PointerEvent>();\r\n\r\n    /**\r\n     * Observable raised when the engine begins a new frame\r\n     */\r\n    public onBeginFrameObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * If set, will be used to request the next animation frame for the render loop\r\n     */\r\n    public customAnimationFrameRequester: Nullable<ICustomAnimationFrameRequester> = null;\r\n\r\n    /**\r\n     * Observable raised when the engine ends the current frame\r\n     */\r\n    public onEndFrameObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable raised when the engine is about to compile a shader\r\n     */\r\n    public onBeforeShaderCompilationObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable raised when the engine has just compiled a shader\r\n     */\r\n    public onAfterShaderCompilationObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Gets the audio engine\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n     * @ignorenaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static audioEngine: Nullable<IAudioEngine>;\r\n\r\n    /**\r\n     * Default AudioEngine factory responsible of creating the Audio Engine.\r\n     * By default, this will create a BabylonJS Audio Engine if the workload has been embedded.\r\n     */\r\n    public static AudioEngineFactory: (\r\n        hostElement: Nullable<HTMLElement>,\r\n        audioContext: Nullable<AudioContext>,\r\n        audioDestination: Nullable<AudioDestinationNode | MediaStreamAudioDestinationNode>\r\n    ) => IAudioEngine;\r\n\r\n    /**\r\n     * Default offline support factory responsible of creating a tool used to store data locally.\r\n     * By default, this will create a Database object if the workload has been embedded.\r\n     */\r\n    public static OfflineProviderFactory: (urlToScene: string, callbackManifestChecked: (checked: boolean) => any, disableManifestCheck: boolean) => IOfflineProvider;\r\n\r\n    private _loadingScreen: ILoadingScreen;\r\n    private _pointerLockRequested: boolean;\r\n    private _rescalePostProcess: Nullable<PostProcess>;\r\n\r\n    // Deterministic lockstepMaxSteps\r\n    protected _deterministicLockstep: boolean = false;\r\n    protected _lockstepMaxSteps: number = 4;\r\n    protected _timeStep: number = 1 / 60;\r\n\r\n    protected get _supportsHardwareTextureRescaling() {\r\n        return !!Engine._RescalePostProcessFactory;\r\n    }\r\n\r\n    // FPS\r\n    private _fps = 60;\r\n    private _deltaTime = 0;\r\n\r\n    /** @internal */\r\n    public _drawCalls = new PerfCounter();\r\n\r\n    /** Gets or sets the tab index to set to the rendering canvas. 1 is the minimum value to set to be able to capture keyboard events */\r\n    public canvasTabIndex = 1;\r\n\r\n    /**\r\n     * Turn this value on if you want to pause FPS computation when in background\r\n     */\r\n    public disablePerformanceMonitorInBackground = false;\r\n\r\n    private _performanceMonitor = new PerformanceMonitor();\r\n    /**\r\n     * Gets the performance monitor attached to this engine\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#engineinstrumentation\r\n     */\r\n    public get performanceMonitor(): PerformanceMonitor {\r\n        return this._performanceMonitor;\r\n    }\r\n\r\n    // Focus\r\n    private _onFocus: () => void;\r\n    private _onBlur: () => void;\r\n    private _onCanvasPointerOut: (event: PointerEvent) => void;\r\n    private _onCanvasBlur: () => void;\r\n    private _onCanvasFocus: () => void;\r\n    private _onCanvasContextMenu: (evt: Event) => void;\r\n\r\n    private _onFullscreenChange: () => void;\r\n    private _onPointerLockChange: () => void;\r\n\r\n    protected _compatibilityMode = true;\r\n\r\n    /**\r\n     * (WebGPU only) True (default) to be in compatibility mode, meaning rendering all existing scenes without artifacts (same rendering than WebGL).\r\n     * Setting the property to false will improve performances but may not work in some scenes if some precautions are not taken.\r\n     * See https://doc.babylonjs.com/setup/support/webGPU/webGPUOptimization/webGPUNonCompatibilityMode for more details\r\n     */\r\n    public get compatibilityMode() {\r\n        return this._compatibilityMode;\r\n    }\r\n\r\n    public set compatibilityMode(mode: boolean) {\r\n        // not supported in WebGL\r\n        this._compatibilityMode = true;\r\n    }\r\n\r\n    // Events\r\n\r\n    /**\r\n     * Gets the HTML element used to attach event listeners\r\n     * @returns a HTML element\r\n     */\r\n    public getInputElement(): Nullable<HTMLElement> {\r\n        return this._renderingCanvas;\r\n    }\r\n\r\n    /**\r\n     * Creates a new engine\r\n     * @param canvasOrContext defines the canvas or WebGL context to use for rendering. If you provide a WebGL context, Babylon.js will not hook events on the canvas (like pointers, keyboards, etc...) so no event observables will be available. This is mostly used when Babylon.js is used as a plugin on a system which already used the WebGL context\r\n     * @param antialias defines enable antialiasing (default: false)\r\n     * @param options defines further options to be sent to the getContext() function\r\n     * @param adaptToDeviceRatio defines whether to adapt to the device's viewport characteristics (default: false)\r\n     */\r\n    constructor(\r\n        canvasOrContext: Nullable<HTMLCanvasElement | OffscreenCanvas | WebGLRenderingContext | WebGL2RenderingContext>,\r\n        antialias?: boolean,\r\n        options?: EngineOptions,\r\n        adaptToDeviceRatio: boolean = false\r\n    ) {\r\n        super(canvasOrContext, antialias, options, adaptToDeviceRatio);\r\n\r\n        Engine.Instances.push(this);\r\n\r\n        if (!canvasOrContext) {\r\n            return;\r\n        }\r\n\r\n        this._features.supportRenderPasses = true;\r\n\r\n        options = this._creationOptions;\r\n\r\n        if ((<any>canvasOrContext).getContext) {\r\n            const canvas = <HTMLCanvasElement>canvasOrContext;\r\n\r\n            this._sharedInit(canvas, !!options.doNotHandleTouchAction, options.audioEngine!);\r\n\r\n            if (IsDocumentAvailable()) {\r\n                // Fullscreen\r\n                this._onFullscreenChange = () => {\r\n                    this.isFullscreen = !!document.fullscreenElement;\r\n\r\n                    // Pointer lock\r\n                    if (this.isFullscreen && this._pointerLockRequested && canvas) {\r\n                        Engine._RequestPointerlock(canvas);\r\n                    }\r\n                };\r\n\r\n                document.addEventListener(\"fullscreenchange\", this._onFullscreenChange, false);\r\n                document.addEventListener(\"webkitfullscreenchange\", this._onFullscreenChange, false);\r\n\r\n                // Pointer lock\r\n                this._onPointerLockChange = () => {\r\n                    this.isPointerLock = document.pointerLockElement === canvas;\r\n                };\r\n\r\n                document.addEventListener(\"pointerlockchange\", this._onPointerLockChange, false);\r\n                document.addEventListener(\"webkitpointerlockchange\", this._onPointerLockChange, false);\r\n\r\n                // Create Audio Engine if needed.\r\n                if (!Engine.audioEngine && options.audioEngine && Engine.AudioEngineFactory) {\r\n                    Engine.audioEngine = Engine.AudioEngineFactory(this.getRenderingCanvas(), this.getAudioContext(), this.getAudioDestination());\r\n                }\r\n            }\r\n\r\n            this._connectVREvents();\r\n\r\n            this.enableOfflineSupport = Engine.OfflineProviderFactory !== undefined;\r\n\r\n            this._deterministicLockstep = !!options.deterministicLockstep;\r\n            this._lockstepMaxSteps = options.lockstepMaxSteps || 0;\r\n            this._timeStep = options.timeStep || 1 / 60;\r\n        }\r\n\r\n        // Load WebVR Devices\r\n        this._prepareVRComponent();\r\n        if (options.autoEnableWebVR) {\r\n            this.initWebVR();\r\n        }\r\n    }\r\n\r\n    protected _initGLContext(): void {\r\n        super._initGLContext();\r\n\r\n        this._rescalePostProcess = null;\r\n    }\r\n\r\n    /**\r\n     * Shared initialization across engines types.\r\n     * @param canvas The canvas associated with this instance of the engine.\r\n     * @param doNotHandleTouchAction Defines that engine should ignore modifying touch action attribute and style\r\n     * @param audioEngine Defines if an audio engine should be created by default\r\n     */\r\n    protected _sharedInit(canvas: HTMLCanvasElement, doNotHandleTouchAction: boolean, audioEngine: boolean) {\r\n        super._sharedInit(canvas, doNotHandleTouchAction, audioEngine);\r\n\r\n        this._onCanvasFocus = () => {\r\n            this.onCanvasFocusObservable.notifyObservers(this);\r\n        };\r\n\r\n        this._onCanvasBlur = () => {\r\n            this.onCanvasBlurObservable.notifyObservers(this);\r\n        };\r\n\r\n        this._onCanvasContextMenu = (evt: Event) => {\r\n            if (this.disableContextMenu) {\r\n                evt.preventDefault();\r\n            }\r\n        };\r\n\r\n        canvas.addEventListener(\"focus\", this._onCanvasFocus);\r\n        canvas.addEventListener(\"blur\", this._onCanvasBlur);\r\n        canvas.addEventListener(\"contextmenu\", this._onCanvasContextMenu);\r\n\r\n        this._onBlur = () => {\r\n            if (this.disablePerformanceMonitorInBackground) {\r\n                this._performanceMonitor.disable();\r\n            }\r\n            this._windowIsBackground = true;\r\n        };\r\n\r\n        this._onFocus = () => {\r\n            if (this.disablePerformanceMonitorInBackground) {\r\n                this._performanceMonitor.enable();\r\n            }\r\n            this._windowIsBackground = false;\r\n        };\r\n\r\n        this._onCanvasPointerOut = (ev) => {\r\n            // Check that the element at the point of the pointer out isn't the canvas and if it isn't, notify observers\r\n            // Note: This is a workaround for a bug with Safari\r\n            if (document.elementFromPoint(ev.clientX, ev.clientY) !== canvas) {\r\n                this.onCanvasPointerOutObservable.notifyObservers(ev);\r\n            }\r\n        };\r\n\r\n        const hostWindow = this.getHostWindow(); // it calls IsWindowObjectExist()\r\n        if (hostWindow && typeof hostWindow.addEventListener === \"function\") {\r\n            hostWindow.addEventListener(\"blur\", this._onBlur);\r\n            hostWindow.addEventListener(\"focus\", this._onFocus);\r\n        }\r\n\r\n        canvas.addEventListener(\"pointerout\", this._onCanvasPointerOut);\r\n\r\n        if (!doNotHandleTouchAction) {\r\n            this._disableTouchAction();\r\n        }\r\n\r\n        // Create Audio Engine if needed.\r\n        if (!Engine.audioEngine && audioEngine && Engine.AudioEngineFactory) {\r\n            Engine.audioEngine = Engine.AudioEngineFactory(this.getRenderingCanvas(), this.getAudioContext(), this.getAudioDestination());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets current aspect ratio\r\n     * @param viewportOwner defines the camera to use to get the aspect ratio\r\n     * @param useScreen defines if screen size must be used (or the current render target if any)\r\n     * @returns a number defining the aspect ratio\r\n     */\r\n    public getAspectRatio(viewportOwner: IViewportOwnerLike, useScreen = false): number {\r\n        const viewport = viewportOwner.viewport;\r\n        return (this.getRenderWidth(useScreen) * viewport.width) / (this.getRenderHeight(useScreen) * viewport.height);\r\n    }\r\n\r\n    /**\r\n     * Gets current screen aspect ratio\r\n     * @returns a number defining the aspect ratio\r\n     */\r\n    public getScreenAspectRatio(): number {\r\n        return this.getRenderWidth(true) / this.getRenderHeight(true);\r\n    }\r\n\r\n    /**\r\n     * Gets the client rect of the HTML canvas attached with the current webGL context\r\n     * @returns a client rectangle\r\n     */\r\n    public getRenderingCanvasClientRect(): Nullable<ClientRect> {\r\n        if (!this._renderingCanvas) {\r\n            return null;\r\n        }\r\n        return this._renderingCanvas.getBoundingClientRect();\r\n    }\r\n\r\n    /**\r\n     * Gets the client rect of the HTML element used for events\r\n     * @returns a client rectangle\r\n     */\r\n    public getInputElementClientRect(): Nullable<ClientRect> {\r\n        if (!this._renderingCanvas) {\r\n            return null;\r\n        }\r\n        return this.getInputElement()!.getBoundingClientRect();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the engine is running in deterministic lock step mode\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\r\n     * @returns true if engine is in deterministic lock step mode\r\n     */\r\n    public isDeterministicLockStep(): boolean {\r\n        return this._deterministicLockstep;\r\n    }\r\n\r\n    /**\r\n     * Gets the max steps when engine is running in deterministic lock step\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\r\n     * @returns the max steps\r\n     */\r\n    public getLockstepMaxSteps(): number {\r\n        return this._lockstepMaxSteps;\r\n    }\r\n\r\n    /**\r\n     * Returns the time in ms between steps when using deterministic lock step.\r\n     * @returns time step in (ms)\r\n     */\r\n    public getTimeStep(): number {\r\n        return this._timeStep * 1000;\r\n    }\r\n\r\n    /**\r\n     * Force the mipmap generation for the given render target texture\r\n     * @param texture defines the render target texture to use\r\n     * @param unbind defines whether or not to unbind the texture after generation. Defaults to true.\r\n     */\r\n    public generateMipMapsForCubemap(texture: InternalTexture, unbind = true) {\r\n        if (texture.generateMipMaps) {\r\n            const gl = this._gl;\r\n            this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\r\n            gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n            if (unbind) {\r\n                this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** States */\r\n\r\n    /**\r\n     * Gets a boolean indicating if depth writing is enabled\r\n     * @returns the current depth writing state\r\n     */\r\n    public getDepthWrite(): boolean {\r\n        return this._depthCullingState.depthMask;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable depth writing\r\n     * @param enable defines the state to set\r\n     */\r\n    public setDepthWrite(enable: boolean): void {\r\n        this._depthCullingState.depthMask = enable;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if stencil buffer is enabled\r\n     * @returns the current stencil buffer state\r\n     */\r\n    public getStencilBuffer(): boolean {\r\n        return this._stencilState.stencilTest;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the stencil buffer\r\n     * @param enable defines if the stencil buffer must be enabled or disabled\r\n     */\r\n    public setStencilBuffer(enable: boolean): void {\r\n        this._stencilState.stencilTest = enable;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil mask\r\n     * @returns a number defining the new stencil mask to use\r\n     */\r\n    public getStencilMask(): number {\r\n        return this._stencilState.stencilMask;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil mask\r\n     * @param mask defines the new stencil mask to use\r\n     */\r\n    public setStencilMask(mask: number): void {\r\n        this._stencilState.stencilMask = mask;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil function\r\n     * @returns a number defining the stencil function to use\r\n     */\r\n    public getStencilFunction(): number {\r\n        return this._stencilState.stencilFunc;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil reference value\r\n     * @returns a number defining the stencil reference value to use\r\n     */\r\n    public getStencilFunctionReference(): number {\r\n        return this._stencilState.stencilFuncRef;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil mask\r\n     * @returns a number defining the stencil mask to use\r\n     */\r\n    public getStencilFunctionMask(): number {\r\n        return this._stencilState.stencilFuncMask;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil function\r\n     * @param stencilFunc defines the new stencil function to use\r\n     */\r\n    public setStencilFunction(stencilFunc: number) {\r\n        this._stencilState.stencilFunc = stencilFunc;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil reference\r\n     * @param reference defines the new stencil reference to use\r\n     */\r\n    public setStencilFunctionReference(reference: number) {\r\n        this._stencilState.stencilFuncRef = reference;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil mask\r\n     * @param mask defines the new stencil mask to use\r\n     */\r\n    public setStencilFunctionMask(mask: number) {\r\n        this._stencilState.stencilFuncMask = mask;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil operation when stencil fails\r\n     * @returns a number defining stencil operation to use when stencil fails\r\n     */\r\n    public getStencilOperationFail(): number {\r\n        return this._stencilState.stencilOpStencilFail;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil operation when depth fails\r\n     * @returns a number defining stencil operation to use when depth fails\r\n     */\r\n    public getStencilOperationDepthFail(): number {\r\n        return this._stencilState.stencilOpDepthFail;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil operation when stencil passes\r\n     * @returns a number defining stencil operation to use when stencil passes\r\n     */\r\n    public getStencilOperationPass(): number {\r\n        return this._stencilState.stencilOpStencilDepthPass;\r\n    }\r\n\r\n    /**\r\n     * Sets the stencil operation to use when stencil fails\r\n     * @param operation defines the stencil operation to use when stencil fails\r\n     */\r\n    public setStencilOperationFail(operation: number): void {\r\n        this._stencilState.stencilOpStencilFail = operation;\r\n    }\r\n\r\n    /**\r\n     * Sets the stencil operation to use when depth fails\r\n     * @param operation defines the stencil operation to use when depth fails\r\n     */\r\n    public setStencilOperationDepthFail(operation: number): void {\r\n        this._stencilState.stencilOpDepthFail = operation;\r\n    }\r\n\r\n    /**\r\n     * Sets the stencil operation to use when stencil passes\r\n     * @param operation defines the stencil operation to use when stencil passes\r\n     */\r\n    public setStencilOperationPass(operation: number): void {\r\n        this._stencilState.stencilOpStencilDepthPass = operation;\r\n    }\r\n\r\n    /**\r\n     * Sets a boolean indicating if the dithering state is enabled or disabled\r\n     * @param value defines the dithering state\r\n     */\r\n    public setDitheringState(value: boolean): void {\r\n        if (value) {\r\n            this._gl.enable(this._gl.DITHER);\r\n        } else {\r\n            this._gl.disable(this._gl.DITHER);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a boolean indicating if the rasterizer state is enabled or disabled\r\n     * @param value defines the rasterizer state\r\n     */\r\n    public setRasterizerState(value: boolean): void {\r\n        if (value) {\r\n            this._gl.disable(this._gl.RASTERIZER_DISCARD);\r\n        } else {\r\n            this._gl.enable(this._gl.RASTERIZER_DISCARD);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current depth function\r\n     * @returns a number defining the depth function\r\n     */\r\n    public getDepthFunction(): Nullable<number> {\r\n        return this._depthCullingState.depthFunc;\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function\r\n     * @param depthFunc defines the function to use\r\n     */\r\n    public setDepthFunction(depthFunc: number) {\r\n        this._depthCullingState.depthFunc = depthFunc;\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to GREATER\r\n     */\r\n    public setDepthFunctionToGreater(): void {\r\n        this.setDepthFunction(Constants.GREATER);\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to GEQUAL\r\n     */\r\n    public setDepthFunctionToGreaterOrEqual(): void {\r\n        this.setDepthFunction(Constants.GEQUAL);\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to LESS\r\n     */\r\n    public setDepthFunctionToLess(): void {\r\n        this.setDepthFunction(Constants.LESS);\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to LEQUAL\r\n     */\r\n    public setDepthFunctionToLessOrEqual(): void {\r\n        this.setDepthFunction(Constants.LEQUAL);\r\n    }\r\n\r\n    private _cachedStencilBuffer: boolean;\r\n    private _cachedStencilFunction: number;\r\n    private _cachedStencilMask: number;\r\n    private _cachedStencilOperationPass: number;\r\n    private _cachedStencilOperationFail: number;\r\n    private _cachedStencilOperationDepthFail: number;\r\n    private _cachedStencilReference: number;\r\n\r\n    /**\r\n     * Caches the the state of the stencil buffer\r\n     */\r\n    public cacheStencilState() {\r\n        this._cachedStencilBuffer = this.getStencilBuffer();\r\n        this._cachedStencilFunction = this.getStencilFunction();\r\n        this._cachedStencilMask = this.getStencilMask();\r\n        this._cachedStencilOperationPass = this.getStencilOperationPass();\r\n        this._cachedStencilOperationFail = this.getStencilOperationFail();\r\n        this._cachedStencilOperationDepthFail = this.getStencilOperationDepthFail();\r\n        this._cachedStencilReference = this.getStencilFunctionReference();\r\n    }\r\n\r\n    /**\r\n     * Restores the state of the stencil buffer\r\n     */\r\n    public restoreStencilState() {\r\n        this.setStencilFunction(this._cachedStencilFunction);\r\n        this.setStencilMask(this._cachedStencilMask);\r\n        this.setStencilBuffer(this._cachedStencilBuffer);\r\n        this.setStencilOperationPass(this._cachedStencilOperationPass);\r\n        this.setStencilOperationFail(this._cachedStencilOperationFail);\r\n        this.setStencilOperationDepthFail(this._cachedStencilOperationDepthFail);\r\n        this.setStencilFunctionReference(this._cachedStencilReference);\r\n    }\r\n\r\n    /**\r\n     * Directly set the WebGL Viewport\r\n     * @param x defines the x coordinate of the viewport (in screen space)\r\n     * @param y defines the y coordinate of the viewport (in screen space)\r\n     * @param width defines the width of the viewport (in screen space)\r\n     * @param height defines the height of the viewport (in screen space)\r\n     * @returns the current viewport Object (if any) that is being replaced by this call. You can restore this viewport later on to go back to the original state\r\n     */\r\n    public setDirectViewport(x: number, y: number, width: number, height: number): Nullable<IViewportLike> {\r\n        const currentViewport = this._cachedViewport;\r\n        this._cachedViewport = null;\r\n\r\n        this._viewport(x, y, width, height);\r\n\r\n        return currentViewport;\r\n    }\r\n\r\n    /**\r\n     * Executes a scissor clear (ie. a clear on a specific portion of the screen)\r\n     * @param x defines the x-coordinate of the bottom left corner of the clear rectangle\r\n     * @param y defines the y-coordinate of the corner of the clear rectangle\r\n     * @param width defines the width of the clear rectangle\r\n     * @param height defines the height of the clear rectangle\r\n     * @param clearColor defines the clear color\r\n     */\r\n    public scissorClear(x: number, y: number, width: number, height: number, clearColor: IColor4Like): void {\r\n        this.enableScissor(x, y, width, height);\r\n        this.clear(clearColor, true, true, true);\r\n        this.disableScissor();\r\n    }\r\n\r\n    /**\r\n     * Enable scissor test on a specific rectangle (ie. render will only be executed on a specific portion of the screen)\r\n     * @param x defines the x-coordinate of the bottom left corner of the clear rectangle\r\n     * @param y defines the y-coordinate of the corner of the clear rectangle\r\n     * @param width defines the width of the clear rectangle\r\n     * @param height defines the height of the clear rectangle\r\n     */\r\n    public enableScissor(x: number, y: number, width: number, height: number): void {\r\n        const gl = this._gl;\r\n\r\n        // Change state\r\n        gl.enable(gl.SCISSOR_TEST);\r\n        gl.scissor(x, y, width, height);\r\n    }\r\n\r\n    /**\r\n     * Disable previously set scissor test rectangle\r\n     */\r\n    public disableScissor() {\r\n        const gl = this._gl;\r\n\r\n        gl.disable(gl.SCISSOR_TEST);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _reportDrawCall(numDrawCalls = 1) {\r\n        this._drawCalls.addCount(numDrawCalls, false);\r\n    }\r\n\r\n    /**\r\n     * Initializes a webVR display and starts listening to display change events\r\n     * The onVRDisplayChangedObservable will be notified upon these changes\r\n     * @returns The onVRDisplayChangedObservable\r\n     */\r\n    public initWebVR(): Observable<IDisplayChangedEventArgs> {\r\n        throw _WarnImport(\"WebVRCamera\");\r\n    }\r\n\r\n    /** @internal */\r\n    public _prepareVRComponent() {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _connectVREvents(canvas?: HTMLCanvasElement, document?: any) {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n\r\n    /** @internal */\r\n    public _submitVRFrame() {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n    /**\r\n     * Call this function to leave webVR mode\r\n     * Will do nothing if webVR is not supported or if there is no webVR device\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/webVRCamera\r\n     */\r\n    public disableVR() {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the system is in VR mode and is presenting\r\n     * @returns true if VR mode is engaged\r\n     */\r\n    public isVRPresenting() {\r\n        return false;\r\n    }\r\n\r\n    /** @internal */\r\n    public _requestVRFrame() {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadFileAsync(url: string, offlineProvider?: IOfflineProvider, useArrayBuffer?: boolean): Promise<string | ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this._loadFile(\r\n                url,\r\n                (data) => {\r\n                    resolve(data);\r\n                },\r\n                undefined,\r\n                offlineProvider,\r\n                useArrayBuffer,\r\n                (request, exception) => {\r\n                    reject(exception);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the source code of the vertex shader associated with a specific webGL program\r\n     * @param program defines the program to use\r\n     * @returns a string containing the source code of the vertex shader associated with the program\r\n     */\r\n    public getVertexShaderSource(program: WebGLProgram): Nullable<string> {\r\n        const shaders = this._gl.getAttachedShaders(program);\r\n\r\n        if (!shaders) {\r\n            return null;\r\n        }\r\n\r\n        return this._gl.getShaderSource(shaders[0]);\r\n    }\r\n\r\n    /**\r\n     * Gets the source code of the fragment shader associated with a specific webGL program\r\n     * @param program defines the program to use\r\n     * @returns a string containing the source code of the fragment shader associated with the program\r\n     */\r\n    public getFragmentShaderSource(program: WebGLProgram): Nullable<string> {\r\n        const shaders = this._gl.getAttachedShaders(program);\r\n\r\n        if (!shaders) {\r\n            return null;\r\n        }\r\n\r\n        return this._gl.getShaderSource(shaders[1]);\r\n    }\r\n\r\n    /**\r\n     * Sets a depth stencil texture from a render target to the according uniform.\r\n     * @param channel The texture channel\r\n     * @param uniform The uniform to set\r\n     * @param texture The render target texture containing the depth stencil texture to apply\r\n     * @param name The texture name\r\n     */\r\n    public setDepthStencilTexture(channel: number, uniform: Nullable<WebGLUniformLocation>, texture: Nullable<RenderTargetTexture>, name?: string): void {\r\n        if (channel === undefined) {\r\n            return;\r\n        }\r\n\r\n        if (uniform) {\r\n            this._boundUniforms[channel] = uniform;\r\n        }\r\n\r\n        if (!texture || !texture.depthStencilTexture) {\r\n            this._setTexture(channel, null, undefined, undefined, name);\r\n        } else {\r\n            this._setTexture(channel, texture, false, true, name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a texture to the webGL context from a postprocess\r\n     * @param channel defines the channel to use\r\n     * @param postProcess defines the source postprocess\r\n     * @param name name of the channel\r\n     */\r\n    public setTextureFromPostProcess(channel: number, postProcess: Nullable<PostProcess>, name: string): void {\r\n        let postProcessInput = null;\r\n        if (postProcess) {\r\n            if (postProcess._textures.data[postProcess._currentRenderTextureInd]) {\r\n                postProcessInput = postProcess._textures.data[postProcess._currentRenderTextureInd];\r\n            } else if (postProcess._forcedOutputTexture) {\r\n                postProcessInput = postProcess._forcedOutputTexture;\r\n            }\r\n        }\r\n\r\n        this._bindTexture(channel, postProcessInput?.texture ?? null, name);\r\n    }\r\n\r\n    /**\r\n     * Binds the output of the passed in post process to the texture channel specified\r\n     * @param channel The channel the texture should be bound to\r\n     * @param postProcess The post process which's output should be bound\r\n     * @param name name of the channel\r\n     */\r\n    public setTextureFromPostProcessOutput(channel: number, postProcess: Nullable<PostProcess>, name: string): void {\r\n        this._bindTexture(channel, postProcess?._outputTexture?.texture ?? null, name);\r\n    }\r\n\r\n    protected _rebuildBuffers(): void {\r\n        // Index / Vertex\r\n        for (const scene of this.scenes) {\r\n            scene.resetCachedMaterial();\r\n            scene._rebuildGeometries();\r\n            scene._rebuildTextures();\r\n        }\r\n\r\n        for (const scene of this._virtualScenes) {\r\n            scene.resetCachedMaterial();\r\n            scene._rebuildGeometries();\r\n            scene._rebuildTextures();\r\n        }\r\n\r\n        super._rebuildBuffers();\r\n    }\r\n\r\n    /** @internal */\r\n    public _renderFrame() {\r\n        for (let index = 0; index < this._activeRenderLoops.length; index++) {\r\n            const renderFunction = this._activeRenderLoops[index];\r\n\r\n            renderFunction();\r\n        }\r\n    }\r\n\r\n    public _renderLoop(): void {\r\n        if (!this._contextWasLost) {\r\n            let shouldRender = true;\r\n            if (!this.renderEvenInBackground && this._windowIsBackground) {\r\n                shouldRender = false;\r\n            }\r\n\r\n            if (shouldRender) {\r\n                // Start new frame\r\n                this.beginFrame();\r\n\r\n                // Child canvases\r\n                if (!this._renderViews()) {\r\n                    // Main frame\r\n                    this._renderFrame();\r\n                }\r\n\r\n                // Present\r\n                this.endFrame();\r\n            }\r\n        }\r\n\r\n        if (this._activeRenderLoops.length > 0) {\r\n            // Register new frame\r\n            if (this.customAnimationFrameRequester) {\r\n                this.customAnimationFrameRequester.requestID = this._queueNewFrame(\r\n                    this.customAnimationFrameRequester.renderFunction || this._boundRenderFunction,\r\n                    this.customAnimationFrameRequester\r\n                );\r\n                this._frameHandler = this.customAnimationFrameRequester.requestID;\r\n            } else if (this.isVRPresenting()) {\r\n                this._requestVRFrame();\r\n            } else {\r\n                this._frameHandler = this._queueNewFrame(this._boundRenderFunction, this.getHostWindow());\r\n            }\r\n        } else {\r\n            this._renderingQueueLaunched = false;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _renderViews() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Toggle full screen mode\r\n     * @param requestPointerLock defines if a pointer lock should be requested from the user\r\n     */\r\n    public switchFullscreen(requestPointerLock: boolean): void {\r\n        if (this.isFullscreen) {\r\n            this.exitFullscreen();\r\n        } else {\r\n            this.enterFullscreen(requestPointerLock);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enters full screen mode\r\n     * @param requestPointerLock defines if a pointer lock should be requested from the user\r\n     */\r\n    public enterFullscreen(requestPointerLock: boolean): void {\r\n        if (!this.isFullscreen) {\r\n            this._pointerLockRequested = requestPointerLock;\r\n            if (this._renderingCanvas) {\r\n                Engine._RequestFullscreen(this._renderingCanvas);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exits full screen mode\r\n     */\r\n    public exitFullscreen(): void {\r\n        if (this.isFullscreen) {\r\n            Engine._ExitFullscreen();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enters Pointerlock mode\r\n     */\r\n    public enterPointerlock(): void {\r\n        if (this._renderingCanvas) {\r\n            Engine._RequestPointerlock(this._renderingCanvas);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exits Pointerlock mode\r\n     */\r\n    public exitPointerlock(): void {\r\n        Engine._ExitPointerlock();\r\n    }\r\n\r\n    /**\r\n     * Begin a new frame\r\n     */\r\n    public beginFrame(): void {\r\n        this._measureFps();\r\n\r\n        this.onBeginFrameObservable.notifyObservers(this);\r\n        super.beginFrame();\r\n    }\r\n\r\n    /**\r\n     * End the current frame\r\n     */\r\n    public endFrame(): void {\r\n        super.endFrame();\r\n        this._submitVRFrame();\r\n\r\n        this.onEndFrameObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Resize the view according to the canvas' size\r\n     * @param forceSetSize true to force setting the sizes of the underlying canvas\r\n     */\r\n    public resize(forceSetSize = false): void {\r\n        // We're not resizing the size of the canvas while in VR mode & presenting\r\n        if (this.isVRPresenting()) {\r\n            return;\r\n        }\r\n\r\n        super.resize(forceSetSize);\r\n    }\r\n\r\n    /**\r\n     * Force a specific size of the canvas\r\n     * @param width defines the new canvas' width\r\n     * @param height defines the new canvas' height\r\n     * @param forceSetSize true to force setting the sizes of the underlying canvas\r\n     * @returns true if the size was changed\r\n     */\r\n    public setSize(width: number, height: number, forceSetSize = false): boolean {\r\n        if (!this._renderingCanvas) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.setSize(width, height, forceSetSize)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.scenes) {\r\n            for (let index = 0; index < this.scenes.length; index++) {\r\n                const scene = this.scenes[index];\r\n\r\n                for (let camIndex = 0; camIndex < scene.cameras.length; camIndex++) {\r\n                    const cam = scene.cameras[camIndex];\r\n\r\n                    cam._currentRenderId = 0;\r\n                }\r\n            }\r\n\r\n            if (this.onResizeObservable.hasObservers()) {\r\n                this.onResizeObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public _deletePipelineContext(pipelineContext: IPipelineContext): void {\r\n        const webGLPipelineContext = pipelineContext as WebGLPipelineContext;\r\n        if (webGLPipelineContext && webGLPipelineContext.program) {\r\n            if (webGLPipelineContext.transformFeedback) {\r\n                this.deleteTransformFeedback(webGLPipelineContext.transformFeedback);\r\n                webGLPipelineContext.transformFeedback = null;\r\n            }\r\n        }\r\n        super._deletePipelineContext(pipelineContext);\r\n    }\r\n\r\n    public createShaderProgram(\r\n        pipelineContext: IPipelineContext,\r\n        vertexCode: string,\r\n        fragmentCode: string,\r\n        defines: Nullable<string>,\r\n        context?: WebGLRenderingContext,\r\n        transformFeedbackVaryings: Nullable<string[]> = null\r\n    ): WebGLProgram {\r\n        context = context || this._gl;\r\n\r\n        this.onBeforeShaderCompilationObservable.notifyObservers(this);\r\n\r\n        const program = super.createShaderProgram(pipelineContext, vertexCode, fragmentCode, defines, context, transformFeedbackVaryings);\r\n        this.onAfterShaderCompilationObservable.notifyObservers(this);\r\n\r\n        return program;\r\n    }\r\n\r\n    protected _createShaderProgram(\r\n        pipelineContext: WebGLPipelineContext,\r\n        vertexShader: WebGLShader,\r\n        fragmentShader: WebGLShader,\r\n        context: WebGLRenderingContext,\r\n        transformFeedbackVaryings: Nullable<string[]> = null\r\n    ): WebGLProgram {\r\n        const shaderProgram = context.createProgram();\r\n        pipelineContext.program = shaderProgram;\r\n\r\n        if (!shaderProgram) {\r\n            throw new Error(\"Unable to create program\");\r\n        }\r\n\r\n        context.attachShader(shaderProgram, vertexShader);\r\n        context.attachShader(shaderProgram, fragmentShader);\r\n\r\n        if (this.webGLVersion > 1 && transformFeedbackVaryings) {\r\n            const transformFeedback = this.createTransformFeedback();\r\n\r\n            this.bindTransformFeedback(transformFeedback);\r\n            this.setTranformFeedbackVaryings(shaderProgram, transformFeedbackVaryings);\r\n            pipelineContext.transformFeedback = transformFeedback;\r\n        }\r\n\r\n        context.linkProgram(shaderProgram);\r\n\r\n        if (this.webGLVersion > 1 && transformFeedbackVaryings) {\r\n            this.bindTransformFeedback(null);\r\n        }\r\n\r\n        pipelineContext.context = context;\r\n        pipelineContext.vertexShader = vertexShader;\r\n        pipelineContext.fragmentShader = fragmentShader;\r\n\r\n        if (!pipelineContext.isParallelCompiled) {\r\n            this._finalizePipelineContext(pipelineContext);\r\n        }\r\n\r\n        return shaderProgram;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _releaseTexture(texture: InternalTexture): void {\r\n        super._releaseTexture(texture);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _releaseRenderTargetWrapper(rtWrapper: RenderTargetWrapper): void {\r\n        super._releaseRenderTargetWrapper(rtWrapper);\r\n\r\n        // Set output texture of post process to null if the framebuffer has been released/disposed\r\n        this.scenes.forEach((scene) => {\r\n            scene.postProcesses.forEach((postProcess) => {\r\n                if (postProcess._outputTexture === rtWrapper) {\r\n                    postProcess._outputTexture = null;\r\n                }\r\n            });\r\n            scene.cameras.forEach((camera) => {\r\n                camera._postProcesses.forEach((postProcess) => {\r\n                    if (postProcess) {\r\n                        if (postProcess._outputTexture === rtWrapper) {\r\n                            postProcess._outputTexture = null;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected static _RenderPassIdCounter = 0;\r\n    /**\r\n     * Gets or sets the current render pass id\r\n     */\r\n    public currentRenderPassId = Constants.RENDERPASS_MAIN;\r\n\r\n    private _renderPassNames: string[] = [\"main\"];\r\n    /**\r\n     * Gets the names of the render passes that are currently created\r\n     * @returns list of the render pass names\r\n     */\r\n    public getRenderPassNames(): string[] {\r\n        return this._renderPassNames;\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the current render pass\r\n     * @returns name of the current render pass\r\n     */\r\n    public getCurrentRenderPassName(): string {\r\n        return this._renderPassNames[this.currentRenderPassId];\r\n    }\r\n\r\n    /**\r\n     * Creates a render pass id\r\n     * @param name Name of the render pass (for debug purpose only)\r\n     * @returns the id of the new render pass\r\n     */\r\n    public createRenderPassId(name?: string) {\r\n        // Note: render pass id == 0 is always for the main render pass\r\n        const id = ++Engine._RenderPassIdCounter;\r\n        this._renderPassNames[id] = name ?? \"NONAME\";\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Releases a render pass id\r\n     * @param id id of the render pass to release\r\n     */\r\n    public releaseRenderPassId(id: number): void {\r\n        this._renderPassNames[id] = undefined as any;\r\n\r\n        for (let s = 0; s < this.scenes.length; ++s) {\r\n            const scene = this.scenes[s];\r\n            for (let m = 0; m < scene.meshes.length; ++m) {\r\n                const mesh = scene.meshes[m];\r\n                if (mesh.subMeshes) {\r\n                    for (let b = 0; b < mesh.subMeshes.length; ++b) {\r\n                        const subMesh = mesh.subMeshes[b];\r\n                        subMesh._removeDrawWrapper(id);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Rescales a texture\r\n     * @param source input texture\r\n     * @param destination destination texture\r\n     * @param scene scene to use to render the resize\r\n     * @param internalFormat format to use when resizing\r\n     * @param onComplete callback to be called when resize has completed\r\n     */\r\n    public _rescaleTexture(source: InternalTexture, destination: InternalTexture, scene: Nullable<any>, internalFormat: number, onComplete: () => void): void {\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.LINEAR);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.LINEAR);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_S, this._gl.CLAMP_TO_EDGE);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_T, this._gl.CLAMP_TO_EDGE);\r\n\r\n        const rtt = this.createRenderTargetTexture(\r\n            {\r\n                width: destination.width,\r\n                height: destination.height,\r\n            },\r\n            {\r\n                generateMipMaps: false,\r\n                type: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n                samplingMode: Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n                generateDepthBuffer: false,\r\n                generateStencilBuffer: false,\r\n            }\r\n        );\r\n\r\n        if (!this._rescalePostProcess && Engine._RescalePostProcessFactory) {\r\n            this._rescalePostProcess = Engine._RescalePostProcessFactory(this);\r\n        }\r\n\r\n        if (this._rescalePostProcess) {\r\n            this._rescalePostProcess.externalTextureSamplerBinding = true;\r\n            this._rescalePostProcess.getEffect().executeWhenCompiled(() => {\r\n                this._rescalePostProcess!.onApply = function (effect) {\r\n                    effect._bindTexture(\"textureSampler\", source);\r\n                };\r\n\r\n                let hostingScene: Scene = scene;\r\n\r\n                if (!hostingScene) {\r\n                    hostingScene = this.scenes[this.scenes.length - 1];\r\n                }\r\n                hostingScene.postProcessManager.directRender([this._rescalePostProcess!], rtt, true);\r\n\r\n                this._bindTextureDirectly(this._gl.TEXTURE_2D, destination, true);\r\n                this._gl.copyTexImage2D(this._gl.TEXTURE_2D, 0, internalFormat, 0, 0, destination.width, destination.height, 0);\r\n\r\n                this.unBindFramebuffer(rtt);\r\n                rtt.dispose();\r\n\r\n                if (onComplete) {\r\n                    onComplete();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // FPS\r\n\r\n    /**\r\n     * Gets the current framerate\r\n     * @returns a number representing the framerate\r\n     */\r\n    public getFps(): number {\r\n        return this._fps;\r\n    }\r\n\r\n    /**\r\n     * Gets the time spent between current and previous frame\r\n     * @returns a number representing the delta time in ms\r\n     */\r\n    public getDeltaTime(): number {\r\n        return this._deltaTime;\r\n    }\r\n\r\n    private _measureFps(): void {\r\n        this._performanceMonitor.sampleFrame();\r\n        this._fps = this._performanceMonitor.averageFPS;\r\n        this._deltaTime = this._performanceMonitor.instantaneousFrameTime || 0;\r\n    }\r\n\r\n    /**\r\n     * Wraps an external web gl texture in a Babylon texture.\r\n     * @param texture defines the external texture\r\n     * @returns the babylon internal texture\r\n     */\r\n    public wrapWebGLTexture(texture: WebGLTexture): InternalTexture {\r\n        const hardwareTexture = new WebGLHardwareTexture(texture, this._gl);\r\n        const internalTexture = new InternalTexture(this, InternalTextureSource.Unknown, true);\r\n        internalTexture._hardwareTexture = hardwareTexture;\r\n        internalTexture.isReady = true;\r\n        return internalTexture;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _uploadImageToTexture(texture: InternalTexture, image: HTMLImageElement | ImageBitmap, faceIndex: number = 0, lod: number = 0) {\r\n        const gl = this._gl;\r\n\r\n        const textureType = this._getWebGLTextureType(texture.type);\r\n        const format = this._getInternalFormat(texture.format);\r\n        const internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, format);\r\n\r\n        const bindTarget = texture.isCube ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;\r\n\r\n        this._bindTextureDirectly(bindTarget, texture, true);\r\n        this._unpackFlipY(texture.invertY);\r\n\r\n        let target = gl.TEXTURE_2D;\r\n        if (texture.isCube) {\r\n            target = gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex;\r\n        }\r\n\r\n        gl.texImage2D(target, lod, internalFormat, format, textureType, image);\r\n        this._bindTextureDirectly(bindTarget, null, true);\r\n    }\r\n\r\n    /**\r\n     * Updates a depth texture Comparison Mode and Function.\r\n     * If the comparison Function is equal to 0, the mode will be set to none.\r\n     * Otherwise, this only works in webgl 2 and requires a shadow sampler in the shader.\r\n     * @param texture The texture to set the comparison function for\r\n     * @param comparisonFunction The comparison function to set, 0 if no comparison required\r\n     */\r\n    public updateTextureComparisonFunction(texture: InternalTexture, comparisonFunction: number): void {\r\n        if (this.webGLVersion === 1) {\r\n            Logger.Error(\"WebGL 1 does not support texture comparison.\");\r\n            return;\r\n        }\r\n\r\n        const gl = this._gl;\r\n\r\n        if (texture.isCube) {\r\n            this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, texture, true);\r\n\r\n            if (comparisonFunction === 0) {\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, Constants.LEQUAL);\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.NONE);\r\n            } else {\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n            }\r\n\r\n            this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, null);\r\n        } else {\r\n            this._bindTextureDirectly(this._gl.TEXTURE_2D, texture, true);\r\n\r\n            if (comparisonFunction === 0) {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, Constants.LEQUAL);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.NONE);\r\n            } else {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n            }\r\n\r\n            this._bindTextureDirectly(this._gl.TEXTURE_2D, null);\r\n        }\r\n\r\n        texture._comparisonFunction = comparisonFunction;\r\n    }\r\n\r\n    /**\r\n     * Creates a webGL buffer to use with instantiation\r\n     * @param capacity defines the size of the buffer\r\n     * @returns the webGL buffer\r\n     */\r\n    public createInstancesBuffer(capacity: number): DataBuffer {\r\n        const buffer = this._gl.createBuffer();\r\n\r\n        if (!buffer) {\r\n            throw new Error(\"Unable to create instance buffer\");\r\n        }\r\n\r\n        const result = new WebGLDataBuffer(buffer);\r\n        result.capacity = capacity;\r\n\r\n        this.bindArrayBuffer(result);\r\n        this._gl.bufferData(this._gl.ARRAY_BUFFER, capacity, this._gl.DYNAMIC_DRAW);\r\n\r\n        result.references = 1;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Delete a webGL buffer used with instantiation\r\n     * @param buffer defines the webGL buffer to delete\r\n     */\r\n    public deleteInstancesBuffer(buffer: WebGLBuffer): void {\r\n        this._gl.deleteBuffer(buffer);\r\n    }\r\n\r\n    private _clientWaitAsync(sync: WebGLSync, flags = 0, intervalms = 10): Promise<void> {\r\n        const gl = <WebGL2RenderingContext>(this._gl as any);\r\n        return new Promise((resolve, reject) => {\r\n            const check = () => {\r\n                const res = gl.clientWaitSync(sync, flags, 0);\r\n                if (res == gl.WAIT_FAILED) {\r\n                    reject();\r\n                    return;\r\n                }\r\n                if (res == gl.TIMEOUT_EXPIRED) {\r\n                    setTimeout(check, intervalms);\r\n                    return;\r\n                }\r\n                resolve();\r\n            };\r\n\r\n            check();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _readPixelsAsync(x: number, y: number, w: number, h: number, format: number, type: number, outputBuffer: ArrayBufferView) {\r\n        if (this._webGLVersion < 2) {\r\n            throw new Error(\"_readPixelsAsync only work on WebGL2+\");\r\n        }\r\n\r\n        const gl = <WebGL2RenderingContext>(this._gl as any);\r\n        const buf = gl.createBuffer();\r\n        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\r\n        gl.bufferData(gl.PIXEL_PACK_BUFFER, outputBuffer.byteLength, gl.STREAM_READ);\r\n        gl.readPixels(x, y, w, h, format, type, 0);\r\n        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\r\n\r\n        const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\r\n        if (!sync) {\r\n            return null;\r\n        }\r\n\r\n        gl.flush();\r\n\r\n        return this._clientWaitAsync(sync, 0, 10).then(() => {\r\n            gl.deleteSync(sync);\r\n\r\n            gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\r\n            gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, outputBuffer);\r\n            gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\r\n            gl.deleteBuffer(buf);\r\n\r\n            return outputBuffer;\r\n        });\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.hideLoadingUI();\r\n\r\n        this.onNewSceneAddedObservable.clear();\r\n\r\n        // Release postProcesses\r\n        while (this.postProcesses.length) {\r\n            this.postProcesses[0].dispose();\r\n        }\r\n\r\n        // Rescale PP\r\n        if (this._rescalePostProcess) {\r\n            this._rescalePostProcess.dispose();\r\n        }\r\n\r\n        // Release scenes\r\n        while (this.scenes.length) {\r\n            this.scenes[0].dispose();\r\n        }\r\n\r\n        while (this._virtualScenes.length) {\r\n            this._virtualScenes[0].dispose();\r\n        }\r\n\r\n        // Release audio engine\r\n        if (Engine.Instances.length === 1 && Engine.audioEngine) {\r\n            Engine.audioEngine.dispose();\r\n            Engine.audioEngine = null;\r\n        }\r\n\r\n        //WebVR\r\n        this.disableVR();\r\n\r\n        // Events\r\n        const hostWindow = this.getHostWindow(); // it calls IsWindowObjectExist()\r\n        if (hostWindow && typeof hostWindow.removeEventListener === \"function\") {\r\n            hostWindow.removeEventListener(\"blur\", this._onBlur);\r\n            hostWindow.removeEventListener(\"focus\", this._onFocus);\r\n        }\r\n\r\n        if (this._renderingCanvas) {\r\n            this._renderingCanvas.removeEventListener(\"focus\", this._onCanvasFocus);\r\n            this._renderingCanvas.removeEventListener(\"blur\", this._onCanvasBlur);\r\n            this._renderingCanvas.removeEventListener(\"pointerout\", this._onCanvasPointerOut);\r\n            this._renderingCanvas.removeEventListener(\"contextmenu\", this._onCanvasContextMenu);\r\n        }\r\n\r\n        if (IsDocumentAvailable()) {\r\n            document.removeEventListener(\"fullscreenchange\", this._onFullscreenChange);\r\n            document.removeEventListener(\"mozfullscreenchange\", this._onFullscreenChange);\r\n            document.removeEventListener(\"webkitfullscreenchange\", this._onFullscreenChange);\r\n            document.removeEventListener(\"msfullscreenchange\", this._onFullscreenChange);\r\n            document.removeEventListener(\"pointerlockchange\", this._onPointerLockChange);\r\n            document.removeEventListener(\"mspointerlockchange\", this._onPointerLockChange);\r\n            document.removeEventListener(\"mozpointerlockchange\", this._onPointerLockChange);\r\n            document.removeEventListener(\"webkitpointerlockchange\", this._onPointerLockChange);\r\n        }\r\n\r\n        super.dispose();\r\n\r\n        // Remove from Instances\r\n        const index = Engine.Instances.indexOf(this);\r\n\r\n        if (index >= 0) {\r\n            Engine.Instances.splice(index, 1);\r\n        }\r\n\r\n        // Observables\r\n        this.onResizeObservable.clear();\r\n        this.onCanvasBlurObservable.clear();\r\n        this.onCanvasFocusObservable.clear();\r\n        this.onCanvasPointerOutObservable.clear();\r\n        this.onBeginFrameObservable.clear();\r\n        this.onEndFrameObservable.clear();\r\n    }\r\n\r\n    private _disableTouchAction(): void {\r\n        if (!this._renderingCanvas || !this._renderingCanvas.setAttribute) {\r\n            return;\r\n        }\r\n\r\n        this._renderingCanvas.setAttribute(\"touch-action\", \"none\");\r\n        this._renderingCanvas.style.touchAction = \"none\";\r\n        (this._renderingCanvas.style as any).webkitTapHighlightColor = \"transparent\";\r\n    }\r\n\r\n    // Loading screen\r\n\r\n    /**\r\n     * Display the loading screen\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n     */\r\n    public displayLoadingUI(): void {\r\n        if (!IsWindowObjectExist()) {\r\n            return;\r\n        }\r\n        const loadingScreen = this.loadingScreen;\r\n        if (loadingScreen) {\r\n            loadingScreen.displayLoadingUI();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hide the loading screen\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n     */\r\n    public hideLoadingUI(): void {\r\n        if (!IsWindowObjectExist()) {\r\n            return;\r\n        }\r\n        const loadingScreen = this._loadingScreen;\r\n        if (loadingScreen) {\r\n            loadingScreen.hideLoadingUI();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current loading screen object\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n     */\r\n    public get loadingScreen(): ILoadingScreen {\r\n        if (!this._loadingScreen && this._renderingCanvas) {\r\n            this._loadingScreen = Engine.DefaultLoadingScreenFactory(this._renderingCanvas);\r\n        }\r\n        return this._loadingScreen;\r\n    }\r\n\r\n    /**\r\n     * Sets the current loading screen object\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n     */\r\n    public set loadingScreen(loadingScreen: ILoadingScreen) {\r\n        this._loadingScreen = loadingScreen;\r\n    }\r\n\r\n    /**\r\n     * Sets the current loading screen text\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n     */\r\n    public set loadingUIText(text: string) {\r\n        this.loadingScreen.loadingUIText = text;\r\n    }\r\n\r\n    /**\r\n     * Sets the current loading screen background color\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n     */\r\n    public set loadingUIBackgroundColor(color: string) {\r\n        this.loadingScreen.loadingUIBackgroundColor = color;\r\n    }\r\n\r\n    /**\r\n     * creates and returns a new video element\r\n     * @param constraints video constraints\r\n     * @returns video element\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public createVideoElement(constraints: MediaTrackConstraints): any {\r\n        return document.createElement(\"video\");\r\n    }\r\n\r\n    /** Pointerlock and fullscreen */\r\n\r\n    /**\r\n     * Ask the browser to promote the current element to pointerlock mode\r\n     * @param element defines the DOM element to promote\r\n     */\r\n    static _RequestPointerlock(element: HTMLElement): void {\r\n        if (element.requestPointerLock) {\r\n            element.requestPointerLock();\r\n            element.focus();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Asks the browser to exit pointerlock mode\r\n     */\r\n    static _ExitPointerlock(): void {\r\n        if (document.exitPointerLock) {\r\n            document.exitPointerLock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ask the browser to promote the current element to fullscreen rendering mode\r\n     * @param element defines the DOM element to promote\r\n     */\r\n    static _RequestFullscreen(element: HTMLElement): void {\r\n        const requestFunction = element.requestFullscreen || (<any>element).webkitRequestFullscreen;\r\n        if (!requestFunction) {\r\n            return;\r\n        }\r\n        requestFunction.call(element);\r\n    }\r\n\r\n    /**\r\n     * Asks the browser to exit fullscreen mode\r\n     */\r\n    static _ExitFullscreen(): void {\r\n        const anyDoc = document as any;\r\n\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen();\r\n        } else if (anyDoc.webkitCancelFullScreen) {\r\n            anyDoc.webkitCancelFullScreen();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get Font size information\r\n     * @param font font name\r\n     * @returns an object containing ascent, height and descent\r\n     */\r\n    public getFontOffset(font: string): { ascent: number; height: number; descent: number } {\r\n        const text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.setAttribute(\"style\", `font: ${font} !important`);\r\n\r\n        const block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        const div = document.createElement(\"div\");\r\n        div.style.whiteSpace = \"nowrap\";\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        let fontAscent = 0;\r\n        let fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        return { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}