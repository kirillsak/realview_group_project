{"ast":null,"code":"/* eslint-disable @typescript-eslint/naming-convention */\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { TmpVectors } from \"./math.js\";\n// https://dickyjim.wordpress.com/2013/09/04/spherical-harmonics-for-beginners/\n// http://silviojemma.com/public/papers/lighting/spherical-harmonic-lighting.pdf\n// https://www.ppsloan.org/publications/StupidSH36.pdf\n// http://cseweb.ucsd.edu/~ravir/papers/envmap/envmap.pdf\n// https://www.ppsloan.org/publications/SHJCGT.pdf\n// https://www.ppsloan.org/publications/shdering.pdf\n// https://google.github.io/filament/Filament.md.html#annex/sphericalharmonics\n// https://patapom.com/blog/SHPortal/\n// https://imdoingitwrong.wordpress.com/2011/04/14/spherical-harmonics-wtf/\n// Using real SH basis:\n//  m>0             m   m\n// y   = sqrt(2) * K * P * cos(m*phi) * cos(theta)\n//  l               l   l\n//\n//  m<0             m   |m|\n// y   = sqrt(2) * K * P * sin(m*phi) * cos(theta)\n//  l               l   l\n//\n//  m=0   0   0\n// y   = K * P * trigono terms\n//  l     l   l\n//\n//  m       (2l + 1)(l - |m|)!\n// K = sqrt(------------------)\n//  l           4pi(l + |m|)!\n//\n// and P by recursion:\n//\n// P00(x) = 1\n// P01(x) = x\n// Pll(x) = (-1^l)(2l - 1)!!(1-x*x)^(1/2)\n//          ((2l - 1)x[Pl-1/m]-(l + m - 1)[Pl-2/m])\n// Plm(x) = ---------------------------------------\n//                         l - m\n// Leaving the trigonometric terms aside we can precompute the constants to :\nconst SH3ylmBasisConstants = [Math.sqrt(1 / (4 * Math.PI)), -Math.sqrt(3 / (4 * Math.PI)), Math.sqrt(3 / (4 * Math.PI)), -Math.sqrt(3 / (4 * Math.PI)), Math.sqrt(15 / (4 * Math.PI)), -Math.sqrt(15 / (4 * Math.PI)), Math.sqrt(5 / (16 * Math.PI)), -Math.sqrt(15 / (4 * Math.PI)), Math.sqrt(15 / (16 * Math.PI)) // l22\n];\n// cm = cos(m * phi)\n// sm = sin(m * phi)\n// {x,y,z} = {cos(phi)sin(theta), sin(phi)sin(theta), cos(theta)}\n// By recursion on using trigo identities:\nconst SH3ylmBasisTrigonometricTerms = [() => 1, direction => direction.y, direction => direction.z, direction => direction.x, direction => direction.x * direction.y, direction => direction.y * direction.z, direction => 3 * direction.z * direction.z - 1, direction => direction.x * direction.z, direction => direction.x * direction.x - direction.y * direction.y // l22\n];\n// Wrap the full compute\nconst applySH3 = (lm, direction) => {\n  return SH3ylmBasisConstants[lm] * SH3ylmBasisTrigonometricTerms[lm](direction);\n};\n// Derived from the integration of the a kernel convolution to SH.\n// Great explanation here: https://patapom.com/blog/SHPortal/#about-distant-radiance-and-irradiance-environments\nconst SHCosKernelConvolution = [Math.PI, 2 * Math.PI / 3, 2 * Math.PI / 3, 2 * Math.PI / 3, Math.PI / 4, Math.PI / 4, Math.PI / 4, Math.PI / 4, Math.PI / 4];\n/**\n * Class representing spherical harmonics coefficients to the 3rd degree\n */\nexport class SphericalHarmonics {\n  constructor() {\n    /**\n     * Defines whether or not the harmonics have been prescaled for rendering.\n     */\n    this.preScaled = false;\n    /**\n     * The l0,0 coefficients of the spherical harmonics\n     */\n    this.l00 = Vector3.Zero();\n    /**\n     * The l1,-1 coefficients of the spherical harmonics\n     */\n    this.l1_1 = Vector3.Zero();\n    /**\n     * The l1,0 coefficients of the spherical harmonics\n     */\n    this.l10 = Vector3.Zero();\n    /**\n     * The l1,1 coefficients of the spherical harmonics\n     */\n    this.l11 = Vector3.Zero();\n    /**\n     * The l2,-2 coefficients of the spherical harmonics\n     */\n    this.l2_2 = Vector3.Zero();\n    /**\n     * The l2,-1 coefficients of the spherical harmonics\n     */\n    this.l2_1 = Vector3.Zero();\n    /**\n     * The l2,0 coefficients of the spherical harmonics\n     */\n    this.l20 = Vector3.Zero();\n    /**\n     * The l2,1 coefficients of the spherical harmonics\n     */\n    this.l21 = Vector3.Zero();\n    /**\n     * The l2,2 coefficients of the spherical harmonics\n     */\n    this.l22 = Vector3.Zero();\n  }\n  /**\n   * Adds a light to the spherical harmonics\n   * @param direction the direction of the light\n   * @param color the color of the light\n   * @param deltaSolidAngle the delta solid angle of the light\n   */\n  addLight(direction, color, deltaSolidAngle) {\n    TmpVectors.Vector3[0].set(color.r, color.g, color.b);\n    const colorVector = TmpVectors.Vector3[0];\n    const c = TmpVectors.Vector3[1];\n    colorVector.scaleToRef(deltaSolidAngle, c);\n    c.scaleToRef(applySH3(0, direction), TmpVectors.Vector3[2]);\n    this.l00.addInPlace(TmpVectors.Vector3[2]);\n    c.scaleToRef(applySH3(1, direction), TmpVectors.Vector3[2]);\n    this.l1_1.addInPlace(TmpVectors.Vector3[2]);\n    c.scaleToRef(applySH3(2, direction), TmpVectors.Vector3[2]);\n    this.l10.addInPlace(TmpVectors.Vector3[2]);\n    c.scaleToRef(applySH3(3, direction), TmpVectors.Vector3[2]);\n    this.l11.addInPlace(TmpVectors.Vector3[2]);\n    c.scaleToRef(applySH3(4, direction), TmpVectors.Vector3[2]);\n    this.l2_2.addInPlace(TmpVectors.Vector3[2]);\n    c.scaleToRef(applySH3(5, direction), TmpVectors.Vector3[2]);\n    this.l2_1.addInPlace(TmpVectors.Vector3[2]);\n    c.scaleToRef(applySH3(6, direction), TmpVectors.Vector3[2]);\n    this.l20.addInPlace(TmpVectors.Vector3[2]);\n    c.scaleToRef(applySH3(7, direction), TmpVectors.Vector3[2]);\n    this.l21.addInPlace(TmpVectors.Vector3[2]);\n    c.scaleToRef(applySH3(8, direction), TmpVectors.Vector3[2]);\n    this.l22.addInPlace(TmpVectors.Vector3[2]);\n  }\n  /**\n   * Scales the spherical harmonics by the given amount\n   * @param scale the amount to scale\n   */\n  scaleInPlace(scale) {\n    this.l00.scaleInPlace(scale);\n    this.l1_1.scaleInPlace(scale);\n    this.l10.scaleInPlace(scale);\n    this.l11.scaleInPlace(scale);\n    this.l2_2.scaleInPlace(scale);\n    this.l2_1.scaleInPlace(scale);\n    this.l20.scaleInPlace(scale);\n    this.l21.scaleInPlace(scale);\n    this.l22.scaleInPlace(scale);\n  }\n  /**\n   * Convert from incident radiance (Li) to irradiance (E) by applying convolution with the cosine-weighted hemisphere.\n   *\n   * ```\n   * E_lm = A_l * L_lm\n   * ```\n   *\n   * In spherical harmonics this convolution amounts to scaling factors for each frequency band.\n   * This corresponds to equation 5 in \"An Efficient Representation for Irradiance Environment Maps\", where\n   * the scaling factors are given in equation 9.\n   */\n  convertIncidentRadianceToIrradiance() {\n    // Constant (Band 0)\n    this.l00.scaleInPlace(SHCosKernelConvolution[0]);\n    // Linear (Band 1)\n    this.l1_1.scaleInPlace(SHCosKernelConvolution[1]);\n    this.l10.scaleInPlace(SHCosKernelConvolution[2]);\n    this.l11.scaleInPlace(SHCosKernelConvolution[3]);\n    // Quadratic (Band 2)\n    this.l2_2.scaleInPlace(SHCosKernelConvolution[4]);\n    this.l2_1.scaleInPlace(SHCosKernelConvolution[5]);\n    this.l20.scaleInPlace(SHCosKernelConvolution[6]);\n    this.l21.scaleInPlace(SHCosKernelConvolution[7]);\n    this.l22.scaleInPlace(SHCosKernelConvolution[8]);\n  }\n  /**\n   * Convert from irradiance to outgoing radiance for Lambertian BDRF, suitable for efficient shader evaluation.\n   *\n   * ```\n   * L = (1/pi) * E * rho\n   * ```\n   *\n   * This is done by an additional scale by 1/pi, so is a fairly trivial operation but important conceptually.\n   */\n  convertIrradianceToLambertianRadiance() {\n    this.scaleInPlace(1.0 / Math.PI);\n    // The resultant SH now represents outgoing radiance, so includes the Lambert 1/pi normalisation factor but without albedo (rho) applied\n    // (The pixel shader must apply albedo after texture fetches, etc).\n  }\n  /**\n   * Integrates the reconstruction coefficients directly in to the SH preventing further\n   * required operations at run time.\n   *\n   * This is simply done by scaling back the SH with Ylm constants parameter.\n   * The trigonometric part being applied by the shader at run time.\n   */\n  preScaleForRendering() {\n    this.preScaled = true;\n    this.l00.scaleInPlace(SH3ylmBasisConstants[0]);\n    this.l1_1.scaleInPlace(SH3ylmBasisConstants[1]);\n    this.l10.scaleInPlace(SH3ylmBasisConstants[2]);\n    this.l11.scaleInPlace(SH3ylmBasisConstants[3]);\n    this.l2_2.scaleInPlace(SH3ylmBasisConstants[4]);\n    this.l2_1.scaleInPlace(SH3ylmBasisConstants[5]);\n    this.l20.scaleInPlace(SH3ylmBasisConstants[6]);\n    this.l21.scaleInPlace(SH3ylmBasisConstants[7]);\n    this.l22.scaleInPlace(SH3ylmBasisConstants[8]);\n  }\n  /**\n   * update the spherical harmonics coefficients from the given array\n   * @param data defines the 9x3 coefficients (l00, l1-1, l10, l11, l2-2, l2-1, l20, l21, l22)\n   * @returns the spherical harmonics (this)\n   */\n  updateFromArray(data) {\n    Vector3.FromArrayToRef(data[0], 0, this.l00);\n    Vector3.FromArrayToRef(data[1], 0, this.l1_1);\n    Vector3.FromArrayToRef(data[2], 0, this.l10);\n    Vector3.FromArrayToRef(data[3], 0, this.l11);\n    Vector3.FromArrayToRef(data[4], 0, this.l2_2);\n    Vector3.FromArrayToRef(data[5], 0, this.l2_1);\n    Vector3.FromArrayToRef(data[6], 0, this.l20);\n    Vector3.FromArrayToRef(data[7], 0, this.l21);\n    Vector3.FromArrayToRef(data[8], 0, this.l22);\n    return this;\n  }\n  /**\n   * update the spherical harmonics coefficients from the given floats array\n   * @param data defines the 9x3 coefficients (l00, l1-1, l10, l11, l2-2, l2-1, l20, l21, l22)\n   * @returns the spherical harmonics (this)\n   */\n  updateFromFloatsArray(data) {\n    Vector3.FromFloatsToRef(data[0], data[1], data[2], this.l00);\n    Vector3.FromFloatsToRef(data[3], data[4], data[5], this.l1_1);\n    Vector3.FromFloatsToRef(data[6], data[7], data[8], this.l10);\n    Vector3.FromFloatsToRef(data[9], data[10], data[11], this.l11);\n    Vector3.FromFloatsToRef(data[12], data[13], data[14], this.l2_2);\n    Vector3.FromFloatsToRef(data[15], data[16], data[17], this.l2_1);\n    Vector3.FromFloatsToRef(data[18], data[19], data[20], this.l20);\n    Vector3.FromFloatsToRef(data[21], data[22], data[23], this.l21);\n    Vector3.FromFloatsToRef(data[24], data[25], data[26], this.l22);\n    return this;\n  }\n  /**\n   * Constructs a spherical harmonics from an array.\n   * @param data defines the 9x3 coefficients (l00, l1-1, l10, l11, l2-2, l2-1, l20, l21, l22)\n   * @returns the spherical harmonics\n   */\n  static FromArray(data) {\n    const sh = new SphericalHarmonics();\n    return sh.updateFromArray(data);\n  }\n  // Keep for references.\n  /**\n   * Gets the spherical harmonics from polynomial\n   * @param polynomial the spherical polynomial\n   * @returns the spherical harmonics\n   */\n  static FromPolynomial(polynomial) {\n    const result = new SphericalHarmonics();\n    result.l00 = polynomial.xx.scale(0.376127).add(polynomial.yy.scale(0.376127)).add(polynomial.zz.scale(0.376126));\n    result.l1_1 = polynomial.y.scale(0.977204);\n    result.l10 = polynomial.z.scale(0.977204);\n    result.l11 = polynomial.x.scale(0.977204);\n    result.l2_2 = polynomial.xy.scale(1.16538);\n    result.l2_1 = polynomial.yz.scale(1.16538);\n    result.l20 = polynomial.zz.scale(1.34567).subtract(polynomial.xx.scale(0.672834)).subtract(polynomial.yy.scale(0.672834));\n    result.l21 = polynomial.zx.scale(1.16538);\n    result.l22 = polynomial.xx.scale(1.16538).subtract(polynomial.yy.scale(1.16538));\n    result.l1_1.scaleInPlace(-1);\n    result.l11.scaleInPlace(-1);\n    result.l2_1.scaleInPlace(-1);\n    result.l21.scaleInPlace(-1);\n    result.scaleInPlace(Math.PI);\n    return result;\n  }\n}\n/**\n * Class representing spherical polynomial coefficients to the 3rd degree\n */\nexport class SphericalPolynomial {\n  constructor() {\n    /**\n     * The x coefficients of the spherical polynomial\n     */\n    this.x = Vector3.Zero();\n    /**\n     * The y coefficients of the spherical polynomial\n     */\n    this.y = Vector3.Zero();\n    /**\n     * The z coefficients of the spherical polynomial\n     */\n    this.z = Vector3.Zero();\n    /**\n     * The xx coefficients of the spherical polynomial\n     */\n    this.xx = Vector3.Zero();\n    /**\n     * The yy coefficients of the spherical polynomial\n     */\n    this.yy = Vector3.Zero();\n    /**\n     * The zz coefficients of the spherical polynomial\n     */\n    this.zz = Vector3.Zero();\n    /**\n     * The xy coefficients of the spherical polynomial\n     */\n    this.xy = Vector3.Zero();\n    /**\n     * The yz coefficients of the spherical polynomial\n     */\n    this.yz = Vector3.Zero();\n    /**\n     * The zx coefficients of the spherical polynomial\n     */\n    this.zx = Vector3.Zero();\n  }\n  /**\n   * The spherical harmonics used to create the polynomials.\n   */\n  get preScaledHarmonics() {\n    if (!this._harmonics) {\n      this._harmonics = SphericalHarmonics.FromPolynomial(this);\n    }\n    if (!this._harmonics.preScaled) {\n      this._harmonics.preScaleForRendering();\n    }\n    return this._harmonics;\n  }\n  /**\n   * Adds an ambient color to the spherical polynomial\n   * @param color the color to add\n   */\n  addAmbient(color) {\n    TmpVectors.Vector3[0].copyFromFloats(color.r, color.g, color.b);\n    const colorVector = TmpVectors.Vector3[0];\n    this.xx.addInPlace(colorVector);\n    this.yy.addInPlace(colorVector);\n    this.zz.addInPlace(colorVector);\n  }\n  /**\n   * Scales the spherical polynomial by the given amount\n   * @param scale the amount to scale\n   */\n  scaleInPlace(scale) {\n    this.x.scaleInPlace(scale);\n    this.y.scaleInPlace(scale);\n    this.z.scaleInPlace(scale);\n    this.xx.scaleInPlace(scale);\n    this.yy.scaleInPlace(scale);\n    this.zz.scaleInPlace(scale);\n    this.yz.scaleInPlace(scale);\n    this.zx.scaleInPlace(scale);\n    this.xy.scaleInPlace(scale);\n  }\n  /**\n   * Updates the spherical polynomial from harmonics\n   * @param harmonics the spherical harmonics\n   * @returns the spherical polynomial\n   */\n  updateFromHarmonics(harmonics) {\n    this._harmonics = harmonics;\n    this.x.copyFrom(harmonics.l11);\n    this.x.scaleInPlace(1.02333).scaleInPlace(-1);\n    this.y.copyFrom(harmonics.l1_1);\n    this.y.scaleInPlace(1.02333).scaleInPlace(-1);\n    this.z.copyFrom(harmonics.l10);\n    this.z.scaleInPlace(1.02333);\n    this.xx.copyFrom(harmonics.l00);\n    TmpVectors.Vector3[0].copyFrom(harmonics.l20).scaleInPlace(0.247708);\n    TmpVectors.Vector3[1].copyFrom(harmonics.l22).scaleInPlace(0.429043);\n    this.xx.scaleInPlace(0.886277).subtractInPlace(TmpVectors.Vector3[0]).addInPlace(TmpVectors.Vector3[1]);\n    this.yy.copyFrom(harmonics.l00);\n    this.yy.scaleInPlace(0.886277).subtractInPlace(TmpVectors.Vector3[0]).subtractInPlace(TmpVectors.Vector3[1]);\n    this.zz.copyFrom(harmonics.l00);\n    TmpVectors.Vector3[0].copyFrom(harmonics.l20).scaleInPlace(0.495417);\n    this.zz.scaleInPlace(0.886277).addInPlace(TmpVectors.Vector3[0]);\n    this.yz.copyFrom(harmonics.l2_1);\n    this.yz.scaleInPlace(0.858086).scaleInPlace(-1);\n    this.zx.copyFrom(harmonics.l21);\n    this.zx.scaleInPlace(0.858086).scaleInPlace(-1);\n    this.xy.copyFrom(harmonics.l2_2);\n    this.xy.scaleInPlace(0.858086);\n    this.scaleInPlace(1.0 / Math.PI);\n    return this;\n  }\n  /**\n   * Gets the spherical polynomial from harmonics\n   * @param harmonics the spherical harmonics\n   * @returns the spherical polynomial\n   */\n  static FromHarmonics(harmonics) {\n    const result = new SphericalPolynomial();\n    return result.updateFromHarmonics(harmonics);\n  }\n  /**\n   * Constructs a spherical polynomial from an array.\n   * @param data defines the 9x3 coefficients (x, y, z, xx, yy, zz, yz, zx, xy)\n   * @returns the spherical polynomial\n   */\n  static FromArray(data) {\n    const sp = new SphericalPolynomial();\n    Vector3.FromArrayToRef(data[0], 0, sp.x);\n    Vector3.FromArrayToRef(data[1], 0, sp.y);\n    Vector3.FromArrayToRef(data[2], 0, sp.z);\n    Vector3.FromArrayToRef(data[3], 0, sp.xx);\n    Vector3.FromArrayToRef(data[4], 0, sp.yy);\n    Vector3.FromArrayToRef(data[5], 0, sp.zz);\n    Vector3.FromArrayToRef(data[6], 0, sp.yz);\n    Vector3.FromArrayToRef(data[7], 0, sp.zx);\n    Vector3.FromArrayToRef(data[8], 0, sp.xy);\n    return sp;\n  }\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,OAAO,QAAQ,yBAAuB;AAG/C,SAASC,UAAU,QAAQ,WAAS;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,CACzBC,IAAI,CAACC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAGD,IAAI,CAACE,EAAE,CAAC,CAAC,EAE5B,CAACF,IAAI,CAACC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAGD,IAAI,CAACE,EAAE,CAAC,CAAC,EAC7BF,IAAI,CAACC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAGD,IAAI,CAACE,EAAE,CAAC,CAAC,EAC5B,CAACF,IAAI,CAACC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAGD,IAAI,CAACE,EAAE,CAAC,CAAC,EAE7BF,IAAI,CAACC,IAAI,CAAC,EAAE,IAAI,CAAC,GAAGD,IAAI,CAACE,EAAE,CAAC,CAAC,EAC7B,CAACF,IAAI,CAACC,IAAI,CAAC,EAAE,IAAI,CAAC,GAAGD,IAAI,CAACE,EAAE,CAAC,CAAC,EAC9BF,IAAI,CAACC,IAAI,CAAC,CAAC,IAAI,EAAE,GAAGD,IAAI,CAACE,EAAE,CAAC,CAAC,EAC7B,CAACF,IAAI,CAACC,IAAI,CAAC,EAAE,IAAI,CAAC,GAAGD,IAAI,CAACE,EAAE,CAAC,CAAC,EAC9BF,IAAI,CAACC,IAAI,CAAC,EAAE,IAAI,EAAE,GAAGD,IAAI,CAACE,EAAE,CAAC,CAAC,CAAE;AAAA,CACnC;AAED;AACA;AACA;AACA;AACA,MAAMC,6BAA6B,GAAG,CAClC,MAAM,CAAC,EAENC,SAAkB,IAAKA,SAAS,CAACC,CAAC,EAClCD,SAAkB,IAAKA,SAAS,CAACE,CAAC,EAClCF,SAAkB,IAAKA,SAAS,CAACG,CAAC,EAElCH,SAAkB,IAAKA,SAAS,CAACG,CAAC,GAAGH,SAAS,CAACC,CAAC,EAChDD,SAAkB,IAAKA,SAAS,CAACC,CAAC,GAAGD,SAAS,CAACE,CAAC,EAChDF,SAAkB,IAAK,CAAC,GAAGA,SAAS,CAACE,CAAC,GAAGF,SAAS,CAACE,CAAC,GAAG,CAAC,EACxDF,SAAkB,IAAKA,SAAS,CAACG,CAAC,GAAGH,SAAS,CAACE,CAAC,EAChDF,SAAkB,IAAKA,SAAS,CAACG,CAAC,GAAGH,SAAS,CAACG,CAAC,GAAGH,SAAS,CAACC,CAAC,GAAGD,SAAS,CAACC,CAAC,CAAE;AAAA,CAClF;AAED;AACA,MAAMG,QAAQ,GAAG,CAACC,EAAU,EAAEL,SAAkB,KAAI;EAChD,OAAOL,oBAAoB,CAACU,EAAE,CAAC,GAAGN,6BAA6B,CAACM,EAAE,CAAC,CAACL,SAAS,CAAC;AAClF,CAAC;AAED;AACA;AACA,MAAMM,sBAAsB,GAAG,CAACV,IAAI,CAACE,EAAE,EAAG,CAAC,GAAGF,IAAI,CAACE,EAAE,GAAI,CAAC,EAAG,CAAC,GAAGF,IAAI,CAACE,EAAE,GAAI,CAAC,EAAG,CAAC,GAAGF,IAAI,CAACE,EAAE,GAAI,CAAC,EAAEF,IAAI,CAACE,EAAE,GAAG,CAAC,EAAEF,IAAI,CAACE,EAAE,GAAG,CAAC,EAAEF,IAAI,CAACE,EAAE,GAAG,CAAC,EAAEF,IAAI,CAACE,EAAE,GAAG,CAAC,EAAEF,IAAI,CAACE,EAAE,GAAG,CAAC,CAAC;AAElK;;;AAGA,OAAM,MAAOS,kBAAkB;EAA/BC;IACI;;;IAGO,cAAS,GAAG,KAAK;IAExB;;;IAGO,QAAG,GAAYf,OAAO,CAACgB,IAAI,EAAE;IAEpC;;;IAGO,SAAI,GAAYhB,OAAO,CAACgB,IAAI,EAAE;IAErC;;;IAGO,QAAG,GAAYhB,OAAO,CAACgB,IAAI,EAAE;IAEpC;;;IAGO,QAAG,GAAYhB,OAAO,CAACgB,IAAI,EAAE;IAEpC;;;IAGO,SAAI,GAAYhB,OAAO,CAACgB,IAAI,EAAE;IAErC;;;IAGO,SAAI,GAAYhB,OAAO,CAACgB,IAAI,EAAE;IAErC;;;IAGO,QAAG,GAAYhB,OAAO,CAACgB,IAAI,EAAE;IAEpC;;;IAGO,QAAG,GAAYhB,OAAO,CAACgB,IAAI,EAAE;IAEpC;;;IAGO,QAAG,GAAYhB,OAAO,CAACgB,IAAI,EAAE;EAiMxC;EA/LI;;;;;;EAMOC,QAAQ,CAACV,SAAkB,EAAEW,KAAa,EAAEC,eAAuB;IACtElB,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAACoB,GAAG,CAACF,KAAK,CAACG,CAAC,EAAEH,KAAK,CAACI,CAAC,EAAEJ,KAAK,CAACK,CAAC,CAAC;IACpD,MAAMC,WAAW,GAAGvB,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC;IACzC,MAAMyB,CAAC,GAAGxB,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC;IAC/BwB,WAAW,CAACE,UAAU,CAACP,eAAe,EAAEM,CAAC,CAAC;IAE1CA,CAAC,CAACC,UAAU,CAACf,QAAQ,CAAC,CAAC,EAAEJ,SAAS,CAAC,EAAEN,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3D,IAAI,CAAC2B,GAAG,CAACC,UAAU,CAAC3B,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAE1CyB,CAAC,CAACC,UAAU,CAACf,QAAQ,CAAC,CAAC,EAAEJ,SAAS,CAAC,EAAEN,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3D,IAAI,CAAC6B,IAAI,CAACD,UAAU,CAAC3B,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3CyB,CAAC,CAACC,UAAU,CAACf,QAAQ,CAAC,CAAC,EAAEJ,SAAS,CAAC,EAAEN,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3D,IAAI,CAAC8B,GAAG,CAACF,UAAU,CAAC3B,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAC1CyB,CAAC,CAACC,UAAU,CAACf,QAAQ,CAAC,CAAC,EAAEJ,SAAS,CAAC,EAAEN,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3D,IAAI,CAAC+B,GAAG,CAACH,UAAU,CAAC3B,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAE1CyB,CAAC,CAACC,UAAU,CAACf,QAAQ,CAAC,CAAC,EAAEJ,SAAS,CAAC,EAAEN,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3D,IAAI,CAACgC,IAAI,CAACJ,UAAU,CAAC3B,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3CyB,CAAC,CAACC,UAAU,CAACf,QAAQ,CAAC,CAAC,EAAEJ,SAAS,CAAC,EAAEN,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3D,IAAI,CAACiC,IAAI,CAACL,UAAU,CAAC3B,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3CyB,CAAC,CAACC,UAAU,CAACf,QAAQ,CAAC,CAAC,EAAEJ,SAAS,CAAC,EAAEN,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3D,IAAI,CAACkC,GAAG,CAACN,UAAU,CAAC3B,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAC1CyB,CAAC,CAACC,UAAU,CAACf,QAAQ,CAAC,CAAC,EAAEJ,SAAS,CAAC,EAAEN,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3D,IAAI,CAACmC,GAAG,CAACP,UAAU,CAAC3B,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAC1CyB,CAAC,CAACC,UAAU,CAACf,QAAQ,CAAC,CAAC,EAAEJ,SAAS,CAAC,EAAEN,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3D,IAAI,CAACoC,GAAG,CAACR,UAAU,CAAC3B,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;EAC9C;EAEA;;;;EAIOqC,YAAY,CAACC,KAAa;IAC7B,IAAI,CAACX,GAAG,CAACU,YAAY,CAACC,KAAK,CAAC;IAC5B,IAAI,CAACT,IAAI,CAACQ,YAAY,CAACC,KAAK,CAAC;IAC7B,IAAI,CAACR,GAAG,CAACO,YAAY,CAACC,KAAK,CAAC;IAC5B,IAAI,CAACP,GAAG,CAACM,YAAY,CAACC,KAAK,CAAC;IAC5B,IAAI,CAACN,IAAI,CAACK,YAAY,CAACC,KAAK,CAAC;IAC7B,IAAI,CAACL,IAAI,CAACI,YAAY,CAACC,KAAK,CAAC;IAC7B,IAAI,CAACJ,GAAG,CAACG,YAAY,CAACC,KAAK,CAAC;IAC5B,IAAI,CAACH,GAAG,CAACE,YAAY,CAACC,KAAK,CAAC;IAC5B,IAAI,CAACF,GAAG,CAACC,YAAY,CAACC,KAAK,CAAC;EAChC;EAEA;;;;;;;;;;;EAWOC,mCAAmC;IACtC;IACA,IAAI,CAACZ,GAAG,CAACU,YAAY,CAACxB,sBAAsB,CAAC,CAAC,CAAC,CAAC;IAEhD;IACA,IAAI,CAACgB,IAAI,CAACQ,YAAY,CAACxB,sBAAsB,CAAC,CAAC,CAAC,CAAC;IACjD,IAAI,CAACiB,GAAG,CAACO,YAAY,CAACxB,sBAAsB,CAAC,CAAC,CAAC,CAAC;IAChD,IAAI,CAACkB,GAAG,CAACM,YAAY,CAACxB,sBAAsB,CAAC,CAAC,CAAC,CAAC;IAEhD;IACA,IAAI,CAACmB,IAAI,CAACK,YAAY,CAACxB,sBAAsB,CAAC,CAAC,CAAC,CAAC;IACjD,IAAI,CAACoB,IAAI,CAACI,YAAY,CAACxB,sBAAsB,CAAC,CAAC,CAAC,CAAC;IACjD,IAAI,CAACqB,GAAG,CAACG,YAAY,CAACxB,sBAAsB,CAAC,CAAC,CAAC,CAAC;IAChD,IAAI,CAACsB,GAAG,CAACE,YAAY,CAACxB,sBAAsB,CAAC,CAAC,CAAC,CAAC;IAChD,IAAI,CAACuB,GAAG,CAACC,YAAY,CAACxB,sBAAsB,CAAC,CAAC,CAAC,CAAC;EACpD;EAEA;;;;;;;;;EASO2B,qCAAqC;IACxC,IAAI,CAACH,YAAY,CAAC,GAAG,GAAGlC,IAAI,CAACE,EAAE,CAAC;IAEhC;IACA;EACJ;EAEA;;;;;;;EAOOoC,oBAAoB;IACvB,IAAI,CAACC,SAAS,GAAG,IAAI;IAErB,IAAI,CAACf,GAAG,CAACU,YAAY,CAACnC,oBAAoB,CAAC,CAAC,CAAC,CAAC;IAE9C,IAAI,CAAC2B,IAAI,CAACQ,YAAY,CAACnC,oBAAoB,CAAC,CAAC,CAAC,CAAC;IAC/C,IAAI,CAAC4B,GAAG,CAACO,YAAY,CAACnC,oBAAoB,CAAC,CAAC,CAAC,CAAC;IAC9C,IAAI,CAAC6B,GAAG,CAACM,YAAY,CAACnC,oBAAoB,CAAC,CAAC,CAAC,CAAC;IAE9C,IAAI,CAAC8B,IAAI,CAACK,YAAY,CAACnC,oBAAoB,CAAC,CAAC,CAAC,CAAC;IAC/C,IAAI,CAAC+B,IAAI,CAACI,YAAY,CAACnC,oBAAoB,CAAC,CAAC,CAAC,CAAC;IAC/C,IAAI,CAACgC,GAAG,CAACG,YAAY,CAACnC,oBAAoB,CAAC,CAAC,CAAC,CAAC;IAC9C,IAAI,CAACiC,GAAG,CAACE,YAAY,CAACnC,oBAAoB,CAAC,CAAC,CAAC,CAAC;IAC9C,IAAI,CAACkC,GAAG,CAACC,YAAY,CAACnC,oBAAoB,CAAC,CAAC,CAAC,CAAC;EAClD;EAEA;;;;;EAKOyC,eAAe,CAACC,IAAkC;IACrD5C,OAAO,CAAC6C,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAACjB,GAAG,CAAC;IAC5C3B,OAAO,CAAC6C,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAACf,IAAI,CAAC;IAC7C7B,OAAO,CAAC6C,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAACd,GAAG,CAAC;IAC5C9B,OAAO,CAAC6C,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAACb,GAAG,CAAC;IAC5C/B,OAAO,CAAC6C,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAACZ,IAAI,CAAC;IAC7ChC,OAAO,CAAC6C,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAACX,IAAI,CAAC;IAC7CjC,OAAO,CAAC6C,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAACV,GAAG,CAAC;IAC5ClC,OAAO,CAAC6C,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAACT,GAAG,CAAC;IAC5CnC,OAAO,CAAC6C,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAACR,GAAG,CAAC;IAC5C,OAAO,IAAI;EACf;EAEA;;;;;EAKOU,qBAAqB,CAACF,IAAuB;IAChD5C,OAAO,CAAC+C,eAAe,CAACH,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAACjB,GAAG,CAAC;IAC5D3B,OAAO,CAAC+C,eAAe,CAACH,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAACf,IAAI,CAAC;IAC7D7B,OAAO,CAAC+C,eAAe,CAACH,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAACd,GAAG,CAAC;IAC5D9B,OAAO,CAAC+C,eAAe,CAACH,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,EAAE,CAAC,EAAEA,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAACb,GAAG,CAAC;IAC9D/B,OAAO,CAAC+C,eAAe,CAACH,IAAI,CAAC,EAAE,CAAC,EAAEA,IAAI,CAAC,EAAE,CAAC,EAAEA,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAACZ,IAAI,CAAC;IAChEhC,OAAO,CAAC+C,eAAe,CAACH,IAAI,CAAC,EAAE,CAAC,EAAEA,IAAI,CAAC,EAAE,CAAC,EAAEA,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAACX,IAAI,CAAC;IAChEjC,OAAO,CAAC+C,eAAe,CAACH,IAAI,CAAC,EAAE,CAAC,EAAEA,IAAI,CAAC,EAAE,CAAC,EAAEA,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAACV,GAAG,CAAC;IAC/DlC,OAAO,CAAC+C,eAAe,CAACH,IAAI,CAAC,EAAE,CAAC,EAAEA,IAAI,CAAC,EAAE,CAAC,EAAEA,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAACT,GAAG,CAAC;IAC/DnC,OAAO,CAAC+C,eAAe,CAACH,IAAI,CAAC,EAAE,CAAC,EAAEA,IAAI,CAAC,EAAE,CAAC,EAAEA,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAACR,GAAG,CAAC;IAC/D,OAAO,IAAI;EACf;EAEA;;;;;EAKO,OAAOY,SAAS,CAACJ,IAAkC;IACtD,MAAMK,EAAE,GAAG,IAAInC,kBAAkB,EAAE;IACnC,OAAOmC,EAAE,CAACN,eAAe,CAACC,IAAI,CAAC;EACnC;EAEA;EACA;;;;;EAKO,OAAOM,cAAc,CAACC,UAA+B;IACxD,MAAMC,MAAM,GAAG,IAAItC,kBAAkB,EAAE;IAEvCsC,MAAM,CAACzB,GAAG,GAAGwB,UAAU,CAACE,EAAE,CAACf,KAAK,CAAC,QAAQ,CAAC,CAACgB,GAAG,CAACH,UAAU,CAACI,EAAE,CAACjB,KAAK,CAAC,QAAQ,CAAC,CAAC,CAACgB,GAAG,CAACH,UAAU,CAACK,EAAE,CAAClB,KAAK,CAAC,QAAQ,CAAC,CAAC;IAChHc,MAAM,CAACvB,IAAI,GAAGsB,UAAU,CAAC3C,CAAC,CAAC8B,KAAK,CAAC,QAAQ,CAAC;IAC1Cc,MAAM,CAACtB,GAAG,GAAGqB,UAAU,CAAC1C,CAAC,CAAC6B,KAAK,CAAC,QAAQ,CAAC;IACzCc,MAAM,CAACrB,GAAG,GAAGoB,UAAU,CAACzC,CAAC,CAAC4B,KAAK,CAAC,QAAQ,CAAC;IACzCc,MAAM,CAACpB,IAAI,GAAGmB,UAAU,CAACM,EAAE,CAACnB,KAAK,CAAC,OAAO,CAAC;IAC1Cc,MAAM,CAACnB,IAAI,GAAGkB,UAAU,CAACO,EAAE,CAACpB,KAAK,CAAC,OAAO,CAAC;IAC1Cc,MAAM,CAAClB,GAAG,GAAGiB,UAAU,CAACK,EAAE,CAAClB,KAAK,CAAC,OAAO,CAAC,CAACqB,QAAQ,CAACR,UAAU,CAACE,EAAE,CAACf,KAAK,CAAC,QAAQ,CAAC,CAAC,CAACqB,QAAQ,CAACR,UAAU,CAACI,EAAE,CAACjB,KAAK,CAAC,QAAQ,CAAC,CAAC;IACzHc,MAAM,CAACjB,GAAG,GAAGgB,UAAU,CAACS,EAAE,CAACtB,KAAK,CAAC,OAAO,CAAC;IACzCc,MAAM,CAAChB,GAAG,GAAGe,UAAU,CAACE,EAAE,CAACf,KAAK,CAAC,OAAO,CAAC,CAACqB,QAAQ,CAACR,UAAU,CAACI,EAAE,CAACjB,KAAK,CAAC,OAAO,CAAC,CAAC;IAEhFc,MAAM,CAACvB,IAAI,CAACQ,YAAY,CAAC,CAAC,CAAC,CAAC;IAC5Be,MAAM,CAACrB,GAAG,CAACM,YAAY,CAAC,CAAC,CAAC,CAAC;IAC3Be,MAAM,CAACnB,IAAI,CAACI,YAAY,CAAC,CAAC,CAAC,CAAC;IAC5Be,MAAM,CAACjB,GAAG,CAACE,YAAY,CAAC,CAAC,CAAC,CAAC;IAE3Be,MAAM,CAACf,YAAY,CAAClC,IAAI,CAACE,EAAE,CAAC;IAE5B,OAAO+C,MAAM;EACjB;;AAGJ;;;AAGA,OAAM,MAAOS,mBAAmB;EAAhC9C;IAgBI;;;IAGO,MAAC,GAAYf,OAAO,CAACgB,IAAI,EAAE;IAElC;;;IAGO,MAAC,GAAYhB,OAAO,CAACgB,IAAI,EAAE;IAElC;;;IAGO,MAAC,GAAYhB,OAAO,CAACgB,IAAI,EAAE;IAElC;;;IAGO,OAAE,GAAYhB,OAAO,CAACgB,IAAI,EAAE;IAEnC;;;IAGO,OAAE,GAAYhB,OAAO,CAACgB,IAAI,EAAE;IAEnC;;;IAGO,OAAE,GAAYhB,OAAO,CAACgB,IAAI,EAAE;IAEnC;;;IAGO,OAAE,GAAYhB,OAAO,CAACgB,IAAI,EAAE;IAEnC;;;IAGO,OAAE,GAAYhB,OAAO,CAACgB,IAAI,EAAE;IAEnC;;;IAGO,OAAE,GAAYhB,OAAO,CAACgB,IAAI,EAAE;EA+FvC;EAvJI;;;EAGA,IAAW8C,kBAAkB;IACzB,IAAI,CAAC,IAAI,CAACC,UAAU,EAAE;MAClB,IAAI,CAACA,UAAU,GAAGjD,kBAAkB,CAACoC,cAAc,CAAC,IAAI,CAAC;;IAE7D,IAAI,CAAC,IAAI,CAACa,UAAU,CAACrB,SAAS,EAAE;MAC5B,IAAI,CAACqB,UAAU,CAACtB,oBAAoB,EAAE;;IAE1C,OAAO,IAAI,CAACsB,UAAU;EAC1B;EA+CA;;;;EAIOC,UAAU,CAAC9C,KAAa;IAC3BjB,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAACiE,cAAc,CAAC/C,KAAK,CAACG,CAAC,EAAEH,KAAK,CAACI,CAAC,EAAEJ,KAAK,CAACK,CAAC,CAAC;IAC/D,MAAMC,WAAW,GAAGvB,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC;IACzC,IAAI,CAACqD,EAAE,CAACzB,UAAU,CAACJ,WAAW,CAAC;IAC/B,IAAI,CAAC+B,EAAE,CAAC3B,UAAU,CAACJ,WAAW,CAAC;IAC/B,IAAI,CAACgC,EAAE,CAAC5B,UAAU,CAACJ,WAAW,CAAC;EACnC;EAEA;;;;EAIOa,YAAY,CAACC,KAAa;IAC7B,IAAI,CAAC5B,CAAC,CAAC2B,YAAY,CAACC,KAAK,CAAC;IAC1B,IAAI,CAAC9B,CAAC,CAAC6B,YAAY,CAACC,KAAK,CAAC;IAC1B,IAAI,CAAC7B,CAAC,CAAC4B,YAAY,CAACC,KAAK,CAAC;IAC1B,IAAI,CAACe,EAAE,CAAChB,YAAY,CAACC,KAAK,CAAC;IAC3B,IAAI,CAACiB,EAAE,CAAClB,YAAY,CAACC,KAAK,CAAC;IAC3B,IAAI,CAACkB,EAAE,CAACnB,YAAY,CAACC,KAAK,CAAC;IAC3B,IAAI,CAACoB,EAAE,CAACrB,YAAY,CAACC,KAAK,CAAC;IAC3B,IAAI,CAACsB,EAAE,CAACvB,YAAY,CAACC,KAAK,CAAC;IAC3B,IAAI,CAACmB,EAAE,CAACpB,YAAY,CAACC,KAAK,CAAC;EAC/B;EAEA;;;;;EAKO4B,mBAAmB,CAACC,SAA6B;IACpD,IAAI,CAACJ,UAAU,GAAGI,SAAS;IAE3B,IAAI,CAACzD,CAAC,CAAC0D,QAAQ,CAACD,SAAS,CAACpC,GAAG,CAAC;IAC9B,IAAI,CAACrB,CAAC,CAAC2B,YAAY,CAAC,OAAO,CAAC,CAACA,YAAY,CAAC,CAAC,CAAC,CAAC;IAC7C,IAAI,CAAC7B,CAAC,CAAC4D,QAAQ,CAACD,SAAS,CAACtC,IAAI,CAAC;IAC/B,IAAI,CAACrB,CAAC,CAAC6B,YAAY,CAAC,OAAO,CAAC,CAACA,YAAY,CAAC,CAAC,CAAC,CAAC;IAC7C,IAAI,CAAC5B,CAAC,CAAC2D,QAAQ,CAACD,SAAS,CAACrC,GAAG,CAAC;IAC9B,IAAI,CAACrB,CAAC,CAAC4B,YAAY,CAAC,OAAO,CAAC;IAE5B,IAAI,CAACgB,EAAE,CAACe,QAAQ,CAACD,SAAS,CAACxC,GAAG,CAAC;IAC/B1B,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAACoE,QAAQ,CAACD,SAAS,CAACjC,GAAG,CAAC,CAACG,YAAY,CAAC,QAAQ,CAAC;IACpEpC,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAACoE,QAAQ,CAACD,SAAS,CAAC/B,GAAG,CAAC,CAACC,YAAY,CAAC,QAAQ,CAAC;IACpE,IAAI,CAACgB,EAAE,CAAChB,YAAY,CAAC,QAAQ,CAAC,CAACgC,eAAe,CAACpE,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC4B,UAAU,CAAC3B,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IACvG,IAAI,CAACuD,EAAE,CAACa,QAAQ,CAACD,SAAS,CAACxC,GAAG,CAAC;IAC/B,IAAI,CAAC4B,EAAE,CAAClB,YAAY,CAAC,QAAQ,CAAC,CAACgC,eAAe,CAACpE,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC,CAACqE,eAAe,CAACpE,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAC5G,IAAI,CAACwD,EAAE,CAACY,QAAQ,CAACD,SAAS,CAACxC,GAAG,CAAC;IAC/B1B,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAACoE,QAAQ,CAACD,SAAS,CAACjC,GAAG,CAAC,CAACG,YAAY,CAAC,QAAQ,CAAC;IACpE,IAAI,CAACmB,EAAE,CAACnB,YAAY,CAAC,QAAQ,CAAC,CAACT,UAAU,CAAC3B,UAAU,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAEhE,IAAI,CAAC0D,EAAE,CAACU,QAAQ,CAACD,SAAS,CAAClC,IAAI,CAAC;IAChC,IAAI,CAACyB,EAAE,CAACrB,YAAY,CAAC,QAAQ,CAAC,CAACA,YAAY,CAAC,CAAC,CAAC,CAAC;IAC/C,IAAI,CAACuB,EAAE,CAACQ,QAAQ,CAACD,SAAS,CAAChC,GAAG,CAAC;IAC/B,IAAI,CAACyB,EAAE,CAACvB,YAAY,CAAC,QAAQ,CAAC,CAACA,YAAY,CAAC,CAAC,CAAC,CAAC;IAC/C,IAAI,CAACoB,EAAE,CAACW,QAAQ,CAACD,SAAS,CAACnC,IAAI,CAAC;IAChC,IAAI,CAACyB,EAAE,CAACpB,YAAY,CAAC,QAAQ,CAAC;IAE9B,IAAI,CAACA,YAAY,CAAC,GAAG,GAAGlC,IAAI,CAACE,EAAE,CAAC;IAEhC,OAAO,IAAI;EACf;EAEA;;;;;EAKO,OAAOiE,aAAa,CAACH,SAA6B;IACrD,MAAMf,MAAM,GAAG,IAAIS,mBAAmB,EAAE;IACxC,OAAOT,MAAM,CAACc,mBAAmB,CAACC,SAAS,CAAC;EAChD;EAEA;;;;;EAKO,OAAOnB,SAAS,CAACJ,IAAkC;IACtD,MAAM2B,EAAE,GAAG,IAAIV,mBAAmB,EAAE;IACpC7D,OAAO,CAAC6C,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE2B,EAAE,CAAC7D,CAAC,CAAC;IACxCV,OAAO,CAAC6C,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE2B,EAAE,CAAC/D,CAAC,CAAC;IACxCR,OAAO,CAAC6C,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE2B,EAAE,CAAC9D,CAAC,CAAC;IACxCT,OAAO,CAAC6C,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE2B,EAAE,CAAClB,EAAE,CAAC;IACzCrD,OAAO,CAAC6C,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE2B,EAAE,CAAChB,EAAE,CAAC;IACzCvD,OAAO,CAAC6C,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE2B,EAAE,CAACf,EAAE,CAAC;IACzCxD,OAAO,CAAC6C,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE2B,EAAE,CAACb,EAAE,CAAC;IACzC1D,OAAO,CAAC6C,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE2B,EAAE,CAACX,EAAE,CAAC;IACzC5D,OAAO,CAAC6C,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE2B,EAAE,CAACd,EAAE,CAAC;IACzC,OAAOc,EAAE;EACb","names":["Vector3","TmpVectors","SH3ylmBasisConstants","Math","sqrt","PI","SH3ylmBasisTrigonometricTerms","direction","y","z","x","applySH3","lm","SHCosKernelConvolution","SphericalHarmonics","constructor","Zero","addLight","color","deltaSolidAngle","set","r","g","b","colorVector","c","scaleToRef","l00","addInPlace","l1_1","l10","l11","l2_2","l2_1","l20","l21","l22","scaleInPlace","scale","convertIncidentRadianceToIrradiance","convertIrradianceToLambertianRadiance","preScaleForRendering","preScaled","updateFromArray","data","FromArrayToRef","updateFromFloatsArray","FromFloatsToRef","FromArray","sh","FromPolynomial","polynomial","result","xx","add","yy","zz","xy","yz","subtract","zx","SphericalPolynomial","preScaledHarmonics","_harmonics","addAmbient","copyFromFloats","updateFromHarmonics","harmonics","copyFrom","subtractInPlace","FromHarmonics","sp"],"sourceRoot":"","sources":["../../../../lts/core/generated/Maths/sphericalPolynomial.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Color3 } from \"../Maths/math.color\";\r\nimport { TmpVectors } from \"./math\";\r\n\r\n// https://dickyjim.wordpress.com/2013/09/04/spherical-harmonics-for-beginners/\r\n// http://silviojemma.com/public/papers/lighting/spherical-harmonic-lighting.pdf\r\n// https://www.ppsloan.org/publications/StupidSH36.pdf\r\n// http://cseweb.ucsd.edu/~ravir/papers/envmap/envmap.pdf\r\n// https://www.ppsloan.org/publications/SHJCGT.pdf\r\n// https://www.ppsloan.org/publications/shdering.pdf\r\n// https://google.github.io/filament/Filament.md.html#annex/sphericalharmonics\r\n// https://patapom.com/blog/SHPortal/\r\n// https://imdoingitwrong.wordpress.com/2011/04/14/spherical-harmonics-wtf/\r\n\r\n// Using real SH basis:\r\n//  m>0             m   m\r\n// y   = sqrt(2) * K * P * cos(m*phi) * cos(theta)\r\n//  l               l   l\r\n//\r\n//  m<0             m   |m|\r\n// y   = sqrt(2) * K * P * sin(m*phi) * cos(theta)\r\n//  l               l   l\r\n//\r\n//  m=0   0   0\r\n// y   = K * P * trigono terms\r\n//  l     l   l\r\n//\r\n//  m       (2l + 1)(l - |m|)!\r\n// K = sqrt(------------------)\r\n//  l           4pi(l + |m|)!\r\n//\r\n// and P by recursion:\r\n//\r\n// P00(x) = 1\r\n// P01(x) = x\r\n// Pll(x) = (-1^l)(2l - 1)!!(1-x*x)^(1/2)\r\n//          ((2l - 1)x[Pl-1/m]-(l + m - 1)[Pl-2/m])\r\n// Plm(x) = ---------------------------------------\r\n//                         l - m\r\n// Leaving the trigonometric terms aside we can precompute the constants to :\r\nconst SH3ylmBasisConstants = [\r\n    Math.sqrt(1 / (4 * Math.PI)), // l00\r\n\r\n    -Math.sqrt(3 / (4 * Math.PI)), // l1_1\r\n    Math.sqrt(3 / (4 * Math.PI)), // l10\r\n    -Math.sqrt(3 / (4 * Math.PI)), // l11\r\n\r\n    Math.sqrt(15 / (4 * Math.PI)), // l2_2\r\n    -Math.sqrt(15 / (4 * Math.PI)), // l2_1\r\n    Math.sqrt(5 / (16 * Math.PI)), // l20\r\n    -Math.sqrt(15 / (4 * Math.PI)), // l21\r\n    Math.sqrt(15 / (16 * Math.PI)), // l22\r\n];\r\n\r\n// cm = cos(m * phi)\r\n// sm = sin(m * phi)\r\n// {x,y,z} = {cos(phi)sin(theta), sin(phi)sin(theta), cos(theta)}\r\n// By recursion on using trigo identities:\r\nconst SH3ylmBasisTrigonometricTerms = [\r\n    () => 1, // l00\r\n\r\n    (direction: Vector3) => direction.y, // l1_1\r\n    (direction: Vector3) => direction.z, // l10\r\n    (direction: Vector3) => direction.x, // l11\r\n\r\n    (direction: Vector3) => direction.x * direction.y, // l2_2\r\n    (direction: Vector3) => direction.y * direction.z, // l2_1\r\n    (direction: Vector3) => 3 * direction.z * direction.z - 1, // l20\r\n    (direction: Vector3) => direction.x * direction.z, // l21\r\n    (direction: Vector3) => direction.x * direction.x - direction.y * direction.y, // l22\r\n];\r\n\r\n// Wrap the full compute\r\nconst applySH3 = (lm: number, direction: Vector3) => {\r\n    return SH3ylmBasisConstants[lm] * SH3ylmBasisTrigonometricTerms[lm](direction);\r\n};\r\n\r\n// Derived from the integration of the a kernel convolution to SH.\r\n// Great explanation here: https://patapom.com/blog/SHPortal/#about-distant-radiance-and-irradiance-environments\r\nconst SHCosKernelConvolution = [Math.PI, (2 * Math.PI) / 3, (2 * Math.PI) / 3, (2 * Math.PI) / 3, Math.PI / 4, Math.PI / 4, Math.PI / 4, Math.PI / 4, Math.PI / 4];\r\n\r\n/**\r\n * Class representing spherical harmonics coefficients to the 3rd degree\r\n */\r\nexport class SphericalHarmonics {\r\n    /**\r\n     * Defines whether or not the harmonics have been prescaled for rendering.\r\n     */\r\n    public preScaled = false;\r\n\r\n    /**\r\n     * The l0,0 coefficients of the spherical harmonics\r\n     */\r\n    public l00: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l1,-1 coefficients of the spherical harmonics\r\n     */\r\n    public l1_1: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l1,0 coefficients of the spherical harmonics\r\n     */\r\n    public l10: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l1,1 coefficients of the spherical harmonics\r\n     */\r\n    public l11: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,-2 coefficients of the spherical harmonics\r\n     */\r\n    public l2_2: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,-1 coefficients of the spherical harmonics\r\n     */\r\n    public l2_1: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,0 coefficients of the spherical harmonics\r\n     */\r\n    public l20: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,1 coefficients of the spherical harmonics\r\n     */\r\n    public l21: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,2 coefficients of the spherical harmonics\r\n     */\r\n    public l22: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Adds a light to the spherical harmonics\r\n     * @param direction the direction of the light\r\n     * @param color the color of the light\r\n     * @param deltaSolidAngle the delta solid angle of the light\r\n     */\r\n    public addLight(direction: Vector3, color: Color3, deltaSolidAngle: number): void {\r\n        TmpVectors.Vector3[0].set(color.r, color.g, color.b);\r\n        const colorVector = TmpVectors.Vector3[0];\r\n        const c = TmpVectors.Vector3[1];\r\n        colorVector.scaleToRef(deltaSolidAngle, c);\r\n\r\n        c.scaleToRef(applySH3(0, direction), TmpVectors.Vector3[2]);\r\n        this.l00.addInPlace(TmpVectors.Vector3[2]);\r\n\r\n        c.scaleToRef(applySH3(1, direction), TmpVectors.Vector3[2]);\r\n        this.l1_1.addInPlace(TmpVectors.Vector3[2]);\r\n        c.scaleToRef(applySH3(2, direction), TmpVectors.Vector3[2]);\r\n        this.l10.addInPlace(TmpVectors.Vector3[2]);\r\n        c.scaleToRef(applySH3(3, direction), TmpVectors.Vector3[2]);\r\n        this.l11.addInPlace(TmpVectors.Vector3[2]);\r\n\r\n        c.scaleToRef(applySH3(4, direction), TmpVectors.Vector3[2]);\r\n        this.l2_2.addInPlace(TmpVectors.Vector3[2]);\r\n        c.scaleToRef(applySH3(5, direction), TmpVectors.Vector3[2]);\r\n        this.l2_1.addInPlace(TmpVectors.Vector3[2]);\r\n        c.scaleToRef(applySH3(6, direction), TmpVectors.Vector3[2]);\r\n        this.l20.addInPlace(TmpVectors.Vector3[2]);\r\n        c.scaleToRef(applySH3(7, direction), TmpVectors.Vector3[2]);\r\n        this.l21.addInPlace(TmpVectors.Vector3[2]);\r\n        c.scaleToRef(applySH3(8, direction), TmpVectors.Vector3[2]);\r\n        this.l22.addInPlace(TmpVectors.Vector3[2]);\r\n    }\r\n\r\n    /**\r\n     * Scales the spherical harmonics by the given amount\r\n     * @param scale the amount to scale\r\n     */\r\n    public scaleInPlace(scale: number): void {\r\n        this.l00.scaleInPlace(scale);\r\n        this.l1_1.scaleInPlace(scale);\r\n        this.l10.scaleInPlace(scale);\r\n        this.l11.scaleInPlace(scale);\r\n        this.l2_2.scaleInPlace(scale);\r\n        this.l2_1.scaleInPlace(scale);\r\n        this.l20.scaleInPlace(scale);\r\n        this.l21.scaleInPlace(scale);\r\n        this.l22.scaleInPlace(scale);\r\n    }\r\n\r\n    /**\r\n     * Convert from incident radiance (Li) to irradiance (E) by applying convolution with the cosine-weighted hemisphere.\r\n     *\r\n     * ```\r\n     * E_lm = A_l * L_lm\r\n     * ```\r\n     *\r\n     * In spherical harmonics this convolution amounts to scaling factors for each frequency band.\r\n     * This corresponds to equation 5 in \"An Efficient Representation for Irradiance Environment Maps\", where\r\n     * the scaling factors are given in equation 9.\r\n     */\r\n    public convertIncidentRadianceToIrradiance(): void {\r\n        // Constant (Band 0)\r\n        this.l00.scaleInPlace(SHCosKernelConvolution[0]);\r\n\r\n        // Linear (Band 1)\r\n        this.l1_1.scaleInPlace(SHCosKernelConvolution[1]);\r\n        this.l10.scaleInPlace(SHCosKernelConvolution[2]);\r\n        this.l11.scaleInPlace(SHCosKernelConvolution[3]);\r\n\r\n        // Quadratic (Band 2)\r\n        this.l2_2.scaleInPlace(SHCosKernelConvolution[4]);\r\n        this.l2_1.scaleInPlace(SHCosKernelConvolution[5]);\r\n        this.l20.scaleInPlace(SHCosKernelConvolution[6]);\r\n        this.l21.scaleInPlace(SHCosKernelConvolution[7]);\r\n        this.l22.scaleInPlace(SHCosKernelConvolution[8]);\r\n    }\r\n\r\n    /**\r\n     * Convert from irradiance to outgoing radiance for Lambertian BDRF, suitable for efficient shader evaluation.\r\n     *\r\n     * ```\r\n     * L = (1/pi) * E * rho\r\n     * ```\r\n     *\r\n     * This is done by an additional scale by 1/pi, so is a fairly trivial operation but important conceptually.\r\n     */\r\n    public convertIrradianceToLambertianRadiance(): void {\r\n        this.scaleInPlace(1.0 / Math.PI);\r\n\r\n        // The resultant SH now represents outgoing radiance, so includes the Lambert 1/pi normalisation factor but without albedo (rho) applied\r\n        // (The pixel shader must apply albedo after texture fetches, etc).\r\n    }\r\n\r\n    /**\r\n     * Integrates the reconstruction coefficients directly in to the SH preventing further\r\n     * required operations at run time.\r\n     *\r\n     * This is simply done by scaling back the SH with Ylm constants parameter.\r\n     * The trigonometric part being applied by the shader at run time.\r\n     */\r\n    public preScaleForRendering(): void {\r\n        this.preScaled = true;\r\n\r\n        this.l00.scaleInPlace(SH3ylmBasisConstants[0]);\r\n\r\n        this.l1_1.scaleInPlace(SH3ylmBasisConstants[1]);\r\n        this.l10.scaleInPlace(SH3ylmBasisConstants[2]);\r\n        this.l11.scaleInPlace(SH3ylmBasisConstants[3]);\r\n\r\n        this.l2_2.scaleInPlace(SH3ylmBasisConstants[4]);\r\n        this.l2_1.scaleInPlace(SH3ylmBasisConstants[5]);\r\n        this.l20.scaleInPlace(SH3ylmBasisConstants[6]);\r\n        this.l21.scaleInPlace(SH3ylmBasisConstants[7]);\r\n        this.l22.scaleInPlace(SH3ylmBasisConstants[8]);\r\n    }\r\n\r\n    /**\r\n     * update the spherical harmonics coefficients from the given array\r\n     * @param data defines the 9x3 coefficients (l00, l1-1, l10, l11, l2-2, l2-1, l20, l21, l22)\r\n     * @returns the spherical harmonics (this)\r\n     */\r\n    public updateFromArray(data: ArrayLike<ArrayLike<number>>): SphericalHarmonics {\r\n        Vector3.FromArrayToRef(data[0], 0, this.l00);\r\n        Vector3.FromArrayToRef(data[1], 0, this.l1_1);\r\n        Vector3.FromArrayToRef(data[2], 0, this.l10);\r\n        Vector3.FromArrayToRef(data[3], 0, this.l11);\r\n        Vector3.FromArrayToRef(data[4], 0, this.l2_2);\r\n        Vector3.FromArrayToRef(data[5], 0, this.l2_1);\r\n        Vector3.FromArrayToRef(data[6], 0, this.l20);\r\n        Vector3.FromArrayToRef(data[7], 0, this.l21);\r\n        Vector3.FromArrayToRef(data[8], 0, this.l22);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * update the spherical harmonics coefficients from the given floats array\r\n     * @param data defines the 9x3 coefficients (l00, l1-1, l10, l11, l2-2, l2-1, l20, l21, l22)\r\n     * @returns the spherical harmonics (this)\r\n     */\r\n    public updateFromFloatsArray(data: ArrayLike<number>): SphericalHarmonics {\r\n        Vector3.FromFloatsToRef(data[0], data[1], data[2], this.l00);\r\n        Vector3.FromFloatsToRef(data[3], data[4], data[5], this.l1_1);\r\n        Vector3.FromFloatsToRef(data[6], data[7], data[8], this.l10);\r\n        Vector3.FromFloatsToRef(data[9], data[10], data[11], this.l11);\r\n        Vector3.FromFloatsToRef(data[12], data[13], data[14], this.l2_2);\r\n        Vector3.FromFloatsToRef(data[15], data[16], data[17], this.l2_1);\r\n        Vector3.FromFloatsToRef(data[18], data[19], data[20], this.l20);\r\n        Vector3.FromFloatsToRef(data[21], data[22], data[23], this.l21);\r\n        Vector3.FromFloatsToRef(data[24], data[25], data[26], this.l22);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Constructs a spherical harmonics from an array.\r\n     * @param data defines the 9x3 coefficients (l00, l1-1, l10, l11, l2-2, l2-1, l20, l21, l22)\r\n     * @returns the spherical harmonics\r\n     */\r\n    public static FromArray(data: ArrayLike<ArrayLike<number>>): SphericalHarmonics {\r\n        const sh = new SphericalHarmonics();\r\n        return sh.updateFromArray(data);\r\n    }\r\n\r\n    // Keep for references.\r\n    /**\r\n     * Gets the spherical harmonics from polynomial\r\n     * @param polynomial the spherical polynomial\r\n     * @returns the spherical harmonics\r\n     */\r\n    public static FromPolynomial(polynomial: SphericalPolynomial): SphericalHarmonics {\r\n        const result = new SphericalHarmonics();\r\n\r\n        result.l00 = polynomial.xx.scale(0.376127).add(polynomial.yy.scale(0.376127)).add(polynomial.zz.scale(0.376126));\r\n        result.l1_1 = polynomial.y.scale(0.977204);\r\n        result.l10 = polynomial.z.scale(0.977204);\r\n        result.l11 = polynomial.x.scale(0.977204);\r\n        result.l2_2 = polynomial.xy.scale(1.16538);\r\n        result.l2_1 = polynomial.yz.scale(1.16538);\r\n        result.l20 = polynomial.zz.scale(1.34567).subtract(polynomial.xx.scale(0.672834)).subtract(polynomial.yy.scale(0.672834));\r\n        result.l21 = polynomial.zx.scale(1.16538);\r\n        result.l22 = polynomial.xx.scale(1.16538).subtract(polynomial.yy.scale(1.16538));\r\n\r\n        result.l1_1.scaleInPlace(-1);\r\n        result.l11.scaleInPlace(-1);\r\n        result.l2_1.scaleInPlace(-1);\r\n        result.l21.scaleInPlace(-1);\r\n\r\n        result.scaleInPlace(Math.PI);\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * Class representing spherical polynomial coefficients to the 3rd degree\r\n */\r\nexport class SphericalPolynomial {\r\n    private _harmonics: Nullable<SphericalHarmonics>;\r\n\r\n    /**\r\n     * The spherical harmonics used to create the polynomials.\r\n     */\r\n    public get preScaledHarmonics(): SphericalHarmonics {\r\n        if (!this._harmonics) {\r\n            this._harmonics = SphericalHarmonics.FromPolynomial(this);\r\n        }\r\n        if (!this._harmonics.preScaled) {\r\n            this._harmonics.preScaleForRendering();\r\n        }\r\n        return this._harmonics;\r\n    }\r\n\r\n    /**\r\n     * The x coefficients of the spherical polynomial\r\n     */\r\n    public x: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The y coefficients of the spherical polynomial\r\n     */\r\n    public y: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The z coefficients of the spherical polynomial\r\n     */\r\n    public z: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The xx coefficients of the spherical polynomial\r\n     */\r\n    public xx: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The yy coefficients of the spherical polynomial\r\n     */\r\n    public yy: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The zz coefficients of the spherical polynomial\r\n     */\r\n    public zz: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The xy coefficients of the spherical polynomial\r\n     */\r\n    public xy: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The yz coefficients of the spherical polynomial\r\n     */\r\n    public yz: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The zx coefficients of the spherical polynomial\r\n     */\r\n    public zx: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Adds an ambient color to the spherical polynomial\r\n     * @param color the color to add\r\n     */\r\n    public addAmbient(color: Color3): void {\r\n        TmpVectors.Vector3[0].copyFromFloats(color.r, color.g, color.b);\r\n        const colorVector = TmpVectors.Vector3[0];\r\n        this.xx.addInPlace(colorVector);\r\n        this.yy.addInPlace(colorVector);\r\n        this.zz.addInPlace(colorVector);\r\n    }\r\n\r\n    /**\r\n     * Scales the spherical polynomial by the given amount\r\n     * @param scale the amount to scale\r\n     */\r\n    public scaleInPlace(scale: number) {\r\n        this.x.scaleInPlace(scale);\r\n        this.y.scaleInPlace(scale);\r\n        this.z.scaleInPlace(scale);\r\n        this.xx.scaleInPlace(scale);\r\n        this.yy.scaleInPlace(scale);\r\n        this.zz.scaleInPlace(scale);\r\n        this.yz.scaleInPlace(scale);\r\n        this.zx.scaleInPlace(scale);\r\n        this.xy.scaleInPlace(scale);\r\n    }\r\n\r\n    /**\r\n     * Updates the spherical polynomial from harmonics\r\n     * @param harmonics the spherical harmonics\r\n     * @returns the spherical polynomial\r\n     */\r\n    public updateFromHarmonics(harmonics: SphericalHarmonics): SphericalPolynomial {\r\n        this._harmonics = harmonics;\r\n\r\n        this.x.copyFrom(harmonics.l11);\r\n        this.x.scaleInPlace(1.02333).scaleInPlace(-1);\r\n        this.y.copyFrom(harmonics.l1_1);\r\n        this.y.scaleInPlace(1.02333).scaleInPlace(-1);\r\n        this.z.copyFrom(harmonics.l10);\r\n        this.z.scaleInPlace(1.02333);\r\n\r\n        this.xx.copyFrom(harmonics.l00);\r\n        TmpVectors.Vector3[0].copyFrom(harmonics.l20).scaleInPlace(0.247708);\r\n        TmpVectors.Vector3[1].copyFrom(harmonics.l22).scaleInPlace(0.429043);\r\n        this.xx.scaleInPlace(0.886277).subtractInPlace(TmpVectors.Vector3[0]).addInPlace(TmpVectors.Vector3[1]);\r\n        this.yy.copyFrom(harmonics.l00);\r\n        this.yy.scaleInPlace(0.886277).subtractInPlace(TmpVectors.Vector3[0]).subtractInPlace(TmpVectors.Vector3[1]);\r\n        this.zz.copyFrom(harmonics.l00);\r\n        TmpVectors.Vector3[0].copyFrom(harmonics.l20).scaleInPlace(0.495417);\r\n        this.zz.scaleInPlace(0.886277).addInPlace(TmpVectors.Vector3[0]);\r\n\r\n        this.yz.copyFrom(harmonics.l2_1);\r\n        this.yz.scaleInPlace(0.858086).scaleInPlace(-1);\r\n        this.zx.copyFrom(harmonics.l21);\r\n        this.zx.scaleInPlace(0.858086).scaleInPlace(-1);\r\n        this.xy.copyFrom(harmonics.l2_2);\r\n        this.xy.scaleInPlace(0.858086);\r\n\r\n        this.scaleInPlace(1.0 / Math.PI);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the spherical polynomial from harmonics\r\n     * @param harmonics the spherical harmonics\r\n     * @returns the spherical polynomial\r\n     */\r\n    public static FromHarmonics(harmonics: SphericalHarmonics): SphericalPolynomial {\r\n        const result = new SphericalPolynomial();\r\n        return result.updateFromHarmonics(harmonics);\r\n    }\r\n\r\n    /**\r\n     * Constructs a spherical polynomial from an array.\r\n     * @param data defines the 9x3 coefficients (x, y, z, xx, yy, zz, yz, zx, xy)\r\n     * @returns the spherical polynomial\r\n     */\r\n    public static FromArray(data: ArrayLike<ArrayLike<number>>): SphericalPolynomial {\r\n        const sp = new SphericalPolynomial();\r\n        Vector3.FromArrayToRef(data[0], 0, sp.x);\r\n        Vector3.FromArrayToRef(data[1], 0, sp.y);\r\n        Vector3.FromArrayToRef(data[2], 0, sp.z);\r\n        Vector3.FromArrayToRef(data[3], 0, sp.xx);\r\n        Vector3.FromArrayToRef(data[4], 0, sp.yy);\r\n        Vector3.FromArrayToRef(data[5], 0, sp.zz);\r\n        Vector3.FromArrayToRef(data[6], 0, sp.yz);\r\n        Vector3.FromArrayToRef(data[7], 0, sp.zx);\r\n        Vector3.FromArrayToRef(data[8], 0, sp.xy);\r\n        return sp;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}