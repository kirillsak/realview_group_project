{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { serialize, expandToProperty, serializeAsTexture, SerializationHelper } from \"../Misc/decorators.js\";\nimport { Vector4 } from \"../Maths/math.vector.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n/**\n * This class is used to animate meshes using a baked vertex animation texture\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/baked_texture_animations\n * @since 5.0\n */\nexport class BakedVertexAnimationManager {\n  /**\n   * Creates a new BakedVertexAnimationManager\n   * @param scene defines the current scene\n   */\n  constructor(scene) {\n    this._texture = null;\n    this._isEnabled = true;\n    /**\n     * Enable or disable the vertex animation manager\n     */\n    this.isEnabled = true;\n    /**\n     * The time counter, to pick the correct animation frame.\n     */\n    this.time = 0;\n    scene = scene || EngineStore.LastCreatedScene;\n    if (!scene) {\n      return;\n    }\n    this._scene = scene;\n    this.animationParameters = new Vector4(0, 0, 0, 30);\n  }\n  /** @internal */\n  _markSubMeshesAsAttributesDirty() {\n    for (const mesh of this._scene.meshes) {\n      if (mesh.bakedVertexAnimationManager === this) {\n        mesh._markSubMeshesAsAttributesDirty();\n      }\n    }\n  }\n  /**\n   * Binds to the effect.\n   * @param effect The effect to bind to.\n   * @param useInstances True when it's an instance.\n   */\n  bind(effect, useInstances = false) {\n    if (!this._texture || !this._isEnabled) {\n      return;\n    }\n    const size = this._texture.getSize();\n    effect.setFloat2(\"bakedVertexAnimationTextureSizeInverted\", 1.0 / size.width, 1.0 / size.height);\n    effect.setFloat(\"bakedVertexAnimationTime\", this.time);\n    if (!useInstances) {\n      effect.setVector4(\"bakedVertexAnimationSettings\", this.animationParameters);\n    }\n    effect.setTexture(\"bakedVertexAnimationTexture\", this._texture);\n  }\n  /**\n   * Clone the current manager\n   * @returns a new BakedVertexAnimationManager\n   */\n  clone() {\n    const copy = new BakedVertexAnimationManager(this._scene);\n    this.copyTo(copy);\n    return copy;\n  }\n  /**\n   * Sets animation parameters.\n   * @param startFrame The first frame of the animation.\n   * @param endFrame The last frame of the animation.\n   * @param offset The offset when starting the animation.\n   * @param speedFramesPerSecond The frame rate.\n   */\n  setAnimationParameters(startFrame, endFrame, offset = 0, speedFramesPerSecond = 30) {\n    this.animationParameters = new Vector4(startFrame, endFrame, offset, speedFramesPerSecond);\n  }\n  /**\n   * Disposes the resources of the manager.\n   * @param forceDisposeTextures - Forces the disposal of all textures.\n   */\n  dispose(forceDisposeTextures) {\n    var _a;\n    if (forceDisposeTextures) {\n      (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n  }\n  /**\n   * Get the current class name useful for serialization or dynamic coding.\n   * @returns \"BakedVertexAnimationManager\"\n   */\n  getClassName() {\n    return \"BakedVertexAnimationManager\";\n  }\n  /**\n   * Makes a duplicate of the current instance into another one.\n   * @param vatMap define the instance where to copy the info\n   */\n  copyTo(vatMap) {\n    SerializationHelper.Clone(() => vatMap, this);\n  }\n  /**\n   * Serializes this vertex animation instance\n   * @returns - An object with the serialized instance.\n   */\n  serialize() {\n    return SerializationHelper.Serialize(this);\n  }\n  /**\n   * Parses a vertex animation setting from a serialized object.\n   * @param source - Serialized object.\n   * @param scene Defines the scene we are parsing for\n   * @param rootUrl Defines the rootUrl to load from\n   */\n  parse(source, scene, rootUrl) {\n    SerializationHelper.Parse(() => this, source, scene, rootUrl);\n  }\n}\n__decorate([serializeAsTexture(), expandToProperty(\"_markSubMeshesAsAttributesDirty\")], BakedVertexAnimationManager.prototype, \"texture\", void 0);\n__decorate([serialize(), expandToProperty(\"_markSubMeshesAsAttributesDirty\")], BakedVertexAnimationManager.prototype, \"isEnabled\", void 0);\n__decorate([serialize()], BakedVertexAnimationManager.prototype, \"animationParameters\", void 0);\n__decorate([serialize()], BakedVertexAnimationManager.prototype, \"time\", void 0);","map":{"version":3,"mappings":"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","names":["serialize","expandToProperty","serializeAsTexture","SerializationHelper","Vector4","EngineStore","BakedVertexAnimationManager","constructor","scene","LastCreatedScene","_scene","animationParameters","_markSubMeshesAsAttributesDirty","mesh","meshes","bakedVertexAnimationManager","bind","effect","useInstances","_texture","_isEnabled","size","getSize","setFloat2","width","height","setFloat","time","setVector4","setTexture","clone","copy","copyTo","setAnimationParameters","startFrame","endFrame","offset","speedFramesPerSecond","dispose","forceDisposeTextures","getClassName","vatMap","Clone","Serialize","parse","source","rootUrl","Parse","__decorate"],"sourceRoot":"","sources":["../../../../lts/core/generated/BakedVertexAnimation/bakedVertexAnimationManager.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { serialize, expandToProperty, serializeAsTexture, SerializationHelper } from \"../Misc/decorators\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Vector4 } from \"../Maths/math.vector\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\n/**\r\n * Interface for baked vertex animation texture, see BakedVertexAnimationManager\r\n * @since 5.0\r\n */\r\nexport interface IBakedVertexAnimationManager {\r\n    /**\r\n     * The vertex animation texture\r\n     */\r\n    texture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the edgesRenderer is active\r\n     */\r\n    isEnabled: boolean;\r\n\r\n    /**\r\n     * The animation parameters for the mesh. See setAnimationParameters()\r\n     */\r\n    animationParameters: Vector4;\r\n\r\n    /**\r\n     * The time counter, to pick the correct animation frame.\r\n     */\r\n    time: number;\r\n\r\n    /**\r\n     * Binds to the effect.\r\n     * @param effect The effect to bind to.\r\n     * @param useInstances True when it's an instance.\r\n     */\r\n    bind(effect: Effect, useInstances: boolean): void;\r\n\r\n    /**\r\n     * Sets animation parameters.\r\n     * @param startFrame The first frame of the animation.\r\n     * @param endFrame The last frame of the animation.\r\n     * @param offset The offset when starting the animation.\r\n     * @param speedFramesPerSecond The frame rate.\r\n     */\r\n    setAnimationParameters(startFrame: number, endFrame: number, offset: number, speedFramesPerSecond: number): void;\r\n\r\n    /**\r\n     * Disposes the resources of the manager.\r\n     * @param forceDisposeTextures - Forces the disposal of all textures.\r\n     */\r\n    dispose(forceDisposeTextures?: boolean): void;\r\n\r\n    /**\r\n     * Get the current class name useful for serialization or dynamic coding.\r\n     * @returns \"BakedVertexAnimationManager\"\r\n     */\r\n    getClassName(): string;\r\n}\r\n\r\n/**\r\n * This class is used to animate meshes using a baked vertex animation texture\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/baked_texture_animations\r\n * @since 5.0\r\n */\r\nexport class BakedVertexAnimationManager implements IBakedVertexAnimationManager {\r\n    private _scene: Scene;\r\n\r\n    private _texture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * The vertex animation texture\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markSubMeshesAsAttributesDirty\")\r\n    public texture: Nullable<BaseTexture>;\r\n\r\n    private _isEnabled = true;\r\n    /**\r\n     * Enable or disable the vertex animation manager\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markSubMeshesAsAttributesDirty\")\r\n    public isEnabled = true;\r\n\r\n    /**\r\n     * The animation parameters for the mesh. See setAnimationParameters()\r\n     */\r\n    @serialize()\r\n    public animationParameters: Vector4;\r\n\r\n    /**\r\n     * The time counter, to pick the correct animation frame.\r\n     */\r\n    @serialize()\r\n    public time = 0;\r\n\r\n    /**\r\n     * Creates a new BakedVertexAnimationManager\r\n     * @param scene defines the current scene\r\n     */\r\n    constructor(scene?: Nullable<Scene>) {\r\n        scene = scene || EngineStore.LastCreatedScene;\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._scene = scene;\r\n        this.animationParameters = new Vector4(0, 0, 0, 30);\r\n    }\r\n\r\n    /** @internal */\r\n    public _markSubMeshesAsAttributesDirty(): void {\r\n        for (const mesh of this._scene.meshes) {\r\n            if ((<any>mesh).bakedVertexAnimationManager === this) {\r\n                mesh._markSubMeshesAsAttributesDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds to the effect.\r\n     * @param effect The effect to bind to.\r\n     * @param useInstances True when it's an instance.\r\n     */\r\n    public bind(effect: Effect, useInstances = false): void {\r\n        if (!this._texture || !this._isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const size = this._texture.getSize();\r\n        effect.setFloat2(\"bakedVertexAnimationTextureSizeInverted\", 1.0 / size.width, 1.0 / size.height);\r\n        effect.setFloat(\"bakedVertexAnimationTime\", this.time);\r\n\r\n        if (!useInstances) {\r\n            effect.setVector4(\"bakedVertexAnimationSettings\", this.animationParameters);\r\n        }\r\n\r\n        effect.setTexture(\"bakedVertexAnimationTexture\", this._texture);\r\n    }\r\n\r\n    /**\r\n     * Clone the current manager\r\n     * @returns a new BakedVertexAnimationManager\r\n     */\r\n    public clone(): BakedVertexAnimationManager {\r\n        const copy = new BakedVertexAnimationManager(this._scene);\r\n        this.copyTo(copy);\r\n        return copy;\r\n    }\r\n\r\n    /**\r\n     * Sets animation parameters.\r\n     * @param startFrame The first frame of the animation.\r\n     * @param endFrame The last frame of the animation.\r\n     * @param offset The offset when starting the animation.\r\n     * @param speedFramesPerSecond The frame rate.\r\n     */\r\n    public setAnimationParameters(startFrame: number, endFrame: number, offset: number = 0, speedFramesPerSecond: number = 30): void {\r\n        this.animationParameters = new Vector4(startFrame, endFrame, offset, speedFramesPerSecond);\r\n    }\r\n\r\n    /**\r\n     * Disposes the resources of the manager.\r\n     * @param forceDisposeTextures - Forces the disposal of all textures.\r\n     */\r\n    public dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._texture?.dispose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the current class name useful for serialization or dynamic coding.\r\n     * @returns \"BakedVertexAnimationManager\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"BakedVertexAnimationManager\";\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the current instance into another one.\r\n     * @param vatMap define the instance where to copy the info\r\n     */\r\n    public copyTo(vatMap: BakedVertexAnimationManager): void {\r\n        SerializationHelper.Clone(() => vatMap, this);\r\n    }\r\n\r\n    /**\r\n     * Serializes this vertex animation instance\r\n     * @returns - An object with the serialized instance.\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses a vertex animation setting from a serialized object.\r\n     * @param source - Serialized object.\r\n     * @param scene Defines the scene we are parsing for\r\n     * @param rootUrl Defines the rootUrl to load from\r\n     */\r\n    public parse(source: any, scene: Scene, rootUrl: string): void {\r\n        SerializationHelper.Parse(() => this, source, scene, rootUrl);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}