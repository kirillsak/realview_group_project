{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { WebVRController } from \"./webVRController.js\";\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController.js\";\n/**\n * Gear VR Controller\n */\nexport class GearVRController extends WebVRController {\n  /**\n   * Creates a new GearVRController from a gamepad\n   * @param vrGamepad the gamepad that the controller should be created from\n   */\n  constructor(vrGamepad) {\n    super(vrGamepad);\n    this._buttonIndexToObservableNameMap = [\"onPadStateChangedObservable\", \"onTriggerStateChangedObservable\" // Trigger\n    ];\n\n    this.controllerType = PoseEnabledControllerType.GEAR_VR;\n    // Initial starting position defaults to where hand would be (incase of only 3dof controller)\n    this._calculatedPosition = new Vector3(this.hand == \"left\" ? -0.15 : 0.15, -0.5, 0.25);\n    this._disableTrackPosition(this._calculatedPosition);\n  }\n  /**\n   * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\n   * @param scene scene in which to add meshes\n   * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\n   */\n  initControllerMesh(scene, meshLoaded) {\n    SceneLoader.ImportMesh(\"\", GearVRController.MODEL_BASE_URL, GearVRController.MODEL_FILENAME, scene, newMeshes => {\n      // Offset the controller so it will rotate around the users wrist\n      const mesh = new Mesh(\"\", scene);\n      newMeshes[1].parent = mesh;\n      newMeshes[1].position.z = -0.15;\n      this._defaultModel = mesh;\n      this.attachToMesh(this._defaultModel);\n      if (meshLoaded) {\n        meshLoaded(this._defaultModel);\n      }\n    });\n  }\n  /**\n   * Called once for each button that changed state since the last frame\n   * @param buttonIdx Which button index changed\n   * @param state New state of the button\n   */\n  _handleButtonChange(buttonIdx, state) {\n    if (buttonIdx < this._buttonIndexToObservableNameMap.length) {\n      const observableName = this._buttonIndexToObservableNameMap[buttonIdx];\n      // Only emit events for buttons that we know how to map from index to observable\n      const observable = this[observableName];\n      if (observable) {\n        observable.notifyObservers(state);\n      }\n    }\n  }\n}\n/**\n * Base Url for the controller model.\n */\nGearVRController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/generic/\";\n/**\n * File name for the controller model.\n */\nGearVRController.MODEL_FILENAME = \"generic.babylon\";\n/**\n * Gamepad Id prefix used to identify this controller.\n */\nGearVRController.GAMEPAD_ID_PREFIX = \"Gear VR\"; // id is 'Gear VR Controller'\nPoseEnabledControllerHelper._ControllerFactories.push({\n  canCreate: gamepadInfo => {\n    return gamepadInfo.id.indexOf(GearVRController.GAMEPAD_ID_PREFIX) === 0 || gamepadInfo.id.indexOf(\"Oculus Go\") !== -1 || gamepadInfo.id.indexOf(\"Vive Focus\") !== -1;\n  },\n  create: gamepadInfo => {\n    return new GearVRController(gamepadInfo);\n  }\n});","map":{"version":3,"mappings":";AACA,SAASA,OAAO,QAAQ,4BAA0B;AAElD,SAASC,IAAI,QAAQ,sBAAoB;AACzC,SAASC,WAAW,QAAQ,8BAA4B;AACxD,SAASC,eAAe,QAAQ,sBAAoB;AAEpD,SAASC,yBAAyB,EAAEC,2BAA2B,QAAQ,4BAA0B;AAEjG;;;AAGA,OAAM,MAAOC,gBAAiB,SAAQH,eAAe;EAoBjD;;;;EAIAI,YAAYC,SAAc;IACtB,KAAK,CAACA,SAAS,CAAC;IAVH,oCAA+B,GAAG,CAC/C,6BAA6B,EAC7B,iCAAiC,CAAE;IAAA,CACtC;;IAQG,IAAI,CAACC,cAAc,GAAGL,yBAAyB,CAACM,OAAO;IACvD;IACA,IAAI,CAACC,mBAAmB,GAAG,IAAIX,OAAO,CAAC,IAAI,CAACY,IAAI,IAAI,MAAM,GAAG,CAAC,IAAI,GAAG,IAAI,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC;IACtF,IAAI,CAACC,qBAAqB,CAAC,IAAI,CAACF,mBAAmB,CAAC;EACxD;EAEA;;;;;EAKOG,kBAAkB,CAACC,KAAY,EAAEC,UAAyC;IAC7Ed,WAAW,CAACe,UAAU,CAAC,EAAE,EAAEX,gBAAgB,CAACY,cAAc,EAAEZ,gBAAgB,CAACa,cAAc,EAAEJ,KAAK,EAAGK,SAAS,IAAI;MAC9G;MACA,MAAMC,IAAI,GAAG,IAAIpB,IAAI,CAAC,EAAE,EAAEc,KAAK,CAAC;MAChCK,SAAS,CAAC,CAAC,CAAC,CAACE,MAAM,GAAGD,IAAI;MAC1BD,SAAS,CAAC,CAAC,CAAC,CAACG,QAAQ,CAACC,CAAC,GAAG,CAAC,IAAI;MAC/B,IAAI,CAACC,aAAa,GAAGJ,IAAI;MACzB,IAAI,CAACK,YAAY,CAAC,IAAI,CAACD,aAAa,CAAC;MACrC,IAAIT,UAAU,EAAE;QACZA,UAAU,CAAC,IAAI,CAACS,aAAa,CAAC;;IAEtC,CAAC,CAAC;EACN;EAEA;;;;;EAKUE,mBAAmB,CAACC,SAAiB,EAAEC,KAA4B;IACzE,IAAID,SAAS,GAAG,IAAI,CAACE,+BAA+B,CAACC,MAAM,EAAE;MACzD,MAAMC,cAAc,GAAW,IAAI,CAACF,+BAA+B,CAACF,SAAS,CAAC;MAE9E;MACA,MAAMK,UAAU,GAAS,IAAK,CAACD,cAAc,CAAC;MAC9C,IAAIC,UAAU,EAAE;QACZA,UAAU,CAACC,eAAe,CAACL,KAAK,CAAC;;;EAG7C;;AAjEA;;;AAGcvB,+BAAc,GAAW,4CAA4C;AACnF;;;AAGcA,+BAAc,GAAW,iBAAiB;AAExD;;;AAGuBA,kCAAiB,GAAW,SAAS,CAAC,CAAC;AAwDlED,2BAA2B,CAAC8B,oBAAoB,CAACC,IAAI,CAAC;EAClDC,SAAS,EAAGC,WAAW,IAAI;IACvB,OAAOA,WAAW,CAACC,EAAE,CAACC,OAAO,CAAClC,gBAAgB,CAACmC,iBAAiB,CAAC,KAAK,CAAC,IAAIH,WAAW,CAACC,EAAE,CAACC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAIF,WAAW,CAACC,EAAE,CAACC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;EACxK,CAAC;EACDE,MAAM,EAAGJ,WAAW,IAAI;IACpB,OAAO,IAAIhC,gBAAgB,CAACgC,WAAW,CAAC;EAC5C;CACH,CAAC","names":["Vector3","Mesh","SceneLoader","WebVRController","PoseEnabledControllerType","PoseEnabledControllerHelper","GearVRController","constructor","vrGamepad","controllerType","GEAR_VR","_calculatedPosition","hand","_disableTrackPosition","initControllerMesh","scene","meshLoaded","ImportMesh","MODEL_BASE_URL","MODEL_FILENAME","newMeshes","mesh","parent","position","z","_defaultModel","attachToMesh","_handleButtonChange","buttonIdx","state","_buttonIndexToObservableNameMap","length","observableName","observable","notifyObservers","_ControllerFactories","push","canCreate","gamepadInfo","id","indexOf","GAMEPAD_ID_PREFIX","create"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Gamepads/Controllers/gearVRController.ts"],"sourcesContent":["import type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport { WebVRController } from \"./webVRController\";\r\nimport type { ExtendedGamepadButton } from \"./poseEnabledController\";\r\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController\";\r\n\r\n/**\r\n * Gear VR Controller\r\n */\r\nexport class GearVRController extends WebVRController {\r\n    /**\r\n     * Base Url for the controller model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/generic/\";\r\n    /**\r\n     * File name for the controller model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"generic.babylon\";\r\n\r\n    /**\r\n     * Gamepad Id prefix used to identify this controller.\r\n     */\r\n    public static readonly GAMEPAD_ID_PREFIX: string = \"Gear VR\"; // id is 'Gear VR Controller'\r\n\r\n    private readonly _buttonIndexToObservableNameMap = [\r\n        \"onPadStateChangedObservable\", // Pad\r\n        \"onTriggerStateChangedObservable\", // Trigger\r\n    ];\r\n\r\n    /**\r\n     * Creates a new GearVRController from a gamepad\r\n     * @param vrGamepad the gamepad that the controller should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n        this.controllerType = PoseEnabledControllerType.GEAR_VR;\r\n        // Initial starting position defaults to where hand would be (incase of only 3dof controller)\r\n        this._calculatedPosition = new Vector3(this.hand == \"left\" ? -0.15 : 0.15, -0.5, 0.25);\r\n        this._disableTrackPosition(this._calculatedPosition);\r\n    }\r\n\r\n    /**\r\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n     * @param scene scene in which to add meshes\r\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n     */\r\n    public initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void) {\r\n        SceneLoader.ImportMesh(\"\", GearVRController.MODEL_BASE_URL, GearVRController.MODEL_FILENAME, scene, (newMeshes) => {\r\n            // Offset the controller so it will rotate around the users wrist\r\n            const mesh = new Mesh(\"\", scene);\r\n            newMeshes[1].parent = mesh;\r\n            newMeshes[1].position.z = -0.15;\r\n            this._defaultModel = mesh;\r\n            this.attachToMesh(this._defaultModel);\r\n            if (meshLoaded) {\r\n                meshLoaded(this._defaultModel);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called once for each button that changed state since the last frame\r\n     * @param buttonIdx Which button index changed\r\n     * @param state New state of the button\r\n     */\r\n    protected _handleButtonChange(buttonIdx: number, state: ExtendedGamepadButton) {\r\n        if (buttonIdx < this._buttonIndexToObservableNameMap.length) {\r\n            const observableName: string = this._buttonIndexToObservableNameMap[buttonIdx];\r\n\r\n            // Only emit events for buttons that we know how to map from index to observable\r\n            const observable = (<any>this)[observableName];\r\n            if (observable) {\r\n                observable.notifyObservers(state);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nPoseEnabledControllerHelper._ControllerFactories.push({\r\n    canCreate: (gamepadInfo) => {\r\n        return gamepadInfo.id.indexOf(GearVRController.GAMEPAD_ID_PREFIX) === 0 || gamepadInfo.id.indexOf(\"Oculus Go\") !== -1 || gamepadInfo.id.indexOf(\"Vive Focus\") !== -1;\r\n    },\r\n    create: (gamepadInfo) => {\r\n        return new GearVRController(gamepadInfo);\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}