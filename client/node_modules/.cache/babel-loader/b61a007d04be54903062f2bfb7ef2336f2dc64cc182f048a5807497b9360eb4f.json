{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * Implementation based on https://medium.com/@shrekshao_71662/dual-depth-peeling-implementation-in-webgl-11baa061ba4b\n */\n\nimport { MultiRenderTarget } from \"../Materials/Textures/multiRenderTarget.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { SmartArray } from \"../Misc/smartArray.js\";\nimport { ThinTexture } from \"../Materials/Textures/thinTexture.js\";\nimport { EffectRenderer, EffectWrapper } from \"../Materials/effectRenderer.js\";\nimport { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { Material } from \"../Materials/material.js\";\nimport \"../Shaders/postprocess.vertex.js\";\nimport \"../Shaders/oitFinal.fragment.js\";\nimport \"../Shaders/oitBackBlend.fragment.js\";\nclass DepthPeelingEffectConfiguration {\n  constructor() {\n    /**\n     * Is this effect enabled\n     */\n    this.enabled = true;\n    /**\n     * Name of the configuration\n     */\n    this.name = \"depthPeeling\";\n    /**\n     * Textures that should be present in the MRT for this effect to work\n     */\n    this.texturesRequired = [4];\n  }\n}\n/**\n * The depth peeling renderer that performs\n * Order independant transparency (OIT).\n * This should not be instanciated directly, as it is part of a scene component\n */\nexport class DepthPeelingRenderer {\n  /**\n   * Instanciates the depth peeling renderer\n   * @param scene Scene to attach to\n   * @param passCount Number of depth layers to peel\n   * @returns The depth peeling renderer\n   */\n  constructor(scene, passCount = 5) {\n    this._thinTextures = [];\n    this._currentPingPongState = 0;\n    this._layoutCacheFormat = [[true], [true, true], [true, true, true]];\n    this._layoutCache = [];\n    this._candidateSubMeshes = new SmartArray(10);\n    this._excludedSubMeshes = new SmartArray(10);\n    this._excludedMeshes = [];\n    this._colorCache = [new Color4(DepthPeelingRenderer._DEPTH_CLEAR_VALUE, DepthPeelingRenderer._DEPTH_CLEAR_VALUE, 0, 0), new Color4(-DepthPeelingRenderer._MIN_DEPTH, DepthPeelingRenderer._MAX_DEPTH, 0, 0), new Color4(0, 0, 0, 0)];\n    this._scene = scene;\n    this._engine = scene.getEngine();\n    this._passCount = passCount;\n    //  We need a depth texture for opaque\n    if (!scene.enablePrePassRenderer()) {\n      Logger.Warn(\"Depth peeling for order independant transparency could not enable PrePass, aborting.\");\n      return;\n    }\n    for (let i = 0; i < this._layoutCacheFormat.length; ++i) {\n      this._layoutCache[i] = this._engine.buildTextureLayout(this._layoutCacheFormat[i]);\n    }\n    this._renderPassIds = [];\n    this.useRenderPasses = false;\n    this._prePassEffectConfiguration = new DepthPeelingEffectConfiguration();\n    this._createTextures();\n    this._createEffects();\n  }\n  /**\n   * Number of depth peeling passes. As we are using dual depth peeling, each pass two levels of transparency are processed.\n   */\n  get passCount() {\n    return this._passCount;\n  }\n  set passCount(count) {\n    if (this._passCount === count) {\n      return;\n    }\n    this._passCount = count;\n    this._createRenderPassIds();\n  }\n  /**\n   * Instructs the renderer to use render passes. It is an optimization that makes the rendering faster for some engines (like WebGPU) but that consumes more memory, so it is disabled by default.\n   */\n  get useRenderPasses() {\n    return this._useRenderPasses;\n  }\n  set useRenderPasses(usePasses) {\n    if (this._useRenderPasses === usePasses) {\n      return;\n    }\n    this._useRenderPasses = usePasses;\n    this._createRenderPassIds();\n  }\n  /**\n   * Add a mesh in the exclusion list to prevent it to be handled by the depth peeling renderer\n   * @param mesh The mesh to exclude from the depth peeling renderer\n   */\n  addExcludedMesh(mesh) {\n    if (this._excludedMeshes.indexOf(mesh.uniqueId) === -1) {\n      this._excludedMeshes.push(mesh.uniqueId);\n    }\n  }\n  /**\n   * Remove a mesh from the exclusion list of the depth peeling renderer\n   * @param mesh The mesh to remove\n   */\n  removeExcludedMesh(mesh) {\n    const index = this._excludedMeshes.indexOf(mesh.uniqueId);\n    if (index !== -1) {\n      this._excludedMeshes.splice(index, 1);\n    }\n  }\n  _createRenderPassIds() {\n    this._releaseRenderPassIds();\n    if (this._useRenderPasses) {\n      for (let i = 0; i < this._passCount + 1; ++i) {\n        if (!this._renderPassIds[i]) {\n          this._renderPassIds[i] = this._engine.createRenderPassId(`DepthPeelingRenderer - pass #${i}`);\n        }\n      }\n    }\n  }\n  _releaseRenderPassIds() {\n    for (let i = 0; i < this._renderPassIds.length; ++i) {\n      this._engine.releaseRenderPassId(this._renderPassIds[i]);\n    }\n    this._renderPassIds = [];\n  }\n  _createTextures() {\n    const size = {\n      width: this._engine.getRenderWidth(),\n      height: this._engine.getRenderHeight()\n    };\n    // 2 for ping pong\n    this._depthMrts = [new MultiRenderTarget(\"depthPeelingDepth0\", size, 3, this._scene), new MultiRenderTarget(\"depthPeelingDepth1\", size, 3, this._scene)];\n    this._colorMrts = [new MultiRenderTarget(\"depthPeelingColor0\", size, 2, this._scene, {\n      generateDepthBuffer: false\n    }), new MultiRenderTarget(\"depthPeelingColor1\", size, 2, this._scene, {\n      generateDepthBuffer: false\n    })];\n    this._blendBackMrt = new MultiRenderTarget(\"depthPeelingBack\", size, 1, this._scene, {\n      generateDepthBuffer: false\n    });\n    this._outputRT = new RenderTargetTexture(\"depthPeelingOutput\", size, this._scene, false);\n    // 0 is a depth texture\n    // 1 is a color texture\n    const optionsArray = [{\n      format: 7,\n      samplingMode: 1,\n      type: this._engine.getCaps().textureFloatLinearFiltering ? 1 : 2\n    }, {\n      format: 5,\n      samplingMode: 1,\n      type: 2 // For MSAA we need FLOAT\n    }];\n\n    for (let i = 0; i < 2; i++) {\n      const depthTexture = this._engine._createInternalTexture(size, optionsArray[0], false);\n      const frontColorTexture = this._engine._createInternalTexture(size, optionsArray[1], false);\n      const backColorTexture = this._engine._createInternalTexture(size, optionsArray[1], false);\n      this._depthMrts[i].setInternalTexture(depthTexture, 0);\n      this._depthMrts[i].setInternalTexture(frontColorTexture, 1);\n      this._depthMrts[i].setInternalTexture(backColorTexture, 2);\n      this._colorMrts[i].setInternalTexture(frontColorTexture, 0);\n      this._colorMrts[i].setInternalTexture(backColorTexture, 1);\n      this._thinTextures.push(new ThinTexture(depthTexture), new ThinTexture(frontColorTexture), new ThinTexture(backColorTexture));\n    }\n  }\n  // TODO : explore again MSAA with depth peeling when\n  // we are able to fetch individual samples in a multisampled renderbuffer\n  // public set samples(value: number) {\n  //     for (let i = 0; i < 2; i++) {\n  //         this._depthMrts[i].samples = value;\n  //         this._colorMrts[i].samples = value;\n  //     }\n  //     this._scene.prePassRenderer!.samples = value;\n  // }\n  _disposeTextures() {\n    for (let i = 0; i < this._thinTextures.length; i++) {\n      if (i === 6) {\n        // Do not dispose the shared texture with the prepass\n        continue;\n      }\n      this._thinTextures[i].dispose();\n    }\n    for (let i = 0; i < 2; i++) {\n      this._depthMrts[i].dispose(true);\n      this._colorMrts[i].dispose(true);\n      this._blendBackMrt.dispose(true);\n    }\n    this._outputRT.dispose();\n    this._thinTextures = [];\n    this._colorMrts = [];\n    this._depthMrts = [];\n  }\n  _updateTextures() {\n    if (this._depthMrts[0].getSize().width !== this._engine.getRenderWidth() || this._depthMrts[0].getSize().height !== this._engine.getRenderHeight()) {\n      this._disposeTextures();\n      this._createTextures();\n    }\n    return this._updateTextureReferences();\n  }\n  _updateTextureReferences() {\n    var _a;\n    const prePassRenderer = this._scene.prePassRenderer;\n    if (!prePassRenderer) {\n      return false;\n    }\n    // Retrieve opaque color texture\n    const textureIndex = prePassRenderer.getIndex(4);\n    const prePassTexture = ((_a = prePassRenderer.defaultRT.textures) === null || _a === void 0 ? void 0 : _a.length) ? prePassRenderer.defaultRT.textures[textureIndex].getInternalTexture() : null;\n    if (!prePassTexture) {\n      return false;\n    }\n    if (this._blendBackTexture !== prePassTexture) {\n      this._blendBackTexture = prePassTexture;\n      this._blendBackMrt.setInternalTexture(this._blendBackTexture, 0);\n      if (this._thinTextures[6]) {\n        this._thinTextures[6].dispose();\n      }\n      this._thinTextures[6] = new ThinTexture(this._blendBackTexture);\n      prePassRenderer.defaultRT.renderTarget._shareDepth(this._depthMrts[0].renderTarget);\n    }\n    return true;\n  }\n  _createEffects() {\n    this._blendBackEffectWrapper = new EffectWrapper({\n      fragmentShader: \"oitBackBlend\",\n      useShaderStore: true,\n      engine: this._engine,\n      samplerNames: [\"uBackColor\"],\n      uniformNames: []\n    });\n    this._blendBackEffectWrapperPingPong = new EffectWrapper({\n      fragmentShader: \"oitBackBlend\",\n      useShaderStore: true,\n      engine: this._engine,\n      samplerNames: [\"uBackColor\"],\n      uniformNames: []\n    });\n    this._finalEffectWrapper = new EffectWrapper({\n      fragmentShader: \"oitFinal\",\n      useShaderStore: true,\n      engine: this._engine,\n      samplerNames: [\"uFrontColor\", \"uBackColor\"],\n      uniformNames: []\n    });\n    this._effectRenderer = new EffectRenderer(this._engine);\n  }\n  /**\n   * Links to the prepass renderer\n   * @param prePassRenderer The scene PrePassRenderer\n   */\n  setPrePassRenderer(prePassRenderer) {\n    prePassRenderer.addEffectConfiguration(this._prePassEffectConfiguration);\n  }\n  /**\n   * Binds depth peeling textures on an effect\n   * @param effect The effect to bind textures on\n   */\n  bind(effect) {\n    effect.setTexture(\"oitDepthSampler\", this._thinTextures[this._currentPingPongState * 3]);\n    effect.setTexture(\"oitFrontColorSampler\", this._thinTextures[this._currentPingPongState * 3 + 1]);\n  }\n  _renderSubMeshes(transparentSubMeshes) {\n    let mapMaterialContext;\n    if (this._useRenderPasses) {\n      mapMaterialContext = {};\n    }\n    for (let j = 0; j < transparentSubMeshes.length; j++) {\n      const material = transparentSubMeshes.data[j].getMaterial();\n      let previousShaderHotSwapping = true;\n      let previousBFC = false;\n      const subMesh = transparentSubMeshes.data[j];\n      let drawWrapper;\n      let firstDraw = false;\n      if (this._useRenderPasses) {\n        drawWrapper = subMesh._getDrawWrapper();\n        firstDraw = !drawWrapper;\n      }\n      if (material) {\n        previousShaderHotSwapping = material.allowShaderHotSwapping;\n        previousBFC = material.backFaceCulling;\n        material.allowShaderHotSwapping = false;\n        material.backFaceCulling = false;\n      }\n      subMesh.render(false);\n      if (firstDraw) {\n        // first time we draw this submesh: we replace the material context\n        drawWrapper = subMesh._getDrawWrapper(); // we are sure it is now non empty as we just rendered the submesh\n        if (drawWrapper.materialContext) {\n          let newMaterialContext = mapMaterialContext[drawWrapper.materialContext.uniqueId];\n          if (!newMaterialContext) {\n            newMaterialContext = mapMaterialContext[drawWrapper.materialContext.uniqueId] = this._engine.createMaterialContext();\n          }\n          subMesh._getDrawWrapper().materialContext = newMaterialContext;\n        }\n      }\n      if (material) {\n        material.allowShaderHotSwapping = previousShaderHotSwapping;\n        material.backFaceCulling = previousBFC;\n      }\n    }\n  }\n  _finalCompose(writeId) {\n    var _a;\n    const output = (_a = this._scene.prePassRenderer) === null || _a === void 0 ? void 0 : _a.setCustomOutput(this._outputRT);\n    if (output) {\n      this._engine.bindFramebuffer(this._outputRT.renderTarget);\n    } else {\n      this._engine.restoreDefaultFramebuffer();\n    }\n    this._engine.setAlphaMode(0);\n    this._engine.applyStates();\n    this._engine.enableEffect(this._finalEffectWrapper._drawWrapper);\n    this._finalEffectWrapper.effect.setTexture(\"uFrontColor\", this._thinTextures[writeId * 3 + 1]);\n    this._finalEffectWrapper.effect.setTexture(\"uBackColor\", this._thinTextures[6]);\n    this._effectRenderer.render(this._finalEffectWrapper);\n  }\n  /**\n   * Renders transparent submeshes with depth peeling\n   * @param transparentSubMeshes List of transparent meshes to render\n   * @returns The array of submeshes that could not be handled by this renderer\n   */\n  render(transparentSubMeshes) {\n    this._candidateSubMeshes.length = 0;\n    this._excludedSubMeshes.length = 0;\n    if (!this._blendBackEffectWrapper.effect.isReady() || !this._blendBackEffectWrapperPingPong.effect.isReady() || !this._finalEffectWrapper.effect.isReady() || !this._updateTextures()) {\n      return this._excludedSubMeshes;\n    }\n    for (let i = 0; i < transparentSubMeshes.length; i++) {\n      const subMesh = transparentSubMeshes.data[i];\n      const material = subMesh.getMaterial();\n      if (material && (material.fillMode === Material.TriangleFanDrawMode || material.fillMode === Material.TriangleFillMode || material.fillMode === Material.TriangleStripDrawMode) && this._excludedMeshes.indexOf(subMesh.getMesh().uniqueId) === -1) {\n        this._candidateSubMeshes.push(subMesh);\n      } else {\n        this._excludedSubMeshes.push(subMesh);\n      }\n    }\n    if (!this._candidateSubMeshes.length) {\n      this._engine.bindFramebuffer(this._colorMrts[1].renderTarget);\n      this._engine.bindAttachments(this._layoutCache[1]);\n      this._engine.clear(this._colorCache[2], true, false, false);\n      this._engine.unBindFramebuffer(this._colorMrts[1].renderTarget);\n      this._finalCompose(1);\n      return this._excludedSubMeshes;\n    }\n    const currentRenderPassId = this._engine.currentRenderPassId;\n    this._scene.prePassRenderer._enabled = false;\n    if (this._useRenderPasses) {\n      this._engine.currentRenderPassId = this._renderPassIds[0];\n    }\n    // Clears\n    this._engine.bindFramebuffer(this._depthMrts[0].renderTarget);\n    this._engine.bindAttachments(this._layoutCache[0]);\n    this._engine.clear(this._colorCache[0], true, false, false);\n    this._engine.unBindFramebuffer(this._depthMrts[0].renderTarget);\n    this._engine.bindFramebuffer(this._depthMrts[1].renderTarget);\n    this._engine.bindAttachments(this._layoutCache[0]);\n    this._engine.clear(this._colorCache[1], true, false, false);\n    this._engine.unBindFramebuffer(this._depthMrts[1].renderTarget);\n    this._engine.bindFramebuffer(this._colorMrts[0].renderTarget);\n    this._engine.bindAttachments(this._layoutCache[1]);\n    this._engine.clear(this._colorCache[2], true, false, false);\n    this._engine.unBindFramebuffer(this._colorMrts[0].renderTarget);\n    this._engine.bindFramebuffer(this._colorMrts[1].renderTarget);\n    this._engine.bindAttachments(this._layoutCache[1]);\n    this._engine.clear(this._colorCache[2], true, false, false);\n    this._engine.unBindFramebuffer(this._colorMrts[1].renderTarget);\n    // Draw depth for first pass\n    this._engine.bindFramebuffer(this._depthMrts[0].renderTarget);\n    this._engine.bindAttachments(this._layoutCache[0]);\n    this._engine.setAlphaMode(11); // in WebGPU, when using MIN or MAX equation, the src / dst color factors should not use SRC_ALPHA and the src / dst alpha factors must be 1 else WebGPU will throw a validation error\n    this._engine.setAlphaEquation(3);\n    this._engine.depthCullingState.depthMask = false;\n    this._engine.depthCullingState.depthTest = true;\n    this._engine.applyStates();\n    this._currentPingPongState = 1;\n    // Render\n    this._renderSubMeshes(this._candidateSubMeshes);\n    this._engine.unBindFramebuffer(this._depthMrts[0].renderTarget);\n    this._scene.resetCachedMaterial();\n    // depth peeling ping-pong\n    let readId = 0;\n    let writeId = 0;\n    for (let i = 0; i < this._passCount; i++) {\n      readId = i % 2;\n      writeId = 1 - readId;\n      this._currentPingPongState = readId;\n      if (this._useRenderPasses) {\n        this._engine.currentRenderPassId = this._renderPassIds[i + 1];\n      }\n      // Clears\n      this._engine.bindFramebuffer(this._depthMrts[writeId].renderTarget);\n      this._engine.bindAttachments(this._layoutCache[0]);\n      this._engine.clear(this._colorCache[0], true, false, false);\n      this._engine.unBindFramebuffer(this._depthMrts[writeId].renderTarget);\n      this._engine.bindFramebuffer(this._colorMrts[writeId].renderTarget);\n      this._engine.bindAttachments(this._layoutCache[1]);\n      this._engine.clear(this._colorCache[2], true, false, false);\n      this._engine.unBindFramebuffer(this._colorMrts[writeId].renderTarget);\n      this._engine.bindFramebuffer(this._depthMrts[writeId].renderTarget);\n      this._engine.bindAttachments(this._layoutCache[2]);\n      this._engine.setAlphaMode(11); // the value does not matter (as MAX operation does not use them) but the src and dst color factors should not use SRC_ALPHA else WebGPU will throw a validation error\n      this._engine.setAlphaEquation(3);\n      this._engine.depthCullingState.depthTest = false;\n      this._engine.applyStates();\n      // Render\n      this._renderSubMeshes(this._candidateSubMeshes);\n      this._engine.unBindFramebuffer(this._depthMrts[writeId].renderTarget);\n      this._scene.resetCachedMaterial();\n      // Back color\n      this._engine.bindFramebuffer(this._blendBackMrt.renderTarget);\n      this._engine.bindAttachments(this._layoutCache[0]);\n      this._engine.setAlphaEquation(0);\n      this._engine.setAlphaMode(17);\n      this._engine.applyStates();\n      const blendBackEffectWrapper = writeId === 0 || !this._useRenderPasses ? this._blendBackEffectWrapper : this._blendBackEffectWrapperPingPong;\n      this._engine.enableEffect(blendBackEffectWrapper._drawWrapper);\n      blendBackEffectWrapper.effect.setTexture(\"uBackColor\", this._thinTextures[writeId * 3 + 2]);\n      this._effectRenderer.render(blendBackEffectWrapper);\n      this._engine.unBindFramebuffer(this._blendBackMrt.renderTarget);\n    }\n    this._engine.currentRenderPassId = currentRenderPassId;\n    // Final composition on default FB\n    this._finalCompose(writeId);\n    this._scene.prePassRenderer._enabled = true;\n    this._engine.depthCullingState.depthMask = true;\n    this._engine.depthCullingState.depthTest = true;\n    return this._excludedSubMeshes;\n  }\n  /**\n   * Disposes the depth peeling renderer and associated ressources\n   */\n  dispose() {\n    this._disposeTextures();\n    this._blendBackEffectWrapper.dispose();\n    this._finalEffectWrapper.dispose();\n    this._effectRenderer.dispose();\n    this._releaseRenderPassIds();\n  }\n}\nDepthPeelingRenderer._DEPTH_CLEAR_VALUE = -99999.0;\nDepthPeelingRenderer._MIN_DEPTH = 0;\nDepthPeelingRenderer._MAX_DEPTH = 1;","map":{"version":3,"mappings":";AAAA;;;;AAMA,SAASA,iBAAiB,QAAQ,4CAA0C;AAE5E,SAASC,MAAM,QAAQ,wBAAsB;AAG7C,SAASC,UAAU,QAAQ,uBAAqB;AAEhD,SAASC,WAAW,QAAQ,sCAAoC;AAChE,SAASC,cAAc,EAAEC,aAAa,QAAQ,gCAA8B;AAI5E,SAASC,mBAAmB,QAAQ,8CAA4C;AAChF,SAASC,MAAM,QAAQ,mBAAiB;AAGxC,SAASC,QAAQ,QAAQ,0BAAwB;AAEjD,OAAO,kCAAgC;AACvC,OAAO,iCAA+B;AACtC,OAAO,qCAAmC;AAE1C,MAAMC,+BAA+B;EAArCC;IACI;;;IAGO,YAAO,GAAG,IAAI;IAErB;;;IAGO,SAAI,GAAG,cAAc;IAE5B;;;IAGgB,qBAAgB,GAAa,CAAC;EAClD;;AAEA;;;;;AAKA,OAAM,MAAOC,oBAAoB;EAwF7B;;;;;;EAMAD,YAAYE,KAAY,EAAEC,YAAoB,CAAC;IA1FvC,kBAAa,GAAkB,EAAE;IAUjC,0BAAqB,GAAW,CAAC;IAIjC,uBAAkB,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAC/D,iBAAY,GAAe,EAAE;IAE7B,wBAAmB,GAAwB,IAAIX,UAAU,CAAC,EAAE,CAAC;IAC7D,uBAAkB,GAAwB,IAAIA,UAAU,CAAC,EAAE,CAAC;IAC5D,oBAAe,GAAa,EAAE;IAM9B,gBAAW,GAAG,CAClB,IAAID,MAAM,CAACU,oBAAoB,CAACG,kBAAkB,EAAEH,oBAAoB,CAACG,kBAAkB,EAAE,CAAC,EAAE,CAAC,CAAC,EAClG,IAAIb,MAAM,CAAC,CAACU,oBAAoB,CAACI,UAAU,EAAEJ,oBAAoB,CAACK,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC,EACnF,IAAIf,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACzB;IA8DG,IAAI,CAACgB,MAAM,GAAGL,KAAK;IACnB,IAAI,CAACM,OAAO,GAAGN,KAAK,CAACO,SAAS,EAAE;IAChC,IAAI,CAACC,UAAU,GAAGP,SAAS;IAE3B;IACA,IAAI,CAACD,KAAK,CAACS,qBAAqB,EAAE,EAAE;MAChCd,MAAM,CAACe,IAAI,CAAC,sFAAsF,CAAC;MACnG;;IAGJ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACC,kBAAkB,CAACC,MAAM,EAAE,EAAEF,CAAC,EAAE;MACrD,IAAI,CAACG,YAAY,CAACH,CAAC,CAAC,GAAG,IAAI,CAACL,OAAO,CAACS,kBAAkB,CAAC,IAAI,CAACH,kBAAkB,CAACD,CAAC,CAAC,CAAC;;IAGtF,IAAI,CAACK,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,eAAe,GAAG,KAAK;IAE5B,IAAI,CAACC,2BAA2B,GAAG,IAAIrB,+BAA+B,EAAE;IACxE,IAAI,CAACsB,eAAe,EAAE;IACtB,IAAI,CAACC,cAAc,EAAE;EACzB;EA/EA;;;EAGA,IAAWnB,SAAS;IAChB,OAAO,IAAI,CAACO,UAAU;EAC1B;EAEA,IAAWP,SAAS,CAACoB,KAAa;IAC9B,IAAI,IAAI,CAACb,UAAU,KAAKa,KAAK,EAAE;MAC3B;;IAEJ,IAAI,CAACb,UAAU,GAAGa,KAAK;IACvB,IAAI,CAACC,oBAAoB,EAAE;EAC/B;EAGA;;;EAGA,IAAWL,eAAe;IACtB,OAAO,IAAI,CAACM,gBAAgB;EAChC;EAEA,IAAWN,eAAe,CAACO,SAAkB;IACzC,IAAI,IAAI,CAACD,gBAAgB,KAAKC,SAAS,EAAE;MACrC;;IAEJ,IAAI,CAACD,gBAAgB,GAAGC,SAAS;IACjC,IAAI,CAACF,oBAAoB,EAAE;EAC/B;EAEA;;;;EAIOG,eAAe,CAACC,IAAkB;IACrC,IAAI,IAAI,CAACC,eAAe,CAACC,OAAO,CAACF,IAAI,CAACG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;MACpD,IAAI,CAACF,eAAe,CAACG,IAAI,CAACJ,IAAI,CAACG,QAAQ,CAAC;;EAEhD;EAEA;;;;EAIOE,kBAAkB,CAACL,IAAkB;IACxC,MAAMM,KAAK,GAAG,IAAI,CAACL,eAAe,CAACC,OAAO,CAACF,IAAI,CAACG,QAAQ,CAAC;IACzD,IAAIG,KAAK,KAAK,CAAC,CAAC,EAAE;MACd,IAAI,CAACL,eAAe,CAACM,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;;EAE7C;EA+BQV,oBAAoB;IACxB,IAAI,CAACY,qBAAqB,EAAE;IAC5B,IAAI,IAAI,CAACX,gBAAgB,EAAE;MACvB,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACH,UAAU,GAAG,CAAC,EAAE,EAAEG,CAAC,EAAE;QAC1C,IAAI,CAAC,IAAI,CAACK,cAAc,CAACL,CAAC,CAAC,EAAE;UACzB,IAAI,CAACK,cAAc,CAACL,CAAC,CAAC,GAAG,IAAI,CAACL,OAAO,CAAC6B,kBAAkB,CAAC,gCAAgCxB,CAAC,EAAE,CAAC;;;;EAI7G;EAEQuB,qBAAqB;IACzB,KAAK,IAAIvB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACK,cAAc,CAACH,MAAM,EAAE,EAAEF,CAAC,EAAE;MACjD,IAAI,CAACL,OAAO,CAAC8B,mBAAmB,CAAC,IAAI,CAACpB,cAAc,CAACL,CAAC,CAAC,CAAC;;IAE5D,IAAI,CAACK,cAAc,GAAG,EAAE;EAC5B;EAEQG,eAAe;IACnB,MAAMkB,IAAI,GAAG;MACTC,KAAK,EAAE,IAAI,CAAChC,OAAO,CAACiC,cAAc,EAAE;MACpCC,MAAM,EAAE,IAAI,CAAClC,OAAO,CAACmC,eAAe;KACvC;IAED;IACA,IAAI,CAACC,UAAU,GAAG,CAAC,IAAItD,iBAAiB,CAAC,oBAAoB,EAAEiD,IAAI,EAAE,CAAC,EAAE,IAAI,CAAChC,MAAM,CAAC,EAAE,IAAIjB,iBAAiB,CAAC,oBAAoB,EAAEiD,IAAI,EAAE,CAAC,EAAE,IAAI,CAAChC,MAAM,CAAC,CAAC;IACxJ,IAAI,CAACsC,UAAU,GAAG,CACd,IAAIvD,iBAAiB,CAAC,oBAAoB,EAAEiD,IAAI,EAAE,CAAC,EAAE,IAAI,CAAChC,MAAM,EAAE;MAAEuC,mBAAmB,EAAE;IAAK,CAAE,CAAC,EACjG,IAAIxD,iBAAiB,CAAC,oBAAoB,EAAEiD,IAAI,EAAE,CAAC,EAAE,IAAI,CAAChC,MAAM,EAAE;MAAEuC,mBAAmB,EAAE;IAAK,CAAE,CAAC,CACpG;IACD,IAAI,CAACC,aAAa,GAAG,IAAIzD,iBAAiB,CAAC,kBAAkB,EAAEiD,IAAI,EAAE,CAAC,EAAE,IAAI,CAAChC,MAAM,EAAE;MAAEuC,mBAAmB,EAAE;IAAK,CAAE,CAAC;IACpH,IAAI,CAACE,SAAS,GAAG,IAAIpD,mBAAmB,CAAC,oBAAoB,EAAE2C,IAAI,EAAE,IAAI,CAAChC,MAAM,EAAE,KAAK,CAAC;IAExF;IACA;IACA,MAAM0C,YAAY,GAAG,CACjB;MACIC,MAAM,EAAE;MACRC,YAAY,EAAE;MACdC,IAAI,EAAE,IAAI,CAAC5C,OAAO,CAAC6C,OAAO,EAAE,CAACC,2BAA2B,GAAG;KAC5B,EACnC;MACIJ,MAAM,EAAE;MACRC,YAAY,EAAE;MACdC,IAAI,EAAE;KACyB,CACtC;;IAED,KAAK,IAAIvC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACxB,MAAM0C,YAAY,GAAG,IAAI,CAAC/C,OAAO,CAACgD,sBAAsB,CAACjB,IAAI,EAAEU,YAAY,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;MACtF,MAAMQ,iBAAiB,GAAG,IAAI,CAACjD,OAAO,CAACgD,sBAAsB,CAACjB,IAAI,EAAEU,YAAY,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;MAC3F,MAAMS,gBAAgB,GAAG,IAAI,CAAClD,OAAO,CAACgD,sBAAsB,CAACjB,IAAI,EAAEU,YAAY,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;MAE1F,IAAI,CAACL,UAAU,CAAC/B,CAAC,CAAC,CAAC8C,kBAAkB,CAACJ,YAAY,EAAE,CAAC,CAAC;MACtD,IAAI,CAACX,UAAU,CAAC/B,CAAC,CAAC,CAAC8C,kBAAkB,CAACF,iBAAiB,EAAE,CAAC,CAAC;MAC3D,IAAI,CAACb,UAAU,CAAC/B,CAAC,CAAC,CAAC8C,kBAAkB,CAACD,gBAAgB,EAAE,CAAC,CAAC;MAC1D,IAAI,CAACb,UAAU,CAAChC,CAAC,CAAC,CAAC8C,kBAAkB,CAACF,iBAAiB,EAAE,CAAC,CAAC;MAC3D,IAAI,CAACZ,UAAU,CAAChC,CAAC,CAAC,CAAC8C,kBAAkB,CAACD,gBAAgB,EAAE,CAAC,CAAC;MAE1D,IAAI,CAACE,aAAa,CAAC5B,IAAI,CAAC,IAAIvC,WAAW,CAAC8D,YAAY,CAAC,EAAE,IAAI9D,WAAW,CAACgE,iBAAiB,CAAC,EAAE,IAAIhE,WAAW,CAACiE,gBAAgB,CAAC,CAAC;;EAErI;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEQG,gBAAgB;IACpB,KAAK,IAAIhD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC+C,aAAa,CAAC7C,MAAM,EAAEF,CAAC,EAAE,EAAE;MAChD,IAAIA,CAAC,KAAK,CAAC,EAAE;QACT;QACA;;MAEJ,IAAI,CAAC+C,aAAa,CAAC/C,CAAC,CAAC,CAACiD,OAAO,EAAE;;IAGnC,KAAK,IAAIjD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACxB,IAAI,CAAC+B,UAAU,CAAC/B,CAAC,CAAC,CAACiD,OAAO,CAAC,IAAI,CAAC;MAChC,IAAI,CAACjB,UAAU,CAAChC,CAAC,CAAC,CAACiD,OAAO,CAAC,IAAI,CAAC;MAChC,IAAI,CAACf,aAAa,CAACe,OAAO,CAAC,IAAI,CAAC;;IAEpC,IAAI,CAACd,SAAS,CAACc,OAAO,EAAE;IAExB,IAAI,CAACF,aAAa,GAAG,EAAE;IACvB,IAAI,CAACf,UAAU,GAAG,EAAE;IACpB,IAAI,CAACD,UAAU,GAAG,EAAE;EACxB;EAEQmB,eAAe;IACnB,IAAI,IAAI,CAACnB,UAAU,CAAC,CAAC,CAAC,CAACoB,OAAO,EAAE,CAACxB,KAAK,KAAK,IAAI,CAAChC,OAAO,CAACiC,cAAc,EAAE,IAAI,IAAI,CAACG,UAAU,CAAC,CAAC,CAAC,CAACoB,OAAO,EAAE,CAACtB,MAAM,KAAK,IAAI,CAAClC,OAAO,CAACmC,eAAe,EAAE,EAAE;MAChJ,IAAI,CAACkB,gBAAgB,EAAE;MACvB,IAAI,CAACxC,eAAe,EAAE;;IAE1B,OAAO,IAAI,CAAC4C,wBAAwB,EAAE;EAC1C;EAEQA,wBAAwB;;IAC5B,MAAMC,eAAe,GAAG,IAAI,CAAC3D,MAAM,CAAC2D,eAAe;IAEnD,IAAI,CAACA,eAAe,EAAE;MAClB,OAAO,KAAK;;IAGhB;IACA,MAAMC,YAAY,GAAGD,eAAe,CAACE,QAAQ,CAAC;IAC9C,MAAMC,cAAc,GAAG,sBAAe,CAACC,SAAS,CAACC,QAAQ,0CAAExD,MAAM,IAAGmD,eAAe,CAACI,SAAS,CAACC,QAAQ,CAACJ,YAAY,CAAC,CAACK,kBAAkB,EAAE,GAAG,IAAI;IAEhJ,IAAI,CAACH,cAAc,EAAE;MACjB,OAAO,KAAK;;IAGhB,IAAI,IAAI,CAACI,iBAAiB,KAAKJ,cAAc,EAAE;MAC3C,IAAI,CAACI,iBAAiB,GAAGJ,cAAc;MACvC,IAAI,CAACtB,aAAa,CAACY,kBAAkB,CAAC,IAAI,CAACc,iBAAiB,EAAE,CAAC,CAAC;MAEhE,IAAI,IAAI,CAACb,aAAa,CAAC,CAAC,CAAC,EAAE;QACvB,IAAI,CAACA,aAAa,CAAC,CAAC,CAAC,CAACE,OAAO,EAAE;;MAEnC,IAAI,CAACF,aAAa,CAAC,CAAC,CAAC,GAAG,IAAInE,WAAW,CAAC,IAAI,CAACgF,iBAAiB,CAAC;MAE/DP,eAAe,CAACI,SAAS,CAACI,YAAa,CAACC,WAAW,CAAC,IAAI,CAAC/B,UAAU,CAAC,CAAC,CAAC,CAAC8B,YAAa,CAAC;;IAGzF,OAAO,IAAI;EACf;EAEQpD,cAAc;IAClB,IAAI,CAACsD,uBAAuB,GAAG,IAAIjF,aAAa,CAAC;MAC7CkF,cAAc,EAAE,cAAc;MAC9BC,cAAc,EAAE,IAAI;MACpBC,MAAM,EAAE,IAAI,CAACvE,OAAO;MACpBwE,YAAY,EAAE,CAAC,YAAY,CAAC;MAC5BC,YAAY,EAAE;KACjB,CAAC;IACF,IAAI,CAACC,+BAA+B,GAAG,IAAIvF,aAAa,CAAC;MACrDkF,cAAc,EAAE,cAAc;MAC9BC,cAAc,EAAE,IAAI;MACpBC,MAAM,EAAE,IAAI,CAACvE,OAAO;MACpBwE,YAAY,EAAE,CAAC,YAAY,CAAC;MAC5BC,YAAY,EAAE;KACjB,CAAC;IAEF,IAAI,CAACE,mBAAmB,GAAG,IAAIxF,aAAa,CAAC;MACzCkF,cAAc,EAAE,UAAU;MAC1BC,cAAc,EAAE,IAAI;MACpBC,MAAM,EAAE,IAAI,CAACvE,OAAO;MACpBwE,YAAY,EAAE,CAAC,aAAa,EAAE,YAAY,CAAC;MAC3CC,YAAY,EAAE;KACjB,CAAC;IAEF,IAAI,CAACG,eAAe,GAAG,IAAI1F,cAAc,CAAC,IAAI,CAACc,OAAO,CAAC;EAC3D;EAEA;;;;EAIO6E,kBAAkB,CAACnB,eAAgC;IACtDA,eAAe,CAACoB,sBAAsB,CAAC,IAAI,CAAClE,2BAA2B,CAAC;EAC5E;EAEA;;;;EAIOmE,IAAI,CAACC,MAAc;IACtBA,MAAM,CAACC,UAAU,CAAC,iBAAiB,EAAE,IAAI,CAAC7B,aAAa,CAAC,IAAI,CAAC8B,qBAAqB,GAAG,CAAC,CAAC,CAAC;IACxFF,MAAM,CAACC,UAAU,CAAC,sBAAsB,EAAE,IAAI,CAAC7B,aAAa,CAAC,IAAI,CAAC8B,qBAAqB,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EACrG;EAEQC,gBAAgB,CAACC,oBAAyC;IAC9D,IAAIC,kBAAwE;IAC5E,IAAI,IAAI,CAACpE,gBAAgB,EAAE;MACvBoE,kBAAkB,GAAG,EAAE;;IAE3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,oBAAoB,CAAC7E,MAAM,EAAE+E,CAAC,EAAE,EAAE;MAClD,MAAMC,QAAQ,GAAGH,oBAAoB,CAACI,IAAI,CAACF,CAAC,CAAC,CAACG,WAAW,EAAE;MAC3D,IAAIC,yBAAyB,GAAG,IAAI;MACpC,IAAIC,WAAW,GAAG,KAAK;MAEvB,MAAMC,OAAO,GAAGR,oBAAoB,CAACI,IAAI,CAACF,CAAC,CAAC;MAC5C,IAAIO,WAAoC;MACxC,IAAIC,SAAS,GAAG,KAAK;MAErB,IAAI,IAAI,CAAC7E,gBAAgB,EAAE;QACvB4E,WAAW,GAAGD,OAAO,CAACG,eAAe,EAAE;QACvCD,SAAS,GAAG,CAACD,WAAW;;MAG5B,IAAIN,QAAQ,EAAE;QACVG,yBAAyB,GAAGH,QAAQ,CAACS,sBAAsB;QAC3DL,WAAW,GAAGJ,QAAQ,CAACU,eAAe;QACtCV,QAAQ,CAACS,sBAAsB,GAAG,KAAK;QACvCT,QAAQ,CAACU,eAAe,GAAG,KAAK;;MAGpCL,OAAO,CAACM,MAAM,CAAC,KAAK,CAAC;MAErB,IAAIJ,SAAS,EAAE;QACX;QACAD,WAAW,GAAGD,OAAO,CAACG,eAAe,EAAG,CAAC,CAAC;QAC1C,IAAIF,WAAW,CAACM,eAAe,EAAE;UAC7B,IAAIC,kBAAkB,GAAGf,kBAAmB,CAACQ,WAAW,CAACM,eAAe,CAAC5E,QAAQ,CAAC;UAClF,IAAI,CAAC6E,kBAAkB,EAAE;YACrBA,kBAAkB,GAAGf,kBAAmB,CAACQ,WAAW,CAACM,eAAe,CAAC5E,QAAQ,CAAC,GAAG,IAAI,CAACvB,OAAO,CAACqG,qBAAqB,EAAE;;UAEzHT,OAAO,CAACG,eAAe,EAAG,CAACI,eAAe,GAAGC,kBAAkB;;;MAIvE,IAAIb,QAAQ,EAAE;QACVA,QAAQ,CAACS,sBAAsB,GAAGN,yBAAyB;QAC3DH,QAAQ,CAACU,eAAe,GAAGN,WAAW;;;EAGlD;EAEQW,aAAa,CAACC,OAAe;;IACjC,MAAMC,MAAM,GAAG,UAAI,CAACzG,MAAM,CAAC2D,eAAe,0CAAE+C,eAAe,CAAC,IAAI,CAACjE,SAAS,CAAC;IAC3E,IAAIgE,MAAM,EAAE;MACR,IAAI,CAACxG,OAAO,CAAC0G,eAAe,CAAC,IAAI,CAAClE,SAAS,CAAC0B,YAAa,CAAC;KAC7D,MAAM;MACH,IAAI,CAAClE,OAAO,CAAC2G,yBAAyB,EAAE;;IAG5C,IAAI,CAAC3G,OAAO,CAAC4G,YAAY,CAAC;IAC1B,IAAI,CAAC5G,OAAO,CAAC6G,WAAW,EAAE;IAE1B,IAAI,CAAC7G,OAAO,CAAC8G,YAAY,CAAC,IAAI,CAACnC,mBAAmB,CAACoC,YAAY,CAAC;IAChE,IAAI,CAACpC,mBAAmB,CAACK,MAAM,CAACC,UAAU,CAAC,aAAa,EAAE,IAAI,CAAC7B,aAAa,CAACmD,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9F,IAAI,CAAC5B,mBAAmB,CAACK,MAAM,CAACC,UAAU,CAAC,YAAY,EAAE,IAAI,CAAC7B,aAAa,CAAC,CAAC,CAAC,CAAC;IAC/E,IAAI,CAACwB,eAAe,CAACsB,MAAM,CAAC,IAAI,CAACvB,mBAAmB,CAAC;EACzD;EAEA;;;;;EAKOuB,MAAM,CAACd,oBAAyC;IACnD,IAAI,CAAC4B,mBAAmB,CAACzG,MAAM,GAAG,CAAC;IACnC,IAAI,CAAC0G,kBAAkB,CAAC1G,MAAM,GAAG,CAAC;IAClC,IACI,CAAC,IAAI,CAAC6D,uBAAuB,CAACY,MAAM,CAACkC,OAAO,EAAE,IAC9C,CAAC,IAAI,CAACxC,+BAA+B,CAACM,MAAM,CAACkC,OAAO,EAAE,IACtD,CAAC,IAAI,CAACvC,mBAAmB,CAACK,MAAM,CAACkC,OAAO,EAAE,IAC1C,CAAC,IAAI,CAAC3D,eAAe,EAAE,EACzB;MACE,OAAO,IAAI,CAAC0D,kBAAkB;;IAGlC,KAAK,IAAI5G,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+E,oBAAoB,CAAC7E,MAAM,EAAEF,CAAC,EAAE,EAAE;MAClD,MAAMuF,OAAO,GAAGR,oBAAoB,CAACI,IAAI,CAACnF,CAAC,CAAC;MAC5C,MAAMkF,QAAQ,GAAGK,OAAO,CAACH,WAAW,EAAE;MAEtC,IACIF,QAAQ,KACPA,QAAQ,CAAC4B,QAAQ,KAAK7H,QAAQ,CAAC8H,mBAAmB,IAAI7B,QAAQ,CAAC4B,QAAQ,KAAK7H,QAAQ,CAAC+H,gBAAgB,IAAI9B,QAAQ,CAAC4B,QAAQ,KAAK7H,QAAQ,CAACgI,qBAAqB,CAAC,IAC/J,IAAI,CAACjG,eAAe,CAACC,OAAO,CAACsE,OAAO,CAAC2B,OAAO,EAAE,CAAChG,QAAQ,CAAC,KAAK,CAAC,CAAC,EACjE;QACE,IAAI,CAACyF,mBAAmB,CAACxF,IAAI,CAACoE,OAAO,CAAC;OACzC,MAAM;QACH,IAAI,CAACqB,kBAAkB,CAACzF,IAAI,CAACoE,OAAO,CAAC;;;IAI7C,IAAI,CAAC,IAAI,CAACoB,mBAAmB,CAACzG,MAAM,EAAE;MAClC,IAAI,CAACP,OAAO,CAAC0G,eAAe,CAAC,IAAI,CAACrE,UAAU,CAAC,CAAC,CAAC,CAAC6B,YAAa,CAAC;MAC9D,IAAI,CAAClE,OAAO,CAACwH,eAAe,CAAC,IAAI,CAAChH,YAAY,CAAC,CAAC,CAAC,CAAC;MAClD,IAAI,CAACR,OAAO,CAACyH,KAAK,CAAC,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;MAC3D,IAAI,CAAC1H,OAAO,CAAC2H,iBAAiB,CAAC,IAAI,CAACtF,UAAU,CAAC,CAAC,CAAC,CAAC6B,YAAa,CAAC;MAEhE,IAAI,CAACoC,aAAa,CAAC,CAAC,CAAC;MACrB,OAAO,IAAI,CAACW,kBAAkB;;IAGlC,MAAMW,mBAAmB,GAAG,IAAI,CAAC5H,OAAO,CAAC4H,mBAAmB;IAE3D,IAAI,CAAC7H,MAAM,CAAC2D,eAAwB,CAACmE,QAAQ,GAAG,KAAK;IAEtD,IAAI,IAAI,CAAC5G,gBAAgB,EAAE;MACvB,IAAI,CAACjB,OAAO,CAAC4H,mBAAmB,GAAG,IAAI,CAAClH,cAAc,CAAC,CAAC,CAAC;;IAG7D;IACA,IAAI,CAACV,OAAO,CAAC0G,eAAe,CAAC,IAAI,CAACtE,UAAU,CAAC,CAAC,CAAC,CAAC8B,YAAa,CAAC;IAC9D,IAAI,CAAClE,OAAO,CAACwH,eAAe,CAAC,IAAI,CAAChH,YAAY,CAAC,CAAC,CAAC,CAAC;IAClD,IAAI,CAACR,OAAO,CAACyH,KAAK,CAAC,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;IAC3D,IAAI,CAAC1H,OAAO,CAAC2H,iBAAiB,CAAC,IAAI,CAACvF,UAAU,CAAC,CAAC,CAAC,CAAC8B,YAAa,CAAC;IAEhE,IAAI,CAAClE,OAAO,CAAC0G,eAAe,CAAC,IAAI,CAACtE,UAAU,CAAC,CAAC,CAAC,CAAC8B,YAAa,CAAC;IAC9D,IAAI,CAAClE,OAAO,CAACwH,eAAe,CAAC,IAAI,CAAChH,YAAY,CAAC,CAAC,CAAC,CAAC;IAClD,IAAI,CAACR,OAAO,CAACyH,KAAK,CAAC,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;IAC3D,IAAI,CAAC1H,OAAO,CAAC2H,iBAAiB,CAAC,IAAI,CAACvF,UAAU,CAAC,CAAC,CAAC,CAAC8B,YAAa,CAAC;IAEhE,IAAI,CAAClE,OAAO,CAAC0G,eAAe,CAAC,IAAI,CAACrE,UAAU,CAAC,CAAC,CAAC,CAAC6B,YAAa,CAAC;IAC9D,IAAI,CAAClE,OAAO,CAACwH,eAAe,CAAC,IAAI,CAAChH,YAAY,CAAC,CAAC,CAAC,CAAC;IAClD,IAAI,CAACR,OAAO,CAACyH,KAAK,CAAC,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;IAC3D,IAAI,CAAC1H,OAAO,CAAC2H,iBAAiB,CAAC,IAAI,CAACtF,UAAU,CAAC,CAAC,CAAC,CAAC6B,YAAa,CAAC;IAEhE,IAAI,CAAClE,OAAO,CAAC0G,eAAe,CAAC,IAAI,CAACrE,UAAU,CAAC,CAAC,CAAC,CAAC6B,YAAa,CAAC;IAC9D,IAAI,CAAClE,OAAO,CAACwH,eAAe,CAAC,IAAI,CAAChH,YAAY,CAAC,CAAC,CAAC,CAAC;IAClD,IAAI,CAACR,OAAO,CAACyH,KAAK,CAAC,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;IAC3D,IAAI,CAAC1H,OAAO,CAAC2H,iBAAiB,CAAC,IAAI,CAACtF,UAAU,CAAC,CAAC,CAAC,CAAC6B,YAAa,CAAC;IAEhE;IACA,IAAI,CAAClE,OAAO,CAAC0G,eAAe,CAAC,IAAI,CAACtE,UAAU,CAAC,CAAC,CAAC,CAAC8B,YAAa,CAAC;IAC9D,IAAI,CAAClE,OAAO,CAACwH,eAAe,CAAC,IAAI,CAAChH,YAAY,CAAC,CAAC,CAAC,CAAC;IAElD,IAAI,CAACR,OAAO,CAAC4G,YAAY,CAAC;IAC1B,IAAI,CAAC5G,OAAO,CAAC8H,gBAAgB,CAAC;IAC9B,IAAI,CAAC9H,OAAO,CAAC+H,iBAAiB,CAACC,SAAS,GAAG,KAAK;IAChD,IAAI,CAAChI,OAAO,CAAC+H,iBAAiB,CAACE,SAAS,GAAG,IAAI;IAC/C,IAAI,CAACjI,OAAO,CAAC6G,WAAW,EAAE;IAE1B,IAAI,CAAC3B,qBAAqB,GAAG,CAAC;IAC9B;IACA,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAAC6B,mBAAmB,CAAC;IAC/C,IAAI,CAAChH,OAAO,CAAC2H,iBAAiB,CAAC,IAAI,CAACvF,UAAU,CAAC,CAAC,CAAC,CAAC8B,YAAa,CAAC;IAEhE,IAAI,CAACnE,MAAM,CAACmI,mBAAmB,EAAE;IAEjC;IACA,IAAIC,MAAM,GAAG,CAAC;IACd,IAAI5B,OAAO,GAAG,CAAC;IAEf,KAAK,IAAIlG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACH,UAAU,EAAEG,CAAC,EAAE,EAAE;MACtC8H,MAAM,GAAG9H,CAAC,GAAG,CAAC;MACdkG,OAAO,GAAG,CAAC,GAAG4B,MAAM;MACpB,IAAI,CAACjD,qBAAqB,GAAGiD,MAAM;MAEnC,IAAI,IAAI,CAAClH,gBAAgB,EAAE;QACvB,IAAI,CAACjB,OAAO,CAAC4H,mBAAmB,GAAG,IAAI,CAAClH,cAAc,CAACL,CAAC,GAAG,CAAC,CAAC;;MAGjE;MACA,IAAI,CAACL,OAAO,CAAC0G,eAAe,CAAC,IAAI,CAACtE,UAAU,CAACmE,OAAO,CAAC,CAACrC,YAAa,CAAC;MACpE,IAAI,CAAClE,OAAO,CAACwH,eAAe,CAAC,IAAI,CAAChH,YAAY,CAAC,CAAC,CAAC,CAAC;MAClD,IAAI,CAACR,OAAO,CAACyH,KAAK,CAAC,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;MAC3D,IAAI,CAAC1H,OAAO,CAAC2H,iBAAiB,CAAC,IAAI,CAACvF,UAAU,CAACmE,OAAO,CAAC,CAACrC,YAAa,CAAC;MAEtE,IAAI,CAAClE,OAAO,CAAC0G,eAAe,CAAC,IAAI,CAACrE,UAAU,CAACkE,OAAO,CAAC,CAACrC,YAAa,CAAC;MACpE,IAAI,CAAClE,OAAO,CAACwH,eAAe,CAAC,IAAI,CAAChH,YAAY,CAAC,CAAC,CAAC,CAAC;MAClD,IAAI,CAACR,OAAO,CAACyH,KAAK,CAAC,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;MAC3D,IAAI,CAAC1H,OAAO,CAAC2H,iBAAiB,CAAC,IAAI,CAACtF,UAAU,CAACkE,OAAO,CAAC,CAACrC,YAAa,CAAC;MAEtE,IAAI,CAAClE,OAAO,CAAC0G,eAAe,CAAC,IAAI,CAACtE,UAAU,CAACmE,OAAO,CAAC,CAACrC,YAAa,CAAC;MACpE,IAAI,CAAClE,OAAO,CAACwH,eAAe,CAAC,IAAI,CAAChH,YAAY,CAAC,CAAC,CAAC,CAAC;MAElD,IAAI,CAACR,OAAO,CAAC4G,YAAY,CAAC;MAC1B,IAAI,CAAC5G,OAAO,CAAC8H,gBAAgB,CAAC;MAC9B,IAAI,CAAC9H,OAAO,CAAC+H,iBAAiB,CAACE,SAAS,GAAG,KAAK;MAChD,IAAI,CAACjI,OAAO,CAAC6G,WAAW,EAAE;MAE1B;MACA,IAAI,CAAC1B,gBAAgB,CAAC,IAAI,CAAC6B,mBAAmB,CAAC;MAC/C,IAAI,CAAChH,OAAO,CAAC2H,iBAAiB,CAAC,IAAI,CAACvF,UAAU,CAACmE,OAAO,CAAC,CAACrC,YAAa,CAAC;MAEtE,IAAI,CAACnE,MAAM,CAACmI,mBAAmB,EAAE;MAEjC;MACA,IAAI,CAAClI,OAAO,CAAC0G,eAAe,CAAC,IAAI,CAACnE,aAAa,CAAC2B,YAAa,CAAC;MAC9D,IAAI,CAAClE,OAAO,CAACwH,eAAe,CAAC,IAAI,CAAChH,YAAY,CAAC,CAAC,CAAC,CAAC;MAClD,IAAI,CAACR,OAAO,CAAC8H,gBAAgB,CAAC;MAC9B,IAAI,CAAC9H,OAAO,CAAC4G,YAAY,CAAC;MAC1B,IAAI,CAAC5G,OAAO,CAAC6G,WAAW,EAAE;MAE1B,MAAMuB,sBAAsB,GAAG7B,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAACtF,gBAAgB,GAAG,IAAI,CAACmD,uBAAuB,GAAG,IAAI,CAACM,+BAA+B;MAC5I,IAAI,CAAC1E,OAAO,CAAC8G,YAAY,CAACsB,sBAAsB,CAACrB,YAAY,CAAC;MAC9DqB,sBAAsB,CAACpD,MAAM,CAACC,UAAU,CAAC,YAAY,EAAE,IAAI,CAAC7B,aAAa,CAACmD,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MAC3F,IAAI,CAAC3B,eAAe,CAACsB,MAAM,CAACkC,sBAAsB,CAAC;MACnD,IAAI,CAACpI,OAAO,CAAC2H,iBAAiB,CAAC,IAAI,CAACpF,aAAa,CAAC2B,YAAa,CAAC;;IAGpE,IAAI,CAAClE,OAAO,CAAC4H,mBAAmB,GAAGA,mBAAmB;IAEtD;IACA,IAAI,CAACtB,aAAa,CAACC,OAAO,CAAC;IAE1B,IAAI,CAACxG,MAAM,CAAC2D,eAAwB,CAACmE,QAAQ,GAAG,IAAI;IACrD,IAAI,CAAC7H,OAAO,CAAC+H,iBAAiB,CAACC,SAAS,GAAG,IAAI;IAC/C,IAAI,CAAChI,OAAO,CAAC+H,iBAAiB,CAACE,SAAS,GAAG,IAAI;IAE/C,OAAO,IAAI,CAAChB,kBAAkB;EAClC;EAEA;;;EAGO3D,OAAO;IACV,IAAI,CAACD,gBAAgB,EAAE;IACvB,IAAI,CAACe,uBAAuB,CAACd,OAAO,EAAE;IACtC,IAAI,CAACqB,mBAAmB,CAACrB,OAAO,EAAE;IAClC,IAAI,CAACsB,eAAe,CAACtB,OAAO,EAAE;IAC9B,IAAI,CAAC1B,qBAAqB,EAAE;EAChC;;AA7eenC,uCAAkB,GAAG,CAAC,OAAO;AAC7BA,+BAAU,GAAG,CAAC;AACdA,+BAAU,GAAG,CAAC","names":["MultiRenderTarget","Color4","SmartArray","ThinTexture","EffectRenderer","EffectWrapper","RenderTargetTexture","Logger","Material","DepthPeelingEffectConfiguration","constructor","DepthPeelingRenderer","scene","passCount","_DEPTH_CLEAR_VALUE","_MIN_DEPTH","_MAX_DEPTH","_scene","_engine","getEngine","_passCount","enablePrePassRenderer","Warn","i","_layoutCacheFormat","length","_layoutCache","buildTextureLayout","_renderPassIds","useRenderPasses","_prePassEffectConfiguration","_createTextures","_createEffects","count","_createRenderPassIds","_useRenderPasses","usePasses","addExcludedMesh","mesh","_excludedMeshes","indexOf","uniqueId","push","removeExcludedMesh","index","splice","_releaseRenderPassIds","createRenderPassId","releaseRenderPassId","size","width","getRenderWidth","height","getRenderHeight","_depthMrts","_colorMrts","generateDepthBuffer","_blendBackMrt","_outputRT","optionsArray","format","samplingMode","type","getCaps","textureFloatLinearFiltering","depthTexture","_createInternalTexture","frontColorTexture","backColorTexture","setInternalTexture","_thinTextures","_disposeTextures","dispose","_updateTextures","getSize","_updateTextureReferences","prePassRenderer","textureIndex","getIndex","prePassTexture","defaultRT","textures","getInternalTexture","_blendBackTexture","renderTarget","_shareDepth","_blendBackEffectWrapper","fragmentShader","useShaderStore","engine","samplerNames","uniformNames","_blendBackEffectWrapperPingPong","_finalEffectWrapper","_effectRenderer","setPrePassRenderer","addEffectConfiguration","bind","effect","setTexture","_currentPingPongState","_renderSubMeshes","transparentSubMeshes","mapMaterialContext","j","material","data","getMaterial","previousShaderHotSwapping","previousBFC","subMesh","drawWrapper","firstDraw","_getDrawWrapper","allowShaderHotSwapping","backFaceCulling","render","materialContext","newMaterialContext","createMaterialContext","_finalCompose","writeId","output","setCustomOutput","bindFramebuffer","restoreDefaultFramebuffer","setAlphaMode","applyStates","enableEffect","_drawWrapper","_candidateSubMeshes","_excludedSubMeshes","isReady","fillMode","TriangleFanDrawMode","TriangleFillMode","TriangleStripDrawMode","getMesh","bindAttachments","clear","_colorCache","unBindFramebuffer","currentRenderPassId","_enabled","setAlphaEquation","depthCullingState","depthMask","depthTest","resetCachedMaterial","readId","blendBackEffectWrapper"],"sourceRoot":"","sources":["../../../../lts/core/generated/Rendering/depthPeelingRenderer.ts"],"sourcesContent":["/**\r\n * Implementation based on https://medium.com/@shrekshao_71662/dual-depth-peeling-implementation-in-webgl-11baa061ba4b\r\n */\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { MultiRenderTarget } from \"../Materials/Textures/multiRenderTarget\";\r\nimport type { InternalTextureCreationOptions } from \"../Materials/Textures/textureCreationOptions\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { SmartArray } from \"../Misc/smartArray\";\r\nimport type { Scene } from \"../scene\";\r\nimport { ThinTexture } from \"../Materials/Textures/thinTexture\";\r\nimport { EffectRenderer, EffectWrapper } from \"../Materials/effectRenderer\";\r\nimport type { PrePassEffectConfiguration } from \"./prePassEffectConfiguration\";\r\nimport type { PrePassRenderer } from \"./prePassRenderer\";\r\nimport type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { IMaterialContext } from \"../Engines/IMaterialContext\";\r\nimport type { DrawWrapper } from \"../Materials/drawWrapper\";\r\nimport { Material } from \"../Materials/material\";\r\n\r\nimport \"../Shaders/postprocess.vertex\";\r\nimport \"../Shaders/oitFinal.fragment\";\r\nimport \"../Shaders/oitBackBlend.fragment\";\r\n\r\nclass DepthPeelingEffectConfiguration implements PrePassEffectConfiguration {\r\n    /**\r\n     * Is this effect enabled\r\n     */\r\n    public enabled = true;\r\n\r\n    /**\r\n     * Name of the configuration\r\n     */\r\n    public name = \"depthPeeling\";\r\n\r\n    /**\r\n     * Textures that should be present in the MRT for this effect to work\r\n     */\r\n    public readonly texturesRequired: number[] = [Constants.PREPASS_COLOR_TEXTURE_TYPE];\r\n}\r\n\r\n/**\r\n * The depth peeling renderer that performs\r\n * Order independant transparency (OIT).\r\n * This should not be instanciated directly, as it is part of a scene component\r\n */\r\nexport class DepthPeelingRenderer {\r\n    private _scene: Scene;\r\n    private _engine: Engine;\r\n    private _depthMrts: MultiRenderTarget[];\r\n    private _thinTextures: ThinTexture[] = [];\r\n    private _colorMrts: MultiRenderTarget[];\r\n    private _blendBackMrt: MultiRenderTarget;\r\n    private _outputRT: RenderTargetTexture;\r\n\r\n    private _blendBackEffectWrapper: EffectWrapper;\r\n    private _blendBackEffectWrapperPingPong: EffectWrapper;\r\n    private _finalEffectWrapper: EffectWrapper;\r\n    private _effectRenderer: EffectRenderer;\r\n\r\n    private _currentPingPongState: number = 0;\r\n    private _prePassEffectConfiguration: DepthPeelingEffectConfiguration;\r\n\r\n    private _blendBackTexture: InternalTexture;\r\n    private _layoutCacheFormat = [[true], [true, true], [true, true, true]];\r\n    private _layoutCache: number[][] = [];\r\n    private _renderPassIds: number[];\r\n    private _candidateSubMeshes: SmartArray<SubMesh> = new SmartArray(10);\r\n    private _excludedSubMeshes: SmartArray<SubMesh> = new SmartArray(10);\r\n    private _excludedMeshes: number[] = [];\r\n\r\n    private static _DEPTH_CLEAR_VALUE = -99999.0;\r\n    private static _MIN_DEPTH = 0;\r\n    private static _MAX_DEPTH = 1;\r\n\r\n    private _colorCache = [\r\n        new Color4(DepthPeelingRenderer._DEPTH_CLEAR_VALUE, DepthPeelingRenderer._DEPTH_CLEAR_VALUE, 0, 0),\r\n        new Color4(-DepthPeelingRenderer._MIN_DEPTH, DepthPeelingRenderer._MAX_DEPTH, 0, 0),\r\n        new Color4(0, 0, 0, 0),\r\n    ];\r\n\r\n    private _passCount: number;\r\n    /**\r\n     * Number of depth peeling passes. As we are using dual depth peeling, each pass two levels of transparency are processed.\r\n     */\r\n    public get passCount(): number {\r\n        return this._passCount;\r\n    }\r\n\r\n    public set passCount(count: number) {\r\n        if (this._passCount === count) {\r\n            return;\r\n        }\r\n        this._passCount = count;\r\n        this._createRenderPassIds();\r\n    }\r\n\r\n    private _useRenderPasses: boolean;\r\n    /**\r\n     * Instructs the renderer to use render passes. It is an optimization that makes the rendering faster for some engines (like WebGPU) but that consumes more memory, so it is disabled by default.\r\n     */\r\n    public get useRenderPasses() {\r\n        return this._useRenderPasses;\r\n    }\r\n\r\n    public set useRenderPasses(usePasses: boolean) {\r\n        if (this._useRenderPasses === usePasses) {\r\n            return;\r\n        }\r\n        this._useRenderPasses = usePasses;\r\n        this._createRenderPassIds();\r\n    }\r\n\r\n    /**\r\n     * Add a mesh in the exclusion list to prevent it to be handled by the depth peeling renderer\r\n     * @param mesh The mesh to exclude from the depth peeling renderer\r\n     */\r\n    public addExcludedMesh(mesh: AbstractMesh): void {\r\n        if (this._excludedMeshes.indexOf(mesh.uniqueId) === -1) {\r\n            this._excludedMeshes.push(mesh.uniqueId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a mesh from the exclusion list of the depth peeling renderer\r\n     * @param mesh The mesh to remove\r\n     */\r\n    public removeExcludedMesh(mesh: AbstractMesh): void {\r\n        const index = this._excludedMeshes.indexOf(mesh.uniqueId);\r\n        if (index !== -1) {\r\n            this._excludedMeshes.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instanciates the depth peeling renderer\r\n     * @param scene Scene to attach to\r\n     * @param passCount Number of depth layers to peel\r\n     * @returns The depth peeling renderer\r\n     */\r\n    constructor(scene: Scene, passCount: number = 5) {\r\n        this._scene = scene;\r\n        this._engine = scene.getEngine();\r\n        this._passCount = passCount;\r\n\r\n        //  We need a depth texture for opaque\r\n        if (!scene.enablePrePassRenderer()) {\r\n            Logger.Warn(\"Depth peeling for order independant transparency could not enable PrePass, aborting.\");\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < this._layoutCacheFormat.length; ++i) {\r\n            this._layoutCache[i] = this._engine.buildTextureLayout(this._layoutCacheFormat[i]);\r\n        }\r\n\r\n        this._renderPassIds = [];\r\n        this.useRenderPasses = false;\r\n\r\n        this._prePassEffectConfiguration = new DepthPeelingEffectConfiguration();\r\n        this._createTextures();\r\n        this._createEffects();\r\n    }\r\n\r\n    private _createRenderPassIds(): void {\r\n        this._releaseRenderPassIds();\r\n        if (this._useRenderPasses) {\r\n            for (let i = 0; i < this._passCount + 1; ++i) {\r\n                if (!this._renderPassIds[i]) {\r\n                    this._renderPassIds[i] = this._engine.createRenderPassId(`DepthPeelingRenderer - pass #${i}`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _releaseRenderPassIds(): void {\r\n        for (let i = 0; i < this._renderPassIds.length; ++i) {\r\n            this._engine.releaseRenderPassId(this._renderPassIds[i]);\r\n        }\r\n        this._renderPassIds = [];\r\n    }\r\n\r\n    private _createTextures() {\r\n        const size = {\r\n            width: this._engine.getRenderWidth(),\r\n            height: this._engine.getRenderHeight(),\r\n        };\r\n\r\n        // 2 for ping pong\r\n        this._depthMrts = [new MultiRenderTarget(\"depthPeelingDepth0\", size, 3, this._scene), new MultiRenderTarget(\"depthPeelingDepth1\", size, 3, this._scene)];\r\n        this._colorMrts = [\r\n            new MultiRenderTarget(\"depthPeelingColor0\", size, 2, this._scene, { generateDepthBuffer: false }),\r\n            new MultiRenderTarget(\"depthPeelingColor1\", size, 2, this._scene, { generateDepthBuffer: false }),\r\n        ];\r\n        this._blendBackMrt = new MultiRenderTarget(\"depthPeelingBack\", size, 1, this._scene, { generateDepthBuffer: false });\r\n        this._outputRT = new RenderTargetTexture(\"depthPeelingOutput\", size, this._scene, false);\r\n\r\n        // 0 is a depth texture\r\n        // 1 is a color texture\r\n        const optionsArray = [\r\n            {\r\n                format: Constants.TEXTUREFORMAT_RG, // For MSAA we need RGBA\r\n                samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                type: this._engine.getCaps().textureFloatLinearFiltering ? Constants.TEXTURETYPE_FLOAT : Constants.TEXTURETYPE_HALF_FLOAT,\r\n            } as InternalTextureCreationOptions,\r\n            {\r\n                format: Constants.TEXTUREFORMAT_RGBA,\r\n                samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                type: Constants.TEXTURETYPE_HALF_FLOAT, // For MSAA we need FLOAT\r\n            } as InternalTextureCreationOptions,\r\n        ];\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n            const depthTexture = this._engine._createInternalTexture(size, optionsArray[0], false);\r\n            const frontColorTexture = this._engine._createInternalTexture(size, optionsArray[1], false);\r\n            const backColorTexture = this._engine._createInternalTexture(size, optionsArray[1], false);\r\n\r\n            this._depthMrts[i].setInternalTexture(depthTexture, 0);\r\n            this._depthMrts[i].setInternalTexture(frontColorTexture, 1);\r\n            this._depthMrts[i].setInternalTexture(backColorTexture, 2);\r\n            this._colorMrts[i].setInternalTexture(frontColorTexture, 0);\r\n            this._colorMrts[i].setInternalTexture(backColorTexture, 1);\r\n\r\n            this._thinTextures.push(new ThinTexture(depthTexture), new ThinTexture(frontColorTexture), new ThinTexture(backColorTexture));\r\n        }\r\n    }\r\n\r\n    // TODO : explore again MSAA with depth peeling when\r\n    // we are able to fetch individual samples in a multisampled renderbuffer\r\n    // public set samples(value: number) {\r\n    //     for (let i = 0; i < 2; i++) {\r\n    //         this._depthMrts[i].samples = value;\r\n    //         this._colorMrts[i].samples = value;\r\n    //     }\r\n    //     this._scene.prePassRenderer!.samples = value;\r\n    // }\r\n\r\n    private _disposeTextures() {\r\n        for (let i = 0; i < this._thinTextures.length; i++) {\r\n            if (i === 6) {\r\n                // Do not dispose the shared texture with the prepass\r\n                continue;\r\n            }\r\n            this._thinTextures[i].dispose();\r\n        }\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n            this._depthMrts[i].dispose(true);\r\n            this._colorMrts[i].dispose(true);\r\n            this._blendBackMrt.dispose(true);\r\n        }\r\n        this._outputRT.dispose();\r\n\r\n        this._thinTextures = [];\r\n        this._colorMrts = [];\r\n        this._depthMrts = [];\r\n    }\r\n\r\n    private _updateTextures() {\r\n        if (this._depthMrts[0].getSize().width !== this._engine.getRenderWidth() || this._depthMrts[0].getSize().height !== this._engine.getRenderHeight()) {\r\n            this._disposeTextures();\r\n            this._createTextures();\r\n        }\r\n        return this._updateTextureReferences();\r\n    }\r\n\r\n    private _updateTextureReferences() {\r\n        const prePassRenderer = this._scene.prePassRenderer;\r\n\r\n        if (!prePassRenderer) {\r\n            return false;\r\n        }\r\n\r\n        // Retrieve opaque color texture\r\n        const textureIndex = prePassRenderer.getIndex(Constants.PREPASS_COLOR_TEXTURE_TYPE);\r\n        const prePassTexture = prePassRenderer.defaultRT.textures?.length ? prePassRenderer.defaultRT.textures[textureIndex].getInternalTexture() : null;\r\n\r\n        if (!prePassTexture) {\r\n            return false;\r\n        }\r\n\r\n        if (this._blendBackTexture !== prePassTexture) {\r\n            this._blendBackTexture = prePassTexture;\r\n            this._blendBackMrt.setInternalTexture(this._blendBackTexture, 0);\r\n\r\n            if (this._thinTextures[6]) {\r\n                this._thinTextures[6].dispose();\r\n            }\r\n            this._thinTextures[6] = new ThinTexture(this._blendBackTexture);\r\n\r\n            prePassRenderer.defaultRT.renderTarget!._shareDepth(this._depthMrts[0].renderTarget!);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private _createEffects() {\r\n        this._blendBackEffectWrapper = new EffectWrapper({\r\n            fragmentShader: \"oitBackBlend\",\r\n            useShaderStore: true,\r\n            engine: this._engine,\r\n            samplerNames: [\"uBackColor\"],\r\n            uniformNames: [],\r\n        });\r\n        this._blendBackEffectWrapperPingPong = new EffectWrapper({\r\n            fragmentShader: \"oitBackBlend\",\r\n            useShaderStore: true,\r\n            engine: this._engine,\r\n            samplerNames: [\"uBackColor\"],\r\n            uniformNames: [],\r\n        });\r\n\r\n        this._finalEffectWrapper = new EffectWrapper({\r\n            fragmentShader: \"oitFinal\",\r\n            useShaderStore: true,\r\n            engine: this._engine,\r\n            samplerNames: [\"uFrontColor\", \"uBackColor\"],\r\n            uniformNames: [],\r\n        });\r\n\r\n        this._effectRenderer = new EffectRenderer(this._engine);\r\n    }\r\n\r\n    /**\r\n     * Links to the prepass renderer\r\n     * @param prePassRenderer The scene PrePassRenderer\r\n     */\r\n    public setPrePassRenderer(prePassRenderer: PrePassRenderer) {\r\n        prePassRenderer.addEffectConfiguration(this._prePassEffectConfiguration);\r\n    }\r\n\r\n    /**\r\n     * Binds depth peeling textures on an effect\r\n     * @param effect The effect to bind textures on\r\n     */\r\n    public bind(effect: Effect) {\r\n        effect.setTexture(\"oitDepthSampler\", this._thinTextures[this._currentPingPongState * 3]);\r\n        effect.setTexture(\"oitFrontColorSampler\", this._thinTextures[this._currentPingPongState * 3 + 1]);\r\n    }\r\n\r\n    private _renderSubMeshes(transparentSubMeshes: SmartArray<SubMesh>) {\r\n        let mapMaterialContext: { [uniqueId: number]: IMaterialContext | undefined };\r\n        if (this._useRenderPasses) {\r\n            mapMaterialContext = {};\r\n        }\r\n        for (let j = 0; j < transparentSubMeshes.length; j++) {\r\n            const material = transparentSubMeshes.data[j].getMaterial();\r\n            let previousShaderHotSwapping = true;\r\n            let previousBFC = false;\r\n\r\n            const subMesh = transparentSubMeshes.data[j];\r\n            let drawWrapper: DrawWrapper | undefined;\r\n            let firstDraw = false;\r\n\r\n            if (this._useRenderPasses) {\r\n                drawWrapper = subMesh._getDrawWrapper();\r\n                firstDraw = !drawWrapper;\r\n            }\r\n\r\n            if (material) {\r\n                previousShaderHotSwapping = material.allowShaderHotSwapping;\r\n                previousBFC = material.backFaceCulling;\r\n                material.allowShaderHotSwapping = false;\r\n                material.backFaceCulling = false;\r\n            }\r\n\r\n            subMesh.render(false);\r\n\r\n            if (firstDraw) {\r\n                // first time we draw this submesh: we replace the material context\r\n                drawWrapper = subMesh._getDrawWrapper()!; // we are sure it is now non empty as we just rendered the submesh\r\n                if (drawWrapper.materialContext) {\r\n                    let newMaterialContext = mapMaterialContext![drawWrapper.materialContext.uniqueId];\r\n                    if (!newMaterialContext) {\r\n                        newMaterialContext = mapMaterialContext![drawWrapper.materialContext.uniqueId] = this._engine.createMaterialContext();\r\n                    }\r\n                    subMesh._getDrawWrapper()!.materialContext = newMaterialContext;\r\n                }\r\n            }\r\n\r\n            if (material) {\r\n                material.allowShaderHotSwapping = previousShaderHotSwapping;\r\n                material.backFaceCulling = previousBFC;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _finalCompose(writeId: number) {\r\n        const output = this._scene.prePassRenderer?.setCustomOutput(this._outputRT);\r\n        if (output) {\r\n            this._engine.bindFramebuffer(this._outputRT.renderTarget!);\r\n        } else {\r\n            this._engine.restoreDefaultFramebuffer();\r\n        }\r\n\r\n        this._engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n        this._engine.applyStates();\r\n\r\n        this._engine.enableEffect(this._finalEffectWrapper._drawWrapper);\r\n        this._finalEffectWrapper.effect.setTexture(\"uFrontColor\", this._thinTextures[writeId * 3 + 1]);\r\n        this._finalEffectWrapper.effect.setTexture(\"uBackColor\", this._thinTextures[6]);\r\n        this._effectRenderer.render(this._finalEffectWrapper);\r\n    }\r\n\r\n    /**\r\n     * Renders transparent submeshes with depth peeling\r\n     * @param transparentSubMeshes List of transparent meshes to render\r\n     * @returns The array of submeshes that could not be handled by this renderer\r\n     */\r\n    public render(transparentSubMeshes: SmartArray<SubMesh>): SmartArray<SubMesh> {\r\n        this._candidateSubMeshes.length = 0;\r\n        this._excludedSubMeshes.length = 0;\r\n        if (\r\n            !this._blendBackEffectWrapper.effect.isReady() ||\r\n            !this._blendBackEffectWrapperPingPong.effect.isReady() ||\r\n            !this._finalEffectWrapper.effect.isReady() ||\r\n            !this._updateTextures()\r\n        ) {\r\n            return this._excludedSubMeshes;\r\n        }\r\n\r\n        for (let i = 0; i < transparentSubMeshes.length; i++) {\r\n            const subMesh = transparentSubMeshes.data[i];\r\n            const material = subMesh.getMaterial();\r\n\r\n            if (\r\n                material &&\r\n                (material.fillMode === Material.TriangleFanDrawMode || material.fillMode === Material.TriangleFillMode || material.fillMode === Material.TriangleStripDrawMode) &&\r\n                this._excludedMeshes.indexOf(subMesh.getMesh().uniqueId) === -1\r\n            ) {\r\n                this._candidateSubMeshes.push(subMesh);\r\n            } else {\r\n                this._excludedSubMeshes.push(subMesh);\r\n            }\r\n        }\r\n\r\n        if (!this._candidateSubMeshes.length) {\r\n            this._engine.bindFramebuffer(this._colorMrts[1].renderTarget!);\r\n            this._engine.bindAttachments(this._layoutCache[1]);\r\n            this._engine.clear(this._colorCache[2], true, false, false);\r\n            this._engine.unBindFramebuffer(this._colorMrts[1].renderTarget!);\r\n\r\n            this._finalCompose(1);\r\n            return this._excludedSubMeshes;\r\n        }\r\n\r\n        const currentRenderPassId = this._engine.currentRenderPassId;\r\n\r\n        (this._scene.prePassRenderer! as any)._enabled = false;\r\n\r\n        if (this._useRenderPasses) {\r\n            this._engine.currentRenderPassId = this._renderPassIds[0];\r\n        }\r\n\r\n        // Clears\r\n        this._engine.bindFramebuffer(this._depthMrts[0].renderTarget!);\r\n        this._engine.bindAttachments(this._layoutCache[0]);\r\n        this._engine.clear(this._colorCache[0], true, false, false);\r\n        this._engine.unBindFramebuffer(this._depthMrts[0].renderTarget!);\r\n\r\n        this._engine.bindFramebuffer(this._depthMrts[1].renderTarget!);\r\n        this._engine.bindAttachments(this._layoutCache[0]);\r\n        this._engine.clear(this._colorCache[1], true, false, false);\r\n        this._engine.unBindFramebuffer(this._depthMrts[1].renderTarget!);\r\n\r\n        this._engine.bindFramebuffer(this._colorMrts[0].renderTarget!);\r\n        this._engine.bindAttachments(this._layoutCache[1]);\r\n        this._engine.clear(this._colorCache[2], true, false, false);\r\n        this._engine.unBindFramebuffer(this._colorMrts[0].renderTarget!);\r\n\r\n        this._engine.bindFramebuffer(this._colorMrts[1].renderTarget!);\r\n        this._engine.bindAttachments(this._layoutCache[1]);\r\n        this._engine.clear(this._colorCache[2], true, false, false);\r\n        this._engine.unBindFramebuffer(this._colorMrts[1].renderTarget!);\r\n\r\n        // Draw depth for first pass\r\n        this._engine.bindFramebuffer(this._depthMrts[0].renderTarget!);\r\n        this._engine.bindAttachments(this._layoutCache[0]);\r\n\r\n        this._engine.setAlphaMode(Constants.ALPHA_ONEONE_ONEONE); // in WebGPU, when using MIN or MAX equation, the src / dst color factors should not use SRC_ALPHA and the src / dst alpha factors must be 1 else WebGPU will throw a validation error\r\n        this._engine.setAlphaEquation(Constants.ALPHA_EQUATION_MAX);\r\n        this._engine.depthCullingState.depthMask = false;\r\n        this._engine.depthCullingState.depthTest = true;\r\n        this._engine.applyStates();\r\n\r\n        this._currentPingPongState = 1;\r\n        // Render\r\n        this._renderSubMeshes(this._candidateSubMeshes);\r\n        this._engine.unBindFramebuffer(this._depthMrts[0].renderTarget!);\r\n\r\n        this._scene.resetCachedMaterial();\r\n\r\n        // depth peeling ping-pong\r\n        let readId = 0;\r\n        let writeId = 0;\r\n\r\n        for (let i = 0; i < this._passCount; i++) {\r\n            readId = i % 2;\r\n            writeId = 1 - readId;\r\n            this._currentPingPongState = readId;\r\n\r\n            if (this._useRenderPasses) {\r\n                this._engine.currentRenderPassId = this._renderPassIds[i + 1];\r\n            }\r\n\r\n            // Clears\r\n            this._engine.bindFramebuffer(this._depthMrts[writeId].renderTarget!);\r\n            this._engine.bindAttachments(this._layoutCache[0]);\r\n            this._engine.clear(this._colorCache[0], true, false, false);\r\n            this._engine.unBindFramebuffer(this._depthMrts[writeId].renderTarget!);\r\n\r\n            this._engine.bindFramebuffer(this._colorMrts[writeId].renderTarget!);\r\n            this._engine.bindAttachments(this._layoutCache[1]);\r\n            this._engine.clear(this._colorCache[2], true, false, false);\r\n            this._engine.unBindFramebuffer(this._colorMrts[writeId].renderTarget!);\r\n\r\n            this._engine.bindFramebuffer(this._depthMrts[writeId].renderTarget!);\r\n            this._engine.bindAttachments(this._layoutCache[2]);\r\n\r\n            this._engine.setAlphaMode(Constants.ALPHA_ONEONE_ONEONE); // the value does not matter (as MAX operation does not use them) but the src and dst color factors should not use SRC_ALPHA else WebGPU will throw a validation error\r\n            this._engine.setAlphaEquation(Constants.ALPHA_EQUATION_MAX);\r\n            this._engine.depthCullingState.depthTest = false;\r\n            this._engine.applyStates();\r\n\r\n            // Render\r\n            this._renderSubMeshes(this._candidateSubMeshes);\r\n            this._engine.unBindFramebuffer(this._depthMrts[writeId].renderTarget!);\r\n\r\n            this._scene.resetCachedMaterial();\r\n\r\n            // Back color\r\n            this._engine.bindFramebuffer(this._blendBackMrt.renderTarget!);\r\n            this._engine.bindAttachments(this._layoutCache[0]);\r\n            this._engine.setAlphaEquation(Constants.ALPHA_EQUATION_ADD);\r\n            this._engine.setAlphaMode(Constants.ALPHA_LAYER_ACCUMULATE);\r\n            this._engine.applyStates();\r\n\r\n            const blendBackEffectWrapper = writeId === 0 || !this._useRenderPasses ? this._blendBackEffectWrapper : this._blendBackEffectWrapperPingPong;\r\n            this._engine.enableEffect(blendBackEffectWrapper._drawWrapper);\r\n            blendBackEffectWrapper.effect.setTexture(\"uBackColor\", this._thinTextures[writeId * 3 + 2]);\r\n            this._effectRenderer.render(blendBackEffectWrapper);\r\n            this._engine.unBindFramebuffer(this._blendBackMrt.renderTarget!);\r\n        }\r\n\r\n        this._engine.currentRenderPassId = currentRenderPassId;\r\n\r\n        // Final composition on default FB\r\n        this._finalCompose(writeId);\r\n\r\n        (this._scene.prePassRenderer! as any)._enabled = true;\r\n        this._engine.depthCullingState.depthMask = true;\r\n        this._engine.depthCullingState.depthTest = true;\r\n\r\n        return this._excludedSubMeshes;\r\n    }\r\n\r\n    /**\r\n     * Disposes the depth peeling renderer and associated ressources\r\n     */\r\n    public dispose() {\r\n        this._disposeTextures();\r\n        this._blendBackEffectWrapper.dispose();\r\n        this._finalEffectWrapper.dispose();\r\n        this._effectRenderer.dispose();\r\n        this._releaseRenderPassIds();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}