{"ast":null,"code":"import { WebGPUEngine } from \"../../webgpuEngine.js\";\nWebGPUEngine.prototype.updateDynamicTexture = function (texture, canvas, invertY, premulAlpha = false, format, forceBindTexture, allowGPUOptimization) {\n  var _a;\n  if (!texture) {\n    return;\n  }\n  const width = canvas.width,\n    height = canvas.height;\n  let gpuTextureWrapper = texture._hardwareTexture;\n  if (!((_a = texture._hardwareTexture) === null || _a === void 0 ? void 0 : _a.underlyingResource)) {\n    gpuTextureWrapper = this._textureHelper.createGPUTextureForInternalTexture(texture, width, height);\n  }\n  this._textureHelper.updateTexture(canvas, texture, width, height, texture.depth, gpuTextureWrapper.format, 0, 0, invertY, premulAlpha, 0, 0, allowGPUOptimization);\n  if (texture.generateMipMaps) {\n    this._generateMipmaps(texture, this._uploadEncoder);\n  }\n  texture.isReady = true;\n};","map":{"version":3,"mappings":"AAEA,SAASA,YAAY,QAAQ,uBAAqB;AAGlDA,YAAY,CAACC,SAAS,CAACC,oBAAoB,GAAG,UAC1CC,OAAkC,EAClCC,MAA2C,EAC3CC,OAAgB,EAChBC,cAAuB,KAAK,EAC5BC,MAAe,EACfC,gBAA0B,EAC1BC,oBAA8B;;EAE9B,IAAI,CAACN,OAAO,EAAE;IACV;;EAGJ,MAAMO,KAAK,GAAGN,MAAM,CAACM,KAAK;IACtBC,MAAM,GAAGP,MAAM,CAACO,MAAM;EAE1B,IAAIC,iBAAiB,GAAGT,OAAO,CAACU,gBAAyC;EAEzE,IAAI,EAAC,aAAO,CAACA,gBAAgB,0CAAEC,kBAAkB,GAAE;IAC/CF,iBAAiB,GAAG,IAAI,CAACG,cAAc,CAACC,kCAAkC,CAACb,OAAO,EAAEO,KAAK,EAAEC,MAAM,CAAC;;EAGtG,IAAI,CAACI,cAAc,CAACE,aAAa,CAACb,MAAM,EAAED,OAAO,EAAEO,KAAK,EAAEC,MAAM,EAAER,OAAO,CAACe,KAAK,EAAEN,iBAAiB,CAACL,MAAM,EAAE,CAAC,EAAE,CAAC,EAAEF,OAAO,EAAEC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAEG,oBAAoB,CAAC;EAClK,IAAIN,OAAO,CAACgB,eAAe,EAAE;IACzB,IAAI,CAACC,gBAAgB,CAACjB,OAAO,EAAE,IAAI,CAACkB,cAAc,CAAC;;EAGvDlB,OAAO,CAACmB,OAAO,GAAG,IAAI;AAC1B,CAAC","names":["WebGPUEngine","prototype","updateDynamicTexture","texture","canvas","invertY","premulAlpha","format","forceBindTexture","allowGPUOptimization","width","height","gpuTextureWrapper","_hardwareTexture","underlyingResource","_textureHelper","createGPUTextureForInternalTexture","updateTexture","depth","generateMipMaps","_generateMipmaps","_uploadEncoder","isReady"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/Extensions/engine.dynamicTexture.ts"],"sourcesContent":["import type { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport type { Nullable } from \"../../../types\";\r\nimport { WebGPUEngine } from \"../../webgpuEngine\";\r\nimport type { WebGPUHardwareTexture } from \"../webgpuHardwareTexture\";\r\n\r\nWebGPUEngine.prototype.updateDynamicTexture = function (\r\n    texture: Nullable<InternalTexture>,\r\n    canvas: HTMLCanvasElement | OffscreenCanvas,\r\n    invertY: boolean,\r\n    premulAlpha: boolean = false,\r\n    format?: number,\r\n    forceBindTexture?: boolean,\r\n    allowGPUOptimization?: boolean\r\n): void {\r\n    if (!texture) {\r\n        return;\r\n    }\r\n\r\n    const width = canvas.width,\r\n        height = canvas.height;\r\n\r\n    let gpuTextureWrapper = texture._hardwareTexture as WebGPUHardwareTexture;\r\n\r\n    if (!texture._hardwareTexture?.underlyingResource) {\r\n        gpuTextureWrapper = this._textureHelper.createGPUTextureForInternalTexture(texture, width, height);\r\n    }\r\n\r\n    this._textureHelper.updateTexture(canvas, texture, width, height, texture.depth, gpuTextureWrapper.format, 0, 0, invertY, premulAlpha, 0, 0, allowGPUOptimization);\r\n    if (texture.generateMipMaps) {\r\n        this._generateMipmaps(texture, this._uploadEncoder);\r\n    }\r\n\r\n    texture.isReady = true;\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}