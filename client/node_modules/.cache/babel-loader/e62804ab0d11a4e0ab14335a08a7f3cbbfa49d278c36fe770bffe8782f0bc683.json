{"ast":null,"code":"import { Texture } from \"../Materials/Textures/texture.js\";\nimport { TextureDome } from \"./textureDome.js\";\n/**\n * Display a 360 degree photo on an approximately spherical surface, useful for VR applications or skyboxes.\n * As a subclass of TransformNode, this allow parenting to the camera with different locations in the scene.\n * This class achieves its effect with a Texture and a correctly configured BackgroundMaterial on an inverted sphere.\n * Potential additions to this helper include zoom and and non-infinite distance rendering effects.\n */\nexport class PhotoDome extends TextureDome {\n  /**\n   * Gets or sets the texture being displayed on the sphere\n   */\n  get photoTexture() {\n    return this.texture;\n  }\n  /**\n   * sets the texture being displayed on the sphere\n   */\n  set photoTexture(value) {\n    this.texture = value;\n  }\n  /**\n   * Gets the current video mode for the video. It can be:\n   * * TextureDome.MODE_MONOSCOPIC : Define the texture source as a Monoscopic panoramic 360.\n   * * TextureDome.MODE_TOPBOTTOM  : Define the texture source as a Stereoscopic TopBottom/OverUnder panoramic 360.\n   * * TextureDome.MODE_SIDEBYSIDE : Define the texture source as a Stereoscopic Side by Side panoramic 360.\n   */\n  get imageMode() {\n    return this.textureMode;\n  }\n  /**\n   * Sets the current video mode for the video. It can be:\n   * * TextureDome.MODE_MONOSCOPIC : Define the texture source as a Monoscopic panoramic 360.\n   * * TextureDome.MODE_TOPBOTTOM  : Define the texture source as a Stereoscopic TopBottom/OverUnder panoramic 360.\n   * * TextureDome.MODE_SIDEBYSIDE : Define the texture source as a Stereoscopic Side by Side panoramic 360.\n   */\n  set imageMode(value) {\n    this.textureMode = value;\n  }\n  _initTexture(urlsOrElement, scene, options) {\n    return new Texture(urlsOrElement, scene, !options.generateMipMaps, !this._useDirectMapping, undefined, () => {\n      this.onLoadObservable.notifyObservers();\n    }, (message, exception) => {\n      this.onLoadErrorObservable.notifyObservers(message || \"Unknown error occured\");\n      if (this.onError) {\n        this.onError(message, exception);\n      }\n    });\n  }\n}\n/**\n * Define the image as a Monoscopic panoramic 360 image.\n */\nPhotoDome.MODE_MONOSCOPIC = TextureDome.MODE_MONOSCOPIC;\n/**\n * Define the image as a Stereoscopic TopBottom/OverUnder panoramic 360 image.\n */\nPhotoDome.MODE_TOPBOTTOM = TextureDome.MODE_TOPBOTTOM;\n/**\n * Define the image as a Stereoscopic Side by Side panoramic 360 image.\n */\nPhotoDome.MODE_SIDEBYSIDE = TextureDome.MODE_SIDEBYSIDE;","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,kCAAgC;AACxD,SAASC,WAAW,QAAQ,kBAAgB;AAE5C;;;;;;AAMA,OAAM,MAAOC,SAAU,SAAQD,WAAoB;EAa/C;;;EAGA,IAAWE,YAAY;IACnB,OAAO,IAAI,CAACC,OAAO;EACvB;EAEA;;;EAGA,IAAWD,YAAY,CAACE,KAAc;IAClC,IAAI,CAACD,OAAO,GAAGC,KAAK;EACxB;EAEA;;;;;;EAMA,IAAWC,SAAS;IAChB,OAAO,IAAI,CAACC,WAAW;EAC3B;EACA;;;;;;EAMA,IAAWD,SAAS,CAACD,KAAa;IAC9B,IAAI,CAACE,WAAW,GAAGF,KAAK;EAC5B;EAEUG,YAAY,CAACC,aAAqB,EAAEC,KAAY,EAAEC,OAAY;IACpE,OAAO,IAAIX,OAAO,CACdS,aAAa,EACbC,KAAK,EACL,CAACC,OAAO,CAACC,eAAe,EACxB,CAAC,IAAI,CAACC,iBAAiB,EACvBC,SAAS,EACT,MAAK;MACD,IAAI,CAACC,gBAAgB,CAACC,eAAe,EAAE;IAC3C,CAAC,EACD,CAACC,OAAO,EAAEC,SAAS,KAAI;MACnB,IAAI,CAACC,qBAAqB,CAACH,eAAe,CAACC,OAAO,IAAI,uBAAuB,CAAC;MAE9E,IAAI,IAAI,CAACG,OAAO,EAAE;QACd,IAAI,CAACA,OAAO,CAACH,OAAO,EAAEC,SAAS,CAAC;;IAExC,CAAC,CACJ;EACL;;AA/DA;;;AAGuBhB,yBAAe,GAAGD,WAAW,CAACoB,eAAe;AACpE;;;AAGuBnB,wBAAc,GAAGD,WAAW,CAACqB,cAAc;AAClE;;;AAGuBpB,yBAAe,GAAGD,WAAW,CAACsB,eAAe","names":["Texture","TextureDome","PhotoDome","photoTexture","texture","value","imageMode","textureMode","_initTexture","urlsOrElement","scene","options","generateMipMaps","_useDirectMapping","undefined","onLoadObservable","notifyObservers","message","exception","onLoadErrorObservable","onError","MODE_MONOSCOPIC","MODE_TOPBOTTOM","MODE_SIDEBYSIDE"],"sourceRoot":"","sources":["../../../../lts/core/generated/Helpers/photoDome.ts"],"sourcesContent":["import type { Scene } from \"../scene\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { TextureDome } from \"./textureDome\";\r\n\r\n/**\r\n * Display a 360 degree photo on an approximately spherical surface, useful for VR applications or skyboxes.\r\n * As a subclass of TransformNode, this allow parenting to the camera with different locations in the scene.\r\n * This class achieves its effect with a Texture and a correctly configured BackgroundMaterial on an inverted sphere.\r\n * Potential additions to this helper include zoom and and non-infinite distance rendering effects.\r\n */\r\nexport class PhotoDome extends TextureDome<Texture> {\r\n    /**\r\n     * Define the image as a Monoscopic panoramic 360 image.\r\n     */\r\n    public static readonly MODE_MONOSCOPIC = TextureDome.MODE_MONOSCOPIC;\r\n    /**\r\n     * Define the image as a Stereoscopic TopBottom/OverUnder panoramic 360 image.\r\n     */\r\n    public static readonly MODE_TOPBOTTOM = TextureDome.MODE_TOPBOTTOM;\r\n    /**\r\n     * Define the image as a Stereoscopic Side by Side panoramic 360 image.\r\n     */\r\n    public static readonly MODE_SIDEBYSIDE = TextureDome.MODE_SIDEBYSIDE;\r\n    /**\r\n     * Gets or sets the texture being displayed on the sphere\r\n     */\r\n    public get photoTexture(): Texture {\r\n        return this.texture;\r\n    }\r\n\r\n    /**\r\n     * sets the texture being displayed on the sphere\r\n     */\r\n    public set photoTexture(value: Texture) {\r\n        this.texture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the current video mode for the video. It can be:\r\n     * * TextureDome.MODE_MONOSCOPIC : Define the texture source as a Monoscopic panoramic 360.\r\n     * * TextureDome.MODE_TOPBOTTOM  : Define the texture source as a Stereoscopic TopBottom/OverUnder panoramic 360.\r\n     * * TextureDome.MODE_SIDEBYSIDE : Define the texture source as a Stereoscopic Side by Side panoramic 360.\r\n     */\r\n    public get imageMode(): number {\r\n        return this.textureMode;\r\n    }\r\n    /**\r\n     * Sets the current video mode for the video. It can be:\r\n     * * TextureDome.MODE_MONOSCOPIC : Define the texture source as a Monoscopic panoramic 360.\r\n     * * TextureDome.MODE_TOPBOTTOM  : Define the texture source as a Stereoscopic TopBottom/OverUnder panoramic 360.\r\n     * * TextureDome.MODE_SIDEBYSIDE : Define the texture source as a Stereoscopic Side by Side panoramic 360.\r\n     */\r\n    public set imageMode(value: number) {\r\n        this.textureMode = value;\r\n    }\r\n\r\n    protected _initTexture(urlsOrElement: string, scene: Scene, options: any): Texture {\r\n        return new Texture(\r\n            urlsOrElement,\r\n            scene,\r\n            !options.generateMipMaps,\r\n            !this._useDirectMapping,\r\n            undefined,\r\n            () => {\r\n                this.onLoadObservable.notifyObservers();\r\n            },\r\n            (message, exception) => {\r\n                this.onLoadErrorObservable.notifyObservers(message || \"Unknown error occured\");\r\n\r\n                if (this.onError) {\r\n                    this.onError(message, exception);\r\n                }\r\n            }\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}