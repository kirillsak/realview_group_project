{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { GetTGAHeader, UploadContent } from \"../../../Misc/tga.js\";\nimport { Engine } from \"../../../Engines/engine.js\";\n/**\n * Implementation of the TGA Texture Loader.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _TGATextureLoader {\n  constructor() {\n    /**\n     * Defines whether the loader supports cascade loading the different faces.\n     */\n    this.supportCascades = false;\n  }\n  /**\n   * This returns if the loader support the current file information.\n   * @param extension defines the file extension of the file being loaded\n   * @returns true if the loader can load the specified file\n   */\n  canLoad(extension) {\n    return extension.endsWith(\".tga\");\n  }\n  /**\n   * Uploads the cube texture data to the WebGL texture. It has already been bound.\n   */\n  loadCubeData() {\n    throw \".env not supported in Cube.\";\n  }\n  /**\n   * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n   * @param data contains the texture data\n   * @param texture defines the BabylonJS internal texture\n   * @param callback defines the method to call once ready to upload\n   */\n  loadData(data, texture, callback) {\n    const bytes = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    const header = GetTGAHeader(bytes);\n    callback(header.width, header.height, texture.generateMipMaps, false, () => {\n      UploadContent(texture, bytes);\n    });\n  }\n}\n// Register the loader.\nEngine._TextureLoaders.push(new _TGATextureLoader());","map":{"version":3,"mappings":";AAAA,SAASA,YAAY,EAAEC,aAAa,QAAQ,sBAAoB;AAChE,SAASC,MAAM,QAAQ,4BAA0B;AAIjD;;;;AAIA;AACA,OAAM,MAAOC,iBAAiB;EAA9BC;IACI;;;IAGgB,oBAAe,GAAG,KAAK;EAoC3C;EAlCI;;;;;EAKOC,OAAO,CAACC,SAAiB;IAC5B,OAAOA,SAAS,CAACC,QAAQ,CAAC,MAAM,CAAC;EACrC;EAEA;;;EAGOC,YAAY;IACf,MAAM,6BAA6B;EACvC;EAEA;;;;;;EAMOC,QAAQ,CACXC,IAAqB,EACrBC,OAAwB,EACxBC,QAA+G;IAE/G,MAAMC,KAAK,GAAG,IAAIC,UAAU,CAACJ,IAAI,CAACK,MAAM,EAAEL,IAAI,CAACM,UAAU,EAAEN,IAAI,CAACO,UAAU,CAAC;IAE3E,MAAMC,MAAM,GAAGlB,YAAY,CAACa,KAAK,CAAC;IAClCD,QAAQ,CAACM,MAAM,CAACC,KAAK,EAAED,MAAM,CAACE,MAAM,EAAET,OAAO,CAACU,eAAe,EAAE,KAAK,EAAE,MAAK;MACvEpB,aAAa,CAACU,OAAO,EAAEE,KAAK,CAAC;IACjC,CAAC,CAAC;EACN;;AAGJ;AACAX,MAAM,CAACoB,eAAe,CAACC,IAAI,CAAC,IAAIpB,iBAAiB,EAAE,CAAC","names":["GetTGAHeader","UploadContent","Engine","_TGATextureLoader","constructor","canLoad","extension","endsWith","loadCubeData","loadData","data","texture","callback","bytes","Uint8Array","buffer","byteOffset","byteLength","header","width","height","generateMipMaps","_TextureLoaders","push"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Textures/Loaders/tgaTextureLoader.ts"],"sourcesContent":["import { GetTGAHeader, UploadContent } from \"../../../Misc/tga\";\r\nimport { Engine } from \"../../../Engines/engine\";\r\nimport type { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport type { IInternalTextureLoader } from \"../../../Materials/Textures/internalTextureLoader\";\r\n\r\n/**\r\n * Implementation of the TGA Texture Loader.\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _TGATextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines whether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = false;\r\n\r\n    /**\r\n     * This returns if the loader support the current file information.\r\n     * @param extension defines the file extension of the file being loaded\r\n     * @returns true if the loader can load the specified file\r\n     */\r\n    public canLoad(extension: string): boolean {\r\n        return extension.endsWith(\".tga\");\r\n    }\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n     */\r\n    public loadCubeData(): void {\r\n        throw \".env not supported in Cube.\";\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     */\r\n    public loadData(\r\n        data: ArrayBufferView,\r\n        texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void) => void\r\n    ): void {\r\n        const bytes = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\r\n\r\n        const header = GetTGAHeader(bytes);\r\n        callback(header.width, header.height, texture.generateMipMaps, false, () => {\r\n            UploadContent(texture, bytes);\r\n        });\r\n    }\r\n}\r\n\r\n// Register the loader.\r\nEngine._TextureLoaders.push(new _TGATextureLoader());\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}