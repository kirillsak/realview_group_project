{"ast":null,"code":"import { Texture } from \"@babylonjs/core/Materials/Textures/texture.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nconst NAME = \"KHR_texture_transform\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_texture_transform/README.md)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_texture_transform {\n  /**\n   * @internal\n   */\n  constructor(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @internal */\n  dispose() {\n    this._loader = null;\n  }\n  /**\n   * @internal\n   */\n  loadTextureInfoAsync(context, textureInfo, assign) {\n    return GLTFLoader.LoadExtensionAsync(context, textureInfo, this.name, (extensionContext, extension) => {\n      return this._loader.loadTextureInfoAsync(context, textureInfo, babylonTexture => {\n        if (!(babylonTexture instanceof Texture)) {\n          throw new Error(`${extensionContext}: Texture type not supported`);\n        }\n        if (extension.offset) {\n          babylonTexture.uOffset = extension.offset[0];\n          babylonTexture.vOffset = extension.offset[1];\n        }\n        // Always rotate around the origin.\n        babylonTexture.uRotationCenter = 0;\n        babylonTexture.vRotationCenter = 0;\n        if (extension.rotation) {\n          babylonTexture.wAng = -extension.rotation;\n        }\n        if (extension.scale) {\n          babylonTexture.uScale = extension.scale[0];\n          babylonTexture.vScale = extension.scale[1];\n        }\n        if (extension.texCoord != undefined) {\n          babylonTexture.coordinatesIndex = extension.texCoord;\n        }\n        assign(babylonTexture);\n      });\n    });\n  }\n}\nGLTFLoader.RegisterExtension(NAME, loader => new KHR_texture_transform(loader));","map":{"version":3,"mappings":"AAEA,SAASA,OAAO,QAAE;AAIlB,SAASC,UAAU,QAAQ,kBAAgB;AAG3C,MAAMC,IAAI,GAAG,uBAAuB;AAEpC;;;AAGA;AACA,OAAM,MAAOC,qBAAqB;EAa9B;;;EAGAC,YAAYC,MAAkB;IAf9B;;;IAGgB,SAAI,GAAGH,IAAI;IAavB,IAAI,CAACI,OAAO,GAAGD,MAAM;IACrB,IAAI,CAACE,OAAO,GAAG,IAAI,CAACD,OAAO,CAACE,eAAe,CAACN,IAAI,CAAC;EACrD;EAEA;EACOO,OAAO;IACT,IAAI,CAACH,OAAe,GAAG,IAAI;EAChC;EAEA;;;EAGOI,oBAAoB,CAACC,OAAe,EAAEC,WAAyB,EAAEC,MAA6C;IACjH,OAAOZ,UAAU,CAACa,kBAAkB,CAAoCH,OAAO,EAAEC,WAAW,EAAE,IAAI,CAACG,IAAI,EAAE,CAACC,gBAAgB,EAAEC,SAAS,KAAI;MACrI,OAAO,IAAI,CAACX,OAAO,CAACI,oBAAoB,CAACC,OAAO,EAAEC,WAAW,EAAGM,cAAc,IAAI;QAC9E,IAAI,EAAEA,cAAc,YAAYlB,OAAO,CAAC,EAAE;UACtC,MAAM,IAAImB,KAAK,CAAC,GAAGH,gBAAgB,8BAA8B,CAAC;;QAGtE,IAAIC,SAAS,CAACG,MAAM,EAAE;UAClBF,cAAc,CAACG,OAAO,GAAGJ,SAAS,CAACG,MAAM,CAAC,CAAC,CAAC;UAC5CF,cAAc,CAACI,OAAO,GAAGL,SAAS,CAACG,MAAM,CAAC,CAAC,CAAC;;QAGhD;QACAF,cAAc,CAACK,eAAe,GAAG,CAAC;QAClCL,cAAc,CAACM,eAAe,GAAG,CAAC;QAElC,IAAIP,SAAS,CAACQ,QAAQ,EAAE;UACpBP,cAAc,CAACQ,IAAI,GAAG,CAACT,SAAS,CAACQ,QAAQ;;QAG7C,IAAIR,SAAS,CAACU,KAAK,EAAE;UACjBT,cAAc,CAACU,MAAM,GAAGX,SAAS,CAACU,KAAK,CAAC,CAAC,CAAC;UAC1CT,cAAc,CAACW,MAAM,GAAGZ,SAAS,CAACU,KAAK,CAAC,CAAC,CAAC;;QAG9C,IAAIV,SAAS,CAACa,QAAQ,IAAIC,SAAS,EAAE;UACjCb,cAAc,CAACc,gBAAgB,GAAGf,SAAS,CAACa,QAAQ;;QAGxDjB,MAAM,CAACK,cAAc,CAAC;MAC1B,CAAC,CAAC;IACN,CAAC,CAAC;EACN;;AAGJjB,UAAU,CAACgC,iBAAiB,CAAC/B,IAAI,EAAGG,MAAM,IAAK,IAAIF,qBAAqB,CAACE,MAAM,CAAC,CAAC","names":["Texture","GLTFLoader","NAME","KHR_texture_transform","constructor","loader","_loader","enabled","isExtensionUsed","dispose","loadTextureInfoAsync","context","textureInfo","assign","LoadExtensionAsync","name","extensionContext","extension","babylonTexture","Error","offset","uOffset","vOffset","uRotationCenter","vRotationCenter","rotation","wAng","scale","uScale","vScale","texCoord","undefined","coordinatesIndex","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_texture_transform.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\n\r\nimport type { ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRTextureTransform } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_texture_transform\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_texture_transform/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_texture_transform implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadTextureInfoAsync(context: string, textureInfo: ITextureInfo, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRTextureTransform, BaseTexture>(context, textureInfo, this.name, (extensionContext, extension) => {\r\n            return this._loader.loadTextureInfoAsync(context, textureInfo, (babylonTexture) => {\r\n                if (!(babylonTexture instanceof Texture)) {\r\n                    throw new Error(`${extensionContext}: Texture type not supported`);\r\n                }\r\n\r\n                if (extension.offset) {\r\n                    babylonTexture.uOffset = extension.offset[0];\r\n                    babylonTexture.vOffset = extension.offset[1];\r\n                }\r\n\r\n                // Always rotate around the origin.\r\n                babylonTexture.uRotationCenter = 0;\r\n                babylonTexture.vRotationCenter = 0;\r\n\r\n                if (extension.rotation) {\r\n                    babylonTexture.wAng = -extension.rotation;\r\n                }\r\n\r\n                if (extension.scale) {\r\n                    babylonTexture.uScale = extension.scale[0];\r\n                    babylonTexture.vScale = extension.scale[1];\r\n                }\r\n\r\n                if (extension.texCoord != undefined) {\r\n                    babylonTexture.coordinatesIndex = extension.texCoord;\r\n                }\r\n\r\n                assign(babylonTexture);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_texture_transform(loader));\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}