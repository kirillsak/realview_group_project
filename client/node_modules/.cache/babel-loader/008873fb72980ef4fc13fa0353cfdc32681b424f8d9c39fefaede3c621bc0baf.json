{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\nimport { PBRIridescenceConfiguration } from \"../../../../Materials/PBR/pbrIridescenceConfiguration.js\";\n/**\n * Block used to implement the iridescence module of the PBR material\n */\nexport class IridescenceBlock extends NodeMaterialBlock {\n  /**\n   * Create a new IridescenceBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Fragment);\n    this._isUnique = true;\n    this.registerInput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"thickness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"iridescence\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"iridescence\", this, NodeMaterialConnectionPointDirection.Output, IridescenceBlock, \"IridescenceBlock\"));\n  }\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n  initialize(state) {\n    state._excludeVariableName(\"iridescenceOut\");\n    state._excludeVariableName(\"vIridescenceParams\");\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"IridescenceBlock\";\n  }\n  /**\n   * Gets the intensity input component\n   */\n  get intensity() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the indexOfRefraction input component\n   */\n  get indexOfRefraction() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the thickness input component\n   */\n  get thickness() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the iridescence object output component\n   */\n  get iridescence() {\n    return this._outputs[0];\n  }\n  autoConfigure() {\n    if (!this.intensity.isConnected) {\n      const intensityInput = new InputBlock(\"Iridescence intensity\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\n      intensityInput.value = 1;\n      intensityInput.output.connectTo(this.intensity);\n      const indexOfRefractionInput = new InputBlock(\"Iridescence ior\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\n      indexOfRefractionInput.value = 1.3;\n      indexOfRefractionInput.output.connectTo(this.indexOfRefraction);\n      const thicknessInput = new InputBlock(\"Iridescence thickness\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\n      thicknessInput.value = 400;\n      thicknessInput.output.connectTo(this.thickness);\n    }\n  }\n  prepareDefines(mesh, nodeMaterial, defines) {\n    super.prepareDefines(mesh, nodeMaterial, defines);\n    defines.setValue(\"IRIDESCENCE\", true, true);\n    defines.setValue(\"IRIDESCENCE_TEXTURE\", false, true);\n    defines.setValue(\"IRIDESCENCE_THICKNESS_TEXTURE\", false, true);\n  }\n  /**\n   * Gets the main code of the block (fragment side)\n   * @param iridescenceBlock instance of a IridescenceBlock or null if the code must be generated without an active iridescence module\n   * @returns the shader code\n   */\n  static GetCode(iridescenceBlock) {\n    let code = \"\";\n    const intensityName = (iridescenceBlock === null || iridescenceBlock === void 0 ? void 0 : iridescenceBlock.intensity.isConnected) ? iridescenceBlock.intensity.associatedVariableName : \"1.\";\n    const indexOfRefraction = (iridescenceBlock === null || iridescenceBlock === void 0 ? void 0 : iridescenceBlock.indexOfRefraction.isConnected) ? iridescenceBlock.indexOfRefraction.associatedVariableName : PBRIridescenceConfiguration._DefaultIndexOfRefraction;\n    const thickness = (iridescenceBlock === null || iridescenceBlock === void 0 ? void 0 : iridescenceBlock.thickness.isConnected) ? iridescenceBlock.thickness.associatedVariableName : PBRIridescenceConfiguration._DefaultMaximumThickness;\n    code += `iridescenceOutParams iridescenceOut;\n\n        #ifdef IRIDESCENCE\n            iridescenceBlock(\n                vec4(${intensityName}, ${indexOfRefraction}, 1., ${thickness}),\n                NdotV,\n                specularEnvironmentR0,\n                #ifdef CLEARCOAT\n                    NdotVUnclamped,\n                #endif\n                iridescenceOut\n            );\n\n            float iridescenceIntensity = iridescenceOut.iridescenceIntensity;\n            specularEnvironmentR0 = iridescenceOut.specularEnvironmentR0;\n        #endif\\r\\n`;\n    return code;\n  }\n  _buildBlock(state) {\n    if (state.target === NodeMaterialBlockTargets.Fragment) {\n      state.sharedData.bindableBlocks.push(this);\n      state.sharedData.blocksWithDefines.push(this);\n    }\n    return this;\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    return serializationObject;\n  }\n  _deserialize(serializationObject, scene, rootUrl) {\n    super._deserialize(serializationObject, scene, rootUrl);\n  }\n}\nRegisterClass(\"BABYLON.IridescenceBlock\", IridescenceBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialConnectionPointDirection","NodeMaterialBlockTargets","RegisterClass","InputBlock","NodeMaterialConnectionPointCustomObject","PBRIridescenceConfiguration","IridescenceBlock","constructor","name","Fragment","_isUnique","registerInput","Float","registerOutput","Object","Output","initialize","state","_excludeVariableName","getClassName","intensity","_inputs","indexOfRefraction","thickness","iridescence","_outputs","autoConfigure","isConnected","intensityInput","value","output","connectTo","indexOfRefractionInput","thicknessInput","prepareDefines","mesh","nodeMaterial","defines","setValue","GetCode","iridescenceBlock","code","intensityName","associatedVariableName","_DefaultIndexOfRefraction","_DefaultMaximumThickness","_buildBlock","target","sharedData","bindableBlocks","push","blocksWithDefines","serialize","serializationObject","_deserialize","scene","rootUrl"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/PBR/iridescenceBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport { PBRIridescenceConfiguration } from \"../../../../Materials/PBR/pbrIridescenceConfiguration\";\r\n\r\n/**\r\n * Block used to implement the iridescence module of the PBR material\r\n */\r\nexport class IridescenceBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new IridescenceBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"thickness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\r\n            \"iridescence\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"iridescence\", this, NodeMaterialConnectionPointDirection.Output, IridescenceBlock, \"IridescenceBlock\")\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"iridescenceOut\");\r\n        state._excludeVariableName(\"vIridescenceParams\");\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"IridescenceBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the intensity input component\r\n     */\r\n    public get intensity(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the indexOfRefraction input component\r\n     */\r\n    public get indexOfRefraction(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the thickness input component\r\n     */\r\n    public get thickness(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the iridescence object output component\r\n     */\r\n    public get iridescence(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure() {\r\n        if (!this.intensity.isConnected) {\r\n            const intensityInput = new InputBlock(\"Iridescence intensity\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\r\n            intensityInput.value = 1;\r\n            intensityInput.output.connectTo(this.intensity);\r\n\r\n            const indexOfRefractionInput = new InputBlock(\"Iridescence ior\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\r\n            indexOfRefractionInput.value = 1.3;\r\n            indexOfRefractionInput.output.connectTo(this.indexOfRefraction);\r\n\r\n            const thicknessInput = new InputBlock(\"Iridescence thickness\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\r\n            thicknessInput.value = 400;\r\n            thicknessInput.output.connectTo(this.thickness);\r\n        }\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        super.prepareDefines(mesh, nodeMaterial, defines);\r\n\r\n        defines.setValue(\"IRIDESCENCE\", true, true);\r\n        defines.setValue(\"IRIDESCENCE_TEXTURE\", false, true);\r\n        defines.setValue(\"IRIDESCENCE_THICKNESS_TEXTURE\", false, true);\r\n    }\r\n\r\n    /**\r\n     * Gets the main code of the block (fragment side)\r\n     * @param iridescenceBlock instance of a IridescenceBlock or null if the code must be generated without an active iridescence module\r\n     * @returns the shader code\r\n     */\r\n    public static GetCode(iridescenceBlock: Nullable<IridescenceBlock>): string {\r\n        let code = \"\";\r\n\r\n        const intensityName = iridescenceBlock?.intensity.isConnected ? iridescenceBlock.intensity.associatedVariableName : \"1.\";\r\n        const indexOfRefraction = iridescenceBlock?.indexOfRefraction.isConnected\r\n            ? iridescenceBlock.indexOfRefraction.associatedVariableName\r\n            : PBRIridescenceConfiguration._DefaultIndexOfRefraction;\r\n        const thickness = iridescenceBlock?.thickness.isConnected ? iridescenceBlock.thickness.associatedVariableName : PBRIridescenceConfiguration._DefaultMaximumThickness;\r\n\r\n        code += `iridescenceOutParams iridescenceOut;\r\n\r\n        #ifdef IRIDESCENCE\r\n            iridescenceBlock(\r\n                vec4(${intensityName}, ${indexOfRefraction}, 1., ${thickness}),\r\n                NdotV,\r\n                specularEnvironmentR0,\r\n                #ifdef CLEARCOAT\r\n                    NdotVUnclamped,\r\n                #endif\r\n                iridescenceOut\r\n            );\r\n\r\n            float iridescenceIntensity = iridescenceOut.iridescenceIntensity;\r\n            specularEnvironmentR0 = iridescenceOut.specularEnvironmentR0;\r\n        #endif\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.sharedData.bindableBlocks.push(this);\r\n            state.sharedData.blocksWithDefines.push(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.IridescenceBlock\", IridescenceBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}