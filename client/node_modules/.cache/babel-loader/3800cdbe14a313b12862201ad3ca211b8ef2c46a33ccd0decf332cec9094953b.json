{"ast":null,"code":"import { Matrix } from \"../../Maths/math.vector.js\";\n/**\n * This represents all the required metrics to create a VR camera.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#device-orientation-camera\n */\nexport class VRCameraMetrics {\n  constructor() {\n    /**\n     * Define if the current vr camera should compensate the distortion of the lens or not.\n     */\n    this.compensateDistortion = true;\n    /**\n     * Defines if multiview should be enabled when rendering (Default: false)\n     */\n    this.multiviewEnabled = false;\n  }\n  /**\n   * Gets the rendering aspect ratio based on the provided resolutions.\n   */\n  get aspectRatio() {\n    return this.hResolution / (2 * this.vResolution);\n  }\n  /**\n   * Gets the aspect ratio based on the FOV, scale factors, and real screen sizes.\n   */\n  get aspectRatioFov() {\n    return 2 * Math.atan(this.postProcessScaleFactor * this.vScreenSize / (2 * this.eyeToScreenDistance));\n  }\n  /**\n   * @internal\n   */\n  get leftHMatrix() {\n    const meters = this.hScreenSize / 4 - this.lensSeparationDistance / 2;\n    const h = 4 * meters / this.hScreenSize;\n    return Matrix.Translation(h, 0, 0);\n  }\n  /**\n   * @internal\n   */\n  get rightHMatrix() {\n    const meters = this.hScreenSize / 4 - this.lensSeparationDistance / 2;\n    const h = 4 * meters / this.hScreenSize;\n    return Matrix.Translation(-h, 0, 0);\n  }\n  /**\n   * @internal\n   */\n  get leftPreViewMatrix() {\n    return Matrix.Translation(0.5 * this.interpupillaryDistance, 0, 0);\n  }\n  /**\n   * @internal\n   */\n  get rightPreViewMatrix() {\n    return Matrix.Translation(-0.5 * this.interpupillaryDistance, 0, 0);\n  }\n  /**\n   * Get the default VRMetrics based on the most generic setup.\n   * @returns the default vr metrics\n   */\n  static GetDefault() {\n    const result = new VRCameraMetrics();\n    result.hResolution = 1280;\n    result.vResolution = 800;\n    result.hScreenSize = 0.149759993;\n    result.vScreenSize = 0.0935999975;\n    result.vScreenCenter = 0.0467999987;\n    result.eyeToScreenDistance = 0.0410000011;\n    result.lensSeparationDistance = 0.063500002;\n    result.interpupillaryDistance = 0.064000003;\n    result.distortionK = [1.0, 0.219999999, 0.239999995, 0.0];\n    result.chromaAbCorrection = [0.995999992, -0.00400000019, 1.01400006, 0.0];\n    result.postProcessScaleFactor = 1.714605507808412;\n    result.lensCenterOffset = 0.151976421;\n    return result;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAQ,4BAA0B;AACjD;;;;AAIA,OAAM,MAAOC,eAAe;EAA5BC;IAmDI;;;IAGO,yBAAoB,GAAG,IAAI;IAElC;;;IAGO,qBAAgB,GAAG,KAAK;EAwEnC;EAtEI;;;EAGA,IAAWC,WAAW;IAClB,OAAO,IAAI,CAACC,WAAW,IAAI,CAAC,GAAG,IAAI,CAACC,WAAW,CAAC;EACpD;EAEA;;;EAGA,IAAWC,cAAc;IACrB,OAAO,CAAC,GAAGC,IAAI,CAACC,IAAI,CAAE,IAAI,CAACC,sBAAsB,GAAG,IAAI,CAACC,WAAW,IAAK,CAAC,GAAG,IAAI,CAACC,mBAAmB,CAAC,CAAC;EAC3G;EAEA;;;EAGA,IAAWC,WAAW;IAClB,MAAMC,MAAM,GAAG,IAAI,CAACC,WAAW,GAAG,CAAC,GAAG,IAAI,CAACC,sBAAsB,GAAG,CAAC;IACrE,MAAMC,CAAC,GAAI,CAAC,GAAGH,MAAM,GAAI,IAAI,CAACC,WAAW;IAEzC,OAAOd,MAAM,CAACiB,WAAW,CAACD,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACtC;EAEA;;;EAGA,IAAWE,YAAY;IACnB,MAAML,MAAM,GAAG,IAAI,CAACC,WAAW,GAAG,CAAC,GAAG,IAAI,CAACC,sBAAsB,GAAG,CAAC;IACrE,MAAMC,CAAC,GAAI,CAAC,GAAGH,MAAM,GAAI,IAAI,CAACC,WAAW;IAEzC,OAAOd,MAAM,CAACiB,WAAW,CAAC,CAACD,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACvC;EAEA;;;EAGA,IAAWG,iBAAiB;IACxB,OAAOnB,MAAM,CAACiB,WAAW,CAAC,GAAG,GAAG,IAAI,CAACG,sBAAsB,EAAE,CAAC,EAAE,CAAC,CAAC;EACtE;EAEA;;;EAGA,IAAWC,kBAAkB;IACzB,OAAOrB,MAAM,CAACiB,WAAW,CAAC,CAAC,GAAG,GAAG,IAAI,CAACG,sBAAsB,EAAE,CAAC,EAAE,CAAC,CAAC;EACvE;EAEA;;;;EAIO,OAAOE,UAAU;IACpB,MAAMC,MAAM,GAAG,IAAItB,eAAe,EAAE;IAEpCsB,MAAM,CAACnB,WAAW,GAAG,IAAI;IACzBmB,MAAM,CAAClB,WAAW,GAAG,GAAG;IACxBkB,MAAM,CAACT,WAAW,GAAG,WAAW;IAChCS,MAAM,CAACb,WAAW,GAAG,YAAY;IACjCa,MAAM,CAACC,aAAa,GAAG,YAAY;IACnCD,MAAM,CAACZ,mBAAmB,GAAG,YAAY;IACzCY,MAAM,CAACR,sBAAsB,GAAG,WAAW;IAC3CQ,MAAM,CAACH,sBAAsB,GAAG,WAAW;IAC3CG,MAAM,CAACE,WAAW,GAAG,CAAC,GAAG,EAAE,WAAW,EAAE,WAAW,EAAE,GAAG,CAAC;IACzDF,MAAM,CAACG,kBAAkB,GAAG,CAAC,WAAW,EAAE,CAAC,aAAa,EAAE,UAAU,EAAE,GAAG,CAAC;IAC1EH,MAAM,CAACd,sBAAsB,GAAG,iBAAiB;IACjDc,MAAM,CAACI,gBAAgB,GAAG,WAAW;IAErC,OAAOJ,MAAM;EACjB","names":["Matrix","VRCameraMetrics","constructor","aspectRatio","hResolution","vResolution","aspectRatioFov","Math","atan","postProcessScaleFactor","vScreenSize","eyeToScreenDistance","leftHMatrix","meters","hScreenSize","lensSeparationDistance","h","Translation","rightHMatrix","leftPreViewMatrix","interpupillaryDistance","rightPreViewMatrix","GetDefault","result","vScreenCenter","distortionK","chromaAbCorrection","lensCenterOffset"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/VR/vrCameraMetrics.ts"],"sourcesContent":["import { Matrix } from \"../../Maths/math.vector\";\r\n/**\r\n * This represents all the required metrics to create a VR camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#device-orientation-camera\r\n */\r\nexport class VRCameraMetrics {\r\n    /**\r\n     * Define the horizontal resolution off the screen.\r\n     */\r\n    public hResolution: number;\r\n    /**\r\n     * Define the vertical resolution off the screen.\r\n     */\r\n    public vResolution: number;\r\n    /**\r\n     * Define the horizontal screen size.\r\n     */\r\n    public hScreenSize: number;\r\n    /**\r\n     * Define the vertical screen size.\r\n     */\r\n    public vScreenSize: number;\r\n    /**\r\n     * Define the vertical screen center position.\r\n     */\r\n    public vScreenCenter: number;\r\n    /**\r\n     * Define the distance of the eyes to the screen.\r\n     */\r\n    public eyeToScreenDistance: number;\r\n    /**\r\n     * Define the distance between both lenses\r\n     */\r\n    public lensSeparationDistance: number;\r\n    /**\r\n     * Define the distance between both viewer's eyes.\r\n     */\r\n    public interpupillaryDistance: number;\r\n    /**\r\n     * Define the distortion factor of the VR postprocess.\r\n     * Please, touch with care.\r\n     */\r\n    public distortionK: number[];\r\n    /**\r\n     * Define the chromatic aberration correction factors for the VR post process.\r\n     */\r\n    public chromaAbCorrection: number[];\r\n    /**\r\n     * Define the scale factor of the post process.\r\n     * The smaller the better but the slower.\r\n     */\r\n    public postProcessScaleFactor: number;\r\n    /**\r\n     * Define an offset for the lens center.\r\n     */\r\n    public lensCenterOffset: number;\r\n    /**\r\n     * Define if the current vr camera should compensate the distortion of the lens or not.\r\n     */\r\n    public compensateDistortion = true;\r\n\r\n    /**\r\n     * Defines if multiview should be enabled when rendering (Default: false)\r\n     */\r\n    public multiviewEnabled = false;\r\n\r\n    /**\r\n     * Gets the rendering aspect ratio based on the provided resolutions.\r\n     */\r\n    public get aspectRatio(): number {\r\n        return this.hResolution / (2 * this.vResolution);\r\n    }\r\n\r\n    /**\r\n     * Gets the aspect ratio based on the FOV, scale factors, and real screen sizes.\r\n     */\r\n    public get aspectRatioFov(): number {\r\n        return 2 * Math.atan((this.postProcessScaleFactor * this.vScreenSize) / (2 * this.eyeToScreenDistance));\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public get leftHMatrix(): Matrix {\r\n        const meters = this.hScreenSize / 4 - this.lensSeparationDistance / 2;\r\n        const h = (4 * meters) / this.hScreenSize;\r\n\r\n        return Matrix.Translation(h, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public get rightHMatrix(): Matrix {\r\n        const meters = this.hScreenSize / 4 - this.lensSeparationDistance / 2;\r\n        const h = (4 * meters) / this.hScreenSize;\r\n\r\n        return Matrix.Translation(-h, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public get leftPreViewMatrix(): Matrix {\r\n        return Matrix.Translation(0.5 * this.interpupillaryDistance, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public get rightPreViewMatrix(): Matrix {\r\n        return Matrix.Translation(-0.5 * this.interpupillaryDistance, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Get the default VRMetrics based on the most generic setup.\r\n     * @returns the default vr metrics\r\n     */\r\n    public static GetDefault(): VRCameraMetrics {\r\n        const result = new VRCameraMetrics();\r\n\r\n        result.hResolution = 1280;\r\n        result.vResolution = 800;\r\n        result.hScreenSize = 0.149759993;\r\n        result.vScreenSize = 0.0935999975;\r\n        result.vScreenCenter = 0.0467999987;\r\n        result.eyeToScreenDistance = 0.0410000011;\r\n        result.lensSeparationDistance = 0.063500002;\r\n        result.interpupillaryDistance = 0.064000003;\r\n        result.distortionK = [1.0, 0.219999999, 0.239999995, 0.0];\r\n        result.chromaAbCorrection = [0.995999992, -0.00400000019, 1.01400006, 0.0];\r\n        result.postProcessScaleFactor = 1.714605507808412;\r\n        result.lensCenterOffset = 0.151976421;\r\n\r\n        return result;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}