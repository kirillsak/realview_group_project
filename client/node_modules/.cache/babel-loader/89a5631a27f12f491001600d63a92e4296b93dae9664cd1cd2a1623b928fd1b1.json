{"ast":null,"code":"/** @internal */\nexport class WebGLHardwareTexture {\n  constructor(existingTexture = null, context) {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    this._MSAARenderBuffer = null;\n    this._context = context;\n    if (!existingTexture) {\n      existingTexture = context.createTexture();\n      if (!existingTexture) {\n        throw new Error(\"Unable to create webGL texture\");\n      }\n    }\n    this.set(existingTexture);\n  }\n  get underlyingResource() {\n    return this._webGLTexture;\n  }\n  setUsage() {}\n  set(hardwareTexture) {\n    this._webGLTexture = hardwareTexture;\n  }\n  reset() {\n    this._webGLTexture = null;\n    this._MSAARenderBuffer = null;\n  }\n  release() {\n    if (this._MSAARenderBuffer) {\n      this._context.deleteRenderbuffer(this._MSAARenderBuffer);\n      this._MSAARenderBuffer = null;\n    }\n    if (this._webGLTexture) {\n      this._context.deleteTexture(this._webGLTexture);\n    }\n    this.reset();\n  }\n}","map":{"version":3,"mappings":"AAGA;AACA,OAAM,MAAOA,oBAAoB;EAW7BC,YAAYC,kBAA0C,IAAI,EAAEC,OAA8B;IAP1F;IACO,sBAAiB,GAAgC,IAAI;IAOxD,IAAI,CAACC,QAAQ,GAAGD,OAAgC;IAChD,IAAI,CAACD,eAAe,EAAE;MAClBA,eAAe,GAAGC,OAAO,CAACE,aAAa,EAAE;MACzC,IAAI,CAACH,eAAe,EAAE;QAClB,MAAM,IAAII,KAAK,CAAC,gCAAgC,CAAC;;;IAGzD,IAAI,CAACC,GAAG,CAACL,eAAe,CAAC;EAC7B;EAbA,IAAWM,kBAAkB;IACzB,OAAO,IAAI,CAACC,aAAa;EAC7B;EAaOC,QAAQ,IAAU;EAElBH,GAAG,CAACI,eAA6B;IACpC,IAAI,CAACF,aAAa,GAAGE,eAAe;EACxC;EAEOC,KAAK;IACR,IAAI,CAACH,aAAa,GAAG,IAAW;IAChC,IAAI,CAACI,iBAAiB,GAAG,IAAI;EACjC;EAEOC,OAAO;IACV,IAAI,IAAI,CAACD,iBAAiB,EAAE;MACxB,IAAI,CAACT,QAAQ,CAACW,kBAAkB,CAAC,IAAI,CAACF,iBAAiB,CAAC;MACxD,IAAI,CAACA,iBAAiB,GAAG,IAAI;;IAGjC,IAAI,IAAI,CAACJ,aAAa,EAAE;MACpB,IAAI,CAACL,QAAQ,CAACY,aAAa,CAAC,IAAI,CAACP,aAAa,CAAC;;IAEnD,IAAI,CAACG,KAAK,EAAE;EAChB","names":["WebGLHardwareTexture","constructor","existingTexture","context","_context","createTexture","Error","set","underlyingResource","_webGLTexture","setUsage","hardwareTexture","reset","_MSAARenderBuffer","release","deleteRenderbuffer","deleteTexture"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/WebGL/webGLHardwareTexture.ts"],"sourcesContent":["import type { HardwareTextureWrapper } from \"../../Materials/Textures/hardwareTextureWrapper\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n/** @internal */\r\nexport class WebGLHardwareTexture implements HardwareTextureWrapper {\r\n    private _webGLTexture: WebGLTexture;\r\n    private _context: WebGLRenderingContext;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public _MSAARenderBuffer: Nullable<WebGLRenderbuffer> = null;\r\n\r\n    public get underlyingResource(): Nullable<WebGLTexture> {\r\n        return this._webGLTexture;\r\n    }\r\n\r\n    constructor(existingTexture: Nullable<WebGLTexture> = null, context: WebGLRenderingContext) {\r\n        this._context = context as WebGLRenderingContext;\r\n        if (!existingTexture) {\r\n            existingTexture = context.createTexture();\r\n            if (!existingTexture) {\r\n                throw new Error(\"Unable to create webGL texture\");\r\n            }\r\n        }\r\n        this.set(existingTexture);\r\n    }\r\n\r\n    public setUsage(): void {}\r\n\r\n    public set(hardwareTexture: WebGLTexture) {\r\n        this._webGLTexture = hardwareTexture;\r\n    }\r\n\r\n    public reset() {\r\n        this._webGLTexture = null as any;\r\n        this._MSAARenderBuffer = null;\r\n    }\r\n\r\n    public release() {\r\n        if (this._MSAARenderBuffer) {\r\n            this._context.deleteRenderbuffer(this._MSAARenderBuffer);\r\n            this._MSAARenderBuffer = null;\r\n        }\r\n\r\n        if (this._webGLTexture) {\r\n            this._context.deleteTexture(this._webGLTexture);\r\n        }\r\n        this.reset();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}