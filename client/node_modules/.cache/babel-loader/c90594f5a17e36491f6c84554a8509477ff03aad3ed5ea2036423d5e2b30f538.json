{"ast":null,"code":"import { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { TriPlanarBlock } from \"./triPlanarBlock.js\";\n/**\n * Block used to read a texture with triplanar mapping (see https://iquilezles.org/articles/biplanar/)\n */\nexport class BiPlanarBlock extends TriPlanarBlock {\n  /**\n   * Create a new BiPlanarBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, true);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"BiPlanarBlock\";\n  }\n  _generateTextureLookup(state) {\n    var _a;\n    const samplerName = this.samplerName;\n    const samplerYName = (_a = this.samplerYName) !== null && _a !== void 0 ? _a : this.samplerName;\n    const sharpness = this.sharpness.isConnected ? this.sharpness.associatedVariableName : \"1.0\";\n    const dpdx = state._getFreeVariableName(\"dpdx\");\n    const dpdy = state._getFreeVariableName(\"dpdy\");\n    const n = state._getFreeVariableName(\"n\");\n    const ma = state._getFreeVariableName(\"ma\");\n    const mi = state._getFreeVariableName(\"mi\");\n    const me = state._getFreeVariableName(\"me\");\n    const x = state._getFreeVariableName(\"x\");\n    const y = state._getFreeVariableName(\"y\");\n    const w = state._getFreeVariableName(\"y\");\n    state.compilationString += `\n            // grab coord derivatives for texturing\n            vec3 ${dpdx} = dFdx(${this.position.associatedVariableName}.xyz);\n            vec3 ${dpdy} = dFdy(${this.position.associatedVariableName}.xyz);\n            vec3 ${n} = abs(${this.normal.associatedVariableName}.xyz);\n        \n            // determine major axis (in x; yz are following axis)\n            ivec3 ${ma} = (${n}.x>${n}.y && ${n}.x>${n}.z) ? ivec3(0,1,2) :\n                    (${n}.y>${n}.z)            ? ivec3(1,2,0) :\n                                            ivec3(2,0,1) ;\n            // determine minor axis (in x; yz are following axis)\n            ivec3 ${mi} = (${n}.x<${n}.y && ${n}.x<${n}.z) ? ivec3(0,1,2) :\n                    (${n}.y<${n}.z)            ? ivec3(1,2,0) :\n                                            ivec3(2,0,1) ;\n            // determine median axis (in x;  yz are following axis)\n            ivec3 ${me} = ivec3(3) - ${mi} - ${ma};\n            \n            // project+fetch\n            vec4 ${x} = textureGrad( ${samplerName}, vec2(   ${this.position.associatedVariableName}[${ma}.y],   ${this.position.associatedVariableName}[${ma}.z]), \n                                    vec2(${dpdx}[${ma}.y],${dpdx}[${ma}.z]), \n                                    vec2(${dpdy}[${ma}.y],${dpdy}[${ma}.z]) );\n            vec4 ${y} = textureGrad( ${samplerYName}, vec2(   ${this.position.associatedVariableName}[${me}.y],   ${this.position.associatedVariableName}[${me}.z]), \n                                    vec2(${dpdx}[${me}.y],${dpdx}[${me}.z]),\n                                    vec2(${dpdy}[${me}.y],${dpdy}[${me}.z]) );\n            \n            // blend factors\n            vec2 ${w} = vec2(${n}[${ma}.x],${n}[${me}.x]);\n            // make local support\n            ${w} = clamp( (${w}-0.5773)/(1.0-0.5773), 0.0, 1.0 );\n            // shape transition\n            ${w} = pow( ${w}, vec2(${sharpness}/8.0) );\n            // blend and return\n            vec4 ${this._tempTextureRead} = (${x}*${w}.x + ${y}*${w}.y) / (${w}.x + ${w}.y);\n        `;\n  }\n}\nRegisterClass(\"BABYLON.BiPlanarBlock\", BiPlanarBlock);","map":{"version":3,"mappings":"AACA,SAASA,aAAa,QAAQ,4BAA0B;AACxD,SAASC,cAAc,QAAQ,qBAAmB;AAElD;;;AAGA,OAAM,MAAOC,aAAc,SAAQD,cAAc;EAC7C;;;;EAIAE,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,EAAE,IAAI,CAAC;EACrB;EAEA;;;;EAIOC,YAAY;IACf,OAAO,eAAe;EAC1B;EAEUC,sBAAsB,CAACC,KAA6B;;IAC1D,MAAMC,WAAW,GAAG,IAAI,CAACA,WAAW;IACpC,MAAMC,YAAY,GAAG,UAAI,CAACA,YAAY,mCAAI,IAAI,CAACD,WAAW;IAE1D,MAAME,SAAS,GAAG,IAAI,CAACA,SAAS,CAACC,WAAW,GAAG,IAAI,CAACD,SAAS,CAACE,sBAAsB,GAAG,KAAK;IAE5F,MAAMC,IAAI,GAAGN,KAAK,CAACO,oBAAoB,CAAC,MAAM,CAAC;IAC/C,MAAMC,IAAI,GAAGR,KAAK,CAACO,oBAAoB,CAAC,MAAM,CAAC;IAC/C,MAAME,CAAC,GAAGT,KAAK,CAACO,oBAAoB,CAAC,GAAG,CAAC;IACzC,MAAMG,EAAE,GAAGV,KAAK,CAACO,oBAAoB,CAAC,IAAI,CAAC;IAC3C,MAAMI,EAAE,GAAGX,KAAK,CAACO,oBAAoB,CAAC,IAAI,CAAC;IAC3C,MAAMK,EAAE,GAAGZ,KAAK,CAACO,oBAAoB,CAAC,IAAI,CAAC;IAC3C,MAAMM,CAAC,GAAGb,KAAK,CAACO,oBAAoB,CAAC,GAAG,CAAC;IACzC,MAAMO,CAAC,GAAGd,KAAK,CAACO,oBAAoB,CAAC,GAAG,CAAC;IACzC,MAAMQ,CAAC,GAAGf,KAAK,CAACO,oBAAoB,CAAC,GAAG,CAAC;IAEzCP,KAAK,CAACgB,iBAAiB,IAAI;;mBAEhBV,IAAI,WAAW,IAAI,CAACW,QAAQ,CAACZ,sBAAsB;mBACnDG,IAAI,WAAW,IAAI,CAACS,QAAQ,CAACZ,sBAAsB;mBACnDI,CAAC,UAAU,IAAI,CAACS,MAAM,CAACb,sBAAsB;;;oBAG5CK,EAAE,OAAOD,CAAC,MAAMA,CAAC,SAASA,CAAC,MAAMA,CAAC;uBAC/BA,CAAC,MAAMA,CAAC;;;oBAGXE,EAAE,OAAOF,CAAC,MAAMA,CAAC,SAASA,CAAC,MAAMA,CAAC;uBAC/BA,CAAC,MAAMA,CAAC;;;oBAGXG,EAAE,iBAAiBD,EAAE,MAAMD,EAAE;;;mBAG9BG,CAAC,mBAAmBZ,WAAW,aAAa,IAAI,CAACgB,QAAQ,CAACZ,sBAAsB,IAAIK,EAAE,UAAU,IAAI,CAACO,QAAQ,CAACZ,sBAAsB,IAAIK,EAAE;2CAClHJ,IAAI,IAAII,EAAE,OAAOJ,IAAI,IAAII,EAAE;2CAC3BF,IAAI,IAAIE,EAAE,OAAOF,IAAI,IAAIE,EAAE;mBACnDI,CAAC,mBAAmBZ,YAAY,aAAa,IAAI,CAACe,QAAQ,CAACZ,sBAAsB,IAAIO,EAAE,UAAU,IAAI,CAACK,QAAQ,CAACZ,sBAAsB,IAAIO,EAAE;2CACnHN,IAAI,IAAIM,EAAE,OAAON,IAAI,IAAIM,EAAE;2CAC3BJ,IAAI,IAAII,EAAE,OAAOJ,IAAI,IAAII,EAAE;;;mBAGnDG,CAAC,WAAWN,CAAC,IAAIC,EAAE,OAAOD,CAAC,IAAIG,EAAE;;cAEtCG,CAAC,cAAcA,CAAC;;cAEhBA,CAAC,WAAWA,CAAC,UAAUZ,SAAS;;mBAE3B,IAAI,CAACgB,gBAAgB,OAAON,CAAC,IAAIE,CAAC,QAAQD,CAAC,IAAIC,CAAC,UAAUA,CAAC,QAAQA,CAAC;SAC9E;EACL;;AAGJtB,aAAa,CAAC,uBAAuB,EAAEE,aAAa,CAAC","names":["RegisterClass","TriPlanarBlock","BiPlanarBlock","constructor","name","getClassName","_generateTextureLookup","state","samplerName","samplerYName","sharpness","isConnected","associatedVariableName","dpdx","_getFreeVariableName","dpdy","n","ma","mi","me","x","y","w","compilationString","position","normal","_tempTextureRead"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Node/Blocks/biPlanarBlock.ts"],"sourcesContent":["import type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { TriPlanarBlock } from \"./triPlanarBlock\";\r\n\r\n/**\r\n * Block used to read a texture with triplanar mapping (see https://iquilezles.org/articles/biplanar/)\r\n */\r\nexport class BiPlanarBlock extends TriPlanarBlock {\r\n    /**\r\n     * Create a new BiPlanarBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, true);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"BiPlanarBlock\";\r\n    }\r\n\r\n    protected _generateTextureLookup(state: NodeMaterialBuildState): void {\r\n        const samplerName = this.samplerName;\r\n        const samplerYName = this.samplerYName ?? this.samplerName;\r\n\r\n        const sharpness = this.sharpness.isConnected ? this.sharpness.associatedVariableName : \"1.0\";\r\n\r\n        const dpdx = state._getFreeVariableName(\"dpdx\");\r\n        const dpdy = state._getFreeVariableName(\"dpdy\");\r\n        const n = state._getFreeVariableName(\"n\");\r\n        const ma = state._getFreeVariableName(\"ma\");\r\n        const mi = state._getFreeVariableName(\"mi\");\r\n        const me = state._getFreeVariableName(\"me\");\r\n        const x = state._getFreeVariableName(\"x\");\r\n        const y = state._getFreeVariableName(\"y\");\r\n        const w = state._getFreeVariableName(\"y\");\r\n\r\n        state.compilationString += `\r\n            // grab coord derivatives for texturing\r\n            vec3 ${dpdx} = dFdx(${this.position.associatedVariableName}.xyz);\r\n            vec3 ${dpdy} = dFdy(${this.position.associatedVariableName}.xyz);\r\n            vec3 ${n} = abs(${this.normal.associatedVariableName}.xyz);\r\n        \r\n            // determine major axis (in x; yz are following axis)\r\n            ivec3 ${ma} = (${n}.x>${n}.y && ${n}.x>${n}.z) ? ivec3(0,1,2) :\r\n                    (${n}.y>${n}.z)            ? ivec3(1,2,0) :\r\n                                            ivec3(2,0,1) ;\r\n            // determine minor axis (in x; yz are following axis)\r\n            ivec3 ${mi} = (${n}.x<${n}.y && ${n}.x<${n}.z) ? ivec3(0,1,2) :\r\n                    (${n}.y<${n}.z)            ? ivec3(1,2,0) :\r\n                                            ivec3(2,0,1) ;\r\n            // determine median axis (in x;  yz are following axis)\r\n            ivec3 ${me} = ivec3(3) - ${mi} - ${ma};\r\n            \r\n            // project+fetch\r\n            vec4 ${x} = textureGrad( ${samplerName}, vec2(   ${this.position.associatedVariableName}[${ma}.y],   ${this.position.associatedVariableName}[${ma}.z]), \r\n                                    vec2(${dpdx}[${ma}.y],${dpdx}[${ma}.z]), \r\n                                    vec2(${dpdy}[${ma}.y],${dpdy}[${ma}.z]) );\r\n            vec4 ${y} = textureGrad( ${samplerYName}, vec2(   ${this.position.associatedVariableName}[${me}.y],   ${this.position.associatedVariableName}[${me}.z]), \r\n                                    vec2(${dpdx}[${me}.y],${dpdx}[${me}.z]),\r\n                                    vec2(${dpdy}[${me}.y],${dpdy}[${me}.z]) );\r\n            \r\n            // blend factors\r\n            vec2 ${w} = vec2(${n}[${ma}.x],${n}[${me}.x]);\r\n            // make local support\r\n            ${w} = clamp( (${w}-0.5773)/(1.0-0.5773), 0.0, 1.0 );\r\n            // shape transition\r\n            ${w} = pow( ${w}, vec2(${sharpness}/8.0) );\r\n            // blend and return\r\n            vec4 ${this._tempTextureRead} = (${x}*${w}.x + ${y}*${w}.y) / (${w}.x + ${w}.y);\r\n        `;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.BiPlanarBlock\", BiPlanarBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}