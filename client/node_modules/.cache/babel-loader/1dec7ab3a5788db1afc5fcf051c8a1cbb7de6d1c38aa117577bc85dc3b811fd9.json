{"ast":null,"code":"import { Mesh } from \"../mesh.js\";\nimport { CreateSphere } from \"../Builders/sphereBuilder.js\";\nimport { CreateDisc } from \"./discBuilder.js\";\n/**\n * Creates a hemisphere mesh\n * @param name defines the name of the mesh\n * @param options defines the options used to create the mesh\n * @param options.segments\n * @param options.diameter\n * @param options.sideOrientation\n * @param scene defines the hosting scene\n * @returns the hemisphere mesh\n */\nexport function CreateHemisphere(name, options = {}, scene) {\n  if (!options.diameter) {\n    options.diameter = 1;\n  }\n  if (!options.segments) {\n    options.segments = 16;\n  }\n  const halfSphere = CreateSphere(\"\", {\n    slice: 0.5,\n    diameter: options.diameter,\n    segments: options.segments\n  }, scene);\n  const disc = CreateDisc(\"\", {\n    radius: options.diameter / 2,\n    tessellation: options.segments * 3 + (4 - options.segments)\n  }, scene);\n  disc.rotation.x = -Math.PI / 2;\n  disc.parent = halfSphere;\n  const merged = Mesh.MergeMeshes([disc, halfSphere], true);\n  merged.name = name;\n  return merged;\n}\n/**\n * Class containing static functions to help procedurally build meshes\n * @deprecated use the function directly from the module\n */\nexport const HemisphereBuilder = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  CreateHemisphere\n};\n/**\n * Creates a hemispheric light\n * @param name\n * @param segments\n * @param diameter\n * @param scene\n */\nMesh.CreateHemisphere = (name, segments, diameter, scene) => {\n  const options = {\n    segments: segments,\n    diameter: diameter\n  };\n  return CreateHemisphere(name, options, scene);\n};","map":{"version":3,"mappings":"AAAA,SAASA,IAAI,QAAQ,YAAU;AAE/B,SAASC,YAAY,QAAQ,8BAA4B;AACzD,SAASC,UAAU,QAAQ,kBAAgB;AAE3C;;;;;;;;;;AAUA,OAAM,SAAUC,gBAAgB,CAACC,IAAY,EAAEC,UAA8E,EAAE,EAAEC,KAAa;EAC1I,IAAI,CAACD,OAAO,CAACE,QAAQ,EAAE;IACnBF,OAAO,CAACE,QAAQ,GAAG,CAAC;;EAExB,IAAI,CAACF,OAAO,CAACG,QAAQ,EAAE;IACnBH,OAAO,CAACG,QAAQ,GAAG,EAAE;;EAGzB,MAAMC,UAAU,GAAGR,YAAY,CAAC,EAAE,EAAE;IAAES,KAAK,EAAE,GAAG;IAAEH,QAAQ,EAAEF,OAAO,CAACE,QAAQ;IAAEC,QAAQ,EAAEH,OAAO,CAACG;EAAQ,CAAE,EAAEF,KAAK,CAAC;EAClH,MAAMK,IAAI,GAAGT,UAAU,CAAC,EAAE,EAAE;IAAEU,MAAM,EAAEP,OAAO,CAACE,QAAQ,GAAG,CAAC;IAAEM,YAAY,EAAER,OAAO,CAACG,QAAQ,GAAG,CAAC,IAAI,CAAC,GAAGH,OAAO,CAACG,QAAQ;EAAC,CAAE,EAAEF,KAAK,CAAC;EACjIK,IAAI,CAACG,QAAQ,CAACC,CAAC,GAAG,CAACC,IAAI,CAACC,EAAE,GAAG,CAAC;EAC9BN,IAAI,CAACO,MAAM,GAAGT,UAAU;EAExB,MAAMU,MAAM,GAASnB,IAAI,CAACoB,WAAW,CAAC,CAACT,IAAI,EAAEF,UAAU,CAAC,EAAE,IAAI,CAAC;EAC/DU,MAAM,CAACf,IAAI,GAAGA,IAAI;EAElB,OAAOe,MAAM;AACjB;AACA;;;;AAIA,OAAO,MAAME,iBAAiB,GAAG;EAC7B;EACAlB;CACH;AAED;;;;;;;AAOCH,IAAY,CAACG,gBAAgB,GAAG,CAACC,IAAY,EAAEI,QAAgB,EAAED,QAAgB,EAAED,KAAa,KAAU;EACvG,MAAMD,OAAO,GAAG;IACZG,QAAQ,EAAEA,QAAQ;IAClBD,QAAQ,EAAEA;GACb;EAED,OAAOJ,gBAAgB,CAACC,IAAI,EAAEC,OAAO,EAAEC,KAAK,CAAC;AACjD,CAAC","names":["Mesh","CreateSphere","CreateDisc","CreateHemisphere","name","options","scene","diameter","segments","halfSphere","slice","disc","radius","tessellation","rotation","x","Math","PI","parent","merged","MergeMeshes","HemisphereBuilder"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Meshes/Builders/hemisphereBuilder.ts"],"sourcesContent":["import { Mesh } from \"../mesh\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { CreateSphere } from \"../Builders/sphereBuilder\";\r\nimport { CreateDisc } from \"./discBuilder\";\r\n\r\n/**\r\n * Creates a hemisphere mesh\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.segments\r\n * @param options.diameter\r\n * @param options.sideOrientation\r\n * @param scene defines the hosting scene\r\n * @returns the hemisphere mesh\r\n */\r\nexport function CreateHemisphere(name: string, options: { segments?: number; diameter?: number; sideOrientation?: number } = {}, scene?: Scene): Mesh {\r\n    if (!options.diameter) {\r\n        options.diameter = 1;\r\n    }\r\n    if (!options.segments) {\r\n        options.segments = 16;\r\n    }\r\n\r\n    const halfSphere = CreateSphere(\"\", { slice: 0.5, diameter: options.diameter, segments: options.segments }, scene);\r\n    const disc = CreateDisc(\"\", { radius: options.diameter / 2, tessellation: options.segments * 3 + (4 - options.segments) }, scene);\r\n    disc.rotation.x = -Math.PI / 2;\r\n    disc.parent = halfSphere;\r\n\r\n    const merged = <Mesh>Mesh.MergeMeshes([disc, halfSphere], true);\r\n    merged.name = name;\r\n\r\n    return merged;\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the function directly from the module\r\n */\r\nexport const HemisphereBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateHemisphere,\r\n};\r\n\r\n/**\r\n * Creates a hemispheric light\r\n * @param name\r\n * @param segments\r\n * @param diameter\r\n * @param scene\r\n */\r\n(Mesh as any).CreateHemisphere = (name: string, segments: number, diameter: number, scene?: Scene): Mesh => {\r\n    const options = {\r\n        segments: segments,\r\n        diameter: diameter,\r\n    };\r\n\r\n    return CreateHemisphere(name, options, scene);\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}