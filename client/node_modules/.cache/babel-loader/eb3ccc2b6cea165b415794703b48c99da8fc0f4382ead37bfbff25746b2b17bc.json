{"ast":null,"code":"import { FluidRenderingObject } from \"./fluidRenderingObject.js\";\n/**\n * Defines a rendering object based on a particle system\n */\nexport class FluidRenderingObjectParticleSystem extends FluidRenderingObject {\n  /**\n   * Creates a new instance of the class\n   * @param scene The scene the particle system is part of\n   * @param ps The particle system\n   */\n  constructor(scene, ps) {\n    super(scene);\n    this._useTrueRenderingForDiffuseTexture = true;\n    this._particleSystem = ps;\n    this._originalRender = ps.render.bind(ps);\n    this._blendMode = ps.blendMode;\n    this._onBeforeDrawParticleObserver = null;\n    this._updateInAnimate = this._particleSystem.updateInAnimate;\n    this._particleSystem.updateInAnimate = true;\n    this._particleSystem.render = () => 0;\n    this.particleSize = (ps.minSize + ps.maxSize) / 2;\n    this.useTrueRenderingForDiffuseTexture = false;\n  }\n  /** Gets the particle system */\n  get particleSystem() {\n    return this._particleSystem;\n  }\n  /**\n   * Gets the name of the class\n   */\n  getClassName() {\n    return \"FluidRenderingObjectParticleSystem\";\n  }\n  /**\n   * Gets or sets a boolean indicating that the diffuse texture should be generated based on the regular rendering of the particle system (default: true).\n   * Sometimes, generating the diffuse texture this way may be sub-optimal. In that case, you can disable this property, in which case the particle system will be\n   * rendered using a ALPHA_COMBINE mode instead of the one used by the particle system.\n   */\n  get useTrueRenderingForDiffuseTexture() {\n    return this._useTrueRenderingForDiffuseTexture;\n  }\n  set useTrueRenderingForDiffuseTexture(use) {\n    if (this._useTrueRenderingForDiffuseTexture === use) {\n      return;\n    }\n    this._useTrueRenderingForDiffuseTexture = use;\n    if (use) {\n      this._particleSystem.blendMode = this._blendMode;\n      this._particleSystem.onBeforeDrawParticlesObservable.remove(this._onBeforeDrawParticleObserver);\n      this._onBeforeDrawParticleObserver = null;\n    } else {\n      this._particleSystem.blendMode = -1;\n      this._onBeforeDrawParticleObserver = this._particleSystem.onBeforeDrawParticlesObservable.add(() => {\n        this._engine.setAlphaMode(2);\n      });\n    }\n  }\n  /**\n   * Gets the vertex buffers\n   */\n  get vertexBuffers() {\n    return this._particleSystem.vertexBuffers;\n  }\n  /**\n   * Gets the index buffer (or null if the object is using instancing)\n   */\n  get indexBuffer() {\n    return this._particleSystem.indexBuffer;\n  }\n  /**\n   * Indicates if the object is ready to be rendered\n   * @returns True if everything is ready for the object to be rendered, otherwise false\n   */\n  isReady() {\n    return super.isReady() && this._particleSystem.isReady();\n  }\n  /**\n   * Gets the number of particles in this particle system\n   * @returns The number of particles\n   */\n  get numParticles() {\n    return this._particleSystem.getActiveCount();\n  }\n  /**\n   * Render the diffuse texture for this object\n   */\n  renderDiffuseTexture() {\n    this._originalRender();\n  }\n  /**\n   * Releases the ressources used by the class\n   */\n  dispose() {\n    super.dispose();\n    this._particleSystem.onBeforeDrawParticlesObservable.remove(this._onBeforeDrawParticleObserver);\n    this._onBeforeDrawParticleObserver = null;\n    this._particleSystem.render = this._originalRender;\n    this._particleSystem.blendMode = this._blendMode;\n    this._particleSystem.updateInAnimate = this._updateInAnimate;\n  }\n}","map":{"version":3,"mappings":"AASA,SAASA,oBAAoB,QAAQ,2BAAyB;AAE9D;;;AAGA,OAAM,MAAOC,kCAAmC,SAAQD,oBAAoB;EA+DxE;;;;;EAKAE,YAAYC,KAAY,EAAEC,EAAmB;IACzC,KAAK,CAACD,KAAK,CAAC;IAlDR,uCAAkC,GAAG,IAAI;IAoD7C,IAAI,CAACE,eAAe,GAAGD,EAAE;IAEzB,IAAI,CAACE,eAAe,GAAGF,EAAE,CAACG,MAAM,CAACC,IAAI,CAACJ,EAAE,CAAC;IACzC,IAAI,CAACK,UAAU,GAAGL,EAAE,CAACM,SAAS;IAC9B,IAAI,CAACC,6BAA6B,GAAG,IAAI;IACzC,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACP,eAAe,CAACQ,eAAe;IAC5D,IAAI,CAACR,eAAe,CAACQ,eAAe,GAAG,IAAI;IAC3C,IAAI,CAACR,eAAe,CAACE,MAAM,GAAG,MAAM,CAAC;IAErC,IAAI,CAACO,YAAY,GAAG,CAACV,EAAE,CAACW,OAAO,GAAGX,EAAE,CAACY,OAAO,IAAI,CAAC;IAEjD,IAAI,CAACC,iCAAiC,GAAG,KAAK;EAClD;EA5EA;EACA,IAAWC,cAAc;IACrB,OAAO,IAAI,CAACb,eAAe;EAC/B;EAEA;;;EAGOc,YAAY;IACf,OAAO,oCAAoC;EAC/C;EAIA;;;;;EAKA,IAAWF,iCAAiC;IACxC,OAAO,IAAI,CAACG,kCAAkC;EAClD;EAEA,IAAWH,iCAAiC,CAACI,GAAY;IACrD,IAAI,IAAI,CAACD,kCAAkC,KAAKC,GAAG,EAAE;MACjD;;IAGJ,IAAI,CAACD,kCAAkC,GAAGC,GAAG;IAE7C,IAAIA,GAAG,EAAE;MACL,IAAI,CAAChB,eAAe,CAACK,SAAS,GAAG,IAAI,CAACD,UAAU;MAChD,IAAI,CAACJ,eAAe,CAACiB,+BAA+B,CAACC,MAAM,CAAC,IAAI,CAACZ,6BAA6B,CAAC;MAC/F,IAAI,CAACA,6BAA6B,GAAG,IAAI;KAC5C,MAAM;MACH,IAAI,CAACN,eAAe,CAACK,SAAS,GAAG,CAAC,CAAC;MACnC,IAAI,CAACC,6BAA6B,GAAG,IAAI,CAACN,eAAe,CAACiB,+BAA+B,CAACE,GAAG,CAAC,MAAK;QAC/F,IAAI,CAACC,OAAO,CAACC,YAAY,CAAC;MAC9B,CAAC,CAAC;;EAEV;EAEA;;;EAGA,IAAWC,aAAa;IACpB,OAAO,IAAI,CAACtB,eAAe,CAACsB,aAAgD;EAChF;EAEA;;;EAGA,IAAWC,WAAW;IAClB,OAAO,IAAI,CAACvB,eAAe,CAACuB,WAAW;EAC3C;EAwBA;;;;EAIOC,OAAO;IACV,OAAO,KAAK,CAACA,OAAO,EAAE,IAAI,IAAI,CAACxB,eAAe,CAACwB,OAAO,EAAE;EAC5D;EAEA;;;;EAIA,IAAWC,YAAY;IACnB,OAAO,IAAI,CAACzB,eAAe,CAAC0B,cAAc,EAAE;EAChD;EAEA;;;EAGOC,oBAAoB;IACvB,IAAI,CAAC1B,eAAe,EAAE;EAC1B;EAEA;;;EAGO2B,OAAO;IACV,KAAK,CAACA,OAAO,EAAE;IAEf,IAAI,CAAC5B,eAAe,CAACiB,+BAA+B,CAACC,MAAM,CAAC,IAAI,CAACZ,6BAA6B,CAAC;IAC/F,IAAI,CAACA,6BAA6B,GAAG,IAAI;IACzC,IAAI,CAACN,eAAe,CAACE,MAAM,GAAG,IAAI,CAACD,eAAe;IAClD,IAAI,CAACD,eAAe,CAACK,SAAS,GAAG,IAAI,CAACD,UAAU;IAChD,IAAI,CAACJ,eAAe,CAACQ,eAAe,GAAG,IAAI,CAACD,gBAAgB;EAChE","names":["FluidRenderingObject","FluidRenderingObjectParticleSystem","constructor","scene","ps","_particleSystem","_originalRender","render","bind","_blendMode","blendMode","_onBeforeDrawParticleObserver","_updateInAnimate","updateInAnimate","particleSize","minSize","maxSize","useTrueRenderingForDiffuseTexture","particleSystem","getClassName","_useTrueRenderingForDiffuseTexture","use","onBeforeDrawParticlesObservable","remove","add","_engine","setAlphaMode","vertexBuffers","indexBuffer","isReady","numParticles","getActiveCount","renderDiffuseTexture","dispose"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Rendering/fluidRenderer/fluidRenderingObjectParticleSystem.ts"],"sourcesContent":["import type { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { DataBuffer } from \"core/Buffers/dataBuffer\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport type { Effect } from \"core/Materials/effect\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { IParticleSystem } from \"core/Particles/IParticleSystem\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\nimport { FluidRenderingObject } from \"./fluidRenderingObject\";\r\n\r\n/**\r\n * Defines a rendering object based on a particle system\r\n */\r\nexport class FluidRenderingObjectParticleSystem extends FluidRenderingObject {\r\n    private _particleSystem: IParticleSystem;\r\n    private _originalRender: () => number;\r\n    private _blendMode: number;\r\n    private _onBeforeDrawParticleObserver: Nullable<Observer<Nullable<Effect>>>;\r\n    private _updateInAnimate: boolean;\r\n\r\n    /** Gets the particle system */\r\n    public get particleSystem() {\r\n        return this._particleSystem;\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the class\r\n     */\r\n    public getClassName(): string {\r\n        return \"FluidRenderingObjectParticleSystem\";\r\n    }\r\n\r\n    private _useTrueRenderingForDiffuseTexture = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the diffuse texture should be generated based on the regular rendering of the particle system (default: true).\r\n     * Sometimes, generating the diffuse texture this way may be sub-optimal. In that case, you can disable this property, in which case the particle system will be\r\n     * rendered using a ALPHA_COMBINE mode instead of the one used by the particle system.\r\n     */\r\n    public get useTrueRenderingForDiffuseTexture() {\r\n        return this._useTrueRenderingForDiffuseTexture;\r\n    }\r\n\r\n    public set useTrueRenderingForDiffuseTexture(use: boolean) {\r\n        if (this._useTrueRenderingForDiffuseTexture === use) {\r\n            return;\r\n        }\r\n\r\n        this._useTrueRenderingForDiffuseTexture = use;\r\n\r\n        if (use) {\r\n            this._particleSystem.blendMode = this._blendMode;\r\n            this._particleSystem.onBeforeDrawParticlesObservable.remove(this._onBeforeDrawParticleObserver);\r\n            this._onBeforeDrawParticleObserver = null;\r\n        } else {\r\n            this._particleSystem.blendMode = -1;\r\n            this._onBeforeDrawParticleObserver = this._particleSystem.onBeforeDrawParticlesObservable.add(() => {\r\n                this._engine.setAlphaMode(Constants.ALPHA_COMBINE);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the vertex buffers\r\n     */\r\n    public get vertexBuffers(): { [key: string]: VertexBuffer } {\r\n        return this._particleSystem.vertexBuffers as { [key: string]: VertexBuffer };\r\n    }\r\n\r\n    /**\r\n     * Gets the index buffer (or null if the object is using instancing)\r\n     */\r\n    public get indexBuffer(): Nullable<DataBuffer> {\r\n        return this._particleSystem.indexBuffer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of the class\r\n     * @param scene The scene the particle system is part of\r\n     * @param ps The particle system\r\n     */\r\n    constructor(scene: Scene, ps: IParticleSystem) {\r\n        super(scene);\r\n\r\n        this._particleSystem = ps;\r\n\r\n        this._originalRender = ps.render.bind(ps);\r\n        this._blendMode = ps.blendMode;\r\n        this._onBeforeDrawParticleObserver = null;\r\n        this._updateInAnimate = this._particleSystem.updateInAnimate;\r\n        this._particleSystem.updateInAnimate = true;\r\n        this._particleSystem.render = () => 0;\r\n\r\n        this.particleSize = (ps.minSize + ps.maxSize) / 2;\r\n\r\n        this.useTrueRenderingForDiffuseTexture = false;\r\n    }\r\n\r\n    /**\r\n     * Indicates if the object is ready to be rendered\r\n     * @returns True if everything is ready for the object to be rendered, otherwise false\r\n     */\r\n    public isReady(): boolean {\r\n        return super.isReady() && this._particleSystem.isReady();\r\n    }\r\n\r\n    /**\r\n     * Gets the number of particles in this particle system\r\n     * @returns The number of particles\r\n     */\r\n    public get numParticles(): number {\r\n        return this._particleSystem.getActiveCount();\r\n    }\r\n\r\n    /**\r\n     * Render the diffuse texture for this object\r\n     */\r\n    public renderDiffuseTexture(): void {\r\n        this._originalRender();\r\n    }\r\n\r\n    /**\r\n     * Releases the ressources used by the class\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._particleSystem.onBeforeDrawParticlesObservable.remove(this._onBeforeDrawParticleObserver);\r\n        this._onBeforeDrawParticleObserver = null;\r\n        this._particleSystem.render = this._originalRender;\r\n        this._particleSystem.blendMode = this._blendMode;\r\n        this._particleSystem.updateInAnimate = this._updateInAnimate;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}