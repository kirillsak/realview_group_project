{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { GetDOMTextContent, IsWindowObjectExist } from \"../Misc/domManagement.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { ShaderProcessor } from \"../Engines/Processors/shaderProcessor.js\";\nimport { ShaderStore as EngineShaderStore } from \"../Engines/shaderStore.js\";\nimport { ShaderLanguage } from \"./shaderLanguage.js\";\n/**\n * Effect containing vertex and fragment shader that can be executed on an object.\n */\nexport class Effect {\n  /**\n   * Instantiates an effect.\n   * An effect can be used to create/manage/execute vertex and fragment shaders.\n   * @param baseName Name of the effect.\n   * @param attributesNamesOrOptions List of attribute names that will be passed to the shader or set of all options to create the effect.\n   * @param uniformsNamesOrEngine List of uniform variable names that will be passed to the shader or the engine that will be used to render effect.\n   * @param samplers List of sampler variables that will be passed to the shader.\n   * @param engine Engine to be used to render the effect\n   * @param defines Define statements to be added to the shader.\n   * @param fallbacks Possible fallbacks for this effect to improve performance when needed.\n   * @param onCompiled Callback that will be called when the shader is compiled.\n   * @param onError Callback that will be called if an error occurs during shader compilation.\n   * @param indexParameters Parameters to be used with Babylons include syntax to iterate over an array (eg. {lights: 10})\n   * @param key Effect Key identifying uniquely compiled shader variants\n   * @param shaderLanguage the language the shader is written in (default: GLSL)\n   */\n  constructor(baseName, attributesNamesOrOptions, uniformsNamesOrEngine, samplers = null, engine, defines = null, fallbacks = null, onCompiled = null, onError = null, indexParameters, key = \"\", shaderLanguage = ShaderLanguage.GLSL) {\n    var _a, _b, _c;\n    /**\n     * Name of the effect.\n     */\n    this.name = null;\n    /**\n     * String container all the define statements that should be set on the shader.\n     */\n    this.defines = \"\";\n    /**\n     * Callback that will be called when the shader is compiled.\n     */\n    this.onCompiled = null;\n    /**\n     * Callback that will be called if an error occurs during shader compilation.\n     */\n    this.onError = null;\n    /**\n     * Callback that will be called when effect is bound.\n     */\n    this.onBind = null;\n    /**\n     * Unique ID of the effect.\n     */\n    this.uniqueId = 0;\n    /**\n     * Observable that will be called when the shader is compiled.\n     * It is recommended to use executeWhenCompile() or to make sure that scene.isReady() is called to get this observable raised.\n     */\n    this.onCompileObservable = new Observable();\n    /**\n     * Observable that will be called if an error occurs during shader compilation.\n     */\n    this.onErrorObservable = new Observable();\n    /** @internal */\n    this._onBindObservable = null;\n    /**\n     * @internal\n     * Specifies if the effect was previously ready\n     */\n    this._wasPreviouslyReady = false;\n    /**\n     * @internal\n     * Forces the code from bindForSubMesh to be fully run the next time it is called\n     * It is used in frozen mode to make sure the effect is properly rebound when a new effect is created\n     */\n    this._forceRebindOnNextCall = false;\n    /**\n     * @internal\n     * Specifies if the effect was previously using instances\n     */\n    this._wasPreviouslyUsingInstances = null;\n    this._isDisposed = false;\n    /** @internal */\n    this._bonesComputationForcedToCPU = false;\n    /** @internal */\n    this._uniformBuffersNames = {};\n    /** @internal */\n    this._multiTarget = false;\n    this._samplers = {};\n    this._isReady = false;\n    this._compilationError = \"\";\n    this._allFallbacksProcessed = false;\n    this._uniforms = {};\n    /**\n     * Key for the effect.\n     * @internal\n     */\n    this._key = \"\";\n    this._fallbacks = null;\n    this._vertexSourceCodeOverride = \"\";\n    this._fragmentSourceCodeOverride = \"\";\n    this._transformFeedbackVaryings = null;\n    /**\n     * Compiled shader to webGL program.\n     * @internal\n     */\n    this._pipelineContext = null;\n    /** @internal */\n    this._vertexSourceCode = \"\";\n    /** @internal */\n    this._fragmentSourceCode = \"\";\n    /** @internal */\n    this._vertexSourceCodeBeforeMigration = \"\";\n    /** @internal */\n    this._fragmentSourceCodeBeforeMigration = \"\";\n    /** @internal */\n    this._rawVertexSourceCode = \"\";\n    /** @internal */\n    this._rawFragmentSourceCode = \"\";\n    this.name = baseName;\n    this._key = key;\n    let processCodeAfterIncludes = undefined;\n    let processFinalCode = null;\n    if (attributesNamesOrOptions.attributes) {\n      const options = attributesNamesOrOptions;\n      this._engine = uniformsNamesOrEngine;\n      this._attributesNames = options.attributes;\n      this._uniformsNames = options.uniformsNames.concat(options.samplers);\n      this._samplerList = options.samplers.slice();\n      this.defines = options.defines;\n      this.onError = options.onError;\n      this.onCompiled = options.onCompiled;\n      this._fallbacks = options.fallbacks;\n      this._indexParameters = options.indexParameters;\n      this._transformFeedbackVaryings = options.transformFeedbackVaryings || null;\n      this._multiTarget = !!options.multiTarget;\n      this._shaderLanguage = (_a = options.shaderLanguage) !== null && _a !== void 0 ? _a : ShaderLanguage.GLSL;\n      if (options.uniformBuffersNames) {\n        this._uniformBuffersNamesList = options.uniformBuffersNames.slice();\n        for (let i = 0; i < options.uniformBuffersNames.length; i++) {\n          this._uniformBuffersNames[options.uniformBuffersNames[i]] = i;\n        }\n      }\n      processFinalCode = (_b = options.processFinalCode) !== null && _b !== void 0 ? _b : null;\n      processCodeAfterIncludes = (_c = options.processCodeAfterIncludes) !== null && _c !== void 0 ? _c : undefined;\n    } else {\n      this._engine = engine;\n      this.defines = defines == null ? \"\" : defines;\n      this._uniformsNames = uniformsNamesOrEngine.concat(samplers);\n      this._samplerList = samplers ? samplers.slice() : [];\n      this._attributesNames = attributesNamesOrOptions;\n      this._uniformBuffersNamesList = [];\n      this._shaderLanguage = shaderLanguage;\n      this.onError = onError;\n      this.onCompiled = onCompiled;\n      this._indexParameters = indexParameters;\n      this._fallbacks = fallbacks;\n    }\n    this._attributeLocationByName = {};\n    this.uniqueId = Effect._UniqueIdSeed++;\n    let vertexSource;\n    let fragmentSource;\n    const hostDocument = IsWindowObjectExist() ? this._engine.getHostDocument() : null;\n    if (baseName.vertexSource) {\n      vertexSource = \"source:\" + baseName.vertexSource;\n    } else if (baseName.vertexElement) {\n      vertexSource = hostDocument ? hostDocument.getElementById(baseName.vertexElement) : null;\n      if (!vertexSource) {\n        vertexSource = baseName.vertexElement;\n      }\n    } else {\n      vertexSource = baseName.vertex || baseName;\n    }\n    if (baseName.fragmentSource) {\n      fragmentSource = \"source:\" + baseName.fragmentSource;\n    } else if (baseName.fragmentElement) {\n      fragmentSource = hostDocument ? hostDocument.getElementById(baseName.fragmentElement) : null;\n      if (!fragmentSource) {\n        fragmentSource = baseName.fragmentElement;\n      }\n    } else {\n      fragmentSource = baseName.fragment || baseName;\n    }\n    this._processingContext = this._engine._getShaderProcessingContext(this._shaderLanguage);\n    let processorOptions = {\n      defines: this.defines.split(\"\\n\"),\n      indexParameters: this._indexParameters,\n      isFragment: false,\n      shouldUseHighPrecisionShader: this._engine._shouldUseHighPrecisionShader,\n      processor: this._engine._getShaderProcessor(this._shaderLanguage),\n      supportsUniformBuffers: this._engine.supportsUniformBuffers,\n      shadersRepository: EngineShaderStore.GetShadersRepository(this._shaderLanguage),\n      includesShadersStore: EngineShaderStore.GetIncludesShadersStore(this._shaderLanguage),\n      version: (this._engine.version * 100).toString(),\n      platformName: this._engine.shaderPlatformName,\n      processingContext: this._processingContext,\n      isNDCHalfZRange: this._engine.isNDCHalfZRange,\n      useReverseDepthBuffer: this._engine.useReverseDepthBuffer,\n      processCodeAfterIncludes\n    };\n    const shaderCodes = [undefined, undefined];\n    const shadersLoaded = () => {\n      if (shaderCodes[0] && shaderCodes[1]) {\n        processorOptions.isFragment = true;\n        const [migratedVertexCode, fragmentCode] = shaderCodes;\n        ShaderProcessor.Process(fragmentCode, processorOptions, (migratedFragmentCode, codeBeforeMigration) => {\n          this._fragmentSourceCodeBeforeMigration = codeBeforeMigration;\n          if (processFinalCode) {\n            migratedFragmentCode = processFinalCode(\"fragment\", migratedFragmentCode);\n          }\n          const finalShaders = ShaderProcessor.Finalize(migratedVertexCode, migratedFragmentCode, processorOptions);\n          processorOptions = null; // avoid some GC leaks because of code below (related to proxyFunction(name).bind(this))\n          this._useFinalCode(finalShaders.vertexCode, finalShaders.fragmentCode, baseName);\n        }, this._engine);\n      }\n    };\n    this._loadShader(vertexSource, \"Vertex\", \"\", vertexCode => {\n      ShaderProcessor.Initialize(processorOptions);\n      ShaderProcessor.Process(vertexCode, processorOptions, (migratedVertexCode, codeBeforeMigration) => {\n        this._rawVertexSourceCode = vertexCode;\n        this._vertexSourceCodeBeforeMigration = codeBeforeMigration;\n        if (processFinalCode) {\n          migratedVertexCode = processFinalCode(\"vertex\", migratedVertexCode);\n        }\n        shaderCodes[0] = migratedVertexCode;\n        shadersLoaded();\n      }, this._engine);\n    });\n    this._loadShader(fragmentSource, \"Fragment\", \"Pixel\", fragmentCode => {\n      this._rawFragmentSourceCode = fragmentCode;\n      shaderCodes[1] = fragmentCode;\n      shadersLoaded();\n    });\n    const proxyFunction = function (functionName) {\n      // check if the function exists in the pipelineContext\n      return function () {\n        if (this._pipelineContext) {\n          const func = this._pipelineContext[functionName];\n          func.apply(this._pipelineContext, arguments);\n        }\n        return this;\n      };\n    };\n    [\"Int?\", \"UInt?\", \"IntArray?\", \"UIntArray?\", \"Array?\", \"Color?\", \"Vector?\", \"Float?\", \"Matrices\", \"Matrix\", \"Matrix3x3\", \"Matrix2x2\", \"Quaternion\", \"DirectColor4\"].forEach(functionName => {\n      const name = `set${functionName}`;\n      if (name.endsWith(\"?\")) {\n        [\"\", 2, 3, 4].forEach(n => {\n          this[name.slice(0, -1) + n] = this[name.slice(0, -1) + n] || proxyFunction(name.slice(0, -1) + n).bind(this);\n        });\n      } else {\n        this[name] = this[name] || proxyFunction(name).bind(this);\n      }\n    });\n  }\n  /**\n   * Gets or sets the relative url used to load shaders if using the engine in non-minified mode\n   */\n  static get ShadersRepository() {\n    return EngineShaderStore.ShadersRepository;\n  }\n  static set ShadersRepository(repo) {\n    EngineShaderStore.ShadersRepository = repo;\n  }\n  /**\n   * Observable that will be called when effect is bound.\n   */\n  get onBindObservable() {\n    if (!this._onBindObservable) {\n      this._onBindObservable = new Observable();\n    }\n    return this._onBindObservable;\n  }\n  _useFinalCode(migratedVertexCode, migratedFragmentCode, baseName) {\n    if (baseName) {\n      const vertex = baseName.vertexElement || baseName.vertex || baseName.spectorName || baseName;\n      const fragment = baseName.fragmentElement || baseName.fragment || baseName.spectorName || baseName;\n      this._vertexSourceCode = (this._shaderLanguage === ShaderLanguage.WGSL ? \"//\" : \"\") + \"#define SHADER_NAME vertex:\" + vertex + \"\\n\" + migratedVertexCode;\n      this._fragmentSourceCode = (this._shaderLanguage === ShaderLanguage.WGSL ? \"//\" : \"\") + \"#define SHADER_NAME fragment:\" + fragment + \"\\n\" + migratedFragmentCode;\n    } else {\n      this._vertexSourceCode = migratedVertexCode;\n      this._fragmentSourceCode = migratedFragmentCode;\n    }\n    this._prepareEffect();\n  }\n  /**\n   * Unique key for this effect\n   */\n  get key() {\n    return this._key;\n  }\n  /**\n   * If the effect has been compiled and prepared.\n   * @returns if the effect is compiled and prepared.\n   */\n  isReady() {\n    try {\n      return this._isReadyInternal();\n    } catch (_a) {\n      return false;\n    }\n  }\n  _isReadyInternal() {\n    if (this._isReady) {\n      return true;\n    }\n    if (this._pipelineContext) {\n      return this._pipelineContext.isReady;\n    }\n    return false;\n  }\n  /**\n   * The engine the effect was initialized with.\n   * @returns the engine.\n   */\n  getEngine() {\n    return this._engine;\n  }\n  /**\n   * The pipeline context for this effect\n   * @returns the associated pipeline context\n   */\n  getPipelineContext() {\n    return this._pipelineContext;\n  }\n  /**\n   * The set of names of attribute variables for the shader.\n   * @returns An array of attribute names.\n   */\n  getAttributesNames() {\n    return this._attributesNames;\n  }\n  /**\n   * Returns the attribute at the given index.\n   * @param index The index of the attribute.\n   * @returns The location of the attribute.\n   */\n  getAttributeLocation(index) {\n    return this._attributes[index];\n  }\n  /**\n   * Returns the attribute based on the name of the variable.\n   * @param name of the attribute to look up.\n   * @returns the attribute location.\n   */\n  getAttributeLocationByName(name) {\n    return this._attributeLocationByName[name];\n  }\n  /**\n   * The number of attributes.\n   * @returns the number of attributes.\n   */\n  getAttributesCount() {\n    return this._attributes.length;\n  }\n  /**\n   * Gets the index of a uniform variable.\n   * @param uniformName of the uniform to look up.\n   * @returns the index.\n   */\n  getUniformIndex(uniformName) {\n    return this._uniformsNames.indexOf(uniformName);\n  }\n  /**\n   * Returns the attribute based on the name of the variable.\n   * @param uniformName of the uniform to look up.\n   * @returns the location of the uniform.\n   */\n  getUniform(uniformName) {\n    return this._uniforms[uniformName];\n  }\n  /**\n   * Returns an array of sampler variable names\n   * @returns The array of sampler variable names.\n   */\n  getSamplers() {\n    return this._samplerList;\n  }\n  /**\n   * Returns an array of uniform variable names\n   * @returns The array of uniform variable names.\n   */\n  getUniformNames() {\n    return this._uniformsNames;\n  }\n  /**\n   * Returns an array of uniform buffer variable names\n   * @returns The array of uniform buffer variable names.\n   */\n  getUniformBuffersNames() {\n    return this._uniformBuffersNamesList;\n  }\n  /**\n   * Returns the index parameters used to create the effect\n   * @returns The index parameters object\n   */\n  getIndexParameters() {\n    return this._indexParameters;\n  }\n  /**\n   * The error from the last compilation.\n   * @returns the error string.\n   */\n  getCompilationError() {\n    return this._compilationError;\n  }\n  /**\n   * Gets a boolean indicating that all fallbacks were used during compilation\n   * @returns true if all fallbacks were used\n   */\n  allFallbacksProcessed() {\n    return this._allFallbacksProcessed;\n  }\n  /**\n   * Adds a callback to the onCompiled observable and call the callback immediately if already ready.\n   * @param func The callback to be used.\n   */\n  executeWhenCompiled(func) {\n    if (this.isReady()) {\n      func(this);\n      return;\n    }\n    this.onCompileObservable.add(effect => {\n      func(effect);\n    });\n    if (!this._pipelineContext || this._pipelineContext.isAsync) {\n      setTimeout(() => {\n        this._checkIsReady(null);\n      }, 16);\n    }\n  }\n  _checkIsReady(previousPipelineContext) {\n    try {\n      if (this._isReadyInternal()) {\n        return;\n      }\n    } catch (e) {\n      this._processCompilationErrors(e, previousPipelineContext);\n      return;\n    }\n    if (this._isDisposed) {\n      return;\n    }\n    setTimeout(() => {\n      this._checkIsReady(previousPipelineContext);\n    }, 16);\n  }\n  _loadShader(shader, key, optionalKey, callback) {\n    if (typeof HTMLElement !== \"undefined\") {\n      // DOM element ?\n      if (shader instanceof HTMLElement) {\n        const shaderCode = GetDOMTextContent(shader);\n        callback(shaderCode);\n        return;\n      }\n    }\n    // Direct source ?\n    if (shader.substr(0, 7) === \"source:\") {\n      callback(shader.substr(7));\n      return;\n    }\n    // Base64 encoded ?\n    if (shader.substr(0, 7) === \"base64:\") {\n      const shaderBinary = window.atob(shader.substr(7));\n      callback(shaderBinary);\n      return;\n    }\n    const shaderStore = EngineShaderStore.GetShadersStore(this._shaderLanguage);\n    // Is in local store ?\n    if (shaderStore[shader + key + \"Shader\"]) {\n      callback(shaderStore[shader + key + \"Shader\"]);\n      return;\n    }\n    if (optionalKey && shaderStore[shader + optionalKey + \"Shader\"]) {\n      callback(shaderStore[shader + optionalKey + \"Shader\"]);\n      return;\n    }\n    let shaderUrl;\n    if (shader[0] === \".\" || shader[0] === \"/\" || shader.indexOf(\"http\") > -1) {\n      shaderUrl = shader;\n    } else {\n      shaderUrl = EngineShaderStore.GetShadersRepository(this._shaderLanguage) + shader;\n    }\n    // Vertex shader\n    this._engine._loadFile(shaderUrl + \".\" + key.toLowerCase() + \".fx\", callback);\n  }\n  /**\n   * Gets the vertex shader source code of this effect\n   * This is the final source code that will be compiled, after all the processing has been done (pre-processing applied, code injection/replacement, etc)\n   */\n  get vertexSourceCode() {\n    var _a, _b;\n    return this._vertexSourceCodeOverride && this._fragmentSourceCodeOverride ? this._vertexSourceCodeOverride : (_b = (_a = this._pipelineContext) === null || _a === void 0 ? void 0 : _a._getVertexShaderCode()) !== null && _b !== void 0 ? _b : this._vertexSourceCode;\n  }\n  /**\n   * Gets the fragment shader source code of this effect\n   * This is the final source code that will be compiled, after all the processing has been done (pre-processing applied, code injection/replacement, etc)\n   */\n  get fragmentSourceCode() {\n    var _a, _b;\n    return this._vertexSourceCodeOverride && this._fragmentSourceCodeOverride ? this._fragmentSourceCodeOverride : (_b = (_a = this._pipelineContext) === null || _a === void 0 ? void 0 : _a._getFragmentShaderCode()) !== null && _b !== void 0 ? _b : this._fragmentSourceCode;\n  }\n  /**\n   * Gets the vertex shader source code before migration.\n   * This is the source code after the include directives have been replaced by their contents but before the code is migrated, i.e. before ShaderProcess._ProcessShaderConversion is executed.\n   * This method is, among other things, responsible for parsing #if/#define directives as well as converting GLES2 syntax to GLES3 (in the case of WebGL).\n   */\n  get vertexSourceCodeBeforeMigration() {\n    return this._vertexSourceCodeBeforeMigration;\n  }\n  /**\n   * Gets the fragment shader source code before migration.\n   * This is the source code after the include directives have been replaced by their contents but before the code is migrated, i.e. before ShaderProcess._ProcessShaderConversion is executed.\n   * This method is, among other things, responsible for parsing #if/#define directives as well as converting GLES2 syntax to GLES3 (in the case of WebGL).\n   */\n  get fragmentSourceCodeBeforeMigration() {\n    return this._fragmentSourceCodeBeforeMigration;\n  }\n  /**\n   * Gets the vertex shader source code before it has been modified by any processing\n   */\n  get rawVertexSourceCode() {\n    return this._rawVertexSourceCode;\n  }\n  /**\n   * Gets the fragment shader source code before it has been modified by any processing\n   */\n  get rawFragmentSourceCode() {\n    return this._rawFragmentSourceCode;\n  }\n  /**\n   * Recompiles the webGL program\n   * @param vertexSourceCode The source code for the vertex shader.\n   * @param fragmentSourceCode The source code for the fragment shader.\n   * @param onCompiled Callback called when completed.\n   * @param onError Callback called on error.\n   * @internal\n   */\n  _rebuildProgram(vertexSourceCode, fragmentSourceCode, onCompiled, onError) {\n    this._isReady = false;\n    this._vertexSourceCodeOverride = vertexSourceCode;\n    this._fragmentSourceCodeOverride = fragmentSourceCode;\n    this.onError = (effect, error) => {\n      if (onError) {\n        onError(error);\n      }\n    };\n    this.onCompiled = () => {\n      const scenes = this.getEngine().scenes;\n      if (scenes) {\n        for (let i = 0; i < scenes.length; i++) {\n          scenes[i].markAllMaterialsAsDirty(63);\n        }\n      }\n      this._pipelineContext._handlesSpectorRebuildCallback(onCompiled);\n    };\n    this._fallbacks = null;\n    this._prepareEffect();\n  }\n  /**\n   * Prepares the effect\n   * @internal\n   */\n  _prepareEffect() {\n    const attributesNames = this._attributesNames;\n    const defines = this.defines;\n    const previousPipelineContext = this._pipelineContext;\n    this._isReady = false;\n    try {\n      const engine = this._engine;\n      this._pipelineContext = engine.createPipelineContext(this._processingContext);\n      this._pipelineContext._name = this._key;\n      const rebuildRebind = this._rebuildProgram.bind(this);\n      if (this._vertexSourceCodeOverride && this._fragmentSourceCodeOverride) {\n        engine._preparePipelineContext(this._pipelineContext, this._vertexSourceCodeOverride, this._fragmentSourceCodeOverride, true, this._rawVertexSourceCode, this._rawFragmentSourceCode, rebuildRebind, null, this._transformFeedbackVaryings, this._key);\n      } else {\n        engine._preparePipelineContext(this._pipelineContext, this._vertexSourceCode, this._fragmentSourceCode, false, this._rawVertexSourceCode, this._rawFragmentSourceCode, rebuildRebind, defines, this._transformFeedbackVaryings, this._key);\n      }\n      engine._executeWhenRenderingStateIsCompiled(this._pipelineContext, () => {\n        this._attributes = [];\n        this._pipelineContext._fillEffectInformation(this, this._uniformBuffersNames, this._uniformsNames, this._uniforms, this._samplerList, this._samplers, attributesNames, this._attributes);\n        // Caches attribute locations.\n        if (attributesNames) {\n          for (let i = 0; i < attributesNames.length; i++) {\n            const name = attributesNames[i];\n            this._attributeLocationByName[name] = this._attributes[i];\n          }\n        }\n        engine.bindSamplers(this);\n        this._compilationError = \"\";\n        this._isReady = true;\n        if (this.onCompiled) {\n          this.onCompiled(this);\n        }\n        this.onCompileObservable.notifyObservers(this);\n        this.onCompileObservable.clear();\n        // Unbind mesh reference in fallbacks\n        if (this._fallbacks) {\n          this._fallbacks.unBindMesh();\n        }\n        if (previousPipelineContext) {\n          this.getEngine()._deletePipelineContext(previousPipelineContext);\n        }\n      });\n      if (this._pipelineContext.isAsync) {\n        this._checkIsReady(previousPipelineContext);\n      }\n    } catch (e) {\n      this._processCompilationErrors(e, previousPipelineContext);\n    }\n  }\n  _getShaderCodeAndErrorLine(code, error, isFragment) {\n    const regexp = isFragment ? /FRAGMENT SHADER ERROR: 0:(\\d+?):/ : /VERTEX SHADER ERROR: 0:(\\d+?):/;\n    let errorLine = null;\n    if (error && code) {\n      const res = error.match(regexp);\n      if (res && res.length === 2) {\n        const lineNumber = parseInt(res[1]);\n        const lines = code.split(\"\\n\", -1);\n        if (lines.length >= lineNumber) {\n          errorLine = `Offending line [${lineNumber}] in ${isFragment ? \"fragment\" : \"vertex\"} code: ${lines[lineNumber - 1]}`;\n        }\n      }\n    }\n    return [code, errorLine];\n  }\n  _processCompilationErrors(e, previousPipelineContext = null) {\n    var _a, _b, _c;\n    this._compilationError = e.message;\n    const attributesNames = this._attributesNames;\n    const fallbacks = this._fallbacks;\n    // Let's go through fallbacks then\n    Logger.Error(\"Unable to compile effect:\");\n    Logger.Error(\"Uniforms: \" + this._uniformsNames.map(function (uniform) {\n      return \" \" + uniform;\n    }));\n    Logger.Error(\"Attributes: \" + attributesNames.map(function (attribute) {\n      return \" \" + attribute;\n    }));\n    Logger.Error(\"Defines:\\r\\n\" + this.defines);\n    if (Effect.LogShaderCodeOnCompilationError) {\n      let lineErrorVertex = null,\n        lineErrorFragment = null,\n        code = null;\n      if ((_a = this._pipelineContext) === null || _a === void 0 ? void 0 : _a._getVertexShaderCode()) {\n        [code, lineErrorVertex] = this._getShaderCodeAndErrorLine(this._pipelineContext._getVertexShaderCode(), this._compilationError, false);\n        if (code) {\n          Logger.Error(\"Vertex code:\");\n          Logger.Error(code);\n        }\n      }\n      if ((_b = this._pipelineContext) === null || _b === void 0 ? void 0 : _b._getFragmentShaderCode()) {\n        [code, lineErrorFragment] = this._getShaderCodeAndErrorLine((_c = this._pipelineContext) === null || _c === void 0 ? void 0 : _c._getFragmentShaderCode(), this._compilationError, true);\n        if (code) {\n          Logger.Error(\"Fragment code:\");\n          Logger.Error(code);\n        }\n      }\n      if (lineErrorVertex) {\n        Logger.Error(lineErrorVertex);\n      }\n      if (lineErrorFragment) {\n        Logger.Error(lineErrorFragment);\n      }\n    }\n    Logger.Error(\"Error: \" + this._compilationError);\n    const notifyErrors = () => {\n      if (this.onError) {\n        this.onError(this, this._compilationError);\n      }\n      this.onErrorObservable.notifyObservers(this);\n    };\n    // In case a previous compilation was successful, we need to restore the previous pipeline context\n    if (previousPipelineContext) {\n      this._pipelineContext = previousPipelineContext;\n      this._isReady = true;\n      notifyErrors();\n    }\n    // Lets try to compile fallbacks as long as we have some.\n    if (fallbacks) {\n      this._pipelineContext = null;\n      if (fallbacks.hasMoreFallbacks) {\n        this._allFallbacksProcessed = false;\n        Logger.Error(\"Trying next fallback.\");\n        this.defines = fallbacks.reduce(this.defines, this);\n        this._prepareEffect();\n      } else {\n        // Sorry we did everything we can\n        this._allFallbacksProcessed = true;\n        notifyErrors();\n        this.onErrorObservable.clear();\n        // Unbind mesh reference in fallbacks\n        if (this._fallbacks) {\n          this._fallbacks.unBindMesh();\n        }\n      }\n    } else {\n      this._allFallbacksProcessed = true;\n      // In case of error, without any prior successful compilation, let s notify observers\n      if (!previousPipelineContext) {\n        notifyErrors();\n      }\n    }\n  }\n  /**\n   * Checks if the effect is supported. (Must be called after compilation)\n   */\n  get isSupported() {\n    return this._compilationError === \"\";\n  }\n  /**\n   * Binds a texture to the engine to be used as output of the shader.\n   * @param channel Name of the output variable.\n   * @param texture Texture to bind.\n   * @internal\n   */\n  _bindTexture(channel, texture) {\n    this._engine._bindTexture(this._samplers[channel], texture, channel);\n  }\n  /**\n   * Sets a texture on the engine to be used in the shader.\n   * @param channel Name of the sampler variable.\n   * @param texture Texture to set.\n   */\n  setTexture(channel, texture) {\n    this._engine.setTexture(this._samplers[channel], this._uniforms[channel], texture, channel);\n  }\n  /**\n   * Sets a depth stencil texture from a render target on the engine to be used in the shader.\n   * @param channel Name of the sampler variable.\n   * @param texture Texture to set.\n   */\n  setDepthStencilTexture(channel, texture) {\n    this._engine.setDepthStencilTexture(this._samplers[channel], this._uniforms[channel], texture, channel);\n  }\n  /**\n   * Sets an array of textures on the engine to be used in the shader.\n   * @param channel Name of the variable.\n   * @param textures Textures to set.\n   */\n  setTextureArray(channel, textures) {\n    const exName = channel + \"Ex\";\n    if (this._samplerList.indexOf(exName + \"0\") === -1) {\n      const initialPos = this._samplerList.indexOf(channel);\n      for (let index = 1; index < textures.length; index++) {\n        const currentExName = exName + (index - 1).toString();\n        this._samplerList.splice(initialPos + index, 0, currentExName);\n      }\n      // Reset every channels\n      let channelIndex = 0;\n      for (const key of this._samplerList) {\n        this._samplers[key] = channelIndex;\n        channelIndex += 1;\n      }\n    }\n    this._engine.setTextureArray(this._samplers[channel], this._uniforms[channel], textures, channel);\n  }\n  /**\n   * Sets a texture to be the input of the specified post process. (To use the output, pass in the next post process in the pipeline)\n   * @param channel Name of the sampler variable.\n   * @param postProcess Post process to get the input texture from.\n   */\n  setTextureFromPostProcess(channel, postProcess) {\n    this._engine.setTextureFromPostProcess(this._samplers[channel], postProcess, channel);\n  }\n  /**\n   * (Warning! setTextureFromPostProcessOutput may be desired instead)\n   * Sets the input texture of the passed in post process to be input of this effect. (To use the output of the passed in post process use setTextureFromPostProcessOutput)\n   * @param channel Name of the sampler variable.\n   * @param postProcess Post process to get the output texture from.\n   */\n  setTextureFromPostProcessOutput(channel, postProcess) {\n    this._engine.setTextureFromPostProcessOutput(this._samplers[channel], postProcess, channel);\n  }\n  /**\n   * Binds a buffer to a uniform.\n   * @param buffer Buffer to bind.\n   * @param name Name of the uniform variable to bind to.\n   */\n  bindUniformBuffer(buffer, name) {\n    const bufferName = this._uniformBuffersNames[name];\n    if (bufferName === undefined || Effect._BaseCache[bufferName] === buffer && this._engine._features.useUBOBindingCache) {\n      return;\n    }\n    Effect._BaseCache[bufferName] = buffer;\n    this._engine.bindUniformBufferBase(buffer, bufferName, name);\n  }\n  /**\n   * Binds block to a uniform.\n   * @param blockName Name of the block to bind.\n   * @param index Index to bind.\n   */\n  bindUniformBlock(blockName, index) {\n    this._engine.bindUniformBlock(this._pipelineContext, blockName, index);\n  }\n  /**\n   * Sets an float array on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n  setFloatArray(uniformName, array) {\n    this._pipelineContext.setArray(uniformName, array);\n    return this;\n  }\n  /**\n   * Sets an float array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n  setFloatArray2(uniformName, array) {\n    this._pipelineContext.setArray2(uniformName, array);\n    return this;\n  }\n  /**\n   * Sets an float array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n  setFloatArray3(uniformName, array) {\n    this._pipelineContext.setArray3(uniformName, array);\n    return this;\n  }\n  /**\n   * Sets an float array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n  setFloatArray4(uniformName, array) {\n    this._pipelineContext.setArray4(uniformName, array);\n    return this;\n  }\n  /**\n   * Sets a boolean on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param bool value to be set.\n   * @returns this effect.\n   */\n  setBool(uniformName, bool) {\n    this._pipelineContext.setInt(uniformName, bool ? 1 : 0);\n    return this;\n  }\n  /**\n   * Release all associated resources.\n   **/\n  dispose() {\n    var _a;\n    (_a = this._pipelineContext) === null || _a === void 0 ? void 0 : _a.dispose();\n    this._engine._releaseEffect(this);\n    this._isDisposed = true;\n  }\n  /**\n   * This function will add a new shader to the shader store\n   * @param name the name of the shader\n   * @param pixelShader optional pixel shader content\n   * @param vertexShader optional vertex shader content\n   * @param shaderLanguage the language the shader is written in (default: GLSL)\n   */\n  static RegisterShader(name, pixelShader, vertexShader, shaderLanguage = ShaderLanguage.GLSL) {\n    if (pixelShader) {\n      EngineShaderStore.GetShadersStore(shaderLanguage)[`${name}PixelShader`] = pixelShader;\n    }\n    if (vertexShader) {\n      EngineShaderStore.GetShadersStore(shaderLanguage)[`${name}VertexShader`] = vertexShader;\n    }\n  }\n  /**\n   * Resets the cache of effects.\n   */\n  static ResetCache() {\n    Effect._BaseCache = {};\n  }\n}\n/**\n * Enable logging of the shader code when a compilation error occurs\n */\nEffect.LogShaderCodeOnCompilationError = true;\nEffect._UniqueIdSeed = 0;\nEffect._BaseCache = {};\n/**\n * Store of each shader (The can be looked up using effect.key)\n */\nEffect.ShadersStore = EngineShaderStore.ShadersStore;\n/**\n * Store of each included file for a shader (The can be looked up using effect.key)\n */\nEffect.IncludesShadersStore = EngineShaderStore.IncludesShadersStore;","map":{"version":3,"mappings":"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","names":["Observable","GetDOMTextContent","IsWindowObjectExist","Logger","ShaderProcessor","ShaderStore","EngineShaderStore","ShaderLanguage","Effect","constructor","baseName","attributesNamesOrOptions","uniformsNamesOrEngine","samplers","engine","defines","fallbacks","onCompiled","onError","indexParameters","key","shaderLanguage","GLSL","name","_key","processCodeAfterIncludes","undefined","processFinalCode","attributes","options","_engine","_attributesNames","_uniformsNames","uniformsNames","concat","_samplerList","slice","_fallbacks","_indexParameters","_transformFeedbackVaryings","transformFeedbackVaryings","_multiTarget","multiTarget","_shaderLanguage","uniformBuffersNames","_uniformBuffersNamesList","i","length","_uniformBuffersNames","_attributeLocationByName","uniqueId","_UniqueIdSeed","vertexSource","fragmentSource","hostDocument","getHostDocument","vertexElement","getElementById","vertex","fragmentElement","fragment","_processingContext","_getShaderProcessingContext","processorOptions","split","isFragment","shouldUseHighPrecisionShader","_shouldUseHighPrecisionShader","processor","_getShaderProcessor","supportsUniformBuffers","shadersRepository","GetShadersRepository","includesShadersStore","GetIncludesShadersStore","version","toString","platformName","shaderPlatformName","processingContext","isNDCHalfZRange","useReverseDepthBuffer","shaderCodes","shadersLoaded","migratedVertexCode","fragmentCode","Process","migratedFragmentCode","codeBeforeMigration","_fragmentSourceCodeBeforeMigration","finalShaders","Finalize","_useFinalCode","vertexCode","_loadShader","Initialize","_rawVertexSourceCode","_vertexSourceCodeBeforeMigration","_rawFragmentSourceCode","proxyFunction","functionName","_pipelineContext","func","apply","arguments","forEach","endsWith","n","bind","ShadersRepository","repo","onBindObservable","_onBindObservable","spectorName","_vertexSourceCode","WGSL","_fragmentSourceCode","_prepareEffect","isReady","_isReadyInternal","_isReady","getEngine","getPipelineContext","getAttributesNames","getAttributeLocation","index","_attributes","getAttributeLocationByName","getAttributesCount","getUniformIndex","uniformName","indexOf","getUniform","_uniforms","getSamplers","getUniformNames","getUniformBuffersNames","getIndexParameters","getCompilationError","_compilationError","allFallbacksProcessed","_allFallbacksProcessed","executeWhenCompiled","onCompileObservable","add","effect","isAsync","setTimeout","_checkIsReady","previousPipelineContext","e","_processCompilationErrors","_isDisposed","shader","optionalKey","callback","HTMLElement","shaderCode","substr","shaderBinary","window","atob","shaderStore","GetShadersStore","shaderUrl","_loadFile","toLowerCase","vertexSourceCode","_vertexSourceCodeOverride","_fragmentSourceCodeOverride","_getVertexShaderCode","fragmentSourceCode","_getFragmentShaderCode","vertexSourceCodeBeforeMigration","fragmentSourceCodeBeforeMigration","rawVertexSourceCode","rawFragmentSourceCode","_rebuildProgram","error","scenes","markAllMaterialsAsDirty","_handlesSpectorRebuildCallback","attributesNames","createPipelineContext","_name","rebuildRebind","_preparePipelineContext","_executeWhenRenderingStateIsCompiled","_fillEffectInformation","_samplers","bindSamplers","notifyObservers","clear","unBindMesh","_deletePipelineContext","_getShaderCodeAndErrorLine","code","regexp","errorLine","res","match","lineNumber","parseInt","lines","message","Error","map","uniform","attribute","LogShaderCodeOnCompilationError","lineErrorVertex","lineErrorFragment","notifyErrors","onErrorObservable","hasMoreFallbacks","reduce","isSupported","_bindTexture","channel","texture","setTexture","setDepthStencilTexture","setTextureArray","textures","exName","initialPos","currentExName","splice","channelIndex","setTextureFromPostProcess","postProcess","setTextureFromPostProcessOutput","bindUniformBuffer","buffer","bufferName","_BaseCache","_features","useUBOBindingCache","bindUniformBufferBase","bindUniformBlock","blockName","setFloatArray","array","setArray","setFloatArray2","setArray2","setFloatArray3","setArray3","setFloatArray4","setArray4","setBool","bool","setInt","dispose","_releaseEffect","RegisterShader","pixelShader","vertexShader","ResetCache","ShadersStore","IncludesShadersStore"],"sourceRoot":"","sources":["../../../../lts/core/generated/Materials/effect.ts"],"sourcesContent":["import { Observable } from \"../Misc/observable\";\r\nimport type { FloatArray, Nullable } from \"../types\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { GetDOMTextContent, IsWindowObjectExist } from \"../Misc/domManagement\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { IDisposable } from \"../scene\";\r\nimport type { IPipelineContext } from \"../Engines/IPipelineContext\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { ShaderProcessor } from \"../Engines/Processors/shaderProcessor\";\r\nimport type { ProcessingOptions, ShaderCustomProcessingFunction, ShaderProcessingContext } from \"../Engines/Processors/shaderProcessingOptions\";\r\nimport type { IMatrixLike, IVector2Like, IVector3Like, IVector4Like, IColor3Like, IColor4Like, IQuaternionLike } from \"../Maths/math.like\";\r\nimport type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport type { IEffectFallbacks } from \"./iEffectFallbacks\";\r\nimport { ShaderStore as EngineShaderStore } from \"../Engines/shaderStore\";\r\nimport { ShaderLanguage } from \"./shaderLanguage\";\r\n\r\ndeclare type Engine = import(\"../Engines/engine\").Engine;\r\ndeclare type InternalTexture = import(\"../Materials/Textures/internalTexture\").InternalTexture;\r\ndeclare type ThinTexture = import(\"../Materials/Textures/thinTexture\").ThinTexture;\r\ndeclare type RenderTargetTexture = import(\"../Materials/Textures/renderTargetTexture\").RenderTargetTexture;\r\ndeclare type PostProcess = import(\"../PostProcesses/postProcess\").PostProcess;\r\n\r\n/**\r\n * Options to be used when creating an effect.\r\n */\r\nexport interface IEffectCreationOptions {\r\n    /**\r\n     * Attributes that will be used in the shader.\r\n     */\r\n    attributes: string[];\r\n    /**\r\n     * Uniform variable names that will be set in the shader.\r\n     */\r\n    uniformsNames: string[];\r\n    /**\r\n     * Uniform buffer variable names that will be set in the shader.\r\n     */\r\n    uniformBuffersNames: string[];\r\n    /**\r\n     * Sampler texture variable names that will be set in the shader.\r\n     */\r\n    samplers: string[];\r\n    /**\r\n     * Define statements that will be set in the shader.\r\n     */\r\n    defines: any;\r\n    /**\r\n     * Possible fallbacks for this effect to improve performance when needed.\r\n     */\r\n    fallbacks: Nullable<IEffectFallbacks>;\r\n    /**\r\n     * Callback that will be called when the shader is compiled.\r\n     */\r\n    onCompiled: Nullable<(effect: Effect) => void>;\r\n    /**\r\n     * Callback that will be called if an error occurs during shader compilation.\r\n     */\r\n    onError: Nullable<(effect: Effect, errors: string) => void>;\r\n    /**\r\n     * Parameters to be used with Babylons include syntax to iterate over an array (eg. {lights: 10})\r\n     */\r\n    indexParameters?: any;\r\n    /**\r\n     * Max number of lights that can be used in the shader.\r\n     */\r\n    maxSimultaneousLights?: number;\r\n    /**\r\n     * See https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/transformFeedbackVaryings\r\n     */\r\n    transformFeedbackVaryings?: Nullable<string[]>;\r\n    /**\r\n     * If provided, will be called two times with the vertex and fragment code so that this code can be updated before it is compiled by the GPU\r\n     */\r\n    processFinalCode?: Nullable<ShaderCustomProcessingFunction>;\r\n    /**\r\n     * If provided, will be called two times with the vertex and fragment code so that this code can be updated after the #include have been processed\r\n     */\r\n    processCodeAfterIncludes?: Nullable<ShaderCustomProcessingFunction>;\r\n    /**\r\n     * Is this effect rendering to several color attachments ?\r\n     */\r\n    multiTarget?: boolean;\r\n    /**\r\n     * The language the shader is written in (default: GLSL)\r\n     */\r\n    shaderLanguage?: ShaderLanguage;\r\n}\r\n\r\n/**\r\n * Effect containing vertex and fragment shader that can be executed on an object.\r\n */\r\nexport class Effect implements IDisposable {\r\n    /**\r\n     * Gets or sets the relative url used to load shaders if using the engine in non-minified mode\r\n     */\r\n    public static get ShadersRepository(): string {\r\n        return EngineShaderStore.ShadersRepository;\r\n    }\r\n    public static set ShadersRepository(repo: string) {\r\n        EngineShaderStore.ShadersRepository = repo;\r\n    }\r\n    /**\r\n     * Enable logging of the shader code when a compilation error occurs\r\n     */\r\n    public static LogShaderCodeOnCompilationError = true;\r\n    /**\r\n     * Name of the effect.\r\n     */\r\n    public name: any = null;\r\n    /**\r\n     * String container all the define statements that should be set on the shader.\r\n     */\r\n    public defines: string = \"\";\r\n    /**\r\n     * Callback that will be called when the shader is compiled.\r\n     */\r\n    public onCompiled: Nullable<(effect: Effect) => void> = null;\r\n    /**\r\n     * Callback that will be called if an error occurs during shader compilation.\r\n     */\r\n    public onError: Nullable<(effect: Effect, errors: string) => void> = null;\r\n    /**\r\n     * Callback that will be called when effect is bound.\r\n     */\r\n    public onBind: Nullable<(effect: Effect) => void> = null;\r\n    /**\r\n     * Unique ID of the effect.\r\n     */\r\n    public uniqueId = 0;\r\n    /**\r\n     * Observable that will be called when the shader is compiled.\r\n     * It is recommended to use executeWhenCompile() or to make sure that scene.isReady() is called to get this observable raised.\r\n     */\r\n    public onCompileObservable = new Observable<Effect>();\r\n    /**\r\n     * Observable that will be called if an error occurs during shader compilation.\r\n     */\r\n    public onErrorObservable = new Observable<Effect>();\r\n\r\n    /** @internal */\r\n    public _onBindObservable: Nullable<Observable<Effect>> = null;\r\n\r\n    /**\r\n     * @internal\r\n     * Specifies if the effect was previously ready\r\n     */\r\n    public _wasPreviouslyReady = false;\r\n\r\n    /**\r\n     * @internal\r\n     * Forces the code from bindForSubMesh to be fully run the next time it is called\r\n     * It is used in frozen mode to make sure the effect is properly rebound when a new effect is created\r\n     */\r\n    public _forceRebindOnNextCall = false;\r\n\r\n    /**\r\n     * @internal\r\n     * Specifies if the effect was previously using instances\r\n     */\r\n    public _wasPreviouslyUsingInstances: Nullable<boolean> = null;\r\n\r\n    private _isDisposed = false;\r\n\r\n    /**\r\n     * Observable that will be called when effect is bound.\r\n     */\r\n    public get onBindObservable(): Observable<Effect> {\r\n        if (!this._onBindObservable) {\r\n            this._onBindObservable = new Observable<Effect>();\r\n        }\r\n\r\n        return this._onBindObservable;\r\n    }\r\n\r\n    /** @internal */\r\n    public _bonesComputationForcedToCPU = false;\r\n    /** @internal */\r\n    public _uniformBuffersNames: { [key: string]: number } = {};\r\n    /** @internal */\r\n    public _samplerList: string[];\r\n    /** @internal */\r\n    public _multiTarget: boolean = false;\r\n\r\n    private static _UniqueIdSeed = 0;\r\n    /** @internal */\r\n    public _engine: Engine;\r\n    private _uniformBuffersNamesList: string[];\r\n    private _uniformsNames: string[];\r\n    private _samplers: { [key: string]: number } = {};\r\n    private _isReady = false;\r\n    private _compilationError = \"\";\r\n    private _allFallbacksProcessed = false;\r\n    private _attributesNames: string[];\r\n    private _attributes: number[];\r\n    private _attributeLocationByName: { [name: string]: number };\r\n    private _uniforms: { [key: string]: Nullable<WebGLUniformLocation> } = {};\r\n    /**\r\n     * Key for the effect.\r\n     * @internal\r\n     */\r\n    public _key: string = \"\";\r\n    private _indexParameters: any;\r\n    private _fallbacks: Nullable<IEffectFallbacks> = null;\r\n    private _vertexSourceCodeOverride: string = \"\";\r\n    private _fragmentSourceCodeOverride: string = \"\";\r\n    private _transformFeedbackVaryings: Nullable<string[]> = null;\r\n    private _shaderLanguage: ShaderLanguage;\r\n    /**\r\n     * Compiled shader to webGL program.\r\n     * @internal\r\n     */\r\n    public _pipelineContext: Nullable<IPipelineContext> = null;\r\n    /** @internal */\r\n    public _vertexSourceCode: string = \"\";\r\n    /** @internal */\r\n    public _fragmentSourceCode: string = \"\";\r\n\r\n    /** @internal */\r\n    private _vertexSourceCodeBeforeMigration: string = \"\";\r\n    /** @internal */\r\n    private _fragmentSourceCodeBeforeMigration: string = \"\";\r\n\r\n    /** @internal */\r\n    private _rawVertexSourceCode: string = \"\";\r\n    /** @internal */\r\n    private _rawFragmentSourceCode: string = \"\";\r\n\r\n    private static _BaseCache: { [key: number]: DataBuffer } = {};\r\n    private _processingContext: Nullable<ShaderProcessingContext>;\r\n\r\n    /**\r\n     * Instantiates an effect.\r\n     * An effect can be used to create/manage/execute vertex and fragment shaders.\r\n     * @param baseName Name of the effect.\r\n     * @param attributesNamesOrOptions List of attribute names that will be passed to the shader or set of all options to create the effect.\r\n     * @param uniformsNamesOrEngine List of uniform variable names that will be passed to the shader or the engine that will be used to render effect.\r\n     * @param samplers List of sampler variables that will be passed to the shader.\r\n     * @param engine Engine to be used to render the effect\r\n     * @param defines Define statements to be added to the shader.\r\n     * @param fallbacks Possible fallbacks for this effect to improve performance when needed.\r\n     * @param onCompiled Callback that will be called when the shader is compiled.\r\n     * @param onError Callback that will be called if an error occurs during shader compilation.\r\n     * @param indexParameters Parameters to be used with Babylons include syntax to iterate over an array (eg. {lights: 10})\r\n     * @param key Effect Key identifying uniquely compiled shader variants\r\n     * @param shaderLanguage the language the shader is written in (default: GLSL)\r\n     */\r\n    constructor(\r\n        baseName: any,\r\n        attributesNamesOrOptions: string[] | IEffectCreationOptions,\r\n        uniformsNamesOrEngine: string[] | ThinEngine,\r\n        samplers: Nullable<string[]> = null,\r\n        engine?: ThinEngine,\r\n        defines: Nullable<string> = null,\r\n        fallbacks: Nullable<IEffectFallbacks> = null,\r\n        onCompiled: Nullable<(effect: Effect) => void> = null,\r\n        onError: Nullable<(effect: Effect, errors: string) => void> = null,\r\n        indexParameters?: any,\r\n        key: string = \"\",\r\n        shaderLanguage = ShaderLanguage.GLSL\r\n    ) {\r\n        this.name = baseName;\r\n        this._key = key;\r\n\r\n        let processCodeAfterIncludes: ShaderCustomProcessingFunction | undefined = undefined;\r\n        let processFinalCode: Nullable<ShaderCustomProcessingFunction> = null;\r\n\r\n        if ((<IEffectCreationOptions>attributesNamesOrOptions).attributes) {\r\n            const options = <IEffectCreationOptions>attributesNamesOrOptions;\r\n            this._engine = <Engine>uniformsNamesOrEngine;\r\n\r\n            this._attributesNames = options.attributes;\r\n            this._uniformsNames = options.uniformsNames.concat(options.samplers);\r\n            this._samplerList = options.samplers.slice();\r\n            this.defines = options.defines;\r\n            this.onError = options.onError;\r\n            this.onCompiled = options.onCompiled;\r\n            this._fallbacks = options.fallbacks;\r\n            this._indexParameters = options.indexParameters;\r\n            this._transformFeedbackVaryings = options.transformFeedbackVaryings || null;\r\n            this._multiTarget = !!options.multiTarget;\r\n            this._shaderLanguage = options.shaderLanguage ?? ShaderLanguage.GLSL;\r\n\r\n            if (options.uniformBuffersNames) {\r\n                this._uniformBuffersNamesList = options.uniformBuffersNames.slice();\r\n                for (let i = 0; i < options.uniformBuffersNames.length; i++) {\r\n                    this._uniformBuffersNames[options.uniformBuffersNames[i]] = i;\r\n                }\r\n            }\r\n\r\n            processFinalCode = options.processFinalCode ?? null;\r\n            processCodeAfterIncludes = options.processCodeAfterIncludes ?? undefined;\r\n        } else {\r\n            this._engine = <Engine>engine;\r\n            this.defines = defines == null ? \"\" : defines;\r\n            this._uniformsNames = (<string[]>uniformsNamesOrEngine).concat(<string[]>samplers);\r\n            this._samplerList = samplers ? <string[]>samplers.slice() : [];\r\n            this._attributesNames = <string[]>attributesNamesOrOptions;\r\n            this._uniformBuffersNamesList = [];\r\n            this._shaderLanguage = shaderLanguage;\r\n\r\n            this.onError = onError;\r\n            this.onCompiled = onCompiled;\r\n\r\n            this._indexParameters = indexParameters;\r\n            this._fallbacks = fallbacks;\r\n        }\r\n\r\n        this._attributeLocationByName = {};\r\n\r\n        this.uniqueId = Effect._UniqueIdSeed++;\r\n\r\n        let vertexSource: any;\r\n        let fragmentSource: any;\r\n\r\n        const hostDocument = IsWindowObjectExist() ? this._engine.getHostDocument() : null;\r\n\r\n        if (baseName.vertexSource) {\r\n            vertexSource = \"source:\" + baseName.vertexSource;\r\n        } else if (baseName.vertexElement) {\r\n            vertexSource = hostDocument ? hostDocument.getElementById(baseName.vertexElement) : null;\r\n\r\n            if (!vertexSource) {\r\n                vertexSource = baseName.vertexElement;\r\n            }\r\n        } else {\r\n            vertexSource = baseName.vertex || baseName;\r\n        }\r\n\r\n        if (baseName.fragmentSource) {\r\n            fragmentSource = \"source:\" + baseName.fragmentSource;\r\n        } else if (baseName.fragmentElement) {\r\n            fragmentSource = hostDocument ? hostDocument.getElementById(baseName.fragmentElement) : null;\r\n\r\n            if (!fragmentSource) {\r\n                fragmentSource = baseName.fragmentElement;\r\n            }\r\n        } else {\r\n            fragmentSource = baseName.fragment || baseName;\r\n        }\r\n\r\n        this._processingContext = this._engine._getShaderProcessingContext(this._shaderLanguage);\r\n\r\n        let processorOptions: ProcessingOptions = {\r\n            defines: this.defines.split(\"\\n\"),\r\n            indexParameters: this._indexParameters,\r\n            isFragment: false,\r\n            shouldUseHighPrecisionShader: this._engine._shouldUseHighPrecisionShader,\r\n            processor: this._engine._getShaderProcessor(this._shaderLanguage),\r\n            supportsUniformBuffers: this._engine.supportsUniformBuffers,\r\n            shadersRepository: EngineShaderStore.GetShadersRepository(this._shaderLanguage),\r\n            includesShadersStore: EngineShaderStore.GetIncludesShadersStore(this._shaderLanguage),\r\n            version: (this._engine.version * 100).toString(),\r\n            platformName: this._engine.shaderPlatformName,\r\n            processingContext: this._processingContext,\r\n            isNDCHalfZRange: this._engine.isNDCHalfZRange,\r\n            useReverseDepthBuffer: this._engine.useReverseDepthBuffer,\r\n            processCodeAfterIncludes,\r\n        };\r\n\r\n        const shaderCodes: [string | undefined, string | undefined] = [undefined, undefined];\r\n        const shadersLoaded = () => {\r\n            if (shaderCodes[0] && shaderCodes[1]) {\r\n                processorOptions.isFragment = true;\r\n                const [migratedVertexCode, fragmentCode] = shaderCodes;\r\n                ShaderProcessor.Process(\r\n                    fragmentCode,\r\n                    processorOptions,\r\n                    (migratedFragmentCode, codeBeforeMigration) => {\r\n                        this._fragmentSourceCodeBeforeMigration = codeBeforeMigration;\r\n                        if (processFinalCode) {\r\n                            migratedFragmentCode = processFinalCode(\"fragment\", migratedFragmentCode);\r\n                        }\r\n                        const finalShaders = ShaderProcessor.Finalize(migratedVertexCode, migratedFragmentCode, processorOptions);\r\n                        processorOptions = null as any; // avoid some GC leaks because of code below (related to proxyFunction(name).bind(this))\r\n                        this._useFinalCode(finalShaders.vertexCode, finalShaders.fragmentCode, baseName);\r\n                    },\r\n                    this._engine\r\n                );\r\n            }\r\n        };\r\n        this._loadShader(vertexSource, \"Vertex\", \"\", (vertexCode) => {\r\n            ShaderProcessor.Initialize(processorOptions);\r\n            ShaderProcessor.Process(\r\n                vertexCode,\r\n                processorOptions,\r\n                (migratedVertexCode, codeBeforeMigration) => {\r\n                    this._rawVertexSourceCode = vertexCode;\r\n                    this._vertexSourceCodeBeforeMigration = codeBeforeMigration;\r\n                    if (processFinalCode) {\r\n                        migratedVertexCode = processFinalCode(\"vertex\", migratedVertexCode);\r\n                    }\r\n                    shaderCodes[0] = migratedVertexCode;\r\n                    shadersLoaded();\r\n                },\r\n                this._engine\r\n            );\r\n        });\r\n        this._loadShader(fragmentSource, \"Fragment\", \"Pixel\", (fragmentCode) => {\r\n            this._rawFragmentSourceCode = fragmentCode;\r\n            shaderCodes[1] = fragmentCode;\r\n            shadersLoaded();\r\n        });\r\n\r\n        const proxyFunction = function (functionName: string) {\r\n            // check if the function exists in the pipelineContext\r\n            return function (this: Effect) {\r\n                if (this._pipelineContext) {\r\n                    const func = this._pipelineContext[functionName as keyof IPipelineContext];\r\n                    (func as (uniformName: string, ...payload: any) => void).apply(this._pipelineContext, arguments);\r\n                }\r\n                return this;\r\n            };\r\n        };\r\n        [\"Int?\", \"UInt?\", \"IntArray?\", \"UIntArray?\", \"Array?\", \"Color?\", \"Vector?\", \"Float?\", \"Matrices\", \"Matrix\", \"Matrix3x3\", \"Matrix2x2\", \"Quaternion\", \"DirectColor4\"].forEach(\r\n            (functionName) => {\r\n                const name = `set${functionName}`;\r\n                if (name.endsWith(\"?\")) {\r\n                    [\"\", 2, 3, 4].forEach((n) => {\r\n                        this[(name.slice(0, -1) + n) as keyof this] = this[(name.slice(0, -1) + n) as keyof this] || proxyFunction(name.slice(0, -1) + n).bind(this);\r\n                    });\r\n                } else {\r\n                    this[name as keyof this] = this[name as keyof this] || proxyFunction(name).bind(this);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    private _useFinalCode(migratedVertexCode: string, migratedFragmentCode: string, baseName: any) {\r\n        if (baseName) {\r\n            const vertex = baseName.vertexElement || baseName.vertex || baseName.spectorName || baseName;\r\n            const fragment = baseName.fragmentElement || baseName.fragment || baseName.spectorName || baseName;\r\n\r\n            this._vertexSourceCode = (this._shaderLanguage === ShaderLanguage.WGSL ? \"//\" : \"\") + \"#define SHADER_NAME vertex:\" + vertex + \"\\n\" + migratedVertexCode;\r\n            this._fragmentSourceCode = (this._shaderLanguage === ShaderLanguage.WGSL ? \"//\" : \"\") + \"#define SHADER_NAME fragment:\" + fragment + \"\\n\" + migratedFragmentCode;\r\n        } else {\r\n            this._vertexSourceCode = migratedVertexCode;\r\n            this._fragmentSourceCode = migratedFragmentCode;\r\n        }\r\n        this._prepareEffect();\r\n    }\r\n\r\n    /**\r\n     * Unique key for this effect\r\n     */\r\n    public get key(): string {\r\n        return this._key;\r\n    }\r\n\r\n    /**\r\n     * If the effect has been compiled and prepared.\r\n     * @returns if the effect is compiled and prepared.\r\n     */\r\n    public isReady(): boolean {\r\n        try {\r\n            return this._isReadyInternal();\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private _isReadyInternal(): boolean {\r\n        if (this._isReady) {\r\n            return true;\r\n        }\r\n        if (this._pipelineContext) {\r\n            return this._pipelineContext.isReady;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * The engine the effect was initialized with.\r\n     * @returns the engine.\r\n     */\r\n    public getEngine(): Engine {\r\n        return this._engine;\r\n    }\r\n\r\n    /**\r\n     * The pipeline context for this effect\r\n     * @returns the associated pipeline context\r\n     */\r\n    public getPipelineContext(): Nullable<IPipelineContext> {\r\n        return this._pipelineContext;\r\n    }\r\n\r\n    /**\r\n     * The set of names of attribute variables for the shader.\r\n     * @returns An array of attribute names.\r\n     */\r\n    public getAttributesNames(): string[] {\r\n        return this._attributesNames;\r\n    }\r\n\r\n    /**\r\n     * Returns the attribute at the given index.\r\n     * @param index The index of the attribute.\r\n     * @returns The location of the attribute.\r\n     */\r\n    public getAttributeLocation(index: number): number {\r\n        return this._attributes[index];\r\n    }\r\n\r\n    /**\r\n     * Returns the attribute based on the name of the variable.\r\n     * @param name of the attribute to look up.\r\n     * @returns the attribute location.\r\n     */\r\n    public getAttributeLocationByName(name: string): number {\r\n        return this._attributeLocationByName[name];\r\n    }\r\n\r\n    /**\r\n     * The number of attributes.\r\n     * @returns the number of attributes.\r\n     */\r\n    public getAttributesCount(): number {\r\n        return this._attributes.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the index of a uniform variable.\r\n     * @param uniformName of the uniform to look up.\r\n     * @returns the index.\r\n     */\r\n    public getUniformIndex(uniformName: string): number {\r\n        return this._uniformsNames.indexOf(uniformName);\r\n    }\r\n\r\n    /**\r\n     * Returns the attribute based on the name of the variable.\r\n     * @param uniformName of the uniform to look up.\r\n     * @returns the location of the uniform.\r\n     */\r\n    public getUniform(uniformName: string): Nullable<WebGLUniformLocation> {\r\n        return this._uniforms[uniformName];\r\n    }\r\n\r\n    /**\r\n     * Returns an array of sampler variable names\r\n     * @returns The array of sampler variable names.\r\n     */\r\n    public getSamplers(): string[] {\r\n        return this._samplerList;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of uniform variable names\r\n     * @returns The array of uniform variable names.\r\n     */\r\n    public getUniformNames(): string[] {\r\n        return this._uniformsNames;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of uniform buffer variable names\r\n     * @returns The array of uniform buffer variable names.\r\n     */\r\n    public getUniformBuffersNames(): string[] {\r\n        return this._uniformBuffersNamesList;\r\n    }\r\n\r\n    /**\r\n     * Returns the index parameters used to create the effect\r\n     * @returns The index parameters object\r\n     */\r\n    public getIndexParameters(): any {\r\n        return this._indexParameters;\r\n    }\r\n\r\n    /**\r\n     * The error from the last compilation.\r\n     * @returns the error string.\r\n     */\r\n    public getCompilationError(): string {\r\n        return this._compilationError;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that all fallbacks were used during compilation\r\n     * @returns true if all fallbacks were used\r\n     */\r\n    public allFallbacksProcessed(): boolean {\r\n        return this._allFallbacksProcessed;\r\n    }\r\n\r\n    /**\r\n     * Adds a callback to the onCompiled observable and call the callback immediately if already ready.\r\n     * @param func The callback to be used.\r\n     */\r\n    public executeWhenCompiled(func: (effect: Effect) => void): void {\r\n        if (this.isReady()) {\r\n            func(this);\r\n            return;\r\n        }\r\n\r\n        this.onCompileObservable.add((effect) => {\r\n            func(effect);\r\n        });\r\n\r\n        if (!this._pipelineContext || this._pipelineContext.isAsync) {\r\n            setTimeout(() => {\r\n                this._checkIsReady(null);\r\n            }, 16);\r\n        }\r\n    }\r\n\r\n    private _checkIsReady(previousPipelineContext: Nullable<IPipelineContext>) {\r\n        try {\r\n            if (this._isReadyInternal()) {\r\n                return;\r\n            }\r\n        } catch (e) {\r\n            this._processCompilationErrors(e, previousPipelineContext);\r\n            return;\r\n        }\r\n\r\n        if (this._isDisposed) {\r\n            return;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this._checkIsReady(previousPipelineContext);\r\n        }, 16);\r\n    }\r\n\r\n    private _loadShader(shader: any, key: string, optionalKey: string, callback: (data: any) => void): void {\r\n        if (typeof HTMLElement !== \"undefined\") {\r\n            // DOM element ?\r\n            if (shader instanceof HTMLElement) {\r\n                const shaderCode = GetDOMTextContent(shader);\r\n                callback(shaderCode);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Direct source ?\r\n        if (shader.substr(0, 7) === \"source:\") {\r\n            callback(shader.substr(7));\r\n            return;\r\n        }\r\n\r\n        // Base64 encoded ?\r\n        if (shader.substr(0, 7) === \"base64:\") {\r\n            const shaderBinary = window.atob(shader.substr(7));\r\n            callback(shaderBinary);\r\n            return;\r\n        }\r\n\r\n        const shaderStore = EngineShaderStore.GetShadersStore(this._shaderLanguage);\r\n\r\n        // Is in local store ?\r\n        if (shaderStore[shader + key + \"Shader\"]) {\r\n            callback(shaderStore[shader + key + \"Shader\"]);\r\n            return;\r\n        }\r\n\r\n        if (optionalKey && shaderStore[shader + optionalKey + \"Shader\"]) {\r\n            callback(shaderStore[shader + optionalKey + \"Shader\"]);\r\n            return;\r\n        }\r\n\r\n        let shaderUrl;\r\n\r\n        if (shader[0] === \".\" || shader[0] === \"/\" || shader.indexOf(\"http\") > -1) {\r\n            shaderUrl = shader;\r\n        } else {\r\n            shaderUrl = EngineShaderStore.GetShadersRepository(this._shaderLanguage) + shader;\r\n        }\r\n\r\n        // Vertex shader\r\n        this._engine._loadFile(shaderUrl + \".\" + key.toLowerCase() + \".fx\", callback);\r\n    }\r\n\r\n    /**\r\n     * Gets the vertex shader source code of this effect\r\n     * This is the final source code that will be compiled, after all the processing has been done (pre-processing applied, code injection/replacement, etc)\r\n     */\r\n    public get vertexSourceCode(): string {\r\n        return this._vertexSourceCodeOverride && this._fragmentSourceCodeOverride\r\n            ? this._vertexSourceCodeOverride\r\n            : this._pipelineContext?._getVertexShaderCode() ?? this._vertexSourceCode;\r\n    }\r\n\r\n    /**\r\n     * Gets the fragment shader source code of this effect\r\n     * This is the final source code that will be compiled, after all the processing has been done (pre-processing applied, code injection/replacement, etc)\r\n     */\r\n    public get fragmentSourceCode(): string {\r\n        return this._vertexSourceCodeOverride && this._fragmentSourceCodeOverride\r\n            ? this._fragmentSourceCodeOverride\r\n            : this._pipelineContext?._getFragmentShaderCode() ?? this._fragmentSourceCode;\r\n    }\r\n\r\n    /**\r\n     * Gets the vertex shader source code before migration.\r\n     * This is the source code after the include directives have been replaced by their contents but before the code is migrated, i.e. before ShaderProcess._ProcessShaderConversion is executed.\r\n     * This method is, among other things, responsible for parsing #if/#define directives as well as converting GLES2 syntax to GLES3 (in the case of WebGL).\r\n     */\r\n    public get vertexSourceCodeBeforeMigration(): string {\r\n        return this._vertexSourceCodeBeforeMigration;\r\n    }\r\n\r\n    /**\r\n     * Gets the fragment shader source code before migration.\r\n     * This is the source code after the include directives have been replaced by their contents but before the code is migrated, i.e. before ShaderProcess._ProcessShaderConversion is executed.\r\n     * This method is, among other things, responsible for parsing #if/#define directives as well as converting GLES2 syntax to GLES3 (in the case of WebGL).\r\n     */\r\n    public get fragmentSourceCodeBeforeMigration(): string {\r\n        return this._fragmentSourceCodeBeforeMigration;\r\n    }\r\n\r\n    /**\r\n     * Gets the vertex shader source code before it has been modified by any processing\r\n     */\r\n    public get rawVertexSourceCode(): string {\r\n        return this._rawVertexSourceCode;\r\n    }\r\n\r\n    /**\r\n     * Gets the fragment shader source code before it has been modified by any processing\r\n     */\r\n    public get rawFragmentSourceCode(): string {\r\n        return this._rawFragmentSourceCode;\r\n    }\r\n\r\n    /**\r\n     * Recompiles the webGL program\r\n     * @param vertexSourceCode The source code for the vertex shader.\r\n     * @param fragmentSourceCode The source code for the fragment shader.\r\n     * @param onCompiled Callback called when completed.\r\n     * @param onError Callback called on error.\r\n     * @internal\r\n     */\r\n    public _rebuildProgram(vertexSourceCode: string, fragmentSourceCode: string, onCompiled: (pipelineContext: IPipelineContext) => void, onError: (message: string) => void) {\r\n        this._isReady = false;\r\n\r\n        this._vertexSourceCodeOverride = vertexSourceCode;\r\n        this._fragmentSourceCodeOverride = fragmentSourceCode;\r\n        this.onError = (effect, error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        };\r\n        this.onCompiled = () => {\r\n            const scenes = this.getEngine().scenes;\r\n            if (scenes) {\r\n                for (let i = 0; i < scenes.length; i++) {\r\n                    scenes[i].markAllMaterialsAsDirty(Constants.MATERIAL_AllDirtyFlag);\r\n                }\r\n            }\r\n\r\n            this._pipelineContext!._handlesSpectorRebuildCallback(onCompiled);\r\n        };\r\n        this._fallbacks = null;\r\n        this._prepareEffect();\r\n    }\r\n\r\n    /**\r\n     * Prepares the effect\r\n     * @internal\r\n     */\r\n    public _prepareEffect() {\r\n        const attributesNames = this._attributesNames;\r\n        const defines = this.defines;\r\n\r\n        const previousPipelineContext = this._pipelineContext;\r\n\r\n        this._isReady = false;\r\n\r\n        try {\r\n            const engine = this._engine;\r\n\r\n            this._pipelineContext = engine.createPipelineContext(this._processingContext);\r\n            this._pipelineContext._name = this._key;\r\n\r\n            const rebuildRebind = this._rebuildProgram.bind(this);\r\n            if (this._vertexSourceCodeOverride && this._fragmentSourceCodeOverride) {\r\n                engine._preparePipelineContext(\r\n                    this._pipelineContext,\r\n                    this._vertexSourceCodeOverride,\r\n                    this._fragmentSourceCodeOverride,\r\n                    true,\r\n                    this._rawVertexSourceCode,\r\n                    this._rawFragmentSourceCode,\r\n                    rebuildRebind,\r\n                    null,\r\n                    this._transformFeedbackVaryings,\r\n                    this._key\r\n                );\r\n            } else {\r\n                engine._preparePipelineContext(\r\n                    this._pipelineContext,\r\n                    this._vertexSourceCode,\r\n                    this._fragmentSourceCode,\r\n                    false,\r\n                    this._rawVertexSourceCode,\r\n                    this._rawFragmentSourceCode,\r\n                    rebuildRebind,\r\n                    defines,\r\n                    this._transformFeedbackVaryings,\r\n                    this._key\r\n                );\r\n            }\r\n\r\n            engine._executeWhenRenderingStateIsCompiled(this._pipelineContext, () => {\r\n                this._attributes = [];\r\n                this._pipelineContext!._fillEffectInformation(\r\n                    this,\r\n                    this._uniformBuffersNames,\r\n                    this._uniformsNames,\r\n                    this._uniforms,\r\n                    this._samplerList,\r\n                    this._samplers,\r\n                    attributesNames,\r\n                    this._attributes\r\n                );\r\n\r\n                // Caches attribute locations.\r\n                if (attributesNames) {\r\n                    for (let i = 0; i < attributesNames.length; i++) {\r\n                        const name = attributesNames[i];\r\n                        this._attributeLocationByName[name] = this._attributes[i];\r\n                    }\r\n                }\r\n\r\n                engine.bindSamplers(this);\r\n\r\n                this._compilationError = \"\";\r\n                this._isReady = true;\r\n                if (this.onCompiled) {\r\n                    this.onCompiled(this);\r\n                }\r\n                this.onCompileObservable.notifyObservers(this);\r\n                this.onCompileObservable.clear();\r\n\r\n                // Unbind mesh reference in fallbacks\r\n                if (this._fallbacks) {\r\n                    this._fallbacks.unBindMesh();\r\n                }\r\n\r\n                if (previousPipelineContext) {\r\n                    this.getEngine()._deletePipelineContext(previousPipelineContext);\r\n                }\r\n            });\r\n\r\n            if (this._pipelineContext.isAsync) {\r\n                this._checkIsReady(previousPipelineContext);\r\n            }\r\n        } catch (e) {\r\n            this._processCompilationErrors(e, previousPipelineContext);\r\n        }\r\n    }\r\n\r\n    private _getShaderCodeAndErrorLine(code: Nullable<string>, error: Nullable<string>, isFragment: boolean): [Nullable<string>, Nullable<string>] {\r\n        const regexp = isFragment ? /FRAGMENT SHADER ERROR: 0:(\\d+?):/ : /VERTEX SHADER ERROR: 0:(\\d+?):/;\r\n\r\n        let errorLine = null;\r\n\r\n        if (error && code) {\r\n            const res = error.match(regexp);\r\n            if (res && res.length === 2) {\r\n                const lineNumber = parseInt(res[1]);\r\n                const lines = code.split(\"\\n\", -1);\r\n                if (lines.length >= lineNumber) {\r\n                    errorLine = `Offending line [${lineNumber}] in ${isFragment ? \"fragment\" : \"vertex\"} code: ${lines[lineNumber - 1]}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return [code, errorLine];\r\n    }\r\n\r\n    private _processCompilationErrors(e: any, previousPipelineContext: Nullable<IPipelineContext> = null) {\r\n        this._compilationError = e.message;\r\n        const attributesNames = this._attributesNames;\r\n        const fallbacks = this._fallbacks;\r\n\r\n        // Let's go through fallbacks then\r\n        Logger.Error(\"Unable to compile effect:\");\r\n        Logger.Error(\r\n            \"Uniforms: \" +\r\n                this._uniformsNames.map(function (uniform) {\r\n                    return \" \" + uniform;\r\n                })\r\n        );\r\n        Logger.Error(\r\n            \"Attributes: \" +\r\n                attributesNames.map(function (attribute) {\r\n                    return \" \" + attribute;\r\n                })\r\n        );\r\n        Logger.Error(\"Defines:\\r\\n\" + this.defines);\r\n        if (Effect.LogShaderCodeOnCompilationError) {\r\n            let lineErrorVertex = null,\r\n                lineErrorFragment = null,\r\n                code = null;\r\n            if (this._pipelineContext?._getVertexShaderCode()) {\r\n                [code, lineErrorVertex] = this._getShaderCodeAndErrorLine(this._pipelineContext._getVertexShaderCode(), this._compilationError, false);\r\n                if (code) {\r\n                    Logger.Error(\"Vertex code:\");\r\n                    Logger.Error(code);\r\n                }\r\n            }\r\n            if (this._pipelineContext?._getFragmentShaderCode()) {\r\n                [code, lineErrorFragment] = this._getShaderCodeAndErrorLine(this._pipelineContext?._getFragmentShaderCode(), this._compilationError, true);\r\n                if (code) {\r\n                    Logger.Error(\"Fragment code:\");\r\n                    Logger.Error(code);\r\n                }\r\n            }\r\n            if (lineErrorVertex) {\r\n                Logger.Error(lineErrorVertex);\r\n            }\r\n            if (lineErrorFragment) {\r\n                Logger.Error(lineErrorFragment);\r\n            }\r\n        }\r\n        Logger.Error(\"Error: \" + this._compilationError);\r\n\r\n        const notifyErrors = () => {\r\n            if (this.onError) {\r\n                this.onError(this, this._compilationError);\r\n            }\r\n            this.onErrorObservable.notifyObservers(this);\r\n        };\r\n\r\n        // In case a previous compilation was successful, we need to restore the previous pipeline context\r\n        if (previousPipelineContext) {\r\n            this._pipelineContext = previousPipelineContext;\r\n            this._isReady = true;\r\n            notifyErrors();\r\n        }\r\n\r\n        // Lets try to compile fallbacks as long as we have some.\r\n        if (fallbacks) {\r\n            this._pipelineContext = null;\r\n            if (fallbacks.hasMoreFallbacks) {\r\n                this._allFallbacksProcessed = false;\r\n                Logger.Error(\"Trying next fallback.\");\r\n                this.defines = fallbacks.reduce(this.defines, this);\r\n                this._prepareEffect();\r\n            } else {\r\n                // Sorry we did everything we can\r\n                this._allFallbacksProcessed = true;\r\n                notifyErrors();\r\n                this.onErrorObservable.clear();\r\n\r\n                // Unbind mesh reference in fallbacks\r\n                if (this._fallbacks) {\r\n                    this._fallbacks.unBindMesh();\r\n                }\r\n            }\r\n        } else {\r\n            this._allFallbacksProcessed = true;\r\n\r\n            // In case of error, without any prior successful compilation, let s notify observers\r\n            if (!previousPipelineContext) {\r\n                notifyErrors();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the effect is supported. (Must be called after compilation)\r\n     */\r\n    public get isSupported(): boolean {\r\n        return this._compilationError === \"\";\r\n    }\r\n\r\n    /**\r\n     * Binds a texture to the engine to be used as output of the shader.\r\n     * @param channel Name of the output variable.\r\n     * @param texture Texture to bind.\r\n     * @internal\r\n     */\r\n    public _bindTexture(channel: string, texture: Nullable<InternalTexture>): void {\r\n        this._engine._bindTexture(this._samplers[channel], texture, channel);\r\n    }\r\n\r\n    /**\r\n     * Sets a texture on the engine to be used in the shader.\r\n     * @param channel Name of the sampler variable.\r\n     * @param texture Texture to set.\r\n     */\r\n    public setTexture(channel: string, texture: Nullable<ThinTexture>): void {\r\n        this._engine.setTexture(this._samplers[channel], this._uniforms[channel], texture, channel);\r\n    }\r\n\r\n    /**\r\n     * Sets a depth stencil texture from a render target on the engine to be used in the shader.\r\n     * @param channel Name of the sampler variable.\r\n     * @param texture Texture to set.\r\n     */\r\n    public setDepthStencilTexture(channel: string, texture: Nullable<RenderTargetTexture>): void {\r\n        this._engine.setDepthStencilTexture(this._samplers[channel], this._uniforms[channel], texture, channel);\r\n    }\r\n\r\n    /**\r\n     * Sets an array of textures on the engine to be used in the shader.\r\n     * @param channel Name of the variable.\r\n     * @param textures Textures to set.\r\n     */\r\n    public setTextureArray(channel: string, textures: ThinTexture[]): void {\r\n        const exName = channel + \"Ex\";\r\n        if (this._samplerList.indexOf(exName + \"0\") === -1) {\r\n            const initialPos = this._samplerList.indexOf(channel);\r\n            for (let index = 1; index < textures.length; index++) {\r\n                const currentExName = exName + (index - 1).toString();\r\n                this._samplerList.splice(initialPos + index, 0, currentExName);\r\n            }\r\n\r\n            // Reset every channels\r\n            let channelIndex = 0;\r\n            for (const key of this._samplerList) {\r\n                this._samplers[key] = channelIndex;\r\n                channelIndex += 1;\r\n            }\r\n        }\r\n\r\n        this._engine.setTextureArray(this._samplers[channel], this._uniforms[channel], textures, channel);\r\n    }\r\n\r\n    /**\r\n     * Sets a texture to be the input of the specified post process. (To use the output, pass in the next post process in the pipeline)\r\n     * @param channel Name of the sampler variable.\r\n     * @param postProcess Post process to get the input texture from.\r\n     */\r\n    public setTextureFromPostProcess(channel: string, postProcess: Nullable<PostProcess>): void {\r\n        this._engine.setTextureFromPostProcess(this._samplers[channel], postProcess, channel);\r\n    }\r\n\r\n    /**\r\n     * (Warning! setTextureFromPostProcessOutput may be desired instead)\r\n     * Sets the input texture of the passed in post process to be input of this effect. (To use the output of the passed in post process use setTextureFromPostProcessOutput)\r\n     * @param channel Name of the sampler variable.\r\n     * @param postProcess Post process to get the output texture from.\r\n     */\r\n    public setTextureFromPostProcessOutput(channel: string, postProcess: Nullable<PostProcess>): void {\r\n        this._engine.setTextureFromPostProcessOutput(this._samplers[channel], postProcess, channel);\r\n    }\r\n\r\n    /**\r\n     * Binds a buffer to a uniform.\r\n     * @param buffer Buffer to bind.\r\n     * @param name Name of the uniform variable to bind to.\r\n     */\r\n    public bindUniformBuffer(buffer: DataBuffer, name: string): void {\r\n        const bufferName = this._uniformBuffersNames[name];\r\n        if (bufferName === undefined || (Effect._BaseCache[bufferName] === buffer && this._engine._features.useUBOBindingCache)) {\r\n            return;\r\n        }\r\n        Effect._BaseCache[bufferName] = buffer;\r\n        this._engine.bindUniformBufferBase(buffer, bufferName, name);\r\n    }\r\n\r\n    /**\r\n     * Binds block to a uniform.\r\n     * @param blockName Name of the block to bind.\r\n     * @param index Index to bind.\r\n     */\r\n    public bindUniformBlock(blockName: string, index: number): void {\r\n        this._engine.bindUniformBlock(this._pipelineContext!, blockName, index);\r\n    }\r\n\r\n    /**\r\n     * Sets an integer value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param value Value to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setInt: (uniformName: string, value: number) => Effect;\r\n\r\n    /**\r\n     * Sets an int2 value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First int in int2.\r\n     * @param y Second int in int2.\r\n     * @returns this effect.\r\n     */\r\n    public setInt2: (uniformName: string, x: number, y: number) => Effect;\r\n\r\n    /**\r\n     * Sets an int3 value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First int in int3.\r\n     * @param y Second int in int3.\r\n     * @param z Third int in int3.\r\n     * @returns this effect.\r\n     */\r\n    public setInt3: (uniformName: string, x: number, y: number, z: number) => Effect;\r\n\r\n    /**\r\n     * Sets an int4 value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First int in int4.\r\n     * @param y Second int in int4.\r\n     * @param z Third int in int4.\r\n     * @param w Fourth int in int4.\r\n     * @returns this effect.\r\n     */\r\n    public setInt4: (uniformName: string, x: number, y: number, z: number, w: number) => Effect;\r\n\r\n    /**\r\n     * Sets an int array on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setIntArray: (uniformName: string, array: Int32Array) => Effect;\r\n\r\n    /**\r\n     * Sets an int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setIntArray2: (uniformName: string, array: Int32Array) => Effect;\r\n\r\n    /**\r\n     * Sets an int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setIntArray3: (uniformName: string, array: Int32Array) => Effect;\r\n\r\n    /**\r\n     * Sets an int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setIntArray4: (uniformName: string, array: Int32Array) => Effect;\r\n\r\n    /**\r\n     * Sets an unsigned integer value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param value Value to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setUInt: (uniformName: string, value: number) => Effect;\r\n\r\n    /**\r\n     * Sets an unsigned int2 value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First unsigned int in uint2.\r\n     * @param y Second unsigned int in uint2.\r\n     * @returns this effect.\r\n     */\r\n    public setUInt2: (uniformName: string, x: number, y: number) => Effect;\r\n\r\n    /**\r\n     * Sets an unsigned int3 value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First unsigned int in uint3.\r\n     * @param y Second unsigned int in uint3.\r\n     * @param z Third unsigned int in uint3.\r\n     * @returns this effect.\r\n     */\r\n    public setUInt3: (uniformName: string, x: number, y: number, z: number) => Effect;\r\n\r\n    /**\r\n     * Sets an unsigned int4 value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First unsigned int in uint4.\r\n     * @param y Second unsigned int in uint4.\r\n     * @param z Third unsigned int in uint4.\r\n     * @param w Fourth unsigned int in uint4.\r\n     * @returns this effect.\r\n     */\r\n    public setUInt4: (uniformName: string, x: number, y: number, z: number, w: number) => Effect;\r\n\r\n    /**\r\n     * Sets an unsigned int array on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setUIntArray: (uniformName: string, array: Uint32Array) => Effect;\r\n\r\n    /**\r\n     * Sets an unsigned int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setUIntArray2: (uniformName: string, array: Uint32Array) => Effect;\r\n\r\n    /**\r\n     * Sets an unsigned int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setUIntArray3: (uniformName: string, array: Uint32Array) => Effect;\r\n\r\n    /**\r\n     * Sets an unsigned int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setUIntArray4: (uniformName: string, array: Uint32Array) => Effect;\r\n\r\n    /**\r\n     * Sets an float array on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setFloatArray(uniformName: string, array: FloatArray): Effect {\r\n        this._pipelineContext!.setArray(uniformName, array);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets an float array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setFloatArray2(uniformName: string, array: FloatArray): Effect {\r\n        this._pipelineContext!.setArray2(uniformName, array);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets an float array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setFloatArray3(uniformName: string, array: FloatArray): Effect {\r\n        this._pipelineContext!.setArray3(uniformName, array);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets an float array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setFloatArray4(uniformName: string, array: FloatArray): Effect {\r\n        this._pipelineContext!.setArray4(uniformName, array);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets an array on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setArray: (uniformName: string, array: number[]) => Effect;\r\n\r\n    /**\r\n     * Sets an array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setArray2: (uniformName: string, array: number[]) => Effect;\r\n\r\n    /**\r\n     * Sets an array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setArray3: (uniformName: string, array: number[]) => Effect;\r\n\r\n    /**\r\n     * Sets an array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setArray4: (uniformName: string, array: number[]) => Effect;\r\n\r\n    /**\r\n     * Sets matrices on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param matrices matrices to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setMatrices: (uniformName: string, matrices: Float32Array | Array<number>) => Effect;\r\n\r\n    /**\r\n     * Sets matrix on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param matrix matrix to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setMatrix: (uniformName: string, matrix: IMatrixLike) => Effect;\r\n\r\n    /**\r\n     * Sets a 3x3 matrix on a uniform variable. (Specified as [1,2,3,4,5,6,7,8,9] will result in [1,2,3][4,5,6][7,8,9] matrix)\r\n     * @param uniformName Name of the variable.\r\n     * @param matrix matrix to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setMatrix3x3: (uniformName: string, matrix: Float32Array | Array<number>) => Effect;\r\n\r\n    /**\r\n     * Sets a 2x2 matrix on a uniform variable. (Specified as [1,2,3,4] will result in [1,2][3,4] matrix)\r\n     * @param uniformName Name of the variable.\r\n     * @param matrix matrix to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setMatrix2x2: (uniformName: string, matrix: Float32Array | Array<number>) => Effect;\r\n\r\n    /**\r\n     * Sets a float on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param value value to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setFloat: (uniformName: string, value: number) => Effect;\r\n\r\n    /**\r\n     * Sets a boolean on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param bool value to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setBool(uniformName: string, bool: boolean): Effect {\r\n        this._pipelineContext!.setInt(uniformName, bool ? 1 : 0);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets a Vector2 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param vector2 vector2 to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setVector2: (uniformName: string, vector2: IVector2Like) => Effect;\r\n\r\n    /**\r\n     * Sets a float2 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First float in float2.\r\n     * @param y Second float in float2.\r\n     * @returns this effect.\r\n     */\r\n    public setFloat2: (uniformName: string, x: number, y: number) => Effect;\r\n\r\n    /**\r\n     * Sets a Vector3 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param vector3 Value to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setVector3: (uniformName: string, vector3: IVector3Like) => Effect;\r\n\r\n    /**\r\n     * Sets a float3 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First float in float3.\r\n     * @param y Second float in float3.\r\n     * @param z Third float in float3.\r\n     * @returns this effect.\r\n     */\r\n    public setFloat3: (uniformName: string, x: number, y: number, z: number) => Effect;\r\n\r\n    /**\r\n     * Sets a Vector4 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param vector4 Value to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setVector4: (uniformName: string, vector4: IVector4Like) => Effect;\r\n\r\n    /**\r\n     * Sets a Quaternion on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param quaternion Value to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setQuaternion: (uniformName: string, quaternion: IQuaternionLike) => Effect;\r\n\r\n    /**\r\n     * Sets a float4 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First float in float4.\r\n     * @param y Second float in float4.\r\n     * @param z Third float in float4.\r\n     * @param w Fourth float in float4.\r\n     * @returns this effect.\r\n     */\r\n    public setFloat4: (uniformName: string, x: number, y: number, z: number, w: number) => Effect;\r\n\r\n    /**\r\n     * Sets a Color3 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param color3 Value to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setColor3: (uniformName: string, color3: IColor3Like) => Effect;\r\n\r\n    /**\r\n     * Sets a Color4 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param color3 Value to be set.\r\n     * @param alpha Alpha value to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setColor4: (uniformName: string, color3: IColor3Like, alpha: number) => Effect;\r\n\r\n    /**\r\n     * Sets a Color4 on a uniform variable\r\n     * @param uniformName defines the name of the variable\r\n     * @param color4 defines the value to be set\r\n     * @returns this effect.\r\n     */\r\n    public setDirectColor4: (uniformName: string, color4: IColor4Like) => Effect;\r\n\r\n    /**\r\n     * Release all associated resources.\r\n     **/\r\n    public dispose() {\r\n        this._pipelineContext?.dispose();\r\n        this._engine._releaseEffect(this);\r\n        this._isDisposed = true;\r\n    }\r\n\r\n    /**\r\n     * This function will add a new shader to the shader store\r\n     * @param name the name of the shader\r\n     * @param pixelShader optional pixel shader content\r\n     * @param vertexShader optional vertex shader content\r\n     * @param shaderLanguage the language the shader is written in (default: GLSL)\r\n     */\r\n    public static RegisterShader(name: string, pixelShader?: string, vertexShader?: string, shaderLanguage = ShaderLanguage.GLSL) {\r\n        if (pixelShader) {\r\n            EngineShaderStore.GetShadersStore(shaderLanguage)[`${name}PixelShader`] = pixelShader;\r\n        }\r\n\r\n        if (vertexShader) {\r\n            EngineShaderStore.GetShadersStore(shaderLanguage)[`${name}VertexShader`] = vertexShader;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Store of each shader (The can be looked up using effect.key)\r\n     */\r\n    public static ShadersStore: { [key: string]: string } = EngineShaderStore.ShadersStore;\r\n    /**\r\n     * Store of each included file for a shader (The can be looked up using effect.key)\r\n     */\r\n    public static IncludesShadersStore: { [key: string]: string } = EngineShaderStore.IncludesShadersStore;\r\n\r\n    /**\r\n     * Resets the cache of effects.\r\n     */\r\n    public static ResetCache() {\r\n        Effect._BaseCache = {};\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}