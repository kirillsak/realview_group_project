{"ast":null,"code":"import { __decorate } from \"../../../tslib.es6.js\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { Vector2, Vector3, TmpVectors } from \"../../../Maths/math.vector.js\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture.js\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess.js\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline.js\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport { PassPostProcess } from \"../../../PostProcesses/passPostProcess.js\";\nimport { BlurPostProcess } from \"../../../PostProcesses/blurPostProcess.js\";\nimport { serialize } from \"../../../Misc/decorators.js\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js\";\nimport \"../../../Shaders/ssao.fragment.js\";\nimport \"../../../Shaders/ssaoCombine.fragment.js\";\n/**\n * Render pipeline to produce ssao effect\n */\nexport class SSAORenderingPipeline extends PostProcessRenderPipeline {\n  /**\n   * @constructor\n   * @param name - The rendering pipeline name\n   * @param scene - The scene linked to this pipeline\n   * @param ratio - The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, combineRatio: 1.0 }\n   * @param cameras - The array of cameras that the rendering pipeline will be attached to\n   */\n  constructor(name, scene, ratio, cameras) {\n    super(scene.getEngine(), name);\n    // Members\n    /**\n     * @ignore\n     * The PassPostProcess id in the pipeline that contains the original scene color\n     */\n    this.SSAOOriginalSceneColorEffect = \"SSAOOriginalSceneColorEffect\";\n    /**\n     * @ignore\n     * The SSAO PostProcess id in the pipeline\n     */\n    this.SSAORenderEffect = \"SSAORenderEffect\";\n    /**\n     * @ignore\n     * The horizontal blur PostProcess id in the pipeline\n     */\n    this.SSAOBlurHRenderEffect = \"SSAOBlurHRenderEffect\";\n    /**\n     * @ignore\n     * The vertical blur PostProcess id in the pipeline\n     */\n    this.SSAOBlurVRenderEffect = \"SSAOBlurVRenderEffect\";\n    /**\n     * @ignore\n     * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\n     */\n    this.SSAOCombineRenderEffect = \"SSAOCombineRenderEffect\";\n    /**\n     * The output strength of the SSAO post-process. Default value is 1.0.\n     */\n    this.totalStrength = 1.0;\n    /**\n     * The radius around the analyzed pixel used by the SSAO post-process. Default value is 0.0006\n     */\n    this.radius = 0.0001;\n    /**\n     * Related to fallOff, used to interpolate SSAO samples (first interpolate function input) based on the occlusion difference of each pixel\n     * Must not be equal to fallOff and superior to fallOff.\n     * Default value is 0.0075\n     */\n    this.area = 0.0075;\n    /**\n     * Related to area, used to interpolate SSAO samples (second interpolate function input) based on the occlusion difference of each pixel\n     * Must not be equal to area and inferior to area.\n     * Default value is 0.000001\n     */\n    this.fallOff = 0.000001;\n    /**\n     * The base color of the SSAO post-process\n     * The final result is \"base + ssao\" between [0, 1]\n     */\n    this.base = 0.5;\n    this._firstUpdate = true;\n    this._scene = scene;\n    // Set up assets\n    this._createRandomTexture();\n    const ssaoRatio = ratio.ssaoRatio || ratio;\n    const combineRatio = ratio.combineRatio || ratio;\n    this._originalColorPostProcess = new PassPostProcess(\"SSAOOriginalSceneColor\", combineRatio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false);\n    this._createSSAOPostProcess(ssaoRatio);\n    this._createBlurPostProcess(ssaoRatio);\n    this._createSSAOCombinePostProcess(combineRatio);\n    // Set up pipeline\n    this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOOriginalSceneColorEffect, () => {\n      return this._originalColorPostProcess;\n    }, true));\n    this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAORenderEffect, () => {\n      return this._ssaoPostProcess;\n    }, true));\n    this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOBlurHRenderEffect, () => {\n      return this._blurHPostProcess;\n    }, true));\n    this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOBlurVRenderEffect, () => {\n      return this._blurVPostProcess;\n    }, true));\n    this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOCombineRenderEffect, () => {\n      return this._ssaoCombinePostProcess;\n    }, true));\n    // Finish\n    scene.postProcessRenderPipelineManager.addPipeline(this);\n    if (cameras) {\n      scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\n    }\n  }\n  /**\n   * Gets active scene\n   */\n  get scene() {\n    return this._scene;\n  }\n  /**\n   * @internal\n   */\n  _attachCameras(cameras, unique) {\n    super._attachCameras(cameras, unique);\n    for (const camera of this._cameras) {\n      this._scene.enableDepthRenderer(camera).getDepthMap(); // Force depth renderer \"on\"\n    }\n  }\n  // Public Methods\n  /**\n   * Get the class name\n   * @returns \"SSAORenderingPipeline\"\n   */\n  getClassName() {\n    return \"SSAORenderingPipeline\";\n  }\n  /**\n   * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\n   * @param disableDepthRender\n   */\n  dispose(disableDepthRender = false) {\n    for (let i = 0; i < this._scene.cameras.length; i++) {\n      const camera = this._scene.cameras[i];\n      this._originalColorPostProcess.dispose(camera);\n      this._ssaoPostProcess.dispose(camera);\n      this._blurHPostProcess.dispose(camera);\n      this._blurVPostProcess.dispose(camera);\n      this._ssaoCombinePostProcess.dispose(camera);\n    }\n    this._randomTexture.dispose();\n    if (disableDepthRender) {\n      this._scene.disableDepthRenderer();\n    }\n    this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\n    super.dispose();\n  }\n  // Private Methods\n  _createBlurPostProcess(ratio) {\n    const size = 16;\n    this._blurHPostProcess = new BlurPostProcess(\"BlurH\", new Vector2(1, 0), size, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, 0);\n    this._blurVPostProcess = new BlurPostProcess(\"BlurV\", new Vector2(0, 1), size, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, 0);\n    this._blurHPostProcess.onActivateObservable.add(() => {\n      const dw = this._blurHPostProcess.width / this._scene.getEngine().getRenderWidth();\n      this._blurHPostProcess.kernel = size * dw;\n    });\n    this._blurVPostProcess.onActivateObservable.add(() => {\n      const dw = this._blurVPostProcess.height / this._scene.getEngine().getRenderHeight();\n      this._blurVPostProcess.kernel = size * dw;\n    });\n  }\n  /** @internal */\n  _rebuild() {\n    this._firstUpdate = true;\n    super._rebuild();\n  }\n  _createSSAOPostProcess(ratio) {\n    const numSamples = 16;\n    const sampleSphere = [0.5381, 0.1856, -0.4319, 0.1379, 0.2486, 0.443, 0.3371, 0.5679, -0.0057, -0.6999, -0.0451, -0.0019, 0.0689, -0.1598, -0.8547, 0.056, 0.0069, -0.1843, -0.0146, 0.1402, 0.0762, 0.01, -0.1924, -0.0344, -0.3577, -0.5301, -0.4358, -0.3169, 0.1063, 0.0158, 0.0103, -0.5869, 0.0046, -0.0897, -0.494, 0.3287, 0.7119, -0.0154, -0.0918, -0.0533, 0.0596, -0.5411, 0.0352, -0.0631, 0.546, -0.4776, 0.2847, -0.0271];\n    const samplesFactor = 1.0 / numSamples;\n    this._ssaoPostProcess = new PostProcess(\"ssao\", \"ssao\", [\"sampleSphere\", \"samplesFactor\", \"randTextureTiles\", \"totalStrength\", \"radius\", \"area\", \"fallOff\", \"base\", \"range\", \"viewport\"], [\"randomSampler\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, \"#define SAMPLES \" + numSamples + \"\\n#define SSAO\");\n    this._ssaoPostProcess.externalTextureSamplerBinding = true;\n    this._ssaoPostProcess.onApply = effect => {\n      if (this._firstUpdate) {\n        effect.setArray3(\"sampleSphere\", sampleSphere);\n        effect.setFloat(\"samplesFactor\", samplesFactor);\n        effect.setFloat(\"randTextureTiles\", 4.0);\n      }\n      effect.setFloat(\"totalStrength\", this.totalStrength);\n      effect.setFloat(\"radius\", this.radius);\n      effect.setFloat(\"area\", this.area);\n      effect.setFloat(\"fallOff\", this.fallOff);\n      effect.setFloat(\"base\", this.base);\n      effect.setTexture(\"textureSampler\", this._scene.enableDepthRenderer(this._scene.activeCamera).getDepthMap());\n      effect.setTexture(\"randomSampler\", this._randomTexture);\n    };\n  }\n  _createSSAOCombinePostProcess(ratio) {\n    this._ssaoCombinePostProcess = new PostProcess(\"ssaoCombine\", \"ssaoCombine\", [], [\"originalColor\", \"viewport\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n    this._ssaoCombinePostProcess.onApply = effect => {\n      effect.setVector4(\"viewport\", TmpVectors.Vector4[0].copyFromFloats(0, 0, 1.0, 1.0));\n      effect.setTextureFromPostProcess(\"originalColor\", this._originalColorPostProcess);\n    };\n  }\n  _createRandomTexture() {\n    const size = 512;\n    this._randomTexture = new DynamicTexture(\"SSAORandomTexture\", size, this._scene, false, Texture.TRILINEAR_SAMPLINGMODE);\n    this._randomTexture.wrapU = Texture.WRAP_ADDRESSMODE;\n    this._randomTexture.wrapV = Texture.WRAP_ADDRESSMODE;\n    const context = this._randomTexture.getContext();\n    const rand = (min, max) => {\n      return Math.random() * (max - min) + min;\n    };\n    const randVector = Vector3.Zero();\n    for (let x = 0; x < size; x++) {\n      for (let y = 0; y < size; y++) {\n        randVector.x = Math.floor(Math.max(0.0, rand(-1.0, 1.0)) * 255);\n        randVector.y = Math.floor(Math.max(0.0, rand(-1.0, 1.0)) * 255);\n        randVector.z = Math.floor(Math.max(0.0, rand(-1.0, 1.0)) * 255);\n        context.fillStyle = \"rgb(\" + randVector.x + \", \" + randVector.y + \", \" + randVector.z + \")\";\n        context.fillRect(x, y, 1, 1);\n      }\n    }\n    this._randomTexture.update(false);\n  }\n}\n__decorate([serialize()], SSAORenderingPipeline.prototype, \"totalStrength\", void 0);\n__decorate([serialize()], SSAORenderingPipeline.prototype, \"radius\", void 0);\n__decorate([serialize()], SSAORenderingPipeline.prototype, \"area\", void 0);\n__decorate([serialize()], SSAORenderingPipeline.prototype, \"fallOff\", void 0);\n__decorate([serialize()], SSAORenderingPipeline.prototype, \"base\", void 0);","map":{"version":3,"mappings":"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","names":["Vector2","Vector3","TmpVectors","Texture","DynamicTexture","PostProcess","PostProcessRenderPipeline","PostProcessRenderEffect","PassPostProcess","BlurPostProcess","serialize","SSAORenderingPipeline","constructor","name","scene","ratio","cameras","getEngine","_scene","_createRandomTexture","ssaoRatio","combineRatio","_originalColorPostProcess","BILINEAR_SAMPLINGMODE","_createSSAOPostProcess","_createBlurPostProcess","_createSSAOCombinePostProcess","addEffect","SSAOOriginalSceneColorEffect","SSAORenderEffect","_ssaoPostProcess","SSAOBlurHRenderEffect","_blurHPostProcess","SSAOBlurVRenderEffect","_blurVPostProcess","SSAOCombineRenderEffect","_ssaoCombinePostProcess","postProcessRenderPipelineManager","addPipeline","attachCamerasToRenderPipeline","_attachCameras","unique","camera","_cameras","enableDepthRenderer","getDepthMap","getClassName","dispose","disableDepthRender","i","length","_randomTexture","disableDepthRenderer","detachCamerasFromRenderPipeline","_name","size","onActivateObservable","add","dw","width","getRenderWidth","kernel","height","getRenderHeight","_rebuild","_firstUpdate","numSamples","sampleSphere","samplesFactor","externalTextureSamplerBinding","onApply","effect","setArray3","setFloat","totalStrength","radius","area","fallOff","base","setTexture","activeCamera","setVector4","Vector4","copyFromFloats","setTextureFromPostProcess","TRILINEAR_SAMPLINGMODE","wrapU","WRAP_ADDRESSMODE","wrapV","context","getContext","rand","min","max","Math","random","randVector","Zero","x","y","floor","z","fillStyle","fillRect","update","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/PostProcesses/RenderPipeline/Pipelines/ssaoRenderingPipeline.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Vector2, Vector3, TmpVectors } from \"../../../Maths/math.vector\";\r\nimport type { Camera } from \"../../../Cameras/camera\";\r\nimport type { Effect } from \"../../../Materials/effect\";\r\nimport { Texture } from \"../../../Materials/Textures/texture\";\r\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture\";\r\nimport { PostProcess } from \"../../../PostProcesses/postProcess\";\r\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\r\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect\";\r\nimport { PassPostProcess } from \"../../../PostProcesses/passPostProcess\";\r\nimport { BlurPostProcess } from \"../../../PostProcesses/blurPostProcess\";\r\nimport { Constants } from \"../../../Engines/constants\";\r\nimport { serialize } from \"../../../Misc/decorators\";\r\nimport type { Scene } from \"../../../scene\";\r\n\r\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent\";\r\n\r\nimport \"../../../Shaders/ssao.fragment\";\r\nimport \"../../../Shaders/ssaoCombine.fragment\";\r\n\r\n/**\r\n * Render pipeline to produce ssao effect\r\n */\r\nexport class SSAORenderingPipeline extends PostProcessRenderPipeline {\r\n    // Members\r\n\r\n    /**\r\n     * @ignore\r\n     * The PassPostProcess id in the pipeline that contains the original scene color\r\n     */\r\n    public SSAOOriginalSceneColorEffect: string = \"SSAOOriginalSceneColorEffect\";\r\n    /**\r\n     * @ignore\r\n     * The SSAO PostProcess id in the pipeline\r\n     */\r\n    public SSAORenderEffect: string = \"SSAORenderEffect\";\r\n    /**\r\n     * @ignore\r\n     * The horizontal blur PostProcess id in the pipeline\r\n     */\r\n    public SSAOBlurHRenderEffect: string = \"SSAOBlurHRenderEffect\";\r\n    /**\r\n     * @ignore\r\n     * The vertical blur PostProcess id in the pipeline\r\n     */\r\n    public SSAOBlurVRenderEffect: string = \"SSAOBlurVRenderEffect\";\r\n    /**\r\n     * @ignore\r\n     * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\r\n     */\r\n    public SSAOCombineRenderEffect: string = \"SSAOCombineRenderEffect\";\r\n\r\n    /**\r\n     * The output strength of the SSAO post-process. Default value is 1.0.\r\n     */\r\n    @serialize()\r\n    public totalStrength: number = 1.0;\r\n\r\n    /**\r\n     * The radius around the analyzed pixel used by the SSAO post-process. Default value is 0.0006\r\n     */\r\n    @serialize()\r\n    public radius: number = 0.0001;\r\n\r\n    /**\r\n     * Related to fallOff, used to interpolate SSAO samples (first interpolate function input) based on the occlusion difference of each pixel\r\n     * Must not be equal to fallOff and superior to fallOff.\r\n     * Default value is 0.0075\r\n     */\r\n    @serialize()\r\n    public area: number = 0.0075;\r\n\r\n    /**\r\n     * Related to area, used to interpolate SSAO samples (second interpolate function input) based on the occlusion difference of each pixel\r\n     * Must not be equal to area and inferior to area.\r\n     * Default value is 0.000001\r\n     */\r\n    @serialize()\r\n    public fallOff: number = 0.000001;\r\n\r\n    /**\r\n     * The base color of the SSAO post-process\r\n     * The final result is \"base + ssao\" between [0, 1]\r\n     */\r\n    @serialize()\r\n    public base: number = 0.5;\r\n\r\n    private _scene: Scene;\r\n    private _randomTexture: DynamicTexture;\r\n\r\n    private _originalColorPostProcess: PassPostProcess;\r\n    private _ssaoPostProcess: PostProcess;\r\n    private _blurHPostProcess: BlurPostProcess;\r\n    private _blurVPostProcess: BlurPostProcess;\r\n    private _ssaoCombinePostProcess: PostProcess;\r\n\r\n    private _firstUpdate: boolean = true;\r\n\r\n    /**\r\n     * Gets active scene\r\n     */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * @constructor\r\n     * @param name - The rendering pipeline name\r\n     * @param scene - The scene linked to this pipeline\r\n     * @param ratio - The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, combineRatio: 1.0 }\r\n     * @param cameras - The array of cameras that the rendering pipeline will be attached to\r\n     */\r\n    constructor(name: string, scene: Scene, ratio: any, cameras?: Camera[]) {\r\n        super(scene.getEngine(), name);\r\n\r\n        this._scene = scene;\r\n\r\n        // Set up assets\r\n        this._createRandomTexture();\r\n\r\n        const ssaoRatio = ratio.ssaoRatio || ratio;\r\n        const combineRatio = ratio.combineRatio || ratio;\r\n\r\n        this._originalColorPostProcess = new PassPostProcess(\"SSAOOriginalSceneColor\", combineRatio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false);\r\n        this._createSSAOPostProcess(ssaoRatio);\r\n        this._createBlurPostProcess(ssaoRatio);\r\n        this._createSSAOCombinePostProcess(combineRatio);\r\n\r\n        // Set up pipeline\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOOriginalSceneColorEffect,\r\n                () => {\r\n                    return this._originalColorPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAORenderEffect,\r\n                () => {\r\n                    return this._ssaoPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOBlurHRenderEffect,\r\n                () => {\r\n                    return this._blurHPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOBlurVRenderEffect,\r\n                () => {\r\n                    return this._blurVPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOCombineRenderEffect,\r\n                () => {\r\n                    return this._ssaoCombinePostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n\r\n        // Finish\r\n        scene.postProcessRenderPipelineManager.addPipeline(this);\r\n        if (cameras) {\r\n            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _attachCameras(cameras: any, unique: boolean): void {\r\n        super._attachCameras(cameras, unique);\r\n\r\n        for (const camera of this._cameras) {\r\n            this._scene.enableDepthRenderer(camera).getDepthMap(); // Force depth renderer \"on\"\r\n        }\r\n    }\r\n\r\n    // Public Methods\r\n\r\n    /**\r\n     * Get the class name\r\n     * @returns \"SSAORenderingPipeline\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"SSAORenderingPipeline\";\r\n    }\r\n\r\n    /**\r\n     * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\r\n     * @param disableDepthRender\r\n     */\r\n    public dispose(disableDepthRender: boolean = false): void {\r\n        for (let i = 0; i < this._scene.cameras.length; i++) {\r\n            const camera = this._scene.cameras[i];\r\n\r\n            this._originalColorPostProcess.dispose(camera);\r\n            this._ssaoPostProcess.dispose(camera);\r\n            this._blurHPostProcess.dispose(camera);\r\n            this._blurVPostProcess.dispose(camera);\r\n            this._ssaoCombinePostProcess.dispose(camera);\r\n        }\r\n\r\n        this._randomTexture.dispose();\r\n\r\n        if (disableDepthRender) {\r\n            this._scene.disableDepthRenderer();\r\n        }\r\n\r\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    // Private Methods\r\n    private _createBlurPostProcess(ratio: number): void {\r\n        const size = 16;\r\n\r\n        this._blurHPostProcess = new BlurPostProcess(\r\n            \"BlurH\",\r\n            new Vector2(1, 0),\r\n            size,\r\n            ratio,\r\n            null,\r\n            Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            Constants.TEXTURETYPE_UNSIGNED_INT\r\n        );\r\n        this._blurVPostProcess = new BlurPostProcess(\r\n            \"BlurV\",\r\n            new Vector2(0, 1),\r\n            size,\r\n            ratio,\r\n            null,\r\n            Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            Constants.TEXTURETYPE_UNSIGNED_INT\r\n        );\r\n\r\n        this._blurHPostProcess.onActivateObservable.add(() => {\r\n            const dw = this._blurHPostProcess.width / this._scene.getEngine().getRenderWidth();\r\n            this._blurHPostProcess.kernel = size * dw;\r\n        });\r\n\r\n        this._blurVPostProcess.onActivateObservable.add(() => {\r\n            const dw = this._blurVPostProcess.height / this._scene.getEngine().getRenderHeight();\r\n            this._blurVPostProcess.kernel = size * dw;\r\n        });\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild() {\r\n        this._firstUpdate = true;\r\n        super._rebuild();\r\n    }\r\n\r\n    private _createSSAOPostProcess(ratio: number): void {\r\n        const numSamples = 16;\r\n        const sampleSphere = [\r\n            0.5381, 0.1856, -0.4319, 0.1379, 0.2486, 0.443, 0.3371, 0.5679, -0.0057, -0.6999, -0.0451, -0.0019, 0.0689, -0.1598, -0.8547, 0.056, 0.0069, -0.1843, -0.0146, 0.1402,\r\n            0.0762, 0.01, -0.1924, -0.0344, -0.3577, -0.5301, -0.4358, -0.3169, 0.1063, 0.0158, 0.0103, -0.5869, 0.0046, -0.0897, -0.494, 0.3287, 0.7119, -0.0154, -0.0918, -0.0533,\r\n            0.0596, -0.5411, 0.0352, -0.0631, 0.546, -0.4776, 0.2847, -0.0271,\r\n        ];\r\n        const samplesFactor = 1.0 / numSamples;\r\n\r\n        this._ssaoPostProcess = new PostProcess(\r\n            \"ssao\",\r\n            \"ssao\",\r\n            [\"sampleSphere\", \"samplesFactor\", \"randTextureTiles\", \"totalStrength\", \"radius\", \"area\", \"fallOff\", \"base\", \"range\", \"viewport\"],\r\n            [\"randomSampler\"],\r\n            ratio,\r\n            null,\r\n            Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            \"#define SAMPLES \" + numSamples + \"\\n#define SSAO\"\r\n        );\r\n\r\n        this._ssaoPostProcess.externalTextureSamplerBinding = true;\r\n        this._ssaoPostProcess.onApply = (effect: Effect) => {\r\n            if (this._firstUpdate) {\r\n                effect.setArray3(\"sampleSphere\", sampleSphere);\r\n                effect.setFloat(\"samplesFactor\", samplesFactor);\r\n                effect.setFloat(\"randTextureTiles\", 4.0);\r\n            }\r\n\r\n            effect.setFloat(\"totalStrength\", this.totalStrength);\r\n            effect.setFloat(\"radius\", this.radius);\r\n            effect.setFloat(\"area\", this.area);\r\n            effect.setFloat(\"fallOff\", this.fallOff);\r\n            effect.setFloat(\"base\", this.base);\r\n\r\n            effect.setTexture(\"textureSampler\", this._scene.enableDepthRenderer(this._scene.activeCamera).getDepthMap());\r\n            effect.setTexture(\"randomSampler\", this._randomTexture);\r\n        };\r\n    }\r\n\r\n    private _createSSAOCombinePostProcess(ratio: number): void {\r\n        this._ssaoCombinePostProcess = new PostProcess(\r\n            \"ssaoCombine\",\r\n            \"ssaoCombine\",\r\n            [],\r\n            [\"originalColor\", \"viewport\"],\r\n            ratio,\r\n            null,\r\n            Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false\r\n        );\r\n\r\n        this._ssaoCombinePostProcess.onApply = (effect: Effect) => {\r\n            effect.setVector4(\"viewport\", TmpVectors.Vector4[0].copyFromFloats(0, 0, 1.0, 1.0));\r\n            effect.setTextureFromPostProcess(\"originalColor\", this._originalColorPostProcess);\r\n        };\r\n    }\r\n\r\n    private _createRandomTexture(): void {\r\n        const size = 512;\r\n\r\n        this._randomTexture = new DynamicTexture(\"SSAORandomTexture\", size, this._scene, false, Texture.TRILINEAR_SAMPLINGMODE);\r\n        this._randomTexture.wrapU = Texture.WRAP_ADDRESSMODE;\r\n        this._randomTexture.wrapV = Texture.WRAP_ADDRESSMODE;\r\n\r\n        const context = this._randomTexture.getContext();\r\n\r\n        const rand = (min: number, max: number) => {\r\n            return Math.random() * (max - min) + min;\r\n        };\r\n\r\n        const randVector = Vector3.Zero();\r\n\r\n        for (let x = 0; x < size; x++) {\r\n            for (let y = 0; y < size; y++) {\r\n                randVector.x = Math.floor(Math.max(0.0, rand(-1.0, 1.0)) * 255);\r\n                randVector.y = Math.floor(Math.max(0.0, rand(-1.0, 1.0)) * 255);\r\n                randVector.z = Math.floor(Math.max(0.0, rand(-1.0, 1.0)) * 255);\r\n\r\n                context.fillStyle = \"rgb(\" + randVector.x + \", \" + randVector.y + \", \" + randVector.z + \")\";\r\n                context.fillRect(x, y, 1, 1);\r\n            }\r\n        }\r\n\r\n        this._randomTexture.update(false);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}