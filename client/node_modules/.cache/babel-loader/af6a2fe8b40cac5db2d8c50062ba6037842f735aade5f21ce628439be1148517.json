{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Vector3, Matrix, TmpVectors, Quaternion } from \"../Maths/math.vector.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { VertexData } from \"../Meshes/mesh.vertexData.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { CreateDisc } from \"../Meshes/Builders/discBuilder.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { DepthSortedParticle, SolidParticle, ModelShape, SolidParticleVertex } from \"./solidParticle.js\";\nimport { BoundingInfo } from \"../Culling/boundingInfo.js\";\nimport { Axis } from \"../Maths/math.axis.js\";\nimport { SubMesh } from \"../Meshes/subMesh.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { MultiMaterial } from \"../Materials/multiMaterial.js\";\n/**\n * The SPS is a single updatable mesh. The solid particles are simply separate parts or faces fo this big mesh.\n *As it is just a mesh, the SPS has all the same properties than any other BJS mesh : not more, not less. It can be scaled, rotated, translated, enlighted, textured, moved, etc.\n\n * The SPS is also a particle system. It provides some methods to manage the particles.\n * However it is behavior agnostic. This means it has no emitter, no particle physics, no particle recycler. You have to implement your own behavior.\n *\n * Full documentation here : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/sps_intro\n */\nexport class SolidParticleSystem {\n  /**\n   * Creates a SPS (Solid Particle System) object.\n   * @param name (String) is the SPS name, this will be the underlying mesh name.\n   * @param scene (Scene) is the scene in which the SPS is added.\n   * @param options defines the options of the sps e.g.\n   * * updatable (optional boolean, default true) : if the SPS must be updatable or immutable.\n   * * isPickable (optional boolean, default false) : if the solid particles must be pickable.\n   * * enableDepthSort (optional boolean, default false) : if the solid particles must be sorted in the geometry according to their distance to the camera.\n   * * useModelMaterial (optional boolean, default false) : if the model materials must be used to create the SPS multimaterial. This enables the multimaterial supports of the SPS.\n   * * enableMultiMaterial (optional boolean, default false) : if the solid particles can be given different materials.\n   * * expandable (optional boolean, default false) : if particles can still be added after the initial SPS mesh creation.\n   * * particleIntersection (optional boolean, default false) : if the solid particle intersections must be computed.\n   * * boundingSphereOnly (optional boolean, default false) : if the particle intersection must be computed only with the bounding sphere (no bounding box computation, so faster).\n   * * bSphereRadiusFactor (optional float, default 1.0) : a number to multiply the bounding sphere radius by in order to reduce it for instance.\n   * * computeBoundingBox (optional boolean, default false): if the bounding box of the entire SPS will be computed (for occlusion detection, for example). If it is false, the bounding box will be the bounding box of the first particle.\n   * * autoFixFaceOrientation (optional boolean, default false): if the particle face orientations will be flipped for transformations that change orientation (scale (-1, 1, 1), for example)\n   * @param options.updatable\n   * @param options.isPickable\n   * @param options.enableDepthSort\n   * @param options.particleIntersection\n   * @param options.boundingSphereOnly\n   * @param options.bSphereRadiusFactor\n   * @param options.expandable\n   * @param options.useModelMaterial\n   * @param options.enableMultiMaterial\n   * @param options.computeBoundingBox\n   * @param options.autoFixFaceOrientation\n   * @example bSphereRadiusFactor = 1.0 / Math.sqrt(3.0) => the bounding sphere exactly matches a spherical mesh.\n   */\n  constructor(name, scene, options) {\n    /**\n     *  The SPS array of Solid Particle objects. Just access each particle as with any classic array.\n     *  Example : var p = SPS.particles[i];\n     */\n    this.particles = new Array();\n    /**\n     * The SPS total number of particles. Read only. Use SPS.counter instead if you need to set your own value.\n     */\n    this.nbParticles = 0;\n    /**\n     * If the particles must ever face the camera (default false). Useful for planar particles.\n     */\n    this.billboard = false;\n    /**\n     * Recompute normals when adding a shape\n     */\n    this.recomputeNormals = false;\n    /**\n     * This a counter ofr your own usage. It's not set by any SPS functions.\n     */\n    this.counter = 0;\n    /**\n     * This empty object is intended to store some SPS specific or temporary values in order to lower the Garbage Collector activity.\n     * Please read : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/optimize_sps#limit-garbage-collection\n     */\n    this.vars = {};\n    /**\n     * If the particle intersection must be computed only with the bounding sphere (no bounding box computation, so faster). (Internal use only)\n     * @internal\n     */\n    this._bSphereOnly = false;\n    /**\n     * A number to multiply the bounding sphere radius by in order to reduce it for instance. (Internal use only)\n     * @internal\n     */\n    this._bSphereRadiusFactor = 1.0;\n    this._positions = new Array();\n    this._indices = new Array();\n    this._normals = new Array();\n    this._colors = new Array();\n    this._uvs = new Array();\n    this._index = 0; // indices index\n    this._updatable = true;\n    this._pickable = false;\n    this._isVisibilityBoxLocked = false;\n    this._alwaysVisible = false;\n    this._depthSort = false;\n    this._expandable = false;\n    this._shapeCounter = 0;\n    this._copy = new SolidParticle(0, 0, 0, 0, null, 0, 0, this);\n    this._color = new Color4(0, 0, 0, 0);\n    this._computeParticleColor = true;\n    this._computeParticleTexture = true;\n    this._computeParticleRotation = true;\n    this._computeParticleVertex = false;\n    this._computeBoundingBox = false;\n    this._autoFixFaceOrientation = false;\n    this._depthSortParticles = true;\n    this._mustUnrotateFixedNormals = false;\n    this._particlesIntersect = false;\n    this._needs32Bits = false;\n    this._isNotBuilt = true;\n    this._lastParticleId = 0;\n    this._idxOfId = []; // array : key = particle.id / value = particle.idx\n    this._multimaterialEnabled = false;\n    this._useModelMaterial = false;\n    this._depthSortFunction = (p1, p2) => p2.sqDistance - p1.sqDistance;\n    this._materialSortFunction = (p1, p2) => p1.materialIndex - p2.materialIndex;\n    this._autoUpdateSubMeshes = false;\n    this._recomputeInvisibles = false;\n    this.name = name;\n    this._scene = scene || EngineStore.LastCreatedScene;\n    this._camera = scene.activeCamera;\n    this._pickable = options ? options.isPickable : false;\n    this._depthSort = options ? options.enableDepthSort : false;\n    this._multimaterialEnabled = options ? options.enableMultiMaterial : false;\n    this._useModelMaterial = options ? options.useModelMaterial : false;\n    this._multimaterialEnabled = this._useModelMaterial ? true : this._multimaterialEnabled;\n    this._expandable = options ? options.expandable : false;\n    this._particlesIntersect = options ? options.particleIntersection : false;\n    this._bSphereOnly = options ? options.boundingSphereOnly : false;\n    this._bSphereRadiusFactor = options && options.bSphereRadiusFactor ? options.bSphereRadiusFactor : 1.0;\n    this._computeBoundingBox = (options === null || options === void 0 ? void 0 : options.computeBoundingBox) ? options.computeBoundingBox : false;\n    this._autoFixFaceOrientation = (options === null || options === void 0 ? void 0 : options.autoFixFaceOrientation) ? options.autoFixFaceOrientation : false;\n    if (options && options.updatable !== undefined) {\n      this._updatable = options.updatable;\n    } else {\n      this._updatable = true;\n    }\n    if (this._pickable) {\n      this.pickedBySubMesh = [[]];\n      this.pickedParticles = this.pickedBySubMesh[0];\n    }\n    if (this._depthSort || this._multimaterialEnabled) {\n      this.depthSortedParticles = [];\n    }\n    if (this._multimaterialEnabled) {\n      this._multimaterial = new MultiMaterial(this.name + \"MultiMaterial\", this._scene);\n      this._materials = [];\n      this._materialIndexesById = {};\n    }\n    this._tmpVertex = new SolidParticleVertex();\n  }\n  /**\n   * Builds the SPS underlying mesh. Returns a standard Mesh.\n   * If no model shape was added to the SPS, the returned mesh is just a single triangular plane.\n   * @returns the created mesh\n   */\n  buildMesh() {\n    if (!this._isNotBuilt && this.mesh) {\n      return this.mesh;\n    }\n    if (this.nbParticles === 0 && !this.mesh) {\n      const triangle = CreateDisc(\"\", {\n        radius: 1,\n        tessellation: 3\n      }, this._scene);\n      this.addShape(triangle, 1);\n      triangle.dispose();\n    }\n    this._indices32 = this._needs32Bits ? new Uint32Array(this._indices) : new Uint16Array(this._indices);\n    this._positions32 = new Float32Array(this._positions);\n    this._uvs32 = new Float32Array(this._uvs);\n    this._colors32 = new Float32Array(this._colors);\n    if (!this.mesh) {\n      // in case it's already expanded\n      const mesh = new Mesh(this.name, this._scene);\n      this.mesh = mesh;\n    }\n    if (!this._updatable && this._multimaterialEnabled) {\n      this._sortParticlesByMaterial(); // this may reorder the indices32\n    }\n\n    if (this.recomputeNormals) {\n      VertexData.ComputeNormals(this._positions32, this._indices32, this._normals);\n    }\n    this._normals32 = new Float32Array(this._normals);\n    this._fixedNormal32 = new Float32Array(this._normals);\n    if (this._mustUnrotateFixedNormals) {\n      // the particles could be created already rotated in the mesh with a positionFunction\n      this._unrotateFixedNormals();\n    }\n    const vertexData = new VertexData();\n    vertexData.indices = this._depthSort ? this._indices : this._indices32;\n    vertexData.set(this._positions32, VertexBuffer.PositionKind);\n    vertexData.set(this._normals32, VertexBuffer.NormalKind);\n    if (this._uvs32.length > 0) {\n      vertexData.set(this._uvs32, VertexBuffer.UVKind);\n    }\n    if (this._colors32.length > 0) {\n      vertexData.set(this._colors32, VertexBuffer.ColorKind);\n    }\n    vertexData.applyToMesh(this.mesh, this._updatable);\n    this.mesh.isPickable = this._pickable;\n    if (this._pickable) {\n      let faceId = 0;\n      for (let p = 0; p < this.nbParticles; p++) {\n        const part = this.particles[p];\n        const lind = part._model._indicesLength;\n        for (let i = 0; i < lind; i++) {\n          const f = i % 3;\n          if (f == 0) {\n            const pickedData = {\n              idx: part.idx,\n              faceId: faceId\n            };\n            this.pickedParticles[faceId] = pickedData;\n            faceId++;\n          }\n        }\n      }\n    }\n    if (this._multimaterialEnabled) {\n      this.setMultiMaterial(this._materials);\n    }\n    if (!this._expandable) {\n      // free memory\n      if (!this._depthSort && !this._multimaterialEnabled && !this._autoFixFaceOrientation) {\n        this._indices = null;\n      }\n      this._positions = null;\n      this._normals = null;\n      this._uvs = null;\n      this._colors = null;\n      if (!this._updatable) {\n        this.particles.length = 0;\n      }\n    }\n    this._isNotBuilt = false;\n    this.recomputeNormals = false;\n    this._recomputeInvisibles = true;\n    return this.mesh;\n  }\n  /**\n   * Digests the mesh and generates as many solid particles in the system as wanted. Returns the SPS.\n   * These particles will have the same geometry than the mesh parts and will be positioned at the same localisation than the mesh original places.\n   * Thus the particles generated from `digest()` have their property `position` set yet.\n   * @param mesh ( Mesh ) is the mesh to be digested\n   * @param options {facetNb} (optional integer, default 1) is the number of mesh facets per particle, this parameter is overridden by the parameter `number` if any\n   * {delta} (optional integer, default 0) is the random extra number of facets per particle , each particle will have between `facetNb` and `facetNb + delta` facets\n   * {number} (optional positive integer) is the wanted number of particles : each particle is built with `mesh_total_facets / number` facets\n   * {storage} (optional existing array) is an array where the particles will be stored for a further use instead of being inserted in the SPS.\n   * @param options.facetNb\n   * @param options.number\n   * @param options.delta\n   * @param options.storage\n   * @returns the current SPS\n   */\n  digest(mesh, options) {\n    let size = options && options.facetNb || 1;\n    let number = options && options.number || 0;\n    let delta = options && options.delta || 0;\n    const meshPos = mesh.getVerticesData(VertexBuffer.PositionKind);\n    const meshInd = mesh.getIndices();\n    const meshUV = mesh.getVerticesData(VertexBuffer.UVKind);\n    const meshCol = mesh.getVerticesData(VertexBuffer.ColorKind);\n    const meshNor = mesh.getVerticesData(VertexBuffer.NormalKind);\n    const storage = options && options.storage ? options.storage : null;\n    let f = 0; // facet counter\n    const totalFacets = meshInd.length / 3; // a facet is a triangle, so 3 indices\n    // compute size from number\n    if (number) {\n      number = number > totalFacets ? totalFacets : number;\n      size = Math.round(totalFacets / number);\n      delta = 0;\n    } else {\n      size = size > totalFacets ? totalFacets : size;\n    }\n    const facetPos = []; // submesh positions\n    const facetNor = [];\n    const facetInd = []; // submesh indices\n    const facetUV = []; // submesh UV\n    const facetCol = []; // submesh colors\n    const barycenter = Vector3.Zero();\n    const sizeO = size;\n    while (f < totalFacets) {\n      size = sizeO + Math.floor((1 + delta) * Math.random());\n      if (f > totalFacets - size) {\n        size = totalFacets - f;\n      }\n      // reset temp arrays\n      facetPos.length = 0;\n      facetNor.length = 0;\n      facetInd.length = 0;\n      facetUV.length = 0;\n      facetCol.length = 0;\n      // iterate over \"size\" facets\n      let fi = 0;\n      for (let j = f * 3; j < (f + size) * 3; j++) {\n        facetInd.push(fi);\n        const i = meshInd[j];\n        const i3 = i * 3;\n        facetPos.push(meshPos[i3], meshPos[i3 + 1], meshPos[i3 + 2]);\n        facetNor.push(meshNor[i3], meshNor[i3 + 1], meshNor[i3 + 2]);\n        if (meshUV) {\n          const i2 = i * 2;\n          facetUV.push(meshUV[i2], meshUV[i2 + 1]);\n        }\n        if (meshCol) {\n          const i4 = i * 4;\n          facetCol.push(meshCol[i4], meshCol[i4 + 1], meshCol[i4 + 2], meshCol[i4 + 3]);\n        }\n        fi++;\n      }\n      // create a model shape for each single particle\n      let idx = this.nbParticles;\n      const shape = this._posToShape(facetPos);\n      const shapeUV = this._uvsToShapeUV(facetUV);\n      const shapeInd = facetInd.slice();\n      const shapeCol = facetCol.slice();\n      const shapeNor = facetNor.slice();\n      // compute the barycenter of the shape\n      barycenter.copyFromFloats(0, 0, 0);\n      let v;\n      for (v = 0; v < shape.length; v++) {\n        barycenter.addInPlace(shape[v]);\n      }\n      barycenter.scaleInPlace(1 / shape.length);\n      // shift the shape from its barycenter to the origin\n      // and compute the BBox required for intersection.\n      const minimum = new Vector3(Infinity, Infinity, Infinity);\n      const maximum = new Vector3(-Infinity, -Infinity, -Infinity);\n      for (v = 0; v < shape.length; v++) {\n        shape[v].subtractInPlace(barycenter);\n        minimum.minimizeInPlaceFromFloats(shape[v].x, shape[v].y, shape[v].z);\n        maximum.maximizeInPlaceFromFloats(shape[v].x, shape[v].y, shape[v].z);\n      }\n      let bInfo;\n      if (this._particlesIntersect) {\n        bInfo = new BoundingInfo(minimum, maximum);\n      }\n      let material = null;\n      if (this._useModelMaterial) {\n        material = mesh.material ? mesh.material : this._setDefaultMaterial();\n      }\n      const modelShape = new ModelShape(this._shapeCounter, shape, shapeInd, shapeNor, shapeCol, shapeUV, null, null, material);\n      // add the particle in the SPS\n      const currentPos = this._positions.length;\n      const currentInd = this._indices.length;\n      this._meshBuilder(this._index, currentInd, shape, this._positions, shapeInd, this._indices, facetUV, this._uvs, shapeCol, this._colors, shapeNor, this._normals, idx, 0, null, modelShape);\n      this._addParticle(idx, this._lastParticleId, currentPos, currentInd, modelShape, this._shapeCounter, 0, bInfo, storage);\n      // initialize the particle position\n      this.particles[this.nbParticles].position.addInPlace(barycenter);\n      if (!storage) {\n        this._index += shape.length;\n        idx++;\n        this.nbParticles++;\n        this._lastParticleId++;\n      }\n      this._shapeCounter++;\n      f += size;\n    }\n    this._isNotBuilt = true; // buildMesh() is now expected for setParticles() to work\n    return this;\n  }\n  /**\n   * Unrotate the fixed normals in case the mesh was built with pre-rotated particles, ex : use of positionFunction in addShape()\n   * @internal\n   */\n  _unrotateFixedNormals() {\n    let index = 0;\n    let idx = 0;\n    const tmpNormal = TmpVectors.Vector3[0];\n    const quaternion = TmpVectors.Quaternion[0];\n    const invertedRotMatrix = TmpVectors.Matrix[0];\n    for (let p = 0; p < this.particles.length; p++) {\n      const particle = this.particles[p];\n      const shape = particle._model._shape;\n      // computing the inverse of the rotation matrix from the quaternion\n      // is equivalent to computing the matrix of the inverse quaternion, i.e of the conjugate quaternion\n      if (particle.rotationQuaternion) {\n        particle.rotationQuaternion.conjugateToRef(quaternion);\n      } else {\n        const rotation = particle.rotation;\n        Quaternion.RotationYawPitchRollToRef(rotation.y, rotation.x, rotation.z, quaternion);\n        quaternion.conjugateInPlace();\n      }\n      quaternion.toRotationMatrix(invertedRotMatrix);\n      for (let pt = 0; pt < shape.length; pt++) {\n        idx = index + pt * 3;\n        Vector3.TransformNormalFromFloatsToRef(this._normals32[idx], this._normals32[idx + 1], this._normals32[idx + 2], invertedRotMatrix, tmpNormal);\n        tmpNormal.toArray(this._fixedNormal32, idx);\n      }\n      index = idx + 3;\n    }\n  }\n  /**\n   * Resets the temporary working copy particle\n   * @internal\n   */\n  _resetCopy() {\n    const copy = this._copy;\n    copy.position.setAll(0);\n    copy.rotation.setAll(0);\n    copy.rotationQuaternion = null;\n    copy.scaling.setAll(1);\n    copy.uvs.copyFromFloats(0.0, 0.0, 1.0, 1.0);\n    copy.color = null;\n    copy.translateFromPivot = false;\n    copy.shapeId = 0;\n    copy.materialIndex = null;\n  }\n  /**\n   * Inserts the shape model geometry in the global SPS mesh by updating the positions, indices, normals, colors, uvs arrays\n   * @param p the current index in the positions array to be updated\n   * @param ind the current index in the indices array\n   * @param shape a Vector3 array, the shape geometry\n   * @param positions the positions array to be updated\n   * @param meshInd the shape indices array\n   * @param indices the indices array to be updated\n   * @param meshUV the shape uv array\n   * @param uvs the uv array to be updated\n   * @param meshCol the shape color array\n   * @param colors the color array to be updated\n   * @param meshNor the shape normals array\n   * @param normals the normals array to be updated\n   * @param idx the particle index\n   * @param idxInShape the particle index in its shape\n   * @param options the addShape() method  passed options\n   * @param model\n   * @model the particle model\n   * @internal\n   */\n  _meshBuilder(p, ind, shape, positions, meshInd, indices, meshUV, uvs, meshCol, colors, meshNor, normals, idx, idxInShape, options, model) {\n    let i;\n    let u = 0;\n    let c = 0;\n    let n = 0;\n    this._resetCopy();\n    const copy = this._copy;\n    const storeApart = options && options.storage ? true : false;\n    copy.idx = idx;\n    copy.idxInShape = idxInShape;\n    copy.shapeId = model.shapeId;\n    if (this._useModelMaterial) {\n      const materialId = model._material.uniqueId;\n      const materialIndexesById = this._materialIndexesById;\n      if (!Object.prototype.hasOwnProperty.call(materialIndexesById, materialId)) {\n        materialIndexesById[materialId] = this._materials.length;\n        this._materials.push(model._material);\n      }\n      const matIdx = materialIndexesById[materialId];\n      copy.materialIndex = matIdx;\n    }\n    if (options && options.positionFunction) {\n      // call to custom positionFunction\n      options.positionFunction(copy, idx, idxInShape);\n      this._mustUnrotateFixedNormals = true;\n    }\n    // in case the particle geometry must NOT be inserted in the SPS mesh geometry\n    if (storeApart) {\n      return copy;\n    }\n    const rotMatrix = TmpVectors.Matrix[0];\n    const tmpVertex = this._tmpVertex;\n    const tmpVector = tmpVertex.position;\n    const tmpColor = tmpVertex.color;\n    const tmpUV = tmpVertex.uv;\n    const tmpRotated = TmpVectors.Vector3[1];\n    const pivotBackTranslation = TmpVectors.Vector3[2];\n    const scaledPivot = TmpVectors.Vector3[3];\n    Matrix.IdentityToRef(rotMatrix);\n    copy.getRotationMatrix(rotMatrix);\n    copy.pivot.multiplyToRef(copy.scaling, scaledPivot);\n    if (copy.translateFromPivot) {\n      pivotBackTranslation.setAll(0.0);\n    } else {\n      pivotBackTranslation.copyFrom(scaledPivot);\n    }\n    const someVertexFunction = options && options.vertexFunction;\n    for (i = 0; i < shape.length; i++) {\n      tmpVector.copyFrom(shape[i]);\n      if (copy.color) {\n        tmpColor.copyFrom(copy.color);\n      }\n      if (meshUV) {\n        tmpUV.copyFromFloats(meshUV[u], meshUV[u + 1]);\n      }\n      if (someVertexFunction) {\n        options.vertexFunction(copy, tmpVertex, i);\n      }\n      tmpVector.multiplyInPlace(copy.scaling).subtractInPlace(scaledPivot);\n      Vector3.TransformCoordinatesToRef(tmpVector, rotMatrix, tmpRotated);\n      tmpRotated.addInPlace(pivotBackTranslation).addInPlace(copy.position);\n      positions.push(tmpRotated.x, tmpRotated.y, tmpRotated.z);\n      if (meshUV) {\n        const copyUvs = copy.uvs;\n        uvs.push((copyUvs.z - copyUvs.x) * tmpUV.x + copyUvs.x, (copyUvs.w - copyUvs.y) * tmpUV.y + copyUvs.y);\n        u += 2;\n      }\n      if (copy.color) {\n        this._color.copyFrom(tmpColor);\n      } else {\n        const color = this._color;\n        if (meshCol && meshCol[c] !== undefined) {\n          color.r = meshCol[c];\n          color.g = meshCol[c + 1];\n          color.b = meshCol[c + 2];\n          color.a = meshCol[c + 3];\n        } else {\n          color.r = 1.0;\n          color.g = 1.0;\n          color.b = 1.0;\n          color.a = 1.0;\n        }\n      }\n      colors.push(this._color.r, this._color.g, this._color.b, this._color.a);\n      c += 4;\n      if (!this.recomputeNormals && meshNor) {\n        Vector3.TransformNormalFromFloatsToRef(meshNor[n], meshNor[n + 1], meshNor[n + 2], rotMatrix, tmpVector);\n        normals.push(tmpVector.x, tmpVector.y, tmpVector.z);\n        n += 3;\n      }\n    }\n    for (i = 0; i < meshInd.length; i++) {\n      const current_ind = p + meshInd[i];\n      indices.push(current_ind);\n      if (current_ind > 65535) {\n        this._needs32Bits = true;\n      }\n    }\n    if (this._depthSort || this._multimaterialEnabled) {\n      const matIndex = copy.materialIndex !== null ? copy.materialIndex : 0;\n      this.depthSortedParticles.push(new DepthSortedParticle(idx, ind, meshInd.length, matIndex));\n    }\n    return copy;\n  }\n  /**\n   * Returns a shape Vector3 array from positions float array\n   * @param positions float array\n   * @returns a vector3 array\n   * @internal\n   */\n  _posToShape(positions) {\n    const shape = [];\n    for (let i = 0; i < positions.length; i += 3) {\n      shape.push(Vector3.FromArray(positions, i));\n    }\n    return shape;\n  }\n  /**\n   * Returns a shapeUV array from a float uvs (array deep copy)\n   * @param uvs as a float array\n   * @returns a shapeUV array\n   * @internal\n   */\n  _uvsToShapeUV(uvs) {\n    const shapeUV = [];\n    if (uvs) {\n      for (let i = 0; i < uvs.length; i++) {\n        shapeUV.push(uvs[i]);\n      }\n    }\n    return shapeUV;\n  }\n  /**\n   * Adds a new particle object in the particles array\n   * @param idx particle index in particles array\n   * @param id particle id\n   * @param idxpos positionIndex : the starting index of the particle vertices in the SPS \"positions\" array\n   * @param idxind indiceIndex : he starting index of the particle indices in the SPS \"indices\" array\n   * @param model particle ModelShape object\n   * @param shapeId model shape identifier\n   * @param idxInShape index of the particle in the current model\n   * @param bInfo model bounding info object\n   * @param storage target storage array, if any\n   * @internal\n   */\n  _addParticle(idx, id, idxpos, idxind, model, shapeId, idxInShape, bInfo = null, storage = null) {\n    const sp = new SolidParticle(idx, id, idxpos, idxind, model, shapeId, idxInShape, this, bInfo);\n    const target = storage ? storage : this.particles;\n    target.push(sp);\n    return sp;\n  }\n  /**\n   * Adds some particles to the SPS from the model shape. Returns the shape id.\n   * Please read the doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/immutable_sps\n   * @param mesh is any Mesh object that will be used as a model for the solid particles.\n   * @param nb (positive integer) the number of particles to be created from this model\n   * @param options {positionFunction} is an optional javascript function to called for each particle on SPS creation.\n   * {vertexFunction} is an optional javascript function to called for each vertex of each particle on SPS creation\n   * {storage} (optional existing array) is an array where the particles will be stored for a further use instead of being inserted in the SPS.\n   * @param options.positionFunction\n   * @param options.vertexFunction\n   * @param options.storage\n   * @returns the number of shapes in the system\n   */\n  addShape(mesh, nb, options) {\n    const meshPos = mesh.getVerticesData(VertexBuffer.PositionKind);\n    const meshInd = mesh.getIndices();\n    const meshUV = mesh.getVerticesData(VertexBuffer.UVKind);\n    const meshCol = mesh.getVerticesData(VertexBuffer.ColorKind);\n    const meshNor = mesh.getVerticesData(VertexBuffer.NormalKind);\n    this.recomputeNormals = meshNor ? false : true;\n    const indices = Array.from(meshInd);\n    const shapeNormals = Array.from(meshNor);\n    const shapeColors = meshCol ? Array.from(meshCol) : [];\n    const storage = options && options.storage ? options.storage : null;\n    let bbInfo = null;\n    if (this._particlesIntersect) {\n      bbInfo = mesh.getBoundingInfo();\n    }\n    const shape = this._posToShape(meshPos);\n    const shapeUV = this._uvsToShapeUV(meshUV);\n    const posfunc = options ? options.positionFunction : null;\n    const vtxfunc = options ? options.vertexFunction : null;\n    let material = null;\n    if (this._useModelMaterial) {\n      material = mesh.material ? mesh.material : this._setDefaultMaterial();\n    }\n    const modelShape = new ModelShape(this._shapeCounter, shape, indices, shapeNormals, shapeColors, shapeUV, posfunc, vtxfunc, material);\n    // particles\n    for (let i = 0; i < nb; i++) {\n      this._insertNewParticle(this.nbParticles, i, modelShape, shape, meshInd, meshUV, meshCol, meshNor, bbInfo, storage, options);\n    }\n    this._shapeCounter++;\n    this._isNotBuilt = true; // buildMesh() call is now expected for setParticles() to work\n    return this._shapeCounter - 1;\n  }\n  /**\n   * Rebuilds a particle back to its just built status : if needed, recomputes the custom positions and vertices\n   * @internal\n   */\n  _rebuildParticle(particle, reset = false) {\n    this._resetCopy();\n    const copy = this._copy;\n    if (particle._model._positionFunction) {\n      // recall to stored custom positionFunction\n      particle._model._positionFunction(copy, particle.idx, particle.idxInShape);\n    }\n    const rotMatrix = TmpVectors.Matrix[0];\n    const tmpVertex = TmpVectors.Vector3[0];\n    const tmpRotated = TmpVectors.Vector3[1];\n    const pivotBackTranslation = TmpVectors.Vector3[2];\n    const scaledPivot = TmpVectors.Vector3[3];\n    copy.getRotationMatrix(rotMatrix);\n    particle.pivot.multiplyToRef(particle.scaling, scaledPivot);\n    if (copy.translateFromPivot) {\n      pivotBackTranslation.copyFromFloats(0.0, 0.0, 0.0);\n    } else {\n      pivotBackTranslation.copyFrom(scaledPivot);\n    }\n    const shape = particle._model._shape;\n    for (let pt = 0; pt < shape.length; pt++) {\n      tmpVertex.copyFrom(shape[pt]);\n      if (particle._model._vertexFunction) {\n        particle._model._vertexFunction(copy, tmpVertex, pt); // recall to stored vertexFunction\n      }\n\n      tmpVertex.multiplyInPlace(copy.scaling).subtractInPlace(scaledPivot);\n      Vector3.TransformCoordinatesToRef(tmpVertex, rotMatrix, tmpRotated);\n      tmpRotated.addInPlace(pivotBackTranslation).addInPlace(copy.position).toArray(this._positions32, particle._pos + pt * 3);\n    }\n    if (reset) {\n      particle.position.setAll(0.0);\n      particle.rotation.setAll(0.0);\n      particle.rotationQuaternion = null;\n      particle.scaling.setAll(1.0);\n      particle.uvs.setAll(0.0);\n      particle.pivot.setAll(0.0);\n      particle.translateFromPivot = false;\n      particle.parentId = null;\n    }\n  }\n  /**\n   * Rebuilds the whole mesh and updates the VBO : custom positions and vertices are recomputed if needed.\n   * @param reset boolean, default false : if the particles must be reset at position and rotation zero, scaling 1, color white, initial UVs and not parented.\n   * @returns the SPS.\n   */\n  rebuildMesh(reset = false) {\n    for (let p = 0; p < this.particles.length; p++) {\n      this._rebuildParticle(this.particles[p], reset);\n    }\n    this.mesh.updateVerticesData(VertexBuffer.PositionKind, this._positions32, false, false);\n    return this;\n  }\n  /** Removes the particles from the start-th to the end-th included from an expandable SPS (required).\n   *  Returns an array with the removed particles.\n   *  If the number of particles to remove is lower than zero or greater than the global remaining particle number, then an empty array is returned.\n   *  The SPS can't be empty so at least one particle needs to remain in place.\n   *  Under the hood, the VertexData array, so the VBO buffer, is recreated each call.\n   * @param start index of the first particle to remove\n   * @param end index of the last particle to remove (included)\n   * @returns an array populated with the removed particles\n   */\n  removeParticles(start, end) {\n    const nb = end - start + 1;\n    if (!this._expandable || nb <= 0 || nb >= this.nbParticles || !this._updatable) {\n      return [];\n    }\n    const particles = this.particles;\n    const currentNb = this.nbParticles;\n    if (end < currentNb - 1) {\n      // update the particle indexes in the positions array in case they're remaining particles after the last removed\n      const firstRemaining = end + 1;\n      const shiftPos = particles[firstRemaining]._pos - particles[start]._pos;\n      const shifInd = particles[firstRemaining]._ind - particles[start]._ind;\n      for (let i = firstRemaining; i < currentNb; i++) {\n        const part = particles[i];\n        part._pos -= shiftPos;\n        part._ind -= shifInd;\n      }\n    }\n    const removed = particles.splice(start, nb);\n    this._positions.length = 0;\n    this._indices.length = 0;\n    this._colors.length = 0;\n    this._uvs.length = 0;\n    this._normals.length = 0;\n    this._index = 0;\n    this._idxOfId.length = 0;\n    if (this._depthSort || this._multimaterialEnabled) {\n      this.depthSortedParticles = [];\n    }\n    let ind = 0;\n    const particlesLength = particles.length;\n    for (let p = 0; p < particlesLength; p++) {\n      const particle = particles[p];\n      const model = particle._model;\n      const shape = model._shape;\n      const modelIndices = model._indices;\n      const modelNormals = model._normals;\n      const modelColors = model._shapeColors;\n      const modelUVs = model._shapeUV;\n      particle.idx = p;\n      this._idxOfId[particle.id] = p;\n      this._meshBuilder(this._index, ind, shape, this._positions, modelIndices, this._indices, modelUVs, this._uvs, modelColors, this._colors, modelNormals, this._normals, particle.idx, particle.idxInShape, null, model);\n      this._index += shape.length;\n      ind += modelIndices.length;\n    }\n    this.nbParticles -= nb;\n    this._isNotBuilt = true; // buildMesh() call is now expected for setParticles() to work\n    return removed;\n  }\n  /**\n   * Inserts some pre-created particles in the solid particle system so that they can be managed by setParticles().\n   * @param solidParticleArray an array populated with Solid Particles objects\n   * @returns the SPS\n   */\n  insertParticlesFromArray(solidParticleArray) {\n    if (!this._expandable) {\n      return this;\n    }\n    let idxInShape = 0;\n    let currentShapeId = solidParticleArray[0].shapeId;\n    const nb = solidParticleArray.length;\n    for (let i = 0; i < nb; i++) {\n      const sp = solidParticleArray[i];\n      const model = sp._model;\n      const shape = model._shape;\n      const meshInd = model._indices;\n      const meshUV = model._shapeUV;\n      const meshCol = model._shapeColors;\n      const meshNor = model._normals;\n      const noNor = meshNor ? false : true;\n      this.recomputeNormals = noNor || this.recomputeNormals;\n      const bbInfo = sp.getBoundingInfo();\n      const newPart = this._insertNewParticle(this.nbParticles, idxInShape, model, shape, meshInd, meshUV, meshCol, meshNor, bbInfo, null, null);\n      sp.copyToRef(newPart);\n      idxInShape++;\n      if (currentShapeId != sp.shapeId) {\n        currentShapeId = sp.shapeId;\n        idxInShape = 0;\n      }\n    }\n    this._isNotBuilt = true; // buildMesh() call is now expected for setParticles() to work\n    return this;\n  }\n  /**\n   * Creates a new particle and modifies the SPS mesh geometry :\n   * - calls _meshBuilder() to increase the SPS mesh geometry step by step\n   * - calls _addParticle() to populate the particle array\n   * factorized code from addShape() and insertParticlesFromArray()\n   * @param idx particle index in the particles array\n   * @param i particle index in its shape\n   * @param modelShape particle ModelShape object\n   * @param shape shape vertex array\n   * @param meshInd shape indices array\n   * @param meshUV shape uv array\n   * @param meshCol shape color array\n   * @param meshNor shape normals array\n   * @param bbInfo shape bounding info\n   * @param storage target particle storage\n   * @param options\n   * @options addShape() passed options\n   * @internal\n   */\n  _insertNewParticle(idx, i, modelShape, shape, meshInd, meshUV, meshCol, meshNor, bbInfo, storage, options) {\n    const currentPos = this._positions.length;\n    const currentInd = this._indices.length;\n    const currentCopy = this._meshBuilder(this._index, currentInd, shape, this._positions, meshInd, this._indices, meshUV, this._uvs, meshCol, this._colors, meshNor, this._normals, idx, i, options, modelShape);\n    let sp = null;\n    if (this._updatable) {\n      sp = this._addParticle(this.nbParticles, this._lastParticleId, currentPos, currentInd, modelShape, this._shapeCounter, i, bbInfo, storage);\n      sp.position.copyFrom(currentCopy.position);\n      sp.rotation.copyFrom(currentCopy.rotation);\n      if (currentCopy.rotationQuaternion) {\n        if (sp.rotationQuaternion) {\n          sp.rotationQuaternion.copyFrom(currentCopy.rotationQuaternion);\n        } else {\n          sp.rotationQuaternion = currentCopy.rotationQuaternion.clone();\n        }\n      }\n      if (currentCopy.color) {\n        if (sp.color) {\n          sp.color.copyFrom(currentCopy.color);\n        } else {\n          sp.color = currentCopy.color.clone();\n        }\n      }\n      sp.scaling.copyFrom(currentCopy.scaling);\n      sp.uvs.copyFrom(currentCopy.uvs);\n      if (currentCopy.materialIndex !== null) {\n        sp.materialIndex = currentCopy.materialIndex;\n      }\n      if (this.expandable) {\n        this._idxOfId[sp.id] = sp.idx;\n      }\n    }\n    if (!storage) {\n      this._index += shape.length;\n      this.nbParticles++;\n      this._lastParticleId++;\n    }\n    return sp;\n  }\n  /**\n   *  Sets all the particles : this method actually really updates the mesh according to the particle positions, rotations, colors, textures, etc.\n   *  This method calls `updateParticle()` for each particle of the SPS.\n   *  For an animated SPS, it is usually called within the render loop.\n   * This methods does nothing if called on a non updatable or not yet built SPS. Example : buildMesh() not called after having added or removed particles from an expandable SPS.\n   * @param start The particle index in the particle array where to start to compute the particle property values _(default 0)_\n   * @param end The particle index in the particle array where to stop to compute the particle property values _(default nbParticle - 1)_\n   * @param update If the mesh must be finally updated on this call after all the particle computations _(default true)_\n   * @returns the SPS.\n   */\n  setParticles(start = 0, end = this.nbParticles - 1, update = true) {\n    if (!this._updatable || this._isNotBuilt) {\n      return this;\n    }\n    // custom beforeUpdate\n    this.beforeUpdateParticles(start, end, update);\n    const rotMatrix = TmpVectors.Matrix[0];\n    const invertedMatrix = TmpVectors.Matrix[1];\n    const mesh = this.mesh;\n    const colors32 = this._colors32;\n    const positions32 = this._positions32;\n    const normals32 = this._normals32;\n    const uvs32 = this._uvs32;\n    const indices32 = this._indices32;\n    const indices = this._indices;\n    const fixedNormal32 = this._fixedNormal32;\n    const depthSortParticles = this._depthSort && this._depthSortParticles;\n    const tempVectors = TmpVectors.Vector3;\n    const camAxisX = tempVectors[5].copyFromFloats(1.0, 0.0, 0.0);\n    const camAxisY = tempVectors[6].copyFromFloats(0.0, 1.0, 0.0);\n    const camAxisZ = tempVectors[7].copyFromFloats(0.0, 0.0, 1.0);\n    const minimum = tempVectors[8].setAll(Number.MAX_VALUE);\n    const maximum = tempVectors[9].setAll(-Number.MAX_VALUE);\n    const camInvertedPosition = tempVectors[10].setAll(0);\n    const tmpVertex = this._tmpVertex;\n    const tmpVector = tmpVertex.position;\n    const tmpColor = tmpVertex.color;\n    const tmpUV = tmpVertex.uv;\n    // cases when the World Matrix is to be computed first\n    if (this.billboard || this._depthSort) {\n      this.mesh.computeWorldMatrix(true);\n      this.mesh._worldMatrix.invertToRef(invertedMatrix);\n    }\n    // if the particles will always face the camera\n    if (this.billboard) {\n      // compute the camera position and un-rotate it by the current mesh rotation\n      const tmpVector0 = tempVectors[0];\n      this._camera.getDirectionToRef(Axis.Z, tmpVector0);\n      Vector3.TransformNormalToRef(tmpVector0, invertedMatrix, camAxisZ);\n      camAxisZ.normalize();\n      // same for camera up vector extracted from the cam view matrix\n      const view = this._camera.getViewMatrix(true);\n      Vector3.TransformNormalFromFloatsToRef(view.m[1], view.m[5], view.m[9], invertedMatrix, camAxisY);\n      Vector3.CrossToRef(camAxisY, camAxisZ, camAxisX);\n      camAxisY.normalize();\n      camAxisX.normalize();\n    }\n    // if depthSort, compute the camera global position in the mesh local system\n    if (this._depthSort) {\n      Vector3.TransformCoordinatesToRef(this._camera.globalPosition, invertedMatrix, camInvertedPosition); // then un-rotate the camera\n    }\n\n    Matrix.IdentityToRef(rotMatrix);\n    let idx = 0; // current position index in the global array positions32\n    let index = 0; // position start index in the global array positions32 of the current particle\n    let colidx = 0; // current color index in the global array colors32\n    let colorIndex = 0; // color start index in the global array colors32 of the current particle\n    let uvidx = 0; // current uv index in the global array uvs32\n    let uvIndex = 0; // uv start index in the global array uvs32 of the current particle\n    let pt = 0; // current index in the particle model shape\n    if (this.mesh.isFacetDataEnabled) {\n      this._computeBoundingBox = true;\n    }\n    end = end >= this.nbParticles ? this.nbParticles - 1 : end;\n    if (this._computeBoundingBox) {\n      if (start != 0 || end != this.nbParticles - 1) {\n        // only some particles are updated, then use the current existing BBox basis. Note : it can only increase.\n        const boundingInfo = this.mesh.getBoundingInfo();\n        if (boundingInfo) {\n          minimum.copyFrom(boundingInfo.minimum);\n          maximum.copyFrom(boundingInfo.maximum);\n        }\n      }\n    }\n    // particle loop\n    index = this.particles[start]._pos;\n    const vpos = index / 3 | 0;\n    colorIndex = vpos * 4;\n    uvIndex = vpos * 2;\n    for (let p = start; p <= end; p++) {\n      const particle = this.particles[p];\n      // call to custom user function to update the particle properties\n      this.updateParticle(particle);\n      const shape = particle._model._shape;\n      const shapeUV = particle._model._shapeUV;\n      const particleRotationMatrix = particle._rotationMatrix;\n      const particlePosition = particle.position;\n      const particleRotation = particle.rotation;\n      const particleScaling = particle.scaling;\n      const particleGlobalPosition = particle._globalPosition;\n      // camera-particle distance for depth sorting\n      if (depthSortParticles) {\n        const dsp = this.depthSortedParticles[p];\n        dsp.idx = particle.idx;\n        dsp.ind = particle._ind;\n        dsp.indicesLength = particle._model._indicesLength;\n        dsp.sqDistance = Vector3.DistanceSquared(particle.position, camInvertedPosition);\n      }\n      // skip the computations for inactive or already invisible particles\n      if (!particle.alive || particle._stillInvisible && !particle.isVisible && !this._recomputeInvisibles) {\n        // increment indexes for the next particle\n        pt = shape.length;\n        index += pt * 3;\n        colorIndex += pt * 4;\n        uvIndex += pt * 2;\n        continue;\n      }\n      if (particle.isVisible) {\n        particle._stillInvisible = false; // un-mark permanent invisibility\n        const scaledPivot = tempVectors[12];\n        particle.pivot.multiplyToRef(particleScaling, scaledPivot);\n        // particle rotation matrix\n        if (this.billboard) {\n          particleRotation.x = 0.0;\n          particleRotation.y = 0.0;\n        }\n        if (this._computeParticleRotation || this.billboard) {\n          particle.getRotationMatrix(rotMatrix);\n        }\n        const particleHasParent = particle.parentId !== null;\n        if (particleHasParent) {\n          const parent = this.getParticleById(particle.parentId);\n          if (parent) {\n            const parentRotationMatrix = parent._rotationMatrix;\n            const parentGlobalPosition = parent._globalPosition;\n            const rotatedY = particlePosition.x * parentRotationMatrix[1] + particlePosition.y * parentRotationMatrix[4] + particlePosition.z * parentRotationMatrix[7];\n            const rotatedX = particlePosition.x * parentRotationMatrix[0] + particlePosition.y * parentRotationMatrix[3] + particlePosition.z * parentRotationMatrix[6];\n            const rotatedZ = particlePosition.x * parentRotationMatrix[2] + particlePosition.y * parentRotationMatrix[5] + particlePosition.z * parentRotationMatrix[8];\n            particleGlobalPosition.x = parentGlobalPosition.x + rotatedX;\n            particleGlobalPosition.y = parentGlobalPosition.y + rotatedY;\n            particleGlobalPosition.z = parentGlobalPosition.z + rotatedZ;\n            if (this._computeParticleRotation || this.billboard) {\n              const rotMatrixValues = rotMatrix.m;\n              particleRotationMatrix[0] = rotMatrixValues[0] * parentRotationMatrix[0] + rotMatrixValues[1] * parentRotationMatrix[3] + rotMatrixValues[2] * parentRotationMatrix[6];\n              particleRotationMatrix[1] = rotMatrixValues[0] * parentRotationMatrix[1] + rotMatrixValues[1] * parentRotationMatrix[4] + rotMatrixValues[2] * parentRotationMatrix[7];\n              particleRotationMatrix[2] = rotMatrixValues[0] * parentRotationMatrix[2] + rotMatrixValues[1] * parentRotationMatrix[5] + rotMatrixValues[2] * parentRotationMatrix[8];\n              particleRotationMatrix[3] = rotMatrixValues[4] * parentRotationMatrix[0] + rotMatrixValues[5] * parentRotationMatrix[3] + rotMatrixValues[6] * parentRotationMatrix[6];\n              particleRotationMatrix[4] = rotMatrixValues[4] * parentRotationMatrix[1] + rotMatrixValues[5] * parentRotationMatrix[4] + rotMatrixValues[6] * parentRotationMatrix[7];\n              particleRotationMatrix[5] = rotMatrixValues[4] * parentRotationMatrix[2] + rotMatrixValues[5] * parentRotationMatrix[5] + rotMatrixValues[6] * parentRotationMatrix[8];\n              particleRotationMatrix[6] = rotMatrixValues[8] * parentRotationMatrix[0] + rotMatrixValues[9] * parentRotationMatrix[3] + rotMatrixValues[10] * parentRotationMatrix[6];\n              particleRotationMatrix[7] = rotMatrixValues[8] * parentRotationMatrix[1] + rotMatrixValues[9] * parentRotationMatrix[4] + rotMatrixValues[10] * parentRotationMatrix[7];\n              particleRotationMatrix[8] = rotMatrixValues[8] * parentRotationMatrix[2] + rotMatrixValues[9] * parentRotationMatrix[5] + rotMatrixValues[10] * parentRotationMatrix[8];\n            }\n          } else {\n            // in case the parent were removed at some moment\n            particle.parentId = null;\n          }\n        } else {\n          particleGlobalPosition.x = particlePosition.x;\n          particleGlobalPosition.y = particlePosition.y;\n          particleGlobalPosition.z = particlePosition.z;\n          if (this._computeParticleRotation || this.billboard) {\n            const rotMatrixValues = rotMatrix.m;\n            particleRotationMatrix[0] = rotMatrixValues[0];\n            particleRotationMatrix[1] = rotMatrixValues[1];\n            particleRotationMatrix[2] = rotMatrixValues[2];\n            particleRotationMatrix[3] = rotMatrixValues[4];\n            particleRotationMatrix[4] = rotMatrixValues[5];\n            particleRotationMatrix[5] = rotMatrixValues[6];\n            particleRotationMatrix[6] = rotMatrixValues[8];\n            particleRotationMatrix[7] = rotMatrixValues[9];\n            particleRotationMatrix[8] = rotMatrixValues[10];\n          }\n        }\n        const pivotBackTranslation = tempVectors[11];\n        if (particle.translateFromPivot) {\n          pivotBackTranslation.setAll(0.0);\n        } else {\n          pivotBackTranslation.copyFrom(scaledPivot);\n        }\n        // particle vertex loop\n        for (pt = 0; pt < shape.length; pt++) {\n          idx = index + pt * 3;\n          colidx = colorIndex + pt * 4;\n          uvidx = uvIndex + pt * 2;\n          const iu = 2 * pt;\n          const iv = iu + 1;\n          tmpVector.copyFrom(shape[pt]);\n          if (this._computeParticleColor && particle.color) {\n            tmpColor.copyFrom(particle.color);\n          }\n          if (this._computeParticleTexture) {\n            tmpUV.copyFromFloats(shapeUV[iu], shapeUV[iv]);\n          }\n          if (this._computeParticleVertex) {\n            this.updateParticleVertex(particle, tmpVertex, pt);\n          }\n          // positions\n          const vertexX = tmpVector.x * particleScaling.x - scaledPivot.x;\n          const vertexY = tmpVector.y * particleScaling.y - scaledPivot.y;\n          const vertexZ = tmpVector.z * particleScaling.z - scaledPivot.z;\n          let rotatedX = vertexX * particleRotationMatrix[0] + vertexY * particleRotationMatrix[3] + vertexZ * particleRotationMatrix[6];\n          let rotatedY = vertexX * particleRotationMatrix[1] + vertexY * particleRotationMatrix[4] + vertexZ * particleRotationMatrix[7];\n          let rotatedZ = vertexX * particleRotationMatrix[2] + vertexY * particleRotationMatrix[5] + vertexZ * particleRotationMatrix[8];\n          rotatedX += pivotBackTranslation.x;\n          rotatedY += pivotBackTranslation.y;\n          rotatedZ += pivotBackTranslation.z;\n          const px = positions32[idx] = particleGlobalPosition.x + camAxisX.x * rotatedX + camAxisY.x * rotatedY + camAxisZ.x * rotatedZ;\n          const py = positions32[idx + 1] = particleGlobalPosition.y + camAxisX.y * rotatedX + camAxisY.y * rotatedY + camAxisZ.y * rotatedZ;\n          const pz = positions32[idx + 2] = particleGlobalPosition.z + camAxisX.z * rotatedX + camAxisY.z * rotatedY + camAxisZ.z * rotatedZ;\n          if (this._computeBoundingBox) {\n            minimum.minimizeInPlaceFromFloats(px, py, pz);\n            maximum.maximizeInPlaceFromFloats(px, py, pz);\n          }\n          // normals : if the particles can't be morphed then just rotate the normals, what is much more faster than ComputeNormals()\n          if (!this._computeParticleVertex) {\n            const normalx = fixedNormal32[idx];\n            const normaly = fixedNormal32[idx + 1];\n            const normalz = fixedNormal32[idx + 2];\n            const rotatedx = normalx * particleRotationMatrix[0] + normaly * particleRotationMatrix[3] + normalz * particleRotationMatrix[6];\n            const rotatedy = normalx * particleRotationMatrix[1] + normaly * particleRotationMatrix[4] + normalz * particleRotationMatrix[7];\n            const rotatedz = normalx * particleRotationMatrix[2] + normaly * particleRotationMatrix[5] + normalz * particleRotationMatrix[8];\n            normals32[idx] = camAxisX.x * rotatedx + camAxisY.x * rotatedy + camAxisZ.x * rotatedz;\n            normals32[idx + 1] = camAxisX.y * rotatedx + camAxisY.y * rotatedy + camAxisZ.y * rotatedz;\n            normals32[idx + 2] = camAxisX.z * rotatedx + camAxisY.z * rotatedy + camAxisZ.z * rotatedz;\n          }\n          if (this._computeParticleColor && particle.color) {\n            const colors32 = this._colors32;\n            colors32[colidx] = tmpColor.r;\n            colors32[colidx + 1] = tmpColor.g;\n            colors32[colidx + 2] = tmpColor.b;\n            colors32[colidx + 3] = tmpColor.a;\n          }\n          if (this._computeParticleTexture) {\n            const uvs = particle.uvs;\n            uvs32[uvidx] = tmpUV.x * (uvs.z - uvs.x) + uvs.x;\n            uvs32[uvidx + 1] = tmpUV.y * (uvs.w - uvs.y) + uvs.y;\n          }\n        }\n      }\n      // particle just set invisible : scaled to zero and positioned at the origin\n      else {\n        particle._stillInvisible = true; // mark the particle as invisible\n        for (pt = 0; pt < shape.length; pt++) {\n          idx = index + pt * 3;\n          colidx = colorIndex + pt * 4;\n          uvidx = uvIndex + pt * 2;\n          positions32[idx] = positions32[idx + 1] = positions32[idx + 2] = 0;\n          normals32[idx] = normals32[idx + 1] = normals32[idx + 2] = 0;\n          if (this._computeParticleColor && particle.color) {\n            const color = particle.color;\n            colors32[colidx] = color.r;\n            colors32[colidx + 1] = color.g;\n            colors32[colidx + 2] = color.b;\n            colors32[colidx + 3] = color.a;\n          }\n          if (this._computeParticleTexture) {\n            const uvs = particle.uvs;\n            uvs32[uvidx] = shapeUV[pt * 2] * (uvs.z - uvs.x) + uvs.x;\n            uvs32[uvidx + 1] = shapeUV[pt * 2 + 1] * (uvs.w - uvs.y) + uvs.y;\n          }\n        }\n      }\n      // if the particle intersections must be computed : update the bbInfo\n      if (this._particlesIntersect) {\n        const bInfo = particle.getBoundingInfo();\n        const bBox = bInfo.boundingBox;\n        const bSphere = bInfo.boundingSphere;\n        const modelBoundingInfo = particle._modelBoundingInfo;\n        if (!this._bSphereOnly) {\n          // place, scale and rotate the particle bbox within the SPS local system, then update it\n          const modelBoundingInfoVectors = modelBoundingInfo.boundingBox.vectors;\n          const tempMin = tempVectors[1];\n          const tempMax = tempVectors[2];\n          tempMin.setAll(Number.MAX_VALUE);\n          tempMax.setAll(-Number.MAX_VALUE);\n          for (let b = 0; b < 8; b++) {\n            const scaledX = modelBoundingInfoVectors[b].x * particleScaling.x;\n            const scaledY = modelBoundingInfoVectors[b].y * particleScaling.y;\n            const scaledZ = modelBoundingInfoVectors[b].z * particleScaling.z;\n            const rotatedX = scaledX * particleRotationMatrix[0] + scaledY * particleRotationMatrix[3] + scaledZ * particleRotationMatrix[6];\n            const rotatedY = scaledX * particleRotationMatrix[1] + scaledY * particleRotationMatrix[4] + scaledZ * particleRotationMatrix[7];\n            const rotatedZ = scaledX * particleRotationMatrix[2] + scaledY * particleRotationMatrix[5] + scaledZ * particleRotationMatrix[8];\n            const x = particlePosition.x + camAxisX.x * rotatedX + camAxisY.x * rotatedY + camAxisZ.x * rotatedZ;\n            const y = particlePosition.y + camAxisX.y * rotatedX + camAxisY.y * rotatedY + camAxisZ.y * rotatedZ;\n            const z = particlePosition.z + camAxisX.z * rotatedX + camAxisY.z * rotatedY + camAxisZ.z * rotatedZ;\n            tempMin.minimizeInPlaceFromFloats(x, y, z);\n            tempMax.maximizeInPlaceFromFloats(x, y, z);\n          }\n          bBox.reConstruct(tempMin, tempMax, mesh._worldMatrix);\n        }\n        // place and scale the particle bouding sphere in the SPS local system, then update it\n        const minBbox = modelBoundingInfo.minimum.multiplyToRef(particleScaling, tempVectors[1]);\n        const maxBbox = modelBoundingInfo.maximum.multiplyToRef(particleScaling, tempVectors[2]);\n        const bSphereCenter = maxBbox.addToRef(minBbox, tempVectors[3]).scaleInPlace(0.5).addInPlace(particleGlobalPosition);\n        const halfDiag = maxBbox.subtractToRef(minBbox, tempVectors[4]).scaleInPlace(0.5 * this._bSphereRadiusFactor);\n        const bSphereMinBbox = bSphereCenter.subtractToRef(halfDiag, tempVectors[1]);\n        const bSphereMaxBbox = bSphereCenter.addToRef(halfDiag, tempVectors[2]);\n        bSphere.reConstruct(bSphereMinBbox, bSphereMaxBbox, mesh._worldMatrix);\n      }\n      // increment indexes for the next particle\n      index = idx + 3;\n      colorIndex = colidx + 4;\n      uvIndex = uvidx + 2;\n    }\n    // if the VBO must be updated\n    if (update) {\n      if (this._computeParticleColor) {\n        const vb = mesh.getVertexBuffer(VertexBuffer.ColorKind);\n        if (vb && !mesh.isPickable) {\n          vb.updateDirectly(colors32, 0);\n        } else {\n          mesh.updateVerticesData(VertexBuffer.ColorKind, colors32, false, false);\n        }\n      }\n      if (this._computeParticleTexture) {\n        const vb = mesh.getVertexBuffer(VertexBuffer.UVKind);\n        if (vb && !mesh.isPickable) {\n          vb.updateDirectly(uvs32, 0);\n        } else {\n          mesh.updateVerticesData(VertexBuffer.UVKind, uvs32, false, false);\n        }\n      }\n      const vbp = mesh.getVertexBuffer(VertexBuffer.PositionKind);\n      if (vbp && !mesh.isPickable) {\n        vbp.updateDirectly(positions32, 0);\n      } else {\n        mesh.updateVerticesData(VertexBuffer.PositionKind, positions32, false, false);\n      }\n      if (!mesh.areNormalsFrozen || mesh.isFacetDataEnabled) {\n        if (this._computeParticleVertex || mesh.isFacetDataEnabled) {\n          // recompute the normals only if the particles can be morphed, update then also the normal reference array _fixedNormal32[]\n          const params = mesh.isFacetDataEnabled ? mesh.getFacetDataParameters() : null;\n          VertexData.ComputeNormals(positions32, indices32, normals32, params);\n          for (let i = 0; i < normals32.length; i++) {\n            fixedNormal32[i] = normals32[i];\n          }\n        }\n        if (!mesh.areNormalsFrozen) {\n          const vb = mesh.getVertexBuffer(VertexBuffer.NormalKind);\n          if (vb && !mesh.isPickable) {\n            vb.updateDirectly(normals32, 0);\n          } else {\n            mesh.updateVerticesData(VertexBuffer.NormalKind, normals32, false, false);\n          }\n        }\n      }\n      if (depthSortParticles) {\n        const depthSortedParticles = this.depthSortedParticles;\n        depthSortedParticles.sort(this._depthSortFunction);\n        const dspl = depthSortedParticles.length;\n        let sid = 0;\n        let faceId = 0;\n        for (let sorted = 0; sorted < dspl; sorted++) {\n          const sortedParticle = depthSortedParticles[sorted];\n          const lind = sortedParticle.indicesLength;\n          const sind = sortedParticle.ind;\n          for (let i = 0; i < lind; i++) {\n            indices32[sid] = indices[sind + i];\n            sid++;\n            if (this._pickable) {\n              const f = i % 3;\n              if (f == 0) {\n                const pickedData = this.pickedParticles[faceId];\n                pickedData.idx = sortedParticle.idx;\n                pickedData.faceId = faceId;\n                faceId++;\n              }\n            }\n          }\n        }\n      }\n      if (this._autoFixFaceOrientation) {\n        let particleInd = 0;\n        for (let particleIdx = 0; particleIdx < this.particles.length; particleIdx++) {\n          const particle = depthSortParticles ? this.particles[this.depthSortedParticles[particleIdx].idx] : this.particles[particleIdx];\n          const flipFaces = particle.scale.x * particle.scale.y * particle.scale.z < 0;\n          if (flipFaces) {\n            for (let faceInd = 0; faceInd < particle._model._indicesLength; faceInd += 3) {\n              const tmp = indices[particle._ind + faceInd];\n              indices32[particleInd + faceInd] = indices[particle._ind + faceInd + 1];\n              indices32[particleInd + faceInd + 1] = tmp;\n            }\n          }\n          particleInd += particle._model._indicesLength;\n        }\n      }\n      if (depthSortParticles || this._autoFixFaceOrientation) {\n        mesh.updateIndices(indices32);\n      }\n    }\n    if (this._computeBoundingBox) {\n      if (mesh.hasBoundingInfo) {\n        mesh.getBoundingInfo().reConstruct(minimum, maximum, mesh._worldMatrix);\n      } else {\n        mesh.buildBoundingInfo(minimum, maximum, mesh._worldMatrix);\n      }\n    }\n    if (this._autoUpdateSubMeshes) {\n      this.computeSubMeshes();\n    }\n    this._recomputeInvisibles = false;\n    this.afterUpdateParticles(start, end, update);\n    return this;\n  }\n  /**\n   * Disposes the SPS.\n   */\n  dispose() {\n    this.mesh.dispose();\n    this.vars = null;\n    // drop references to internal big arrays for the GC\n    this._positions = null;\n    this._indices = null;\n    this._normals = null;\n    this._uvs = null;\n    this._colors = null;\n    this._indices32 = null;\n    this._positions32 = null;\n    this._normals32 = null;\n    this._fixedNormal32 = null;\n    this._uvs32 = null;\n    this._colors32 = null;\n    this.pickedParticles = null;\n    this.pickedBySubMesh = null;\n    this._materials = null;\n    this._materialIndexes = null;\n    this._indicesByMaterial = null;\n    this._idxOfId = null;\n  }\n  /** Returns an object {idx: number faceId: number} for the picked particle from the passed pickingInfo object.\n   * idx is the particle index in the SPS\n   * faceId is the picked face index counted within this particle.\n   * Returns null if the pickInfo can't identify a picked particle.\n   * @param pickingInfo (PickingInfo object)\n   * @returns {idx: number, faceId: number} or null\n   */\n  pickedParticle(pickingInfo) {\n    if (pickingInfo.hit) {\n      const subMesh = pickingInfo.subMeshId;\n      const faceId = pickingInfo.faceId - this.mesh.subMeshes[subMesh].indexStart / 3;\n      const picked = this.pickedBySubMesh;\n      if (picked[subMesh] && picked[subMesh][faceId]) {\n        return picked[subMesh][faceId];\n      }\n    }\n    return null;\n  }\n  /**\n   * Returns a SolidParticle object from its identifier : particle.id\n   * @param id (integer) the particle Id\n   * @returns the searched particle or null if not found in the SPS.\n   */\n  getParticleById(id) {\n    const p = this.particles[id];\n    if (p && p.id == id) {\n      return p;\n    }\n    const particles = this.particles;\n    const idx = this._idxOfId[id];\n    if (idx !== undefined) {\n      return particles[idx];\n    }\n    let i = 0;\n    const nb = this.nbParticles;\n    while (i < nb) {\n      const particle = particles[i];\n      if (particle.id == id) {\n        return particle;\n      }\n      i++;\n    }\n    return null;\n  }\n  /**\n   * Returns a new array populated with the particles having the passed shapeId.\n   * @param shapeId (integer) the shape identifier\n   * @returns a new solid particle array\n   */\n  getParticlesByShapeId(shapeId) {\n    const ref = [];\n    this.getParticlesByShapeIdToRef(shapeId, ref);\n    return ref;\n  }\n  /**\n   * Populates the passed array \"ref\" with the particles having the passed shapeId.\n   * @param shapeId the shape identifier\n   * @returns the SPS\n   * @param ref\n   */\n  getParticlesByShapeIdToRef(shapeId, ref) {\n    ref.length = 0;\n    for (let i = 0; i < this.nbParticles; i++) {\n      const p = this.particles[i];\n      if (p.shapeId == shapeId) {\n        ref.push(p);\n      }\n    }\n    return this;\n  }\n  /**\n   * Computes the required SubMeshes according the materials assigned to the particles.\n   * @returns the solid particle system.\n   * Does nothing if called before the SPS mesh is built.\n   */\n  computeSubMeshes() {\n    if (!this.mesh || !this._multimaterialEnabled) {\n      return this;\n    }\n    const depthSortedParticles = this.depthSortedParticles;\n    if (this.particles.length > 0) {\n      for (let p = 0; p < this.particles.length; p++) {\n        const part = this.particles[p];\n        if (!part.materialIndex) {\n          part.materialIndex = 0;\n        }\n        const sortedPart = depthSortedParticles[p];\n        sortedPart.materialIndex = part.materialIndex;\n        sortedPart.ind = part._ind;\n        sortedPart.indicesLength = part._model._indicesLength;\n        sortedPart.idx = part.idx;\n      }\n    }\n    this._sortParticlesByMaterial();\n    const indicesByMaterial = this._indicesByMaterial;\n    const materialIndexes = this._materialIndexes;\n    const mesh = this.mesh;\n    mesh.subMeshes = [];\n    const vcount = mesh.getTotalVertices();\n    for (let m = 0; m < materialIndexes.length; m++) {\n      const start = indicesByMaterial[m];\n      const count = indicesByMaterial[m + 1] - start;\n      const matIndex = materialIndexes[m];\n      new SubMesh(matIndex, 0, vcount, start, count, mesh);\n    }\n    return this;\n  }\n  /**\n   * Sorts the solid particles by material when MultiMaterial is enabled.\n   * Updates the indices32 array.\n   * Updates the indicesByMaterial array.\n   * Updates the mesh indices array.\n   * @returns the SPS\n   * @internal\n   */\n  _sortParticlesByMaterial() {\n    const indicesByMaterial = [0];\n    this._indicesByMaterial = indicesByMaterial;\n    const materialIndexes = [];\n    this._materialIndexes = materialIndexes;\n    const depthSortedParticles = this.depthSortedParticles;\n    depthSortedParticles.sort(this._materialSortFunction);\n    const length = depthSortedParticles.length;\n    const indices32 = this._indices32;\n    const indices = this._indices;\n    let subMeshIndex = 0;\n    let subMeshFaceId = 0;\n    let sid = 0;\n    let lastMatIndex = depthSortedParticles[0].materialIndex;\n    materialIndexes.push(lastMatIndex);\n    if (this._pickable) {\n      this.pickedBySubMesh = [[]];\n      this.pickedParticles = this.pickedBySubMesh[0];\n    }\n    for (let sorted = 0; sorted < length; sorted++) {\n      const sortedPart = depthSortedParticles[sorted];\n      const lind = sortedPart.indicesLength;\n      const sind = sortedPart.ind;\n      if (sortedPart.materialIndex !== lastMatIndex) {\n        lastMatIndex = sortedPart.materialIndex;\n        indicesByMaterial.push(sid);\n        materialIndexes.push(lastMatIndex);\n        if (this._pickable) {\n          subMeshIndex++;\n          this.pickedBySubMesh[subMeshIndex] = [];\n          subMeshFaceId = 0;\n        }\n      }\n      let faceId = 0;\n      for (let i = 0; i < lind; i++) {\n        indices32[sid] = indices[sind + i];\n        if (this._pickable) {\n          const f = i % 3;\n          if (f == 0) {\n            const pickedData = this.pickedBySubMesh[subMeshIndex][subMeshFaceId];\n            if (pickedData) {\n              pickedData.idx = sortedPart.idx;\n              pickedData.faceId = faceId;\n            } else {\n              this.pickedBySubMesh[subMeshIndex][subMeshFaceId] = {\n                idx: sortedPart.idx,\n                faceId: faceId\n              };\n            }\n            subMeshFaceId++;\n            faceId++;\n          }\n        }\n        sid++;\n      }\n    }\n    indicesByMaterial.push(indices32.length); // add the last number to ease the indices start/count values for subMeshes creation\n    if (this._updatable) {\n      this.mesh.updateIndices(indices32);\n    }\n    return this;\n  }\n  /**\n   * Sets the material indexes by id materialIndexesById[id] = materialIndex\n   * @internal\n   */\n  _setMaterialIndexesById() {\n    this._materialIndexesById = {};\n    for (let i = 0; i < this._materials.length; i++) {\n      const id = this._materials[i].uniqueId;\n      this._materialIndexesById[id] = i;\n    }\n  }\n  /**\n   * Returns an array with unique values of Materials from the passed array\n   * @param array the material array to be checked and filtered\n   * @internal\n   */\n  _filterUniqueMaterialId(array) {\n    const filtered = array.filter(function (value, index, self) {\n      return self.indexOf(value) === index;\n    });\n    return filtered;\n  }\n  /**\n   * Sets a new Standard Material as _defaultMaterial if not already set.\n   * @internal\n   */\n  _setDefaultMaterial() {\n    if (!this._defaultMaterial) {\n      this._defaultMaterial = new StandardMaterial(this.name + \"DefaultMaterial\", this._scene);\n    }\n    return this._defaultMaterial;\n  }\n  /**\n   * Visibility helper : Recomputes the visible size according to the mesh bounding box\n   * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/sps_visibility\n   * @returns the SPS.\n   */\n  refreshVisibleSize() {\n    if (!this._isVisibilityBoxLocked) {\n      this.mesh.refreshBoundingInfo();\n    }\n    return this;\n  }\n  /**\n   * Visibility helper : Sets the size of a visibility box, this sets the underlying mesh bounding box.\n   * @param size the size (float) of the visibility box\n   * note : this doesn't lock the SPS mesh bounding box.\n   * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/sps_visibility\n   */\n  setVisibilityBox(size) {\n    const vis = size / 2;\n    this.mesh.buildBoundingInfo(new Vector3(-vis, -vis, -vis), new Vector3(vis, vis, vis));\n  }\n  /**\n   * Gets whether the SPS as always visible or not\n   * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/sps_visibility\n   */\n  get isAlwaysVisible() {\n    return this._alwaysVisible;\n  }\n  /**\n   * Sets the SPS as always visible or not\n   * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/sps_visibility\n   */\n  set isAlwaysVisible(val) {\n    this._alwaysVisible = val;\n    this.mesh.alwaysSelectAsActiveMesh = val;\n  }\n  /**\n   * Sets the SPS visibility box as locked or not. This enables/disables the underlying mesh bounding box updates.\n   * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/sps_visibility\n   */\n  set isVisibilityBoxLocked(val) {\n    this._isVisibilityBoxLocked = val;\n    const boundingInfo = this.mesh.getBoundingInfo();\n    boundingInfo.isLocked = val;\n  }\n  /**\n   * Gets if the SPS visibility box as locked or not. This enables/disables the underlying mesh bounding box updates.\n   * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/sps_visibility\n   */\n  get isVisibilityBoxLocked() {\n    return this._isVisibilityBoxLocked;\n  }\n  /**\n   * Tells to `setParticles()` to compute the particle rotations or not.\n   * Default value : true. The SPS is faster when it's set to false.\n   * Note : the particle rotations aren't stored values, so setting `computeParticleRotation` to false will prevents the particle to rotate.\n   */\n  set computeParticleRotation(val) {\n    this._computeParticleRotation = val;\n  }\n  /**\n   * Tells to `setParticles()` to compute the particle colors or not.\n   * Default value : true. The SPS is faster when it's set to false.\n   * Note : the particle colors are stored values, so setting `computeParticleColor` to false will keep yet the last colors set.\n   */\n  set computeParticleColor(val) {\n    this._computeParticleColor = val;\n  }\n  set computeParticleTexture(val) {\n    this._computeParticleTexture = val;\n  }\n  /**\n   * Tells to `setParticles()` to call the vertex function for each vertex of each particle, or not.\n   * Default value : false. The SPS is faster when it's set to false.\n   * Note : the particle custom vertex positions aren't stored values.\n   */\n  set computeParticleVertex(val) {\n    this._computeParticleVertex = val;\n  }\n  /**\n   * Tells to `setParticles()` to compute or not the mesh bounding box when computing the particle positions.\n   */\n  set computeBoundingBox(val) {\n    this._computeBoundingBox = val;\n  }\n  /**\n   * Tells to `setParticles()` to sort or not the distance between each particle and the camera.\n   * Skipped when `enableDepthSort` is set to `false` (default) at construction time.\n   * Default : `true`\n   */\n  set depthSortParticles(val) {\n    this._depthSortParticles = val;\n  }\n  /**\n   * Gets if `setParticles()` computes the particle rotations or not.\n   * Default value : true. The SPS is faster when it's set to false.\n   * Note : the particle rotations aren't stored values, so setting `computeParticleRotation` to false will prevents the particle to rotate.\n   */\n  get computeParticleRotation() {\n    return this._computeParticleRotation;\n  }\n  /**\n   * Gets if `setParticles()` computes the particle colors or not.\n   * Default value : true. The SPS is faster when it's set to false.\n   * Note : the particle colors are stored values, so setting `computeParticleColor` to false will keep yet the last colors set.\n   */\n  get computeParticleColor() {\n    return this._computeParticleColor;\n  }\n  /**\n   * Gets if `setParticles()` computes the particle textures or not.\n   * Default value : true. The SPS is faster when it's set to false.\n   * Note : the particle textures are stored values, so setting `computeParticleTexture` to false will keep yet the last colors set.\n   */\n  get computeParticleTexture() {\n    return this._computeParticleTexture;\n  }\n  /**\n   * Gets if `setParticles()` calls the vertex function for each vertex of each particle, or not.\n   * Default value : false. The SPS is faster when it's set to false.\n   * Note : the particle custom vertex positions aren't stored values.\n   */\n  get computeParticleVertex() {\n    return this._computeParticleVertex;\n  }\n  /**\n   * Gets if `setParticles()` computes or not the mesh bounding box when computing the particle positions.\n   */\n  get computeBoundingBox() {\n    return this._computeBoundingBox;\n  }\n  /**\n   * Gets if `setParticles()` sorts or not the distance between each particle and the camera.\n   * Skipped when `enableDepthSort` is set to `false` (default) at construction time.\n   * Default : `true`\n   */\n  get depthSortParticles() {\n    return this._depthSortParticles;\n  }\n  /**\n   * Gets if the SPS is created as expandable at construction time.\n   * Default : `false`\n   */\n  get expandable() {\n    return this._expandable;\n  }\n  /**\n   * Gets if the SPS supports the Multi Materials\n   */\n  get multimaterialEnabled() {\n    return this._multimaterialEnabled;\n  }\n  /**\n   * Gets if the SPS uses the model materials for its own multimaterial.\n   */\n  get useModelMaterial() {\n    return this._useModelMaterial;\n  }\n  /**\n   * The SPS used material array.\n   */\n  get materials() {\n    return this._materials;\n  }\n  /**\n   * Sets the SPS MultiMaterial from the passed materials.\n   * Note : the passed array is internally copied and not used then by reference.\n   * @param materials an array of material objects. This array indexes are the materialIndex values of the particles.\n   */\n  setMultiMaterial(materials) {\n    this._materials = this._filterUniqueMaterialId(materials);\n    this._setMaterialIndexesById();\n    if (this._multimaterial) {\n      this._multimaterial.dispose();\n    }\n    this._multimaterial = new MultiMaterial(this.name + \"MultiMaterial\", this._scene);\n    for (let m = 0; m < this._materials.length; m++) {\n      this._multimaterial.subMaterials.push(this._materials[m]);\n    }\n    this.computeSubMeshes();\n    this.mesh.material = this._multimaterial;\n  }\n  /**\n   * The SPS computed multimaterial object\n   */\n  get multimaterial() {\n    return this._multimaterial;\n  }\n  set multimaterial(mm) {\n    this._multimaterial = mm;\n  }\n  /**\n   * If the subMeshes must be updated on the next call to setParticles()\n   */\n  get autoUpdateSubMeshes() {\n    return this._autoUpdateSubMeshes;\n  }\n  set autoUpdateSubMeshes(val) {\n    this._autoUpdateSubMeshes = val;\n  }\n  // =======================================================================\n  // Particle behavior logic\n  // these following methods may be overwritten by the user to fit his needs\n  /**\n   * This function does nothing. It may be overwritten to set all the particle first values.\n   * The SPS doesn't call this function, you may have to call it by your own.\n   * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/manage_sps_particles\n   */\n  initParticles() {}\n  /**\n   * This function does nothing. It may be overwritten to recycle a particle.\n   * The SPS doesn't call this function, you may have to call it by your own.\n   * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/manage_sps_particles\n   * @param particle The particle to recycle\n   * @returns the recycled particle\n   */\n  recycleParticle(particle) {\n    return particle;\n  }\n  /**\n   * Updates a particle : this function should  be overwritten by the user.\n   * It is called on each particle by `setParticles()`. This is the place to code each particle behavior.\n   * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/manage_sps_particles\n   * @example : just set a particle position or velocity and recycle conditions\n   * @param particle The particle to update\n   * @returns the updated particle\n   */\n  updateParticle(particle) {\n    return particle;\n  }\n  /**\n   * Updates a vertex of a particle : it can be overwritten by the user.\n   * This will be called on each vertex particle by `setParticles()` if `computeParticleVertex` is set to true only.\n   * @param particle the current particle\n   * @param vertex the current vertex of the current particle : a SolidParticleVertex object\n   * @param pt the index of the current vertex in the particle shape\n   * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/sps_vertices\n   * @example : just set a vertex particle position or color\n   * @returns the sps\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateParticleVertex(particle, vertex, pt) {\n    return this;\n  }\n  /**\n   * This will be called before any other treatment by `setParticles()` and will be passed three parameters.\n   * This does nothing and may be overwritten by the user.\n   * @param start the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()\n   * @param stop the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()\n   * @param update the boolean update value actually passed to setParticles()\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  beforeUpdateParticles(start, stop, update) {}\n  /**\n   * This will be called  by `setParticles()` after all the other treatments and just before the actual mesh update.\n   * This will be passed three parameters.\n   * This does nothing and may be overwritten by the user.\n   * @param start the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()\n   * @param stop the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()\n   * @param update the boolean update value actually passed to setParticles()\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  afterUpdateParticles(start, stop, update) {}\n}","map":{"version":3,"mappings":"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","names":["Vector3","Matrix","TmpVectors","Quaternion","Color4","VertexBuffer","VertexData","Mesh","CreateDisc","EngineStore","DepthSortedParticle","SolidParticle","ModelShape","SolidParticleVertex","BoundingInfo","Axis","SubMesh","StandardMaterial","MultiMaterial","SolidParticleSystem","constructor","name","scene","options","Array","p1","p2","sqDistance","materialIndex","_scene","LastCreatedScene","_camera","activeCamera","_pickable","isPickable","_depthSort","enableDepthSort","_multimaterialEnabled","enableMultiMaterial","_useModelMaterial","useModelMaterial","_expandable","expandable","_particlesIntersect","particleIntersection","_bSphereOnly","boundingSphereOnly","_bSphereRadiusFactor","bSphereRadiusFactor","_computeBoundingBox","computeBoundingBox","_autoFixFaceOrientation","autoFixFaceOrientation","updatable","undefined","_updatable","pickedBySubMesh","pickedParticles","depthSortedParticles","_multimaterial","_materials","_materialIndexesById","_tmpVertex","buildMesh","_isNotBuilt","mesh","nbParticles","triangle","radius","tessellation","addShape","dispose","_indices32","_needs32Bits","Uint32Array","_indices","Uint16Array","_positions32","Float32Array","_positions","_uvs32","_uvs","_colors32","_colors","_sortParticlesByMaterial","recomputeNormals","ComputeNormals","_normals","_normals32","_fixedNormal32","_mustUnrotateFixedNormals","_unrotateFixedNormals","vertexData","indices","set","PositionKind","NormalKind","length","UVKind","ColorKind","applyToMesh","faceId","p","part","particles","lind","_model","_indicesLength","i","f","pickedData","idx","setMultiMaterial","_recomputeInvisibles","digest","size","facetNb","number","delta","meshPos","getVerticesData","meshInd","getIndices","meshUV","meshCol","meshNor","storage","totalFacets","Math","round","facetPos","facetNor","facetInd","facetUV","facetCol","barycenter","Zero","sizeO","floor","random","fi","j","push","i3","i2","i4","shape","_posToShape","shapeUV","_uvsToShapeUV","shapeInd","slice","shapeCol","shapeNor","copyFromFloats","v","addInPlace","scaleInPlace","minimum","Infinity","maximum","subtractInPlace","minimizeInPlaceFromFloats","x","y","z","maximizeInPlaceFromFloats","bInfo","material","_setDefaultMaterial","modelShape","_shapeCounter","currentPos","currentInd","_meshBuilder","_index","_addParticle","_lastParticleId","position","index","tmpNormal","quaternion","invertedRotMatrix","particle","_shape","rotationQuaternion","conjugateToRef","rotation","RotationYawPitchRollToRef","conjugateInPlace","toRotationMatrix","pt","TransformNormalFromFloatsToRef","toArray","_resetCopy","copy","_copy","setAll","scaling","uvs","color","translateFromPivot","shapeId","ind","positions","colors","normals","idxInShape","model","u","c","n","storeApart","materialId","_material","uniqueId","materialIndexesById","Object","prototype","hasOwnProperty","call","matIdx","positionFunction","rotMatrix","tmpVertex","tmpVector","tmpColor","tmpUV","uv","tmpRotated","pivotBackTranslation","scaledPivot","IdentityToRef","getRotationMatrix","pivot","multiplyToRef","copyFrom","someVertexFunction","vertexFunction","multiplyInPlace","TransformCoordinatesToRef","copyUvs","w","_color","r","g","b","a","current_ind","matIndex","FromArray","id","idxpos","idxind","sp","target","nb","from","shapeNormals","shapeColors","bbInfo","getBoundingInfo","posfunc","vtxfunc","_insertNewParticle","_rebuildParticle","reset","_positionFunction","_vertexFunction","_pos","parentId","rebuildMesh","updateVerticesData","removeParticles","start","end","currentNb","firstRemaining","shiftPos","shifInd","_ind","removed","splice","_idxOfId","particlesLength","modelIndices","modelNormals","modelColors","_shapeColors","modelUVs","_shapeUV","insertParticlesFromArray","solidParticleArray","currentShapeId","noNor","newPart","copyToRef","currentCopy","clone","setParticles","update","beforeUpdateParticles","invertedMatrix","colors32","positions32","normals32","uvs32","indices32","fixedNormal32","depthSortParticles","_depthSortParticles","tempVectors","camAxisX","camAxisY","camAxisZ","Number","MAX_VALUE","camInvertedPosition","billboard","computeWorldMatrix","_worldMatrix","invertToRef","tmpVector0","getDirectionToRef","Z","TransformNormalToRef","normalize","view","getViewMatrix","m","CrossToRef","globalPosition","colidx","colorIndex","uvidx","uvIndex","isFacetDataEnabled","boundingInfo","vpos","updateParticle","particleRotationMatrix","_rotationMatrix","particlePosition","particleRotation","particleScaling","particleGlobalPosition","_globalPosition","dsp","indicesLength","DistanceSquared","alive","_stillInvisible","isVisible","_computeParticleRotation","particleHasParent","parent","getParticleById","parentRotationMatrix","parentGlobalPosition","rotatedY","rotatedX","rotatedZ","rotMatrixValues","iu","iv","_computeParticleColor","_computeParticleTexture","_computeParticleVertex","updateParticleVertex","vertexX","vertexY","vertexZ","px","py","pz","normalx","normaly","normalz","rotatedx","rotatedy","rotatedz","bBox","boundingBox","bSphere","boundingSphere","modelBoundingInfo","_modelBoundingInfo","modelBoundingInfoVectors","vectors","tempMin","tempMax","scaledX","scaledY","scaledZ","reConstruct","minBbox","maxBbox","bSphereCenter","addToRef","halfDiag","subtractToRef","bSphereMinBbox","bSphereMaxBbox","vb","getVertexBuffer","updateDirectly","vbp","areNormalsFrozen","params","getFacetDataParameters","sort","_depthSortFunction","dspl","sid","sorted","sortedParticle","sind","particleInd","particleIdx","flipFaces","scale","faceInd","tmp","updateIndices","hasBoundingInfo","buildBoundingInfo","_autoUpdateSubMeshes","computeSubMeshes","afterUpdateParticles","vars","_materialIndexes","_indicesByMaterial","pickedParticle","pickingInfo","hit","subMesh","subMeshId","subMeshes","indexStart","picked","getParticlesByShapeId","ref","getParticlesByShapeIdToRef","sortedPart","indicesByMaterial","materialIndexes","vcount","getTotalVertices","count","_materialSortFunction","subMeshIndex","subMeshFaceId","lastMatIndex","_setMaterialIndexesById","_filterUniqueMaterialId","array","filtered","filter","value","self","indexOf","_defaultMaterial","refreshVisibleSize","_isVisibilityBoxLocked","refreshBoundingInfo","setVisibilityBox","vis","isAlwaysVisible","_alwaysVisible","val","alwaysSelectAsActiveMesh","isVisibilityBoxLocked","isLocked","computeParticleRotation","computeParticleColor","computeParticleTexture","computeParticleVertex","multimaterialEnabled","materials","subMaterials","multimaterial","mm","autoUpdateSubMeshes","initParticles","recycleParticle","vertex","stop"],"sourceRoot":"","sources":["../../../../lts/core/generated/Particles/solidParticleSystem.ts"],"sourcesContent":["import type { Nullable, IndicesArray, FloatArray } from \"../types\";\r\nimport { Vector3, Matrix, TmpVectors, Quaternion } from \"../Maths/math.vector\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { CreateDisc } from \"../Meshes/Builders/discBuilder\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { Scene, IDisposable } from \"../scene\";\r\nimport { DepthSortedParticle, SolidParticle, ModelShape, SolidParticleVertex } from \"./solidParticle\";\r\nimport type { TargetCamera } from \"../Cameras/targetCamera\";\r\nimport { BoundingInfo } from \"../Culling/boundingInfo\";\r\nimport { Axis } from \"../Maths/math.axis\";\r\nimport { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { Material } from \"../Materials/material\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport { MultiMaterial } from \"../Materials/multiMaterial\";\r\nimport type { PickingInfo } from \"../Collisions/pickingInfo\";\r\n\r\n/**\r\n * The SPS is a single updatable mesh. The solid particles are simply separate parts or faces fo this big mesh.\r\n *As it is just a mesh, the SPS has all the same properties than any other BJS mesh : not more, not less. It can be scaled, rotated, translated, enlighted, textured, moved, etc.\r\n\r\n * The SPS is also a particle system. It provides some methods to manage the particles.\r\n * However it is behavior agnostic. This means it has no emitter, no particle physics, no particle recycler. You have to implement your own behavior.\r\n *\r\n * Full documentation here : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/sps_intro\r\n */\r\nexport class SolidParticleSystem implements IDisposable {\r\n    /**\r\n     *  The SPS array of Solid Particle objects. Just access each particle as with any classic array.\r\n     *  Example : var p = SPS.particles[i];\r\n     */\r\n    public particles: SolidParticle[] = new Array<SolidParticle>();\r\n    /**\r\n     * The SPS total number of particles. Read only. Use SPS.counter instead if you need to set your own value.\r\n     */\r\n    public nbParticles: number = 0;\r\n    /**\r\n     * If the particles must ever face the camera (default false). Useful for planar particles.\r\n     */\r\n    public billboard: boolean = false;\r\n    /**\r\n     * Recompute normals when adding a shape\r\n     */\r\n    public recomputeNormals: boolean = false;\r\n    /**\r\n     * This a counter ofr your own usage. It's not set by any SPS functions.\r\n     */\r\n    public counter: number = 0;\r\n    /**\r\n     * The SPS name. This name is also given to the underlying mesh.\r\n     */\r\n    public name: string;\r\n    /**\r\n     * The SPS mesh. It's a standard BJS Mesh, so all the methods from the Mesh class are available.\r\n     */\r\n    public mesh: Mesh;\r\n    /**\r\n     * This empty object is intended to store some SPS specific or temporary values in order to lower the Garbage Collector activity.\r\n     * Please read : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/optimize_sps#limit-garbage-collection\r\n     */\r\n    public vars: any = {};\r\n    /**\r\n     * This array is populated when the SPS is set as 'pickable'.\r\n     * Each key of this array is a `faceId` value that you can get from a pickResult object.\r\n     * Each element of this array is an object `{idx: int, faceId: int}`.\r\n     * `idx` is the picked particle index in the `SPS.particles` array\r\n     * `faceId` is the picked face index counted within this particle.\r\n     * This array is the first element of the pickedBySubMesh array : sps.pickBySubMesh[0].\r\n     * It's not pertinent to use it when using a SPS with the support for MultiMaterial enabled.\r\n     * Use the method SPS.pickedParticle(pickingInfo) instead.\r\n     * Please read : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/picking_sps\r\n     */\r\n    public pickedParticles: { idx: number; faceId: number }[];\r\n    /**\r\n     * This array is populated when the SPS is set as 'pickable'\r\n     * Each key of this array is a submesh index.\r\n     * Each element of this array is a second array defined like this :\r\n     * Each key of this second array is a `faceId` value that you can get from a pickResult object.\r\n     * Each element of this second array is an object `{idx: int, faceId: int}`.\r\n     * `idx` is the picked particle index in the `SPS.particles` array\r\n     * `faceId` is the picked face index counted within this particle.\r\n     * It's better to use the method SPS.pickedParticle(pickingInfo) rather than using directly this array.\r\n     * Please read : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/picking_sps\r\n     */\r\n    public pickedBySubMesh: { idx: number; faceId: number }[][];\r\n    /**\r\n     * This array is populated when `enableDepthSort` is set to true.\r\n     * Each element of this array is an instance of the class DepthSortedParticle.\r\n     */\r\n    public depthSortedParticles: DepthSortedParticle[];\r\n\r\n    /**\r\n     * If the particle intersection must be computed only with the bounding sphere (no bounding box computation, so faster). (Internal use only)\r\n     * @internal\r\n     */\r\n    public _bSphereOnly: boolean = false;\r\n    /**\r\n     * A number to multiply the bounding sphere radius by in order to reduce it for instance. (Internal use only)\r\n     * @internal\r\n     */\r\n    public _bSphereRadiusFactor: number = 1.0;\r\n\r\n    protected _scene: Scene;\r\n    protected _positions: number[] = new Array<number>();\r\n    protected _indices: number[] = new Array<number>();\r\n    protected _normals: number[] = new Array<number>();\r\n    protected _colors: number[] = new Array<number>();\r\n    protected _uvs: number[] = new Array<number>();\r\n    protected _indices32: IndicesArray; // used as depth sorted array if depth sort enabled, else used as typed indices\r\n    protected _positions32: Float32Array; // updated positions for the VBO\r\n    protected _normals32: Float32Array; // updated normals for the VBO\r\n    protected _fixedNormal32: Float32Array; // initial normal references\r\n    protected _colors32: Float32Array;\r\n    protected _uvs32: Float32Array;\r\n    protected _index: number = 0; // indices index\r\n    protected _updatable: boolean = true;\r\n    protected _pickable: boolean = false;\r\n    protected _isVisibilityBoxLocked = false;\r\n    protected _alwaysVisible: boolean = false;\r\n    protected _depthSort: boolean = false;\r\n    protected _expandable: boolean = false;\r\n    protected _shapeCounter: number = 0;\r\n    protected _copy: SolidParticle = new SolidParticle(0, 0, 0, 0, null, 0, 0, this);\r\n    protected _color: Color4 = new Color4(0, 0, 0, 0);\r\n    protected _computeParticleColor: boolean = true;\r\n    protected _computeParticleTexture: boolean = true;\r\n    protected _computeParticleRotation: boolean = true;\r\n    protected _computeParticleVertex: boolean = false;\r\n    protected _computeBoundingBox: boolean = false;\r\n    protected _autoFixFaceOrientation: boolean = false;\r\n    protected _depthSortParticles: boolean = true;\r\n    protected _camera: TargetCamera;\r\n    protected _mustUnrotateFixedNormals = false;\r\n    protected _particlesIntersect: boolean = false;\r\n    protected _needs32Bits: boolean = false;\r\n    protected _isNotBuilt: boolean = true;\r\n    protected _lastParticleId: number = 0;\r\n    protected _idxOfId: number[] = []; // array : key = particle.id / value = particle.idx\r\n    protected _multimaterialEnabled: boolean = false;\r\n    protected _useModelMaterial: boolean = false;\r\n    protected _indicesByMaterial: number[];\r\n    protected _materialIndexes: number[];\r\n    protected _depthSortFunction = (p1: DepthSortedParticle, p2: DepthSortedParticle) => p2.sqDistance - p1.sqDistance;\r\n    protected _materialSortFunction = (p1: DepthSortedParticle, p2: DepthSortedParticle) => p1.materialIndex - p2.materialIndex;\r\n    protected _materials: Material[];\r\n    protected _multimaterial: MultiMaterial;\r\n    protected _materialIndexesById: any;\r\n    protected _defaultMaterial: Material;\r\n    protected _autoUpdateSubMeshes: boolean = false;\r\n    protected _tmpVertex: SolidParticleVertex;\r\n    protected _recomputeInvisibles: boolean = false;\r\n\r\n    /**\r\n     * Creates a SPS (Solid Particle System) object.\r\n     * @param name (String) is the SPS name, this will be the underlying mesh name.\r\n     * @param scene (Scene) is the scene in which the SPS is added.\r\n     * @param options defines the options of the sps e.g.\r\n     * * updatable (optional boolean, default true) : if the SPS must be updatable or immutable.\r\n     * * isPickable (optional boolean, default false) : if the solid particles must be pickable.\r\n     * * enableDepthSort (optional boolean, default false) : if the solid particles must be sorted in the geometry according to their distance to the camera.\r\n     * * useModelMaterial (optional boolean, default false) : if the model materials must be used to create the SPS multimaterial. This enables the multimaterial supports of the SPS.\r\n     * * enableMultiMaterial (optional boolean, default false) : if the solid particles can be given different materials.\r\n     * * expandable (optional boolean, default false) : if particles can still be added after the initial SPS mesh creation.\r\n     * * particleIntersection (optional boolean, default false) : if the solid particle intersections must be computed.\r\n     * * boundingSphereOnly (optional boolean, default false) : if the particle intersection must be computed only with the bounding sphere (no bounding box computation, so faster).\r\n     * * bSphereRadiusFactor (optional float, default 1.0) : a number to multiply the bounding sphere radius by in order to reduce it for instance.\r\n     * * computeBoundingBox (optional boolean, default false): if the bounding box of the entire SPS will be computed (for occlusion detection, for example). If it is false, the bounding box will be the bounding box of the first particle.\r\n     * * autoFixFaceOrientation (optional boolean, default false): if the particle face orientations will be flipped for transformations that change orientation (scale (-1, 1, 1), for example)\r\n     * @param options.updatable\r\n     * @param options.isPickable\r\n     * @param options.enableDepthSort\r\n     * @param options.particleIntersection\r\n     * @param options.boundingSphereOnly\r\n     * @param options.bSphereRadiusFactor\r\n     * @param options.expandable\r\n     * @param options.useModelMaterial\r\n     * @param options.enableMultiMaterial\r\n     * @param options.computeBoundingBox\r\n     * @param options.autoFixFaceOrientation\r\n     * @example bSphereRadiusFactor = 1.0 / Math.sqrt(3.0) => the bounding sphere exactly matches a spherical mesh.\r\n     */\r\n    constructor(\r\n        name: string,\r\n        scene: Scene,\r\n        options?: {\r\n            updatable?: boolean;\r\n            isPickable?: boolean;\r\n            enableDepthSort?: boolean;\r\n            particleIntersection?: boolean;\r\n            boundingSphereOnly?: boolean;\r\n            bSphereRadiusFactor?: number;\r\n            expandable?: boolean;\r\n            useModelMaterial?: boolean;\r\n            enableMultiMaterial?: boolean;\r\n            computeBoundingBox?: boolean;\r\n            autoFixFaceOrientation?: boolean;\r\n        }\r\n    ) {\r\n        this.name = name;\r\n        this._scene = scene || EngineStore.LastCreatedScene;\r\n        this._camera = <TargetCamera>scene.activeCamera;\r\n        this._pickable = options ? <boolean>options.isPickable : false;\r\n        this._depthSort = options ? <boolean>options.enableDepthSort : false;\r\n        this._multimaterialEnabled = options ? <boolean>options.enableMultiMaterial : false;\r\n        this._useModelMaterial = options ? <boolean>options.useModelMaterial : false;\r\n        this._multimaterialEnabled = this._useModelMaterial ? true : this._multimaterialEnabled;\r\n        this._expandable = options ? <boolean>options.expandable : false;\r\n        this._particlesIntersect = options ? <boolean>options.particleIntersection : false;\r\n        this._bSphereOnly = options ? <boolean>options.boundingSphereOnly : false;\r\n        this._bSphereRadiusFactor = options && options.bSphereRadiusFactor ? options.bSphereRadiusFactor : 1.0;\r\n        this._computeBoundingBox = options?.computeBoundingBox ? options.computeBoundingBox : false;\r\n        this._autoFixFaceOrientation = options?.autoFixFaceOrientation ? options.autoFixFaceOrientation : false;\r\n        if (options && options.updatable !== undefined) {\r\n            this._updatable = options.updatable;\r\n        } else {\r\n            this._updatable = true;\r\n        }\r\n        if (this._pickable) {\r\n            this.pickedBySubMesh = [[]];\r\n            this.pickedParticles = this.pickedBySubMesh[0];\r\n        }\r\n        if (this._depthSort || this._multimaterialEnabled) {\r\n            this.depthSortedParticles = [];\r\n        }\r\n        if (this._multimaterialEnabled) {\r\n            this._multimaterial = new MultiMaterial(this.name + \"MultiMaterial\", this._scene);\r\n            this._materials = [];\r\n            this._materialIndexesById = {};\r\n        }\r\n        this._tmpVertex = new SolidParticleVertex();\r\n    }\r\n\r\n    /**\r\n     * Builds the SPS underlying mesh. Returns a standard Mesh.\r\n     * If no model shape was added to the SPS, the returned mesh is just a single triangular plane.\r\n     * @returns the created mesh\r\n     */\r\n    public buildMesh(): Mesh {\r\n        if (!this._isNotBuilt && this.mesh) {\r\n            return this.mesh;\r\n        }\r\n        if (this.nbParticles === 0 && !this.mesh) {\r\n            const triangle = CreateDisc(\"\", { radius: 1, tessellation: 3 }, this._scene);\r\n            this.addShape(triangle, 1);\r\n            triangle.dispose();\r\n        }\r\n        this._indices32 = this._needs32Bits ? new Uint32Array(this._indices) : new Uint16Array(this._indices);\r\n        this._positions32 = new Float32Array(this._positions);\r\n        this._uvs32 = new Float32Array(this._uvs);\r\n        this._colors32 = new Float32Array(this._colors);\r\n\r\n        if (!this.mesh) {\r\n            // in case it's already expanded\r\n            const mesh = new Mesh(this.name, this._scene);\r\n            this.mesh = mesh;\r\n        }\r\n        if (!this._updatable && this._multimaterialEnabled) {\r\n            this._sortParticlesByMaterial(); // this may reorder the indices32\r\n        }\r\n        if (this.recomputeNormals) {\r\n            VertexData.ComputeNormals(this._positions32, this._indices32, this._normals);\r\n        }\r\n\r\n        this._normals32 = new Float32Array(this._normals);\r\n        this._fixedNormal32 = new Float32Array(this._normals);\r\n        if (this._mustUnrotateFixedNormals) {\r\n            // the particles could be created already rotated in the mesh with a positionFunction\r\n            this._unrotateFixedNormals();\r\n        }\r\n        const vertexData = new VertexData();\r\n        vertexData.indices = this._depthSort ? this._indices : this._indices32;\r\n        vertexData.set(this._positions32, VertexBuffer.PositionKind);\r\n        vertexData.set(this._normals32, VertexBuffer.NormalKind);\r\n\r\n        if (this._uvs32.length > 0) {\r\n            vertexData.set(this._uvs32, VertexBuffer.UVKind);\r\n        }\r\n        if (this._colors32.length > 0) {\r\n            vertexData.set(this._colors32, VertexBuffer.ColorKind);\r\n        }\r\n\r\n        vertexData.applyToMesh(this.mesh, this._updatable);\r\n        this.mesh.isPickable = this._pickable;\r\n\r\n        if (this._pickable) {\r\n            let faceId = 0;\r\n            for (let p = 0; p < this.nbParticles; p++) {\r\n                const part = this.particles[p];\r\n                const lind = part._model._indicesLength;\r\n                for (let i = 0; i < lind; i++) {\r\n                    const f = i % 3;\r\n                    if (f == 0) {\r\n                        const pickedData = { idx: part.idx, faceId: faceId };\r\n                        this.pickedParticles[faceId] = pickedData;\r\n                        faceId++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this._multimaterialEnabled) {\r\n            this.setMultiMaterial(this._materials);\r\n        }\r\n\r\n        if (!this._expandable) {\r\n            // free memory\r\n            if (!this._depthSort && !this._multimaterialEnabled && !this._autoFixFaceOrientation) {\r\n                (<any>this._indices) = null;\r\n            }\r\n            (<any>this._positions) = null;\r\n            (<any>this._normals) = null;\r\n            (<any>this._uvs) = null;\r\n            (<any>this._colors) = null;\r\n\r\n            if (!this._updatable) {\r\n                this.particles.length = 0;\r\n            }\r\n        }\r\n        this._isNotBuilt = false;\r\n        this.recomputeNormals = false;\r\n        this._recomputeInvisibles = true;\r\n        return this.mesh;\r\n    }\r\n\r\n    /**\r\n     * Digests the mesh and generates as many solid particles in the system as wanted. Returns the SPS.\r\n     * These particles will have the same geometry than the mesh parts and will be positioned at the same localisation than the mesh original places.\r\n     * Thus the particles generated from `digest()` have their property `position` set yet.\r\n     * @param mesh ( Mesh ) is the mesh to be digested\r\n     * @param options {facetNb} (optional integer, default 1) is the number of mesh facets per particle, this parameter is overridden by the parameter `number` if any\r\n     * {delta} (optional integer, default 0) is the random extra number of facets per particle , each particle will have between `facetNb` and `facetNb + delta` facets\r\n     * {number} (optional positive integer) is the wanted number of particles : each particle is built with `mesh_total_facets / number` facets\r\n     * {storage} (optional existing array) is an array where the particles will be stored for a further use instead of being inserted in the SPS.\r\n     * @param options.facetNb\r\n     * @param options.number\r\n     * @param options.delta\r\n     * @param options.storage\r\n     * @returns the current SPS\r\n     */\r\n    public digest(mesh: Mesh, options?: { facetNb?: number; number?: number; delta?: number; storage?: [] }): SolidParticleSystem {\r\n        let size: number = (options && options.facetNb) || 1;\r\n        let number: number = (options && options.number) || 0;\r\n        let delta: number = (options && options.delta) || 0;\r\n        const meshPos = <FloatArray>mesh.getVerticesData(VertexBuffer.PositionKind);\r\n        const meshInd = <IndicesArray>mesh.getIndices();\r\n        const meshUV = <FloatArray>mesh.getVerticesData(VertexBuffer.UVKind);\r\n        const meshCol = <FloatArray>mesh.getVerticesData(VertexBuffer.ColorKind);\r\n        const meshNor = <FloatArray>mesh.getVerticesData(VertexBuffer.NormalKind);\r\n        const storage = options && options.storage ? options.storage : null;\r\n\r\n        let f: number = 0; // facet counter\r\n        const totalFacets: number = meshInd.length / 3; // a facet is a triangle, so 3 indices\r\n        // compute size from number\r\n        if (number) {\r\n            number = number > totalFacets ? totalFacets : number;\r\n            size = Math.round(totalFacets / number);\r\n            delta = 0;\r\n        } else {\r\n            size = size > totalFacets ? totalFacets : size;\r\n        }\r\n\r\n        const facetPos: number[] = []; // submesh positions\r\n        const facetNor: number[] = [];\r\n        const facetInd: number[] = []; // submesh indices\r\n        const facetUV: number[] = []; // submesh UV\r\n        const facetCol: number[] = []; // submesh colors\r\n        const barycenter: Vector3 = Vector3.Zero();\r\n        const sizeO: number = size;\r\n\r\n        while (f < totalFacets) {\r\n            size = sizeO + Math.floor((1 + delta) * Math.random());\r\n            if (f > totalFacets - size) {\r\n                size = totalFacets - f;\r\n            }\r\n            // reset temp arrays\r\n            facetPos.length = 0;\r\n            facetNor.length = 0;\r\n            facetInd.length = 0;\r\n            facetUV.length = 0;\r\n            facetCol.length = 0;\r\n\r\n            // iterate over \"size\" facets\r\n            let fi: number = 0;\r\n            for (let j = f * 3; j < (f + size) * 3; j++) {\r\n                facetInd.push(fi);\r\n                const i: number = meshInd[j];\r\n                const i3: number = i * 3;\r\n                facetPos.push(meshPos[i3], meshPos[i3 + 1], meshPos[i3 + 2]);\r\n                facetNor.push(meshNor[i3], meshNor[i3 + 1], meshNor[i3 + 2]);\r\n                if (meshUV) {\r\n                    const i2: number = i * 2;\r\n                    facetUV.push(meshUV[i2], meshUV[i2 + 1]);\r\n                }\r\n                if (meshCol) {\r\n                    const i4: number = i * 4;\r\n                    facetCol.push(meshCol[i4], meshCol[i4 + 1], meshCol[i4 + 2], meshCol[i4 + 3]);\r\n                }\r\n                fi++;\r\n            }\r\n\r\n            // create a model shape for each single particle\r\n            let idx: number = this.nbParticles;\r\n            const shape: Vector3[] = this._posToShape(facetPos);\r\n            const shapeUV: number[] = this._uvsToShapeUV(facetUV);\r\n            const shapeInd = facetInd.slice();\r\n            const shapeCol = facetCol.slice();\r\n            const shapeNor = facetNor.slice();\r\n\r\n            // compute the barycenter of the shape\r\n            barycenter.copyFromFloats(0, 0, 0);\r\n            let v: number;\r\n            for (v = 0; v < shape.length; v++) {\r\n                barycenter.addInPlace(shape[v]);\r\n            }\r\n            barycenter.scaleInPlace(1 / shape.length);\r\n\r\n            // shift the shape from its barycenter to the origin\r\n            // and compute the BBox required for intersection.\r\n            const minimum: Vector3 = new Vector3(Infinity, Infinity, Infinity);\r\n            const maximum: Vector3 = new Vector3(-Infinity, -Infinity, -Infinity);\r\n            for (v = 0; v < shape.length; v++) {\r\n                shape[v].subtractInPlace(barycenter);\r\n                minimum.minimizeInPlaceFromFloats(shape[v].x, shape[v].y, shape[v].z);\r\n                maximum.maximizeInPlaceFromFloats(shape[v].x, shape[v].y, shape[v].z);\r\n            }\r\n            let bInfo;\r\n            if (this._particlesIntersect) {\r\n                bInfo = new BoundingInfo(minimum, maximum);\r\n            }\r\n            let material = null;\r\n            if (this._useModelMaterial) {\r\n                material = mesh.material ? mesh.material : this._setDefaultMaterial();\r\n            }\r\n            const modelShape = new ModelShape(this._shapeCounter, shape, shapeInd, shapeNor, shapeCol, shapeUV, null, null, material);\r\n\r\n            // add the particle in the SPS\r\n            const currentPos = this._positions.length;\r\n            const currentInd = this._indices.length;\r\n            this._meshBuilder(\r\n                this._index,\r\n                currentInd,\r\n                shape,\r\n                this._positions,\r\n                shapeInd,\r\n                this._indices,\r\n                facetUV,\r\n                this._uvs,\r\n                shapeCol,\r\n                this._colors,\r\n                shapeNor,\r\n                this._normals,\r\n                idx,\r\n                0,\r\n                null,\r\n                modelShape\r\n            );\r\n            this._addParticle(idx, this._lastParticleId, currentPos, currentInd, modelShape, this._shapeCounter, 0, bInfo, storage);\r\n            // initialize the particle position\r\n            this.particles[this.nbParticles].position.addInPlace(barycenter);\r\n\r\n            if (!storage) {\r\n                this._index += shape.length;\r\n                idx++;\r\n                this.nbParticles++;\r\n                this._lastParticleId++;\r\n            }\r\n            this._shapeCounter++;\r\n            f += size;\r\n        }\r\n        this._isNotBuilt = true; // buildMesh() is now expected for setParticles() to work\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Unrotate the fixed normals in case the mesh was built with pre-rotated particles, ex : use of positionFunction in addShape()\r\n     * @internal\r\n     */\r\n    protected _unrotateFixedNormals() {\r\n        let index = 0;\r\n        let idx = 0;\r\n        const tmpNormal = TmpVectors.Vector3[0];\r\n        const quaternion = TmpVectors.Quaternion[0];\r\n        const invertedRotMatrix = TmpVectors.Matrix[0];\r\n        for (let p = 0; p < this.particles.length; p++) {\r\n            const particle = this.particles[p];\r\n            const shape = particle._model._shape;\r\n\r\n            // computing the inverse of the rotation matrix from the quaternion\r\n            // is equivalent to computing the matrix of the inverse quaternion, i.e of the conjugate quaternion\r\n            if (particle.rotationQuaternion) {\r\n                particle.rotationQuaternion.conjugateToRef(quaternion);\r\n            } else {\r\n                const rotation = particle.rotation;\r\n                Quaternion.RotationYawPitchRollToRef(rotation.y, rotation.x, rotation.z, quaternion);\r\n                quaternion.conjugateInPlace();\r\n            }\r\n            quaternion.toRotationMatrix(invertedRotMatrix);\r\n\r\n            for (let pt = 0; pt < shape.length; pt++) {\r\n                idx = index + pt * 3;\r\n                Vector3.TransformNormalFromFloatsToRef(this._normals32[idx], this._normals32[idx + 1], this._normals32[idx + 2], invertedRotMatrix, tmpNormal);\r\n                tmpNormal.toArray(this._fixedNormal32, idx);\r\n            }\r\n            index = idx + 3;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the temporary working copy particle\r\n     * @internal\r\n     */\r\n    protected _resetCopy() {\r\n        const copy = this._copy;\r\n        copy.position.setAll(0);\r\n        copy.rotation.setAll(0);\r\n        copy.rotationQuaternion = null;\r\n        copy.scaling.setAll(1);\r\n        copy.uvs.copyFromFloats(0.0, 0.0, 1.0, 1.0);\r\n        copy.color = null;\r\n        copy.translateFromPivot = false;\r\n        copy.shapeId = 0;\r\n        copy.materialIndex = null;\r\n    }\r\n\r\n    /**\r\n     * Inserts the shape model geometry in the global SPS mesh by updating the positions, indices, normals, colors, uvs arrays\r\n     * @param p the current index in the positions array to be updated\r\n     * @param ind the current index in the indices array\r\n     * @param shape a Vector3 array, the shape geometry\r\n     * @param positions the positions array to be updated\r\n     * @param meshInd the shape indices array\r\n     * @param indices the indices array to be updated\r\n     * @param meshUV the shape uv array\r\n     * @param uvs the uv array to be updated\r\n     * @param meshCol the shape color array\r\n     * @param colors the color array to be updated\r\n     * @param meshNor the shape normals array\r\n     * @param normals the normals array to be updated\r\n     * @param idx the particle index\r\n     * @param idxInShape the particle index in its shape\r\n     * @param options the addShape() method  passed options\r\n     * @param model\r\n     * @model the particle model\r\n     * @internal\r\n     */\r\n    protected _meshBuilder(\r\n        p: number,\r\n        ind: number,\r\n        shape: Vector3[],\r\n        positions: number[],\r\n        meshInd: IndicesArray,\r\n        indices: number[],\r\n        meshUV: number[] | Float32Array,\r\n        uvs: number[],\r\n        meshCol: number[] | Float32Array,\r\n        colors: number[],\r\n        meshNor: number[] | Float32Array,\r\n        normals: number[],\r\n        idx: number,\r\n        idxInShape: number,\r\n        options: any,\r\n        model: ModelShape\r\n    ): SolidParticle {\r\n        let i;\r\n        let u = 0;\r\n        let c = 0;\r\n        let n = 0;\r\n\r\n        this._resetCopy();\r\n        const copy = this._copy;\r\n        const storeApart = options && options.storage ? true : false;\r\n        copy.idx = idx;\r\n        copy.idxInShape = idxInShape;\r\n        copy.shapeId = model.shapeId;\r\n        if (this._useModelMaterial) {\r\n            const materialId = model._material!.uniqueId;\r\n            const materialIndexesById = this._materialIndexesById;\r\n            if (!Object.prototype.hasOwnProperty.call(materialIndexesById, materialId)) {\r\n                materialIndexesById[materialId] = this._materials.length;\r\n                this._materials.push(model._material!);\r\n            }\r\n            const matIdx = materialIndexesById[materialId];\r\n            copy.materialIndex = matIdx;\r\n        }\r\n\r\n        if (options && options.positionFunction) {\r\n            // call to custom positionFunction\r\n            options.positionFunction(copy, idx, idxInShape);\r\n            this._mustUnrotateFixedNormals = true;\r\n        }\r\n\r\n        // in case the particle geometry must NOT be inserted in the SPS mesh geometry\r\n        if (storeApart) {\r\n            return copy;\r\n        }\r\n\r\n        const rotMatrix = TmpVectors.Matrix[0];\r\n        const tmpVertex = this._tmpVertex;\r\n        const tmpVector = tmpVertex.position;\r\n        const tmpColor = tmpVertex.color;\r\n        const tmpUV = tmpVertex.uv;\r\n        const tmpRotated = TmpVectors.Vector3[1];\r\n        const pivotBackTranslation = TmpVectors.Vector3[2];\r\n        const scaledPivot = TmpVectors.Vector3[3];\r\n        Matrix.IdentityToRef(rotMatrix);\r\n        copy.getRotationMatrix(rotMatrix);\r\n\r\n        copy.pivot.multiplyToRef(copy.scaling, scaledPivot);\r\n\r\n        if (copy.translateFromPivot) {\r\n            pivotBackTranslation.setAll(0.0);\r\n        } else {\r\n            pivotBackTranslation.copyFrom(scaledPivot);\r\n        }\r\n\r\n        const someVertexFunction = options && options.vertexFunction;\r\n        for (i = 0; i < shape.length; i++) {\r\n            tmpVector.copyFrom(shape[i]);\r\n            if (copy.color) {\r\n                tmpColor.copyFrom(copy.color);\r\n            }\r\n            if (meshUV) {\r\n                tmpUV.copyFromFloats(meshUV[u], meshUV[u + 1]);\r\n            }\r\n            if (someVertexFunction) {\r\n                options.vertexFunction(copy, tmpVertex, i);\r\n            }\r\n\r\n            tmpVector.multiplyInPlace(copy.scaling).subtractInPlace(scaledPivot);\r\n            Vector3.TransformCoordinatesToRef(tmpVector, rotMatrix, tmpRotated);\r\n            tmpRotated.addInPlace(pivotBackTranslation).addInPlace(copy.position);\r\n            positions.push(tmpRotated.x, tmpRotated.y, tmpRotated.z);\r\n\r\n            if (meshUV) {\r\n                const copyUvs = copy.uvs;\r\n                uvs.push((copyUvs.z - copyUvs.x) * tmpUV.x + copyUvs.x, (copyUvs.w - copyUvs.y) * tmpUV.y + copyUvs.y);\r\n                u += 2;\r\n            }\r\n\r\n            if (copy.color) {\r\n                this._color.copyFrom(tmpColor);\r\n            } else {\r\n                const color = this._color;\r\n                if (meshCol && meshCol[c] !== undefined) {\r\n                    color.r = meshCol[c];\r\n                    color.g = meshCol[c + 1];\r\n                    color.b = meshCol[c + 2];\r\n                    color.a = meshCol[c + 3];\r\n                } else {\r\n                    color.r = 1.0;\r\n                    color.g = 1.0;\r\n                    color.b = 1.0;\r\n                    color.a = 1.0;\r\n                }\r\n            }\r\n            colors.push(this._color.r, this._color.g, this._color.b, this._color.a);\r\n            c += 4;\r\n\r\n            if (!this.recomputeNormals && meshNor) {\r\n                Vector3.TransformNormalFromFloatsToRef(meshNor[n], meshNor[n + 1], meshNor[n + 2], rotMatrix, tmpVector);\r\n                normals.push(tmpVector.x, tmpVector.y, tmpVector.z);\r\n                n += 3;\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < meshInd.length; i++) {\r\n            const current_ind = p + meshInd[i];\r\n            indices.push(current_ind);\r\n            if (current_ind > 65535) {\r\n                this._needs32Bits = true;\r\n            }\r\n        }\r\n\r\n        if (this._depthSort || this._multimaterialEnabled) {\r\n            const matIndex = copy.materialIndex !== null ? copy.materialIndex : 0;\r\n            this.depthSortedParticles.push(new DepthSortedParticle(idx, ind, meshInd.length, matIndex));\r\n        }\r\n\r\n        return copy;\r\n    }\r\n\r\n    /**\r\n     * Returns a shape Vector3 array from positions float array\r\n     * @param positions float array\r\n     * @returns a vector3 array\r\n     * @internal\r\n     */\r\n    protected _posToShape(positions: number[] | Float32Array): Vector3[] {\r\n        const shape = [];\r\n        for (let i = 0; i < positions.length; i += 3) {\r\n            shape.push(Vector3.FromArray(positions, i));\r\n        }\r\n        return shape;\r\n    }\r\n\r\n    /**\r\n     * Returns a shapeUV array from a float uvs (array deep copy)\r\n     * @param uvs as a float array\r\n     * @returns a shapeUV array\r\n     * @internal\r\n     */\r\n    protected _uvsToShapeUV(uvs: number[] | Float32Array): number[] {\r\n        const shapeUV = [];\r\n        if (uvs) {\r\n            for (let i = 0; i < uvs.length; i++) {\r\n                shapeUV.push(uvs[i]);\r\n            }\r\n        }\r\n        return shapeUV;\r\n    }\r\n\r\n    /**\r\n     * Adds a new particle object in the particles array\r\n     * @param idx particle index in particles array\r\n     * @param id particle id\r\n     * @param idxpos positionIndex : the starting index of the particle vertices in the SPS \"positions\" array\r\n     * @param idxind indiceIndex : he starting index of the particle indices in the SPS \"indices\" array\r\n     * @param model particle ModelShape object\r\n     * @param shapeId model shape identifier\r\n     * @param idxInShape index of the particle in the current model\r\n     * @param bInfo model bounding info object\r\n     * @param storage target storage array, if any\r\n     * @internal\r\n     */\r\n    protected _addParticle(\r\n        idx: number,\r\n        id: number,\r\n        idxpos: number,\r\n        idxind: number,\r\n        model: ModelShape,\r\n        shapeId: number,\r\n        idxInShape: number,\r\n        bInfo: Nullable<BoundingInfo> = null,\r\n        storage: Nullable<[]> = null\r\n    ): SolidParticle {\r\n        const sp = new SolidParticle(idx, id, idxpos, idxind, model, shapeId, idxInShape, this, bInfo);\r\n        const target = storage ? storage : this.particles;\r\n        target.push(sp);\r\n        return sp;\r\n    }\r\n\r\n    /**\r\n     * Adds some particles to the SPS from the model shape. Returns the shape id.\r\n     * Please read the doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/immutable_sps\r\n     * @param mesh is any Mesh object that will be used as a model for the solid particles.\r\n     * @param nb (positive integer) the number of particles to be created from this model\r\n     * @param options {positionFunction} is an optional javascript function to called for each particle on SPS creation.\r\n     * {vertexFunction} is an optional javascript function to called for each vertex of each particle on SPS creation\r\n     * {storage} (optional existing array) is an array where the particles will be stored for a further use instead of being inserted in the SPS.\r\n     * @param options.positionFunction\r\n     * @param options.vertexFunction\r\n     * @param options.storage\r\n     * @returns the number of shapes in the system\r\n     */\r\n    public addShape(mesh: Mesh, nb: number, options?: { positionFunction?: any; vertexFunction?: any; storage?: [] }): number {\r\n        const meshPos = <FloatArray>mesh.getVerticesData(VertexBuffer.PositionKind);\r\n        const meshInd = <IndicesArray>mesh.getIndices();\r\n        const meshUV = <FloatArray>mesh.getVerticesData(VertexBuffer.UVKind);\r\n        const meshCol = <FloatArray>mesh.getVerticesData(VertexBuffer.ColorKind);\r\n        const meshNor = <FloatArray>mesh.getVerticesData(VertexBuffer.NormalKind);\r\n        this.recomputeNormals = meshNor ? false : true;\r\n        const indices = Array.from(meshInd);\r\n        const shapeNormals = Array.from(meshNor);\r\n        const shapeColors = meshCol ? Array.from(meshCol) : [];\r\n        const storage = options && options.storage ? options.storage : null;\r\n        let bbInfo: Nullable<BoundingInfo> = null;\r\n        if (this._particlesIntersect) {\r\n            bbInfo = mesh.getBoundingInfo();\r\n        }\r\n\r\n        const shape = this._posToShape(meshPos);\r\n        const shapeUV = this._uvsToShapeUV(meshUV);\r\n\r\n        const posfunc = options ? options.positionFunction : null;\r\n        const vtxfunc = options ? options.vertexFunction : null;\r\n        let material = null;\r\n        if (this._useModelMaterial) {\r\n            material = mesh.material ? mesh.material : this._setDefaultMaterial();\r\n        }\r\n        const modelShape = new ModelShape(this._shapeCounter, shape, indices, shapeNormals, shapeColors, shapeUV, posfunc, vtxfunc, material);\r\n\r\n        // particles\r\n        for (let i = 0; i < nb; i++) {\r\n            this._insertNewParticle(this.nbParticles, i, modelShape, shape, meshInd, meshUV, meshCol, meshNor, bbInfo, storage, options);\r\n        }\r\n        this._shapeCounter++;\r\n        this._isNotBuilt = true; // buildMesh() call is now expected for setParticles() to work\r\n        return this._shapeCounter - 1;\r\n    }\r\n\r\n    /**\r\n     * Rebuilds a particle back to its just built status : if needed, recomputes the custom positions and vertices\r\n     * @internal\r\n     */\r\n    protected _rebuildParticle(particle: SolidParticle, reset: boolean = false): void {\r\n        this._resetCopy();\r\n        const copy = this._copy;\r\n        if (particle._model._positionFunction) {\r\n            // recall to stored custom positionFunction\r\n            particle._model._positionFunction(copy, particle.idx, particle.idxInShape);\r\n        }\r\n\r\n        const rotMatrix = TmpVectors.Matrix[0];\r\n        const tmpVertex = TmpVectors.Vector3[0];\r\n        const tmpRotated = TmpVectors.Vector3[1];\r\n        const pivotBackTranslation = TmpVectors.Vector3[2];\r\n        const scaledPivot = TmpVectors.Vector3[3];\r\n\r\n        copy.getRotationMatrix(rotMatrix);\r\n\r\n        particle.pivot.multiplyToRef(particle.scaling, scaledPivot);\r\n\r\n        if (copy.translateFromPivot) {\r\n            pivotBackTranslation.copyFromFloats(0.0, 0.0, 0.0);\r\n        } else {\r\n            pivotBackTranslation.copyFrom(scaledPivot);\r\n        }\r\n\r\n        const shape = particle._model._shape;\r\n\r\n        for (let pt = 0; pt < shape.length; pt++) {\r\n            tmpVertex.copyFrom(shape[pt]);\r\n            if (particle._model._vertexFunction) {\r\n                particle._model._vertexFunction(copy, tmpVertex, pt); // recall to stored vertexFunction\r\n            }\r\n\r\n            tmpVertex.multiplyInPlace(copy.scaling).subtractInPlace(scaledPivot);\r\n            Vector3.TransformCoordinatesToRef(tmpVertex, rotMatrix, tmpRotated);\r\n            tmpRotated\r\n                .addInPlace(pivotBackTranslation)\r\n                .addInPlace(copy.position)\r\n                .toArray(this._positions32, particle._pos + pt * 3);\r\n        }\r\n        if (reset) {\r\n            particle.position.setAll(0.0);\r\n            particle.rotation.setAll(0.0);\r\n            particle.rotationQuaternion = null;\r\n            particle.scaling.setAll(1.0);\r\n            particle.uvs.setAll(0.0);\r\n            particle.pivot.setAll(0.0);\r\n            particle.translateFromPivot = false;\r\n            particle.parentId = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the whole mesh and updates the VBO : custom positions and vertices are recomputed if needed.\r\n     * @param reset boolean, default false : if the particles must be reset at position and rotation zero, scaling 1, color white, initial UVs and not parented.\r\n     * @returns the SPS.\r\n     */\r\n    public rebuildMesh(reset: boolean = false): SolidParticleSystem {\r\n        for (let p = 0; p < this.particles.length; p++) {\r\n            this._rebuildParticle(this.particles[p], reset);\r\n        }\r\n        this.mesh.updateVerticesData(VertexBuffer.PositionKind, this._positions32, false, false);\r\n        return this;\r\n    }\r\n\r\n    /** Removes the particles from the start-th to the end-th included from an expandable SPS (required).\r\n     *  Returns an array with the removed particles.\r\n     *  If the number of particles to remove is lower than zero or greater than the global remaining particle number, then an empty array is returned.\r\n     *  The SPS can't be empty so at least one particle needs to remain in place.\r\n     *  Under the hood, the VertexData array, so the VBO buffer, is recreated each call.\r\n     * @param start index of the first particle to remove\r\n     * @param end index of the last particle to remove (included)\r\n     * @returns an array populated with the removed particles\r\n     */\r\n    public removeParticles(start: number, end: number): SolidParticle[] {\r\n        const nb = end - start + 1;\r\n        if (!this._expandable || nb <= 0 || nb >= this.nbParticles || !this._updatable) {\r\n            return [];\r\n        }\r\n        const particles = this.particles;\r\n        const currentNb = this.nbParticles;\r\n        if (end < currentNb - 1) {\r\n            // update the particle indexes in the positions array in case they're remaining particles after the last removed\r\n            const firstRemaining = end + 1;\r\n            const shiftPos = particles[firstRemaining]._pos - particles[start]._pos;\r\n            const shifInd = particles[firstRemaining]._ind - particles[start]._ind;\r\n            for (let i = firstRemaining; i < currentNb; i++) {\r\n                const part = particles[i];\r\n                part._pos -= shiftPos;\r\n                part._ind -= shifInd;\r\n            }\r\n        }\r\n        const removed = particles.splice(start, nb);\r\n        this._positions.length = 0;\r\n        this._indices.length = 0;\r\n        this._colors.length = 0;\r\n        this._uvs.length = 0;\r\n        this._normals.length = 0;\r\n        this._index = 0;\r\n        this._idxOfId.length = 0;\r\n        if (this._depthSort || this._multimaterialEnabled) {\r\n            this.depthSortedParticles = [];\r\n        }\r\n        let ind = 0;\r\n        const particlesLength = particles.length;\r\n        for (let p = 0; p < particlesLength; p++) {\r\n            const particle = particles[p];\r\n            const model = particle._model;\r\n            const shape = model._shape;\r\n            const modelIndices = model._indices;\r\n            const modelNormals = model._normals;\r\n            const modelColors = model._shapeColors;\r\n            const modelUVs = model._shapeUV;\r\n            particle.idx = p;\r\n            this._idxOfId[particle.id] = p;\r\n            this._meshBuilder(\r\n                this._index,\r\n                ind,\r\n                shape,\r\n                this._positions,\r\n                modelIndices,\r\n                this._indices,\r\n                modelUVs,\r\n                this._uvs,\r\n                modelColors,\r\n                this._colors,\r\n                modelNormals,\r\n                this._normals,\r\n                particle.idx,\r\n                particle.idxInShape,\r\n                null,\r\n                model\r\n            );\r\n            this._index += shape.length;\r\n            ind += modelIndices.length;\r\n        }\r\n        this.nbParticles -= nb;\r\n        this._isNotBuilt = true; // buildMesh() call is now expected for setParticles() to work\r\n        return removed;\r\n    }\r\n\r\n    /**\r\n     * Inserts some pre-created particles in the solid particle system so that they can be managed by setParticles().\r\n     * @param solidParticleArray an array populated with Solid Particles objects\r\n     * @returns the SPS\r\n     */\r\n    public insertParticlesFromArray(solidParticleArray: SolidParticle[]): SolidParticleSystem {\r\n        if (!this._expandable) {\r\n            return this;\r\n        }\r\n        let idxInShape = 0;\r\n        let currentShapeId = solidParticleArray[0].shapeId;\r\n        const nb = solidParticleArray.length;\r\n        for (let i = 0; i < nb; i++) {\r\n            const sp = solidParticleArray[i];\r\n            const model = sp._model;\r\n            const shape = model._shape;\r\n            const meshInd = model._indices;\r\n            const meshUV = model._shapeUV;\r\n            const meshCol = model._shapeColors;\r\n            const meshNor = model._normals;\r\n            const noNor = meshNor ? false : true;\r\n            this.recomputeNormals = noNor || this.recomputeNormals;\r\n            const bbInfo = sp.getBoundingInfo();\r\n            const newPart = this._insertNewParticle(this.nbParticles, idxInShape, model, shape, meshInd, meshUV, meshCol, meshNor, bbInfo, null, null);\r\n            sp.copyToRef(newPart!);\r\n            idxInShape++;\r\n            if (currentShapeId != sp.shapeId) {\r\n                currentShapeId = sp.shapeId;\r\n                idxInShape = 0;\r\n            }\r\n        }\r\n        this._isNotBuilt = true; // buildMesh() call is now expected for setParticles() to work\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new particle and modifies the SPS mesh geometry :\r\n     * - calls _meshBuilder() to increase the SPS mesh geometry step by step\r\n     * - calls _addParticle() to populate the particle array\r\n     * factorized code from addShape() and insertParticlesFromArray()\r\n     * @param idx particle index in the particles array\r\n     * @param i particle index in its shape\r\n     * @param modelShape particle ModelShape object\r\n     * @param shape shape vertex array\r\n     * @param meshInd shape indices array\r\n     * @param meshUV shape uv array\r\n     * @param meshCol shape color array\r\n     * @param meshNor shape normals array\r\n     * @param bbInfo shape bounding info\r\n     * @param storage target particle storage\r\n     * @param options\r\n     * @options addShape() passed options\r\n     * @internal\r\n     */\r\n    protected _insertNewParticle(\r\n        idx: number,\r\n        i: number,\r\n        modelShape: ModelShape,\r\n        shape: Vector3[],\r\n        meshInd: IndicesArray,\r\n        meshUV: number[] | Float32Array,\r\n        meshCol: number[] | Float32Array,\r\n        meshNor: number[] | Float32Array,\r\n        bbInfo: Nullable<BoundingInfo>,\r\n        storage: Nullable<[]>,\r\n        options: any\r\n    ): Nullable<SolidParticle> {\r\n        const currentPos = this._positions.length;\r\n        const currentInd = this._indices.length;\r\n        const currentCopy = this._meshBuilder(\r\n            this._index,\r\n            currentInd,\r\n            shape,\r\n            this._positions,\r\n            meshInd,\r\n            this._indices,\r\n            meshUV,\r\n            this._uvs,\r\n            meshCol,\r\n            this._colors,\r\n            meshNor,\r\n            this._normals,\r\n            idx,\r\n            i,\r\n            options,\r\n            modelShape\r\n        );\r\n        let sp: Nullable<SolidParticle> = null;\r\n        if (this._updatable) {\r\n            sp = this._addParticle(this.nbParticles, this._lastParticleId, currentPos, currentInd, modelShape, this._shapeCounter, i, bbInfo, storage);\r\n            sp.position.copyFrom(currentCopy.position);\r\n            sp.rotation.copyFrom(currentCopy.rotation);\r\n            if (currentCopy.rotationQuaternion) {\r\n                if (sp.rotationQuaternion) {\r\n                    sp.rotationQuaternion.copyFrom(currentCopy.rotationQuaternion);\r\n                } else {\r\n                    sp.rotationQuaternion = currentCopy.rotationQuaternion.clone();\r\n                }\r\n            }\r\n            if (currentCopy.color) {\r\n                if (sp.color) {\r\n                    sp.color.copyFrom(currentCopy.color);\r\n                } else {\r\n                    sp.color = currentCopy.color.clone();\r\n                }\r\n            }\r\n            sp.scaling.copyFrom(currentCopy.scaling);\r\n            sp.uvs.copyFrom(currentCopy.uvs);\r\n            if (currentCopy.materialIndex !== null) {\r\n                sp.materialIndex = currentCopy.materialIndex;\r\n            }\r\n            if (this.expandable) {\r\n                this._idxOfId[sp.id] = sp.idx;\r\n            }\r\n        }\r\n        if (!storage) {\r\n            this._index += shape.length;\r\n            this.nbParticles++;\r\n            this._lastParticleId++;\r\n        }\r\n        return sp;\r\n    }\r\n\r\n    /**\r\n     *  Sets all the particles : this method actually really updates the mesh according to the particle positions, rotations, colors, textures, etc.\r\n     *  This method calls `updateParticle()` for each particle of the SPS.\r\n     *  For an animated SPS, it is usually called within the render loop.\r\n     * This methods does nothing if called on a non updatable or not yet built SPS. Example : buildMesh() not called after having added or removed particles from an expandable SPS.\r\n     * @param start The particle index in the particle array where to start to compute the particle property values _(default 0)_\r\n     * @param end The particle index in the particle array where to stop to compute the particle property values _(default nbParticle - 1)_\r\n     * @param update If the mesh must be finally updated on this call after all the particle computations _(default true)_\r\n     * @returns the SPS.\r\n     */\r\n    public setParticles(start: number = 0, end: number = this.nbParticles - 1, update: boolean = true): SolidParticleSystem {\r\n        if (!this._updatable || this._isNotBuilt) {\r\n            return this;\r\n        }\r\n\r\n        // custom beforeUpdate\r\n        this.beforeUpdateParticles(start, end, update);\r\n\r\n        const rotMatrix = TmpVectors.Matrix[0];\r\n        const invertedMatrix = TmpVectors.Matrix[1];\r\n        const mesh = this.mesh;\r\n        const colors32 = this._colors32;\r\n        const positions32 = this._positions32;\r\n        const normals32 = this._normals32;\r\n        const uvs32 = this._uvs32;\r\n        const indices32 = this._indices32;\r\n        const indices = this._indices;\r\n        const fixedNormal32 = this._fixedNormal32;\r\n        const depthSortParticles = this._depthSort && this._depthSortParticles;\r\n\r\n        const tempVectors = TmpVectors.Vector3;\r\n        const camAxisX = tempVectors[5].copyFromFloats(1.0, 0.0, 0.0);\r\n        const camAxisY = tempVectors[6].copyFromFloats(0.0, 1.0, 0.0);\r\n        const camAxisZ = tempVectors[7].copyFromFloats(0.0, 0.0, 1.0);\r\n        const minimum = tempVectors[8].setAll(Number.MAX_VALUE);\r\n        const maximum = tempVectors[9].setAll(-Number.MAX_VALUE);\r\n        const camInvertedPosition = tempVectors[10].setAll(0);\r\n\r\n        const tmpVertex = this._tmpVertex;\r\n        const tmpVector = tmpVertex.position;\r\n        const tmpColor = tmpVertex.color;\r\n        const tmpUV = tmpVertex.uv;\r\n\r\n        // cases when the World Matrix is to be computed first\r\n        if (this.billboard || this._depthSort) {\r\n            this.mesh.computeWorldMatrix(true);\r\n            this.mesh._worldMatrix.invertToRef(invertedMatrix);\r\n        }\r\n        // if the particles will always face the camera\r\n        if (this.billboard) {\r\n            // compute the camera position and un-rotate it by the current mesh rotation\r\n            const tmpVector0 = tempVectors[0];\r\n            this._camera.getDirectionToRef(Axis.Z, tmpVector0);\r\n            Vector3.TransformNormalToRef(tmpVector0, invertedMatrix, camAxisZ);\r\n            camAxisZ.normalize();\r\n            // same for camera up vector extracted from the cam view matrix\r\n            const view = this._camera.getViewMatrix(true);\r\n            Vector3.TransformNormalFromFloatsToRef(view.m[1], view.m[5], view.m[9], invertedMatrix, camAxisY);\r\n            Vector3.CrossToRef(camAxisY, camAxisZ, camAxisX);\r\n            camAxisY.normalize();\r\n            camAxisX.normalize();\r\n        }\r\n\r\n        // if depthSort, compute the camera global position in the mesh local system\r\n        if (this._depthSort) {\r\n            Vector3.TransformCoordinatesToRef(this._camera.globalPosition, invertedMatrix, camInvertedPosition); // then un-rotate the camera\r\n        }\r\n\r\n        Matrix.IdentityToRef(rotMatrix);\r\n        let idx = 0; // current position index in the global array positions32\r\n        let index = 0; // position start index in the global array positions32 of the current particle\r\n        let colidx = 0; // current color index in the global array colors32\r\n        let colorIndex = 0; // color start index in the global array colors32 of the current particle\r\n        let uvidx = 0; // current uv index in the global array uvs32\r\n        let uvIndex = 0; // uv start index in the global array uvs32 of the current particle\r\n        let pt = 0; // current index in the particle model shape\r\n\r\n        if (this.mesh.isFacetDataEnabled) {\r\n            this._computeBoundingBox = true;\r\n        }\r\n\r\n        end = end >= this.nbParticles ? this.nbParticles - 1 : end;\r\n        if (this._computeBoundingBox) {\r\n            if (start != 0 || end != this.nbParticles - 1) {\r\n                // only some particles are updated, then use the current existing BBox basis. Note : it can only increase.\r\n                const boundingInfo = this.mesh.getBoundingInfo();\r\n                if (boundingInfo) {\r\n                    minimum.copyFrom(boundingInfo.minimum);\r\n                    maximum.copyFrom(boundingInfo.maximum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // particle loop\r\n        index = this.particles[start]._pos;\r\n        const vpos = (index / 3) | 0;\r\n        colorIndex = vpos * 4;\r\n        uvIndex = vpos * 2;\r\n\r\n        for (let p = start; p <= end; p++) {\r\n            const particle = this.particles[p];\r\n\r\n            // call to custom user function to update the particle properties\r\n            this.updateParticle(particle);\r\n\r\n            const shape = particle._model._shape;\r\n            const shapeUV = particle._model._shapeUV;\r\n            const particleRotationMatrix = particle._rotationMatrix;\r\n            const particlePosition = particle.position;\r\n            const particleRotation = particle.rotation;\r\n            const particleScaling = particle.scaling;\r\n            const particleGlobalPosition = particle._globalPosition;\r\n\r\n            // camera-particle distance for depth sorting\r\n            if (depthSortParticles) {\r\n                const dsp = this.depthSortedParticles[p];\r\n                dsp.idx = particle.idx;\r\n                dsp.ind = particle._ind;\r\n                dsp.indicesLength = particle._model._indicesLength;\r\n                dsp.sqDistance = Vector3.DistanceSquared(particle.position, camInvertedPosition);\r\n            }\r\n\r\n            // skip the computations for inactive or already invisible particles\r\n            if (!particle.alive || (particle._stillInvisible && !particle.isVisible && !this._recomputeInvisibles)) {\r\n                // increment indexes for the next particle\r\n                pt = shape.length;\r\n                index += pt * 3;\r\n                colorIndex += pt * 4;\r\n                uvIndex += pt * 2;\r\n                continue;\r\n            }\r\n\r\n            if (particle.isVisible) {\r\n                particle._stillInvisible = false; // un-mark permanent invisibility\r\n\r\n                const scaledPivot = tempVectors[12];\r\n                particle.pivot.multiplyToRef(particleScaling, scaledPivot);\r\n\r\n                // particle rotation matrix\r\n                if (this.billboard) {\r\n                    particleRotation.x = 0.0;\r\n                    particleRotation.y = 0.0;\r\n                }\r\n                if (this._computeParticleRotation || this.billboard) {\r\n                    particle.getRotationMatrix(rotMatrix);\r\n                }\r\n\r\n                const particleHasParent = particle.parentId !== null;\r\n                if (particleHasParent) {\r\n                    const parent = this.getParticleById(particle.parentId!);\r\n                    if (parent) {\r\n                        const parentRotationMatrix = parent._rotationMatrix;\r\n                        const parentGlobalPosition = parent._globalPosition;\r\n\r\n                        const rotatedY = particlePosition.x * parentRotationMatrix[1] + particlePosition.y * parentRotationMatrix[4] + particlePosition.z * parentRotationMatrix[7];\r\n                        const rotatedX = particlePosition.x * parentRotationMatrix[0] + particlePosition.y * parentRotationMatrix[3] + particlePosition.z * parentRotationMatrix[6];\r\n                        const rotatedZ = particlePosition.x * parentRotationMatrix[2] + particlePosition.y * parentRotationMatrix[5] + particlePosition.z * parentRotationMatrix[8];\r\n\r\n                        particleGlobalPosition.x = parentGlobalPosition.x + rotatedX;\r\n                        particleGlobalPosition.y = parentGlobalPosition.y + rotatedY;\r\n                        particleGlobalPosition.z = parentGlobalPosition.z + rotatedZ;\r\n\r\n                        if (this._computeParticleRotation || this.billboard) {\r\n                            const rotMatrixValues = rotMatrix.m;\r\n                            particleRotationMatrix[0] =\r\n                                rotMatrixValues[0] * parentRotationMatrix[0] + rotMatrixValues[1] * parentRotationMatrix[3] + rotMatrixValues[2] * parentRotationMatrix[6];\r\n                            particleRotationMatrix[1] =\r\n                                rotMatrixValues[0] * parentRotationMatrix[1] + rotMatrixValues[1] * parentRotationMatrix[4] + rotMatrixValues[2] * parentRotationMatrix[7];\r\n                            particleRotationMatrix[2] =\r\n                                rotMatrixValues[0] * parentRotationMatrix[2] + rotMatrixValues[1] * parentRotationMatrix[5] + rotMatrixValues[2] * parentRotationMatrix[8];\r\n                            particleRotationMatrix[3] =\r\n                                rotMatrixValues[4] * parentRotationMatrix[0] + rotMatrixValues[5] * parentRotationMatrix[3] + rotMatrixValues[6] * parentRotationMatrix[6];\r\n                            particleRotationMatrix[4] =\r\n                                rotMatrixValues[4] * parentRotationMatrix[1] + rotMatrixValues[5] * parentRotationMatrix[4] + rotMatrixValues[6] * parentRotationMatrix[7];\r\n                            particleRotationMatrix[5] =\r\n                                rotMatrixValues[4] * parentRotationMatrix[2] + rotMatrixValues[5] * parentRotationMatrix[5] + rotMatrixValues[6] * parentRotationMatrix[8];\r\n                            particleRotationMatrix[6] =\r\n                                rotMatrixValues[8] * parentRotationMatrix[0] + rotMatrixValues[9] * parentRotationMatrix[3] + rotMatrixValues[10] * parentRotationMatrix[6];\r\n                            particleRotationMatrix[7] =\r\n                                rotMatrixValues[8] * parentRotationMatrix[1] + rotMatrixValues[9] * parentRotationMatrix[4] + rotMatrixValues[10] * parentRotationMatrix[7];\r\n                            particleRotationMatrix[8] =\r\n                                rotMatrixValues[8] * parentRotationMatrix[2] + rotMatrixValues[9] * parentRotationMatrix[5] + rotMatrixValues[10] * parentRotationMatrix[8];\r\n                        }\r\n                    } else {\r\n                        // in case the parent were removed at some moment\r\n                        particle.parentId = null;\r\n                    }\r\n                } else {\r\n                    particleGlobalPosition.x = particlePosition.x;\r\n                    particleGlobalPosition.y = particlePosition.y;\r\n                    particleGlobalPosition.z = particlePosition.z;\r\n\r\n                    if (this._computeParticleRotation || this.billboard) {\r\n                        const rotMatrixValues = rotMatrix.m;\r\n                        particleRotationMatrix[0] = rotMatrixValues[0];\r\n                        particleRotationMatrix[1] = rotMatrixValues[1];\r\n                        particleRotationMatrix[2] = rotMatrixValues[2];\r\n                        particleRotationMatrix[3] = rotMatrixValues[4];\r\n                        particleRotationMatrix[4] = rotMatrixValues[5];\r\n                        particleRotationMatrix[5] = rotMatrixValues[6];\r\n                        particleRotationMatrix[6] = rotMatrixValues[8];\r\n                        particleRotationMatrix[7] = rotMatrixValues[9];\r\n                        particleRotationMatrix[8] = rotMatrixValues[10];\r\n                    }\r\n                }\r\n\r\n                const pivotBackTranslation = tempVectors[11];\r\n                if (particle.translateFromPivot) {\r\n                    pivotBackTranslation.setAll(0.0);\r\n                } else {\r\n                    pivotBackTranslation.copyFrom(scaledPivot);\r\n                }\r\n\r\n                // particle vertex loop\r\n                for (pt = 0; pt < shape.length; pt++) {\r\n                    idx = index + pt * 3;\r\n                    colidx = colorIndex + pt * 4;\r\n                    uvidx = uvIndex + pt * 2;\r\n                    const iu = 2 * pt;\r\n                    const iv = iu + 1;\r\n\r\n                    tmpVector.copyFrom(shape[pt]);\r\n                    if (this._computeParticleColor && particle.color) {\r\n                        tmpColor.copyFrom(particle.color);\r\n                    }\r\n                    if (this._computeParticleTexture) {\r\n                        tmpUV.copyFromFloats(shapeUV[iu], shapeUV[iv]);\r\n                    }\r\n                    if (this._computeParticleVertex) {\r\n                        this.updateParticleVertex(particle, tmpVertex, pt);\r\n                    }\r\n\r\n                    // positions\r\n                    const vertexX = tmpVector.x * particleScaling.x - scaledPivot.x;\r\n                    const vertexY = tmpVector.y * particleScaling.y - scaledPivot.y;\r\n                    const vertexZ = tmpVector.z * particleScaling.z - scaledPivot.z;\r\n\r\n                    let rotatedX = vertexX * particleRotationMatrix[0] + vertexY * particleRotationMatrix[3] + vertexZ * particleRotationMatrix[6];\r\n                    let rotatedY = vertexX * particleRotationMatrix[1] + vertexY * particleRotationMatrix[4] + vertexZ * particleRotationMatrix[7];\r\n                    let rotatedZ = vertexX * particleRotationMatrix[2] + vertexY * particleRotationMatrix[5] + vertexZ * particleRotationMatrix[8];\r\n\r\n                    rotatedX += pivotBackTranslation.x;\r\n                    rotatedY += pivotBackTranslation.y;\r\n                    rotatedZ += pivotBackTranslation.z;\r\n\r\n                    const px = (positions32[idx] = particleGlobalPosition.x + camAxisX.x * rotatedX + camAxisY.x * rotatedY + camAxisZ.x * rotatedZ);\r\n                    const py = (positions32[idx + 1] = particleGlobalPosition.y + camAxisX.y * rotatedX + camAxisY.y * rotatedY + camAxisZ.y * rotatedZ);\r\n                    const pz = (positions32[idx + 2] = particleGlobalPosition.z + camAxisX.z * rotatedX + camAxisY.z * rotatedY + camAxisZ.z * rotatedZ);\r\n\r\n                    if (this._computeBoundingBox) {\r\n                        minimum.minimizeInPlaceFromFloats(px, py, pz);\r\n                        maximum.maximizeInPlaceFromFloats(px, py, pz);\r\n                    }\r\n\r\n                    // normals : if the particles can't be morphed then just rotate the normals, what is much more faster than ComputeNormals()\r\n                    if (!this._computeParticleVertex) {\r\n                        const normalx = fixedNormal32[idx];\r\n                        const normaly = fixedNormal32[idx + 1];\r\n                        const normalz = fixedNormal32[idx + 2];\r\n\r\n                        const rotatedx = normalx * particleRotationMatrix[0] + normaly * particleRotationMatrix[3] + normalz * particleRotationMatrix[6];\r\n                        const rotatedy = normalx * particleRotationMatrix[1] + normaly * particleRotationMatrix[4] + normalz * particleRotationMatrix[7];\r\n                        const rotatedz = normalx * particleRotationMatrix[2] + normaly * particleRotationMatrix[5] + normalz * particleRotationMatrix[8];\r\n\r\n                        normals32[idx] = camAxisX.x * rotatedx + camAxisY.x * rotatedy + camAxisZ.x * rotatedz;\r\n                        normals32[idx + 1] = camAxisX.y * rotatedx + camAxisY.y * rotatedy + camAxisZ.y * rotatedz;\r\n                        normals32[idx + 2] = camAxisX.z * rotatedx + camAxisY.z * rotatedy + camAxisZ.z * rotatedz;\r\n                    }\r\n\r\n                    if (this._computeParticleColor && particle.color) {\r\n                        const colors32 = this._colors32;\r\n                        colors32[colidx] = tmpColor.r;\r\n                        colors32[colidx + 1] = tmpColor.g;\r\n                        colors32[colidx + 2] = tmpColor.b;\r\n                        colors32[colidx + 3] = tmpColor.a;\r\n                    }\r\n\r\n                    if (this._computeParticleTexture) {\r\n                        const uvs = particle.uvs;\r\n                        uvs32[uvidx] = tmpUV.x * (uvs.z - uvs.x) + uvs.x;\r\n                        uvs32[uvidx + 1] = tmpUV.y * (uvs.w - uvs.y) + uvs.y;\r\n                    }\r\n                }\r\n            }\r\n            // particle just set invisible : scaled to zero and positioned at the origin\r\n            else {\r\n                particle._stillInvisible = true; // mark the particle as invisible\r\n                for (pt = 0; pt < shape.length; pt++) {\r\n                    idx = index + pt * 3;\r\n                    colidx = colorIndex + pt * 4;\r\n                    uvidx = uvIndex + pt * 2;\r\n\r\n                    positions32[idx] = positions32[idx + 1] = positions32[idx + 2] = 0;\r\n                    normals32[idx] = normals32[idx + 1] = normals32[idx + 2] = 0;\r\n                    if (this._computeParticleColor && particle.color) {\r\n                        const color = particle.color;\r\n                        colors32[colidx] = color.r;\r\n                        colors32[colidx + 1] = color.g;\r\n                        colors32[colidx + 2] = color.b;\r\n                        colors32[colidx + 3] = color.a;\r\n                    }\r\n                    if (this._computeParticleTexture) {\r\n                        const uvs = particle.uvs;\r\n                        uvs32[uvidx] = shapeUV[pt * 2] * (uvs.z - uvs.x) + uvs.x;\r\n                        uvs32[uvidx + 1] = shapeUV[pt * 2 + 1] * (uvs.w - uvs.y) + uvs.y;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // if the particle intersections must be computed : update the bbInfo\r\n            if (this._particlesIntersect) {\r\n                const bInfo = particle.getBoundingInfo();\r\n                const bBox = bInfo.boundingBox;\r\n                const bSphere = bInfo.boundingSphere;\r\n                const modelBoundingInfo = particle._modelBoundingInfo;\r\n                if (!this._bSphereOnly) {\r\n                    // place, scale and rotate the particle bbox within the SPS local system, then update it\r\n                    const modelBoundingInfoVectors = modelBoundingInfo.boundingBox.vectors;\r\n\r\n                    const tempMin = tempVectors[1];\r\n                    const tempMax = tempVectors[2];\r\n                    tempMin.setAll(Number.MAX_VALUE);\r\n                    tempMax.setAll(-Number.MAX_VALUE);\r\n                    for (let b = 0; b < 8; b++) {\r\n                        const scaledX = modelBoundingInfoVectors[b].x * particleScaling.x;\r\n                        const scaledY = modelBoundingInfoVectors[b].y * particleScaling.y;\r\n                        const scaledZ = modelBoundingInfoVectors[b].z * particleScaling.z;\r\n                        const rotatedX = scaledX * particleRotationMatrix[0] + scaledY * particleRotationMatrix[3] + scaledZ * particleRotationMatrix[6];\r\n                        const rotatedY = scaledX * particleRotationMatrix[1] + scaledY * particleRotationMatrix[4] + scaledZ * particleRotationMatrix[7];\r\n                        const rotatedZ = scaledX * particleRotationMatrix[2] + scaledY * particleRotationMatrix[5] + scaledZ * particleRotationMatrix[8];\r\n                        const x = particlePosition.x + camAxisX.x * rotatedX + camAxisY.x * rotatedY + camAxisZ.x * rotatedZ;\r\n                        const y = particlePosition.y + camAxisX.y * rotatedX + camAxisY.y * rotatedY + camAxisZ.y * rotatedZ;\r\n                        const z = particlePosition.z + camAxisX.z * rotatedX + camAxisY.z * rotatedY + camAxisZ.z * rotatedZ;\r\n                        tempMin.minimizeInPlaceFromFloats(x, y, z);\r\n                        tempMax.maximizeInPlaceFromFloats(x, y, z);\r\n                    }\r\n\r\n                    bBox.reConstruct(tempMin, tempMax, mesh._worldMatrix);\r\n                }\r\n\r\n                // place and scale the particle bouding sphere in the SPS local system, then update it\r\n                const minBbox = modelBoundingInfo.minimum.multiplyToRef(particleScaling, tempVectors[1]);\r\n                const maxBbox = modelBoundingInfo.maximum.multiplyToRef(particleScaling, tempVectors[2]);\r\n\r\n                const bSphereCenter = maxBbox.addToRef(minBbox, tempVectors[3]).scaleInPlace(0.5).addInPlace(particleGlobalPosition);\r\n                const halfDiag = maxBbox.subtractToRef(minBbox, tempVectors[4]).scaleInPlace(0.5 * this._bSphereRadiusFactor);\r\n                const bSphereMinBbox = bSphereCenter.subtractToRef(halfDiag, tempVectors[1]);\r\n                const bSphereMaxBbox = bSphereCenter.addToRef(halfDiag, tempVectors[2]);\r\n                bSphere.reConstruct(bSphereMinBbox, bSphereMaxBbox, mesh._worldMatrix);\r\n            }\r\n\r\n            // increment indexes for the next particle\r\n            index = idx + 3;\r\n            colorIndex = colidx + 4;\r\n            uvIndex = uvidx + 2;\r\n        }\r\n\r\n        // if the VBO must be updated\r\n        if (update) {\r\n            if (this._computeParticleColor) {\r\n                const vb = mesh.getVertexBuffer(VertexBuffer.ColorKind);\r\n                if (vb && !mesh.isPickable) {\r\n                    vb.updateDirectly(colors32, 0);\r\n                } else {\r\n                    mesh.updateVerticesData(VertexBuffer.ColorKind, colors32, false, false);\r\n                }\r\n            }\r\n            if (this._computeParticleTexture) {\r\n                const vb = mesh.getVertexBuffer(VertexBuffer.UVKind);\r\n                if (vb && !mesh.isPickable) {\r\n                    vb.updateDirectly(uvs32, 0);\r\n                } else {\r\n                    mesh.updateVerticesData(VertexBuffer.UVKind, uvs32, false, false);\r\n                }\r\n            }\r\n            const vbp = mesh.getVertexBuffer(VertexBuffer.PositionKind);\r\n            if (vbp && !mesh.isPickable) {\r\n                vbp.updateDirectly(positions32, 0);\r\n            } else {\r\n                mesh.updateVerticesData(VertexBuffer.PositionKind, positions32, false, false);\r\n            }\r\n            if (!mesh.areNormalsFrozen || mesh.isFacetDataEnabled) {\r\n                if (this._computeParticleVertex || mesh.isFacetDataEnabled) {\r\n                    // recompute the normals only if the particles can be morphed, update then also the normal reference array _fixedNormal32[]\r\n                    const params = mesh.isFacetDataEnabled ? mesh.getFacetDataParameters() : null;\r\n                    VertexData.ComputeNormals(positions32, indices32, normals32, params);\r\n                    for (let i = 0; i < normals32.length; i++) {\r\n                        fixedNormal32[i] = normals32[i];\r\n                    }\r\n                }\r\n                if (!mesh.areNormalsFrozen) {\r\n                    const vb = mesh.getVertexBuffer(VertexBuffer.NormalKind);\r\n                    if (vb && !mesh.isPickable) {\r\n                        vb.updateDirectly(normals32, 0);\r\n                    } else {\r\n                        mesh.updateVerticesData(VertexBuffer.NormalKind, normals32, false, false);\r\n                    }\r\n                }\r\n            }\r\n            if (depthSortParticles) {\r\n                const depthSortedParticles = this.depthSortedParticles;\r\n                depthSortedParticles.sort(this._depthSortFunction);\r\n                const dspl = depthSortedParticles.length;\r\n                let sid = 0;\r\n                let faceId = 0;\r\n                for (let sorted = 0; sorted < dspl; sorted++) {\r\n                    const sortedParticle = depthSortedParticles[sorted];\r\n                    const lind = sortedParticle.indicesLength;\r\n                    const sind = sortedParticle.ind;\r\n                    for (let i = 0; i < lind; i++) {\r\n                        indices32[sid] = indices[sind + i];\r\n                        sid++;\r\n                        if (this._pickable) {\r\n                            const f = i % 3;\r\n                            if (f == 0) {\r\n                                const pickedData = this.pickedParticles[faceId];\r\n                                pickedData.idx = sortedParticle.idx;\r\n                                pickedData.faceId = faceId;\r\n                                faceId++;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (this._autoFixFaceOrientation) {\r\n                let particleInd = 0;\r\n\r\n                for (let particleIdx = 0; particleIdx < this.particles.length; particleIdx++) {\r\n                    const particle = depthSortParticles ? this.particles[this.depthSortedParticles[particleIdx].idx] : this.particles[particleIdx];\r\n                    const flipFaces = particle.scale.x * particle.scale.y * particle.scale.z < 0;\r\n\r\n                    if (flipFaces) {\r\n                        for (let faceInd = 0; faceInd < particle._model._indicesLength; faceInd += 3) {\r\n                            const tmp = indices[particle._ind + faceInd];\r\n                            indices32[particleInd + faceInd] = indices[particle._ind + faceInd + 1];\r\n                            indices32[particleInd + faceInd + 1] = tmp;\r\n                        }\r\n                    }\r\n\r\n                    particleInd += particle._model._indicesLength;\r\n                }\r\n            }\r\n\r\n            if (depthSortParticles || this._autoFixFaceOrientation) {\r\n                mesh.updateIndices(indices32);\r\n            }\r\n        }\r\n        if (this._computeBoundingBox) {\r\n            if (mesh.hasBoundingInfo) {\r\n                mesh.getBoundingInfo().reConstruct(minimum, maximum, mesh._worldMatrix);\r\n            } else {\r\n                mesh.buildBoundingInfo(minimum, maximum, mesh._worldMatrix);\r\n            }\r\n        }\r\n        if (this._autoUpdateSubMeshes) {\r\n            this.computeSubMeshes();\r\n        }\r\n        this._recomputeInvisibles = false;\r\n        this.afterUpdateParticles(start, end, update);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disposes the SPS.\r\n     */\r\n    public dispose(): void {\r\n        this.mesh.dispose();\r\n        this.vars = null;\r\n        // drop references to internal big arrays for the GC\r\n        (<any>this._positions) = null;\r\n        (<any>this._indices) = null;\r\n        (<any>this._normals) = null;\r\n        (<any>this._uvs) = null;\r\n        (<any>this._colors) = null;\r\n        (<any>this._indices32) = null;\r\n        (<any>this._positions32) = null;\r\n        (<any>this._normals32) = null;\r\n        (<any>this._fixedNormal32) = null;\r\n        (<any>this._uvs32) = null;\r\n        (<any>this._colors32) = null;\r\n        (<any>this.pickedParticles) = null;\r\n        (<any>this.pickedBySubMesh) = null;\r\n        (<any>this._materials) = null;\r\n        (<any>this._materialIndexes) = null;\r\n        (<any>this._indicesByMaterial) = null;\r\n        (<any>this._idxOfId) = null;\r\n    }\r\n    /** Returns an object {idx: number faceId: number} for the picked particle from the passed pickingInfo object.\r\n     * idx is the particle index in the SPS\r\n     * faceId is the picked face index counted within this particle.\r\n     * Returns null if the pickInfo can't identify a picked particle.\r\n     * @param pickingInfo (PickingInfo object)\r\n     * @returns {idx: number, faceId: number} or null\r\n     */\r\n    public pickedParticle(pickingInfo: PickingInfo): Nullable<{ idx: number; faceId: number }> {\r\n        if (pickingInfo.hit) {\r\n            const subMesh = pickingInfo.subMeshId;\r\n            const faceId = pickingInfo.faceId - this.mesh.subMeshes[subMesh].indexStart / 3;\r\n            const picked = this.pickedBySubMesh;\r\n            if (picked[subMesh] && picked[subMesh][faceId]) {\r\n                return picked[subMesh][faceId];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns a SolidParticle object from its identifier : particle.id\r\n     * @param id (integer) the particle Id\r\n     * @returns the searched particle or null if not found in the SPS.\r\n     */\r\n    public getParticleById(id: number): Nullable<SolidParticle> {\r\n        const p = this.particles[id];\r\n        if (p && p.id == id) {\r\n            return p;\r\n        }\r\n        const particles = this.particles;\r\n        const idx = this._idxOfId[id];\r\n        if (idx !== undefined) {\r\n            return particles[idx];\r\n        }\r\n        let i = 0;\r\n        const nb = this.nbParticles;\r\n        while (i < nb) {\r\n            const particle = particles[i];\r\n            if (particle.id == id) {\r\n                return particle;\r\n            }\r\n            i++;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns a new array populated with the particles having the passed shapeId.\r\n     * @param shapeId (integer) the shape identifier\r\n     * @returns a new solid particle array\r\n     */\r\n    public getParticlesByShapeId(shapeId: number): SolidParticle[] {\r\n        const ref: SolidParticle[] = [];\r\n        this.getParticlesByShapeIdToRef(shapeId, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Populates the passed array \"ref\" with the particles having the passed shapeId.\r\n     * @param shapeId the shape identifier\r\n     * @returns the SPS\r\n     * @param ref\r\n     */\r\n    public getParticlesByShapeIdToRef(shapeId: number, ref: SolidParticle[]): SolidParticleSystem {\r\n        ref.length = 0;\r\n        for (let i = 0; i < this.nbParticles; i++) {\r\n            const p = this.particles[i];\r\n            if (p.shapeId == shapeId) {\r\n                ref.push(p);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Computes the required SubMeshes according the materials assigned to the particles.\r\n     * @returns the solid particle system.\r\n     * Does nothing if called before the SPS mesh is built.\r\n     */\r\n    public computeSubMeshes(): SolidParticleSystem {\r\n        if (!this.mesh || !this._multimaterialEnabled) {\r\n            return this;\r\n        }\r\n        const depthSortedParticles = this.depthSortedParticles;\r\n        if (this.particles.length > 0) {\r\n            for (let p = 0; p < this.particles.length; p++) {\r\n                const part = this.particles[p];\r\n                if (!part.materialIndex) {\r\n                    part.materialIndex = 0;\r\n                }\r\n                const sortedPart = depthSortedParticles[p];\r\n                sortedPart.materialIndex = part.materialIndex;\r\n                sortedPart.ind = part._ind;\r\n                sortedPart.indicesLength = part._model._indicesLength;\r\n                sortedPart.idx = part.idx;\r\n            }\r\n        }\r\n        this._sortParticlesByMaterial();\r\n        const indicesByMaterial = this._indicesByMaterial;\r\n        const materialIndexes = this._materialIndexes;\r\n        const mesh = this.mesh;\r\n        mesh.subMeshes = [];\r\n        const vcount = mesh.getTotalVertices();\r\n        for (let m = 0; m < materialIndexes.length; m++) {\r\n            const start = indicesByMaterial[m];\r\n            const count = indicesByMaterial[m + 1] - start;\r\n            const matIndex = materialIndexes[m];\r\n            new SubMesh(matIndex, 0, vcount, start, count, mesh);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Sorts the solid particles by material when MultiMaterial is enabled.\r\n     * Updates the indices32 array.\r\n     * Updates the indicesByMaterial array.\r\n     * Updates the mesh indices array.\r\n     * @returns the SPS\r\n     * @internal\r\n     */\r\n    protected _sortParticlesByMaterial(): SolidParticleSystem {\r\n        const indicesByMaterial = [0];\r\n        this._indicesByMaterial = indicesByMaterial;\r\n        const materialIndexes: number[] = [];\r\n        this._materialIndexes = materialIndexes;\r\n        const depthSortedParticles = this.depthSortedParticles;\r\n        depthSortedParticles.sort(this._materialSortFunction);\r\n        const length = depthSortedParticles.length;\r\n        const indices32 = this._indices32;\r\n        const indices = this._indices;\r\n\r\n        let subMeshIndex = 0;\r\n        let subMeshFaceId = 0;\r\n        let sid = 0;\r\n        let lastMatIndex = depthSortedParticles[0].materialIndex;\r\n        materialIndexes.push(lastMatIndex);\r\n        if (this._pickable) {\r\n            this.pickedBySubMesh = [[]];\r\n            this.pickedParticles = this.pickedBySubMesh[0];\r\n        }\r\n        for (let sorted = 0; sorted < length; sorted++) {\r\n            const sortedPart = depthSortedParticles[sorted];\r\n            const lind = sortedPart.indicesLength;\r\n            const sind = sortedPart.ind;\r\n            if (sortedPart.materialIndex !== lastMatIndex) {\r\n                lastMatIndex = sortedPart.materialIndex;\r\n                indicesByMaterial.push(sid);\r\n                materialIndexes.push(lastMatIndex);\r\n                if (this._pickable) {\r\n                    subMeshIndex++;\r\n                    this.pickedBySubMesh[subMeshIndex] = [];\r\n                    subMeshFaceId = 0;\r\n                }\r\n            }\r\n            let faceId = 0;\r\n            for (let i = 0; i < lind; i++) {\r\n                indices32[sid] = indices[sind + i];\r\n                if (this._pickable) {\r\n                    const f = i % 3;\r\n                    if (f == 0) {\r\n                        const pickedData = this.pickedBySubMesh[subMeshIndex][subMeshFaceId];\r\n                        if (pickedData) {\r\n                            pickedData.idx = sortedPart.idx;\r\n                            pickedData.faceId = faceId;\r\n                        } else {\r\n                            this.pickedBySubMesh[subMeshIndex][subMeshFaceId] = { idx: sortedPart.idx, faceId: faceId };\r\n                        }\r\n                        subMeshFaceId++;\r\n                        faceId++;\r\n                    }\r\n                }\r\n                sid++;\r\n            }\r\n        }\r\n\r\n        indicesByMaterial.push(indices32.length); // add the last number to ease the indices start/count values for subMeshes creation\r\n        if (this._updatable) {\r\n            this.mesh.updateIndices(indices32);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the material indexes by id materialIndexesById[id] = materialIndex\r\n     * @internal\r\n     */\r\n    protected _setMaterialIndexesById() {\r\n        this._materialIndexesById = {};\r\n        for (let i = 0; i < this._materials.length; i++) {\r\n            const id = this._materials[i].uniqueId;\r\n            this._materialIndexesById[id] = i;\r\n        }\r\n    }\r\n    /**\r\n     * Returns an array with unique values of Materials from the passed array\r\n     * @param array the material array to be checked and filtered\r\n     * @internal\r\n     */\r\n    protected _filterUniqueMaterialId(array: Material[]): Material[] {\r\n        const filtered = array.filter(function (value, index, self) {\r\n            return self.indexOf(value) === index;\r\n        });\r\n        return filtered;\r\n    }\r\n    /**\r\n     * Sets a new Standard Material as _defaultMaterial if not already set.\r\n     * @internal\r\n     */\r\n    protected _setDefaultMaterial(): Material {\r\n        if (!this._defaultMaterial) {\r\n            this._defaultMaterial = new StandardMaterial(this.name + \"DefaultMaterial\", this._scene);\r\n        }\r\n        return this._defaultMaterial;\r\n    }\r\n    /**\r\n     * Visibility helper : Recomputes the visible size according to the mesh bounding box\r\n     * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/sps_visibility\r\n     * @returns the SPS.\r\n     */\r\n    public refreshVisibleSize(): SolidParticleSystem {\r\n        if (!this._isVisibilityBoxLocked) {\r\n            this.mesh.refreshBoundingInfo();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Visibility helper : Sets the size of a visibility box, this sets the underlying mesh bounding box.\r\n     * @param size the size (float) of the visibility box\r\n     * note : this doesn't lock the SPS mesh bounding box.\r\n     * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/sps_visibility\r\n     */\r\n    public setVisibilityBox(size: number): void {\r\n        const vis = size / 2;\r\n        this.mesh.buildBoundingInfo(new Vector3(-vis, -vis, -vis), new Vector3(vis, vis, vis));\r\n    }\r\n\r\n    /**\r\n     * Gets whether the SPS as always visible or not\r\n     * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/sps_visibility\r\n     */\r\n    public get isAlwaysVisible(): boolean {\r\n        return this._alwaysVisible;\r\n    }\r\n\r\n    /**\r\n     * Sets the SPS as always visible or not\r\n     * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/sps_visibility\r\n     */\r\n    public set isAlwaysVisible(val: boolean) {\r\n        this._alwaysVisible = val;\r\n        this.mesh.alwaysSelectAsActiveMesh = val;\r\n    }\r\n\r\n    /**\r\n     * Sets the SPS visibility box as locked or not. This enables/disables the underlying mesh bounding box updates.\r\n     * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/sps_visibility\r\n     */\r\n    public set isVisibilityBoxLocked(val: boolean) {\r\n        this._isVisibilityBoxLocked = val;\r\n\r\n        const boundingInfo = this.mesh.getBoundingInfo();\r\n\r\n        boundingInfo.isLocked = val;\r\n    }\r\n\r\n    /**\r\n     * Gets if the SPS visibility box as locked or not. This enables/disables the underlying mesh bounding box updates.\r\n     * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/sps_visibility\r\n     */\r\n    public get isVisibilityBoxLocked(): boolean {\r\n        return this._isVisibilityBoxLocked;\r\n    }\r\n\r\n    /**\r\n     * Tells to `setParticles()` to compute the particle rotations or not.\r\n     * Default value : true. The SPS is faster when it's set to false.\r\n     * Note : the particle rotations aren't stored values, so setting `computeParticleRotation` to false will prevents the particle to rotate.\r\n     */\r\n    public set computeParticleRotation(val: boolean) {\r\n        this._computeParticleRotation = val;\r\n    }\r\n\r\n    /**\r\n     * Tells to `setParticles()` to compute the particle colors or not.\r\n     * Default value : true. The SPS is faster when it's set to false.\r\n     * Note : the particle colors are stored values, so setting `computeParticleColor` to false will keep yet the last colors set.\r\n     */\r\n    public set computeParticleColor(val: boolean) {\r\n        this._computeParticleColor = val;\r\n    }\r\n\r\n    public set computeParticleTexture(val: boolean) {\r\n        this._computeParticleTexture = val;\r\n    }\r\n    /**\r\n     * Tells to `setParticles()` to call the vertex function for each vertex of each particle, or not.\r\n     * Default value : false. The SPS is faster when it's set to false.\r\n     * Note : the particle custom vertex positions aren't stored values.\r\n     */\r\n    public set computeParticleVertex(val: boolean) {\r\n        this._computeParticleVertex = val;\r\n    }\r\n    /**\r\n     * Tells to `setParticles()` to compute or not the mesh bounding box when computing the particle positions.\r\n     */\r\n    public set computeBoundingBox(val: boolean) {\r\n        this._computeBoundingBox = val;\r\n    }\r\n    /**\r\n     * Tells to `setParticles()` to sort or not the distance between each particle and the camera.\r\n     * Skipped when `enableDepthSort` is set to `false` (default) at construction time.\r\n     * Default : `true`\r\n     */\r\n    public set depthSortParticles(val: boolean) {\r\n        this._depthSortParticles = val;\r\n    }\r\n\r\n    /**\r\n     * Gets if `setParticles()` computes the particle rotations or not.\r\n     * Default value : true. The SPS is faster when it's set to false.\r\n     * Note : the particle rotations aren't stored values, so setting `computeParticleRotation` to false will prevents the particle to rotate.\r\n     */\r\n    public get computeParticleRotation(): boolean {\r\n        return this._computeParticleRotation;\r\n    }\r\n\r\n    /**\r\n     * Gets if `setParticles()` computes the particle colors or not.\r\n     * Default value : true. The SPS is faster when it's set to false.\r\n     * Note : the particle colors are stored values, so setting `computeParticleColor` to false will keep yet the last colors set.\r\n     */\r\n    public get computeParticleColor(): boolean {\r\n        return this._computeParticleColor;\r\n    }\r\n\r\n    /**\r\n     * Gets if `setParticles()` computes the particle textures or not.\r\n     * Default value : true. The SPS is faster when it's set to false.\r\n     * Note : the particle textures are stored values, so setting `computeParticleTexture` to false will keep yet the last colors set.\r\n     */\r\n    public get computeParticleTexture(): boolean {\r\n        return this._computeParticleTexture;\r\n    }\r\n\r\n    /**\r\n     * Gets if `setParticles()` calls the vertex function for each vertex of each particle, or not.\r\n     * Default value : false. The SPS is faster when it's set to false.\r\n     * Note : the particle custom vertex positions aren't stored values.\r\n     */\r\n    public get computeParticleVertex(): boolean {\r\n        return this._computeParticleVertex;\r\n    }\r\n\r\n    /**\r\n     * Gets if `setParticles()` computes or not the mesh bounding box when computing the particle positions.\r\n     */\r\n    public get computeBoundingBox(): boolean {\r\n        return this._computeBoundingBox;\r\n    }\r\n\r\n    /**\r\n     * Gets if `setParticles()` sorts or not the distance between each particle and the camera.\r\n     * Skipped when `enableDepthSort` is set to `false` (default) at construction time.\r\n     * Default : `true`\r\n     */\r\n    public get depthSortParticles(): boolean {\r\n        return this._depthSortParticles;\r\n    }\r\n\r\n    /**\r\n     * Gets if the SPS is created as expandable at construction time.\r\n     * Default : `false`\r\n     */\r\n    public get expandable(): boolean {\r\n        return this._expandable;\r\n    }\r\n    /**\r\n     * Gets if the SPS supports the Multi Materials\r\n     */\r\n    public get multimaterialEnabled(): boolean {\r\n        return this._multimaterialEnabled;\r\n    }\r\n    /**\r\n     * Gets if the SPS uses the model materials for its own multimaterial.\r\n     */\r\n    public get useModelMaterial(): boolean {\r\n        return this._useModelMaterial;\r\n    }\r\n    /**\r\n     * The SPS used material array.\r\n     */\r\n    public get materials(): Material[] {\r\n        return this._materials;\r\n    }\r\n    /**\r\n     * Sets the SPS MultiMaterial from the passed materials.\r\n     * Note : the passed array is internally copied and not used then by reference.\r\n     * @param materials an array of material objects. This array indexes are the materialIndex values of the particles.\r\n     */\r\n    public setMultiMaterial(materials: Material[]) {\r\n        this._materials = this._filterUniqueMaterialId(materials);\r\n        this._setMaterialIndexesById();\r\n        if (this._multimaterial) {\r\n            this._multimaterial.dispose();\r\n        }\r\n        this._multimaterial = new MultiMaterial(this.name + \"MultiMaterial\", this._scene);\r\n        for (let m = 0; m < this._materials.length; m++) {\r\n            this._multimaterial.subMaterials.push(this._materials[m]);\r\n        }\r\n        this.computeSubMeshes();\r\n        this.mesh.material = this._multimaterial;\r\n    }\r\n    /**\r\n     * The SPS computed multimaterial object\r\n     */\r\n    public get multimaterial(): MultiMaterial {\r\n        return this._multimaterial;\r\n    }\r\n    public set multimaterial(mm) {\r\n        this._multimaterial = mm;\r\n    }\r\n    /**\r\n     * If the subMeshes must be updated on the next call to setParticles()\r\n     */\r\n    public get autoUpdateSubMeshes(): boolean {\r\n        return this._autoUpdateSubMeshes;\r\n    }\r\n    public set autoUpdateSubMeshes(val: boolean) {\r\n        this._autoUpdateSubMeshes = val;\r\n    }\r\n    // =======================================================================\r\n    // Particle behavior logic\r\n    // these following methods may be overwritten by the user to fit his needs\r\n\r\n    /**\r\n     * This function does nothing. It may be overwritten to set all the particle first values.\r\n     * The SPS doesn't call this function, you may have to call it by your own.\r\n     * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/manage_sps_particles\r\n     */\r\n    public initParticles(): void {}\r\n\r\n    /**\r\n     * This function does nothing. It may be overwritten to recycle a particle.\r\n     * The SPS doesn't call this function, you may have to call it by your own.\r\n     * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/manage_sps_particles\r\n     * @param particle The particle to recycle\r\n     * @returns the recycled particle\r\n     */\r\n    public recycleParticle(particle: SolidParticle): SolidParticle {\r\n        return particle;\r\n    }\r\n\r\n    /**\r\n     * Updates a particle : this function should  be overwritten by the user.\r\n     * It is called on each particle by `setParticles()`. This is the place to code each particle behavior.\r\n     * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/manage_sps_particles\r\n     * @example : just set a particle position or velocity and recycle conditions\r\n     * @param particle The particle to update\r\n     * @returns the updated particle\r\n     */\r\n    public updateParticle(particle: SolidParticle): SolidParticle {\r\n        return particle;\r\n    }\r\n\r\n    /**\r\n     * Updates a vertex of a particle : it can be overwritten by the user.\r\n     * This will be called on each vertex particle by `setParticles()` if `computeParticleVertex` is set to true only.\r\n     * @param particle the current particle\r\n     * @param vertex the current vertex of the current particle : a SolidParticleVertex object\r\n     * @param pt the index of the current vertex in the particle shape\r\n     * doc : https://doc.babylonjs.com/features/featuresDeepDive/particles/solid_particle_system/sps_vertices\r\n     * @example : just set a vertex particle position or color\r\n     * @returns the sps\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public updateParticleVertex(particle: SolidParticle, vertex: SolidParticleVertex, pt: number): SolidParticleSystem {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This will be called before any other treatment by `setParticles()` and will be passed three parameters.\r\n     * This does nothing and may be overwritten by the user.\r\n     * @param start the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()\r\n     * @param stop the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()\r\n     * @param update the boolean update value actually passed to setParticles()\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public beforeUpdateParticles(start?: number, stop?: number, update?: boolean): void {}\r\n    /**\r\n     * This will be called  by `setParticles()` after all the other treatments and just before the actual mesh update.\r\n     * This will be passed three parameters.\r\n     * This does nothing and may be overwritten by the user.\r\n     * @param start the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()\r\n     * @param stop the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()\r\n     * @param update the boolean update value actually passed to setParticles()\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public afterUpdateParticles(start?: number, stop?: number, update?: boolean): void {}\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}