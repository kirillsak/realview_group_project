{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Color3, Color4 } from \"../Maths/math.color.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { InstancedMesh } from \"../Meshes/instancedMesh.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { ShaderMaterial } from \"../Materials/shaderMaterial.js\";\nimport \"../Shaders/color.fragment.js\";\nimport \"../Shaders/color.vertex.js\";\nMesh._LinesMeshParser = (parsedMesh, scene) => {\n  return LinesMesh.Parse(parsedMesh, scene);\n};\n/**\n * Line mesh\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\n */\nexport class LinesMesh extends Mesh {\n  /**\n   * Creates a new LinesMesh\n   * @param name defines the name\n   * @param scene defines the hosting scene\n   * @param parent defines the parent mesh if any\n   * @param source defines the optional source LinesMesh used to clone data from\n   * @param doNotCloneChildren When cloning, skip cloning child meshes of source, default False.\n   * When false, achieved by calling a clone(), also passing False.\n   * This will make creation of children, recursive.\n   * @param useVertexColor defines if this LinesMesh supports vertex color\n   * @param useVertexAlpha defines if this LinesMesh supports vertex alpha\n   * @param material material to use to draw the line. If not provided, will create a new one\n   */\n  constructor(name, scene = null, parent = null, source = null, doNotCloneChildren,\n  /**\n   * If vertex color should be applied to the mesh\n   */\n  useVertexColor,\n  /**\n   * If vertex alpha should be applied to the mesh\n   */\n  useVertexAlpha, material) {\n    super(name, scene, parent, source, doNotCloneChildren);\n    this.useVertexColor = useVertexColor;\n    this.useVertexAlpha = useVertexAlpha;\n    /**\n     * Color of the line (Default: White)\n     */\n    this.color = new Color3(1, 1, 1);\n    /**\n     * Alpha of the line (Default: 1)\n     */\n    this.alpha = 1;\n    if (source) {\n      this.color = source.color.clone();\n      this.alpha = source.alpha;\n      this.useVertexColor = source.useVertexColor;\n      this.useVertexAlpha = source.useVertexAlpha;\n    }\n    this.intersectionThreshold = 0.1;\n    const defines = [];\n    const options = {\n      attributes: [VertexBuffer.PositionKind],\n      uniforms: [\"world\", \"viewProjection\"],\n      needAlphaBlending: true,\n      defines: defines,\n      useClipPlane: null\n    };\n    if (useVertexAlpha === false) {\n      options.needAlphaBlending = false;\n    } else {\n      options.defines.push(\"#define VERTEXALPHA\");\n    }\n    if (!useVertexColor) {\n      options.uniforms.push(\"color\");\n      this._color4 = new Color4();\n    } else {\n      options.defines.push(\"#define VERTEXCOLOR\");\n      options.attributes.push(VertexBuffer.ColorKind);\n    }\n    if (material) {\n      this.material = material;\n    } else {\n      this.material = new ShaderMaterial(\"colorShader\", this.getScene(), \"color\", options, false);\n      this.material.doNotSerialize = true;\n    }\n  }\n  _isShaderMaterial(shader) {\n    return shader.getClassName() === \"ShaderMaterial\";\n  }\n  isReady() {\n    if (!this._lineMaterial.isReady(this, !!this._userInstancedBuffersStorage)) {\n      return false;\n    }\n    return super.isReady();\n  }\n  /**\n   * Returns the string \"LineMesh\"\n   */\n  getClassName() {\n    return \"LinesMesh\";\n  }\n  /**\n   * @internal\n   */\n  get material() {\n    return this._lineMaterial;\n  }\n  /**\n   * @internal\n   */\n  set material(value) {\n    this._lineMaterial = value;\n    this._lineMaterial.fillMode = Material.LineListDrawMode;\n  }\n  /**\n   * @internal\n   */\n  get checkCollisions() {\n    return false;\n  }\n  set checkCollisions(value) {\n    // Just ignore it\n  }\n  /**\n   * @internal\n   */\n  _bind(_subMesh, colorEffect) {\n    if (!this._geometry) {\n      return this;\n    }\n    // VBOs\n    const indexToBind = this.isUnIndexed ? null : this._geometry.getIndexBuffer();\n    if (!this._userInstancedBuffersStorage) {\n      this._geometry._bind(colorEffect, indexToBind);\n    } else {\n      this._geometry._bind(colorEffect, indexToBind, this._userInstancedBuffersStorage.vertexBuffers, this._userInstancedBuffersStorage.vertexArrayObjects);\n    }\n    // Color\n    if (!this.useVertexColor && this._isShaderMaterial(this._lineMaterial)) {\n      const {\n        r,\n        g,\n        b\n      } = this.color;\n      this._color4.set(r, g, b, this.alpha);\n      this._lineMaterial.setColor4(\"color\", this._color4);\n    }\n    return this;\n  }\n  /**\n   * @internal\n   */\n  _draw(subMesh, fillMode, instancesCount) {\n    if (!this._geometry || !this._geometry.getVertexBuffers() || !this._unIndexed && !this._geometry.getIndexBuffer()) {\n      return this;\n    }\n    const engine = this.getScene().getEngine();\n    // Draw order\n    if (this._unIndexed) {\n      engine.drawArraysType(Material.LineListDrawMode, subMesh.verticesStart, subMesh.verticesCount, instancesCount);\n    } else {\n      engine.drawElementsType(Material.LineListDrawMode, subMesh.indexStart, subMesh.indexCount, instancesCount);\n    }\n    return this;\n  }\n  /**\n   * Disposes of the line mesh\n   * @param doNotRecurse If children should be disposed\n   * @param disposeMaterialAndTextures This parameter is not used by the LineMesh class\n   * @param doNotDisposeMaterial If the material should not be disposed (default: false, meaning the material is disposed)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  dispose(doNotRecurse, disposeMaterialAndTextures = false, doNotDisposeMaterial) {\n    if (!doNotDisposeMaterial) {\n      this._lineMaterial.dispose(false, false, true);\n    }\n    super.dispose(doNotRecurse);\n  }\n  /**\n   * Returns a new LineMesh object cloned from the current one.\n   * @param name\n   * @param newParent\n   * @param doNotCloneChildren\n   */\n  clone(name, newParent = null, doNotCloneChildren) {\n    return new LinesMesh(name, this.getScene(), newParent, this, doNotCloneChildren);\n  }\n  /**\n   * Creates a new InstancedLinesMesh object from the mesh model.\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\n   * @param name defines the name of the new instance\n   * @returns a new InstancedLinesMesh\n   */\n  createInstance(name) {\n    const instance = new InstancedLinesMesh(name, this);\n    if (this.instancedBuffers) {\n      instance.instancedBuffers = {};\n      for (const key in this.instancedBuffers) {\n        instance.instancedBuffers[key] = this.instancedBuffers[key];\n      }\n    }\n    return instance;\n  }\n  /**\n   * Serializes this ground mesh\n   * @param serializationObject object to write serialization to\n   */\n  serialize(serializationObject) {\n    super.serialize(serializationObject);\n    serializationObject.color = this.color.asArray();\n    serializationObject.alpha = this.alpha;\n  }\n  /**\n   * Parses a serialized ground mesh\n   * @param parsedMesh the serialized mesh\n   * @param scene the scene to create the ground mesh in\n   * @returns the created ground mesh\n   */\n  static Parse(parsedMesh, scene) {\n    const result = new LinesMesh(parsedMesh.name, scene);\n    result.color = Color3.FromArray(parsedMesh.color);\n    result.alpha = parsedMesh.alpha;\n    return result;\n  }\n}\n/**\n * Creates an instance based on a source LinesMesh\n */\nexport class InstancedLinesMesh extends InstancedMesh {\n  constructor(name, source) {\n    super(name, source);\n    this.intersectionThreshold = source.intersectionThreshold;\n  }\n  /**\n   * Returns the string \"InstancedLinesMesh\".\n   */\n  getClassName() {\n    return \"InstancedLinesMesh\";\n  }\n}","map":{"version":3,"mappings":"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","names":["Color3","Color4","VertexBuffer","Mesh","InstancedMesh","Material","ShaderMaterial","_LinesMeshParser","parsedMesh","scene","LinesMesh","Parse","constructor","name","parent","source","doNotCloneChildren","useVertexColor","useVertexAlpha","material","color","clone","alpha","intersectionThreshold","defines","options","attributes","PositionKind","uniforms","needAlphaBlending","useClipPlane","push","_color4","ColorKind","getScene","doNotSerialize","_isShaderMaterial","shader","getClassName","isReady","_lineMaterial","_userInstancedBuffersStorage","value","fillMode","LineListDrawMode","checkCollisions","_bind","_subMesh","colorEffect","_geometry","indexToBind","isUnIndexed","getIndexBuffer","vertexBuffers","vertexArrayObjects","r","g","b","set","setColor4","_draw","subMesh","instancesCount","getVertexBuffers","_unIndexed","engine","getEngine","drawArraysType","verticesStart","verticesCount","drawElementsType","indexStart","indexCount","dispose","doNotRecurse","disposeMaterialAndTextures","doNotDisposeMaterial","newParent","createInstance","instance","InstancedLinesMesh","instancedBuffers","key","serialize","serializationObject","asArray","result","FromArray"],"sourceRoot":"","sources":["../../../../lts/core/generated/Meshes/linesMesh.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport type { Node } from \"../node\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { InstancedMesh } from \"../Meshes/instancedMesh\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { ShaderMaterial } from \"../Materials/shaderMaterial\";\r\nimport type { Effect } from \"../Materials/effect\";\r\n\r\nimport \"../Shaders/color.fragment\";\r\nimport \"../Shaders/color.vertex\";\r\n\r\nMesh._LinesMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n    return LinesMesh.Parse(parsedMesh, scene);\r\n};\r\n\r\n/**\r\n * Line mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\r\n */\r\nexport class LinesMesh extends Mesh {\r\n    /**\r\n     * Color of the line (Default: White)\r\n     */\r\n    public color = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * Alpha of the line (Default: 1)\r\n     */\r\n    public alpha = 1;\r\n\r\n    /**\r\n     * The intersection Threshold is the margin applied when intersection a segment of the LinesMesh with a Ray.\r\n     * This margin is expressed in world space coordinates, so its value may vary.\r\n     * Default value is 0.1\r\n     */\r\n    public intersectionThreshold: number;\r\n\r\n    private _lineMaterial: Material;\r\n\r\n    private _isShaderMaterial(shader: Material): shader is ShaderMaterial {\r\n        return shader.getClassName() === \"ShaderMaterial\";\r\n    }\r\n\r\n    private _color4: Color4;\r\n\r\n    /**\r\n     * Creates a new LinesMesh\r\n     * @param name defines the name\r\n     * @param scene defines the hosting scene\r\n     * @param parent defines the parent mesh if any\r\n     * @param source defines the optional source LinesMesh used to clone data from\r\n     * @param doNotCloneChildren When cloning, skip cloning child meshes of source, default False.\r\n     * When false, achieved by calling a clone(), also passing False.\r\n     * This will make creation of children, recursive.\r\n     * @param useVertexColor defines if this LinesMesh supports vertex color\r\n     * @param useVertexAlpha defines if this LinesMesh supports vertex alpha\r\n     * @param material material to use to draw the line. If not provided, will create a new one\r\n     */\r\n    constructor(\r\n        name: string,\r\n        scene: Nullable<Scene> = null,\r\n        parent: Nullable<Node> = null,\r\n        source: Nullable<LinesMesh> = null,\r\n        doNotCloneChildren?: boolean,\r\n        /**\r\n         * If vertex color should be applied to the mesh\r\n         */\r\n        public readonly useVertexColor?: boolean,\r\n        /**\r\n         * If vertex alpha should be applied to the mesh\r\n         */\r\n        public readonly useVertexAlpha?: boolean,\r\n        material?: Material\r\n    ) {\r\n        super(name, scene, parent, source, doNotCloneChildren);\r\n\r\n        if (source) {\r\n            this.color = source.color.clone();\r\n            this.alpha = source.alpha;\r\n            this.useVertexColor = source.useVertexColor;\r\n            this.useVertexAlpha = source.useVertexAlpha;\r\n        }\r\n\r\n        this.intersectionThreshold = 0.1;\r\n\r\n        const defines: string[] = [];\r\n        const options = {\r\n            attributes: [VertexBuffer.PositionKind],\r\n            uniforms: [\"world\", \"viewProjection\"],\r\n            needAlphaBlending: true,\r\n            defines: defines,\r\n            useClipPlane: null,\r\n        };\r\n\r\n        if (useVertexAlpha === false) {\r\n            options.needAlphaBlending = false;\r\n        } else {\r\n            options.defines.push(\"#define VERTEXALPHA\");\r\n        }\r\n\r\n        if (!useVertexColor) {\r\n            options.uniforms.push(\"color\");\r\n            this._color4 = new Color4();\r\n        } else {\r\n            options.defines.push(\"#define VERTEXCOLOR\");\r\n            options.attributes.push(VertexBuffer.ColorKind);\r\n        }\r\n\r\n        if (material) {\r\n            this.material = material;\r\n        } else {\r\n            this.material = new ShaderMaterial(\"colorShader\", this.getScene(), \"color\", options, false);\r\n            this.material.doNotSerialize = true;\r\n        }\r\n    }\r\n\r\n    public isReady() {\r\n        if (!this._lineMaterial.isReady(this, !!this._userInstancedBuffersStorage)) {\r\n            return false;\r\n        }\r\n\r\n        return super.isReady();\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"LineMesh\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"LinesMesh\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public get material(): Material {\r\n        return this._lineMaterial;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public set material(value: Material) {\r\n        this._lineMaterial = value;\r\n        this._lineMaterial.fillMode = Material.LineListDrawMode;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public get checkCollisions(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public set checkCollisions(value: boolean) {\r\n        // Just ignore it\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _bind(_subMesh: SubMesh, colorEffect: Effect): Mesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n\r\n        // VBOs\r\n        const indexToBind = this.isUnIndexed ? null : this._geometry.getIndexBuffer();\r\n        if (!this._userInstancedBuffersStorage) {\r\n            this._geometry._bind(colorEffect, indexToBind);\r\n        } else {\r\n            this._geometry._bind(colorEffect, indexToBind, this._userInstancedBuffersStorage.vertexBuffers, this._userInstancedBuffersStorage.vertexArrayObjects);\r\n        }\r\n\r\n        // Color\r\n        if (!this.useVertexColor && this._isShaderMaterial(this._lineMaterial)) {\r\n            const { r, g, b } = this.color;\r\n            this._color4.set(r, g, b, this.alpha);\r\n            this._lineMaterial.setColor4(\"color\", this._color4);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(subMesh: SubMesh, fillMode: number, instancesCount?: number): Mesh {\r\n        if (!this._geometry || !this._geometry.getVertexBuffers() || (!this._unIndexed && !this._geometry.getIndexBuffer())) {\r\n            return this;\r\n        }\r\n\r\n        const engine = this.getScene().getEngine();\r\n\r\n        // Draw order\r\n\r\n        if (this._unIndexed) {\r\n            engine.drawArraysType(Material.LineListDrawMode, subMesh.verticesStart, subMesh.verticesCount, instancesCount);\r\n        } else {\r\n            engine.drawElementsType(Material.LineListDrawMode, subMesh.indexStart, subMesh.indexCount, instancesCount);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disposes of the line mesh\r\n     * @param doNotRecurse If children should be disposed\r\n     * @param disposeMaterialAndTextures This parameter is not used by the LineMesh class\r\n     * @param doNotDisposeMaterial If the material should not be disposed (default: false, meaning the material is disposed)\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false, doNotDisposeMaterial?: boolean): void {\r\n        if (!doNotDisposeMaterial) {\r\n            this._lineMaterial.dispose(false, false, true);\r\n        }\r\n        super.dispose(doNotRecurse);\r\n    }\r\n\r\n    /**\r\n     * Returns a new LineMesh object cloned from the current one.\r\n     * @param name\r\n     * @param newParent\r\n     * @param doNotCloneChildren\r\n     */\r\n    public clone(name: string, newParent: Nullable<Node> = null, doNotCloneChildren?: boolean): LinesMesh {\r\n        return new LinesMesh(name, this.getScene(), newParent, this, doNotCloneChildren);\r\n    }\r\n\r\n    /**\r\n     * Creates a new InstancedLinesMesh object from the mesh model.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\r\n     * @param name defines the name of the new instance\r\n     * @returns a new InstancedLinesMesh\r\n     */\r\n    public createInstance(name: string): InstancedLinesMesh {\r\n        const instance = new InstancedLinesMesh(name, this);\r\n\r\n        if (this.instancedBuffers) {\r\n            instance.instancedBuffers = {};\r\n\r\n            for (const key in this.instancedBuffers) {\r\n                instance.instancedBuffers[key] = this.instancedBuffers[key];\r\n            }\r\n        }\r\n\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * Serializes this ground mesh\r\n     * @param serializationObject object to write serialization to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.color = this.color.asArray();\r\n        serializationObject.alpha = this.alpha;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized ground mesh\r\n     * @param parsedMesh the serialized mesh\r\n     * @param scene the scene to create the ground mesh in\r\n     * @returns the created ground mesh\r\n     */\r\n    public static Parse(parsedMesh: any, scene: Scene): LinesMesh {\r\n        const result = new LinesMesh(parsedMesh.name, scene);\r\n\r\n        result.color = Color3.FromArray(parsedMesh.color);\r\n        result.alpha = parsedMesh.alpha;\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates an instance based on a source LinesMesh\r\n */\r\nexport class InstancedLinesMesh extends InstancedMesh {\r\n    /**\r\n     * The intersection Threshold is the margin applied when intersection a segment of the LinesMesh with a Ray.\r\n     * This margin is expressed in world space coordinates, so its value may vary.\r\n     * Initialized with the intersectionThreshold value of the source LinesMesh\r\n     */\r\n    public intersectionThreshold: number;\r\n\r\n    constructor(name: string, source: LinesMesh) {\r\n        super(name, source);\r\n        this.intersectionThreshold = source.intersectionThreshold;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"InstancedLinesMesh\".\r\n     */\r\n    public getClassName(): string {\r\n        return \"InstancedLinesMesh\";\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}