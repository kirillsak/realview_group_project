{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { VertexData } from \"../Meshes/mesh.vertexData.js\";\n/**\n * Class used to create a trail following a mesh\n */\nexport class TrailMesh extends Mesh {\n  /**\n   * @constructor\n   * @param name The value used by scene.getMeshByName() to do a lookup.\n   * @param generator The mesh or transform node to generate a trail.\n   * @param scene The scene to add this mesh to.\n   * @param diameter Diameter of trailing mesh. Default is 1.\n   * @param length Length of trailing mesh. Default is 60.\n   * @param autoStart Automatically start trailing mesh. Default true.\n   */\n  constructor(name, generator, scene, diameter = 1, length = 60, autoStart = true) {\n    super(name, scene);\n    this._sectionPolygonPointsCount = 4;\n    this._running = false;\n    this._autoStart = autoStart;\n    this._generator = generator;\n    this._diameter = diameter;\n    this._length = length;\n    this._sectionVectors = [];\n    this._sectionNormalVectors = [];\n    for (let i = 0; i < this._sectionPolygonPointsCount; i++) {\n      this._sectionVectors[i] = Vector3.Zero();\n      this._sectionNormalVectors[i] = Vector3.Zero();\n    }\n    this._createMesh();\n  }\n  /**\n   * \"TrailMesh\"\n   * @returns \"TrailMesh\"\n   */\n  getClassName() {\n    return \"TrailMesh\";\n  }\n  _createMesh() {\n    const data = new VertexData();\n    const positions = [];\n    const normals = [];\n    const indices = [];\n    let meshCenter = Vector3.Zero();\n    if (this._generator instanceof AbstractMesh && this._generator.hasBoundingInfo) {\n      meshCenter = this._generator.getBoundingInfo().boundingBox.centerWorld;\n    } else {\n      meshCenter = this._generator.position;\n    }\n    const alpha = 2 * Math.PI / this._sectionPolygonPointsCount;\n    for (let i = 0; i < this._sectionPolygonPointsCount; i++) {\n      positions.push(meshCenter.x + Math.cos(i * alpha) * this._diameter, meshCenter.y + Math.sin(i * alpha) * this._diameter, meshCenter.z);\n    }\n    for (let i = 1; i <= this._length; i++) {\n      for (let j = 0; j < this._sectionPolygonPointsCount; j++) {\n        positions.push(meshCenter.x + Math.cos(j * alpha) * this._diameter, meshCenter.y + Math.sin(j * alpha) * this._diameter, meshCenter.z);\n      }\n      const l = positions.length / 3 - 2 * this._sectionPolygonPointsCount;\n      for (let j = 0; j < this._sectionPolygonPointsCount - 1; j++) {\n        indices.push(l + j, l + j + this._sectionPolygonPointsCount, l + j + this._sectionPolygonPointsCount + 1);\n        indices.push(l + j, l + j + this._sectionPolygonPointsCount + 1, l + j + 1);\n      }\n      indices.push(l + this._sectionPolygonPointsCount - 1, l + this._sectionPolygonPointsCount - 1 + this._sectionPolygonPointsCount, l + this._sectionPolygonPointsCount);\n      indices.push(l + this._sectionPolygonPointsCount - 1, l + this._sectionPolygonPointsCount, l);\n    }\n    VertexData.ComputeNormals(positions, indices, normals);\n    data.positions = positions;\n    data.normals = normals;\n    data.indices = indices;\n    data.applyToMesh(this, true);\n    if (this._autoStart) {\n      this.start();\n    }\n  }\n  /**\n   * Start trailing mesh.\n   */\n  start() {\n    if (!this._running) {\n      this._running = true;\n      this._beforeRenderObserver = this.getScene().onBeforeRenderObservable.add(() => {\n        this.update();\n      });\n    }\n  }\n  /**\n   * Stop trailing mesh.\n   */\n  stop() {\n    if (this._beforeRenderObserver && this._running) {\n      this._running = false;\n      this.getScene().onBeforeRenderObservable.remove(this._beforeRenderObserver);\n    }\n  }\n  /**\n   * Update trailing mesh geometry.\n   */\n  update() {\n    const positions = this.getVerticesData(VertexBuffer.PositionKind);\n    const normals = this.getVerticesData(VertexBuffer.NormalKind);\n    const wm = this._generator.getWorldMatrix();\n    if (positions && normals) {\n      for (let i = 3 * this._sectionPolygonPointsCount; i < positions.length; i++) {\n        positions[i - 3 * this._sectionPolygonPointsCount] = positions[i] - normals[i] / this._length * this._diameter;\n      }\n      for (let i = 3 * this._sectionPolygonPointsCount; i < normals.length; i++) {\n        normals[i - 3 * this._sectionPolygonPointsCount] = normals[i];\n      }\n      const l = positions.length - 3 * this._sectionPolygonPointsCount;\n      const alpha = 2 * Math.PI / this._sectionPolygonPointsCount;\n      for (let i = 0; i < this._sectionPolygonPointsCount; i++) {\n        this._sectionVectors[i].copyFromFloats(Math.cos(i * alpha) * this._diameter, Math.sin(i * alpha) * this._diameter, 0);\n        this._sectionNormalVectors[i].copyFromFloats(Math.cos(i * alpha), Math.sin(i * alpha), 0);\n        Vector3.TransformCoordinatesToRef(this._sectionVectors[i], wm, this._sectionVectors[i]);\n        Vector3.TransformNormalToRef(this._sectionNormalVectors[i], wm, this._sectionNormalVectors[i]);\n      }\n      for (let i = 0; i < this._sectionPolygonPointsCount; i++) {\n        positions[l + 3 * i] = this._sectionVectors[i].x;\n        positions[l + 3 * i + 1] = this._sectionVectors[i].y;\n        positions[l + 3 * i + 2] = this._sectionVectors[i].z;\n        normals[l + 3 * i] = this._sectionNormalVectors[i].x;\n        normals[l + 3 * i + 1] = this._sectionNormalVectors[i].y;\n        normals[l + 3 * i + 2] = this._sectionNormalVectors[i].z;\n      }\n      this.updateVerticesData(VertexBuffer.PositionKind, positions, true, false);\n      this.updateVerticesData(VertexBuffer.NormalKind, normals, true, false);\n    }\n  }\n  /**\n   * Returns a new TrailMesh object.\n   * @param name is a string, the name given to the new mesh\n   * @param newGenerator use new generator object for cloned trail mesh\n   * @returns a new mesh\n   */\n  clone(name = \"\", newGenerator) {\n    return new TrailMesh(name, newGenerator === undefined ? this._generator : newGenerator, this.getScene(), this._diameter, this._length, this._autoStart);\n  }\n  /**\n   * Serializes this trail mesh\n   * @param serializationObject object to write serialization to\n   */\n  serialize(serializationObject) {\n    super.serialize(serializationObject);\n  }\n  /**\n   * Parses a serialized trail mesh\n   * @param parsedMesh the serialized mesh\n   * @param scene the scene to create the trail mesh in\n   * @returns the created trail mesh\n   */\n  static Parse(parsedMesh, scene) {\n    return new TrailMesh(parsedMesh.name, parsedMesh._generator, scene, parsedMesh._diameter, parsedMesh._length, parsedMesh._autoStart);\n  }\n}","map":{"version":3,"mappings":"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","names":["AbstractMesh","Mesh","Vector3","VertexBuffer","VertexData","TrailMesh","constructor","name","generator","scene","diameter","length","autoStart","_running","_autoStart","_generator","_diameter","_length","_sectionVectors","_sectionNormalVectors","i","_sectionPolygonPointsCount","Zero","_createMesh","getClassName","data","positions","normals","indices","meshCenter","hasBoundingInfo","getBoundingInfo","boundingBox","centerWorld","position","alpha","Math","PI","push","x","cos","y","sin","z","j","l","ComputeNormals","applyToMesh","start","_beforeRenderObserver","getScene","onBeforeRenderObservable","add","update","stop","remove","getVerticesData","PositionKind","NormalKind","wm","getWorldMatrix","copyFromFloats","TransformCoordinatesToRef","TransformNormalToRef","updateVerticesData","clone","newGenerator","undefined","serialize","serializationObject","Parse","parsedMesh"],"sourceRoot":"","sources":["../../../../lts/core/generated/Meshes/trailMesh.ts"],"sourcesContent":["import { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\n\r\n/**\r\n * Class used to create a trail following a mesh\r\n */\r\nexport class TrailMesh extends Mesh {\r\n    private _generator: TransformNode;\r\n    private _autoStart: boolean;\r\n    private _running: boolean;\r\n    private _diameter: number;\r\n    private _length: number;\r\n    private _sectionPolygonPointsCount: number = 4;\r\n    private _sectionVectors: Array<Vector3>;\r\n    private _sectionNormalVectors: Array<Vector3>;\r\n    private _beforeRenderObserver: Nullable<Observer<Scene>>;\r\n\r\n    /**\r\n     * @constructor\r\n     * @param name The value used by scene.getMeshByName() to do a lookup.\r\n     * @param generator The mesh or transform node to generate a trail.\r\n     * @param scene The scene to add this mesh to.\r\n     * @param diameter Diameter of trailing mesh. Default is 1.\r\n     * @param length Length of trailing mesh. Default is 60.\r\n     * @param autoStart Automatically start trailing mesh. Default true.\r\n     */\r\n    constructor(name: string, generator: TransformNode, scene?: Scene, diameter: number = 1, length: number = 60, autoStart: boolean = true) {\r\n        super(name, scene);\r\n\r\n        this._running = false;\r\n        this._autoStart = autoStart;\r\n        this._generator = generator;\r\n        this._diameter = diameter;\r\n        this._length = length;\r\n        this._sectionVectors = [];\r\n        this._sectionNormalVectors = [];\r\n        for (let i: number = 0; i < this._sectionPolygonPointsCount; i++) {\r\n            this._sectionVectors[i] = Vector3.Zero();\r\n            this._sectionNormalVectors[i] = Vector3.Zero();\r\n        }\r\n        this._createMesh();\r\n    }\r\n\r\n    /**\r\n     * \"TrailMesh\"\r\n     * @returns \"TrailMesh\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"TrailMesh\";\r\n    }\r\n\r\n    private _createMesh(): void {\r\n        const data: VertexData = new VertexData();\r\n        const positions: Array<number> = [];\r\n        const normals: Array<number> = [];\r\n        const indices: Array<number> = [];\r\n        let meshCenter = Vector3.Zero();\r\n        if (this._generator instanceof AbstractMesh && this._generator.hasBoundingInfo) {\r\n            meshCenter = this._generator.getBoundingInfo().boundingBox.centerWorld;\r\n        } else {\r\n            meshCenter = this._generator.position;\r\n        }\r\n        const alpha: number = (2 * Math.PI) / this._sectionPolygonPointsCount;\r\n        for (let i: number = 0; i < this._sectionPolygonPointsCount; i++) {\r\n            positions.push(meshCenter.x + Math.cos(i * alpha) * this._diameter, meshCenter.y + Math.sin(i * alpha) * this._diameter, meshCenter.z);\r\n        }\r\n        for (let i: number = 1; i <= this._length; i++) {\r\n            for (let j: number = 0; j < this._sectionPolygonPointsCount; j++) {\r\n                positions.push(meshCenter.x + Math.cos(j * alpha) * this._diameter, meshCenter.y + Math.sin(j * alpha) * this._diameter, meshCenter.z);\r\n            }\r\n            const l: number = positions.length / 3 - 2 * this._sectionPolygonPointsCount;\r\n            for (let j: number = 0; j < this._sectionPolygonPointsCount - 1; j++) {\r\n                indices.push(l + j, l + j + this._sectionPolygonPointsCount, l + j + this._sectionPolygonPointsCount + 1);\r\n                indices.push(l + j, l + j + this._sectionPolygonPointsCount + 1, l + j + 1);\r\n            }\r\n            indices.push(l + this._sectionPolygonPointsCount - 1, l + this._sectionPolygonPointsCount - 1 + this._sectionPolygonPointsCount, l + this._sectionPolygonPointsCount);\r\n            indices.push(l + this._sectionPolygonPointsCount - 1, l + this._sectionPolygonPointsCount, l);\r\n        }\r\n        VertexData.ComputeNormals(positions, indices, normals);\r\n        data.positions = positions;\r\n        data.normals = normals;\r\n        data.indices = indices;\r\n        data.applyToMesh(this, true);\r\n        if (this._autoStart) {\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start trailing mesh.\r\n     */\r\n    public start(): void {\r\n        if (!this._running) {\r\n            this._running = true;\r\n            this._beforeRenderObserver = this.getScene().onBeforeRenderObservable.add(() => {\r\n                this.update();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop trailing mesh.\r\n     */\r\n    public stop(): void {\r\n        if (this._beforeRenderObserver && this._running) {\r\n            this._running = false;\r\n            this.getScene().onBeforeRenderObservable.remove(this._beforeRenderObserver);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update trailing mesh geometry.\r\n     */\r\n    public update(): void {\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n        const normals = this.getVerticesData(VertexBuffer.NormalKind);\r\n        const wm = this._generator.getWorldMatrix();\r\n        if (positions && normals) {\r\n            for (let i: number = 3 * this._sectionPolygonPointsCount; i < positions.length; i++) {\r\n                positions[i - 3 * this._sectionPolygonPointsCount] = positions[i] - (normals[i] / this._length) * this._diameter;\r\n            }\r\n            for (let i: number = 3 * this._sectionPolygonPointsCount; i < normals.length; i++) {\r\n                normals[i - 3 * this._sectionPolygonPointsCount] = normals[i];\r\n            }\r\n            const l: number = positions.length - 3 * this._sectionPolygonPointsCount;\r\n            const alpha: number = (2 * Math.PI) / this._sectionPolygonPointsCount;\r\n            for (let i: number = 0; i < this._sectionPolygonPointsCount; i++) {\r\n                this._sectionVectors[i].copyFromFloats(Math.cos(i * alpha) * this._diameter, Math.sin(i * alpha) * this._diameter, 0);\r\n                this._sectionNormalVectors[i].copyFromFloats(Math.cos(i * alpha), Math.sin(i * alpha), 0);\r\n                Vector3.TransformCoordinatesToRef(this._sectionVectors[i], wm, this._sectionVectors[i]);\r\n                Vector3.TransformNormalToRef(this._sectionNormalVectors[i], wm, this._sectionNormalVectors[i]);\r\n            }\r\n            for (let i: number = 0; i < this._sectionPolygonPointsCount; i++) {\r\n                positions[l + 3 * i] = this._sectionVectors[i].x;\r\n                positions[l + 3 * i + 1] = this._sectionVectors[i].y;\r\n                positions[l + 3 * i + 2] = this._sectionVectors[i].z;\r\n                normals[l + 3 * i] = this._sectionNormalVectors[i].x;\r\n                normals[l + 3 * i + 1] = this._sectionNormalVectors[i].y;\r\n                normals[l + 3 * i + 2] = this._sectionNormalVectors[i].z;\r\n            }\r\n            this.updateVerticesData(VertexBuffer.PositionKind, positions, true, false);\r\n            this.updateVerticesData(VertexBuffer.NormalKind, normals, true, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a new TrailMesh object.\r\n     * @param name is a string, the name given to the new mesh\r\n     * @param newGenerator use new generator object for cloned trail mesh\r\n     * @returns a new mesh\r\n     */\r\n    public clone(name: string = \"\", newGenerator: TransformNode): TrailMesh {\r\n        return new TrailMesh(name, newGenerator === undefined ? this._generator : newGenerator, this.getScene(), this._diameter, this._length, this._autoStart);\r\n    }\r\n\r\n    /**\r\n     * Serializes this trail mesh\r\n     * @param serializationObject object to write serialization to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized trail mesh\r\n     * @param parsedMesh the serialized mesh\r\n     * @param scene the scene to create the trail mesh in\r\n     * @returns the created trail mesh\r\n     */\r\n    public static Parse(parsedMesh: any, scene: Scene): TrailMesh {\r\n        return new TrailMesh(parsedMesh.name, parsedMesh._generator, scene, parsedMesh._diameter, parsedMesh._length, parsedMesh._autoStart);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}