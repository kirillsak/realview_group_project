{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Mesh } from \"../mesh.js\";\nimport { VertexData } from \"../mesh.vertexData.js\";\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions.js\";\n/**\n * Creates the VertexData for a Plane\n * @param options an object used to set the following optional parameters for the plane, required but can be empty\n * * size sets the width and height of the plane to the value of size, optional default 1\n * * width sets the width (x direction) of the plane, overwrites the width set by size, optional, default size\n * * height sets the height (y direction) of the plane, overwrites the height set by size, optional, default size\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n * @param options.size\n * @param options.width\n * @param options.height\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @returns the VertexData of the box\n */\nexport function CreatePlaneVertexData(options) {\n  const indices = [];\n  const positions = [];\n  const normals = [];\n  const uvs = [];\n  const width = options.width || options.size || 1;\n  const height = options.height || options.size || 1;\n  const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\n  // Vertices\n  const halfWidth = width / 2.0;\n  const halfHeight = height / 2.0;\n  positions.push(-halfWidth, -halfHeight, 0);\n  normals.push(0, 0, -1.0);\n  uvs.push(0.0, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 : 0.0);\n  positions.push(halfWidth, -halfHeight, 0);\n  normals.push(0, 0, -1.0);\n  uvs.push(1.0, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 : 0.0);\n  positions.push(halfWidth, halfHeight, 0);\n  normals.push(0, 0, -1.0);\n  uvs.push(1.0, CompatibilityOptions.UseOpenGLOrientationForUV ? 0.0 : 1.0);\n  positions.push(-halfWidth, halfHeight, 0);\n  normals.push(0, 0, -1.0);\n  uvs.push(0.0, CompatibilityOptions.UseOpenGLOrientationForUV ? 0.0 : 1.0);\n  // Indices\n  indices.push(0);\n  indices.push(1);\n  indices.push(2);\n  indices.push(0);\n  indices.push(2);\n  indices.push(3);\n  // Sides\n  VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\n  // Result\n  const vertexData = new VertexData();\n  vertexData.indices = indices;\n  vertexData.positions = positions;\n  vertexData.normals = normals;\n  vertexData.uvs = uvs;\n  return vertexData;\n}\n/**\n * Creates a plane mesh\n * * The parameter `size` sets the size (float) of both sides of the plane at once (default 1)\n * * You can set some different plane dimensions by using the parameters `width` and `height` (both by default have the same value of `size`)\n * * The parameter `sourcePlane` is a Plane instance. It builds a mesh plane from a Math plane\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\n * @param name defines the name of the mesh\n * @param options defines the options used to create the mesh\n * @param options.size\n * @param options.width\n * @param options.height\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @param options.updatable\n * @param options.sourcePlane\n * @param scene defines the hosting scene\n * @returns the plane mesh\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#plane\n */\nexport function CreatePlane(name, options = {}, scene = null) {\n  const plane = new Mesh(name, scene);\n  options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n  plane._originalBuilderSideOrientation = options.sideOrientation;\n  const vertexData = CreatePlaneVertexData(options);\n  vertexData.applyToMesh(plane, options.updatable);\n  if (options.sourcePlane) {\n    plane.translate(options.sourcePlane.normal, -options.sourcePlane.d);\n    plane.setDirection(options.sourcePlane.normal.scale(-1));\n  }\n  return plane;\n}\n/**\n * Class containing static functions to help procedurally build meshes\n * @deprecated use the function directly from the module\n */\nexport const PlaneBuilder = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  CreatePlane\n};\nVertexData.CreatePlane = CreatePlaneVertexData;\nMesh.CreatePlane = (name, size, scene, updatable, sideOrientation) => {\n  const options = {\n    size,\n    width: size,\n    height: size,\n    sideOrientation,\n    updatable\n  };\n  return CreatePlane(name, options, scene);\n};","map":{"version":3,"mappings":"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","names":["Mesh","VertexData","CompatibilityOptions","CreatePlaneVertexData","options","indices","positions","normals","uvs","width","size","height","sideOrientation","DEFAULTSIDE","halfWidth","halfHeight","push","UseOpenGLOrientationForUV","_ComputeSides","frontUVs","backUVs","vertexData","CreatePlane","name","scene","plane","_GetDefaultSideOrientation","_originalBuilderSideOrientation","applyToMesh","updatable","sourcePlane","translate","normal","d","setDirection","scale","PlaneBuilder"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Meshes/Builders/planeBuilder.ts"],"sourcesContent":["import type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Plane } from \"../../Maths/math.plane\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for a Plane\r\n * @param options an object used to set the following optional parameters for the plane, required but can be empty\r\n * * size sets the width and height of the plane to the value of size, optional default 1\r\n * * width sets the width (x direction) of the plane, overwrites the width set by size, optional, default size\r\n * * height sets the height (y direction) of the plane, overwrites the height set by size, optional, default size\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.size\r\n * @param options.width\r\n * @param options.height\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @returns the VertexData of the box\r\n */\r\nexport function CreatePlaneVertexData(options: { size?: number; width?: number; height?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 }): VertexData {\r\n    const indices = [];\r\n    const positions = [];\r\n    const normals = [];\r\n    const uvs = [];\r\n\r\n    const width: number = options.width || options.size || 1;\r\n    const height: number = options.height || options.size || 1;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    // Vertices\r\n    const halfWidth = width / 2.0;\r\n    const halfHeight = height / 2.0;\r\n\r\n    positions.push(-halfWidth, -halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(0.0, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 : 0.0);\r\n\r\n    positions.push(halfWidth, -halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(1.0, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 : 0.0);\r\n\r\n    positions.push(halfWidth, halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(1.0, CompatibilityOptions.UseOpenGLOrientationForUV ? 0.0 : 1.0);\r\n\r\n    positions.push(-halfWidth, halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(0.0, CompatibilityOptions.UseOpenGLOrientationForUV ? 0.0 : 1.0);\r\n\r\n    // Indices\r\n    indices.push(0);\r\n    indices.push(1);\r\n    indices.push(2);\r\n\r\n    indices.push(0);\r\n    indices.push(2);\r\n    indices.push(3);\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a plane mesh\r\n * * The parameter `size` sets the size (float) of both sides of the plane at once (default 1)\r\n * * You can set some different plane dimensions by using the parameters `width` and `height` (both by default have the same value of `size`)\r\n * * The parameter `sourcePlane` is a Plane instance. It builds a mesh plane from a Math plane\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.size\r\n * @param options.width\r\n * @param options.height\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.updatable\r\n * @param options.sourcePlane\r\n * @param scene defines the hosting scene\r\n * @returns the plane mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#plane\r\n */\r\nexport function CreatePlane(\r\n    name: string,\r\n    options: { size?: number; width?: number; height?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4; updatable?: boolean; sourcePlane?: Plane } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const plane = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    plane._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreatePlaneVertexData(options);\r\n\r\n    vertexData.applyToMesh(plane, options.updatable);\r\n\r\n    if (options.sourcePlane) {\r\n        plane.translate(options.sourcePlane.normal, -options.sourcePlane.d);\r\n        plane.setDirection(options.sourcePlane.normal.scale(-1));\r\n    }\r\n\r\n    return plane;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the function directly from the module\r\n */\r\nexport const PlaneBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreatePlane,\r\n};\r\n\r\nVertexData.CreatePlane = CreatePlaneVertexData;\r\n(Mesh as any).CreatePlane = (name: string, size: number, scene: Scene, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        size,\r\n        width: size,\r\n        height: size,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreatePlane(name, options, scene);\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}