{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Tools } from \"./Misc/tools.js\";\nimport { PrecisionDate } from \"./Misc/precisionDate.js\";\nimport { Observable } from \"./Misc/observable.js\";\nimport { SmartArrayNoDuplicate, SmartArray } from \"./Misc/smartArray.js\";\nimport { StringDictionary } from \"./Misc/stringDictionary.js\";\nimport { Tags } from \"./Misc/tags.js\";\nimport { Vector3, Matrix, TmpVectors } from \"./Maths/math.vector.js\";\nimport { AbstractScene } from \"./abstractScene.js\";\nimport { ImageProcessingConfiguration } from \"./Materials/imageProcessingConfiguration.js\";\nimport { UniformBuffer } from \"./Materials/uniformBuffer.js\";\nimport { PickingInfo } from \"./Collisions/pickingInfo.js\";\nimport { ActionEvent } from \"./Actions/actionEvent.js\";\nimport { PostProcessManager } from \"./PostProcesses/postProcessManager.js\";\nimport { RenderingManager } from \"./Rendering/renderingManager.js\";\nimport { Stage } from \"./sceneComponent.js\";\nimport { IsWindowObjectExist } from \"./Misc/domManagement.js\";\nimport { EngineStore } from \"./Engines/engineStore.js\";\nimport { _WarnImport } from \"./Misc/devTools.js\";\nimport { InputManager } from \"./Inputs/scene.inputManager.js\";\nimport { PerfCounter } from \"./Misc/perfCounter.js\";\nimport { Color4, Color3 } from \"./Maths/math.color.js\";\nimport { Frustum } from \"./Maths/math.frustum.js\";\nimport { UniqueIdGenerator } from \"./Misc/uniqueIdGenerator.js\";\nimport { ReadFile, RequestFile, LoadFile } from \"./Misc/fileTools.js\";\nimport { LightConstants } from \"./Lights/lightConstants.js\";\nimport { _ObserveArray } from \"./Misc/arrayTools.js\";\n/**\n * Define how the scene should favor performance over ease of use\n */\nexport var ScenePerformancePriority;\n(function (ScenePerformancePriority) {\n  /** Default mode. No change. Performance will be treated as less important than backward compatibility */\n  ScenePerformancePriority[ScenePerformancePriority[\"BackwardCompatible\"] = 0] = \"BackwardCompatible\";\n  /** Some performance options will be turned on trying to strike a balance between perf and ease of use */\n  ScenePerformancePriority[ScenePerformancePriority[\"Intermediate\"] = 1] = \"Intermediate\";\n  /** Performance will be top priority */\n  ScenePerformancePriority[ScenePerformancePriority[\"Aggressive\"] = 2] = \"Aggressive\";\n})(ScenePerformancePriority || (ScenePerformancePriority = {}));\n/**\n * Represents a scene to be rendered by the engine.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene\n */\nexport class Scene extends AbstractScene {\n  /**\n   * Creates a new Scene\n   * @param engine defines the engine to use to render this scene\n   * @param options defines the scene options\n   */\n  constructor(engine, options) {\n    super();\n    // Members\n    /** @internal */\n    this._inputManager = new InputManager(this);\n    /** Define this parameter if you are using multiple cameras and you want to specify which one should be used for pointer position */\n    this.cameraToUseForPointers = null;\n    /** @internal */\n    this._isScene = true;\n    /** @internal */\n    this._blockEntityCollection = false;\n    /**\n     * Gets or sets a boolean that indicates if the scene must clear the render buffer before rendering a frame\n     */\n    this.autoClear = true;\n    /**\n     * Gets or sets a boolean that indicates if the scene must clear the depth and stencil buffers before rendering a frame\n     */\n    this.autoClearDepthAndStencil = true;\n    /**\n     * Defines the color used to clear the render buffer (Default is (0.2, 0.2, 0.3, 1.0))\n     */\n    this.clearColor = new Color4(0.2, 0.2, 0.3, 1.0);\n    /**\n     * Defines the color used to simulate the ambient color (Default is (0, 0, 0))\n     */\n    this.ambientColor = new Color3(0, 0, 0);\n    /**\n     * Intensity of the environment in all pbr material.\n     * This dims or reinforces the IBL lighting overall (reflection and diffuse).\n     * As in the majority of the scene they are the same (exception for multi room and so on),\n     * this is easier to reference from here than from all the materials.\n     */\n    this.environmentIntensity = 1;\n    this._performancePriority = ScenePerformancePriority.BackwardCompatible;\n    this._forceWireframe = false;\n    this._skipFrustumClipping = false;\n    this._forcePointsCloud = false;\n    /**\n     * Gets or sets a boolean indicating if animations are enabled\n     */\n    this.animationsEnabled = true;\n    this._animationPropertiesOverride = null;\n    /**\n     * Gets or sets a boolean indicating if a constant deltatime has to be used\n     * This is mostly useful for testing purposes when you do not want the animations to scale with the framerate\n     */\n    this.useConstantAnimationDeltaTime = false;\n    /**\n     * Gets or sets a boolean indicating if the scene must keep the meshUnderPointer property updated\n     * Please note that it requires to run a ray cast through the scene on every frame\n     */\n    this.constantlyUpdateMeshUnderPointer = false;\n    /**\n     * Defines the HTML cursor to use when hovering over interactive elements\n     */\n    this.hoverCursor = \"pointer\";\n    /**\n     * Defines the HTML default cursor to use (empty by default)\n     */\n    this.defaultCursor = \"\";\n    /**\n     * Defines whether cursors are handled by the scene.\n     */\n    this.doNotHandleCursors = false;\n    /**\n     * This is used to call preventDefault() on pointer down\n     * in order to block unwanted artifacts like system double clicks\n     */\n    this.preventDefaultOnPointerDown = true;\n    /**\n     * This is used to call preventDefault() on pointer up\n     * in order to block unwanted artifacts like system double clicks\n     */\n    this.preventDefaultOnPointerUp = true;\n    // Metadata\n    /**\n     * Gets or sets user defined metadata\n     */\n    this.metadata = null;\n    /**\n     * For internal use only. Please do not use.\n     */\n    this.reservedDataStore = null;\n    /**\n     * Use this array to add regular expressions used to disable offline support for specific urls\n     */\n    this.disableOfflineSupportExceptionRules = new Array();\n    /**\n     * An event triggered when the scene is disposed.\n     */\n    this.onDisposeObservable = new Observable();\n    this._onDisposeObserver = null;\n    /**\n     * An event triggered before rendering the scene (right after animations and physics)\n     */\n    this.onBeforeRenderObservable = new Observable();\n    this._onBeforeRenderObserver = null;\n    /**\n     * An event triggered after rendering the scene\n     */\n    this.onAfterRenderObservable = new Observable();\n    /**\n     * An event triggered after rendering the scene for an active camera (When scene.render is called this will be called after each camera)\n     * This is triggered for each \"sub\" camera in a Camera Rig unlike onAfterCameraRenderObservable\n     */\n    this.onAfterRenderCameraObservable = new Observable();\n    this._onAfterRenderObserver = null;\n    /**\n     * An event triggered before animating the scene\n     */\n    this.onBeforeAnimationsObservable = new Observable();\n    /**\n     * An event triggered after animations processing\n     */\n    this.onAfterAnimationsObservable = new Observable();\n    /**\n     * An event triggered before draw calls are ready to be sent\n     */\n    this.onBeforeDrawPhaseObservable = new Observable();\n    /**\n     * An event triggered after draw calls have been sent\n     */\n    this.onAfterDrawPhaseObservable = new Observable();\n    /**\n     * An event triggered when the scene is ready\n     */\n    this.onReadyObservable = new Observable();\n    /**\n     * An event triggered before rendering a camera\n     */\n    this.onBeforeCameraRenderObservable = new Observable();\n    this._onBeforeCameraRenderObserver = null;\n    /**\n     * An event triggered after rendering a camera\n     * This is triggered for the full rig Camera only unlike onAfterRenderCameraObservable\n     */\n    this.onAfterCameraRenderObservable = new Observable();\n    this._onAfterCameraRenderObserver = null;\n    /**\n     * An event triggered when active meshes evaluation is about to start\n     */\n    this.onBeforeActiveMeshesEvaluationObservable = new Observable();\n    /**\n     * An event triggered when active meshes evaluation is done\n     */\n    this.onAfterActiveMeshesEvaluationObservable = new Observable();\n    /**\n     * An event triggered when particles rendering is about to start\n     * Note: This event can be trigger more than once per frame (because particles can be rendered by render target textures as well)\n     */\n    this.onBeforeParticlesRenderingObservable = new Observable();\n    /**\n     * An event triggered when particles rendering is done\n     * Note: This event can be trigger more than once per frame (because particles can be rendered by render target textures as well)\n     */\n    this.onAfterParticlesRenderingObservable = new Observable();\n    /**\n     * An event triggered when SceneLoader.Append or SceneLoader.Load or SceneLoader.ImportMesh were successfully executed\n     */\n    this.onDataLoadedObservable = new Observable();\n    /**\n     * An event triggered when a camera is created\n     */\n    this.onNewCameraAddedObservable = new Observable();\n    /**\n     * An event triggered when a camera is removed\n     */\n    this.onCameraRemovedObservable = new Observable();\n    /**\n     * An event triggered when a light is created\n     */\n    this.onNewLightAddedObservable = new Observable();\n    /**\n     * An event triggered when a light is removed\n     */\n    this.onLightRemovedObservable = new Observable();\n    /**\n     * An event triggered when a geometry is created\n     */\n    this.onNewGeometryAddedObservable = new Observable();\n    /**\n     * An event triggered when a geometry is removed\n     */\n    this.onGeometryRemovedObservable = new Observable();\n    /**\n     * An event triggered when a transform node is created\n     */\n    this.onNewTransformNodeAddedObservable = new Observable();\n    /**\n     * An event triggered when a transform node is removed\n     */\n    this.onTransformNodeRemovedObservable = new Observable();\n    /**\n     * An event triggered when a mesh is created\n     */\n    this.onNewMeshAddedObservable = new Observable();\n    /**\n     * An event triggered when a mesh is removed\n     */\n    this.onMeshRemovedObservable = new Observable();\n    /**\n     * An event triggered when a skeleton is created\n     */\n    this.onNewSkeletonAddedObservable = new Observable();\n    /**\n     * An event triggered when a skeleton is removed\n     */\n    this.onSkeletonRemovedObservable = new Observable();\n    /**\n     * An event triggered when a material is created\n     */\n    this.onNewMaterialAddedObservable = new Observable();\n    /**\n     * An event triggered when a multi material is created\n     */\n    this.onNewMultiMaterialAddedObservable = new Observable();\n    /**\n     * An event triggered when a material is removed\n     */\n    this.onMaterialRemovedObservable = new Observable();\n    /**\n     * An event triggered when a multi material is removed\n     */\n    this.onMultiMaterialRemovedObservable = new Observable();\n    /**\n     * An event triggered when a texture is created\n     */\n    this.onNewTextureAddedObservable = new Observable();\n    /**\n     * An event triggered when a texture is removed\n     */\n    this.onTextureRemovedObservable = new Observable();\n    /**\n     * An event triggered when render targets are about to be rendered\n     * Can happen multiple times per frame.\n     */\n    this.onBeforeRenderTargetsRenderObservable = new Observable();\n    /**\n     * An event triggered when render targets were rendered.\n     * Can happen multiple times per frame.\n     */\n    this.onAfterRenderTargetsRenderObservable = new Observable();\n    /**\n     * An event triggered before calculating deterministic simulation step\n     */\n    this.onBeforeStepObservable = new Observable();\n    /**\n     * An event triggered after calculating deterministic simulation step\n     */\n    this.onAfterStepObservable = new Observable();\n    /**\n     * An event triggered when the activeCamera property is updated\n     */\n    this.onActiveCameraChanged = new Observable();\n    /**\n     * An event triggered when the activeCameras property is updated\n     */\n    this.onActiveCamerasChanged = new Observable();\n    /**\n     * This Observable will be triggered before rendering each renderingGroup of each rendered camera.\n     * The RenderingGroupInfo class contains all the information about the context in which the observable is called\n     * If you wish to register an Observer only for a given set of renderingGroup, use the mask with a combination of the renderingGroup index elevated to the power of two (1 for renderingGroup 0, 2 for renderingrOup1, 4 for 2 and 8 for 3)\n     */\n    this.onBeforeRenderingGroupObservable = new Observable();\n    /**\n     * This Observable will be triggered after rendering each renderingGroup of each rendered camera.\n     * The RenderingGroupInfo class contains all the information about the context in which the observable is called\n     * If you wish to register an Observer only for a given set of renderingGroup, use the mask with a combination of the renderingGroup index elevated to the power of two (1 for renderingGroup 0, 2 for renderingrOup1, 4 for 2 and 8 for 3)\n     */\n    this.onAfterRenderingGroupObservable = new Observable();\n    /**\n     * This Observable will when a mesh has been imported into the scene.\n     */\n    this.onMeshImportedObservable = new Observable();\n    /**\n     * This Observable will when an animation file has been imported into the scene.\n     */\n    this.onAnimationFileImportedObservable = new Observable();\n    // Animations\n    /** @internal */\n    this._registeredForLateAnimationBindings = new SmartArrayNoDuplicate(256);\n    /**\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer move event occurs.\n     */\n    this.skipPointerMovePicking = false;\n    /**\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer down event occurs.\n     */\n    this.skipPointerDownPicking = false;\n    /**\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer up event occurs.  Off by default.\n     */\n    this.skipPointerUpPicking = false;\n    /**\n     * This observable event is triggered when any ponter event is triggered. It is registered during Scene.attachControl() and it is called BEFORE the 3D engine process anything (mesh/sprite picking for instance).\n     * You have the possibility to skip the process and the call to onPointerObservable by setting PointerInfoPre.skipOnPointerObservable to true\n     */\n    this.onPrePointerObservable = new Observable();\n    /**\n     * Observable event triggered each time an input event is received from the rendering canvas\n     */\n    this.onPointerObservable = new Observable();\n    // Keyboard\n    /**\n     * This observable event is triggered when any keyboard event si raised and registered during Scene.attachControl()\n     * You have the possibility to skip the process and the call to onKeyboardObservable by setting KeyboardInfoPre.skipOnPointerObservable to true\n     */\n    this.onPreKeyboardObservable = new Observable();\n    /**\n     * Observable event triggered each time an keyboard event is received from the hosting window\n     */\n    this.onKeyboardObservable = new Observable();\n    // Coordinates system\n    this._useRightHandedSystem = false;\n    // Deterministic lockstep\n    this._timeAccumulator = 0;\n    this._currentStepId = 0;\n    this._currentInternalStep = 0;\n    // Fog\n    this._fogEnabled = true;\n    this._fogMode = Scene.FOGMODE_NONE;\n    /**\n     * Gets or sets the fog color to use\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n     * (Default is Color3(0.2, 0.2, 0.3))\n     */\n    this.fogColor = new Color3(0.2, 0.2, 0.3);\n    /**\n     * Gets or sets the fog density to use\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n     * (Default is 0.1)\n     */\n    this.fogDensity = 0.1;\n    /**\n     * Gets or sets the fog start distance to use\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n     * (Default is 0)\n     */\n    this.fogStart = 0;\n    /**\n     * Gets or sets the fog end distance to use\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n     * (Default is 1000)\n     */\n    this.fogEnd = 1000.0;\n    /**\n     * Flag indicating if we need to store previous matrices when rendering\n     */\n    this.needsPreviousWorldMatrices = false;\n    // Lights\n    this._shadowsEnabled = true;\n    this._lightsEnabled = true;\n    this._unObserveActiveCameras = null;\n    // Textures\n    this._texturesEnabled = true;\n    // Physics\n    /**\n     * Gets or sets a boolean indicating if physic engines are enabled on this scene\n     */\n    this.physicsEnabled = true;\n    // Particles\n    /**\n     * Gets or sets a boolean indicating if particles are enabled on this scene\n     */\n    this.particlesEnabled = true;\n    // Sprites\n    /**\n     * Gets or sets a boolean indicating if sprites are enabled on this scene\n     */\n    this.spritesEnabled = true;\n    // Skeletons\n    this._skeletonsEnabled = true;\n    // Lens flares\n    /**\n     * Gets or sets a boolean indicating if lens flares are enabled on this scene\n     */\n    this.lensFlaresEnabled = true;\n    // Collisions\n    /**\n     * Gets or sets a boolean indicating if collisions are enabled on this scene\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\n     */\n    this.collisionsEnabled = true;\n    /**\n     * Defines the gravity applied to this scene (used only for collisions)\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\n     */\n    this.gravity = new Vector3(0, -9.807, 0);\n    // Postprocesses\n    /**\n     * Gets or sets a boolean indicating if postprocesses are enabled on this scene\n     */\n    this.postProcessesEnabled = true;\n    // Customs render targets\n    /**\n     * Gets or sets a boolean indicating if render targets are enabled on this scene\n     */\n    this.renderTargetsEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if next render targets must be dumped as image for debugging purposes\n     * We recommend not using it and instead rely on Spector.js: http://spector.babylonjs.com\n     */\n    this.dumpNextRenderTargets = false;\n    /**\n     * The list of user defined render targets added to the scene\n     */\n    this.customRenderTargets = new Array();\n    /**\n     * Gets the list of meshes imported to the scene through SceneLoader\n     */\n    this.importedMeshesFiles = new Array();\n    // Probes\n    /**\n     * Gets or sets a boolean indicating if probes are enabled on this scene\n     */\n    this.probesEnabled = true;\n    this._meshesForIntersections = new SmartArrayNoDuplicate(256);\n    // Procedural textures\n    /**\n     * Gets or sets a boolean indicating if procedural textures are enabled on this scene\n     */\n    this.proceduralTexturesEnabled = true;\n    // Performance counters\n    this._totalVertices = new PerfCounter();\n    /** @internal */\n    this._activeIndices = new PerfCounter();\n    /** @internal */\n    this._activeParticles = new PerfCounter();\n    /** @internal */\n    this._activeBones = new PerfCounter();\n    /** @internal */\n    this._animationTime = 0;\n    /**\n     * Gets or sets a general scale for animation speed\n     * @see https://www.babylonjs-playground.com/#IBU2W7#3\n     */\n    this.animationTimeScale = 1;\n    this._renderId = 0;\n    this._frameId = 0;\n    this._executeWhenReadyTimeoutId = null;\n    this._intermediateRendering = false;\n    this._defaultFrameBufferCleared = false;\n    this._viewUpdateFlag = -1;\n    this._projectionUpdateFlag = -1;\n    /** @internal */\n    this._toBeDisposed = new Array(256);\n    this._activeRequests = new Array();\n    /** @internal */\n    this._pendingData = new Array();\n    this._isDisposed = false;\n    /**\n     * Gets or sets a boolean indicating that all submeshes of active meshes must be rendered\n     * Use this boolean to avoid computing frustum clipping on submeshes (This could help when you are CPU bound)\n     */\n    this.dispatchAllSubMeshesOfActiveMeshes = false;\n    this._activeMeshes = new SmartArray(256);\n    this._processedMaterials = new SmartArray(256);\n    this._renderTargets = new SmartArrayNoDuplicate(256);\n    this._materialsRenderTargets = new SmartArrayNoDuplicate(256);\n    /** @internal */\n    this._activeParticleSystems = new SmartArray(256);\n    this._activeSkeletons = new SmartArrayNoDuplicate(32);\n    this._softwareSkinnedMeshes = new SmartArrayNoDuplicate(32);\n    /** @internal */\n    this._activeAnimatables = new Array();\n    this._transformMatrix = Matrix.Zero();\n    /**\n     * Gets or sets a boolean indicating if lights must be sorted by priority (off by default)\n     * This is useful if there are more lights that the maximum simulteanous authorized\n     */\n    this.requireLightSorting = false;\n    /**\n     * @internal\n     * Backing store of defined scene components.\n     */\n    this._components = [];\n    /**\n     * @internal\n     * Backing store of defined scene components.\n     */\n    this._serializableComponents = [];\n    /**\n     * List of components to register on the next registration step.\n     */\n    this._transientComponents = [];\n    /**\n     * @internal\n     * Defines the actions happening before camera updates.\n     */\n    this._beforeCameraUpdateStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening before clear the canvas.\n     */\n    this._beforeClearStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening before clear the canvas.\n     */\n    this._beforeRenderTargetClearStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions when collecting render targets for the frame.\n     */\n    this._gatherRenderTargetsStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening for one camera in the frame.\n     */\n    this._gatherActiveCameraRenderTargetsStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening during the per mesh ready checks.\n     */\n    this._isReadyForMeshStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening before evaluate active mesh checks.\n     */\n    this._beforeEvaluateActiveMeshStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening during the evaluate sub mesh checks.\n     */\n    this._evaluateSubMeshStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening during the active mesh stage.\n     */\n    this._preActiveMeshStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening during the per camera render target step.\n     */\n    this._cameraDrawRenderTargetStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just before the active camera is drawing.\n     */\n    this._beforeCameraDrawStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just before a render target is drawing.\n     */\n    this._beforeRenderTargetDrawStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just before a rendering group is drawing.\n     */\n    this._beforeRenderingGroupDrawStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just before a mesh is drawing.\n     */\n    this._beforeRenderingMeshStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just after a mesh has been drawn.\n     */\n    this._afterRenderingMeshStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just after a rendering group has been drawn.\n     */\n    this._afterRenderingGroupDrawStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just after the active camera has been drawn.\n     */\n    this._afterCameraDrawStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just after the post processing\n     */\n    this._afterCameraPostProcessStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just after a render target has been drawn.\n     */\n    this._afterRenderTargetDrawStage = Stage.Create();\n    /**\n     * Defines the actions happening just after the post processing on a render target\n     */\n    this._afterRenderTargetPostProcessStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just after rendering all cameras and computing intersections.\n     */\n    this._afterRenderStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening when a pointer move event happens.\n     */\n    this._pointerMoveStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening when a pointer down event happens.\n     */\n    this._pointerDownStage = Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening when a pointer up event happens.\n     */\n    this._pointerUpStage = Stage.Create();\n    /**\n     * an optional map from Geometry Id to Geometry index in the 'geometries' array\n     */\n    this._geometriesByUniqueId = null;\n    this._defaultMeshCandidates = {\n      data: [],\n      length: 0\n    };\n    this._defaultSubMeshCandidates = {\n      data: [],\n      length: 0\n    };\n    this._preventFreeActiveMeshesAndRenderingGroups = false;\n    /** @internal */\n    this._activeMeshesFrozen = false;\n    /** @internal */\n    this._activeMeshesFrozenButKeepClipping = false;\n    this._skipEvaluateActiveMeshesCompletely = false;\n    /** @internal */\n    this._allowPostProcessClearColor = true;\n    /**\n     * User updatable function that will return a deterministic frame time when engine is in deterministic lock step mode\n     */\n    this.getDeterministicFrameTime = () => {\n      return this._engine.getTimeStep();\n    };\n    /** @internal */\n    this._registeredActions = 0;\n    this._blockMaterialDirtyMechanism = false;\n    /**\n     * Internal perfCollector instance used for sharing between inspector and playground.\n     * Marked as protected to allow sharing between prototype extensions, but disallow access at toplevel.\n     */\n    this._perfCollector = null;\n    this.activeCameras = new Array();\n    const fullOptions = {\n      useGeometryUniqueIdsMap: true,\n      useMaterialMeshMap: true,\n      useClonedMeshMap: true,\n      virtual: false,\n      ...options\n    };\n    this._engine = engine || EngineStore.LastCreatedEngine;\n    if (!fullOptions.virtual) {\n      EngineStore._LastCreatedScene = this;\n      this._engine.scenes.push(this);\n    } else {\n      this._engine._virtualScenes.push(this);\n    }\n    this._uid = null;\n    this._renderingManager = new RenderingManager(this);\n    if (PostProcessManager) {\n      this.postProcessManager = new PostProcessManager(this);\n    }\n    if (IsWindowObjectExist()) {\n      this.attachControl();\n    }\n    // Uniform Buffer\n    this._createUbo();\n    // Default Image processing definition\n    if (ImageProcessingConfiguration) {\n      this._imageProcessingConfiguration = new ImageProcessingConfiguration();\n    }\n    this.setDefaultCandidateProviders();\n    if (fullOptions.useGeometryUniqueIdsMap) {\n      this._geometriesByUniqueId = {};\n    }\n    this.useMaterialMeshMap = fullOptions.useMaterialMeshMap;\n    this.useClonedMeshMap = fullOptions.useClonedMeshMap;\n    if (!options || !options.virtual) {\n      this._engine.onNewSceneAddedObservable.notifyObservers(this);\n    }\n  }\n  /**\n   * Factory used to create the default material.\n   * @param scene The scene to create the material for\n   * @returns The default material\n   */\n  static DefaultMaterialFactory(scene) {\n    throw _WarnImport(\"StandardMaterial\");\n  }\n  /**\n   * Factory used to create the a collision coordinator.\n   * @returns The collision coordinator\n   */\n  static CollisionCoordinatorFactory() {\n    throw _WarnImport(\"DefaultCollisionCoordinator\");\n  }\n  /**\n   * Texture used in all pbr material as the reflection texture.\n   * As in the majority of the scene they are the same (exception for multi room and so on),\n   * this is easier to reference from here than from all the materials.\n   */\n  get environmentTexture() {\n    return this._environmentTexture;\n  }\n  /**\n   * Texture used in all pbr material as the reflection texture.\n   * As in the majority of the scene they are the same (exception for multi room and so on),\n   * this is easier to set here than in all the materials.\n   */\n  set environmentTexture(value) {\n    if (this._environmentTexture === value) {\n      return;\n    }\n    this._environmentTexture = value;\n    this.markAllMaterialsAsDirty(1);\n  }\n  /**\n   * Default image processing configuration used either in the rendering\n   * Forward main pass or through the imageProcessingPostProcess if present.\n   * As in the majority of the scene they are the same (exception for multi camera),\n   * this is easier to reference from here than from all the materials and post process.\n   *\n   * No setter as we it is a shared configuration, you can set the values instead.\n   */\n  get imageProcessingConfiguration() {\n    return this._imageProcessingConfiguration;\n  }\n  /**\n   * Gets or sets a value indicating how to treat performance relatively to ease of use and backward compatibility\n   */\n  get performancePriority() {\n    return this._performancePriority;\n  }\n  set performancePriority(value) {\n    if (value === this._performancePriority) {\n      return;\n    }\n    this._performancePriority = value;\n    switch (value) {\n      case ScenePerformancePriority.BackwardCompatible:\n        this.skipFrustumClipping = false;\n        this._renderingManager.maintainStateBetweenFrames = false;\n        this.skipPointerMovePicking = false;\n        this.autoClear = true;\n        break;\n      case ScenePerformancePriority.Intermediate:\n        this.skipFrustumClipping = false;\n        this._renderingManager.maintainStateBetweenFrames = false;\n        this.skipPointerMovePicking = true;\n        this.autoClear = false;\n        break;\n      case ScenePerformancePriority.Aggressive:\n        this.skipFrustumClipping = true;\n        this._renderingManager.maintainStateBetweenFrames = true;\n        this.skipPointerMovePicking = true;\n        this.autoClear = false;\n        break;\n    }\n  }\n  /**\n   * Gets or sets a boolean indicating if all rendering must be done in wireframe\n   */\n  set forceWireframe(value) {\n    if (this._forceWireframe === value) {\n      return;\n    }\n    this._forceWireframe = value;\n    this.markAllMaterialsAsDirty(16);\n  }\n  get forceWireframe() {\n    return this._forceWireframe;\n  }\n  /**\n   * Gets or sets a boolean indicating if we should skip the frustum clipping part of the active meshes selection\n   */\n  set skipFrustumClipping(value) {\n    if (this._skipFrustumClipping === value) {\n      return;\n    }\n    this._skipFrustumClipping = value;\n  }\n  get skipFrustumClipping() {\n    return this._skipFrustumClipping;\n  }\n  /**\n   * Gets or sets a boolean indicating if all rendering must be done in point cloud\n   */\n  set forcePointsCloud(value) {\n    if (this._forcePointsCloud === value) {\n      return;\n    }\n    this._forcePointsCloud = value;\n    this.markAllMaterialsAsDirty(16);\n  }\n  get forcePointsCloud() {\n    return this._forcePointsCloud;\n  }\n  /**\n   * Gets or sets the animation properties override\n   */\n  get animationPropertiesOverride() {\n    return this._animationPropertiesOverride;\n  }\n  set animationPropertiesOverride(value) {\n    this._animationPropertiesOverride = value;\n  }\n  /** Sets a function to be executed when this scene is disposed. */\n  set onDispose(callback) {\n    if (this._onDisposeObserver) {\n      this.onDisposeObservable.remove(this._onDisposeObserver);\n    }\n    this._onDisposeObserver = this.onDisposeObservable.add(callback);\n  }\n  /** Sets a function to be executed before rendering this scene */\n  set beforeRender(callback) {\n    if (this._onBeforeRenderObserver) {\n      this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\n    }\n    if (callback) {\n      this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\n    }\n  }\n  /** Sets a function to be executed after rendering this scene */\n  set afterRender(callback) {\n    if (this._onAfterRenderObserver) {\n      this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n    }\n    if (callback) {\n      this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\n    }\n  }\n  /** Sets a function to be executed before rendering a camera*/\n  set beforeCameraRender(callback) {\n    if (this._onBeforeCameraRenderObserver) {\n      this.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n    }\n    this._onBeforeCameraRenderObserver = this.onBeforeCameraRenderObservable.add(callback);\n  }\n  /** Sets a function to be executed after rendering a camera*/\n  set afterCameraRender(callback) {\n    if (this._onAfterCameraRenderObserver) {\n      this.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\n    }\n    this._onAfterCameraRenderObserver = this.onAfterCameraRenderObservable.add(callback);\n  }\n  /**\n   * Gets the pointer coordinates without any translation (ie. straight out of the pointer event)\n   */\n  get unTranslatedPointer() {\n    return this._inputManager.unTranslatedPointer;\n  }\n  /**\n   * Gets or sets the distance in pixel that you have to move to prevent some events. Default is 10 pixels\n   */\n  static get DragMovementThreshold() {\n    return InputManager.DragMovementThreshold;\n  }\n  static set DragMovementThreshold(value) {\n    InputManager.DragMovementThreshold = value;\n  }\n  /**\n   * Time in milliseconds to wait to raise long press events if button is still pressed. Default is 500 ms\n   */\n  static get LongPressDelay() {\n    return InputManager.LongPressDelay;\n  }\n  static set LongPressDelay(value) {\n    InputManager.LongPressDelay = value;\n  }\n  /**\n   * Time in milliseconds to wait to raise long press events if button is still pressed. Default is 300 ms\n   */\n  static get DoubleClickDelay() {\n    return InputManager.DoubleClickDelay;\n  }\n  static set DoubleClickDelay(value) {\n    InputManager.DoubleClickDelay = value;\n  }\n  /** If you need to check double click without raising a single click at first click, enable this flag */\n  static get ExclusiveDoubleClickMode() {\n    return InputManager.ExclusiveDoubleClickMode;\n  }\n  static set ExclusiveDoubleClickMode(value) {\n    InputManager.ExclusiveDoubleClickMode = value;\n  }\n  /**\n   * Bind the current view position to an effect.\n   * @param effect The effect to be bound\n   * @param variableName name of the shader variable that will hold the eye position\n   * @param isVector3 true to indicates that variableName is a Vector3 and not a Vector4\n   * @returns the computed eye position\n   */\n  bindEyePosition(effect, variableName = \"vEyePosition\", isVector3 = false) {\n    var _a;\n    const eyePosition = this._forcedViewPosition ? this._forcedViewPosition : this._mirroredCameraPosition ? this._mirroredCameraPosition : (_a = this.activeCamera.globalPosition) !== null && _a !== void 0 ? _a : this.activeCamera.devicePosition;\n    const invertNormal = this.useRightHandedSystem === (this._mirroredCameraPosition != null);\n    TmpVectors.Vector4[0].set(eyePosition.x, eyePosition.y, eyePosition.z, invertNormal ? -1 : 1);\n    if (effect) {\n      if (isVector3) {\n        effect.setFloat3(variableName, TmpVectors.Vector4[0].x, TmpVectors.Vector4[0].y, TmpVectors.Vector4[0].z);\n      } else {\n        effect.setVector4(variableName, TmpVectors.Vector4[0]);\n      }\n    }\n    return TmpVectors.Vector4[0];\n  }\n  /**\n   * Update the scene ubo before it can be used in rendering processing\n   * @returns the scene UniformBuffer\n   */\n  finalizeSceneUbo() {\n    const ubo = this.getSceneUniformBuffer();\n    const eyePosition = this.bindEyePosition(null);\n    ubo.updateFloat4(\"vEyePosition\", eyePosition.x, eyePosition.y, eyePosition.z, eyePosition.w);\n    ubo.update();\n    return ubo;\n  }\n  /**\n   * Gets or sets a boolean indicating if the scene must use right-handed coordinates system\n   */\n  set useRightHandedSystem(value) {\n    if (this._useRightHandedSystem === value) {\n      return;\n    }\n    this._useRightHandedSystem = value;\n    this.markAllMaterialsAsDirty(16);\n  }\n  get useRightHandedSystem() {\n    return this._useRightHandedSystem;\n  }\n  /**\n   * Sets the step Id used by deterministic lock step\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n   * @param newStepId defines the step Id\n   */\n  setStepId(newStepId) {\n    this._currentStepId = newStepId;\n  }\n  /**\n   * Gets the step Id used by deterministic lock step\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n   * @returns the step Id\n   */\n  getStepId() {\n    return this._currentStepId;\n  }\n  /**\n   * Gets the internal step used by deterministic lock step\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n   * @returns the internal step\n   */\n  getInternalStep() {\n    return this._currentInternalStep;\n  }\n  /**\n   * Gets or sets a boolean indicating if fog is enabled on this scene\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n   * (Default is true)\n   */\n  set fogEnabled(value) {\n    if (this._fogEnabled === value) {\n      return;\n    }\n    this._fogEnabled = value;\n    this.markAllMaterialsAsDirty(16);\n  }\n  get fogEnabled() {\n    return this._fogEnabled;\n  }\n  /**\n   * Gets or sets the fog mode to use\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n   * | mode | value |\n   * | --- | --- |\n   * | FOGMODE_NONE | 0 |\n   * | FOGMODE_EXP | 1 |\n   * | FOGMODE_EXP2 | 2 |\n   * | FOGMODE_LINEAR | 3 |\n   */\n  set fogMode(value) {\n    if (this._fogMode === value) {\n      return;\n    }\n    this._fogMode = value;\n    this.markAllMaterialsAsDirty(16);\n  }\n  get fogMode() {\n    return this._fogMode;\n  }\n  /**\n   * Flag indicating that the frame buffer binding is handled by another component\n   */\n  get prePass() {\n    return !!this.prePassRenderer && this.prePassRenderer.defaultRT.enabled;\n  }\n  /**\n   * Gets or sets a boolean indicating if shadows are enabled on this scene\n   */\n  set shadowsEnabled(value) {\n    if (this._shadowsEnabled === value) {\n      return;\n    }\n    this._shadowsEnabled = value;\n    this.markAllMaterialsAsDirty(2);\n  }\n  get shadowsEnabled() {\n    return this._shadowsEnabled;\n  }\n  /**\n   * Gets or sets a boolean indicating if lights are enabled on this scene\n   */\n  set lightsEnabled(value) {\n    if (this._lightsEnabled === value) {\n      return;\n    }\n    this._lightsEnabled = value;\n    this.markAllMaterialsAsDirty(2);\n  }\n  get lightsEnabled() {\n    return this._lightsEnabled;\n  }\n  /** All of the active cameras added to this scene. */\n  get activeCameras() {\n    return this._activeCameras;\n  }\n  set activeCameras(cameras) {\n    if (this._unObserveActiveCameras) {\n      this._unObserveActiveCameras();\n      this._unObserveActiveCameras = null;\n    }\n    if (cameras) {\n      this._unObserveActiveCameras = _ObserveArray(cameras, () => {\n        this.onActiveCamerasChanged.notifyObservers(this);\n      });\n    }\n    this._activeCameras = cameras;\n  }\n  /** Gets or sets the current active camera */\n  get activeCamera() {\n    return this._activeCamera;\n  }\n  set activeCamera(value) {\n    if (value === this._activeCamera) {\n      return;\n    }\n    this._activeCamera = value;\n    this.onActiveCameraChanged.notifyObservers(this);\n  }\n  /** The default material used on meshes when no material is affected */\n  get defaultMaterial() {\n    if (!this._defaultMaterial) {\n      this._defaultMaterial = Scene.DefaultMaterialFactory(this);\n    }\n    return this._defaultMaterial;\n  }\n  /** The default material used on meshes when no material is affected */\n  set defaultMaterial(value) {\n    this._defaultMaterial = value;\n  }\n  /**\n   * Gets or sets a boolean indicating if textures are enabled on this scene\n   */\n  set texturesEnabled(value) {\n    if (this._texturesEnabled === value) {\n      return;\n    }\n    this._texturesEnabled = value;\n    this.markAllMaterialsAsDirty(1);\n  }\n  get texturesEnabled() {\n    return this._texturesEnabled;\n  }\n  /**\n   * Gets or sets a boolean indicating if skeletons are enabled on this scene\n   */\n  set skeletonsEnabled(value) {\n    if (this._skeletonsEnabled === value) {\n      return;\n    }\n    this._skeletonsEnabled = value;\n    this.markAllMaterialsAsDirty(8);\n  }\n  get skeletonsEnabled() {\n    return this._skeletonsEnabled;\n  }\n  /** @internal */\n  get collisionCoordinator() {\n    if (!this._collisionCoordinator) {\n      this._collisionCoordinator = Scene.CollisionCoordinatorFactory();\n      this._collisionCoordinator.init(this);\n    }\n    return this._collisionCoordinator;\n  }\n  /**\n   * Gets the scene's rendering manager\n   */\n  get renderingManager() {\n    return this._renderingManager;\n  }\n  /**\n   * Gets the list of frustum planes (built from the active camera)\n   */\n  get frustumPlanes() {\n    return this._frustumPlanes;\n  }\n  /**\n   * Registers the transient components if needed.\n   */\n  _registerTransientComponents() {\n    // Register components that have been associated lately to the scene.\n    if (this._transientComponents.length > 0) {\n      for (const component of this._transientComponents) {\n        component.register();\n      }\n      this._transientComponents.length = 0;\n    }\n  }\n  /**\n   * @internal\n   * Add a component to the scene.\n   * Note that the ccomponent could be registered on th next frame if this is called after\n   * the register component stage.\n   * @param component Defines the component to add to the scene\n   */\n  _addComponent(component) {\n    this._components.push(component);\n    this._transientComponents.push(component);\n    const serializableComponent = component;\n    if (serializableComponent.addFromContainer && serializableComponent.serialize) {\n      this._serializableComponents.push(serializableComponent);\n    }\n  }\n  /**\n   * @internal\n   * Gets a component from the scene.\n   * @param name defines the name of the component to retrieve\n   * @returns the component or null if not present\n   */\n  _getComponent(name) {\n    for (const component of this._components) {\n      if (component.name === name) {\n        return component;\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"Scene\" string\n   */\n  getClassName() {\n    return \"Scene\";\n  }\n  /**\n   * @internal\n   */\n  _getDefaultMeshCandidates() {\n    this._defaultMeshCandidates.data = this.meshes;\n    this._defaultMeshCandidates.length = this.meshes.length;\n    return this._defaultMeshCandidates;\n  }\n  /**\n   * @internal\n   */\n  _getDefaultSubMeshCandidates(mesh) {\n    this._defaultSubMeshCandidates.data = mesh.subMeshes;\n    this._defaultSubMeshCandidates.length = mesh.subMeshes.length;\n    return this._defaultSubMeshCandidates;\n  }\n  /**\n   * Sets the default candidate providers for the scene.\n   * This sets the getActiveMeshCandidates, getActiveSubMeshCandidates, getIntersectingSubMeshCandidates\n   * and getCollidingSubMeshCandidates to their default function\n   */\n  setDefaultCandidateProviders() {\n    this.getActiveMeshCandidates = this._getDefaultMeshCandidates.bind(this);\n    this.getActiveSubMeshCandidates = this._getDefaultSubMeshCandidates.bind(this);\n    this.getIntersectingSubMeshCandidates = this._getDefaultSubMeshCandidates.bind(this);\n    this.getCollidingSubMeshCandidates = this._getDefaultSubMeshCandidates.bind(this);\n  }\n  /**\n   * Gets the mesh that is currently under the pointer\n   */\n  get meshUnderPointer() {\n    return this._inputManager.meshUnderPointer;\n  }\n  /**\n   * Gets or sets the current on-screen X position of the pointer\n   */\n  get pointerX() {\n    return this._inputManager.pointerX;\n  }\n  set pointerX(value) {\n    this._inputManager.pointerX = value;\n  }\n  /**\n   * Gets or sets the current on-screen Y position of the pointer\n   */\n  get pointerY() {\n    return this._inputManager.pointerY;\n  }\n  set pointerY(value) {\n    this._inputManager.pointerY = value;\n  }\n  /**\n   * Gets the cached material (ie. the latest rendered one)\n   * @returns the cached material\n   */\n  getCachedMaterial() {\n    return this._cachedMaterial;\n  }\n  /**\n   * Gets the cached effect (ie. the latest rendered one)\n   * @returns the cached effect\n   */\n  getCachedEffect() {\n    return this._cachedEffect;\n  }\n  /**\n   * Gets the cached visibility state (ie. the latest rendered one)\n   * @returns the cached visibility state\n   */\n  getCachedVisibility() {\n    return this._cachedVisibility;\n  }\n  /**\n   * Gets a boolean indicating if the current material / effect / visibility must be bind again\n   * @param material defines the current material\n   * @param effect defines the current effect\n   * @param visibility defines the current visibility state\n   * @returns true if one parameter is not cached\n   */\n  isCachedMaterialInvalid(material, effect, visibility = 1) {\n    return this._cachedEffect !== effect || this._cachedMaterial !== material || this._cachedVisibility !== visibility;\n  }\n  /**\n   * Gets the engine associated with the scene\n   * @returns an Engine\n   */\n  getEngine() {\n    return this._engine;\n  }\n  /**\n   * Gets the total number of vertices rendered per frame\n   * @returns the total number of vertices rendered per frame\n   */\n  getTotalVertices() {\n    return this._totalVertices.current;\n  }\n  /**\n   * Gets the performance counter for total vertices\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\n   */\n  get totalVerticesPerfCounter() {\n    return this._totalVertices;\n  }\n  /**\n   * Gets the total number of active indices rendered per frame (You can deduce the number of rendered triangles by dividing this number by 3)\n   * @returns the total number of active indices rendered per frame\n   */\n  getActiveIndices() {\n    return this._activeIndices.current;\n  }\n  /**\n   * Gets the performance counter for active indices\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\n   */\n  get totalActiveIndicesPerfCounter() {\n    return this._activeIndices;\n  }\n  /**\n   * Gets the total number of active particles rendered per frame\n   * @returns the total number of active particles rendered per frame\n   */\n  getActiveParticles() {\n    return this._activeParticles.current;\n  }\n  /**\n   * Gets the performance counter for active particles\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\n   */\n  get activeParticlesPerfCounter() {\n    return this._activeParticles;\n  }\n  /**\n   * Gets the total number of active bones rendered per frame\n   * @returns the total number of active bones rendered per frame\n   */\n  getActiveBones() {\n    return this._activeBones.current;\n  }\n  /**\n   * Gets the performance counter for active bones\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\n   */\n  get activeBonesPerfCounter() {\n    return this._activeBones;\n  }\n  /**\n   * Gets the array of active meshes\n   * @returns an array of AbstractMesh\n   */\n  getActiveMeshes() {\n    return this._activeMeshes;\n  }\n  /**\n   * Gets the animation ratio (which is 1.0 is the scene renders at 60fps and 2 if the scene renders at 30fps, etc.)\n   * @returns a number\n   */\n  getAnimationRatio() {\n    return this._animationRatio !== undefined ? this._animationRatio : 1;\n  }\n  /**\n   * Gets an unique Id for the current render phase\n   * @returns a number\n   */\n  getRenderId() {\n    return this._renderId;\n  }\n  /**\n   * Gets an unique Id for the current frame\n   * @returns a number\n   */\n  getFrameId() {\n    return this._frameId;\n  }\n  /** Call this function if you want to manually increment the render Id*/\n  incrementRenderId() {\n    this._renderId++;\n  }\n  _createUbo() {\n    this.setSceneUniformBuffer(this.createSceneUniformBuffer());\n  }\n  /**\n   * Use this method to simulate a pointer move on a mesh\n   * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n   * @param pickResult pickingInfo of the object wished to simulate pointer event on\n   * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n   * @returns the current scene\n   */\n  simulatePointerMove(pickResult, pointerEventInit) {\n    this._inputManager.simulatePointerMove(pickResult, pointerEventInit);\n    return this;\n  }\n  /**\n   * Use this method to simulate a pointer down on a mesh\n   * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n   * @param pickResult pickingInfo of the object wished to simulate pointer event on\n   * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n   * @returns the current scene\n   */\n  simulatePointerDown(pickResult, pointerEventInit) {\n    this._inputManager.simulatePointerDown(pickResult, pointerEventInit);\n    return this;\n  }\n  /**\n   * Use this method to simulate a pointer up on a mesh\n   * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n   * @param pickResult pickingInfo of the object wished to simulate pointer event on\n   * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n   * @param doubleTap indicates that the pointer up event should be considered as part of a double click (false by default)\n   * @returns the current scene\n   */\n  simulatePointerUp(pickResult, pointerEventInit, doubleTap) {\n    this._inputManager.simulatePointerUp(pickResult, pointerEventInit, doubleTap);\n    return this;\n  }\n  /**\n   * Gets a boolean indicating if the current pointer event is captured (meaning that the scene has already handled the pointer down)\n   * @param pointerId defines the pointer id to use in a multi-touch scenario (0 by default)\n   * @returns true if the pointer was captured\n   */\n  isPointerCaptured(pointerId = 0) {\n    return this._inputManager.isPointerCaptured(pointerId);\n  }\n  /**\n   * Attach events to the canvas (To handle actionManagers triggers and raise onPointerMove, onPointerDown and onPointerUp\n   * @param attachUp defines if you want to attach events to pointerup\n   * @param attachDown defines if you want to attach events to pointerdown\n   * @param attachMove defines if you want to attach events to pointermove\n   */\n  attachControl(attachUp = true, attachDown = true, attachMove = true) {\n    this._inputManager.attachControl(attachUp, attachDown, attachMove);\n  }\n  /** Detaches all event handlers*/\n  detachControl() {\n    this._inputManager.detachControl();\n  }\n  /**\n   * This function will check if the scene can be rendered (textures are loaded, shaders are compiled)\n   * Delay loaded resources are not taking in account\n   * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: true)\n   * @returns true if all required resources are ready\n   */\n  isReady(checkRenderTargets = true) {\n    if (this._isDisposed) {\n      return false;\n    }\n    let index;\n    const engine = this.getEngine();\n    let isReady = true;\n    // Pending data\n    if (this._pendingData.length > 0) {\n      isReady = false;\n    }\n    // Meshes\n    if (checkRenderTargets) {\n      this._processedMaterials.reset();\n      this._materialsRenderTargets.reset();\n    }\n    for (index = 0; index < this.meshes.length; index++) {\n      const mesh = this.meshes[index];\n      if (!mesh.subMeshes || mesh.subMeshes.length === 0) {\n        continue;\n      }\n      // Do not stop at the first encountered \"unready\" object as we want to ensure\n      // all materials are starting off their compilation in parallel.\n      if (!mesh.isReady(true)) {\n        isReady = false;\n        continue;\n      }\n      const hardwareInstancedRendering = mesh.hasThinInstances || mesh.getClassName() === \"InstancedMesh\" || mesh.getClassName() === \"InstancedLinesMesh\" || engine.getCaps().instancedArrays && mesh.instances.length > 0;\n      // Is Ready For Mesh\n      for (const step of this._isReadyForMeshStage) {\n        if (!step.action(mesh, hardwareInstancedRendering)) {\n          isReady = false;\n        }\n      }\n      if (!checkRenderTargets) {\n        continue;\n      }\n      const mat = mesh.material || this.defaultMaterial;\n      if (mat) {\n        if (mat._storeEffectOnSubMeshes) {\n          for (const subMesh of mesh.subMeshes) {\n            const material = subMesh.getMaterial();\n            if (material && material.hasRenderTargetTextures && material.getRenderTargetTextures != null) {\n              if (this._processedMaterials.indexOf(material) === -1) {\n                this._processedMaterials.push(material);\n                this._materialsRenderTargets.concatWithNoDuplicate(material.getRenderTargetTextures());\n              }\n            }\n          }\n        } else {\n          if (mat.hasRenderTargetTextures && mat.getRenderTargetTextures != null) {\n            if (this._processedMaterials.indexOf(mat) === -1) {\n              this._processedMaterials.push(mat);\n              this._materialsRenderTargets.concatWithNoDuplicate(mat.getRenderTargetTextures());\n            }\n          }\n        }\n      }\n    }\n    if (!isReady) {\n      return false;\n    }\n    // Effects\n    if (!engine.areAllEffectsReady()) {\n      return false;\n    }\n    // Render targets\n    if (checkRenderTargets) {\n      for (index = 0; index < this._materialsRenderTargets.length; ++index) {\n        const rtt = this._materialsRenderTargets.data[index];\n        if (!rtt.isReadyForRendering()) {\n          return false;\n        }\n      }\n    }\n    // Geometries\n    for (index = 0; index < this.geometries.length; index++) {\n      const geometry = this.geometries[index];\n      if (geometry.delayLoadState === 2) {\n        return false;\n      }\n    }\n    // Post-processes\n    if (this.activeCameras && this.activeCameras.length > 0) {\n      for (const camera of this.activeCameras) {\n        if (!camera.isReady(true)) {\n          return false;\n        }\n      }\n    } else if (this.activeCamera) {\n      if (!this.activeCamera.isReady(true)) {\n        return false;\n      }\n    }\n    // Particles\n    for (const particleSystem of this.particleSystems) {\n      if (!particleSystem.isReady()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /** Resets all cached information relative to material (including effect and visibility) */\n  resetCachedMaterial() {\n    this._cachedMaterial = null;\n    this._cachedEffect = null;\n    this._cachedVisibility = null;\n  }\n  /**\n   * Registers a function to be called before every frame render\n   * @param func defines the function to register\n   */\n  registerBeforeRender(func) {\n    this.onBeforeRenderObservable.add(func);\n  }\n  /**\n   * Unregisters a function called before every frame render\n   * @param func defines the function to unregister\n   */\n  unregisterBeforeRender(func) {\n    this.onBeforeRenderObservable.removeCallback(func);\n  }\n  /**\n   * Registers a function to be called after every frame render\n   * @param func defines the function to register\n   */\n  registerAfterRender(func) {\n    this.onAfterRenderObservable.add(func);\n  }\n  /**\n   * Unregisters a function called after every frame render\n   * @param func defines the function to unregister\n   */\n  unregisterAfterRender(func) {\n    this.onAfterRenderObservable.removeCallback(func);\n  }\n  _executeOnceBeforeRender(func) {\n    const execFunc = () => {\n      func();\n      setTimeout(() => {\n        this.unregisterBeforeRender(execFunc);\n      });\n    };\n    this.registerBeforeRender(execFunc);\n  }\n  /**\n   * The provided function will run before render once and will be disposed afterwards.\n   * A timeout delay can be provided so that the function will be executed in N ms.\n   * The timeout is using the browser's native setTimeout so time percision cannot be guaranteed.\n   * @param func The function to be executed.\n   * @param timeout optional delay in ms\n   */\n  executeOnceBeforeRender(func, timeout) {\n    if (timeout !== undefined) {\n      setTimeout(() => {\n        this._executeOnceBeforeRender(func);\n      }, timeout);\n    } else {\n      this._executeOnceBeforeRender(func);\n    }\n  }\n  /**\n   * This function can help adding any object to the list of data awaited to be ready in order to check for a complete scene loading.\n   * @param data defines the object to wait for\n   */\n  addPendingData(data) {\n    this._pendingData.push(data);\n  }\n  /**\n   * Remove a pending data from the loading list which has previously been added with addPendingData.\n   * @param data defines the object to remove from the pending list\n   */\n  removePendingData(data) {\n    const wasLoading = this.isLoading;\n    const index = this._pendingData.indexOf(data);\n    if (index !== -1) {\n      this._pendingData.splice(index, 1);\n    }\n    if (wasLoading && !this.isLoading) {\n      this.onDataLoadedObservable.notifyObservers(this);\n    }\n  }\n  /**\n   * Returns the number of items waiting to be loaded\n   * @returns the number of items waiting to be loaded\n   */\n  getWaitingItemsCount() {\n    return this._pendingData.length;\n  }\n  /**\n   * Returns a boolean indicating if the scene is still loading data\n   */\n  get isLoading() {\n    return this._pendingData.length > 0;\n  }\n  /**\n   * Registers a function to be executed when the scene is ready\n   * @param {Function} func - the function to be executed\n   * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: false)\n   */\n  executeWhenReady(func, checkRenderTargets = false) {\n    this.onReadyObservable.addOnce(func);\n    if (this._executeWhenReadyTimeoutId !== null) {\n      return;\n    }\n    this._checkIsReady(checkRenderTargets);\n  }\n  /**\n   * Returns a promise that resolves when the scene is ready\n   * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: false)\n   * @returns A promise that resolves when the scene is ready\n   */\n  whenReadyAsync(checkRenderTargets = false) {\n    return new Promise(resolve => {\n      this.executeWhenReady(() => {\n        resolve();\n      }, checkRenderTargets);\n    });\n  }\n  /**\n   * @internal\n   */\n  _checkIsReady(checkRenderTargets = false) {\n    this._registerTransientComponents();\n    if (this.isReady(checkRenderTargets)) {\n      this.onReadyObservable.notifyObservers(this);\n      this.onReadyObservable.clear();\n      this._executeWhenReadyTimeoutId = null;\n      return;\n    }\n    if (this._isDisposed) {\n      this.onReadyObservable.clear();\n      this._executeWhenReadyTimeoutId = null;\n      return;\n    }\n    this._executeWhenReadyTimeoutId = setTimeout(() => {\n      // Ensure materials effects are checked outside render loops\n      this.incrementRenderId();\n      this._checkIsReady(checkRenderTargets);\n    }, 100);\n  }\n  /**\n   * Gets all animatable attached to the scene\n   */\n  get animatables() {\n    return this._activeAnimatables;\n  }\n  /**\n   * Resets the last animation time frame.\n   * Useful to override when animations start running when loading a scene for the first time.\n   */\n  resetLastAnimationTimeFrame() {\n    this._animationTimeLast = PrecisionDate.Now;\n  }\n  // Matrix\n  /**\n   * Gets the current view matrix\n   * @returns a Matrix\n   */\n  getViewMatrix() {\n    return this._viewMatrix;\n  }\n  /**\n   * Gets the current projection matrix\n   * @returns a Matrix\n   */\n  getProjectionMatrix() {\n    return this._projectionMatrix;\n  }\n  /**\n   * Gets the current transform matrix\n   * @returns a Matrix made of View * Projection\n   */\n  getTransformMatrix() {\n    return this._transformMatrix;\n  }\n  /**\n   * Sets the current transform matrix\n   * @param viewL defines the View matrix to use\n   * @param projectionL defines the Projection matrix to use\n   * @param viewR defines the right View matrix to use (if provided)\n   * @param projectionR defines the right Projection matrix to use (if provided)\n   */\n  setTransformMatrix(viewL, projectionL, viewR, projectionR) {\n    // clear the multiviewSceneUbo if no viewR and projectionR are defined\n    if (!viewR && !projectionR && this._multiviewSceneUbo) {\n      this._multiviewSceneUbo.dispose();\n      this._multiviewSceneUbo = null;\n    }\n    if (this._viewUpdateFlag === viewL.updateFlag && this._projectionUpdateFlag === projectionL.updateFlag) {\n      return;\n    }\n    this._viewUpdateFlag = viewL.updateFlag;\n    this._projectionUpdateFlag = projectionL.updateFlag;\n    this._viewMatrix = viewL;\n    this._projectionMatrix = projectionL;\n    this._viewMatrix.multiplyToRef(this._projectionMatrix, this._transformMatrix);\n    // Update frustum\n    if (!this._frustumPlanes) {\n      this._frustumPlanes = Frustum.GetPlanes(this._transformMatrix);\n    } else {\n      Frustum.GetPlanesToRef(this._transformMatrix, this._frustumPlanes);\n    }\n    if (this._multiviewSceneUbo && this._multiviewSceneUbo.useUbo) {\n      this._updateMultiviewUbo(viewR, projectionR);\n    } else if (this._sceneUbo.useUbo) {\n      this._sceneUbo.updateMatrix(\"viewProjection\", this._transformMatrix);\n      this._sceneUbo.updateMatrix(\"view\", this._viewMatrix);\n      this._sceneUbo.updateMatrix(\"projection\", this._projectionMatrix);\n    }\n  }\n  /**\n   * Gets the uniform buffer used to store scene data\n   * @returns a UniformBuffer\n   */\n  getSceneUniformBuffer() {\n    return this._multiviewSceneUbo ? this._multiviewSceneUbo : this._sceneUbo;\n  }\n  /**\n   * Creates a scene UBO\n   * @param name name of the uniform buffer (optional, for debugging purpose only)\n   * @returns a new ubo\n   */\n  createSceneUniformBuffer(name) {\n    const sceneUbo = new UniformBuffer(this._engine, undefined, false, name !== null && name !== void 0 ? name : \"scene\");\n    sceneUbo.addUniform(\"viewProjection\", 16);\n    sceneUbo.addUniform(\"view\", 16);\n    sceneUbo.addUniform(\"projection\", 16);\n    sceneUbo.addUniform(\"vEyePosition\", 4);\n    return sceneUbo;\n  }\n  /**\n   * Sets the scene ubo\n   * @param ubo the ubo to set for the scene\n   */\n  setSceneUniformBuffer(ubo) {\n    this._sceneUbo = ubo;\n    this._viewUpdateFlag = -1;\n    this._projectionUpdateFlag = -1;\n  }\n  /**\n   * Gets an unique (relatively to the current scene) Id\n   * @returns an unique number for the scene\n   */\n  getUniqueId() {\n    return UniqueIdGenerator.UniqueId;\n  }\n  /**\n   * Add a mesh to the list of scene's meshes\n   * @param newMesh defines the mesh to add\n   * @param recursive if all child meshes should also be added to the scene\n   */\n  addMesh(newMesh, recursive = false) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n    this.meshes.push(newMesh);\n    newMesh._resyncLightSources();\n    if (!newMesh.parent) {\n      newMesh._addToSceneRootNodes();\n    }\n    this.onNewMeshAddedObservable.notifyObservers(newMesh);\n    if (recursive) {\n      newMesh.getChildMeshes().forEach(m => {\n        this.addMesh(m);\n      });\n    }\n  }\n  /**\n   * Remove a mesh for the list of scene's meshes\n   * @param toRemove defines the mesh to remove\n   * @param recursive if all child meshes should also be removed from the scene\n   * @returns the index where the mesh was in the mesh list\n   */\n  removeMesh(toRemove, recursive = false) {\n    const index = this.meshes.indexOf(toRemove);\n    if (index !== -1) {\n      // Remove from the scene if mesh found\n      this.meshes[index] = this.meshes[this.meshes.length - 1];\n      this.meshes.pop();\n      if (!toRemove.parent) {\n        toRemove._removeFromSceneRootNodes();\n      }\n    }\n    this._inputManager._invalidateMesh(toRemove);\n    this.onMeshRemovedObservable.notifyObservers(toRemove);\n    if (recursive) {\n      toRemove.getChildMeshes().forEach(m => {\n        this.removeMesh(m);\n      });\n    }\n    return index;\n  }\n  /**\n   * Add a transform node to the list of scene's transform nodes\n   * @param newTransformNode defines the transform node to add\n   */\n  addTransformNode(newTransformNode) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n    if (newTransformNode.getScene() === this && newTransformNode._indexInSceneTransformNodesArray !== -1) {\n      // Already there?\n      return;\n    }\n    newTransformNode._indexInSceneTransformNodesArray = this.transformNodes.length;\n    this.transformNodes.push(newTransformNode);\n    if (!newTransformNode.parent) {\n      newTransformNode._addToSceneRootNodes();\n    }\n    this.onNewTransformNodeAddedObservable.notifyObservers(newTransformNode);\n  }\n  /**\n   * Remove a transform node for the list of scene's transform nodes\n   * @param toRemove defines the transform node to remove\n   * @returns the index where the transform node was in the transform node list\n   */\n  removeTransformNode(toRemove) {\n    const index = toRemove._indexInSceneTransformNodesArray;\n    if (index !== -1) {\n      if (index !== this.transformNodes.length - 1) {\n        const lastNode = this.transformNodes[this.transformNodes.length - 1];\n        this.transformNodes[index] = lastNode;\n        lastNode._indexInSceneTransformNodesArray = index;\n      }\n      toRemove._indexInSceneTransformNodesArray = -1;\n      this.transformNodes.pop();\n      if (!toRemove.parent) {\n        toRemove._removeFromSceneRootNodes();\n      }\n    }\n    this.onTransformNodeRemovedObservable.notifyObservers(toRemove);\n    return index;\n  }\n  /**\n   * Remove a skeleton for the list of scene's skeletons\n   * @param toRemove defines the skeleton to remove\n   * @returns the index where the skeleton was in the skeleton list\n   */\n  removeSkeleton(toRemove) {\n    const index = this.skeletons.indexOf(toRemove);\n    if (index !== -1) {\n      // Remove from the scene if found\n      this.skeletons.splice(index, 1);\n      this.onSkeletonRemovedObservable.notifyObservers(toRemove);\n      // Clean active container\n      this._executeActiveContainerCleanup(this._activeSkeletons);\n    }\n    return index;\n  }\n  /**\n   * Remove a morph target for the list of scene's morph targets\n   * @param toRemove defines the morph target to remove\n   * @returns the index where the morph target was in the morph target list\n   */\n  removeMorphTargetManager(toRemove) {\n    const index = this.morphTargetManagers.indexOf(toRemove);\n    if (index !== -1) {\n      // Remove from the scene if found\n      this.morphTargetManagers.splice(index, 1);\n    }\n    return index;\n  }\n  /**\n   * Remove a light for the list of scene's lights\n   * @param toRemove defines the light to remove\n   * @returns the index where the light was in the light list\n   */\n  removeLight(toRemove) {\n    const index = this.lights.indexOf(toRemove);\n    if (index !== -1) {\n      // Remove from meshes\n      for (const mesh of this.meshes) {\n        mesh._removeLightSource(toRemove, false);\n      }\n      // Remove from the scene if mesh found\n      this.lights.splice(index, 1);\n      this.sortLightsByPriority();\n      if (!toRemove.parent) {\n        toRemove._removeFromSceneRootNodes();\n      }\n    }\n    this.onLightRemovedObservable.notifyObservers(toRemove);\n    return index;\n  }\n  /**\n   * Remove a camera for the list of scene's cameras\n   * @param toRemove defines the camera to remove\n   * @returns the index where the camera was in the camera list\n   */\n  removeCamera(toRemove) {\n    const index = this.cameras.indexOf(toRemove);\n    if (index !== -1) {\n      // Remove from the scene if mesh found\n      this.cameras.splice(index, 1);\n      if (!toRemove.parent) {\n        toRemove._removeFromSceneRootNodes();\n      }\n    }\n    // Remove from activeCameras\n    if (this.activeCameras) {\n      const index2 = this.activeCameras.indexOf(toRemove);\n      if (index2 !== -1) {\n        // Remove from the scene if mesh found\n        this.activeCameras.splice(index2, 1);\n      }\n    }\n    // Reset the activeCamera\n    if (this.activeCamera === toRemove) {\n      if (this.cameras.length > 0) {\n        this.activeCamera = this.cameras[0];\n      } else {\n        this.activeCamera = null;\n      }\n    }\n    this.onCameraRemovedObservable.notifyObservers(toRemove);\n    return index;\n  }\n  /**\n   * Remove a particle system for the list of scene's particle systems\n   * @param toRemove defines the particle system to remove\n   * @returns the index where the particle system was in the particle system list\n   */\n  removeParticleSystem(toRemove) {\n    const index = this.particleSystems.indexOf(toRemove);\n    if (index !== -1) {\n      this.particleSystems.splice(index, 1);\n      // Clean active container\n      this._executeActiveContainerCleanup(this._activeParticleSystems);\n    }\n    return index;\n  }\n  /**\n   * Remove a animation for the list of scene's animations\n   * @param toRemove defines the animation to remove\n   * @returns the index where the animation was in the animation list\n   */\n  removeAnimation(toRemove) {\n    const index = this.animations.indexOf(toRemove);\n    if (index !== -1) {\n      this.animations.splice(index, 1);\n    }\n    return index;\n  }\n  /**\n   * Will stop the animation of the given target\n   * @param target - the target\n   * @param animationName - the name of the animation to stop (all animations will be stopped if both this and targetMask are empty)\n   * @param targetMask - a function that determines if the animation should be stopped based on its target (all animations will be stopped if both this and animationName are empty)\n   */\n  stopAnimation(target, animationName, targetMask) {\n    // Do nothing as code will be provided by animation component\n  }\n  /**\n   * Removes the given animation group from this scene.\n   * @param toRemove The animation group to remove\n   * @returns The index of the removed animation group\n   */\n  removeAnimationGroup(toRemove) {\n    const index = this.animationGroups.indexOf(toRemove);\n    if (index !== -1) {\n      this.animationGroups.splice(index, 1);\n    }\n    return index;\n  }\n  /**\n   * Removes the given multi-material from this scene.\n   * @param toRemove The multi-material to remove\n   * @returns The index of the removed multi-material\n   */\n  removeMultiMaterial(toRemove) {\n    const index = this.multiMaterials.indexOf(toRemove);\n    if (index !== -1) {\n      this.multiMaterials.splice(index, 1);\n    }\n    this.onMultiMaterialRemovedObservable.notifyObservers(toRemove);\n    return index;\n  }\n  /**\n   * Removes the given material from this scene.\n   * @param toRemove The material to remove\n   * @returns The index of the removed material\n   */\n  removeMaterial(toRemove) {\n    const index = toRemove._indexInSceneMaterialArray;\n    if (index !== -1 && index < this.materials.length) {\n      if (index !== this.materials.length - 1) {\n        const lastMaterial = this.materials[this.materials.length - 1];\n        this.materials[index] = lastMaterial;\n        lastMaterial._indexInSceneMaterialArray = index;\n      }\n      toRemove._indexInSceneMaterialArray = -1;\n      this.materials.pop();\n    }\n    this.onMaterialRemovedObservable.notifyObservers(toRemove);\n    return index;\n  }\n  /**\n   * Removes the given action manager from this scene.\n   * @deprecated\n   * @param toRemove The action manager to remove\n   * @returns The index of the removed action manager\n   */\n  removeActionManager(toRemove) {\n    const index = this.actionManagers.indexOf(toRemove);\n    if (index !== -1) {\n      this.actionManagers.splice(index, 1);\n    }\n    return index;\n  }\n  /**\n   * Removes the given texture from this scene.\n   * @param toRemove The texture to remove\n   * @returns The index of the removed texture\n   */\n  removeTexture(toRemove) {\n    const index = this.textures.indexOf(toRemove);\n    if (index !== -1) {\n      this.textures.splice(index, 1);\n    }\n    this.onTextureRemovedObservable.notifyObservers(toRemove);\n    return index;\n  }\n  /**\n   * Adds the given light to this scene\n   * @param newLight The light to add\n   */\n  addLight(newLight) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n    this.lights.push(newLight);\n    this.sortLightsByPriority();\n    if (!newLight.parent) {\n      newLight._addToSceneRootNodes();\n    }\n    // Add light to all meshes (To support if the light is removed and then re-added)\n    for (const mesh of this.meshes) {\n      if (mesh.lightSources.indexOf(newLight) === -1) {\n        mesh.lightSources.push(newLight);\n        mesh._resyncLightSources();\n      }\n    }\n    this.onNewLightAddedObservable.notifyObservers(newLight);\n  }\n  /**\n   * Sorts the list list based on light priorities\n   */\n  sortLightsByPriority() {\n    if (this.requireLightSorting) {\n      this.lights.sort(LightConstants.CompareLightsPriority);\n    }\n  }\n  /**\n   * Adds the given camera to this scene\n   * @param newCamera The camera to add\n   */\n  addCamera(newCamera) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n    this.cameras.push(newCamera);\n    this.onNewCameraAddedObservable.notifyObservers(newCamera);\n    if (!newCamera.parent) {\n      newCamera._addToSceneRootNodes();\n    }\n  }\n  /**\n   * Adds the given skeleton to this scene\n   * @param newSkeleton The skeleton to add\n   */\n  addSkeleton(newSkeleton) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n    this.skeletons.push(newSkeleton);\n    this.onNewSkeletonAddedObservable.notifyObservers(newSkeleton);\n  }\n  /**\n   * Adds the given particle system to this scene\n   * @param newParticleSystem The particle system to add\n   */\n  addParticleSystem(newParticleSystem) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n    this.particleSystems.push(newParticleSystem);\n  }\n  /**\n   * Adds the given animation to this scene\n   * @param newAnimation The animation to add\n   */\n  addAnimation(newAnimation) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n    this.animations.push(newAnimation);\n  }\n  /**\n   * Adds the given animation group to this scene.\n   * @param newAnimationGroup The animation group to add\n   */\n  addAnimationGroup(newAnimationGroup) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n    this.animationGroups.push(newAnimationGroup);\n  }\n  /**\n   * Adds the given multi-material to this scene\n   * @param newMultiMaterial The multi-material to add\n   */\n  addMultiMaterial(newMultiMaterial) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n    this.multiMaterials.push(newMultiMaterial);\n    this.onNewMultiMaterialAddedObservable.notifyObservers(newMultiMaterial);\n  }\n  /**\n   * Adds the given material to this scene\n   * @param newMaterial The material to add\n   */\n  addMaterial(newMaterial) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n    if (newMaterial.getScene() === this && newMaterial._indexInSceneMaterialArray !== -1) {\n      // Already there??\n      return;\n    }\n    newMaterial._indexInSceneMaterialArray = this.materials.length;\n    this.materials.push(newMaterial);\n    this.onNewMaterialAddedObservable.notifyObservers(newMaterial);\n  }\n  /**\n   * Adds the given morph target to this scene\n   * @param newMorphTargetManager The morph target to add\n   */\n  addMorphTargetManager(newMorphTargetManager) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n    this.morphTargetManagers.push(newMorphTargetManager);\n  }\n  /**\n   * Adds the given geometry to this scene\n   * @param newGeometry The geometry to add\n   */\n  addGeometry(newGeometry) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n    if (this._geometriesByUniqueId) {\n      this._geometriesByUniqueId[newGeometry.uniqueId] = this.geometries.length;\n    }\n    this.geometries.push(newGeometry);\n  }\n  /**\n   * Adds the given action manager to this scene\n   * @deprecated\n   * @param newActionManager The action manager to add\n   */\n  addActionManager(newActionManager) {\n    this.actionManagers.push(newActionManager);\n  }\n  /**\n   * Adds the given texture to this scene.\n   * @param newTexture The texture to add\n   */\n  addTexture(newTexture) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n    this.textures.push(newTexture);\n    this.onNewTextureAddedObservable.notifyObservers(newTexture);\n  }\n  /**\n   * Switch active camera\n   * @param newCamera defines the new active camera\n   * @param attachControl defines if attachControl must be called for the new active camera (default: true)\n   */\n  switchActiveCamera(newCamera, attachControl = true) {\n    const canvas = this._engine.getInputElement();\n    if (!canvas) {\n      return;\n    }\n    if (this.activeCamera) {\n      this.activeCamera.detachControl();\n    }\n    this.activeCamera = newCamera;\n    if (attachControl) {\n      newCamera.attachControl();\n    }\n  }\n  /**\n   * sets the active camera of the scene using its Id\n   * @param id defines the camera's Id\n   * @returns the new active camera or null if none found.\n   */\n  setActiveCameraById(id) {\n    const camera = this.getCameraById(id);\n    if (camera) {\n      this.activeCamera = camera;\n      return camera;\n    }\n    return null;\n  }\n  /**\n   * sets the active camera of the scene using its name\n   * @param name defines the camera's name\n   * @returns the new active camera or null if none found.\n   */\n  setActiveCameraByName(name) {\n    const camera = this.getCameraByName(name);\n    if (camera) {\n      this.activeCamera = camera;\n      return camera;\n    }\n    return null;\n  }\n  /**\n   * get an animation group using its name\n   * @param name defines the material's name\n   * @returns the animation group or null if none found.\n   */\n  getAnimationGroupByName(name) {\n    for (let index = 0; index < this.animationGroups.length; index++) {\n      if (this.animationGroups[index].name === name) {\n        return this.animationGroups[index];\n      }\n    }\n    return null;\n  }\n  _getMaterial(allowMultiMaterials, predicate) {\n    for (let index = 0; index < this.materials.length; index++) {\n      const material = this.materials[index];\n      if (predicate(material)) {\n        return material;\n      }\n    }\n    if (allowMultiMaterials) {\n      for (let index = 0; index < this.multiMaterials.length; index++) {\n        const material = this.multiMaterials[index];\n        if (predicate(material)) {\n          return material;\n        }\n      }\n    }\n    return null;\n  }\n  /**\n   * Get a material using its unique id\n   * @param uniqueId defines the material's unique id\n   * @param allowMultiMaterials determines whether multimaterials should be considered\n   * @returns the material or null if none found.\n   */\n  getMaterialByUniqueID(uniqueId, allowMultiMaterials = false) {\n    return this._getMaterial(allowMultiMaterials, m => m.uniqueId === uniqueId);\n  }\n  /**\n   * get a material using its id\n   * @param id defines the material's Id\n   * @param allowMultiMaterials determines whether multimaterials should be considered\n   * @returns the material or null if none found.\n   */\n  getMaterialById(id, allowMultiMaterials = false) {\n    return this._getMaterial(allowMultiMaterials, m => m.id === id);\n  }\n  /**\n   * Gets a material using its name\n   * @param name defines the material's name\n   * @param allowMultiMaterials determines whether multimaterials should be considered\n   * @returns the material or null if none found.\n   */\n  getMaterialByName(name, allowMultiMaterials = false) {\n    return this._getMaterial(allowMultiMaterials, m => m.name === name);\n  }\n  /**\n   * Gets a last added material using a given id\n   * @param id defines the material's id\n   * @param allowMultiMaterials determines whether multimaterials should be considered\n   * @returns the last material with the given id or null if none found.\n   */\n  getLastMaterialById(id, allowMultiMaterials = false) {\n    for (let index = this.materials.length - 1; index >= 0; index--) {\n      if (this.materials[index].id === id) {\n        return this.materials[index];\n      }\n    }\n    if (allowMultiMaterials) {\n      for (let index = this.multiMaterials.length - 1; index >= 0; index--) {\n        if (this.multiMaterials[index].id === id) {\n          return this.multiMaterials[index];\n        }\n      }\n    }\n    return null;\n  }\n  /**\n   * Get a texture using its unique id\n   * @param uniqueId defines the texture's unique id\n   * @returns the texture or null if none found.\n   */\n  getTextureByUniqueId(uniqueId) {\n    for (let index = 0; index < this.textures.length; index++) {\n      if (this.textures[index].uniqueId === uniqueId) {\n        return this.textures[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a texture using its name\n   * @param name defines the texture's name\n   * @returns the texture or null if none found.\n   */\n  getTextureByName(name) {\n    for (let index = 0; index < this.textures.length; index++) {\n      if (this.textures[index].name === name) {\n        return this.textures[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a camera using its Id\n   * @param id defines the Id to look for\n   * @returns the camera or null if not found\n   */\n  getCameraById(id) {\n    for (let index = 0; index < this.cameras.length; index++) {\n      if (this.cameras[index].id === id) {\n        return this.cameras[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a camera using its unique Id\n   * @param uniqueId defines the unique Id to look for\n   * @returns the camera or null if not found\n   */\n  getCameraByUniqueId(uniqueId) {\n    for (let index = 0; index < this.cameras.length; index++) {\n      if (this.cameras[index].uniqueId === uniqueId) {\n        return this.cameras[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a camera using its name\n   * @param name defines the camera's name\n   * @returns the camera or null if none found.\n   */\n  getCameraByName(name) {\n    for (let index = 0; index < this.cameras.length; index++) {\n      if (this.cameras[index].name === name) {\n        return this.cameras[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a bone using its Id\n   * @param id defines the bone's Id\n   * @returns the bone or null if not found\n   */\n  getBoneById(id) {\n    for (let skeletonIndex = 0; skeletonIndex < this.skeletons.length; skeletonIndex++) {\n      const skeleton = this.skeletons[skeletonIndex];\n      for (let boneIndex = 0; boneIndex < skeleton.bones.length; boneIndex++) {\n        if (skeleton.bones[boneIndex].id === id) {\n          return skeleton.bones[boneIndex];\n        }\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a bone using its id\n   * @param name defines the bone's name\n   * @returns the bone or null if not found\n   */\n  getBoneByName(name) {\n    for (let skeletonIndex = 0; skeletonIndex < this.skeletons.length; skeletonIndex++) {\n      const skeleton = this.skeletons[skeletonIndex];\n      for (let boneIndex = 0; boneIndex < skeleton.bones.length; boneIndex++) {\n        if (skeleton.bones[boneIndex].name === name) {\n          return skeleton.bones[boneIndex];\n        }\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a light node using its name\n   * @param name defines the the light's name\n   * @returns the light or null if none found.\n   */\n  getLightByName(name) {\n    for (let index = 0; index < this.lights.length; index++) {\n      if (this.lights[index].name === name) {\n        return this.lights[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a light node using its Id\n   * @param id defines the light's Id\n   * @returns the light or null if none found.\n   */\n  getLightById(id) {\n    for (let index = 0; index < this.lights.length; index++) {\n      if (this.lights[index].id === id) {\n        return this.lights[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a light node using its scene-generated unique Id\n   * @param uniqueId defines the light's unique Id\n   * @returns the light or null if none found.\n   */\n  getLightByUniqueId(uniqueId) {\n    for (let index = 0; index < this.lights.length; index++) {\n      if (this.lights[index].uniqueId === uniqueId) {\n        return this.lights[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a particle system by Id\n   * @param id defines the particle system Id\n   * @returns the corresponding system or null if none found\n   */\n  getParticleSystemById(id) {\n    for (let index = 0; index < this.particleSystems.length; index++) {\n      if (this.particleSystems[index].id === id) {\n        return this.particleSystems[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a geometry using its Id\n   * @param id defines the geometry's Id\n   * @returns the geometry or null if none found.\n   */\n  getGeometryById(id) {\n    for (let index = 0; index < this.geometries.length; index++) {\n      if (this.geometries[index].id === id) {\n        return this.geometries[index];\n      }\n    }\n    return null;\n  }\n  _getGeometryByUniqueId(uniqueId) {\n    if (this._geometriesByUniqueId) {\n      const index = this._geometriesByUniqueId[uniqueId];\n      if (index !== undefined) {\n        return this.geometries[index];\n      }\n    } else {\n      for (let index = 0; index < this.geometries.length; index++) {\n        if (this.geometries[index].uniqueId === uniqueId) {\n          return this.geometries[index];\n        }\n      }\n    }\n    return null;\n  }\n  /**\n   * Add a new geometry to this scene\n   * @param geometry defines the geometry to be added to the scene.\n   * @param force defines if the geometry must be pushed even if a geometry with this id already exists\n   * @returns a boolean defining if the geometry was added or not\n   */\n  pushGeometry(geometry, force) {\n    if (!force && this._getGeometryByUniqueId(geometry.uniqueId)) {\n      return false;\n    }\n    this.addGeometry(geometry);\n    this.onNewGeometryAddedObservable.notifyObservers(geometry);\n    return true;\n  }\n  /**\n   * Removes an existing geometry\n   * @param geometry defines the geometry to be removed from the scene\n   * @returns a boolean defining if the geometry was removed or not\n   */\n  removeGeometry(geometry) {\n    let index;\n    if (this._geometriesByUniqueId) {\n      index = this._geometriesByUniqueId[geometry.uniqueId];\n      if (index === undefined) {\n        return false;\n      }\n    } else {\n      index = this.geometries.indexOf(geometry);\n      if (index < 0) {\n        return false;\n      }\n    }\n    if (index !== this.geometries.length - 1) {\n      const lastGeometry = this.geometries[this.geometries.length - 1];\n      if (lastGeometry) {\n        this.geometries[index] = lastGeometry;\n        if (this._geometriesByUniqueId) {\n          this._geometriesByUniqueId[lastGeometry.uniqueId] = index;\n        }\n      }\n    }\n    if (this._geometriesByUniqueId) {\n      this._geometriesByUniqueId[geometry.uniqueId] = undefined;\n    }\n    this.geometries.pop();\n    this.onGeometryRemovedObservable.notifyObservers(geometry);\n    return true;\n  }\n  /**\n   * Gets the list of geometries attached to the scene\n   * @returns an array of Geometry\n   */\n  getGeometries() {\n    return this.geometries;\n  }\n  /**\n   * Gets the first added mesh found of a given Id\n   * @param id defines the Id to search for\n   * @returns the mesh found or null if not found at all\n   */\n  getMeshById(id) {\n    for (let index = 0; index < this.meshes.length; index++) {\n      if (this.meshes[index].id === id) {\n        return this.meshes[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a list of meshes using their Id\n   * @param id defines the Id to search for\n   * @returns a list of meshes\n   */\n  getMeshesById(id) {\n    return this.meshes.filter(function (m) {\n      return m.id === id;\n    });\n  }\n  /**\n   * Gets the first added transform node found of a given Id\n   * @param id defines the Id to search for\n   * @returns the found transform node or null if not found at all.\n   */\n  getTransformNodeById(id) {\n    for (let index = 0; index < this.transformNodes.length; index++) {\n      if (this.transformNodes[index].id === id) {\n        return this.transformNodes[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a transform node with its auto-generated unique Id\n   * @param uniqueId defines the unique Id to search for\n   * @returns the found transform node or null if not found at all.\n   */\n  getTransformNodeByUniqueId(uniqueId) {\n    for (let index = 0; index < this.transformNodes.length; index++) {\n      if (this.transformNodes[index].uniqueId === uniqueId) {\n        return this.transformNodes[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a list of transform nodes using their Id\n   * @param id defines the Id to search for\n   * @returns a list of transform nodes\n   */\n  getTransformNodesById(id) {\n    return this.transformNodes.filter(function (m) {\n      return m.id === id;\n    });\n  }\n  /**\n   * Gets a mesh with its auto-generated unique Id\n   * @param uniqueId defines the unique Id to search for\n   * @returns the found mesh or null if not found at all.\n   */\n  getMeshByUniqueId(uniqueId) {\n    for (let index = 0; index < this.meshes.length; index++) {\n      if (this.meshes[index].uniqueId === uniqueId) {\n        return this.meshes[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a the last added mesh using a given Id\n   * @param id defines the Id to search for\n   * @returns the found mesh or null if not found at all.\n   */\n  getLastMeshById(id) {\n    for (let index = this.meshes.length - 1; index >= 0; index--) {\n      if (this.meshes[index].id === id) {\n        return this.meshes[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a the last added node (Mesh, Camera, Light) using a given Id\n   * @param id defines the Id to search for\n   * @returns the found node or null if not found at all\n   */\n  getLastEntryById(id) {\n    let index;\n    for (index = this.meshes.length - 1; index >= 0; index--) {\n      if (this.meshes[index].id === id) {\n        return this.meshes[index];\n      }\n    }\n    for (index = this.transformNodes.length - 1; index >= 0; index--) {\n      if (this.transformNodes[index].id === id) {\n        return this.transformNodes[index];\n      }\n    }\n    for (index = this.cameras.length - 1; index >= 0; index--) {\n      if (this.cameras[index].id === id) {\n        return this.cameras[index];\n      }\n    }\n    for (index = this.lights.length - 1; index >= 0; index--) {\n      if (this.lights[index].id === id) {\n        return this.lights[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a node (Mesh, Camera, Light) using a given Id\n   * @param id defines the Id to search for\n   * @returns the found node or null if not found at all\n   */\n  getNodeById(id) {\n    const mesh = this.getMeshById(id);\n    if (mesh) {\n      return mesh;\n    }\n    const transformNode = this.getTransformNodeById(id);\n    if (transformNode) {\n      return transformNode;\n    }\n    const light = this.getLightById(id);\n    if (light) {\n      return light;\n    }\n    const camera = this.getCameraById(id);\n    if (camera) {\n      return camera;\n    }\n    const bone = this.getBoneById(id);\n    if (bone) {\n      return bone;\n    }\n    return null;\n  }\n  /**\n   * Gets a node (Mesh, Camera, Light) using a given name\n   * @param name defines the name to search for\n   * @returns the found node or null if not found at all.\n   */\n  getNodeByName(name) {\n    const mesh = this.getMeshByName(name);\n    if (mesh) {\n      return mesh;\n    }\n    const transformNode = this.getTransformNodeByName(name);\n    if (transformNode) {\n      return transformNode;\n    }\n    const light = this.getLightByName(name);\n    if (light) {\n      return light;\n    }\n    const camera = this.getCameraByName(name);\n    if (camera) {\n      return camera;\n    }\n    const bone = this.getBoneByName(name);\n    if (bone) {\n      return bone;\n    }\n    return null;\n  }\n  /**\n   * Gets a mesh using a given name\n   * @param name defines the name to search for\n   * @returns the found mesh or null if not found at all.\n   */\n  getMeshByName(name) {\n    for (let index = 0; index < this.meshes.length; index++) {\n      if (this.meshes[index].name === name) {\n        return this.meshes[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a transform node using a given name\n   * @param name defines the name to search for\n   * @returns the found transform node or null if not found at all.\n   */\n  getTransformNodeByName(name) {\n    for (let index = 0; index < this.transformNodes.length; index++) {\n      if (this.transformNodes[index].name === name) {\n        return this.transformNodes[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a skeleton using a given Id (if many are found, this function will pick the last one)\n   * @param id defines the Id to search for\n   * @returns the found skeleton or null if not found at all.\n   */\n  getLastSkeletonById(id) {\n    for (let index = this.skeletons.length - 1; index >= 0; index--) {\n      if (this.skeletons[index].id === id) {\n        return this.skeletons[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a skeleton using a given auto generated unique id\n   * @param  uniqueId defines the unique id to search for\n   * @returns the found skeleton or null if not found at all.\n   */\n  getSkeletonByUniqueId(uniqueId) {\n    for (let index = 0; index < this.skeletons.length; index++) {\n      if (this.skeletons[index].uniqueId === uniqueId) {\n        return this.skeletons[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a skeleton using a given id (if many are found, this function will pick the first one)\n   * @param id defines the id to search for\n   * @returns the found skeleton or null if not found at all.\n   */\n  getSkeletonById(id) {\n    for (let index = 0; index < this.skeletons.length; index++) {\n      if (this.skeletons[index].id === id) {\n        return this.skeletons[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a skeleton using a given name\n   * @param name defines the name to search for\n   * @returns the found skeleton or null if not found at all.\n   */\n  getSkeletonByName(name) {\n    for (let index = 0; index < this.skeletons.length; index++) {\n      if (this.skeletons[index].name === name) {\n        return this.skeletons[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a morph target manager  using a given id (if many are found, this function will pick the last one)\n   * @param id defines the id to search for\n   * @returns the found morph target manager or null if not found at all.\n   */\n  getMorphTargetManagerById(id) {\n    for (let index = 0; index < this.morphTargetManagers.length; index++) {\n      if (this.morphTargetManagers[index].uniqueId === id) {\n        return this.morphTargetManagers[index];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a morph target using a given id (if many are found, this function will pick the first one)\n   * @param id defines the id to search for\n   * @returns the found morph target or null if not found at all.\n   */\n  getMorphTargetById(id) {\n    for (let managerIndex = 0; managerIndex < this.morphTargetManagers.length; ++managerIndex) {\n      const morphTargetManager = this.morphTargetManagers[managerIndex];\n      for (let index = 0; index < morphTargetManager.numTargets; ++index) {\n        const target = morphTargetManager.getTarget(index);\n        if (target.id === id) {\n          return target;\n        }\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a morph target using a given name (if many are found, this function will pick the first one)\n   * @param name defines the name to search for\n   * @returns the found morph target or null if not found at all.\n   */\n  getMorphTargetByName(name) {\n    for (let managerIndex = 0; managerIndex < this.morphTargetManagers.length; ++managerIndex) {\n      const morphTargetManager = this.morphTargetManagers[managerIndex];\n      for (let index = 0; index < morphTargetManager.numTargets; ++index) {\n        const target = morphTargetManager.getTarget(index);\n        if (target.name === name) {\n          return target;\n        }\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a post process using a given name (if many are found, this function will pick the first one)\n   * @param name defines the name to search for\n   * @returns the found post process or null if not found at all.\n   */\n  getPostProcessByName(name) {\n    for (let postProcessIndex = 0; postProcessIndex < this.postProcesses.length; ++postProcessIndex) {\n      const postProcess = this.postProcesses[postProcessIndex];\n      if (postProcess.name === name) {\n        return postProcess;\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets a boolean indicating if the given mesh is active\n   * @param mesh defines the mesh to look for\n   * @returns true if the mesh is in the active list\n   */\n  isActiveMesh(mesh) {\n    return this._activeMeshes.indexOf(mesh) !== -1;\n  }\n  /**\n   * Return a unique id as a string which can serve as an identifier for the scene\n   */\n  get uid() {\n    if (!this._uid) {\n      this._uid = Tools.RandomId();\n    }\n    return this._uid;\n  }\n  /**\n   * Add an externally attached data from its key.\n   * This method call will fail and return false, if such key already exists.\n   * If you don't care and just want to get the data no matter what, use the more convenient getOrAddExternalDataWithFactory() method.\n   * @param key the unique key that identifies the data\n   * @param data the data object to associate to the key for this Engine instance\n   * @returns true if no such key were already present and the data was added successfully, false otherwise\n   */\n  addExternalData(key, data) {\n    if (!this._externalData) {\n      this._externalData = new StringDictionary();\n    }\n    return this._externalData.add(key, data);\n  }\n  /**\n   * Get an externally attached data from its key\n   * @param key the unique key that identifies the data\n   * @returns the associated data, if present (can be null), or undefined if not present\n   */\n  getExternalData(key) {\n    if (!this._externalData) {\n      return null;\n    }\n    return this._externalData.get(key);\n  }\n  /**\n   * Get an externally attached data from its key, create it using a factory if it's not already present\n   * @param key the unique key that identifies the data\n   * @param factory the factory that will be called to create the instance if and only if it doesn't exists\n   * @returns the associated data, can be null if the factory returned null.\n   */\n  getOrAddExternalDataWithFactory(key, factory) {\n    if (!this._externalData) {\n      this._externalData = new StringDictionary();\n    }\n    return this._externalData.getOrAddWithFactory(key, factory);\n  }\n  /**\n   * Remove an externally attached data from the Engine instance\n   * @param key the unique key that identifies the data\n   * @returns true if the data was successfully removed, false if it doesn't exist\n   */\n  removeExternalData(key) {\n    return this._externalData.remove(key);\n  }\n  _evaluateSubMesh(subMesh, mesh, initialMesh, forcePush) {\n    if (forcePush || subMesh.isInFrustum(this._frustumPlanes)) {\n      for (const step of this._evaluateSubMeshStage) {\n        step.action(mesh, subMesh);\n      }\n      const material = subMesh.getMaterial();\n      if (material !== null && material !== undefined) {\n        // Render targets\n        if (material.hasRenderTargetTextures && material.getRenderTargetTextures != null) {\n          if (this._processedMaterials.indexOf(material) === -1) {\n            this._processedMaterials.push(material);\n            this._materialsRenderTargets.concatWithNoDuplicate(material.getRenderTargetTextures());\n          }\n        }\n        // Dispatch\n        this._renderingManager.dispatch(subMesh, mesh, material);\n      }\n    }\n  }\n  /**\n   * Clear the processed materials smart array preventing retention point in material dispose.\n   */\n  freeProcessedMaterials() {\n    this._processedMaterials.dispose();\n  }\n  /** Gets or sets a boolean blocking all the calls to freeActiveMeshes and freeRenderingGroups\n   * It can be used in order to prevent going through methods freeRenderingGroups and freeActiveMeshes several times to improve performance\n   * when disposing several meshes in a row or a hierarchy of meshes.\n   * When used, it is the responsibility of the user to blockfreeActiveMeshesAndRenderingGroups back to false.\n   */\n  get blockfreeActiveMeshesAndRenderingGroups() {\n    return this._preventFreeActiveMeshesAndRenderingGroups;\n  }\n  set blockfreeActiveMeshesAndRenderingGroups(value) {\n    if (this._preventFreeActiveMeshesAndRenderingGroups === value) {\n      return;\n    }\n    if (value) {\n      this.freeActiveMeshes();\n      this.freeRenderingGroups();\n    }\n    this._preventFreeActiveMeshesAndRenderingGroups = value;\n  }\n  /**\n   * Clear the active meshes smart array preventing retention point in mesh dispose.\n   */\n  freeActiveMeshes() {\n    if (this.blockfreeActiveMeshesAndRenderingGroups) {\n      return;\n    }\n    this._activeMeshes.dispose();\n    if (this.activeCamera && this.activeCamera._activeMeshes) {\n      this.activeCamera._activeMeshes.dispose();\n    }\n    if (this.activeCameras) {\n      for (let i = 0; i < this.activeCameras.length; i++) {\n        const activeCamera = this.activeCameras[i];\n        if (activeCamera && activeCamera._activeMeshes) {\n          activeCamera._activeMeshes.dispose();\n        }\n      }\n    }\n  }\n  /**\n   * Clear the info related to rendering groups preventing retention points during dispose.\n   */\n  freeRenderingGroups() {\n    if (this.blockfreeActiveMeshesAndRenderingGroups) {\n      return;\n    }\n    if (this._renderingManager) {\n      this._renderingManager.freeRenderingGroups();\n    }\n    if (this.textures) {\n      for (let i = 0; i < this.textures.length; i++) {\n        const texture = this.textures[i];\n        if (texture && texture.renderList) {\n          texture.freeRenderingGroups();\n        }\n      }\n    }\n  }\n  /** @internal */\n  _isInIntermediateRendering() {\n    return this._intermediateRendering;\n  }\n  /**\n   * Use this function to stop evaluating active meshes. The current list will be keep alive between frames\n   * @param skipEvaluateActiveMeshes defines an optional boolean indicating that the evaluate active meshes step must be completely skipped\n   * @param onSuccess optional success callback\n   * @param onError optional error callback\n   * @param freezeMeshes defines if meshes should be frozen (true by default)\n   * @param keepFrustumCulling defines if you want to keep running the frustum clipping (false by default)\n   * @returns the current scene\n   */\n  freezeActiveMeshes(skipEvaluateActiveMeshes = false, onSuccess, onError, freezeMeshes = true, keepFrustumCulling = false) {\n    this.executeWhenReady(() => {\n      if (!this.activeCamera) {\n        onError && onError(\"No active camera found\");\n        return;\n      }\n      if (!this._frustumPlanes) {\n        this.updateTransformMatrix();\n      }\n      this._evaluateActiveMeshes();\n      this._activeMeshesFrozen = true;\n      this._activeMeshesFrozenButKeepClipping = keepFrustumCulling;\n      this._skipEvaluateActiveMeshesCompletely = skipEvaluateActiveMeshes;\n      if (freezeMeshes) {\n        for (let index = 0; index < this._activeMeshes.length; index++) {\n          this._activeMeshes.data[index]._freeze();\n        }\n      }\n      onSuccess && onSuccess();\n    });\n    return this;\n  }\n  /**\n   * Use this function to restart evaluating active meshes on every frame\n   * @returns the current scene\n   */\n  unfreezeActiveMeshes() {\n    for (let index = 0; index < this.meshes.length; index++) {\n      const mesh = this.meshes[index];\n      if (mesh._internalAbstractMeshDataInfo) {\n        mesh._internalAbstractMeshDataInfo._isActive = false;\n      }\n    }\n    for (let index = 0; index < this._activeMeshes.length; index++) {\n      this._activeMeshes.data[index]._unFreeze();\n    }\n    this._activeMeshesFrozen = false;\n    return this;\n  }\n  _executeActiveContainerCleanup(container) {\n    const isInFastMode = this._engine.snapshotRendering && this._engine.snapshotRenderingMode === 1;\n    if (!isInFastMode && this._activeMeshesFrozen && this._activeMeshes.length) {\n      return; // Do not execute in frozen mode\n    }\n    // We need to ensure we are not in the rendering loop\n    this.onBeforeRenderObservable.addOnce(() => container.dispose());\n  }\n  _evaluateActiveMeshes() {\n    var _a;\n    if (this._engine.snapshotRendering && this._engine.snapshotRenderingMode === 1) {\n      if (this._activeMeshes.length > 0) {\n        (_a = this.activeCamera) === null || _a === void 0 ? void 0 : _a._activeMeshes.reset();\n        this._activeMeshes.reset();\n        this._renderingManager.reset();\n        this._processedMaterials.reset();\n        this._activeParticleSystems.reset();\n        this._activeSkeletons.reset();\n        this._softwareSkinnedMeshes.reset();\n      }\n      return;\n    }\n    if (this._activeMeshesFrozen && this._activeMeshes.length) {\n      if (!this._skipEvaluateActiveMeshesCompletely) {\n        const len = this._activeMeshes.length;\n        for (let i = 0; i < len; i++) {\n          const mesh = this._activeMeshes.data[i];\n          mesh.computeWorldMatrix();\n        }\n      }\n      if (this._activeParticleSystems) {\n        const psLength = this._activeParticleSystems.length;\n        for (let i = 0; i < psLength; i++) {\n          this._activeParticleSystems.data[i].animate();\n        }\n      }\n      this._renderingManager.resetSprites();\n      return;\n    }\n    if (!this.activeCamera) {\n      return;\n    }\n    this.onBeforeActiveMeshesEvaluationObservable.notifyObservers(this);\n    this.activeCamera._activeMeshes.reset();\n    this._activeMeshes.reset();\n    this._renderingManager.reset();\n    this._processedMaterials.reset();\n    this._activeParticleSystems.reset();\n    this._activeSkeletons.reset();\n    this._softwareSkinnedMeshes.reset();\n    this._materialsRenderTargets.reset();\n    for (const step of this._beforeEvaluateActiveMeshStage) {\n      step.action();\n    }\n    // Determine mesh candidates\n    const meshes = this.getActiveMeshCandidates();\n    // Check each mesh\n    const len = meshes.length;\n    for (let i = 0; i < len; i++) {\n      const mesh = meshes.data[i];\n      mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate = false;\n      if (mesh.isBlocked) {\n        continue;\n      }\n      this._totalVertices.addCount(mesh.getTotalVertices(), false);\n      if (!mesh.isReady() || !mesh.isEnabled() || mesh.scaling.hasAZeroComponent) {\n        continue;\n      }\n      mesh.computeWorldMatrix();\n      // Intersections\n      if (mesh.actionManager && mesh.actionManager.hasSpecificTriggers2(12, 13)) {\n        this._meshesForIntersections.pushNoDuplicate(mesh);\n      }\n      // Switch to current LOD\n      let meshToRender = this.customLODSelector ? this.customLODSelector(mesh, this.activeCamera) : mesh.getLOD(this.activeCamera);\n      mesh._internalAbstractMeshDataInfo._currentLOD = meshToRender;\n      mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate = true;\n      if (meshToRender === undefined || meshToRender === null) {\n        continue;\n      }\n      // Compute world matrix if LOD is billboard\n      if (meshToRender !== mesh && meshToRender.billboardMode !== 0) {\n        meshToRender.computeWorldMatrix();\n      }\n      mesh._preActivate();\n      if (mesh.isVisible && mesh.visibility > 0 && (mesh.layerMask & this.activeCamera.layerMask) !== 0 && (this._skipFrustumClipping || mesh.alwaysSelectAsActiveMesh || mesh.isInFrustum(this._frustumPlanes))) {\n        this._activeMeshes.push(mesh);\n        this.activeCamera._activeMeshes.push(mesh);\n        if (meshToRender !== mesh) {\n          meshToRender._activate(this._renderId, false);\n        }\n        for (const step of this._preActiveMeshStage) {\n          step.action(mesh);\n        }\n        if (mesh._activate(this._renderId, false)) {\n          if (!mesh.isAnInstance) {\n            meshToRender._internalAbstractMeshDataInfo._onlyForInstances = false;\n          } else {\n            if (mesh._internalAbstractMeshDataInfo._actAsRegularMesh) {\n              meshToRender = mesh;\n            }\n          }\n          meshToRender._internalAbstractMeshDataInfo._isActive = true;\n          this._activeMesh(mesh, meshToRender);\n        }\n        mesh._postActivate();\n      }\n    }\n    // Particle systems\n    if (this.particlesEnabled) {\n      this.onBeforeParticlesRenderingObservable.notifyObservers(this);\n      for (let particleIndex = 0; particleIndex < this.particleSystems.length; particleIndex++) {\n        const particleSystem = this.particleSystems[particleIndex];\n        if (!particleSystem.isStarted() || !particleSystem.emitter) {\n          continue;\n        }\n        const emitter = particleSystem.emitter;\n        if (!emitter.position || emitter.isEnabled()) {\n          this._activeParticleSystems.push(particleSystem);\n          particleSystem.animate();\n          this._renderingManager.dispatchParticles(particleSystem);\n        }\n      }\n      this.onAfterParticlesRenderingObservable.notifyObservers(this);\n    }\n  }\n  _activeMesh(sourceMesh, mesh) {\n    if (this._skeletonsEnabled && mesh.skeleton !== null && mesh.skeleton !== undefined) {\n      if (this._activeSkeletons.pushNoDuplicate(mesh.skeleton)) {\n        mesh.skeleton.prepare();\n        this._activeBones.addCount(mesh.skeleton.bones.length, false);\n      }\n      if (!mesh.computeBonesUsingShaders) {\n        this._softwareSkinnedMeshes.pushNoDuplicate(mesh);\n      }\n    }\n    let forcePush = sourceMesh.hasInstances || sourceMesh.isAnInstance || this.dispatchAllSubMeshesOfActiveMeshes || this._skipFrustumClipping || mesh.alwaysSelectAsActiveMesh;\n    if (mesh && mesh.subMeshes && mesh.subMeshes.length > 0) {\n      const subMeshes = this.getActiveSubMeshCandidates(mesh);\n      const len = subMeshes.length;\n      forcePush = forcePush || len === 1;\n      for (let i = 0; i < len; i++) {\n        const subMesh = subMeshes.data[i];\n        this._evaluateSubMesh(subMesh, mesh, sourceMesh, forcePush);\n      }\n    }\n  }\n  /**\n   * Update the transform matrix to update from the current active camera\n   * @param force defines a boolean used to force the update even if cache is up to date\n   */\n  updateTransformMatrix(force) {\n    if (!this.activeCamera) {\n      return;\n    }\n    if (this.activeCamera._renderingMultiview) {\n      const leftCamera = this.activeCamera._rigCameras[0];\n      const rightCamera = this.activeCamera._rigCameras[1];\n      this.setTransformMatrix(leftCamera.getViewMatrix(), leftCamera.getProjectionMatrix(force), rightCamera.getViewMatrix(), rightCamera.getProjectionMatrix(force));\n    } else {\n      this.setTransformMatrix(this.activeCamera.getViewMatrix(), this.activeCamera.getProjectionMatrix(force));\n    }\n  }\n  _bindFrameBuffer(camera, clear = true) {\n    if (camera && camera._multiviewTexture) {\n      camera._multiviewTexture._bindFrameBuffer();\n    } else if (camera && camera.outputRenderTarget) {\n      camera.outputRenderTarget._bindFrameBuffer();\n    } else {\n      if (!this._engine._currentFrameBufferIsDefaultFrameBuffer()) {\n        this._engine.restoreDefaultFramebuffer();\n      }\n    }\n    if (clear) {\n      this._clearFrameBuffer(camera);\n    }\n  }\n  _clearFrameBuffer(camera) {\n    // we assume the framebuffer currently bound is the right one\n    if (camera && camera._multiviewTexture) {\n      // no clearing?\n    } else if (camera && camera.outputRenderTarget && !camera._renderingMultiview) {\n      const rtt = camera.outputRenderTarget;\n      if (rtt.onClearObservable.hasObservers()) {\n        rtt.onClearObservable.notifyObservers(this._engine);\n      } else if (!rtt.skipInitialClear) {\n        if (this.autoClear) {\n          this._engine.clear(rtt.clearColor || this.clearColor, !rtt._cleared, true, true);\n        }\n        rtt._cleared = true;\n      }\n    } else {\n      if (!this._defaultFrameBufferCleared) {\n        this._defaultFrameBufferCleared = true;\n        this._clear();\n      } else {\n        this._engine.clear(null, false, true, true);\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n  _renderForCamera(camera, rigParent, bindFrameBuffer = true) {\n    var _a, _b, _c;\n    if (camera && camera._skipRendering) {\n      return;\n    }\n    const engine = this._engine;\n    // Use _activeCamera instead of activeCamera to avoid onActiveCameraChanged\n    this._activeCamera = camera;\n    if (!this.activeCamera) {\n      throw new Error(\"Active camera not set\");\n    }\n    // Viewport\n    engine.setViewport(this.activeCamera.viewport);\n    // Camera\n    this.resetCachedMaterial();\n    this._renderId++;\n    if (!this.prePass && bindFrameBuffer) {\n      let skipInitialClear = true;\n      if (camera._renderingMultiview && camera.outputRenderTarget) {\n        skipInitialClear = camera.outputRenderTarget.skipInitialClear;\n        if (this.autoClear) {\n          camera.outputRenderTarget.skipInitialClear = false;\n        }\n      }\n      this._bindFrameBuffer(this._activeCamera);\n      if (camera._renderingMultiview && camera.outputRenderTarget) {\n        camera.outputRenderTarget.skipInitialClear = skipInitialClear;\n      }\n    }\n    this.updateTransformMatrix();\n    this.onBeforeCameraRenderObservable.notifyObservers(this.activeCamera);\n    // Meshes\n    this._evaluateActiveMeshes();\n    // Software skinning\n    for (let softwareSkinnedMeshIndex = 0; softwareSkinnedMeshIndex < this._softwareSkinnedMeshes.length; softwareSkinnedMeshIndex++) {\n      const mesh = this._softwareSkinnedMeshes.data[softwareSkinnedMeshIndex];\n      mesh.applySkeleton(mesh.skeleton);\n    }\n    // Render targets\n    this.onBeforeRenderTargetsRenderObservable.notifyObservers(this);\n    this._renderTargets.concatWithNoDuplicate(this._materialsRenderTargets);\n    if (camera.customRenderTargets && camera.customRenderTargets.length > 0) {\n      this._renderTargets.concatWithNoDuplicate(camera.customRenderTargets);\n    }\n    if (rigParent && rigParent.customRenderTargets && rigParent.customRenderTargets.length > 0) {\n      this._renderTargets.concatWithNoDuplicate(rigParent.customRenderTargets);\n    }\n    if (this.environmentTexture && this.environmentTexture.isRenderTarget) {\n      this._renderTargets.pushNoDuplicate(this.environmentTexture);\n    }\n    // Collects render targets from external components.\n    for (const step of this._gatherActiveCameraRenderTargetsStage) {\n      step.action(this._renderTargets);\n    }\n    let needRebind = false;\n    if (this.renderTargetsEnabled) {\n      this._intermediateRendering = true;\n      if (this._renderTargets.length > 0) {\n        Tools.StartPerformanceCounter(\"Render targets\", this._renderTargets.length > 0);\n        for (let renderIndex = 0; renderIndex < this._renderTargets.length; renderIndex++) {\n          const renderTarget = this._renderTargets.data[renderIndex];\n          if (renderTarget._shouldRender()) {\n            this._renderId++;\n            const hasSpecialRenderTargetCamera = renderTarget.activeCamera && renderTarget.activeCamera !== this.activeCamera;\n            renderTarget.render(hasSpecialRenderTargetCamera, this.dumpNextRenderTargets);\n            needRebind = true;\n          }\n        }\n        Tools.EndPerformanceCounter(\"Render targets\", this._renderTargets.length > 0);\n        this._renderId++;\n      }\n      for (const step of this._cameraDrawRenderTargetStage) {\n        needRebind = step.action(this.activeCamera) || needRebind;\n      }\n      this._intermediateRendering = false;\n    }\n    this._engine.currentRenderPassId = (_c = (_b = (_a = camera.outputRenderTarget) === null || _a === void 0 ? void 0 : _a.renderPassId) !== null && _b !== void 0 ? _b : camera.renderPassId) !== null && _c !== void 0 ? _c : 0;\n    // Restore framebuffer after rendering to targets\n    if (needRebind && !this.prePass) {\n      this._bindFrameBuffer(this._activeCamera, false);\n    }\n    this.onAfterRenderTargetsRenderObservable.notifyObservers(this);\n    // Prepare Frame\n    if (this.postProcessManager && !camera._multiviewTexture && !this.prePass) {\n      this.postProcessManager._prepareFrame();\n    }\n    // Before Camera Draw\n    for (const step of this._beforeCameraDrawStage) {\n      step.action(this.activeCamera);\n    }\n    // Render\n    this.onBeforeDrawPhaseObservable.notifyObservers(this);\n    if (engine.snapshotRendering && engine.snapshotRenderingMode === 1) {\n      this.finalizeSceneUbo();\n    }\n    this._renderingManager.render(null, null, true, true);\n    this.onAfterDrawPhaseObservable.notifyObservers(this);\n    // After Camera Draw\n    for (const step of this._afterCameraDrawStage) {\n      step.action(this.activeCamera);\n    }\n    // Finalize frame\n    if (this.postProcessManager && !camera._multiviewTexture) {\n      // if the camera has an output render target, render the post process to the render target\n      const texture = camera.outputRenderTarget ? camera.outputRenderTarget.renderTarget : undefined;\n      this.postProcessManager._finalizeFrame(camera.isIntermediate, texture);\n    }\n    // After post process\n    for (const step of this._afterCameraPostProcessStage) {\n      step.action(this.activeCamera);\n    }\n    // Reset some special arrays\n    this._renderTargets.reset();\n    this.onAfterCameraRenderObservable.notifyObservers(this.activeCamera);\n  }\n  _processSubCameras(camera, bindFrameBuffer = true) {\n    if (camera.cameraRigMode === 0 || camera._renderingMultiview) {\n      if (camera._renderingMultiview && !this._multiviewSceneUbo) {\n        this._createMultiviewUbo();\n      }\n      this._renderForCamera(camera, undefined, bindFrameBuffer);\n      this.onAfterRenderCameraObservable.notifyObservers(camera);\n      return;\n    }\n    if (camera._useMultiviewToSingleView) {\n      this._renderMultiviewToSingleView(camera);\n    } else {\n      // rig cameras\n      this.onBeforeCameraRenderObservable.notifyObservers(camera);\n      for (let index = 0; index < camera._rigCameras.length; index++) {\n        this._renderForCamera(camera._rigCameras[index], camera);\n      }\n    }\n    // Use _activeCamera instead of activeCamera to avoid onActiveCameraChanged\n    this._activeCamera = camera;\n    this.updateTransformMatrix();\n    this.onAfterRenderCameraObservable.notifyObservers(camera);\n  }\n  _checkIntersections() {\n    for (let index = 0; index < this._meshesForIntersections.length; index++) {\n      const sourceMesh = this._meshesForIntersections.data[index];\n      if (!sourceMesh.actionManager) {\n        continue;\n      }\n      for (let actionIndex = 0; sourceMesh.actionManager && actionIndex < sourceMesh.actionManager.actions.length; actionIndex++) {\n        const action = sourceMesh.actionManager.actions[actionIndex];\n        if (action.trigger === 12 || action.trigger === 13) {\n          const parameters = action.getTriggerParameter();\n          const otherMesh = parameters.mesh ? parameters.mesh : parameters;\n          const areIntersecting = otherMesh.intersectsMesh(sourceMesh, parameters.usePreciseIntersection);\n          const currentIntersectionInProgress = sourceMesh._intersectionsInProgress.indexOf(otherMesh);\n          if (areIntersecting && currentIntersectionInProgress === -1) {\n            if (action.trigger === 12) {\n              action._executeCurrent(ActionEvent.CreateNew(sourceMesh, undefined, otherMesh));\n              sourceMesh._intersectionsInProgress.push(otherMesh);\n            } else if (action.trigger === 13) {\n              sourceMesh._intersectionsInProgress.push(otherMesh);\n            }\n          } else if (!areIntersecting && currentIntersectionInProgress > -1) {\n            //They intersected, and now they don't.\n            //is this trigger an exit trigger? execute an event.\n            if (action.trigger === 13) {\n              action._executeCurrent(ActionEvent.CreateNew(sourceMesh, undefined, otherMesh));\n            }\n            //if this is an exit trigger, or no exit trigger exists, remove the id from the intersection in progress array.\n            if (!sourceMesh.actionManager.hasSpecificTrigger(13, parameter => {\n              const parameterMesh = parameter.mesh ? parameter.mesh : parameter;\n              return otherMesh === parameterMesh;\n            }) || action.trigger === 13) {\n              sourceMesh._intersectionsInProgress.splice(currentIntersectionInProgress, 1);\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n  _advancePhysicsEngineStep(step) {\n    // Do nothing. Code will be replaced if physics engine component is referenced\n  }\n  /** @internal */\n  _animate() {\n    // Nothing to do as long as Animatable have not been imported.\n  }\n  /** Execute all animations (for a frame) */\n  animate() {\n    if (this._engine.isDeterministicLockStep()) {\n      let deltaTime = Math.max(Scene.MinDeltaTime, Math.min(this._engine.getDeltaTime(), Scene.MaxDeltaTime)) + this._timeAccumulator;\n      const defaultFrameTime = this._engine.getTimeStep();\n      const defaultFPS = 1000.0 / defaultFrameTime / 1000.0;\n      let stepsTaken = 0;\n      const maxSubSteps = this._engine.getLockstepMaxSteps();\n      let internalSteps = Math.floor(deltaTime / defaultFrameTime);\n      internalSteps = Math.min(internalSteps, maxSubSteps);\n      while (deltaTime > 0 && stepsTaken < internalSteps) {\n        this.onBeforeStepObservable.notifyObservers(this);\n        // Animations\n        this._animationRatio = defaultFrameTime * defaultFPS;\n        this._animate();\n        this.onAfterAnimationsObservable.notifyObservers(this);\n        // Physics\n        if (this.physicsEnabled) {\n          this._advancePhysicsEngineStep(defaultFrameTime);\n        }\n        this.onAfterStepObservable.notifyObservers(this);\n        this._currentStepId++;\n        stepsTaken++;\n        deltaTime -= defaultFrameTime;\n      }\n      this._timeAccumulator = deltaTime < 0 ? 0 : deltaTime;\n    } else {\n      // Animations\n      const deltaTime = this.useConstantAnimationDeltaTime ? 16 : Math.max(Scene.MinDeltaTime, Math.min(this._engine.getDeltaTime(), Scene.MaxDeltaTime));\n      this._animationRatio = deltaTime * (60.0 / 1000.0);\n      this._animate();\n      this.onAfterAnimationsObservable.notifyObservers(this);\n      // Physics\n      if (this.physicsEnabled) {\n        this._advancePhysicsEngineStep(deltaTime);\n      }\n    }\n  }\n  _clear() {\n    if (this.autoClearDepthAndStencil || this.autoClear) {\n      this._engine.clear(this.clearColor, this.autoClear || this.forceWireframe || this.forcePointsCloud, this.autoClearDepthAndStencil, this.autoClearDepthAndStencil);\n    }\n  }\n  _checkCameraRenderTarget(camera) {\n    var _a;\n    if ((camera === null || camera === void 0 ? void 0 : camera.outputRenderTarget) && !(camera === null || camera === void 0 ? void 0 : camera.isRigCamera)) {\n      camera.outputRenderTarget._cleared = false;\n    }\n    if ((_a = camera === null || camera === void 0 ? void 0 : camera.rigCameras) === null || _a === void 0 ? void 0 : _a.length) {\n      for (let i = 0; i < camera.rigCameras.length; ++i) {\n        const rtt = camera.rigCameras[i].outputRenderTarget;\n        if (rtt) {\n          rtt._cleared = false;\n        }\n      }\n    }\n  }\n  /**\n   * Resets the draw wrappers cache of all meshes\n   * @param passId If provided, releases only the draw wrapper corresponding to this render pass id\n   */\n  resetDrawCache(passId) {\n    if (!this.meshes) {\n      return;\n    }\n    for (const mesh of this.meshes) {\n      mesh.resetDrawCache(passId);\n    }\n  }\n  /**\n   * Render the scene\n   * @param updateCameras defines a boolean indicating if cameras must update according to their inputs (true by default)\n   * @param ignoreAnimations defines a boolean indicating if animations should not be executed (false by default)\n   */\n  render(updateCameras = true, ignoreAnimations = false) {\n    var _a, _b, _c;\n    if (this.isDisposed) {\n      return;\n    }\n    if (this.onReadyObservable.hasObservers() && this._executeWhenReadyTimeoutId === null) {\n      this._checkIsReady();\n    }\n    this._frameId++;\n    this._defaultFrameBufferCleared = false;\n    this._checkCameraRenderTarget(this.activeCamera);\n    if ((_a = this.activeCameras) === null || _a === void 0 ? void 0 : _a.length) {\n      this.activeCameras.forEach(this._checkCameraRenderTarget);\n    }\n    // Register components that have been associated lately to the scene.\n    this._registerTransientComponents();\n    this._activeParticles.fetchNewFrame();\n    this._totalVertices.fetchNewFrame();\n    this._activeIndices.fetchNewFrame();\n    this._activeBones.fetchNewFrame();\n    this._meshesForIntersections.reset();\n    this.resetCachedMaterial();\n    this.onBeforeAnimationsObservable.notifyObservers(this);\n    // Actions\n    if (this.actionManager) {\n      this.actionManager.processTrigger(11);\n    }\n    // Animations\n    if (!ignoreAnimations) {\n      this.animate();\n    }\n    // Before camera update steps\n    for (const step of this._beforeCameraUpdateStage) {\n      step.action();\n    }\n    // Update Cameras\n    if (updateCameras) {\n      if (this.activeCameras && this.activeCameras.length > 0) {\n        for (let cameraIndex = 0; cameraIndex < this.activeCameras.length; cameraIndex++) {\n          const camera = this.activeCameras[cameraIndex];\n          camera.update();\n          if (camera.cameraRigMode !== 0) {\n            // rig cameras\n            for (let index = 0; index < camera._rigCameras.length; index++) {\n              camera._rigCameras[index].update();\n            }\n          }\n        }\n      } else if (this.activeCamera) {\n        this.activeCamera.update();\n        if (this.activeCamera.cameraRigMode !== 0) {\n          // rig cameras\n          for (let index = 0; index < this.activeCamera._rigCameras.length; index++) {\n            this.activeCamera._rigCameras[index].update();\n          }\n        }\n      }\n    }\n    // Before render\n    this.onBeforeRenderObservable.notifyObservers(this);\n    const engine = this.getEngine();\n    // Customs render targets\n    this.onBeforeRenderTargetsRenderObservable.notifyObservers(this);\n    const currentActiveCamera = ((_b = this.activeCameras) === null || _b === void 0 ? void 0 : _b.length) ? this.activeCameras[0] : this.activeCamera;\n    if (this.renderTargetsEnabled) {\n      Tools.StartPerformanceCounter(\"Custom render targets\", this.customRenderTargets.length > 0);\n      this._intermediateRendering = true;\n      for (let customIndex = 0; customIndex < this.customRenderTargets.length; customIndex++) {\n        const renderTarget = this.customRenderTargets[customIndex];\n        if (renderTarget._shouldRender()) {\n          this._renderId++;\n          this.activeCamera = renderTarget.activeCamera || this.activeCamera;\n          if (!this.activeCamera) {\n            throw new Error(\"Active camera not set\");\n          }\n          // Viewport\n          engine.setViewport(this.activeCamera.viewport);\n          // Camera\n          this.updateTransformMatrix();\n          renderTarget.render(currentActiveCamera !== this.activeCamera, this.dumpNextRenderTargets);\n        }\n      }\n      Tools.EndPerformanceCounter(\"Custom render targets\", this.customRenderTargets.length > 0);\n      this._intermediateRendering = false;\n      this._renderId++;\n    }\n    this._engine.currentRenderPassId = (_c = currentActiveCamera === null || currentActiveCamera === void 0 ? void 0 : currentActiveCamera.renderPassId) !== null && _c !== void 0 ? _c : 0;\n    // Restore back buffer\n    this.activeCamera = currentActiveCamera;\n    if (this._activeCamera && this._activeCamera.cameraRigMode !== 22 && !this.prePass) {\n      this._bindFrameBuffer(this._activeCamera, false);\n    }\n    this.onAfterRenderTargetsRenderObservable.notifyObservers(this);\n    for (const step of this._beforeClearStage) {\n      step.action();\n    }\n    // Clear\n    this._clearFrameBuffer(this.activeCamera);\n    // Collects render targets from external components.\n    for (const step of this._gatherRenderTargetsStage) {\n      step.action(this._renderTargets);\n    }\n    // Multi-cameras?\n    if (this.activeCameras && this.activeCameras.length > 0) {\n      for (let cameraIndex = 0; cameraIndex < this.activeCameras.length; cameraIndex++) {\n        this._processSubCameras(this.activeCameras[cameraIndex], cameraIndex > 0);\n      }\n    } else {\n      if (!this.activeCamera) {\n        throw new Error(\"No camera defined\");\n      }\n      this._processSubCameras(this.activeCamera, !!this.activeCamera.outputRenderTarget);\n    }\n    // Intersection checks\n    this._checkIntersections();\n    // Executes the after render stage actions.\n    for (const step of this._afterRenderStage) {\n      step.action();\n    }\n    // After render\n    if (this.afterRender) {\n      this.afterRender();\n    }\n    this.onAfterRenderObservable.notifyObservers(this);\n    // Cleaning\n    if (this._toBeDisposed.length) {\n      for (let index = 0; index < this._toBeDisposed.length; index++) {\n        const data = this._toBeDisposed[index];\n        if (data) {\n          data.dispose();\n        }\n      }\n      this._toBeDisposed.length = 0;\n    }\n    if (this.dumpNextRenderTargets) {\n      this.dumpNextRenderTargets = false;\n    }\n    this._activeBones.addCount(0, true);\n    this._activeIndices.addCount(0, true);\n    this._activeParticles.addCount(0, true);\n    this._engine.restoreDefaultFramebuffer();\n  }\n  /**\n   * Freeze all materials\n   * A frozen material will not be updatable but should be faster to render\n   * Note: multimaterials will not be frozen, but their submaterials will\n   */\n  freezeMaterials() {\n    for (let i = 0; i < this.materials.length; i++) {\n      this.materials[i].freeze();\n    }\n  }\n  /**\n   * Unfreeze all materials\n   * A frozen material will not be updatable but should be faster to render\n   */\n  unfreezeMaterials() {\n    for (let i = 0; i < this.materials.length; i++) {\n      this.materials[i].unfreeze();\n    }\n  }\n  /**\n   * Releases all held resources\n   */\n  dispose() {\n    if (this.isDisposed) {\n      return;\n    }\n    this.beforeRender = null;\n    this.afterRender = null;\n    this.metadata = null;\n    this.skeletons.length = 0;\n    this.morphTargetManagers.length = 0;\n    this._transientComponents.length = 0;\n    this._isReadyForMeshStage.clear();\n    this._beforeEvaluateActiveMeshStage.clear();\n    this._evaluateSubMeshStage.clear();\n    this._preActiveMeshStage.clear();\n    this._cameraDrawRenderTargetStage.clear();\n    this._beforeCameraDrawStage.clear();\n    this._beforeRenderTargetDrawStage.clear();\n    this._beforeRenderingGroupDrawStage.clear();\n    this._beforeRenderingMeshStage.clear();\n    this._afterRenderingMeshStage.clear();\n    this._afterRenderingGroupDrawStage.clear();\n    this._afterCameraDrawStage.clear();\n    this._afterRenderTargetDrawStage.clear();\n    this._afterRenderStage.clear();\n    this._beforeCameraUpdateStage.clear();\n    this._beforeClearStage.clear();\n    this._gatherRenderTargetsStage.clear();\n    this._gatherActiveCameraRenderTargetsStage.clear();\n    this._pointerMoveStage.clear();\n    this._pointerDownStage.clear();\n    this._pointerUpStage.clear();\n    this.importedMeshesFiles = new Array();\n    if (this.stopAllAnimations) {\n      this.stopAllAnimations();\n    }\n    this.resetCachedMaterial();\n    // Smart arrays\n    if (this.activeCamera) {\n      this.activeCamera._activeMeshes.dispose();\n      this.activeCamera = null;\n    }\n    this.activeCameras = null;\n    this._activeMeshes.dispose();\n    this._renderingManager.dispose();\n    this._processedMaterials.dispose();\n    this._activeParticleSystems.dispose();\n    this._activeSkeletons.dispose();\n    this._softwareSkinnedMeshes.dispose();\n    this._renderTargets.dispose();\n    this._materialsRenderTargets.dispose();\n    this._registeredForLateAnimationBindings.dispose();\n    this._meshesForIntersections.dispose();\n    this._toBeDisposed.length = 0;\n    // Abort active requests\n    const activeRequests = this._activeRequests.slice();\n    for (const request of activeRequests) {\n      request.abort();\n    }\n    this._activeRequests.length = 0;\n    // Events\n    try {\n      this.onDisposeObservable.notifyObservers(this);\n    } catch (e) {\n      console.error(\"An error occurred while calling onDisposeObservable!\", e);\n    }\n    this.onDisposeObservable.clear();\n    this.onBeforeRenderObservable.clear();\n    this.onAfterRenderObservable.clear();\n    this.onBeforeRenderTargetsRenderObservable.clear();\n    this.onAfterRenderTargetsRenderObservable.clear();\n    this.onAfterStepObservable.clear();\n    this.onBeforeStepObservable.clear();\n    this.onBeforeActiveMeshesEvaluationObservable.clear();\n    this.onAfterActiveMeshesEvaluationObservable.clear();\n    this.onBeforeParticlesRenderingObservable.clear();\n    this.onAfterParticlesRenderingObservable.clear();\n    this.onBeforeDrawPhaseObservable.clear();\n    this.onAfterDrawPhaseObservable.clear();\n    this.onBeforeAnimationsObservable.clear();\n    this.onAfterAnimationsObservable.clear();\n    this.onDataLoadedObservable.clear();\n    this.onBeforeRenderingGroupObservable.clear();\n    this.onAfterRenderingGroupObservable.clear();\n    this.onMeshImportedObservable.clear();\n    this.onBeforeCameraRenderObservable.clear();\n    this.onAfterCameraRenderObservable.clear();\n    this.onReadyObservable.clear();\n    this.onNewCameraAddedObservable.clear();\n    this.onCameraRemovedObservable.clear();\n    this.onNewLightAddedObservable.clear();\n    this.onLightRemovedObservable.clear();\n    this.onNewGeometryAddedObservable.clear();\n    this.onGeometryRemovedObservable.clear();\n    this.onNewTransformNodeAddedObservable.clear();\n    this.onTransformNodeRemovedObservable.clear();\n    this.onNewMeshAddedObservable.clear();\n    this.onMeshRemovedObservable.clear();\n    this.onNewSkeletonAddedObservable.clear();\n    this.onSkeletonRemovedObservable.clear();\n    this.onNewMaterialAddedObservable.clear();\n    this.onNewMultiMaterialAddedObservable.clear();\n    this.onMaterialRemovedObservable.clear();\n    this.onMultiMaterialRemovedObservable.clear();\n    this.onNewTextureAddedObservable.clear();\n    this.onTextureRemovedObservable.clear();\n    this.onPrePointerObservable.clear();\n    this.onPointerObservable.clear();\n    this.onPreKeyboardObservable.clear();\n    this.onKeyboardObservable.clear();\n    this.onActiveCameraChanged.clear();\n    this.detachControl();\n    // Detach cameras\n    const canvas = this._engine.getInputElement();\n    if (canvas) {\n      for (let index = 0; index < this.cameras.length; index++) {\n        this.cameras[index].detachControl();\n      }\n    }\n    // Release animation groups\n    this._disposeList(this.animationGroups);\n    // Release lights\n    this._disposeList(this.lights);\n    // Release meshes\n    this._disposeList(this.meshes, item => item.dispose(true));\n    this._disposeList(this.transformNodes, item => item.dispose(true));\n    // Release cameras\n    const cameras = this.cameras;\n    this._disposeList(cameras);\n    // Release materials\n    if (this._defaultMaterial) {\n      this._defaultMaterial.dispose();\n    }\n    this._disposeList(this.multiMaterials);\n    this._disposeList(this.materials);\n    // Release particles\n    this._disposeList(this.particleSystems);\n    // Release postProcesses\n    this._disposeList(this.postProcesses);\n    // Release textures\n    this._disposeList(this.textures);\n    // Release morph targets\n    this._disposeList(this.morphTargetManagers);\n    // Release UBO\n    this._sceneUbo.dispose();\n    if (this._multiviewSceneUbo) {\n      this._multiviewSceneUbo.dispose();\n    }\n    // Post-processes\n    this.postProcessManager.dispose();\n    // Components\n    this._disposeList(this._components);\n    // Remove from engine\n    let index = this._engine.scenes.indexOf(this);\n    if (index > -1) {\n      this._engine.scenes.splice(index, 1);\n    }\n    if (EngineStore._LastCreatedScene === this) {\n      if (this._engine.scenes.length > 0) {\n        EngineStore._LastCreatedScene = this._engine.scenes[this._engine.scenes.length - 1];\n      } else {\n        EngineStore._LastCreatedScene = null;\n      }\n    }\n    index = this._engine._virtualScenes.indexOf(this);\n    if (index > -1) {\n      this._engine._virtualScenes.splice(index, 1);\n    }\n    this._engine.wipeCaches(true);\n    this._isDisposed = true;\n  }\n  _disposeList(items, callback) {\n    const itemsCopy = items.slice(0);\n    callback = callback !== null && callback !== void 0 ? callback : item => item.dispose();\n    for (const item of itemsCopy) {\n      callback(item);\n    }\n    items.length = 0;\n  }\n  /**\n   * Gets if the scene is already disposed\n   */\n  get isDisposed() {\n    return this._isDisposed;\n  }\n  /**\n   * Call this function to reduce memory footprint of the scene.\n   * Vertex buffers will not store CPU data anymore (this will prevent picking, collisions or physics to work correctly)\n   */\n  clearCachedVertexData() {\n    for (let meshIndex = 0; meshIndex < this.meshes.length; meshIndex++) {\n      const mesh = this.meshes[meshIndex];\n      const geometry = mesh.geometry;\n      if (geometry) {\n        geometry.clearCachedData();\n      }\n    }\n  }\n  /**\n   * This function will remove the local cached buffer data from texture.\n   * It will save memory but will prevent the texture from being rebuilt\n   */\n  cleanCachedTextureBuffer() {\n    for (const baseTexture of this.textures) {\n      const buffer = baseTexture._buffer;\n      if (buffer) {\n        baseTexture._buffer = null;\n      }\n    }\n  }\n  /**\n   * Get the world extend vectors with an optional filter\n   *\n   * @param filterPredicate the predicate - which meshes should be included when calculating the world size\n   * @returns {{ min: Vector3; max: Vector3 }} min and max vectors\n   */\n  getWorldExtends(filterPredicate) {\n    const min = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    const max = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    filterPredicate = filterPredicate || (() => true);\n    this.meshes.filter(filterPredicate).forEach(mesh => {\n      mesh.computeWorldMatrix(true);\n      if (!mesh.subMeshes || mesh.subMeshes.length === 0 || mesh.infiniteDistance) {\n        return;\n      }\n      const boundingInfo = mesh.getBoundingInfo();\n      const minBox = boundingInfo.boundingBox.minimumWorld;\n      const maxBox = boundingInfo.boundingBox.maximumWorld;\n      Vector3.CheckExtends(minBox, min, max);\n      Vector3.CheckExtends(maxBox, min, max);\n    });\n    return {\n      min: min,\n      max: max\n    };\n  }\n  // Picking\n  /**\n   * Creates a ray that can be used to pick in the scene\n   * @param x defines the x coordinate of the origin (on-screen)\n   * @param y defines the y coordinate of the origin (on-screen)\n   * @param world defines the world matrix to use if you want to pick in object space (instead of world space)\n   * @param camera defines the camera to use for the picking\n   * @param cameraViewSpace defines if picking will be done in view space (false by default)\n   * @returns a Ray\n   */\n  createPickingRay(x, y, world, camera, cameraViewSpace = false) {\n    throw _WarnImport(\"Ray\");\n  }\n  /**\n   * Creates a ray that can be used to pick in the scene\n   * @param x defines the x coordinate of the origin (on-screen)\n   * @param y defines the y coordinate of the origin (on-screen)\n   * @param world defines the world matrix to use if you want to pick in object space (instead of world space)\n   * @param result defines the ray where to store the picking ray\n   * @param camera defines the camera to use for the picking\n   * @param cameraViewSpace defines if picking will be done in view space (false by default)\n   * @param enableDistantPicking defines if picking should handle large values for mesh position/scaling (false by default)\n   * @returns the current scene\n   */\n  createPickingRayToRef(x, y, world, result, camera, cameraViewSpace = false, enableDistantPicking = false) {\n    throw _WarnImport(\"Ray\");\n  }\n  /**\n   * Creates a ray that can be used to pick in the scene\n   * @param x defines the x coordinate of the origin (on-screen)\n   * @param y defines the y coordinate of the origin (on-screen)\n   * @param camera defines the camera to use for the picking\n   * @returns a Ray\n   */\n  createPickingRayInCameraSpace(x, y, camera) {\n    throw _WarnImport(\"Ray\");\n  }\n  /**\n   * Creates a ray that can be used to pick in the scene\n   * @param x defines the x coordinate of the origin (on-screen)\n   * @param y defines the y coordinate of the origin (on-screen)\n   * @param result defines the ray where to store the picking ray\n   * @param camera defines the camera to use for the picking\n   * @returns the current scene\n   */\n  createPickingRayInCameraSpaceToRef(x, y, result, camera) {\n    throw _WarnImport(\"Ray\");\n  }\n  /** @internal */\n  get _pickingAvailable() {\n    return false;\n  }\n  /** Launch a ray to try to pick a mesh in the scene\n   * @param x position on screen\n   * @param y position on screen\n   * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n   * @param fastCheck defines if the first intersection will be used (and not the closest)\n   * @param camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\n   * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n   * @returns a PickingInfo\n   */\n  pick(x, y, predicate, fastCheck, camera, trianglePredicate) {\n    // Dummy info if picking as not been imported\n    return new PickingInfo();\n  }\n  /** Launch a ray to try to pick a mesh in the scene using only bounding information of the main mesh (not using submeshes)\n   * @param x position on screen\n   * @param y position on screen\n   * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n   * @param fastCheck defines if the first intersection will be used (and not the closest)\n   * @param camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\n   * @returns a PickingInfo (Please note that some info will not be set like distance, bv, bu and everything that cannot be capture by only using bounding infos)\n   */\n  pickWithBoundingInfo(x, y, predicate, fastCheck, camera) {\n    // Dummy info if picking as not been imported\n    return new PickingInfo();\n  }\n  /** Use the given ray to pick a mesh in the scene\n   * @param ray The ray to use to pick meshes\n   * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must have isPickable set to true\n   * @param fastCheck defines if the first intersection will be used (and not the closest)\n   * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n   * @returns a PickingInfo\n   */\n  pickWithRay(ray, predicate, fastCheck, trianglePredicate) {\n    throw _WarnImport(\"Ray\");\n  }\n  /**\n   * Launch a ray to try to pick a mesh in the scene\n   * @param x X position on screen\n   * @param y Y position on screen\n   * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n   * @param camera camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\n   * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n   * @returns an array of PickingInfo\n   */\n  multiPick(x, y, predicate, camera, trianglePredicate) {\n    throw _WarnImport(\"Ray\");\n  }\n  /**\n   * Launch a ray to try to pick a mesh in the scene\n   * @param ray Ray to use\n   * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n   * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n   * @returns an array of PickingInfo\n   */\n  multiPickWithRay(ray, predicate, trianglePredicate) {\n    throw _WarnImport(\"Ray\");\n  }\n  /**\n   * Force the value of meshUnderPointer\n   * @param mesh defines the mesh to use\n   * @param pointerId optional pointer id when using more than one pointer\n   * @param pickResult optional pickingInfo data used to find mesh\n   */\n  setPointerOverMesh(mesh, pointerId, pickResult) {\n    this._inputManager.setPointerOverMesh(mesh, pointerId, pickResult);\n  }\n  /**\n   * Gets the mesh under the pointer\n   * @returns a Mesh or null if no mesh is under the pointer\n   */\n  getPointerOverMesh() {\n    return this._inputManager.getPointerOverMesh();\n  }\n  // Misc.\n  /** @internal */\n  _rebuildGeometries() {\n    for (const geometry of this.geometries) {\n      geometry._rebuild();\n    }\n    for (const mesh of this.meshes) {\n      mesh._rebuild();\n    }\n    if (this.postProcessManager) {\n      this.postProcessManager._rebuild();\n    }\n    for (const component of this._components) {\n      component.rebuild();\n    }\n    for (const system of this.particleSystems) {\n      system.rebuild();\n    }\n    if (this.spriteManagers) {\n      for (const spriteMgr of this.spriteManagers) {\n        spriteMgr.rebuild();\n      }\n    }\n  }\n  /** @internal */\n  _rebuildTextures() {\n    for (const texture of this.textures) {\n      texture._rebuild();\n    }\n    this.markAllMaterialsAsDirty(1);\n  }\n  // Tags\n  _getByTags(list, tagsQuery, forEach) {\n    if (tagsQuery === undefined) {\n      // returns the complete list (could be done with Tags.MatchesQuery but no need to have a for-loop here)\n      return list;\n    }\n    const listByTags = [];\n    forEach = forEach || (item => {\n      return;\n    });\n    for (const i in list) {\n      const item = list[i];\n      if (Tags && Tags.MatchesQuery(item, tagsQuery)) {\n        listByTags.push(item);\n        forEach(item);\n      }\n    }\n    return listByTags;\n  }\n  /**\n   * Get a list of meshes by tags\n   * @param tagsQuery defines the tags query to use\n   * @param forEach defines a predicate used to filter results\n   * @returns an array of Mesh\n   */\n  getMeshesByTags(tagsQuery, forEach) {\n    return this._getByTags(this.meshes, tagsQuery, forEach);\n  }\n  /**\n   * Get a list of cameras by tags\n   * @param tagsQuery defines the tags query to use\n   * @param forEach defines a predicate used to filter results\n   * @returns an array of Camera\n   */\n  getCamerasByTags(tagsQuery, forEach) {\n    return this._getByTags(this.cameras, tagsQuery, forEach);\n  }\n  /**\n   * Get a list of lights by tags\n   * @param tagsQuery defines the tags query to use\n   * @param forEach defines a predicate used to filter results\n   * @returns an array of Light\n   */\n  getLightsByTags(tagsQuery, forEach) {\n    return this._getByTags(this.lights, tagsQuery, forEach);\n  }\n  /**\n   * Get a list of materials by tags\n   * @param tagsQuery defines the tags query to use\n   * @param forEach defines a predicate used to filter results\n   * @returns an array of Material\n   */\n  getMaterialByTags(tagsQuery, forEach) {\n    return this._getByTags(this.materials, tagsQuery, forEach).concat(this._getByTags(this.multiMaterials, tagsQuery, forEach));\n  }\n  /**\n   * Get a list of transform nodes by tags\n   * @param tagsQuery defines the tags query to use\n   * @param forEach defines a predicate used to filter results\n   * @returns an array of TransformNode\n   */\n  getTransformNodesByTags(tagsQuery, forEach) {\n    return this._getByTags(this.transformNodes, tagsQuery, forEach);\n  }\n  /**\n   * Overrides the default sort function applied in the rendering group to prepare the meshes.\n   * This allowed control for front to back rendering or reversly depending of the special needs.\n   *\n   * @param renderingGroupId The rendering group id corresponding to its index\n   * @param opaqueSortCompareFn The opaque queue comparison function use to sort.\n   * @param alphaTestSortCompareFn The alpha test queue comparison function use to sort.\n   * @param transparentSortCompareFn The transparent queue comparison function use to sort.\n   */\n  setRenderingOrder(renderingGroupId, opaqueSortCompareFn = null, alphaTestSortCompareFn = null, transparentSortCompareFn = null) {\n    this._renderingManager.setRenderingOrder(renderingGroupId, opaqueSortCompareFn, alphaTestSortCompareFn, transparentSortCompareFn);\n  }\n  /**\n   * Specifies whether or not the stencil and depth buffer are cleared between two rendering groups.\n   *\n   * @param renderingGroupId The rendering group id corresponding to its index\n   * @param autoClearDepthStencil Automatically clears depth and stencil between groups if true.\n   * @param depth Automatically clears depth between groups if true and autoClear is true.\n   * @param stencil Automatically clears stencil between groups if true and autoClear is true.\n   */\n  setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil, depth = true, stencil = true) {\n    this._renderingManager.setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil, depth, stencil);\n  }\n  /**\n   * Gets the current auto clear configuration for one rendering group of the rendering\n   * manager.\n   * @param index the rendering group index to get the information for\n   * @returns The auto clear setup for the requested rendering group\n   */\n  getAutoClearDepthStencilSetup(index) {\n    return this._renderingManager.getAutoClearDepthStencilSetup(index);\n  }\n  /** Gets or sets a boolean blocking all the calls to markAllMaterialsAsDirty (ie. the materials won't be updated if they are out of sync) */\n  get blockMaterialDirtyMechanism() {\n    return this._blockMaterialDirtyMechanism;\n  }\n  set blockMaterialDirtyMechanism(value) {\n    if (this._blockMaterialDirtyMechanism === value) {\n      return;\n    }\n    this._blockMaterialDirtyMechanism = value;\n    if (!value) {\n      // Do a complete update\n      this.markAllMaterialsAsDirty(63);\n    }\n  }\n  /**\n   * Will flag all materials as dirty to trigger new shader compilation\n   * @param flag defines the flag used to specify which material part must be marked as dirty\n   * @param predicate If not null, it will be used to specify if a material has to be marked as dirty\n   */\n  markAllMaterialsAsDirty(flag, predicate) {\n    if (this._blockMaterialDirtyMechanism) {\n      return;\n    }\n    for (const material of this.materials) {\n      if (predicate && !predicate(material)) {\n        continue;\n      }\n      material.markAsDirty(flag);\n    }\n  }\n  /**\n   * @internal\n   */\n  _loadFile(fileOrUrl, onSuccess, onProgress, useOfflineSupport, useArrayBuffer, onError, onOpened) {\n    const request = LoadFile(fileOrUrl, onSuccess, onProgress, useOfflineSupport ? this.offlineProvider : undefined, useArrayBuffer, onError, onOpened);\n    this._activeRequests.push(request);\n    request.onCompleteObservable.add(request => {\n      this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\n    });\n    return request;\n  }\n  /**\n   * @internal\n   */\n  _loadFileAsync(fileOrUrl, onProgress, useOfflineSupport, useArrayBuffer, onOpened) {\n    return new Promise((resolve, reject) => {\n      this._loadFile(fileOrUrl, data => {\n        resolve(data);\n      }, onProgress, useOfflineSupport, useArrayBuffer, (request, exception) => {\n        reject(exception);\n      }, onOpened);\n    });\n  }\n  /**\n   * @internal\n   */\n  _requestFile(url, onSuccess, onProgress, useOfflineSupport, useArrayBuffer, onError, onOpened) {\n    const request = RequestFile(url, onSuccess, onProgress, useOfflineSupport ? this.offlineProvider : undefined, useArrayBuffer, onError, onOpened);\n    this._activeRequests.push(request);\n    request.onCompleteObservable.add(request => {\n      this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\n    });\n    return request;\n  }\n  /**\n   * @internal\n   */\n  _requestFileAsync(url, onProgress, useOfflineSupport, useArrayBuffer, onOpened) {\n    return new Promise((resolve, reject) => {\n      this._requestFile(url, data => {\n        resolve(data);\n      }, onProgress, useOfflineSupport, useArrayBuffer, error => {\n        reject(error);\n      }, onOpened);\n    });\n  }\n  /**\n   * @internal\n   */\n  _readFile(file, onSuccess, onProgress, useArrayBuffer, onError) {\n    const request = ReadFile(file, onSuccess, onProgress, useArrayBuffer, onError);\n    this._activeRequests.push(request);\n    request.onCompleteObservable.add(request => {\n      this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\n    });\n    return request;\n  }\n  /**\n   * @internal\n   */\n  _readFileAsync(file, onProgress, useArrayBuffer) {\n    return new Promise((resolve, reject) => {\n      this._readFile(file, data => {\n        resolve(data);\n      }, onProgress, useArrayBuffer, error => {\n        reject(error);\n      });\n    });\n  }\n  /**\n   * This method gets the performance collector belonging to the scene, which is generally shared with the inspector.\n   * @returns the perf collector belonging to the scene.\n   */\n  getPerfCollector() {\n    throw _WarnImport(\"performanceViewerSceneExtension\");\n  }\n}\n/** The fog is deactivated */\nScene.FOGMODE_NONE = 0;\n/** The fog density is following an exponential function */\nScene.FOGMODE_EXP = 1;\n/** The fog density is following an exponential function faster than FOGMODE_EXP */\nScene.FOGMODE_EXP2 = 2;\n/** The fog density is following a linear function. */\nScene.FOGMODE_LINEAR = 3;\n/**\n * Gets or sets the minimum deltatime when deterministic lock step is enabled\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n */\nScene.MinDeltaTime = 1.0;\n/**\n * Gets or sets the maximum deltatime when deterministic lock step is enabled\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n */\nScene.MaxDeltaTime = 1000.0;\n/**\n * @internal\n */\nScene.prototype.setActiveCameraByID = function (id) {\n  return this.setActiveCameraById(id);\n};\nScene.prototype.getLastMaterialByID = function (id) {\n  return this.getLastMaterialById(id);\n};\nScene.prototype.getMaterialByID = function (id) {\n  return this.getMaterialById(id);\n};\nScene.prototype.getTextureByUniqueID = function (uniqueId) {\n  return this.getTextureByUniqueId(uniqueId);\n};\nScene.prototype.getCameraByID = function (id) {\n  return this.getCameraById(id);\n};\nScene.prototype.getCameraByUniqueID = function (uniqueId) {\n  return this.getCameraByUniqueId(uniqueId);\n};\nScene.prototype.getBoneByID = function (id) {\n  return this.getBoneById(id);\n};\nScene.prototype.getLightByID = function (id) {\n  return this.getLightById(id);\n};\nScene.prototype.getLightByUniqueID = function (uniqueId) {\n  return this.getLightByUniqueId(uniqueId);\n};\nScene.prototype.getParticleSystemByID = function (id) {\n  return this.getParticleSystemById(id);\n};\nScene.prototype.getGeometryByID = function (id) {\n  return this.getGeometryById(id);\n};\nScene.prototype.getMeshByID = function (id) {\n  return this.getMeshById(id);\n};\nScene.prototype.getMeshesByID = function (id) {\n  return this.getMeshesById(id);\n};\nScene.prototype.getTransformNodeByID = function (id) {\n  return this.getTransformNodeById(id);\n};\nScene.prototype.getTransformNodeByUniqueID = function (uniqueId) {\n  return this.getTransformNodeByUniqueId(uniqueId);\n};\nScene.prototype.getTransformNodesByID = function (id) {\n  return this.getTransformNodesById(id);\n};\nScene.prototype.getMeshByUniqueID = function (uniqueId) {\n  return this.getMeshByUniqueId(uniqueId);\n};\nScene.prototype.getLastMeshByID = function (id) {\n  return this.getLastMeshById(id);\n};\nScene.prototype.getLastEntryByID = function (id) {\n  return this.getLastEntryById(id);\n};\nScene.prototype.getNodeByID = function (id) {\n  return this.getNodeById(id);\n};\nScene.prototype.getLastSkeletonByID = function (id) {\n  return this.getLastSkeletonById(id);\n};","map":{"version":3,"mappings":"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","names":["Tools","PrecisionDate","Observable","SmartArrayNoDuplicate","SmartArray","StringDictionary","Tags","Vector3","Matrix","TmpVectors","AbstractScene","ImageProcessingConfiguration","UniformBuffer","PickingInfo","ActionEvent","PostProcessManager","RenderingManager","Stage","IsWindowObjectExist","EngineStore","_WarnImport","InputManager","PerfCounter","Color4","Color3","Frustum","UniqueIdGenerator","ReadFile","RequestFile","LoadFile","LightConstants","_ObserveArray","ScenePerformancePriority","Scene","constructor","engine","options","BackwardCompatible","Array","FOGMODE_NONE","Zero","Create","data","length","_engine","getTimeStep","activeCameras","fullOptions","useGeometryUniqueIdsMap","useMaterialMeshMap","useClonedMeshMap","virtual","LastCreatedEngine","_LastCreatedScene","scenes","push","_virtualScenes","_uid","_renderingManager","postProcessManager","attachControl","_createUbo","_imageProcessingConfiguration","setDefaultCandidateProviders","_geometriesByUniqueId","onNewSceneAddedObservable","notifyObservers","DefaultMaterialFactory","scene","CollisionCoordinatorFactory","environmentTexture","_environmentTexture","value","markAllMaterialsAsDirty","imageProcessingConfiguration","performancePriority","_performancePriority","skipFrustumClipping","maintainStateBetweenFrames","skipPointerMovePicking","autoClear","Intermediate","Aggressive","forceWireframe","_forceWireframe","_skipFrustumClipping","forcePointsCloud","_forcePointsCloud","animationPropertiesOverride","_animationPropertiesOverride","onDispose","callback","_onDisposeObserver","onDisposeObservable","remove","add","beforeRender","_onBeforeRenderObserver","onBeforeRenderObservable","afterRender","_onAfterRenderObserver","onAfterRenderObservable","beforeCameraRender","_onBeforeCameraRenderObserver","onBeforeCameraRenderObservable","afterCameraRender","_onAfterCameraRenderObserver","onAfterCameraRenderObservable","unTranslatedPointer","_inputManager","DragMovementThreshold","LongPressDelay","DoubleClickDelay","ExclusiveDoubleClickMode","bindEyePosition","effect","variableName","isVector3","eyePosition","_forcedViewPosition","_mirroredCameraPosition","activeCamera","globalPosition","devicePosition","invertNormal","useRightHandedSystem","Vector4","set","x","y","z","setFloat3","setVector4","finalizeSceneUbo","ubo","getSceneUniformBuffer","updateFloat4","w","update","_useRightHandedSystem","setStepId","newStepId","_currentStepId","getStepId","getInternalStep","_currentInternalStep","fogEnabled","_fogEnabled","fogMode","_fogMode","prePass","prePassRenderer","defaultRT","enabled","shadowsEnabled","_shadowsEnabled","lightsEnabled","_lightsEnabled","_activeCameras","cameras","_unObserveActiveCameras","onActiveCamerasChanged","_activeCamera","onActiveCameraChanged","defaultMaterial","_defaultMaterial","texturesEnabled","_texturesEnabled","skeletonsEnabled","_skeletonsEnabled","collisionCoordinator","_collisionCoordinator","init","renderingManager","frustumPlanes","_frustumPlanes","_registerTransientComponents","_transientComponents","component","register","_addComponent","_components","serializableComponent","addFromContainer","serialize","_serializableComponents","_getComponent","name","getClassName","_getDefaultMeshCandidates","_defaultMeshCandidates","meshes","_getDefaultSubMeshCandidates","mesh","_defaultSubMeshCandidates","subMeshes","getActiveMeshCandidates","bind","getActiveSubMeshCandidates","getIntersectingSubMeshCandidates","getCollidingSubMeshCandidates","meshUnderPointer","pointerX","pointerY","getCachedMaterial","_cachedMaterial","getCachedEffect","_cachedEffect","getCachedVisibility","_cachedVisibility","isCachedMaterialInvalid","material","visibility","getEngine","getTotalVertices","_totalVertices","current","totalVerticesPerfCounter","getActiveIndices","_activeIndices","totalActiveIndicesPerfCounter","getActiveParticles","_activeParticles","activeParticlesPerfCounter","getActiveBones","_activeBones","activeBonesPerfCounter","getActiveMeshes","_activeMeshes","getAnimationRatio","_animationRatio","undefined","getRenderId","_renderId","getFrameId","_frameId","incrementRenderId","setSceneUniformBuffer","createSceneUniformBuffer","simulatePointerMove","pickResult","pointerEventInit","simulatePointerDown","simulatePointerUp","doubleTap","isPointerCaptured","pointerId","attachUp","attachDown","attachMove","detachControl","isReady","checkRenderTargets","_isDisposed","index","_pendingData","_processedMaterials","reset","_materialsRenderTargets","hardwareInstancedRendering","hasThinInstances","getCaps","instancedArrays","instances","step","_isReadyForMeshStage","action","mat","_storeEffectOnSubMeshes","subMesh","getMaterial","hasRenderTargetTextures","getRenderTargetTextures","indexOf","concatWithNoDuplicate","areAllEffectsReady","rtt","isReadyForRendering","geometries","geometry","delayLoadState","camera","particleSystem","particleSystems","resetCachedMaterial","registerBeforeRender","func","unregisterBeforeRender","removeCallback","registerAfterRender","unregisterAfterRender","_executeOnceBeforeRender","execFunc","setTimeout","executeOnceBeforeRender","timeout","addPendingData","removePendingData","wasLoading","isLoading","splice","onDataLoadedObservable","getWaitingItemsCount","executeWhenReady","onReadyObservable","addOnce","_executeWhenReadyTimeoutId","_checkIsReady","whenReadyAsync","Promise","resolve","clear","animatables","_activeAnimatables","resetLastAnimationTimeFrame","_animationTimeLast","Now","getViewMatrix","_viewMatrix","getProjectionMatrix","_projectionMatrix","getTransformMatrix","_transformMatrix","setTransformMatrix","viewL","projectionL","viewR","projectionR","_multiviewSceneUbo","dispose","_viewUpdateFlag","updateFlag","_projectionUpdateFlag","multiplyToRef","GetPlanes","GetPlanesToRef","useUbo","_updateMultiviewUbo","_sceneUbo","updateMatrix","sceneUbo","addUniform","getUniqueId","UniqueId","addMesh","newMesh","recursive","_blockEntityCollection","_resyncLightSources","parent","_addToSceneRootNodes","onNewMeshAddedObservable","getChildMeshes","forEach","m","removeMesh","toRemove","pop","_removeFromSceneRootNodes","_invalidateMesh","onMeshRemovedObservable","addTransformNode","newTransformNode","getScene","_indexInSceneTransformNodesArray","transformNodes","onNewTransformNodeAddedObservable","removeTransformNode","lastNode","onTransformNodeRemovedObservable","removeSkeleton","skeletons","onSkeletonRemovedObservable","_executeActiveContainerCleanup","_activeSkeletons","removeMorphTargetManager","morphTargetManagers","removeLight","lights","_removeLightSource","sortLightsByPriority","onLightRemovedObservable","removeCamera","index2","onCameraRemovedObservable","removeParticleSystem","_activeParticleSystems","removeAnimation","animations","stopAnimation","target","animationName","targetMask","removeAnimationGroup","animationGroups","removeMultiMaterial","multiMaterials","onMultiMaterialRemovedObservable","removeMaterial","_indexInSceneMaterialArray","materials","lastMaterial","onMaterialRemovedObservable","removeActionManager","actionManagers","removeTexture","textures","onTextureRemovedObservable","addLight","newLight","lightSources","onNewLightAddedObservable","requireLightSorting","sort","CompareLightsPriority","addCamera","newCamera","onNewCameraAddedObservable","addSkeleton","newSkeleton","onNewSkeletonAddedObservable","addParticleSystem","newParticleSystem","addAnimation","newAnimation","addAnimationGroup","newAnimationGroup","addMultiMaterial","newMultiMaterial","onNewMultiMaterialAddedObservable","addMaterial","newMaterial","onNewMaterialAddedObservable","addMorphTargetManager","newMorphTargetManager","addGeometry","newGeometry","uniqueId","addActionManager","newActionManager","addTexture","newTexture","onNewTextureAddedObservable","switchActiveCamera","canvas","getInputElement","setActiveCameraById","id","getCameraById","setActiveCameraByName","getCameraByName","getAnimationGroupByName","_getMaterial","allowMultiMaterials","predicate","getMaterialByUniqueID","getMaterialById","getMaterialByName","getLastMaterialById","getTextureByUniqueId","getTextureByName","getCameraByUniqueId","getBoneById","skeletonIndex","skeleton","boneIndex","bones","getBoneByName","getLightByName","getLightById","getLightByUniqueId","getParticleSystemById","getGeometryById","_getGeometryByUniqueId","pushGeometry","force","onNewGeometryAddedObservable","removeGeometry","lastGeometry","onGeometryRemovedObservable","getGeometries","getMeshById","getMeshesById","filter","getTransformNodeById","getTransformNodeByUniqueId","getTransformNodesById","getMeshByUniqueId","getLastMeshById","getLastEntryById","getNodeById","transformNode","light","bone","getNodeByName","getMeshByName","getTransformNodeByName","getLastSkeletonById","getSkeletonByUniqueId","getSkeletonById","getSkeletonByName","getMorphTargetManagerById","getMorphTargetById","managerIndex","morphTargetManager","numTargets","getTarget","getMorphTargetByName","getPostProcessByName","postProcessIndex","postProcesses","postProcess","isActiveMesh","uid","RandomId","addExternalData","key","_externalData","getExternalData","get","getOrAddExternalDataWithFactory","factory","getOrAddWithFactory","removeExternalData","_evaluateSubMesh","initialMesh","forcePush","isInFrustum","_evaluateSubMeshStage","dispatch","freeProcessedMaterials","blockfreeActiveMeshesAndRenderingGroups","_preventFreeActiveMeshesAndRenderingGroups","freeActiveMeshes","freeRenderingGroups","i","texture","renderList","_isInIntermediateRendering","_intermediateRendering","freezeActiveMeshes","skipEvaluateActiveMeshes","onSuccess","onError","freezeMeshes","keepFrustumCulling","updateTransformMatrix","_evaluateActiveMeshes","_activeMeshesFrozen","_activeMeshesFrozenButKeepClipping","_skipEvaluateActiveMeshesCompletely","_freeze","unfreezeActiveMeshes","_internalAbstractMeshDataInfo","_isActive","_unFreeze","container","isInFastMode","snapshotRendering","snapshotRenderingMode","_softwareSkinnedMeshes","len","computeWorldMatrix","psLength","animate","resetSprites","onBeforeActiveMeshesEvaluationObservable","_beforeEvaluateActiveMeshStage","_currentLODIsUpToDate","isBlocked","addCount","isEnabled","scaling","hasAZeroComponent","actionManager","hasSpecificTriggers2","_meshesForIntersections","pushNoDuplicate","meshToRender","customLODSelector","getLOD","_currentLOD","billboardMode","_preActivate","isVisible","layerMask","alwaysSelectAsActiveMesh","_activate","_preActiveMeshStage","isAnInstance","_onlyForInstances","_actAsRegularMesh","_activeMesh","_postActivate","particlesEnabled","onBeforeParticlesRenderingObservable","particleIndex","isStarted","emitter","position","dispatchParticles","onAfterParticlesRenderingObservable","sourceMesh","prepare","computeBonesUsingShaders","hasInstances","dispatchAllSubMeshesOfActiveMeshes","_renderingMultiview","leftCamera","_rigCameras","rightCamera","_bindFrameBuffer","_multiviewTexture","outputRenderTarget","_currentFrameBufferIsDefaultFrameBuffer","restoreDefaultFramebuffer","_clearFrameBuffer","onClearObservable","hasObservers","skipInitialClear","clearColor","_cleared","_defaultFrameBufferCleared","_clear","_renderForCamera","rigParent","bindFrameBuffer","_skipRendering","Error","setViewport","viewport","softwareSkinnedMeshIndex","applySkeleton","onBeforeRenderTargetsRenderObservable","_renderTargets","customRenderTargets","isRenderTarget","_gatherActiveCameraRenderTargetsStage","needRebind","renderTargetsEnabled","StartPerformanceCounter","renderIndex","renderTarget","_shouldRender","hasSpecialRenderTargetCamera","render","dumpNextRenderTargets","EndPerformanceCounter","_cameraDrawRenderTargetStage","currentRenderPassId","renderPassId","onAfterRenderTargetsRenderObservable","_prepareFrame","_beforeCameraDrawStage","onBeforeDrawPhaseObservable","onAfterDrawPhaseObservable","_afterCameraDrawStage","_finalizeFrame","isIntermediate","_afterCameraPostProcessStage","_processSubCameras","cameraRigMode","_createMultiviewUbo","onAfterRenderCameraObservable","_useMultiviewToSingleView","_renderMultiviewToSingleView","_checkIntersections","actionIndex","actions","trigger","parameters","getTriggerParameter","otherMesh","areIntersecting","intersectsMesh","usePreciseIntersection","currentIntersectionInProgress","_intersectionsInProgress","_executeCurrent","CreateNew","hasSpecificTrigger","parameterMesh","parameter","_advancePhysicsEngineStep","_animate","isDeterministicLockStep","deltaTime","Math","max","MinDeltaTime","min","getDeltaTime","MaxDeltaTime","_timeAccumulator","defaultFrameTime","defaultFPS","stepsTaken","maxSubSteps","getLockstepMaxSteps","internalSteps","floor","onBeforeStepObservable","onAfterAnimationsObservable","physicsEnabled","onAfterStepObservable","useConstantAnimationDeltaTime","autoClearDepthAndStencil","_checkCameraRenderTarget","isRigCamera","rigCameras","resetDrawCache","passId","updateCameras","ignoreAnimations","isDisposed","fetchNewFrame","onBeforeAnimationsObservable","processTrigger","_beforeCameraUpdateStage","cameraIndex","currentActiveCamera","customIndex","_beforeClearStage","_gatherRenderTargetsStage","_afterRenderStage","_toBeDisposed","freezeMaterials","freeze","unfreezeMaterials","unfreeze","metadata","_beforeRenderTargetDrawStage","_beforeRenderingGroupDrawStage","_beforeRenderingMeshStage","_afterRenderingMeshStage","_afterRenderingGroupDrawStage","_afterRenderTargetDrawStage","_pointerMoveStage","_pointerDownStage","_pointerUpStage","importedMeshesFiles","stopAllAnimations","_registeredForLateAnimationBindings","activeRequests","_activeRequests","slice","request","abort","e","console","error","onAfterActiveMeshesEvaluationObservable","onBeforeRenderingGroupObservable","onAfterRenderingGroupObservable","onMeshImportedObservable","onPrePointerObservable","onPointerObservable","onPreKeyboardObservable","onKeyboardObservable","_disposeList","item","wipeCaches","items","itemsCopy","clearCachedVertexData","meshIndex","clearCachedData","cleanCachedTextureBuffer","baseTexture","buffer","_buffer","getWorldExtends","filterPredicate","Number","MAX_VALUE","infiniteDistance","boundingInfo","getBoundingInfo","minBox","boundingBox","minimumWorld","maxBox","maximumWorld","CheckExtends","createPickingRay","world","cameraViewSpace","createPickingRayToRef","result","enableDistantPicking","createPickingRayInCameraSpace","createPickingRayInCameraSpaceToRef","_pickingAvailable","pick","fastCheck","trianglePredicate","pickWithBoundingInfo","pickWithRay","ray","multiPick","multiPickWithRay","setPointerOverMesh","getPointerOverMesh","_rebuildGeometries","_rebuild","rebuild","system","spriteManagers","spriteMgr","_rebuildTextures","_getByTags","list","tagsQuery","listByTags","MatchesQuery","getMeshesByTags","getCamerasByTags","getLightsByTags","getMaterialByTags","concat","getTransformNodesByTags","setRenderingOrder","renderingGroupId","opaqueSortCompareFn","alphaTestSortCompareFn","transparentSortCompareFn","setRenderingAutoClearDepthStencil","autoClearDepthStencil","depth","stencil","getAutoClearDepthStencilSetup","blockMaterialDirtyMechanism","_blockMaterialDirtyMechanism","flag","markAsDirty","_loadFile","fileOrUrl","onProgress","useOfflineSupport","useArrayBuffer","onOpened","offlineProvider","onCompleteObservable","_loadFileAsync","reject","exception","_requestFile","url","_requestFileAsync","_readFile","file","_readFileAsync","getPerfCollector","prototype","setActiveCameraByID","getLastMaterialByID","getMaterialByID","getTextureByUniqueID","getCameraByID","getCameraByUniqueID","getBoneByID","getLightByID","getLightByUniqueID","getParticleSystemByID","getGeometryByID","getMeshByID","getMeshesByID","getTransformNodeByID","getTransformNodeByUniqueID","getTransformNodesByID","getMeshByUniqueID","getLastMeshByID","getLastEntryByID","getNodeByID","getLastSkeletonByID"],"sourceRoot":"","sources":["../../../lts/core/generated/scene.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type { Nullable } from \"./types\";\nimport { Tools } from \"./Misc/tools\";\nimport type { IAnimatable } from \"./Animations/animatable.interface\";\nimport { PrecisionDate } from \"./Misc/precisionDate\";\nimport type { Observer } from \"./Misc/observable\";\nimport { Observable } from \"./Misc/observable\";\nimport type { ISmartArrayLike } from \"./Misc/smartArray\";\nimport { SmartArrayNoDuplicate, SmartArray } from \"./Misc/smartArray\";\nimport { StringDictionary } from \"./Misc/stringDictionary\";\nimport { Tags } from \"./Misc/tags\";\nimport type { Vector2, Vector4 } from \"./Maths/math.vector\";\nimport { Vector3, Matrix, TmpVectors } from \"./Maths/math.vector\";\nimport type { IParticleSystem } from \"./Particles/IParticleSystem\";\nimport { AbstractScene } from \"./abstractScene\";\nimport { ImageProcessingConfiguration } from \"./Materials/imageProcessingConfiguration\";\nimport { UniformBuffer } from \"./Materials/uniformBuffer\";\nimport { PickingInfo } from \"./Collisions/pickingInfo\";\nimport type { ICollisionCoordinator } from \"./Collisions/collisionCoordinator\";\nimport type { PointerEventTypes, PointerInfoPre, PointerInfo } from \"./Events/pointerEvents\";\nimport type { KeyboardInfoPre, KeyboardInfo } from \"./Events/keyboardEvents\";\nimport { ActionEvent } from \"./Actions/actionEvent\";\nimport { PostProcessManager } from \"./PostProcesses/postProcessManager\";\nimport type { IOfflineProvider } from \"./Offline/IOfflineProvider\";\nimport type { RenderingGroupInfo, IRenderingManagerAutoClearSetup } from \"./Rendering/renderingManager\";\nimport { RenderingManager } from \"./Rendering/renderingManager\";\nimport type { ISceneComponent, ISceneSerializableComponent, SimpleStageAction, RenderTargetsStageAction, RenderTargetStageAction, MeshStageAction, EvaluateSubMeshStageAction, PreActiveMeshStageAction, CameraStageAction, RenderingGroupStageAction, RenderingMeshStageAction, PointerMoveStageAction, PointerUpDownStageAction, CameraStageFrameBufferAction, } from \"./sceneComponent\";\nimport { Stage } from \"./sceneComponent\";\nimport type { Engine } from \"./Engines/engine\";\nimport { Constants } from \"./Engines/constants\";\nimport { IsWindowObjectExist } from \"./Misc/domManagement\";\nimport { EngineStore } from \"./Engines/engineStore\";\nimport type { AbstractActionManager } from \"./Actions/abstractActionManager\";\nimport { _WarnImport } from \"./Misc/devTools\";\nimport type { WebRequest } from \"./Misc/webRequest\";\nimport { InputManager } from \"./Inputs/scene.inputManager\";\nimport { PerfCounter } from \"./Misc/perfCounter\";\nimport type { IFileRequest } from \"./Misc/fileRequest\";\nimport { Color4, Color3 } from \"./Maths/math.color\";\nimport type { Plane } from \"./Maths/math.plane\";\nimport { Frustum } from \"./Maths/math.frustum\";\nimport { UniqueIdGenerator } from \"./Misc/uniqueIdGenerator\";\nimport type { LoadFileError, RequestFileError, ReadFileError } from \"./Misc/fileTools\";\nimport { ReadFile, RequestFile, LoadFile } from \"./Misc/fileTools\";\nimport type { IClipPlanesHolder } from \"./Misc/interfaces/iClipPlanesHolder\";\nimport type { IPointerEvent } from \"./Events/deviceInputEvents\";\nimport { LightConstants } from \"./Lights/lightConstants\";\nimport { _ObserveArray } from \"./Misc/arrayTools\";\ndeclare type Ray = import(\"./Culling/ray\").Ray;\ndeclare type TrianglePickingPredicate = import(\"./Culling/ray\").TrianglePickingPredicate;\ndeclare type Animation = import(\"./Animations/animation\").Animation;\ndeclare type Animatable = import(\"./Animations/animatable\").Animatable;\ndeclare type AnimationGroup = import(\"./Animations/animationGroup\").AnimationGroup;\ndeclare type AnimationPropertiesOverride = import(\"./Animations/animationPropertiesOverride\").AnimationPropertiesOverride;\ndeclare type Collider = import(\"./Collisions/collider\").Collider;\ndeclare type PostProcess = import(\"./PostProcesses/postProcess\").PostProcess;\ndeclare type Material = import(\"./Materials/material\").Material;\ndeclare type AbstractMesh = import(\"./Meshes/abstractMesh\").AbstractMesh;\ndeclare type Light = import(\"./Lights/light\").Light;\ndeclare type Camera = import(\"./Cameras/camera\").Camera;\ndeclare type Texture = import(\"./Materials/Textures/texture\").Texture;\ndeclare type MultiMaterial = import(\"./Materials/multiMaterial\").MultiMaterial;\ndeclare type BaseTexture = import(\"./Materials/Textures/baseTexture\").BaseTexture;\ndeclare type TransformNode = import(\"./Meshes/transformNode\").TransformNode;\ndeclare type Skeleton = import(\"./Bones/skeleton\").Skeleton;\ndeclare type Bone = import(\"./Bones/bone\").Bone;\ndeclare type SubMesh = import(\"./Meshes/subMesh\").SubMesh;\ndeclare type Mesh = import(\"./Meshes/mesh\").Mesh;\ndeclare type Node = import(\"./node\").Node;\ndeclare type Geometry = import(\"./Meshes/geometry\").Geometry;\ndeclare type RenderTargetTexture = import(\"./Materials/Textures/renderTargetTexture\").RenderTargetTexture;\ndeclare type MorphTargetManager = import(\"./Morph/morphTargetManager\").MorphTargetManager;\ndeclare type Effect = import(\"./Materials/effect\").Effect;\ndeclare type MorphTarget = import(\"./Morph/morphTarget\").MorphTarget;\ndeclare type WebVRFreeCamera = import(\"./Cameras/VR/webVRCamera\").WebVRFreeCamera;\ndeclare type PerformanceViewerCollector = import(\"./Misc/PerformanceViewer/performanceViewerCollector\").PerformanceViewerCollector;\ndeclare type IAction = import(\"./Actions/action\").IAction;\n/**\n * Define an interface for all classes that will hold resources\n */\nexport interface IDisposable {\n    /**\n     * Releases all held resources\n     */\n    dispose(): void;\n}\n/** Interface defining initialization parameters for Scene class */\nexport interface SceneOptions {\n    /**\n     * Defines that scene should keep up-to-date a map of geometry to enable fast look-up by uniqueId\n     * It will improve performance when the number of geometries becomes important.\n     */\n    useGeometryUniqueIdsMap?: boolean;\n    /**\n     * Defines that each material of the scene should keep up-to-date a map of referencing meshes for fast disposing\n     * It will improve performance when the number of mesh becomes important, but might consume a bit more memory\n     */\n    useMaterialMeshMap?: boolean;\n    /**\n     * Defines that each mesh of the scene should keep up-to-date a map of referencing cloned meshes for fast disposing\n     * It will improve performance when the number of mesh becomes important, but might consume a bit more memory\n     */\n    useClonedMeshMap?: boolean;\n    /** Defines if the creation of the scene should impact the engine (Eg. UtilityLayer's scene) */\n    virtual?: boolean;\n}\n/**\n * Define how the scene should favor performance over ease of use\n */\nexport enum ScenePerformancePriority {\n    /** Default mode. No change. Performance will be treated as less important than backward compatibility */\n    BackwardCompatible,\n    /** Some performance options will be turned on trying to strike a balance between perf and ease of use */\n    Intermediate,\n    /** Performance will be top priority */\n    Aggressive\n}\n/**\n * Represents a scene to be rendered by the engine.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene\n */\nexport class Scene extends AbstractScene implements IAnimatable, IClipPlanesHolder {\n    /** The fog is deactivated */\n    public static readonly FOGMODE_NONE = 0;\n    /** The fog density is following an exponential function */\n    public static readonly FOGMODE_EXP = 1;\n    /** The fog density is following an exponential function faster than FOGMODE_EXP */\n    public static readonly FOGMODE_EXP2 = 2;\n    /** The fog density is following a linear function. */\n    public static readonly FOGMODE_LINEAR = 3;\n    /**\n     * Gets or sets the minimum deltatime when deterministic lock step is enabled\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n     */\n    public static MinDeltaTime = 1.0;\n    /**\n     * Gets or sets the maximum deltatime when deterministic lock step is enabled\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n     */\n    public static MaxDeltaTime = 1000.0;\n    /**\n     * Factory used to create the default material.\n     * @param scene The scene to create the material for\n     * @returns The default material\n     */\n    public static DefaultMaterialFactory(scene: Scene): Material {\n        throw _WarnImport(\"StandardMaterial\");\n    }\n    /**\n     * Factory used to create the a collision coordinator.\n     * @returns The collision coordinator\n     */\n    public static CollisionCoordinatorFactory(): ICollisionCoordinator {\n        throw _WarnImport(\"DefaultCollisionCoordinator\");\n    }\n    // Members\n    /** @internal */\n    public _inputManager = new InputManager(this);\n    /** Define this parameter if you are using multiple cameras and you want to specify which one should be used for pointer position */\n    public cameraToUseForPointers: Nullable<Camera> = null;\n    /** @internal */\n    public readonly _isScene = true;\n    /** @internal */\n    public _blockEntityCollection = false;\n    /**\n     * Gets or sets a boolean that indicates if the scene must clear the render buffer before rendering a frame\n     */\n    public autoClear = true;\n    /**\n     * Gets or sets a boolean that indicates if the scene must clear the depth and stencil buffers before rendering a frame\n     */\n    public autoClearDepthAndStencil = true;\n    /**\n     * Defines the color used to clear the render buffer (Default is (0.2, 0.2, 0.3, 1.0))\n     */\n    public clearColor: Color4 = new Color4(0.2, 0.2, 0.3, 1.0);\n    /**\n     * Defines the color used to simulate the ambient color (Default is (0, 0, 0))\n     */\n    public ambientColor = new Color3(0, 0, 0);\n    /**\n     * This is use to store the default BRDF lookup for PBR materials in your scene.\n     * It should only be one of the following (if not the default embedded one):\n     * * For uncorrelated BRDF (pbr.brdf.useEnergyConservation = false and pbr.brdf.useSmithVisibilityHeightCorrelated = false) : https://assets.babylonjs.com/environments/uncorrelatedBRDF.dds\n     * * For correlated BRDF (pbr.brdf.useEnergyConservation = false and pbr.brdf.useSmithVisibilityHeightCorrelated = true) : https://assets.babylonjs.com/environments/correlatedBRDF.dds\n     * * For correlated multi scattering BRDF (pbr.brdf.useEnergyConservation = true and pbr.brdf.useSmithVisibilityHeightCorrelated = true) : https://assets.babylonjs.com/environments/correlatedMSBRDF.dds\n     * The material properties need to be setup according to the type of texture in use.\n     */\n    public environmentBRDFTexture: BaseTexture;\n    /**\n     * Texture used in all pbr material as the reflection texture.\n     * As in the majority of the scene they are the same (exception for multi room and so on),\n     * this is easier to reference from here than from all the materials.\n     */\n    public get environmentTexture(): Nullable<BaseTexture> {\n        return this._environmentTexture;\n    }\n    /**\n     * Texture used in all pbr material as the reflection texture.\n     * As in the majority of the scene they are the same (exception for multi room and so on),\n     * this is easier to set here than in all the materials.\n     */\n    public set environmentTexture(value: Nullable<BaseTexture>) {\n        if (this._environmentTexture === value) {\n            return;\n        }\n        this._environmentTexture = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\n    }\n    /**\n     * Intensity of the environment in all pbr material.\n     * This dims or reinforces the IBL lighting overall (reflection and diffuse).\n     * As in the majority of the scene they are the same (exception for multi room and so on),\n     * this is easier to reference from here than from all the materials.\n     */\n    public environmentIntensity: number = 1;\n    /** @internal */\n    protected _imageProcessingConfiguration: ImageProcessingConfiguration;\n    /**\n     * Default image processing configuration used either in the rendering\n     * Forward main pass or through the imageProcessingPostProcess if present.\n     * As in the majority of the scene they are the same (exception for multi camera),\n     * this is easier to reference from here than from all the materials and post process.\n     *\n     * No setter as we it is a shared configuration, you can set the values instead.\n     */\n    public get imageProcessingConfiguration(): ImageProcessingConfiguration {\n        return this._imageProcessingConfiguration;\n    }\n    private _performancePriority = ScenePerformancePriority.BackwardCompatible;\n    /**\n     * Gets or sets a value indicating how to treat performance relatively to ease of use and backward compatibility\n     */\n    public get performancePriority() {\n        return this._performancePriority;\n    }\n    public set performancePriority(value) {\n        if (value === this._performancePriority) {\n            return;\n        }\n        this._performancePriority = value;\n        switch (value) {\n            case ScenePerformancePriority.BackwardCompatible:\n                this.skipFrustumClipping = false;\n                this._renderingManager.maintainStateBetweenFrames = false;\n                this.skipPointerMovePicking = false;\n                this.autoClear = true;\n                break;\n            case ScenePerformancePriority.Intermediate:\n                this.skipFrustumClipping = false;\n                this._renderingManager.maintainStateBetweenFrames = false;\n                this.skipPointerMovePicking = true;\n                this.autoClear = false;\n                break;\n            case ScenePerformancePriority.Aggressive:\n                this.skipFrustumClipping = true;\n                this._renderingManager.maintainStateBetweenFrames = true;\n                this.skipPointerMovePicking = true;\n                this.autoClear = false;\n                break;\n        }\n    }\n    private _forceWireframe = false;\n    /**\n     * Gets or sets a boolean indicating if all rendering must be done in wireframe\n     */\n    public set forceWireframe(value: boolean) {\n        if (this._forceWireframe === value) {\n            return;\n        }\n        this._forceWireframe = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\n    }\n    public get forceWireframe(): boolean {\n        return this._forceWireframe;\n    }\n    private _skipFrustumClipping = false;\n    /**\n     * Gets or sets a boolean indicating if we should skip the frustum clipping part of the active meshes selection\n     */\n    public set skipFrustumClipping(value: boolean) {\n        if (this._skipFrustumClipping === value) {\n            return;\n        }\n        this._skipFrustumClipping = value;\n    }\n    public get skipFrustumClipping(): boolean {\n        return this._skipFrustumClipping;\n    }\n    private _forcePointsCloud = false;\n    /**\n     * Gets or sets a boolean indicating if all rendering must be done in point cloud\n     */\n    public set forcePointsCloud(value: boolean) {\n        if (this._forcePointsCloud === value) {\n            return;\n        }\n        this._forcePointsCloud = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\n    }\n    public get forcePointsCloud(): boolean {\n        return this._forcePointsCloud;\n    }\n    /**\n     * Gets or sets the active clipplane 1\n     */\n    public clipPlane: Nullable<Plane>;\n    /**\n     * Gets or sets the active clipplane 2\n     */\n    public clipPlane2: Nullable<Plane>;\n    /**\n     * Gets or sets the active clipplane 3\n     */\n    public clipPlane3: Nullable<Plane>;\n    /**\n     * Gets or sets the active clipplane 4\n     */\n    public clipPlane4: Nullable<Plane>;\n    /**\n     * Gets or sets the active clipplane 5\n     */\n    public clipPlane5: Nullable<Plane>;\n    /**\n     * Gets or sets the active clipplane 6\n     */\n    public clipPlane6: Nullable<Plane>;\n    /**\n     * Gets or sets a boolean indicating if animations are enabled\n     */\n    public animationsEnabled = true;\n    private _animationPropertiesOverride: Nullable<AnimationPropertiesOverride> = null;\n    /**\n     * Gets or sets the animation properties override\n     */\n    public get animationPropertiesOverride(): Nullable<AnimationPropertiesOverride> {\n        return this._animationPropertiesOverride;\n    }\n    public set animationPropertiesOverride(value: Nullable<AnimationPropertiesOverride>) {\n        this._animationPropertiesOverride = value;\n    }\n    /**\n     * Gets or sets a boolean indicating if a constant deltatime has to be used\n     * This is mostly useful for testing purposes when you do not want the animations to scale with the framerate\n     */\n    public useConstantAnimationDeltaTime = false;\n    /**\n     * Gets or sets a boolean indicating if the scene must keep the meshUnderPointer property updated\n     * Please note that it requires to run a ray cast through the scene on every frame\n     */\n    public constantlyUpdateMeshUnderPointer = false;\n    /**\n     * Defines the HTML cursor to use when hovering over interactive elements\n     */\n    public hoverCursor = \"pointer\";\n    /**\n     * Defines the HTML default cursor to use (empty by default)\n     */\n    public defaultCursor: string = \"\";\n    /**\n     * Defines whether cursors are handled by the scene.\n     */\n    public doNotHandleCursors = false;\n    /**\n     * This is used to call preventDefault() on pointer down\n     * in order to block unwanted artifacts like system double clicks\n     */\n    public preventDefaultOnPointerDown = true;\n    /**\n     * This is used to call preventDefault() on pointer up\n     * in order to block unwanted artifacts like system double clicks\n     */\n    public preventDefaultOnPointerUp = true;\n    // Metadata\n    /**\n     * Gets or sets user defined metadata\n     */\n    public metadata: any = null;\n    /**\n     * For internal use only. Please do not use.\n     */\n    public reservedDataStore: any = null;\n    /**\n     * Gets the name of the plugin used to load this scene (null by default)\n     */\n    public loadingPluginName: string;\n    /**\n     * Use this array to add regular expressions used to disable offline support for specific urls\n     */\n    public disableOfflineSupportExceptionRules = new Array<RegExp>();\n    /**\n     * An event triggered when the scene is disposed.\n     */\n    public onDisposeObservable = new Observable<Scene>();\n    private _onDisposeObserver: Nullable<Observer<Scene>> = null;\n    /** Sets a function to be executed when this scene is disposed. */\n    public set onDispose(callback: () => void) {\n        if (this._onDisposeObserver) {\n            this.onDisposeObservable.remove(this._onDisposeObserver);\n        }\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\n    }\n    /**\n     * An event triggered before rendering the scene (right after animations and physics)\n     */\n    public onBeforeRenderObservable = new Observable<Scene>();\n    private _onBeforeRenderObserver: Nullable<Observer<Scene>> = null;\n    /** Sets a function to be executed before rendering this scene */\n    public set beforeRender(callback: Nullable<() => void>) {\n        if (this._onBeforeRenderObserver) {\n            this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\n        }\n        if (callback) {\n            this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\n        }\n    }\n    /**\n     * An event triggered after rendering the scene\n     */\n    public onAfterRenderObservable = new Observable<Scene>();\n    /**\n     * An event triggered after rendering the scene for an active camera (When scene.render is called this will be called after each camera)\n     * This is triggered for each \"sub\" camera in a Camera Rig unlike onAfterCameraRenderObservable\n     */\n    public onAfterRenderCameraObservable = new Observable<Camera>();\n    private _onAfterRenderObserver: Nullable<Observer<Scene>> = null;\n    /** Sets a function to be executed after rendering this scene */\n    public set afterRender(callback: Nullable<() => void>) {\n        if (this._onAfterRenderObserver) {\n            this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n        }\n        if (callback) {\n            this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\n        }\n    }\n    /**\n     * An event triggered before animating the scene\n     */\n    public onBeforeAnimationsObservable = new Observable<Scene>();\n    /**\n     * An event triggered after animations processing\n     */\n    public onAfterAnimationsObservable = new Observable<Scene>();\n    /**\n     * An event triggered before draw calls are ready to be sent\n     */\n    public onBeforeDrawPhaseObservable = new Observable<Scene>();\n    /**\n     * An event triggered after draw calls have been sent\n     */\n    public onAfterDrawPhaseObservable = new Observable<Scene>();\n    /**\n     * An event triggered when the scene is ready\n     */\n    public onReadyObservable = new Observable<Scene>();\n    /**\n     * An event triggered before rendering a camera\n     */\n    public onBeforeCameraRenderObservable = new Observable<Camera>();\n    private _onBeforeCameraRenderObserver: Nullable<Observer<Camera>> = null;\n    /** Sets a function to be executed before rendering a camera*/\n    public set beforeCameraRender(callback: () => void) {\n        if (this._onBeforeCameraRenderObserver) {\n            this.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n        }\n        this._onBeforeCameraRenderObserver = this.onBeforeCameraRenderObservable.add(callback);\n    }\n    /**\n     * An event triggered after rendering a camera\n     * This is triggered for the full rig Camera only unlike onAfterRenderCameraObservable\n     */\n    public onAfterCameraRenderObservable = new Observable<Camera>();\n    private _onAfterCameraRenderObserver: Nullable<Observer<Camera>> = null;\n    /** Sets a function to be executed after rendering a camera*/\n    public set afterCameraRender(callback: () => void) {\n        if (this._onAfterCameraRenderObserver) {\n            this.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\n        }\n        this._onAfterCameraRenderObserver = this.onAfterCameraRenderObservable.add(callback);\n    }\n    /**\n     * An event triggered when active meshes evaluation is about to start\n     */\n    public onBeforeActiveMeshesEvaluationObservable = new Observable<Scene>();\n    /**\n     * An event triggered when active meshes evaluation is done\n     */\n    public onAfterActiveMeshesEvaluationObservable = new Observable<Scene>();\n    /**\n     * An event triggered when particles rendering is about to start\n     * Note: This event can be trigger more than once per frame (because particles can be rendered by render target textures as well)\n     */\n    public onBeforeParticlesRenderingObservable = new Observable<Scene>();\n    /**\n     * An event triggered when particles rendering is done\n     * Note: This event can be trigger more than once per frame (because particles can be rendered by render target textures as well)\n     */\n    public onAfterParticlesRenderingObservable = new Observable<Scene>();\n    /**\n     * An event triggered when SceneLoader.Append or SceneLoader.Load or SceneLoader.ImportMesh were successfully executed\n     */\n    public onDataLoadedObservable = new Observable<Scene>();\n    /**\n     * An event triggered when a camera is created\n     */\n    public onNewCameraAddedObservable = new Observable<Camera>();\n    /**\n     * An event triggered when a camera is removed\n     */\n    public onCameraRemovedObservable = new Observable<Camera>();\n    /**\n     * An event triggered when a light is created\n     */\n    public onNewLightAddedObservable = new Observable<Light>();\n    /**\n     * An event triggered when a light is removed\n     */\n    public onLightRemovedObservable = new Observable<Light>();\n    /**\n     * An event triggered when a geometry is created\n     */\n    public onNewGeometryAddedObservable = new Observable<Geometry>();\n    /**\n     * An event triggered when a geometry is removed\n     */\n    public onGeometryRemovedObservable = new Observable<Geometry>();\n    /**\n     * An event triggered when a transform node is created\n     */\n    public onNewTransformNodeAddedObservable = new Observable<TransformNode>();\n    /**\n     * An event triggered when a transform node is removed\n     */\n    public onTransformNodeRemovedObservable = new Observable<TransformNode>();\n    /**\n     * An event triggered when a mesh is created\n     */\n    public onNewMeshAddedObservable = new Observable<AbstractMesh>();\n    /**\n     * An event triggered when a mesh is removed\n     */\n    public onMeshRemovedObservable = new Observable<AbstractMesh>();\n    /**\n     * An event triggered when a skeleton is created\n     */\n    public onNewSkeletonAddedObservable = new Observable<Skeleton>();\n    /**\n     * An event triggered when a skeleton is removed\n     */\n    public onSkeletonRemovedObservable = new Observable<Skeleton>();\n    /**\n     * An event triggered when a material is created\n     */\n    public onNewMaterialAddedObservable = new Observable<Material>();\n    /**\n     * An event triggered when a multi material is created\n     */\n    public onNewMultiMaterialAddedObservable = new Observable<MultiMaterial>();\n    /**\n     * An event triggered when a material is removed\n     */\n    public onMaterialRemovedObservable = new Observable<Material>();\n    /**\n     * An event triggered when a multi material is removed\n     */\n    public onMultiMaterialRemovedObservable = new Observable<MultiMaterial>();\n    /**\n     * An event triggered when a texture is created\n     */\n    public onNewTextureAddedObservable = new Observable<BaseTexture>();\n    /**\n     * An event triggered when a texture is removed\n     */\n    public onTextureRemovedObservable = new Observable<BaseTexture>();\n    /**\n     * An event triggered when render targets are about to be rendered\n     * Can happen multiple times per frame.\n     */\n    public onBeforeRenderTargetsRenderObservable = new Observable<Scene>();\n    /**\n     * An event triggered when render targets were rendered.\n     * Can happen multiple times per frame.\n     */\n    public onAfterRenderTargetsRenderObservable = new Observable<Scene>();\n    /**\n     * An event triggered before calculating deterministic simulation step\n     */\n    public onBeforeStepObservable = new Observable<Scene>();\n    /**\n     * An event triggered after calculating deterministic simulation step\n     */\n    public onAfterStepObservable = new Observable<Scene>();\n    /**\n     * An event triggered when the activeCamera property is updated\n     */\n    public onActiveCameraChanged = new Observable<Scene>();\n    /**\n     * An event triggered when the activeCameras property is updated\n     */\n    public onActiveCamerasChanged = new Observable<Scene>();\n    /**\n     * This Observable will be triggered before rendering each renderingGroup of each rendered camera.\n     * The RenderingGroupInfo class contains all the information about the context in which the observable is called\n     * If you wish to register an Observer only for a given set of renderingGroup, use the mask with a combination of the renderingGroup index elevated to the power of two (1 for renderingGroup 0, 2 for renderingrOup1, 4 for 2 and 8 for 3)\n     */\n    public onBeforeRenderingGroupObservable = new Observable<RenderingGroupInfo>();\n    /**\n     * This Observable will be triggered after rendering each renderingGroup of each rendered camera.\n     * The RenderingGroupInfo class contains all the information about the context in which the observable is called\n     * If you wish to register an Observer only for a given set of renderingGroup, use the mask with a combination of the renderingGroup index elevated to the power of two (1 for renderingGroup 0, 2 for renderingrOup1, 4 for 2 and 8 for 3)\n     */\n    public onAfterRenderingGroupObservable = new Observable<RenderingGroupInfo>();\n    /**\n     * This Observable will when a mesh has been imported into the scene.\n     */\n    public onMeshImportedObservable = new Observable<AbstractMesh>();\n    /**\n     * This Observable will when an animation file has been imported into the scene.\n     */\n    public onAnimationFileImportedObservable = new Observable<Scene>();\n    /**\n     * Gets or sets a user defined funtion to select LOD from a mesh and a camera.\n     * By default this function is undefined and Babylon.js will select LOD based on distance to camera\n     */\n    public customLODSelector: (mesh: AbstractMesh, camera: Camera) => Nullable<AbstractMesh>;\n    // Animations\n    /** @internal */\n    public _registeredForLateAnimationBindings = new SmartArrayNoDuplicate<any>(256);\n    // Pointers\n    /**\n     * Gets or sets a predicate used to select candidate meshes for a pointer down event\n     */\n    public pointerDownPredicate: (Mesh: AbstractMesh) => boolean;\n    /**\n     * Gets or sets a predicate used to select candidate meshes for a pointer up event\n     */\n    public pointerUpPredicate: (Mesh: AbstractMesh) => boolean;\n    /**\n     * Gets or sets a predicate used to select candidate meshes for a pointer move event\n     */\n    public pointerMovePredicate: (Mesh: AbstractMesh) => boolean;\n    /**\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer move event occurs.\n     */\n    public skipPointerMovePicking = false;\n    /**\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer down event occurs.\n     */\n    public skipPointerDownPicking = false;\n    /**\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer up event occurs.  Off by default.\n     */\n    public skipPointerUpPicking = false;\n    /** Callback called when a pointer move is detected */\n    public onPointerMove?: (evt: IPointerEvent, pickInfo: PickingInfo, type: PointerEventTypes) => void;\n    /** Callback called when a pointer down is detected  */\n    public onPointerDown?: (evt: IPointerEvent, pickInfo: PickingInfo, type: PointerEventTypes) => void;\n    /** Callback called when a pointer up is detected  */\n    public onPointerUp?: (evt: IPointerEvent, pickInfo: Nullable<PickingInfo>, type: PointerEventTypes) => void;\n    /** Callback called when a pointer pick is detected */\n    public onPointerPick?: (evt: IPointerEvent, pickInfo: PickingInfo) => void;\n    /**\n     * Gets or sets a predicate used to select candidate faces for a pointer move event\n     */\n    public pointerMoveTrianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray) => boolean) | undefined;\n    /**\n     * This observable event is triggered when any ponter event is triggered. It is registered during Scene.attachControl() and it is called BEFORE the 3D engine process anything (mesh/sprite picking for instance).\n     * You have the possibility to skip the process and the call to onPointerObservable by setting PointerInfoPre.skipOnPointerObservable to true\n     */\n    public onPrePointerObservable = new Observable<PointerInfoPre>();\n    /**\n     * Observable event triggered each time an input event is received from the rendering canvas\n     */\n    public onPointerObservable = new Observable<PointerInfo>();\n    /**\n     * Gets the pointer coordinates without any translation (ie. straight out of the pointer event)\n     */\n    public get unTranslatedPointer(): Vector2 {\n        return this._inputManager.unTranslatedPointer;\n    }\n    /**\n     * Gets or sets the distance in pixel that you have to move to prevent some events. Default is 10 pixels\n     */\n    public static get DragMovementThreshold() {\n        return InputManager.DragMovementThreshold;\n    }\n    public static set DragMovementThreshold(value: number) {\n        InputManager.DragMovementThreshold = value;\n    }\n    /**\n     * Time in milliseconds to wait to raise long press events if button is still pressed. Default is 500 ms\n     */\n    public static get LongPressDelay() {\n        return InputManager.LongPressDelay;\n    }\n    public static set LongPressDelay(value: number) {\n        InputManager.LongPressDelay = value;\n    }\n    /**\n     * Time in milliseconds to wait to raise long press events if button is still pressed. Default is 300 ms\n     */\n    public static get DoubleClickDelay() {\n        return InputManager.DoubleClickDelay;\n    }\n    public static set DoubleClickDelay(value: number) {\n        InputManager.DoubleClickDelay = value;\n    }\n    /** If you need to check double click without raising a single click at first click, enable this flag */\n    public static get ExclusiveDoubleClickMode() {\n        return InputManager.ExclusiveDoubleClickMode;\n    }\n    public static set ExclusiveDoubleClickMode(value: boolean) {\n        InputManager.ExclusiveDoubleClickMode = value;\n    }\n    /**\n     * Bind the current view position to an effect.\n     * @param effect The effect to be bound\n     * @param variableName name of the shader variable that will hold the eye position\n     * @param isVector3 true to indicates that variableName is a Vector3 and not a Vector4\n     * @returns the computed eye position\n     */\n    public bindEyePosition(effect: Nullable<Effect>, variableName = \"vEyePosition\", isVector3 = false): Vector4 {\n        const eyePosition = this._forcedViewPosition\n            ? this._forcedViewPosition\n            : this._mirroredCameraPosition\n                ? this._mirroredCameraPosition\n                : this.activeCamera!.globalPosition ?? (this.activeCamera as WebVRFreeCamera).devicePosition;\n        const invertNormal = this.useRightHandedSystem === (this._mirroredCameraPosition != null);\n        TmpVectors.Vector4[0].set(eyePosition.x, eyePosition.y, eyePosition.z, invertNormal ? -1 : 1);\n        if (effect) {\n            if (isVector3) {\n                effect.setFloat3(variableName, TmpVectors.Vector4[0].x, TmpVectors.Vector4[0].y, TmpVectors.Vector4[0].z);\n            }\n            else {\n                effect.setVector4(variableName, TmpVectors.Vector4[0]);\n            }\n        }\n        return TmpVectors.Vector4[0];\n    }\n    /**\n     * Update the scene ubo before it can be used in rendering processing\n     * @returns the scene UniformBuffer\n     */\n    public finalizeSceneUbo(): UniformBuffer {\n        const ubo = this.getSceneUniformBuffer();\n        const eyePosition = this.bindEyePosition(null);\n        ubo.updateFloat4(\"vEyePosition\", eyePosition.x, eyePosition.y, eyePosition.z, eyePosition.w);\n        ubo.update();\n        return ubo;\n    }\n    // Mirror\n    /** @internal */\n    public _mirroredCameraPosition: Nullable<Vector3>;\n    // Keyboard\n    /**\n     * This observable event is triggered when any keyboard event si raised and registered during Scene.attachControl()\n     * You have the possibility to skip the process and the call to onKeyboardObservable by setting KeyboardInfoPre.skipOnPointerObservable to true\n     */\n    public onPreKeyboardObservable = new Observable<KeyboardInfoPre>();\n    /**\n     * Observable event triggered each time an keyboard event is received from the hosting window\n     */\n    public onKeyboardObservable = new Observable<KeyboardInfo>();\n    // Coordinates system\n    private _useRightHandedSystem = false;\n    /**\n     * Gets or sets a boolean indicating if the scene must use right-handed coordinates system\n     */\n    public set useRightHandedSystem(value: boolean) {\n        if (this._useRightHandedSystem === value) {\n            return;\n        }\n        this._useRightHandedSystem = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\n    }\n    public get useRightHandedSystem(): boolean {\n        return this._useRightHandedSystem;\n    }\n    // Deterministic lockstep\n    private _timeAccumulator: number = 0;\n    private _currentStepId: number = 0;\n    private _currentInternalStep: number = 0;\n    /**\n     * Sets the step Id used by deterministic lock step\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n     * @param newStepId defines the step Id\n     */\n    public setStepId(newStepId: number): void {\n        this._currentStepId = newStepId;\n    }\n    /**\n     * Gets the step Id used by deterministic lock step\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n     * @returns the step Id\n     */\n    public getStepId(): number {\n        return this._currentStepId;\n    }\n    /**\n     * Gets the internal step used by deterministic lock step\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n     * @returns the internal step\n     */\n    public getInternalStep(): number {\n        return this._currentInternalStep;\n    }\n    // Fog\n    private _fogEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if fog is enabled on this scene\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n     * (Default is true)\n     */\n    public set fogEnabled(value: boolean) {\n        if (this._fogEnabled === value) {\n            return;\n        }\n        this._fogEnabled = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\n    }\n    public get fogEnabled(): boolean {\n        return this._fogEnabled;\n    }\n    private _fogMode = Scene.FOGMODE_NONE;\n    /**\n     * Gets or sets the fog mode to use\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n     * | mode | value |\n     * | --- | --- |\n     * | FOGMODE_NONE | 0 |\n     * | FOGMODE_EXP | 1 |\n     * | FOGMODE_EXP2 | 2 |\n     * | FOGMODE_LINEAR | 3 |\n     */\n    public set fogMode(value: number) {\n        if (this._fogMode === value) {\n            return;\n        }\n        this._fogMode = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\n    }\n    public get fogMode(): number {\n        return this._fogMode;\n    }\n    /**\n     * Gets or sets the fog color to use\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n     * (Default is Color3(0.2, 0.2, 0.3))\n     */\n    public fogColor = new Color3(0.2, 0.2, 0.3);\n    /**\n     * Gets or sets the fog density to use\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n     * (Default is 0.1)\n     */\n    public fogDensity = 0.1;\n    /**\n     * Gets or sets the fog start distance to use\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n     * (Default is 0)\n     */\n    public fogStart = 0;\n    /**\n     * Gets or sets the fog end distance to use\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n     * (Default is 1000)\n     */\n    public fogEnd = 1000.0;\n    /**\n     * Flag indicating that the frame buffer binding is handled by another component\n     */\n    public get prePass(): boolean {\n        return !!this.prePassRenderer && this.prePassRenderer.defaultRT.enabled;\n    }\n    /**\n     * Flag indicating if we need to store previous matrices when rendering\n     */\n    public needsPreviousWorldMatrices = false;\n    // Lights\n    private _shadowsEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if shadows are enabled on this scene\n     */\n    public set shadowsEnabled(value: boolean) {\n        if (this._shadowsEnabled === value) {\n            return;\n        }\n        this._shadowsEnabled = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_LightDirtyFlag);\n    }\n    public get shadowsEnabled(): boolean {\n        return this._shadowsEnabled;\n    }\n    private _lightsEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if lights are enabled on this scene\n     */\n    public set lightsEnabled(value: boolean) {\n        if (this._lightsEnabled === value) {\n            return;\n        }\n        this._lightsEnabled = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_LightDirtyFlag);\n    }\n    public get lightsEnabled(): boolean {\n        return this._lightsEnabled;\n    }\n    private _activeCameras: Nullable<Camera[]>;\n    private _unObserveActiveCameras: Nullable<() => void> = null;\n    /** All of the active cameras added to this scene. */\n    public get activeCameras(): Nullable<Camera[]> {\n        return this._activeCameras;\n    }\n    public set activeCameras(cameras: Nullable<Camera[]>) {\n        if (this._unObserveActiveCameras) {\n            this._unObserveActiveCameras();\n            this._unObserveActiveCameras = null;\n        }\n        if (cameras) {\n            this._unObserveActiveCameras = _ObserveArray(cameras, () => {\n                this.onActiveCamerasChanged.notifyObservers(this);\n            });\n        }\n        this._activeCameras = cameras;\n    }\n    /** @internal */\n    public _activeCamera: Nullable<Camera>;\n    /** Gets or sets the current active camera */\n    public get activeCamera(): Nullable<Camera> {\n        return this._activeCamera;\n    }\n    public set activeCamera(value: Nullable<Camera>) {\n        if (value === this._activeCamera) {\n            return;\n        }\n        this._activeCamera = value;\n        this.onActiveCameraChanged.notifyObservers(this);\n    }\n    private _defaultMaterial: Material;\n    /** The default material used on meshes when no material is affected */\n    public get defaultMaterial(): Material {\n        if (!this._defaultMaterial) {\n            this._defaultMaterial = Scene.DefaultMaterialFactory(this);\n        }\n        return this._defaultMaterial;\n    }\n    /** The default material used on meshes when no material is affected */\n    public set defaultMaterial(value: Material) {\n        this._defaultMaterial = value;\n    }\n    // Textures\n    private _texturesEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if textures are enabled on this scene\n     */\n    public set texturesEnabled(value: boolean) {\n        if (this._texturesEnabled === value) {\n            return;\n        }\n        this._texturesEnabled = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\n    }\n    public get texturesEnabled(): boolean {\n        return this._texturesEnabled;\n    }\n    // Physics\n    /**\n     * Gets or sets a boolean indicating if physic engines are enabled on this scene\n     */\n    public physicsEnabled = true;\n    // Particles\n    /**\n     * Gets or sets a boolean indicating if particles are enabled on this scene\n     */\n    public particlesEnabled = true;\n    // Sprites\n    /**\n     * Gets or sets a boolean indicating if sprites are enabled on this scene\n     */\n    public spritesEnabled = true;\n    // Skeletons\n    private _skeletonsEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if skeletons are enabled on this scene\n     */\n    public set skeletonsEnabled(value: boolean) {\n        if (this._skeletonsEnabled === value) {\n            return;\n        }\n        this._skeletonsEnabled = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_AttributesDirtyFlag);\n    }\n    public get skeletonsEnabled(): boolean {\n        return this._skeletonsEnabled;\n    }\n    // Lens flares\n    /**\n     * Gets or sets a boolean indicating if lens flares are enabled on this scene\n     */\n    public lensFlaresEnabled = true;\n    // Collisions\n    /**\n     * Gets or sets a boolean indicating if collisions are enabled on this scene\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\n     */\n    public collisionsEnabled = true;\n    private _collisionCoordinator: ICollisionCoordinator;\n    /** @internal */\n    public get collisionCoordinator(): ICollisionCoordinator {\n        if (!this._collisionCoordinator) {\n            this._collisionCoordinator = Scene.CollisionCoordinatorFactory();\n            this._collisionCoordinator.init(this);\n        }\n        return this._collisionCoordinator;\n    }\n    /**\n     * Defines the gravity applied to this scene (used only for collisions)\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\n     */\n    public gravity = new Vector3(0, -9.807, 0);\n    // Postprocesses\n    /**\n     * Gets or sets a boolean indicating if postprocesses are enabled on this scene\n     */\n    public postProcessesEnabled = true;\n    /**\n     * Gets the current postprocess manager\n     */\n    public postProcessManager: PostProcessManager;\n    // Customs render targets\n    /**\n     * Gets or sets a boolean indicating if render targets are enabled on this scene\n     */\n    public renderTargetsEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if next render targets must be dumped as image for debugging purposes\n     * We recommend not using it and instead rely on Spector.js: http://spector.babylonjs.com\n     */\n    public dumpNextRenderTargets = false;\n    /**\n     * The list of user defined render targets added to the scene\n     */\n    public customRenderTargets = new Array<RenderTargetTexture>();\n    /**\n     * Defines if texture loading must be delayed\n     * If true, textures will only be loaded when they need to be rendered\n     */\n    public useDelayedTextureLoading: boolean;\n    /**\n     * Gets the list of meshes imported to the scene through SceneLoader\n     */\n    public importedMeshesFiles = new Array<string>();\n    // Probes\n    /**\n     * Gets or sets a boolean indicating if probes are enabled on this scene\n     */\n    public probesEnabled = true;\n    // Offline support\n    /**\n     * Gets or sets the current offline provider to use to store scene data\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimizeCached\n     */\n    public offlineProvider: IOfflineProvider;\n    /**\n     * Gets or sets the action manager associated with the scene\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\n     */\n    public actionManager: AbstractActionManager;\n    private _meshesForIntersections = new SmartArrayNoDuplicate<AbstractMesh>(256);\n    // Procedural textures\n    /**\n     * Gets or sets a boolean indicating if procedural textures are enabled on this scene\n     */\n    public proceduralTexturesEnabled = true;\n    // Private\n    private _engine: Engine;\n    // Performance counters\n    private _totalVertices = new PerfCounter();\n    /** @internal */\n    public _activeIndices = new PerfCounter();\n    /** @internal */\n    public _activeParticles = new PerfCounter();\n    /** @internal */\n    public _activeBones = new PerfCounter();\n    private _animationRatio: number;\n    /** @internal */\n    public _animationTimeLast: number;\n    /** @internal */\n    public _animationTime: number = 0;\n    /**\n     * Gets or sets a general scale for animation speed\n     * @see https://www.babylonjs-playground.com/#IBU2W7#3\n     */\n    public animationTimeScale: number = 1;\n    /** @internal */\n    public _cachedMaterial: Nullable<Material>;\n    /** @internal */\n    public _cachedEffect: Nullable<Effect>;\n    /** @internal */\n    public _cachedVisibility: Nullable<number>;\n    private _renderId = 0;\n    private _frameId = 0;\n    private _executeWhenReadyTimeoutId: Nullable<ReturnType<typeof setTimeout>> = null;\n    private _intermediateRendering = false;\n    private _defaultFrameBufferCleared = false;\n    private _viewUpdateFlag = -1;\n    private _projectionUpdateFlag = -1;\n    /** @internal */\n    public _toBeDisposed = new Array<Nullable<IDisposable>>(256);\n    private _activeRequests = new Array<IFileRequest>();\n    /** @internal */\n    public _pendingData = new Array();\n    private _isDisposed = false;\n    /**\n     * Gets or sets a boolean indicating that all submeshes of active meshes must be rendered\n     * Use this boolean to avoid computing frustum clipping on submeshes (This could help when you are CPU bound)\n     */\n    public dispatchAllSubMeshesOfActiveMeshes: boolean = false;\n    private _activeMeshes = new SmartArray<AbstractMesh>(256);\n    private _processedMaterials = new SmartArray<Material>(256);\n    private _renderTargets = new SmartArrayNoDuplicate<RenderTargetTexture>(256);\n    private _materialsRenderTargets = new SmartArrayNoDuplicate<RenderTargetTexture>(256);\n    /** @internal */\n    public _activeParticleSystems = new SmartArray<IParticleSystem>(256);\n    private _activeSkeletons = new SmartArrayNoDuplicate<Skeleton>(32);\n    private _softwareSkinnedMeshes = new SmartArrayNoDuplicate<Mesh>(32);\n    private _renderingManager: RenderingManager;\n    /**\n     * Gets the scene's rendering manager\n     */\n    public get renderingManager(): RenderingManager {\n        return this._renderingManager;\n    }\n    /** @internal */\n    public _activeAnimatables = new Array<Animatable>();\n    private _transformMatrix = Matrix.Zero();\n    private _sceneUbo: UniformBuffer;\n    /** @internal */\n    public _viewMatrix: Matrix;\n    /** @internal */\n    public _projectionMatrix: Matrix;\n    /** @internal */\n    public _forcedViewPosition: Nullable<Vector3>;\n    /** @internal */\n    public _frustumPlanes: Plane[];\n    /**\n     * Gets the list of frustum planes (built from the active camera)\n     */\n    public get frustumPlanes(): Plane[] {\n        return this._frustumPlanes;\n    }\n    /**\n     * Gets or sets a boolean indicating if lights must be sorted by priority (off by default)\n     * This is useful if there are more lights that the maximum simulteanous authorized\n     */\n    public requireLightSorting = false;\n    /** @internal */\n    public readonly useMaterialMeshMap: boolean;\n    /** @internal */\n    public readonly useClonedMeshMap: boolean;\n    private _externalData: StringDictionary<Object>;\n    private _uid: Nullable<string>;\n    /**\n     * @internal\n     * Backing store of defined scene components.\n     */\n    public _components: ISceneComponent[] = [];\n    /**\n     * @internal\n     * Backing store of defined scene components.\n     */\n    public _serializableComponents: ISceneSerializableComponent[] = [];\n    /**\n     * List of components to register on the next registration step.\n     */\n    private _transientComponents: ISceneComponent[] = [];\n    /**\n     * Registers the transient components if needed.\n     */\n    private _registerTransientComponents(): void {\n        // Register components that have been associated lately to the scene.\n        if (this._transientComponents.length > 0) {\n            for (const component of this._transientComponents) {\n                component.register();\n            }\n            this._transientComponents.length = 0;\n        }\n    }\n    /**\n     * @internal\n     * Add a component to the scene.\n     * Note that the ccomponent could be registered on th next frame if this is called after\n     * the register component stage.\n     * @param component Defines the component to add to the scene\n     */\n    public _addComponent(component: ISceneComponent) {\n        this._components.push(component);\n        this._transientComponents.push(component);\n        const serializableComponent = component as any;\n        if (serializableComponent.addFromContainer && serializableComponent.serialize) {\n            this._serializableComponents.push(serializableComponent);\n        }\n    }\n    /**\n     * @internal\n     * Gets a component from the scene.\n     * @param name defines the name of the component to retrieve\n     * @returns the component or null if not present\n     */\n    public _getComponent(name: string): Nullable<ISceneComponent> {\n        for (const component of this._components) {\n            if (component.name === name) {\n                return component;\n            }\n        }\n        return null;\n    }\n    /**\n     * @internal\n     * Defines the actions happening before camera updates.\n     */\n    public _beforeCameraUpdateStage = Stage.Create<SimpleStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening before clear the canvas.\n     */\n    public _beforeClearStage = Stage.Create<SimpleStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening before clear the canvas.\n     */\n    public _beforeRenderTargetClearStage = Stage.Create<RenderTargetStageAction>();\n    /**\n     * @internal\n     * Defines the actions when collecting render targets for the frame.\n     */\n    public _gatherRenderTargetsStage = Stage.Create<RenderTargetsStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening for one camera in the frame.\n     */\n    public _gatherActiveCameraRenderTargetsStage = Stage.Create<RenderTargetsStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening during the per mesh ready checks.\n     */\n    public _isReadyForMeshStage = Stage.Create<MeshStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening before evaluate active mesh checks.\n     */\n    public _beforeEvaluateActiveMeshStage = Stage.Create<SimpleStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening during the evaluate sub mesh checks.\n     */\n    public _evaluateSubMeshStage = Stage.Create<EvaluateSubMeshStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening during the active mesh stage.\n     */\n    public _preActiveMeshStage = Stage.Create<PreActiveMeshStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening during the per camera render target step.\n     */\n    public _cameraDrawRenderTargetStage = Stage.Create<CameraStageFrameBufferAction>();\n    /**\n     * @internal\n     * Defines the actions happening just before the active camera is drawing.\n     */\n    public _beforeCameraDrawStage = Stage.Create<CameraStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening just before a render target is drawing.\n     */\n    public _beforeRenderTargetDrawStage = Stage.Create<RenderTargetStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening just before a rendering group is drawing.\n     */\n    public _beforeRenderingGroupDrawStage = Stage.Create<RenderingGroupStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening just before a mesh is drawing.\n     */\n    public _beforeRenderingMeshStage = Stage.Create<RenderingMeshStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening just after a mesh has been drawn.\n     */\n    public _afterRenderingMeshStage = Stage.Create<RenderingMeshStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening just after a rendering group has been drawn.\n     */\n    public _afterRenderingGroupDrawStage = Stage.Create<RenderingGroupStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening just after the active camera has been drawn.\n     */\n    public _afterCameraDrawStage = Stage.Create<CameraStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening just after the post processing\n     */\n    public _afterCameraPostProcessStage = Stage.Create<CameraStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening just after a render target has been drawn.\n     */\n    public _afterRenderTargetDrawStage = Stage.Create<RenderTargetStageAction>();\n    /**\n     * Defines the actions happening just after the post processing on a render target\n     */\n    public _afterRenderTargetPostProcessStage = Stage.Create<RenderTargetStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening just after rendering all cameras and computing intersections.\n     */\n    public _afterRenderStage = Stage.Create<SimpleStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening when a pointer move event happens.\n     */\n    public _pointerMoveStage = Stage.Create<PointerMoveStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening when a pointer down event happens.\n     */\n    public _pointerDownStage = Stage.Create<PointerUpDownStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening when a pointer up event happens.\n     */\n    public _pointerUpStage = Stage.Create<PointerUpDownStageAction>();\n    /**\n     * an optional map from Geometry Id to Geometry index in the 'geometries' array\n     */\n    private _geometriesByUniqueId: Nullable<{\n        [uniqueId: string]: number | undefined;\n    }> = null;\n    /**\n     * Creates a new Scene\n     * @param engine defines the engine to use to render this scene\n     * @param options defines the scene options\n     */\n    constructor(engine: Engine, options?: SceneOptions) {\n        super();\n        this.activeCameras = new Array<Camera>();\n        const fullOptions = {\n            useGeometryUniqueIdsMap: true,\n            useMaterialMeshMap: true,\n            useClonedMeshMap: true,\n            virtual: false,\n            ...options\n        };\n        this._engine = engine || EngineStore.LastCreatedEngine;\n        if (!fullOptions.virtual) {\n            EngineStore._LastCreatedScene = this;\n            this._engine.scenes.push(this);\n        }\n        else {\n            this._engine._virtualScenes.push(this);\n        }\n        this._uid = null;\n        this._renderingManager = new RenderingManager(this);\n        if (PostProcessManager) {\n            this.postProcessManager = new PostProcessManager(this);\n        }\n        if (IsWindowObjectExist()) {\n            this.attachControl();\n        }\n        // Uniform Buffer\n        this._createUbo();\n        // Default Image processing definition\n        if (ImageProcessingConfiguration) {\n            this._imageProcessingConfiguration = new ImageProcessingConfiguration();\n        }\n        this.setDefaultCandidateProviders();\n        if (fullOptions.useGeometryUniqueIdsMap) {\n            this._geometriesByUniqueId = {};\n        }\n        this.useMaterialMeshMap = fullOptions.useMaterialMeshMap;\n        this.useClonedMeshMap = fullOptions.useClonedMeshMap;\n        if (!options || !options.virtual) {\n            this._engine.onNewSceneAddedObservable.notifyObservers(this);\n        }\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"Scene\" string\n     */\n    public getClassName(): string {\n        return \"Scene\";\n    }\n    private _defaultMeshCandidates: ISmartArrayLike<AbstractMesh> = {\n        data: [],\n        length: 0\n    };\n    /**\n     * @internal\n     */\n    public _getDefaultMeshCandidates(): ISmartArrayLike<AbstractMesh> {\n        this._defaultMeshCandidates.data = this.meshes;\n        this._defaultMeshCandidates.length = this.meshes.length;\n        return this._defaultMeshCandidates;\n    }\n    private _defaultSubMeshCandidates: ISmartArrayLike<SubMesh> = {\n        data: [],\n        length: 0\n    };\n    /**\n     * @internal\n     */\n    public _getDefaultSubMeshCandidates(mesh: AbstractMesh): ISmartArrayLike<SubMesh> {\n        this._defaultSubMeshCandidates.data = mesh.subMeshes;\n        this._defaultSubMeshCandidates.length = mesh.subMeshes.length;\n        return this._defaultSubMeshCandidates;\n    }\n    /**\n     * Sets the default candidate providers for the scene.\n     * This sets the getActiveMeshCandidates, getActiveSubMeshCandidates, getIntersectingSubMeshCandidates\n     * and getCollidingSubMeshCandidates to their default function\n     */\n    public setDefaultCandidateProviders(): void {\n        this.getActiveMeshCandidates = this._getDefaultMeshCandidates.bind(this);\n        this.getActiveSubMeshCandidates = this._getDefaultSubMeshCandidates.bind(this);\n        this.getIntersectingSubMeshCandidates = this._getDefaultSubMeshCandidates.bind(this);\n        this.getCollidingSubMeshCandidates = this._getDefaultSubMeshCandidates.bind(this);\n    }\n    /**\n     * Gets the mesh that is currently under the pointer\n     */\n    public get meshUnderPointer(): Nullable<AbstractMesh> {\n        return this._inputManager.meshUnderPointer;\n    }\n    /**\n     * Gets or sets the current on-screen X position of the pointer\n     */\n    public get pointerX(): number {\n        return this._inputManager.pointerX;\n    }\n    public set pointerX(value: number) {\n        this._inputManager.pointerX = value;\n    }\n    /**\n     * Gets or sets the current on-screen Y position of the pointer\n     */\n    public get pointerY(): number {\n        return this._inputManager.pointerY;\n    }\n    public set pointerY(value: number) {\n        this._inputManager.pointerY = value;\n    }\n    /**\n     * Gets the cached material (ie. the latest rendered one)\n     * @returns the cached material\n     */\n    public getCachedMaterial(): Nullable<Material> {\n        return this._cachedMaterial;\n    }\n    /**\n     * Gets the cached effect (ie. the latest rendered one)\n     * @returns the cached effect\n     */\n    public getCachedEffect(): Nullable<Effect> {\n        return this._cachedEffect;\n    }\n    /**\n     * Gets the cached visibility state (ie. the latest rendered one)\n     * @returns the cached visibility state\n     */\n    public getCachedVisibility(): Nullable<number> {\n        return this._cachedVisibility;\n    }\n    /**\n     * Gets a boolean indicating if the current material / effect / visibility must be bind again\n     * @param material defines the current material\n     * @param effect defines the current effect\n     * @param visibility defines the current visibility state\n     * @returns true if one parameter is not cached\n     */\n    public isCachedMaterialInvalid(material: Material, effect: Effect, visibility: number = 1) {\n        return this._cachedEffect !== effect || this._cachedMaterial !== material || this._cachedVisibility !== visibility;\n    }\n    /**\n     * Gets the engine associated with the scene\n     * @returns an Engine\n     */\n    public getEngine(): Engine {\n        return this._engine;\n    }\n    /**\n     * Gets the total number of vertices rendered per frame\n     * @returns the total number of vertices rendered per frame\n     */\n    public getTotalVertices(): number {\n        return this._totalVertices.current;\n    }\n    /**\n     * Gets the performance counter for total vertices\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\n     */\n    public get totalVerticesPerfCounter(): PerfCounter {\n        return this._totalVertices;\n    }\n    /**\n     * Gets the total number of active indices rendered per frame (You can deduce the number of rendered triangles by dividing this number by 3)\n     * @returns the total number of active indices rendered per frame\n     */\n    public getActiveIndices(): number {\n        return this._activeIndices.current;\n    }\n    /**\n     * Gets the performance counter for active indices\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\n     */\n    public get totalActiveIndicesPerfCounter(): PerfCounter {\n        return this._activeIndices;\n    }\n    /**\n     * Gets the total number of active particles rendered per frame\n     * @returns the total number of active particles rendered per frame\n     */\n    public getActiveParticles(): number {\n        return this._activeParticles.current;\n    }\n    /**\n     * Gets the performance counter for active particles\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\n     */\n    public get activeParticlesPerfCounter(): PerfCounter {\n        return this._activeParticles;\n    }\n    /**\n     * Gets the total number of active bones rendered per frame\n     * @returns the total number of active bones rendered per frame\n     */\n    public getActiveBones(): number {\n        return this._activeBones.current;\n    }\n    /**\n     * Gets the performance counter for active bones\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\n     */\n    public get activeBonesPerfCounter(): PerfCounter {\n        return this._activeBones;\n    }\n    /**\n     * Gets the array of active meshes\n     * @returns an array of AbstractMesh\n     */\n    public getActiveMeshes(): SmartArray<AbstractMesh> {\n        return this._activeMeshes;\n    }\n    /**\n     * Gets the animation ratio (which is 1.0 is the scene renders at 60fps and 2 if the scene renders at 30fps, etc.)\n     * @returns a number\n     */\n    public getAnimationRatio(): number {\n        return this._animationRatio !== undefined ? this._animationRatio : 1;\n    }\n    /**\n     * Gets an unique Id for the current render phase\n     * @returns a number\n     */\n    public getRenderId(): number {\n        return this._renderId;\n    }\n    /**\n     * Gets an unique Id for the current frame\n     * @returns a number\n     */\n    public getFrameId(): number {\n        return this._frameId;\n    }\n    /** Call this function if you want to manually increment the render Id*/\n    public incrementRenderId(): void {\n        this._renderId++;\n    }\n    private _createUbo(): void {\n        this.setSceneUniformBuffer(this.createSceneUniformBuffer());\n    }\n    /**\n     * Use this method to simulate a pointer move on a mesh\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n     * @param pickResult pickingInfo of the object wished to simulate pointer event on\n     * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n     * @returns the current scene\n     */\n    public simulatePointerMove(pickResult: PickingInfo, pointerEventInit?: PointerEventInit): Scene {\n        this._inputManager.simulatePointerMove(pickResult, pointerEventInit);\n        return this;\n    }\n    /**\n     * Use this method to simulate a pointer down on a mesh\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n     * @param pickResult pickingInfo of the object wished to simulate pointer event on\n     * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n     * @returns the current scene\n     */\n    public simulatePointerDown(pickResult: PickingInfo, pointerEventInit?: PointerEventInit): Scene {\n        this._inputManager.simulatePointerDown(pickResult, pointerEventInit);\n        return this;\n    }\n    /**\n     * Use this method to simulate a pointer up on a mesh\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n     * @param pickResult pickingInfo of the object wished to simulate pointer event on\n     * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n     * @param doubleTap indicates that the pointer up event should be considered as part of a double click (false by default)\n     * @returns the current scene\n     */\n    public simulatePointerUp(pickResult: PickingInfo, pointerEventInit?: PointerEventInit, doubleTap?: boolean): Scene {\n        this._inputManager.simulatePointerUp(pickResult, pointerEventInit, doubleTap);\n        return this;\n    }\n    /**\n     * Gets a boolean indicating if the current pointer event is captured (meaning that the scene has already handled the pointer down)\n     * @param pointerId defines the pointer id to use in a multi-touch scenario (0 by default)\n     * @returns true if the pointer was captured\n     */\n    public isPointerCaptured(pointerId = 0): boolean {\n        return this._inputManager.isPointerCaptured(pointerId);\n    }\n    /**\n     * Attach events to the canvas (To handle actionManagers triggers and raise onPointerMove, onPointerDown and onPointerUp\n     * @param attachUp defines if you want to attach events to pointerup\n     * @param attachDown defines if you want to attach events to pointerdown\n     * @param attachMove defines if you want to attach events to pointermove\n     */\n    public attachControl(attachUp = true, attachDown = true, attachMove = true): void {\n        this._inputManager.attachControl(attachUp, attachDown, attachMove);\n    }\n    /** Detaches all event handlers*/\n    public detachControl() {\n        this._inputManager.detachControl();\n    }\n    /**\n     * This function will check if the scene can be rendered (textures are loaded, shaders are compiled)\n     * Delay loaded resources are not taking in account\n     * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: true)\n     * @returns true if all required resources are ready\n     */\n    public isReady(checkRenderTargets = true): boolean {\n        if (this._isDisposed) {\n            return false;\n        }\n        let index: number;\n        const engine = this.getEngine();\n        let isReady = true;\n        // Pending data\n        if (this._pendingData.length > 0) {\n            isReady = false;\n        }\n        // Meshes\n        if (checkRenderTargets) {\n            this._processedMaterials.reset();\n            this._materialsRenderTargets.reset();\n        }\n        for (index = 0; index < this.meshes.length; index++) {\n            const mesh = this.meshes[index];\n            if (!mesh.subMeshes || mesh.subMeshes.length === 0) {\n                continue;\n            }\n            // Do not stop at the first encountered \"unready\" object as we want to ensure\n            // all materials are starting off their compilation in parallel.\n            if (!mesh.isReady(true)) {\n                isReady = false;\n                continue;\n            }\n            const hardwareInstancedRendering = mesh.hasThinInstances ||\n                mesh.getClassName() === \"InstancedMesh\" ||\n                mesh.getClassName() === \"InstancedLinesMesh\" ||\n                (engine.getCaps().instancedArrays && (<Mesh>mesh).instances.length > 0);\n            // Is Ready For Mesh\n            for (const step of this._isReadyForMeshStage) {\n                if (!step.action(mesh, hardwareInstancedRendering)) {\n                    isReady = false;\n                }\n            }\n            if (!checkRenderTargets) {\n                continue;\n            }\n            const mat = mesh.material || this.defaultMaterial;\n            if (mat) {\n                if (mat._storeEffectOnSubMeshes) {\n                    for (const subMesh of mesh.subMeshes) {\n                        const material = subMesh.getMaterial();\n                        if (material && material.hasRenderTargetTextures && material.getRenderTargetTextures != null) {\n                            if (this._processedMaterials.indexOf(material) === -1) {\n                                this._processedMaterials.push(material);\n                                this._materialsRenderTargets.concatWithNoDuplicate(material.getRenderTargetTextures!());\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (mat.hasRenderTargetTextures && mat.getRenderTargetTextures != null) {\n                        if (this._processedMaterials.indexOf(mat) === -1) {\n                            this._processedMaterials.push(mat);\n                            this._materialsRenderTargets.concatWithNoDuplicate(mat.getRenderTargetTextures!());\n                        }\n                    }\n                }\n            }\n        }\n        if (!isReady) {\n            return false;\n        }\n        // Effects\n        if (!engine.areAllEffectsReady()) {\n            return false;\n        }\n        // Render targets\n        if (checkRenderTargets) {\n            for (index = 0; index < this._materialsRenderTargets.length; ++index) {\n                const rtt = this._materialsRenderTargets.data[index];\n                if (!rtt.isReadyForRendering()) {\n                    return false;\n                }\n            }\n        }\n        // Geometries\n        for (index = 0; index < this.geometries.length; index++) {\n            const geometry = this.geometries[index];\n            if (geometry.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\n                return false;\n            }\n        }\n        // Post-processes\n        if (this.activeCameras && this.activeCameras.length > 0) {\n            for (const camera of this.activeCameras) {\n                if (!camera.isReady(true)) {\n                    return false;\n                }\n            }\n        }\n        else if (this.activeCamera) {\n            if (!this.activeCamera.isReady(true)) {\n                return false;\n            }\n        }\n        // Particles\n        for (const particleSystem of this.particleSystems) {\n            if (!particleSystem.isReady()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /** Resets all cached information relative to material (including effect and visibility) */\n    public resetCachedMaterial(): void {\n        this._cachedMaterial = null;\n        this._cachedEffect = null;\n        this._cachedVisibility = null;\n    }\n    /**\n     * Registers a function to be called before every frame render\n     * @param func defines the function to register\n     */\n    public registerBeforeRender(func: () => void): void {\n        this.onBeforeRenderObservable.add(func);\n    }\n    /**\n     * Unregisters a function called before every frame render\n     * @param func defines the function to unregister\n     */\n    public unregisterBeforeRender(func: () => void): void {\n        this.onBeforeRenderObservable.removeCallback(func);\n    }\n    /**\n     * Registers a function to be called after every frame render\n     * @param func defines the function to register\n     */\n    public registerAfterRender(func: () => void): void {\n        this.onAfterRenderObservable.add(func);\n    }\n    /**\n     * Unregisters a function called after every frame render\n     * @param func defines the function to unregister\n     */\n    public unregisterAfterRender(func: () => void): void {\n        this.onAfterRenderObservable.removeCallback(func);\n    }\n    private _executeOnceBeforeRender(func: () => void): void {\n        const execFunc = () => {\n            func();\n            setTimeout(() => {\n                this.unregisterBeforeRender(execFunc);\n            });\n        };\n        this.registerBeforeRender(execFunc);\n    }\n    /**\n     * The provided function will run before render once and will be disposed afterwards.\n     * A timeout delay can be provided so that the function will be executed in N ms.\n     * The timeout is using the browser's native setTimeout so time percision cannot be guaranteed.\n     * @param func The function to be executed.\n     * @param timeout optional delay in ms\n     */\n    public executeOnceBeforeRender(func: () => void, timeout?: number): void {\n        if (timeout !== undefined) {\n            setTimeout(() => {\n                this._executeOnceBeforeRender(func);\n            }, timeout);\n        }\n        else {\n            this._executeOnceBeforeRender(func);\n        }\n    }\n    /**\n     * This function can help adding any object to the list of data awaited to be ready in order to check for a complete scene loading.\n     * @param data defines the object to wait for\n     */\n    public addPendingData(data: any): void {\n        this._pendingData.push(data);\n    }\n    /**\n     * Remove a pending data from the loading list which has previously been added with addPendingData.\n     * @param data defines the object to remove from the pending list\n     */\n    public removePendingData(data: any): void {\n        const wasLoading = this.isLoading;\n        const index = this._pendingData.indexOf(data);\n        if (index !== -1) {\n            this._pendingData.splice(index, 1);\n        }\n        if (wasLoading && !this.isLoading) {\n            this.onDataLoadedObservable.notifyObservers(this);\n        }\n    }\n    /**\n     * Returns the number of items waiting to be loaded\n     * @returns the number of items waiting to be loaded\n     */\n    public getWaitingItemsCount(): number {\n        return this._pendingData.length;\n    }\n    /**\n     * Returns a boolean indicating if the scene is still loading data\n     */\n    public get isLoading(): boolean {\n        return this._pendingData.length > 0;\n    }\n    /**\n     * Registers a function to be executed when the scene is ready\n     * @param {Function} func - the function to be executed\n     * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: false)\n     */\n    public executeWhenReady(func: () => void, checkRenderTargets = false): void {\n        this.onReadyObservable.addOnce(func);\n        if (this._executeWhenReadyTimeoutId !== null) {\n            return;\n        }\n        this._checkIsReady(checkRenderTargets);\n    }\n    /**\n     * Returns a promise that resolves when the scene is ready\n     * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: false)\n     * @returns A promise that resolves when the scene is ready\n     */\n    public whenReadyAsync(checkRenderTargets = false): Promise<void> {\n        return new Promise((resolve) => {\n            this.executeWhenReady(() => {\n                resolve();\n            }, checkRenderTargets);\n        });\n    }\n    /**\n     * @internal\n     */\n    public _checkIsReady(checkRenderTargets = false) {\n        this._registerTransientComponents();\n        if (this.isReady(checkRenderTargets)) {\n            this.onReadyObservable.notifyObservers(this);\n            this.onReadyObservable.clear();\n            this._executeWhenReadyTimeoutId = null;\n            return;\n        }\n        if (this._isDisposed) {\n            this.onReadyObservable.clear();\n            this._executeWhenReadyTimeoutId = null;\n            return;\n        }\n        this._executeWhenReadyTimeoutId = setTimeout(() => {\n            // Ensure materials effects are checked outside render loops\n            this.incrementRenderId();\n            this._checkIsReady(checkRenderTargets);\n        }, 100);\n    }\n    /**\n     * Gets all animatable attached to the scene\n     */\n    public get animatables(): Animatable[] {\n        return this._activeAnimatables;\n    }\n    /**\n     * Resets the last animation time frame.\n     * Useful to override when animations start running when loading a scene for the first time.\n     */\n    public resetLastAnimationTimeFrame(): void {\n        this._animationTimeLast = PrecisionDate.Now;\n    }\n    // Matrix\n    /**\n     * Gets the current view matrix\n     * @returns a Matrix\n     */\n    public getViewMatrix(): Matrix {\n        return this._viewMatrix;\n    }\n    /**\n     * Gets the current projection matrix\n     * @returns a Matrix\n     */\n    public getProjectionMatrix(): Matrix {\n        return this._projectionMatrix;\n    }\n    /**\n     * Gets the current transform matrix\n     * @returns a Matrix made of View * Projection\n     */\n    public getTransformMatrix(): Matrix {\n        return this._transformMatrix;\n    }\n    /**\n     * Sets the current transform matrix\n     * @param viewL defines the View matrix to use\n     * @param projectionL defines the Projection matrix to use\n     * @param viewR defines the right View matrix to use (if provided)\n     * @param projectionR defines the right Projection matrix to use (if provided)\n     */\n    public setTransformMatrix(viewL: Matrix, projectionL: Matrix, viewR?: Matrix, projectionR?: Matrix): void {\n        // clear the multiviewSceneUbo if no viewR and projectionR are defined\n        if (!viewR && !projectionR && this._multiviewSceneUbo) {\n            this._multiviewSceneUbo.dispose();\n            this._multiviewSceneUbo = null;\n        }\n        if (this._viewUpdateFlag === viewL.updateFlag && this._projectionUpdateFlag === projectionL.updateFlag) {\n            return;\n        }\n        this._viewUpdateFlag = viewL.updateFlag;\n        this._projectionUpdateFlag = projectionL.updateFlag;\n        this._viewMatrix = viewL;\n        this._projectionMatrix = projectionL;\n        this._viewMatrix.multiplyToRef(this._projectionMatrix, this._transformMatrix);\n        // Update frustum\n        if (!this._frustumPlanes) {\n            this._frustumPlanes = Frustum.GetPlanes(this._transformMatrix);\n        }\n        else {\n            Frustum.GetPlanesToRef(this._transformMatrix, this._frustumPlanes);\n        }\n        if (this._multiviewSceneUbo && this._multiviewSceneUbo.useUbo) {\n            this._updateMultiviewUbo(viewR, projectionR);\n        }\n        else if (this._sceneUbo.useUbo) {\n            this._sceneUbo.updateMatrix(\"viewProjection\", this._transformMatrix);\n            this._sceneUbo.updateMatrix(\"view\", this._viewMatrix);\n            this._sceneUbo.updateMatrix(\"projection\", this._projectionMatrix);\n        }\n    }\n    /**\n     * Gets the uniform buffer used to store scene data\n     * @returns a UniformBuffer\n     */\n    public getSceneUniformBuffer(): UniformBuffer {\n        return this._multiviewSceneUbo ? this._multiviewSceneUbo : this._sceneUbo;\n    }\n    /**\n     * Creates a scene UBO\n     * @param name name of the uniform buffer (optional, for debugging purpose only)\n     * @returns a new ubo\n     */\n    public createSceneUniformBuffer(name?: string): UniformBuffer {\n        const sceneUbo = new UniformBuffer(this._engine, undefined, false, name ?? \"scene\");\n        sceneUbo.addUniform(\"viewProjection\", 16);\n        sceneUbo.addUniform(\"view\", 16);\n        sceneUbo.addUniform(\"projection\", 16);\n        sceneUbo.addUniform(\"vEyePosition\", 4);\n        return sceneUbo;\n    }\n    /**\n     * Sets the scene ubo\n     * @param ubo the ubo to set for the scene\n     */\n    public setSceneUniformBuffer(ubo: UniformBuffer): void {\n        this._sceneUbo = ubo;\n        this._viewUpdateFlag = -1;\n        this._projectionUpdateFlag = -1;\n    }\n    /**\n     * Gets an unique (relatively to the current scene) Id\n     * @returns an unique number for the scene\n     */\n    public getUniqueId() {\n        return UniqueIdGenerator.UniqueId;\n    }\n    /**\n     * Add a mesh to the list of scene's meshes\n     * @param newMesh defines the mesh to add\n     * @param recursive if all child meshes should also be added to the scene\n     */\n    public addMesh(newMesh: AbstractMesh, recursive = false) {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.meshes.push(newMesh);\n        newMesh._resyncLightSources();\n        if (!newMesh.parent) {\n            newMesh._addToSceneRootNodes();\n        }\n        this.onNewMeshAddedObservable.notifyObservers(newMesh);\n        if (recursive) {\n            newMesh.getChildMeshes().forEach((m) => {\n                this.addMesh(m);\n            });\n        }\n    }\n    /**\n     * Remove a mesh for the list of scene's meshes\n     * @param toRemove defines the mesh to remove\n     * @param recursive if all child meshes should also be removed from the scene\n     * @returns the index where the mesh was in the mesh list\n     */\n    public removeMesh(toRemove: AbstractMesh, recursive = false): number {\n        const index = this.meshes.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from the scene if mesh found\n            this.meshes[index] = this.meshes[this.meshes.length - 1];\n            this.meshes.pop();\n            if (!toRemove.parent) {\n                toRemove._removeFromSceneRootNodes();\n            }\n        }\n        this._inputManager._invalidateMesh(toRemove);\n        this.onMeshRemovedObservable.notifyObservers(toRemove);\n        if (recursive) {\n            toRemove.getChildMeshes().forEach((m) => {\n                this.removeMesh(m);\n            });\n        }\n        return index;\n    }\n    /**\n     * Add a transform node to the list of scene's transform nodes\n     * @param newTransformNode defines the transform node to add\n     */\n    public addTransformNode(newTransformNode: TransformNode) {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        if (newTransformNode.getScene() === this && newTransformNode._indexInSceneTransformNodesArray !== -1) {\n            // Already there?\n            return;\n        }\n        newTransformNode._indexInSceneTransformNodesArray = this.transformNodes.length;\n        this.transformNodes.push(newTransformNode);\n        if (!newTransformNode.parent) {\n            newTransformNode._addToSceneRootNodes();\n        }\n        this.onNewTransformNodeAddedObservable.notifyObservers(newTransformNode);\n    }\n    /**\n     * Remove a transform node for the list of scene's transform nodes\n     * @param toRemove defines the transform node to remove\n     * @returns the index where the transform node was in the transform node list\n     */\n    public removeTransformNode(toRemove: TransformNode): number {\n        const index = toRemove._indexInSceneTransformNodesArray;\n        if (index !== -1) {\n            if (index !== this.transformNodes.length - 1) {\n                const lastNode = this.transformNodes[this.transformNodes.length - 1];\n                this.transformNodes[index] = lastNode;\n                lastNode._indexInSceneTransformNodesArray = index;\n            }\n            toRemove._indexInSceneTransformNodesArray = -1;\n            this.transformNodes.pop();\n            if (!toRemove.parent) {\n                toRemove._removeFromSceneRootNodes();\n            }\n        }\n        this.onTransformNodeRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Remove a skeleton for the list of scene's skeletons\n     * @param toRemove defines the skeleton to remove\n     * @returns the index where the skeleton was in the skeleton list\n     */\n    public removeSkeleton(toRemove: Skeleton): number {\n        const index = this.skeletons.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from the scene if found\n            this.skeletons.splice(index, 1);\n            this.onSkeletonRemovedObservable.notifyObservers(toRemove);\n            // Clean active container\n            this._executeActiveContainerCleanup(this._activeSkeletons);\n        }\n        return index;\n    }\n    /**\n     * Remove a morph target for the list of scene's morph targets\n     * @param toRemove defines the morph target to remove\n     * @returns the index where the morph target was in the morph target list\n     */\n    public removeMorphTargetManager(toRemove: MorphTargetManager): number {\n        const index = this.morphTargetManagers.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from the scene if found\n            this.morphTargetManagers.splice(index, 1);\n        }\n        return index;\n    }\n    /**\n     * Remove a light for the list of scene's lights\n     * @param toRemove defines the light to remove\n     * @returns the index where the light was in the light list\n     */\n    public removeLight(toRemove: Light): number {\n        const index = this.lights.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from meshes\n            for (const mesh of this.meshes) {\n                mesh._removeLightSource(toRemove, false);\n            }\n            // Remove from the scene if mesh found\n            this.lights.splice(index, 1);\n            this.sortLightsByPriority();\n            if (!toRemove.parent) {\n                toRemove._removeFromSceneRootNodes();\n            }\n        }\n        this.onLightRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Remove a camera for the list of scene's cameras\n     * @param toRemove defines the camera to remove\n     * @returns the index where the camera was in the camera list\n     */\n    public removeCamera(toRemove: Camera): number {\n        const index = this.cameras.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from the scene if mesh found\n            this.cameras.splice(index, 1);\n            if (!toRemove.parent) {\n                toRemove._removeFromSceneRootNodes();\n            }\n        }\n        // Remove from activeCameras\n        if (this.activeCameras) {\n            const index2 = this.activeCameras.indexOf(toRemove);\n            if (index2 !== -1) {\n                // Remove from the scene if mesh found\n                this.activeCameras.splice(index2, 1);\n            }\n        }\n        // Reset the activeCamera\n        if (this.activeCamera === toRemove) {\n            if (this.cameras.length > 0) {\n                this.activeCamera = this.cameras[0];\n            }\n            else {\n                this.activeCamera = null;\n            }\n        }\n        this.onCameraRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Remove a particle system for the list of scene's particle systems\n     * @param toRemove defines the particle system to remove\n     * @returns the index where the particle system was in the particle system list\n     */\n    public removeParticleSystem(toRemove: IParticleSystem): number {\n        const index = this.particleSystems.indexOf(toRemove);\n        if (index !== -1) {\n            this.particleSystems.splice(index, 1);\n            // Clean active container\n            this._executeActiveContainerCleanup(this._activeParticleSystems);\n        }\n        return index;\n    }\n    /**\n     * Remove a animation for the list of scene's animations\n     * @param toRemove defines the animation to remove\n     * @returns the index where the animation was in the animation list\n     */\n    public removeAnimation(toRemove: Animation): number {\n        const index = this.animations.indexOf(toRemove);\n        if (index !== -1) {\n            this.animations.splice(index, 1);\n        }\n        return index;\n    }\n    /**\n     * Will stop the animation of the given target\n     * @param target - the target\n     * @param animationName - the name of the animation to stop (all animations will be stopped if both this and targetMask are empty)\n     * @param targetMask - a function that determines if the animation should be stopped based on its target (all animations will be stopped if both this and animationName are empty)\n     */\n    public stopAnimation(target: any, animationName?: string, targetMask?: (target: any) => boolean): void {\n        // Do nothing as code will be provided by animation component\n    }\n    /**\n     * Removes the given animation group from this scene.\n     * @param toRemove The animation group to remove\n     * @returns The index of the removed animation group\n     */\n    public removeAnimationGroup(toRemove: AnimationGroup): number {\n        const index = this.animationGroups.indexOf(toRemove);\n        if (index !== -1) {\n            this.animationGroups.splice(index, 1);\n        }\n        return index;\n    }\n    /**\n     * Removes the given multi-material from this scene.\n     * @param toRemove The multi-material to remove\n     * @returns The index of the removed multi-material\n     */\n    public removeMultiMaterial(toRemove: MultiMaterial): number {\n        const index = this.multiMaterials.indexOf(toRemove);\n        if (index !== -1) {\n            this.multiMaterials.splice(index, 1);\n        }\n        this.onMultiMaterialRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Removes the given material from this scene.\n     * @param toRemove The material to remove\n     * @returns The index of the removed material\n     */\n    public removeMaterial(toRemove: Material): number {\n        const index = toRemove._indexInSceneMaterialArray;\n        if (index !== -1 && index < this.materials.length) {\n            if (index !== this.materials.length - 1) {\n                const lastMaterial = this.materials[this.materials.length - 1];\n                this.materials[index] = lastMaterial;\n                lastMaterial._indexInSceneMaterialArray = index;\n            }\n            toRemove._indexInSceneMaterialArray = -1;\n            this.materials.pop();\n        }\n        this.onMaterialRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Removes the given action manager from this scene.\n     * @deprecated\n     * @param toRemove The action manager to remove\n     * @returns The index of the removed action manager\n     */\n    public removeActionManager(toRemove: AbstractActionManager): number {\n        const index = this.actionManagers.indexOf(toRemove);\n        if (index !== -1) {\n            this.actionManagers.splice(index, 1);\n        }\n        return index;\n    }\n    /**\n     * Removes the given texture from this scene.\n     * @param toRemove The texture to remove\n     * @returns The index of the removed texture\n     */\n    public removeTexture(toRemove: BaseTexture): number {\n        const index = this.textures.indexOf(toRemove);\n        if (index !== -1) {\n            this.textures.splice(index, 1);\n        }\n        this.onTextureRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Adds the given light to this scene\n     * @param newLight The light to add\n     */\n    public addLight(newLight: Light): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.lights.push(newLight);\n        this.sortLightsByPriority();\n        if (!newLight.parent) {\n            newLight._addToSceneRootNodes();\n        }\n        // Add light to all meshes (To support if the light is removed and then re-added)\n        for (const mesh of this.meshes) {\n            if (mesh.lightSources.indexOf(newLight) === -1) {\n                mesh.lightSources.push(newLight);\n                mesh._resyncLightSources();\n            }\n        }\n        this.onNewLightAddedObservable.notifyObservers(newLight);\n    }\n    /**\n     * Sorts the list list based on light priorities\n     */\n    public sortLightsByPriority(): void {\n        if (this.requireLightSorting) {\n            this.lights.sort(LightConstants.CompareLightsPriority);\n        }\n    }\n    /**\n     * Adds the given camera to this scene\n     * @param newCamera The camera to add\n     */\n    public addCamera(newCamera: Camera): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.cameras.push(newCamera);\n        this.onNewCameraAddedObservable.notifyObservers(newCamera);\n        if (!newCamera.parent) {\n            newCamera._addToSceneRootNodes();\n        }\n    }\n    /**\n     * Adds the given skeleton to this scene\n     * @param newSkeleton The skeleton to add\n     */\n    public addSkeleton(newSkeleton: Skeleton): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.skeletons.push(newSkeleton);\n        this.onNewSkeletonAddedObservable.notifyObservers(newSkeleton);\n    }\n    /**\n     * Adds the given particle system to this scene\n     * @param newParticleSystem The particle system to add\n     */\n    public addParticleSystem(newParticleSystem: IParticleSystem): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.particleSystems.push(newParticleSystem);\n    }\n    /**\n     * Adds the given animation to this scene\n     * @param newAnimation The animation to add\n     */\n    public addAnimation(newAnimation: Animation): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.animations.push(newAnimation);\n    }\n    /**\n     * Adds the given animation group to this scene.\n     * @param newAnimationGroup The animation group to add\n     */\n    public addAnimationGroup(newAnimationGroup: AnimationGroup): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.animationGroups.push(newAnimationGroup);\n    }\n    /**\n     * Adds the given multi-material to this scene\n     * @param newMultiMaterial The multi-material to add\n     */\n    public addMultiMaterial(newMultiMaterial: MultiMaterial): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.multiMaterials.push(newMultiMaterial);\n        this.onNewMultiMaterialAddedObservable.notifyObservers(newMultiMaterial);\n    }\n    /**\n     * Adds the given material to this scene\n     * @param newMaterial The material to add\n     */\n    public addMaterial(newMaterial: Material): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        if (newMaterial.getScene() === this && newMaterial._indexInSceneMaterialArray !== -1) {\n            // Already there??\n            return;\n        }\n        newMaterial._indexInSceneMaterialArray = this.materials.length;\n        this.materials.push(newMaterial);\n        this.onNewMaterialAddedObservable.notifyObservers(newMaterial);\n    }\n    /**\n     * Adds the given morph target to this scene\n     * @param newMorphTargetManager The morph target to add\n     */\n    public addMorphTargetManager(newMorphTargetManager: MorphTargetManager): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.morphTargetManagers.push(newMorphTargetManager);\n    }\n    /**\n     * Adds the given geometry to this scene\n     * @param newGeometry The geometry to add\n     */\n    public addGeometry(newGeometry: Geometry): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        if (this._geometriesByUniqueId) {\n            this._geometriesByUniqueId[newGeometry.uniqueId] = this.geometries.length;\n        }\n        this.geometries.push(newGeometry);\n    }\n    /**\n     * Adds the given action manager to this scene\n     * @deprecated\n     * @param newActionManager The action manager to add\n     */\n    public addActionManager(newActionManager: AbstractActionManager): void {\n        this.actionManagers.push(newActionManager);\n    }\n    /**\n     * Adds the given texture to this scene.\n     * @param newTexture The texture to add\n     */\n    public addTexture(newTexture: BaseTexture): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.textures.push(newTexture);\n        this.onNewTextureAddedObservable.notifyObservers(newTexture);\n    }\n    /**\n     * Switch active camera\n     * @param newCamera defines the new active camera\n     * @param attachControl defines if attachControl must be called for the new active camera (default: true)\n     */\n    public switchActiveCamera(newCamera: Camera, attachControl = true): void {\n        const canvas = this._engine.getInputElement();\n        if (!canvas) {\n            return;\n        }\n        if (this.activeCamera) {\n            this.activeCamera.detachControl();\n        }\n        this.activeCamera = newCamera;\n        if (attachControl) {\n            newCamera.attachControl();\n        }\n    }\n    /**\n     * sets the active camera of the scene using its Id\n     * @param id defines the camera's Id\n     * @returns the new active camera or null if none found.\n     */\n    public setActiveCameraById(id: string): Nullable<Camera> {\n        const camera = this.getCameraById(id);\n        if (camera) {\n            this.activeCamera = camera;\n            return camera;\n        }\n        return null;\n    }\n    /**\n     * sets the active camera of the scene using its name\n     * @param name defines the camera's name\n     * @returns the new active camera or null if none found.\n     */\n    public setActiveCameraByName(name: string): Nullable<Camera> {\n        const camera = this.getCameraByName(name);\n        if (camera) {\n            this.activeCamera = camera;\n            return camera;\n        }\n        return null;\n    }\n    /**\n     * get an animation group using its name\n     * @param name defines the material's name\n     * @returns the animation group or null if none found.\n     */\n    public getAnimationGroupByName(name: string): Nullable<AnimationGroup> {\n        for (let index = 0; index < this.animationGroups.length; index++) {\n            if (this.animationGroups[index].name === name) {\n                return this.animationGroups[index];\n            }\n        }\n        return null;\n    }\n    private _getMaterial(allowMultiMaterials: boolean, predicate: (m: Material) => boolean): Nullable<Material> {\n        for (let index = 0; index < this.materials.length; index++) {\n            const material = this.materials[index];\n            if (predicate(material)) {\n                return material;\n            }\n        }\n        if (allowMultiMaterials) {\n            for (let index = 0; index < this.multiMaterials.length; index++) {\n                const material = this.multiMaterials[index];\n                if (predicate(material)) {\n                    return material;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Get a material using its unique id\n     * @param uniqueId defines the material's unique id\n     * @param allowMultiMaterials determines whether multimaterials should be considered\n     * @returns the material or null if none found.\n     */\n    public getMaterialByUniqueID(uniqueId: number, allowMultiMaterials: boolean = false): Nullable<Material> {\n        return this._getMaterial(allowMultiMaterials, (m) => m.uniqueId === uniqueId);\n    }\n    /**\n     * get a material using its id\n     * @param id defines the material's Id\n     * @param allowMultiMaterials determines whether multimaterials should be considered\n     * @returns the material or null if none found.\n     */\n    public getMaterialById(id: string, allowMultiMaterials: boolean = false): Nullable<Material> {\n        return this._getMaterial(allowMultiMaterials, (m) => m.id === id);\n    }\n    /**\n     * Gets a material using its name\n     * @param name defines the material's name\n     * @param allowMultiMaterials determines whether multimaterials should be considered\n     * @returns the material or null if none found.\n     */\n    public getMaterialByName(name: string, allowMultiMaterials: boolean = false): Nullable<Material> {\n        return this._getMaterial(allowMultiMaterials, (m) => m.name === name);\n    }\n    /**\n     * Gets a last added material using a given id\n     * @param id defines the material's id\n     * @param allowMultiMaterials determines whether multimaterials should be considered\n     * @returns the last material with the given id or null if none found.\n     */\n    public getLastMaterialById(id: string, allowMultiMaterials: boolean = false): Nullable<Material> {\n        for (let index = this.materials.length - 1; index >= 0; index--) {\n            if (this.materials[index].id === id) {\n                return this.materials[index];\n            }\n        }\n        if (allowMultiMaterials) {\n            for (let index = this.multiMaterials.length - 1; index >= 0; index--) {\n                if (this.multiMaterials[index].id === id) {\n                    return this.multiMaterials[index];\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Get a texture using its unique id\n     * @param uniqueId defines the texture's unique id\n     * @returns the texture or null if none found.\n     */\n    public getTextureByUniqueId(uniqueId: number): Nullable<BaseTexture> {\n        for (let index = 0; index < this.textures.length; index++) {\n            if (this.textures[index].uniqueId === uniqueId) {\n                return this.textures[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a texture using its name\n     * @param name defines the texture's name\n     * @returns the texture or null if none found.\n     */\n    public getTextureByName(name: string): Nullable<BaseTexture> {\n        for (let index = 0; index < this.textures.length; index++) {\n            if (this.textures[index].name === name) {\n                return this.textures[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a camera using its Id\n     * @param id defines the Id to look for\n     * @returns the camera or null if not found\n     */\n    public getCameraById(id: string): Nullable<Camera> {\n        for (let index = 0; index < this.cameras.length; index++) {\n            if (this.cameras[index].id === id) {\n                return this.cameras[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a camera using its unique Id\n     * @param uniqueId defines the unique Id to look for\n     * @returns the camera or null if not found\n     */\n    public getCameraByUniqueId(uniqueId: number): Nullable<Camera> {\n        for (let index = 0; index < this.cameras.length; index++) {\n            if (this.cameras[index].uniqueId === uniqueId) {\n                return this.cameras[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a camera using its name\n     * @param name defines the camera's name\n     * @returns the camera or null if none found.\n     */\n    public getCameraByName(name: string): Nullable<Camera> {\n        for (let index = 0; index < this.cameras.length; index++) {\n            if (this.cameras[index].name === name) {\n                return this.cameras[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a bone using its Id\n     * @param id defines the bone's Id\n     * @returns the bone or null if not found\n     */\n    public getBoneById(id: string): Nullable<Bone> {\n        for (let skeletonIndex = 0; skeletonIndex < this.skeletons.length; skeletonIndex++) {\n            const skeleton = this.skeletons[skeletonIndex];\n            for (let boneIndex = 0; boneIndex < skeleton.bones.length; boneIndex++) {\n                if (skeleton.bones[boneIndex].id === id) {\n                    return skeleton.bones[boneIndex];\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a bone using its id\n     * @param name defines the bone's name\n     * @returns the bone or null if not found\n     */\n    public getBoneByName(name: string): Nullable<Bone> {\n        for (let skeletonIndex = 0; skeletonIndex < this.skeletons.length; skeletonIndex++) {\n            const skeleton = this.skeletons[skeletonIndex];\n            for (let boneIndex = 0; boneIndex < skeleton.bones.length; boneIndex++) {\n                if (skeleton.bones[boneIndex].name === name) {\n                    return skeleton.bones[boneIndex];\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a light node using its name\n     * @param name defines the the light's name\n     * @returns the light or null if none found.\n     */\n    public getLightByName(name: string): Nullable<Light> {\n        for (let index = 0; index < this.lights.length; index++) {\n            if (this.lights[index].name === name) {\n                return this.lights[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a light node using its Id\n     * @param id defines the light's Id\n     * @returns the light or null if none found.\n     */\n    public getLightById(id: string): Nullable<Light> {\n        for (let index = 0; index < this.lights.length; index++) {\n            if (this.lights[index].id === id) {\n                return this.lights[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a light node using its scene-generated unique Id\n     * @param uniqueId defines the light's unique Id\n     * @returns the light or null if none found.\n     */\n    public getLightByUniqueId(uniqueId: number): Nullable<Light> {\n        for (let index = 0; index < this.lights.length; index++) {\n            if (this.lights[index].uniqueId === uniqueId) {\n                return this.lights[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a particle system by Id\n     * @param id defines the particle system Id\n     * @returns the corresponding system or null if none found\n     */\n    public getParticleSystemById(id: string): Nullable<IParticleSystem> {\n        for (let index = 0; index < this.particleSystems.length; index++) {\n            if (this.particleSystems[index].id === id) {\n                return this.particleSystems[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a geometry using its Id\n     * @param id defines the geometry's Id\n     * @returns the geometry or null if none found.\n     */\n    public getGeometryById(id: string): Nullable<Geometry> {\n        for (let index = 0; index < this.geometries.length; index++) {\n            if (this.geometries[index].id === id) {\n                return this.geometries[index];\n            }\n        }\n        return null;\n    }\n    private _getGeometryByUniqueId(uniqueId: number): Nullable<Geometry> {\n        if (this._geometriesByUniqueId) {\n            const index = this._geometriesByUniqueId[uniqueId];\n            if (index !== undefined) {\n                return this.geometries[index];\n            }\n        }\n        else {\n            for (let index = 0; index < this.geometries.length; index++) {\n                if (this.geometries[index].uniqueId === uniqueId) {\n                    return this.geometries[index];\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Add a new geometry to this scene\n     * @param geometry defines the geometry to be added to the scene.\n     * @param force defines if the geometry must be pushed even if a geometry with this id already exists\n     * @returns a boolean defining if the geometry was added or not\n     */\n    public pushGeometry(geometry: Geometry, force?: boolean): boolean {\n        if (!force && this._getGeometryByUniqueId(geometry.uniqueId)) {\n            return false;\n        }\n        this.addGeometry(geometry);\n        this.onNewGeometryAddedObservable.notifyObservers(geometry);\n        return true;\n    }\n    /**\n     * Removes an existing geometry\n     * @param geometry defines the geometry to be removed from the scene\n     * @returns a boolean defining if the geometry was removed or not\n     */\n    public removeGeometry(geometry: Geometry): boolean {\n        let index;\n        if (this._geometriesByUniqueId) {\n            index = this._geometriesByUniqueId[geometry.uniqueId];\n            if (index === undefined) {\n                return false;\n            }\n        }\n        else {\n            index = this.geometries.indexOf(geometry);\n            if (index < 0) {\n                return false;\n            }\n        }\n        if (index !== this.geometries.length - 1) {\n            const lastGeometry = this.geometries[this.geometries.length - 1];\n            if (lastGeometry) {\n                this.geometries[index] = lastGeometry;\n                if (this._geometriesByUniqueId) {\n                    this._geometriesByUniqueId[lastGeometry.uniqueId] = index;\n                }\n            }\n        }\n        if (this._geometriesByUniqueId) {\n            this._geometriesByUniqueId[geometry.uniqueId] = undefined;\n        }\n        this.geometries.pop();\n        this.onGeometryRemovedObservable.notifyObservers(geometry);\n        return true;\n    }\n    /**\n     * Gets the list of geometries attached to the scene\n     * @returns an array of Geometry\n     */\n    public getGeometries(): Geometry[] {\n        return this.geometries;\n    }\n    /**\n     * Gets the first added mesh found of a given Id\n     * @param id defines the Id to search for\n     * @returns the mesh found or null if not found at all\n     */\n    public getMeshById(id: string): Nullable<AbstractMesh> {\n        for (let index = 0; index < this.meshes.length; index++) {\n            if (this.meshes[index].id === id) {\n                return this.meshes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a list of meshes using their Id\n     * @param id defines the Id to search for\n     * @returns a list of meshes\n     */\n    public getMeshesById(id: string): Array<AbstractMesh> {\n        return this.meshes.filter(function (m) {\n            return m.id === id;\n        });\n    }\n    /**\n     * Gets the first added transform node found of a given Id\n     * @param id defines the Id to search for\n     * @returns the found transform node or null if not found at all.\n     */\n    public getTransformNodeById(id: string): Nullable<TransformNode> {\n        for (let index = 0; index < this.transformNodes.length; index++) {\n            if (this.transformNodes[index].id === id) {\n                return this.transformNodes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a transform node with its auto-generated unique Id\n     * @param uniqueId defines the unique Id to search for\n     * @returns the found transform node or null if not found at all.\n     */\n    public getTransformNodeByUniqueId(uniqueId: number): Nullable<TransformNode> {\n        for (let index = 0; index < this.transformNodes.length; index++) {\n            if (this.transformNodes[index].uniqueId === uniqueId) {\n                return this.transformNodes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a list of transform nodes using their Id\n     * @param id defines the Id to search for\n     * @returns a list of transform nodes\n     */\n    public getTransformNodesById(id: string): Array<TransformNode> {\n        return this.transformNodes.filter(function (m) {\n            return m.id === id;\n        });\n    }\n    /**\n     * Gets a mesh with its auto-generated unique Id\n     * @param uniqueId defines the unique Id to search for\n     * @returns the found mesh or null if not found at all.\n     */\n    public getMeshByUniqueId(uniqueId: number): Nullable<AbstractMesh> {\n        for (let index = 0; index < this.meshes.length; index++) {\n            if (this.meshes[index].uniqueId === uniqueId) {\n                return this.meshes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a the last added mesh using a given Id\n     * @param id defines the Id to search for\n     * @returns the found mesh or null if not found at all.\n     */\n    public getLastMeshById(id: string): Nullable<AbstractMesh> {\n        for (let index = this.meshes.length - 1; index >= 0; index--) {\n            if (this.meshes[index].id === id) {\n                return this.meshes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a the last added node (Mesh, Camera, Light) using a given Id\n     * @param id defines the Id to search for\n     * @returns the found node or null if not found at all\n     */\n    public getLastEntryById(id: string): Nullable<Node> {\n        let index: number;\n        for (index = this.meshes.length - 1; index >= 0; index--) {\n            if (this.meshes[index].id === id) {\n                return this.meshes[index];\n            }\n        }\n        for (index = this.transformNodes.length - 1; index >= 0; index--) {\n            if (this.transformNodes[index].id === id) {\n                return this.transformNodes[index];\n            }\n        }\n        for (index = this.cameras.length - 1; index >= 0; index--) {\n            if (this.cameras[index].id === id) {\n                return this.cameras[index];\n            }\n        }\n        for (index = this.lights.length - 1; index >= 0; index--) {\n            if (this.lights[index].id === id) {\n                return this.lights[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a node (Mesh, Camera, Light) using a given Id\n     * @param id defines the Id to search for\n     * @returns the found node or null if not found at all\n     */\n    public getNodeById(id: string): Nullable<Node> {\n        const mesh = this.getMeshById(id);\n        if (mesh) {\n            return mesh;\n        }\n        const transformNode = this.getTransformNodeById(id);\n        if (transformNode) {\n            return transformNode;\n        }\n        const light = this.getLightById(id);\n        if (light) {\n            return light;\n        }\n        const camera = this.getCameraById(id);\n        if (camera) {\n            return camera;\n        }\n        const bone = this.getBoneById(id);\n        if (bone) {\n            return bone;\n        }\n        return null;\n    }\n    /**\n     * Gets a node (Mesh, Camera, Light) using a given name\n     * @param name defines the name to search for\n     * @returns the found node or null if not found at all.\n     */\n    public getNodeByName(name: string): Nullable<Node> {\n        const mesh = this.getMeshByName(name);\n        if (mesh) {\n            return mesh;\n        }\n        const transformNode = this.getTransformNodeByName(name);\n        if (transformNode) {\n            return transformNode;\n        }\n        const light = this.getLightByName(name);\n        if (light) {\n            return light;\n        }\n        const camera = this.getCameraByName(name);\n        if (camera) {\n            return camera;\n        }\n        const bone = this.getBoneByName(name);\n        if (bone) {\n            return bone;\n        }\n        return null;\n    }\n    /**\n     * Gets a mesh using a given name\n     * @param name defines the name to search for\n     * @returns the found mesh or null if not found at all.\n     */\n    public getMeshByName(name: string): Nullable<AbstractMesh> {\n        for (let index = 0; index < this.meshes.length; index++) {\n            if (this.meshes[index].name === name) {\n                return this.meshes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a transform node using a given name\n     * @param name defines the name to search for\n     * @returns the found transform node or null if not found at all.\n     */\n    public getTransformNodeByName(name: string): Nullable<TransformNode> {\n        for (let index = 0; index < this.transformNodes.length; index++) {\n            if (this.transformNodes[index].name === name) {\n                return this.transformNodes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a skeleton using a given Id (if many are found, this function will pick the last one)\n     * @param id defines the Id to search for\n     * @returns the found skeleton or null if not found at all.\n     */\n    public getLastSkeletonById(id: string): Nullable<Skeleton> {\n        for (let index = this.skeletons.length - 1; index >= 0; index--) {\n            if (this.skeletons[index].id === id) {\n                return this.skeletons[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a skeleton using a given auto generated unique id\n     * @param  uniqueId defines the unique id to search for\n     * @returns the found skeleton or null if not found at all.\n     */\n    public getSkeletonByUniqueId(uniqueId: number): Nullable<Skeleton> {\n        for (let index = 0; index < this.skeletons.length; index++) {\n            if (this.skeletons[index].uniqueId === uniqueId) {\n                return this.skeletons[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a skeleton using a given id (if many are found, this function will pick the first one)\n     * @param id defines the id to search for\n     * @returns the found skeleton or null if not found at all.\n     */\n    public getSkeletonById(id: string): Nullable<Skeleton> {\n        for (let index = 0; index < this.skeletons.length; index++) {\n            if (this.skeletons[index].id === id) {\n                return this.skeletons[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a skeleton using a given name\n     * @param name defines the name to search for\n     * @returns the found skeleton or null if not found at all.\n     */\n    public getSkeletonByName(name: string): Nullable<Skeleton> {\n        for (let index = 0; index < this.skeletons.length; index++) {\n            if (this.skeletons[index].name === name) {\n                return this.skeletons[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a morph target manager  using a given id (if many are found, this function will pick the last one)\n     * @param id defines the id to search for\n     * @returns the found morph target manager or null if not found at all.\n     */\n    public getMorphTargetManagerById(id: number): Nullable<MorphTargetManager> {\n        for (let index = 0; index < this.morphTargetManagers.length; index++) {\n            if (this.morphTargetManagers[index].uniqueId === id) {\n                return this.morphTargetManagers[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a morph target using a given id (if many are found, this function will pick the first one)\n     * @param id defines the id to search for\n     * @returns the found morph target or null if not found at all.\n     */\n    public getMorphTargetById(id: string): Nullable<MorphTarget> {\n        for (let managerIndex = 0; managerIndex < this.morphTargetManagers.length; ++managerIndex) {\n            const morphTargetManager = this.morphTargetManagers[managerIndex];\n            for (let index = 0; index < morphTargetManager.numTargets; ++index) {\n                const target = morphTargetManager.getTarget(index);\n                if (target.id === id) {\n                    return target;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a morph target using a given name (if many are found, this function will pick the first one)\n     * @param name defines the name to search for\n     * @returns the found morph target or null if not found at all.\n     */\n    public getMorphTargetByName(name: string): Nullable<MorphTarget> {\n        for (let managerIndex = 0; managerIndex < this.morphTargetManagers.length; ++managerIndex) {\n            const morphTargetManager = this.morphTargetManagers[managerIndex];\n            for (let index = 0; index < morphTargetManager.numTargets; ++index) {\n                const target = morphTargetManager.getTarget(index);\n                if (target.name === name) {\n                    return target;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a post process using a given name (if many are found, this function will pick the first one)\n     * @param name defines the name to search for\n     * @returns the found post process or null if not found at all.\n     */\n    public getPostProcessByName(name: string): Nullable<PostProcess> {\n        for (let postProcessIndex = 0; postProcessIndex < this.postProcesses.length; ++postProcessIndex) {\n            const postProcess = this.postProcesses[postProcessIndex];\n            if (postProcess.name === name) {\n                return postProcess;\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a boolean indicating if the given mesh is active\n     * @param mesh defines the mesh to look for\n     * @returns true if the mesh is in the active list\n     */\n    public isActiveMesh(mesh: AbstractMesh): boolean {\n        return this._activeMeshes.indexOf(mesh) !== -1;\n    }\n    /**\n     * Return a unique id as a string which can serve as an identifier for the scene\n     */\n    public get uid(): string {\n        if (!this._uid) {\n            this._uid = Tools.RandomId();\n        }\n        return this._uid;\n    }\n    /**\n     * Add an externally attached data from its key.\n     * This method call will fail and return false, if such key already exists.\n     * If you don't care and just want to get the data no matter what, use the more convenient getOrAddExternalDataWithFactory() method.\n     * @param key the unique key that identifies the data\n     * @param data the data object to associate to the key for this Engine instance\n     * @returns true if no such key were already present and the data was added successfully, false otherwise\n     */\n    public addExternalData<T extends Object>(key: string, data: T): boolean {\n        if (!this._externalData) {\n            this._externalData = new StringDictionary<Object>();\n        }\n        return this._externalData.add(key, data);\n    }\n    /**\n     * Get an externally attached data from its key\n     * @param key the unique key that identifies the data\n     * @returns the associated data, if present (can be null), or undefined if not present\n     */\n    public getExternalData<T>(key: string): Nullable<T> {\n        if (!this._externalData) {\n            return null;\n        }\n        return <T>this._externalData.get(key);\n    }\n    /**\n     * Get an externally attached data from its key, create it using a factory if it's not already present\n     * @param key the unique key that identifies the data\n     * @param factory the factory that will be called to create the instance if and only if it doesn't exists\n     * @returns the associated data, can be null if the factory returned null.\n     */\n    public getOrAddExternalDataWithFactory<T extends Object>(key: string, factory: (k: string) => T): T {\n        if (!this._externalData) {\n            this._externalData = new StringDictionary<Object>();\n        }\n        return <T>this._externalData.getOrAddWithFactory(key, factory);\n    }\n    /**\n     * Remove an externally attached data from the Engine instance\n     * @param key the unique key that identifies the data\n     * @returns true if the data was successfully removed, false if it doesn't exist\n     */\n    public removeExternalData(key: string): boolean {\n        return this._externalData.remove(key);\n    }\n    private _evaluateSubMesh(subMesh: SubMesh, mesh: AbstractMesh, initialMesh: AbstractMesh, forcePush: boolean): void {\n        if (forcePush || subMesh.isInFrustum(this._frustumPlanes)) {\n            for (const step of this._evaluateSubMeshStage) {\n                step.action(mesh, subMesh);\n            }\n            const material = subMesh.getMaterial();\n            if (material !== null && material !== undefined) {\n                // Render targets\n                if (material.hasRenderTargetTextures && material.getRenderTargetTextures != null) {\n                    if (this._processedMaterials.indexOf(material) === -1) {\n                        this._processedMaterials.push(material);\n                        this._materialsRenderTargets.concatWithNoDuplicate(material.getRenderTargetTextures!());\n                    }\n                }\n                // Dispatch\n                this._renderingManager.dispatch(subMesh, mesh, material);\n            }\n        }\n    }\n    /**\n     * Clear the processed materials smart array preventing retention point in material dispose.\n     */\n    public freeProcessedMaterials(): void {\n        this._processedMaterials.dispose();\n    }\n    private _preventFreeActiveMeshesAndRenderingGroups = false;\n    /** Gets or sets a boolean blocking all the calls to freeActiveMeshes and freeRenderingGroups\n     * It can be used in order to prevent going through methods freeRenderingGroups and freeActiveMeshes several times to improve performance\n     * when disposing several meshes in a row or a hierarchy of meshes.\n     * When used, it is the responsibility of the user to blockfreeActiveMeshesAndRenderingGroups back to false.\n     */\n    public get blockfreeActiveMeshesAndRenderingGroups(): boolean {\n        return this._preventFreeActiveMeshesAndRenderingGroups;\n    }\n    public set blockfreeActiveMeshesAndRenderingGroups(value: boolean) {\n        if (this._preventFreeActiveMeshesAndRenderingGroups === value) {\n            return;\n        }\n        if (value) {\n            this.freeActiveMeshes();\n            this.freeRenderingGroups();\n        }\n        this._preventFreeActiveMeshesAndRenderingGroups = value;\n    }\n    /**\n     * Clear the active meshes smart array preventing retention point in mesh dispose.\n     */\n    public freeActiveMeshes(): void {\n        if (this.blockfreeActiveMeshesAndRenderingGroups) {\n            return;\n        }\n        this._activeMeshes.dispose();\n        if (this.activeCamera && this.activeCamera._activeMeshes) {\n            this.activeCamera._activeMeshes.dispose();\n        }\n        if (this.activeCameras) {\n            for (let i = 0; i < this.activeCameras.length; i++) {\n                const activeCamera = this.activeCameras[i];\n                if (activeCamera && activeCamera._activeMeshes) {\n                    activeCamera._activeMeshes.dispose();\n                }\n            }\n        }\n    }\n    /**\n     * Clear the info related to rendering groups preventing retention points during dispose.\n     */\n    public freeRenderingGroups(): void {\n        if (this.blockfreeActiveMeshesAndRenderingGroups) {\n            return;\n        }\n        if (this._renderingManager) {\n            this._renderingManager.freeRenderingGroups();\n        }\n        if (this.textures) {\n            for (let i = 0; i < this.textures.length; i++) {\n                const texture = this.textures[i];\n                if (texture && (<RenderTargetTexture>texture).renderList) {\n                    (<RenderTargetTexture>texture).freeRenderingGroups();\n                }\n            }\n        }\n    }\n    /** @internal */\n    public _isInIntermediateRendering(): boolean {\n        return this._intermediateRendering;\n    }\n    /**\n     * Lambda returning the list of potentially active meshes.\n     */\n    public getActiveMeshCandidates: () => ISmartArrayLike<AbstractMesh>;\n    /**\n     * Lambda returning the list of potentially active sub meshes.\n     */\n    public getActiveSubMeshCandidates: (mesh: AbstractMesh) => ISmartArrayLike<SubMesh>;\n    /**\n     * Lambda returning the list of potentially intersecting sub meshes.\n     */\n    public getIntersectingSubMeshCandidates: (mesh: AbstractMesh, localRay: Ray) => ISmartArrayLike<SubMesh>;\n    /**\n     * Lambda returning the list of potentially colliding sub meshes.\n     */\n    public getCollidingSubMeshCandidates: (mesh: AbstractMesh, collider: Collider) => ISmartArrayLike<SubMesh>;\n    /** @internal */\n    public _activeMeshesFrozen = false;\n    /** @internal */\n    public _activeMeshesFrozenButKeepClipping = false;\n    private _skipEvaluateActiveMeshesCompletely = false;\n    /**\n     * Use this function to stop evaluating active meshes. The current list will be keep alive between frames\n     * @param skipEvaluateActiveMeshes defines an optional boolean indicating that the evaluate active meshes step must be completely skipped\n     * @param onSuccess optional success callback\n     * @param onError optional error callback\n     * @param freezeMeshes defines if meshes should be frozen (true by default)\n     * @param keepFrustumCulling defines if you want to keep running the frustum clipping (false by default)\n     * @returns the current scene\n     */\n    public freezeActiveMeshes(skipEvaluateActiveMeshes = false, onSuccess?: () => void, onError?: (message: string) => void, freezeMeshes = true, keepFrustumCulling = false): Scene {\n        this.executeWhenReady(() => {\n            if (!this.activeCamera) {\n                onError && onError(\"No active camera found\");\n                return;\n            }\n            if (!this._frustumPlanes) {\n                this.updateTransformMatrix();\n            }\n            this._evaluateActiveMeshes();\n            this._activeMeshesFrozen = true;\n            this._activeMeshesFrozenButKeepClipping = keepFrustumCulling;\n            this._skipEvaluateActiveMeshesCompletely = skipEvaluateActiveMeshes;\n            if (freezeMeshes) {\n                for (let index = 0; index < this._activeMeshes.length; index++) {\n                    this._activeMeshes.data[index]._freeze();\n                }\n            }\n            onSuccess && onSuccess();\n        });\n        return this;\n    }\n    /**\n     * Use this function to restart evaluating active meshes on every frame\n     * @returns the current scene\n     */\n    public unfreezeActiveMeshes(): Scene {\n        for (let index = 0; index < this.meshes.length; index++) {\n            const mesh = this.meshes[index];\n            if (mesh._internalAbstractMeshDataInfo) {\n                mesh._internalAbstractMeshDataInfo._isActive = false;\n            }\n        }\n        for (let index = 0; index < this._activeMeshes.length; index++) {\n            this._activeMeshes.data[index]._unFreeze();\n        }\n        this._activeMeshesFrozen = false;\n        return this;\n    }\n    private _executeActiveContainerCleanup(container: SmartArray<any>) {\n        const isInFastMode = this._engine.snapshotRendering && this._engine.snapshotRenderingMode === Constants.SNAPSHOTRENDERING_FAST;\n        if (!isInFastMode && this._activeMeshesFrozen && this._activeMeshes.length) {\n            return; // Do not execute in frozen mode\n        }\n        // We need to ensure we are not in the rendering loop\n        this.onBeforeRenderObservable.addOnce(() => container.dispose());\n    }\n    private _evaluateActiveMeshes(): void {\n        if (this._engine.snapshotRendering && this._engine.snapshotRenderingMode === Constants.SNAPSHOTRENDERING_FAST) {\n            if (this._activeMeshes.length > 0) {\n                this.activeCamera?._activeMeshes.reset();\n                this._activeMeshes.reset();\n                this._renderingManager.reset();\n                this._processedMaterials.reset();\n                this._activeParticleSystems.reset();\n                this._activeSkeletons.reset();\n                this._softwareSkinnedMeshes.reset();\n            }\n            return;\n        }\n        if (this._activeMeshesFrozen && this._activeMeshes.length) {\n            if (!this._skipEvaluateActiveMeshesCompletely) {\n                const len = this._activeMeshes.length;\n                for (let i = 0; i < len; i++) {\n                    const mesh = this._activeMeshes.data[i];\n                    mesh.computeWorldMatrix();\n                }\n            }\n            if (this._activeParticleSystems) {\n                const psLength = this._activeParticleSystems.length;\n                for (let i = 0; i < psLength; i++) {\n                    this._activeParticleSystems.data[i].animate();\n                }\n            }\n            this._renderingManager.resetSprites();\n            return;\n        }\n        if (!this.activeCamera) {\n            return;\n        }\n        this.onBeforeActiveMeshesEvaluationObservable.notifyObservers(this);\n        this.activeCamera._activeMeshes.reset();\n        this._activeMeshes.reset();\n        this._renderingManager.reset();\n        this._processedMaterials.reset();\n        this._activeParticleSystems.reset();\n        this._activeSkeletons.reset();\n        this._softwareSkinnedMeshes.reset();\n        this._materialsRenderTargets.reset();\n        for (const step of this._beforeEvaluateActiveMeshStage) {\n            step.action();\n        }\n        // Determine mesh candidates\n        const meshes = this.getActiveMeshCandidates();\n        // Check each mesh\n        const len = meshes.length;\n        for (let i = 0; i < len; i++) {\n            const mesh = meshes.data[i];\n            mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate = false;\n            if (mesh.isBlocked) {\n                continue;\n            }\n            this._totalVertices.addCount(mesh.getTotalVertices(), false);\n            if (!mesh.isReady() || !mesh.isEnabled() || mesh.scaling.hasAZeroComponent) {\n                continue;\n            }\n            mesh.computeWorldMatrix();\n            // Intersections\n            if (mesh.actionManager && mesh.actionManager.hasSpecificTriggers2(Constants.ACTION_OnIntersectionEnterTrigger, Constants.ACTION_OnIntersectionExitTrigger)) {\n                this._meshesForIntersections.pushNoDuplicate(mesh);\n            }\n            // Switch to current LOD\n            let meshToRender = this.customLODSelector ? this.customLODSelector(mesh, this.activeCamera) : mesh.getLOD(this.activeCamera);\n            mesh._internalAbstractMeshDataInfo._currentLOD = meshToRender;\n            mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate = true;\n            if (meshToRender === undefined || meshToRender === null) {\n                continue;\n            }\n            // Compute world matrix if LOD is billboard\n            if (meshToRender !== mesh && meshToRender.billboardMode !== 0) {\n                meshToRender.computeWorldMatrix();\n            }\n            mesh._preActivate();\n            if (mesh.isVisible &&\n                mesh.visibility > 0 &&\n                (mesh.layerMask & this.activeCamera.layerMask) !== 0 &&\n                (this._skipFrustumClipping || mesh.alwaysSelectAsActiveMesh || mesh.isInFrustum(this._frustumPlanes))) {\n                this._activeMeshes.push(mesh);\n                this.activeCamera._activeMeshes.push(mesh);\n                if (meshToRender !== mesh) {\n                    meshToRender._activate(this._renderId, false);\n                }\n                for (const step of this._preActiveMeshStage) {\n                    step.action(mesh);\n                }\n                if (mesh._activate(this._renderId, false)) {\n                    if (!mesh.isAnInstance) {\n                        meshToRender._internalAbstractMeshDataInfo._onlyForInstances = false;\n                    }\n                    else {\n                        if (mesh._internalAbstractMeshDataInfo._actAsRegularMesh) {\n                            meshToRender = mesh;\n                        }\n                    }\n                    meshToRender._internalAbstractMeshDataInfo._isActive = true;\n                    this._activeMesh(mesh, meshToRender);\n                }\n                mesh._postActivate();\n            }\n        }\n        // Particle systems\n        if (this.particlesEnabled) {\n            this.onBeforeParticlesRenderingObservable.notifyObservers(this);\n            for (let particleIndex = 0; particleIndex < this.particleSystems.length; particleIndex++) {\n                const particleSystem = this.particleSystems[particleIndex];\n                if (!particleSystem.isStarted() || !particleSystem.emitter) {\n                    continue;\n                }\n                const emitter = <any>particleSystem.emitter;\n                if (!emitter.position || emitter.isEnabled()) {\n                    this._activeParticleSystems.push(particleSystem);\n                    particleSystem.animate();\n                    this._renderingManager.dispatchParticles(particleSystem);\n                }\n            }\n            this.onAfterParticlesRenderingObservable.notifyObservers(this);\n        }\n    }\n    private _activeMesh(sourceMesh: AbstractMesh, mesh: AbstractMesh): void {\n        if (this._skeletonsEnabled && mesh.skeleton !== null && mesh.skeleton !== undefined) {\n            if (this._activeSkeletons.pushNoDuplicate(mesh.skeleton)) {\n                mesh.skeleton.prepare();\n                this._activeBones.addCount(mesh.skeleton.bones.length, false);\n            }\n            if (!mesh.computeBonesUsingShaders) {\n                this._softwareSkinnedMeshes.pushNoDuplicate(<Mesh>mesh);\n            }\n        }\n        let forcePush = sourceMesh.hasInstances || sourceMesh.isAnInstance || this.dispatchAllSubMeshesOfActiveMeshes || this._skipFrustumClipping || mesh.alwaysSelectAsActiveMesh;\n        if (mesh && mesh.subMeshes && mesh.subMeshes.length > 0) {\n            const subMeshes = this.getActiveSubMeshCandidates(mesh);\n            const len = subMeshes.length;\n            forcePush = forcePush || len === 1;\n            for (let i = 0; i < len; i++) {\n                const subMesh = subMeshes.data[i];\n                this._evaluateSubMesh(subMesh, mesh, sourceMesh, forcePush);\n            }\n        }\n    }\n    /**\n     * Update the transform matrix to update from the current active camera\n     * @param force defines a boolean used to force the update even if cache is up to date\n     */\n    public updateTransformMatrix(force?: boolean): void {\n        if (!this.activeCamera) {\n            return;\n        }\n        if (this.activeCamera._renderingMultiview) {\n            const leftCamera = this.activeCamera._rigCameras[0];\n            const rightCamera = this.activeCamera._rigCameras[1];\n            this.setTransformMatrix(leftCamera.getViewMatrix(), leftCamera.getProjectionMatrix(force), rightCamera.getViewMatrix(), rightCamera.getProjectionMatrix(force));\n        }\n        else {\n            this.setTransformMatrix(this.activeCamera.getViewMatrix(), this.activeCamera.getProjectionMatrix(force));\n        }\n    }\n    private _bindFrameBuffer(camera: Nullable<Camera>, clear = true) {\n        if (camera && camera._multiviewTexture) {\n            camera._multiviewTexture._bindFrameBuffer();\n        }\n        else if (camera && camera.outputRenderTarget) {\n            camera.outputRenderTarget._bindFrameBuffer();\n        }\n        else {\n            if (!this._engine._currentFrameBufferIsDefaultFrameBuffer()) {\n                this._engine.restoreDefaultFramebuffer();\n            }\n        }\n        if (clear) {\n            this._clearFrameBuffer(camera);\n        }\n    }\n    private _clearFrameBuffer(camera: Nullable<Camera>) {\n        // we assume the framebuffer currently bound is the right one\n        if (camera && camera._multiviewTexture) {\n            // no clearing?\n        }\n        else if (camera && camera.outputRenderTarget && !camera._renderingMultiview) {\n            const rtt = camera.outputRenderTarget;\n            if (rtt.onClearObservable.hasObservers()) {\n                rtt.onClearObservable.notifyObservers(this._engine);\n            }\n            else if (!rtt.skipInitialClear) {\n                if (this.autoClear) {\n                    this._engine.clear(rtt.clearColor || this.clearColor, !rtt._cleared, true, true);\n                }\n                rtt._cleared = true;\n            }\n        }\n        else {\n            if (!this._defaultFrameBufferCleared) {\n                this._defaultFrameBufferCleared = true;\n                this._clear();\n            }\n            else {\n                this._engine.clear(null, false, true, true);\n            }\n        }\n    }\n    /** @internal */\n    public _allowPostProcessClearColor = true;\n    /**\n     * @internal\n     */\n    public _renderForCamera(camera: Camera, rigParent?: Camera, bindFrameBuffer = true): void {\n        if (camera && camera._skipRendering) {\n            return;\n        }\n        const engine = this._engine;\n        // Use _activeCamera instead of activeCamera to avoid onActiveCameraChanged\n        this._activeCamera = camera;\n        if (!this.activeCamera) {\n            throw new Error(\"Active camera not set\");\n        }\n        // Viewport\n        engine.setViewport(this.activeCamera.viewport);\n        // Camera\n        this.resetCachedMaterial();\n        this._renderId++;\n        if (!this.prePass && bindFrameBuffer) {\n            let skipInitialClear = true;\n            if (camera._renderingMultiview && camera.outputRenderTarget) {\n                skipInitialClear = camera.outputRenderTarget.skipInitialClear;\n                if (this.autoClear) {\n                    camera.outputRenderTarget.skipInitialClear = false;\n                }\n            }\n            this._bindFrameBuffer(this._activeCamera);\n            if (camera._renderingMultiview && camera.outputRenderTarget) {\n                camera.outputRenderTarget.skipInitialClear = skipInitialClear;\n            }\n        }\n        this.updateTransformMatrix();\n        this.onBeforeCameraRenderObservable.notifyObservers(this.activeCamera);\n        // Meshes\n        this._evaluateActiveMeshes();\n        // Software skinning\n        for (let softwareSkinnedMeshIndex = 0; softwareSkinnedMeshIndex < this._softwareSkinnedMeshes.length; softwareSkinnedMeshIndex++) {\n            const mesh = this._softwareSkinnedMeshes.data[softwareSkinnedMeshIndex];\n            mesh.applySkeleton(<Skeleton>mesh.skeleton);\n        }\n        // Render targets\n        this.onBeforeRenderTargetsRenderObservable.notifyObservers(this);\n        this._renderTargets.concatWithNoDuplicate(this._materialsRenderTargets);\n        if (camera.customRenderTargets && camera.customRenderTargets.length > 0) {\n            this._renderTargets.concatWithNoDuplicate(camera.customRenderTargets);\n        }\n        if (rigParent && rigParent.customRenderTargets && rigParent.customRenderTargets.length > 0) {\n            this._renderTargets.concatWithNoDuplicate(rigParent.customRenderTargets);\n        }\n        if (this.environmentTexture && this.environmentTexture.isRenderTarget) {\n            this._renderTargets.pushNoDuplicate(this.environmentTexture as RenderTargetTexture);\n        }\n        // Collects render targets from external components.\n        for (const step of this._gatherActiveCameraRenderTargetsStage) {\n            step.action(this._renderTargets);\n        }\n        let needRebind = false;\n        if (this.renderTargetsEnabled) {\n            this._intermediateRendering = true;\n            if (this._renderTargets.length > 0) {\n                Tools.StartPerformanceCounter(\"Render targets\", this._renderTargets.length > 0);\n                for (let renderIndex = 0; renderIndex < this._renderTargets.length; renderIndex++) {\n                    const renderTarget = this._renderTargets.data[renderIndex];\n                    if (renderTarget._shouldRender()) {\n                        this._renderId++;\n                        const hasSpecialRenderTargetCamera = renderTarget.activeCamera && renderTarget.activeCamera !== this.activeCamera;\n                        renderTarget.render(<boolean>hasSpecialRenderTargetCamera, this.dumpNextRenderTargets);\n                        needRebind = true;\n                    }\n                }\n                Tools.EndPerformanceCounter(\"Render targets\", this._renderTargets.length > 0);\n                this._renderId++;\n            }\n            for (const step of this._cameraDrawRenderTargetStage) {\n                needRebind = step.action(this.activeCamera) || needRebind;\n            }\n            this._intermediateRendering = false;\n        }\n        this._engine.currentRenderPassId = camera.outputRenderTarget?.renderPassId ?? camera.renderPassId ?? Constants.RENDERPASS_MAIN;\n        // Restore framebuffer after rendering to targets\n        if (needRebind && !this.prePass) {\n            this._bindFrameBuffer(this._activeCamera, false);\n        }\n        this.onAfterRenderTargetsRenderObservable.notifyObservers(this);\n        // Prepare Frame\n        if (this.postProcessManager && !camera._multiviewTexture && !this.prePass) {\n            this.postProcessManager._prepareFrame();\n        }\n        // Before Camera Draw\n        for (const step of this._beforeCameraDrawStage) {\n            step.action(this.activeCamera);\n        }\n        // Render\n        this.onBeforeDrawPhaseObservable.notifyObservers(this);\n        if (engine.snapshotRendering && engine.snapshotRenderingMode === Constants.SNAPSHOTRENDERING_FAST) {\n            this.finalizeSceneUbo();\n        }\n        this._renderingManager.render(null, null, true, true);\n        this.onAfterDrawPhaseObservable.notifyObservers(this);\n        // After Camera Draw\n        for (const step of this._afterCameraDrawStage) {\n            step.action(this.activeCamera);\n        }\n        // Finalize frame\n        if (this.postProcessManager && !camera._multiviewTexture) {\n            // if the camera has an output render target, render the post process to the render target\n            const texture = camera.outputRenderTarget ? camera.outputRenderTarget.renderTarget! : undefined;\n            this.postProcessManager._finalizeFrame(camera.isIntermediate, texture);\n        }\n        // After post process\n        for (const step of this._afterCameraPostProcessStage) {\n            step.action(this.activeCamera);\n        }\n        // Reset some special arrays\n        this._renderTargets.reset();\n        this.onAfterCameraRenderObservable.notifyObservers(this.activeCamera);\n    }\n    private _processSubCameras(camera: Camera, bindFrameBuffer = true): void {\n        if (camera.cameraRigMode === Constants.RIG_MODE_NONE || camera._renderingMultiview) {\n            if (camera._renderingMultiview && !this._multiviewSceneUbo) {\n                this._createMultiviewUbo();\n            }\n            this._renderForCamera(camera, undefined, bindFrameBuffer);\n            this.onAfterRenderCameraObservable.notifyObservers(camera);\n            return;\n        }\n        if (camera._useMultiviewToSingleView) {\n            this._renderMultiviewToSingleView(camera);\n        }\n        else {\n            // rig cameras\n            this.onBeforeCameraRenderObservable.notifyObservers(camera);\n            for (let index = 0; index < camera._rigCameras.length; index++) {\n                this._renderForCamera(camera._rigCameras[index], camera);\n            }\n        }\n        // Use _activeCamera instead of activeCamera to avoid onActiveCameraChanged\n        this._activeCamera = camera;\n        this.updateTransformMatrix();\n        this.onAfterRenderCameraObservable.notifyObservers(camera);\n    }\n    private _checkIntersections(): void {\n        for (let index = 0; index < this._meshesForIntersections.length; index++) {\n            const sourceMesh = this._meshesForIntersections.data[index];\n            if (!sourceMesh.actionManager) {\n                continue;\n            }\n            for (let actionIndex = 0; sourceMesh.actionManager && actionIndex < sourceMesh.actionManager.actions.length; actionIndex++) {\n                const action: IAction = sourceMesh.actionManager.actions[actionIndex];\n                if (action.trigger === Constants.ACTION_OnIntersectionEnterTrigger || action.trigger === Constants.ACTION_OnIntersectionExitTrigger) {\n                    const parameters = action.getTriggerParameter();\n                    const otherMesh = parameters.mesh ? parameters.mesh : parameters;\n                    const areIntersecting = otherMesh.intersectsMesh(sourceMesh, parameters.usePreciseIntersection);\n                    const currentIntersectionInProgress = sourceMesh._intersectionsInProgress.indexOf(otherMesh);\n                    if (areIntersecting && currentIntersectionInProgress === -1) {\n                        if (action.trigger === Constants.ACTION_OnIntersectionEnterTrigger) {\n                            action._executeCurrent(ActionEvent.CreateNew(sourceMesh, undefined, otherMesh));\n                            sourceMesh._intersectionsInProgress.push(otherMesh);\n                        }\n                        else if (action.trigger === Constants.ACTION_OnIntersectionExitTrigger) {\n                            sourceMesh._intersectionsInProgress.push(otherMesh);\n                        }\n                    }\n                    else if (!areIntersecting && currentIntersectionInProgress > -1) {\n                        //They intersected, and now they don't.\n                        //is this trigger an exit trigger? execute an event.\n                        if (action.trigger === Constants.ACTION_OnIntersectionExitTrigger) {\n                            action._executeCurrent(ActionEvent.CreateNew(sourceMesh, undefined, otherMesh));\n                        }\n                        //if this is an exit trigger, or no exit trigger exists, remove the id from the intersection in progress array.\n                        if (!sourceMesh.actionManager.hasSpecificTrigger(Constants.ACTION_OnIntersectionExitTrigger, (parameter) => {\n                            const parameterMesh = parameter.mesh ? parameter.mesh : parameter;\n                            return otherMesh === parameterMesh;\n                        }) ||\n                            action.trigger === Constants.ACTION_OnIntersectionExitTrigger) {\n                            sourceMesh._intersectionsInProgress.splice(currentIntersectionInProgress, 1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    public _advancePhysicsEngineStep(step: number) {\n        // Do nothing. Code will be replaced if physics engine component is referenced\n    }\n    /**\n     * User updatable function that will return a deterministic frame time when engine is in deterministic lock step mode\n     */\n    public getDeterministicFrameTime: () => number = () => {\n        return this._engine.getTimeStep();\n    };\n    /** @internal */\n    public _animate(): void {\n        // Nothing to do as long as Animatable have not been imported.\n    }\n    /** Execute all animations (for a frame) */\n    public animate() {\n        if (this._engine.isDeterministicLockStep()) {\n            let deltaTime = Math.max(Scene.MinDeltaTime, Math.min(this._engine.getDeltaTime(), Scene.MaxDeltaTime)) + this._timeAccumulator;\n            const defaultFrameTime = this._engine.getTimeStep();\n            const defaultFPS = 1000.0 / defaultFrameTime / 1000.0;\n            let stepsTaken = 0;\n            const maxSubSteps = this._engine.getLockstepMaxSteps();\n            let internalSteps = Math.floor(deltaTime / defaultFrameTime);\n            internalSteps = Math.min(internalSteps, maxSubSteps);\n            while (deltaTime > 0 && stepsTaken < internalSteps) {\n                this.onBeforeStepObservable.notifyObservers(this);\n                // Animations\n                this._animationRatio = defaultFrameTime * defaultFPS;\n                this._animate();\n                this.onAfterAnimationsObservable.notifyObservers(this);\n                // Physics\n                if (this.physicsEnabled) {\n                    this._advancePhysicsEngineStep(defaultFrameTime);\n                }\n                this.onAfterStepObservable.notifyObservers(this);\n                this._currentStepId++;\n                stepsTaken++;\n                deltaTime -= defaultFrameTime;\n            }\n            this._timeAccumulator = deltaTime < 0 ? 0 : deltaTime;\n        }\n        else {\n            // Animations\n            const deltaTime = this.useConstantAnimationDeltaTime ? 16 : Math.max(Scene.MinDeltaTime, Math.min(this._engine.getDeltaTime(), Scene.MaxDeltaTime));\n            this._animationRatio = deltaTime * (60.0 / 1000.0);\n            this._animate();\n            this.onAfterAnimationsObservable.notifyObservers(this);\n            // Physics\n            if (this.physicsEnabled) {\n                this._advancePhysicsEngineStep(deltaTime);\n            }\n        }\n    }\n    private _clear(): void {\n        if (this.autoClearDepthAndStencil || this.autoClear) {\n            this._engine.clear(this.clearColor, this.autoClear || this.forceWireframe || this.forcePointsCloud, this.autoClearDepthAndStencil, this.autoClearDepthAndStencil);\n        }\n    }\n    private _checkCameraRenderTarget(camera: Nullable<Camera>) {\n        if (camera?.outputRenderTarget && !camera?.isRigCamera) {\n            camera.outputRenderTarget._cleared = false;\n        }\n        if (camera?.rigCameras?.length) {\n            for (let i = 0; i < camera.rigCameras.length; ++i) {\n                const rtt = camera.rigCameras[i].outputRenderTarget;\n                if (rtt) {\n                    rtt._cleared = false;\n                }\n            }\n        }\n    }\n    /**\n     * Resets the draw wrappers cache of all meshes\n     * @param passId If provided, releases only the draw wrapper corresponding to this render pass id\n     */\n    public resetDrawCache(passId?: number): void {\n        if (!this.meshes) {\n            return;\n        }\n        for (const mesh of this.meshes) {\n            mesh.resetDrawCache(passId);\n        }\n    }\n    /**\n     * Render the scene\n     * @param updateCameras defines a boolean indicating if cameras must update according to their inputs (true by default)\n     * @param ignoreAnimations defines a boolean indicating if animations should not be executed (false by default)\n     */\n    public render(updateCameras = true, ignoreAnimations = false): void {\n        if (this.isDisposed) {\n            return;\n        }\n        if (this.onReadyObservable.hasObservers() && this._executeWhenReadyTimeoutId === null) {\n            this._checkIsReady();\n        }\n        this._frameId++;\n        this._defaultFrameBufferCleared = false;\n        this._checkCameraRenderTarget(this.activeCamera);\n        if (this.activeCameras?.length) {\n            this.activeCameras.forEach(this._checkCameraRenderTarget);\n        }\n        // Register components that have been associated lately to the scene.\n        this._registerTransientComponents();\n        this._activeParticles.fetchNewFrame();\n        this._totalVertices.fetchNewFrame();\n        this._activeIndices.fetchNewFrame();\n        this._activeBones.fetchNewFrame();\n        this._meshesForIntersections.reset();\n        this.resetCachedMaterial();\n        this.onBeforeAnimationsObservable.notifyObservers(this);\n        // Actions\n        if (this.actionManager) {\n            this.actionManager.processTrigger(Constants.ACTION_OnEveryFrameTrigger);\n        }\n        // Animations\n        if (!ignoreAnimations) {\n            this.animate();\n        }\n        // Before camera update steps\n        for (const step of this._beforeCameraUpdateStage) {\n            step.action();\n        }\n        // Update Cameras\n        if (updateCameras) {\n            if (this.activeCameras && this.activeCameras.length > 0) {\n                for (let cameraIndex = 0; cameraIndex < this.activeCameras.length; cameraIndex++) {\n                    const camera = this.activeCameras[cameraIndex];\n                    camera.update();\n                    if (camera.cameraRigMode !== Constants.RIG_MODE_NONE) {\n                        // rig cameras\n                        for (let index = 0; index < camera._rigCameras.length; index++) {\n                            camera._rigCameras[index].update();\n                        }\n                    }\n                }\n            }\n            else if (this.activeCamera) {\n                this.activeCamera.update();\n                if (this.activeCamera.cameraRigMode !== Constants.RIG_MODE_NONE) {\n                    // rig cameras\n                    for (let index = 0; index < this.activeCamera._rigCameras.length; index++) {\n                        this.activeCamera._rigCameras[index].update();\n                    }\n                }\n            }\n        }\n        // Before render\n        this.onBeforeRenderObservable.notifyObservers(this);\n        const engine = this.getEngine();\n        // Customs render targets\n        this.onBeforeRenderTargetsRenderObservable.notifyObservers(this);\n        const currentActiveCamera = this.activeCameras?.length ? this.activeCameras[0] : this.activeCamera;\n        if (this.renderTargetsEnabled) {\n            Tools.StartPerformanceCounter(\"Custom render targets\", this.customRenderTargets.length > 0);\n            this._intermediateRendering = true;\n            for (let customIndex = 0; customIndex < this.customRenderTargets.length; customIndex++) {\n                const renderTarget = this.customRenderTargets[customIndex];\n                if (renderTarget._shouldRender()) {\n                    this._renderId++;\n                    this.activeCamera = renderTarget.activeCamera || this.activeCamera;\n                    if (!this.activeCamera) {\n                        throw new Error(\"Active camera not set\");\n                    }\n                    // Viewport\n                    engine.setViewport(this.activeCamera.viewport);\n                    // Camera\n                    this.updateTransformMatrix();\n                    renderTarget.render(currentActiveCamera !== this.activeCamera, this.dumpNextRenderTargets);\n                }\n            }\n            Tools.EndPerformanceCounter(\"Custom render targets\", this.customRenderTargets.length > 0);\n            this._intermediateRendering = false;\n            this._renderId++;\n        }\n        this._engine.currentRenderPassId = currentActiveCamera?.renderPassId ?? Constants.RENDERPASS_MAIN;\n        // Restore back buffer\n        this.activeCamera = currentActiveCamera;\n        if (this._activeCamera && this._activeCamera.cameraRigMode !== Constants.RIG_MODE_CUSTOM && !this.prePass) {\n            this._bindFrameBuffer(this._activeCamera, false);\n        }\n        this.onAfterRenderTargetsRenderObservable.notifyObservers(this);\n        for (const step of this._beforeClearStage) {\n            step.action();\n        }\n        // Clear\n        this._clearFrameBuffer(this.activeCamera);\n        // Collects render targets from external components.\n        for (const step of this._gatherRenderTargetsStage) {\n            step.action(this._renderTargets);\n        }\n        // Multi-cameras?\n        if (this.activeCameras && this.activeCameras.length > 0) {\n            for (let cameraIndex = 0; cameraIndex < this.activeCameras.length; cameraIndex++) {\n                this._processSubCameras(this.activeCameras[cameraIndex], cameraIndex > 0);\n            }\n        }\n        else {\n            if (!this.activeCamera) {\n                throw new Error(\"No camera defined\");\n            }\n            this._processSubCameras(this.activeCamera, !!this.activeCamera.outputRenderTarget);\n        }\n        // Intersection checks\n        this._checkIntersections();\n        // Executes the after render stage actions.\n        for (const step of this._afterRenderStage) {\n            step.action();\n        }\n        // After render\n        if (this.afterRender) {\n            this.afterRender();\n        }\n        this.onAfterRenderObservable.notifyObservers(this);\n        // Cleaning\n        if (this._toBeDisposed.length) {\n            for (let index = 0; index < this._toBeDisposed.length; index++) {\n                const data = this._toBeDisposed[index];\n                if (data) {\n                    data.dispose();\n                }\n            }\n            this._toBeDisposed.length = 0;\n        }\n        if (this.dumpNextRenderTargets) {\n            this.dumpNextRenderTargets = false;\n        }\n        this._activeBones.addCount(0, true);\n        this._activeIndices.addCount(0, true);\n        this._activeParticles.addCount(0, true);\n        this._engine.restoreDefaultFramebuffer();\n    }\n    /**\n     * Freeze all materials\n     * A frozen material will not be updatable but should be faster to render\n     * Note: multimaterials will not be frozen, but their submaterials will\n     */\n    public freezeMaterials(): void {\n        for (let i = 0; i < this.materials.length; i++) {\n            this.materials[i].freeze();\n        }\n    }\n    /**\n     * Unfreeze all materials\n     * A frozen material will not be updatable but should be faster to render\n     */\n    public unfreezeMaterials(): void {\n        for (let i = 0; i < this.materials.length; i++) {\n            this.materials[i].unfreeze();\n        }\n    }\n    /**\n     * Releases all held resources\n     */\n    public dispose(): void {\n        if (this.isDisposed) {\n            return;\n        }\n        this.beforeRender = null;\n        this.afterRender = null;\n        this.metadata = null;\n        this.skeletons.length = 0;\n        this.morphTargetManagers.length = 0;\n        this._transientComponents.length = 0;\n        this._isReadyForMeshStage.clear();\n        this._beforeEvaluateActiveMeshStage.clear();\n        this._evaluateSubMeshStage.clear();\n        this._preActiveMeshStage.clear();\n        this._cameraDrawRenderTargetStage.clear();\n        this._beforeCameraDrawStage.clear();\n        this._beforeRenderTargetDrawStage.clear();\n        this._beforeRenderingGroupDrawStage.clear();\n        this._beforeRenderingMeshStage.clear();\n        this._afterRenderingMeshStage.clear();\n        this._afterRenderingGroupDrawStage.clear();\n        this._afterCameraDrawStage.clear();\n        this._afterRenderTargetDrawStage.clear();\n        this._afterRenderStage.clear();\n        this._beforeCameraUpdateStage.clear();\n        this._beforeClearStage.clear();\n        this._gatherRenderTargetsStage.clear();\n        this._gatherActiveCameraRenderTargetsStage.clear();\n        this._pointerMoveStage.clear();\n        this._pointerDownStage.clear();\n        this._pointerUpStage.clear();\n        this.importedMeshesFiles = new Array<string>();\n        if (this.stopAllAnimations) {\n            this.stopAllAnimations();\n        }\n        this.resetCachedMaterial();\n        // Smart arrays\n        if (this.activeCamera) {\n            this.activeCamera._activeMeshes.dispose();\n            this.activeCamera = null;\n        }\n        this.activeCameras = null;\n        this._activeMeshes.dispose();\n        this._renderingManager.dispose();\n        this._processedMaterials.dispose();\n        this._activeParticleSystems.dispose();\n        this._activeSkeletons.dispose();\n        this._softwareSkinnedMeshes.dispose();\n        this._renderTargets.dispose();\n        this._materialsRenderTargets.dispose();\n        this._registeredForLateAnimationBindings.dispose();\n        this._meshesForIntersections.dispose();\n        this._toBeDisposed.length = 0;\n        // Abort active requests\n        const activeRequests = this._activeRequests.slice();\n        for (const request of activeRequests) {\n            request.abort();\n        }\n        this._activeRequests.length = 0;\n        // Events\n        try {\n            this.onDisposeObservable.notifyObservers(this);\n        }\n        catch (e) {\n            console.error(\"An error occurred while calling onDisposeObservable!\", e);\n        }\n        this.onDisposeObservable.clear();\n        this.onBeforeRenderObservable.clear();\n        this.onAfterRenderObservable.clear();\n        this.onBeforeRenderTargetsRenderObservable.clear();\n        this.onAfterRenderTargetsRenderObservable.clear();\n        this.onAfterStepObservable.clear();\n        this.onBeforeStepObservable.clear();\n        this.onBeforeActiveMeshesEvaluationObservable.clear();\n        this.onAfterActiveMeshesEvaluationObservable.clear();\n        this.onBeforeParticlesRenderingObservable.clear();\n        this.onAfterParticlesRenderingObservable.clear();\n        this.onBeforeDrawPhaseObservable.clear();\n        this.onAfterDrawPhaseObservable.clear();\n        this.onBeforeAnimationsObservable.clear();\n        this.onAfterAnimationsObservable.clear();\n        this.onDataLoadedObservable.clear();\n        this.onBeforeRenderingGroupObservable.clear();\n        this.onAfterRenderingGroupObservable.clear();\n        this.onMeshImportedObservable.clear();\n        this.onBeforeCameraRenderObservable.clear();\n        this.onAfterCameraRenderObservable.clear();\n        this.onReadyObservable.clear();\n        this.onNewCameraAddedObservable.clear();\n        this.onCameraRemovedObservable.clear();\n        this.onNewLightAddedObservable.clear();\n        this.onLightRemovedObservable.clear();\n        this.onNewGeometryAddedObservable.clear();\n        this.onGeometryRemovedObservable.clear();\n        this.onNewTransformNodeAddedObservable.clear();\n        this.onTransformNodeRemovedObservable.clear();\n        this.onNewMeshAddedObservable.clear();\n        this.onMeshRemovedObservable.clear();\n        this.onNewSkeletonAddedObservable.clear();\n        this.onSkeletonRemovedObservable.clear();\n        this.onNewMaterialAddedObservable.clear();\n        this.onNewMultiMaterialAddedObservable.clear();\n        this.onMaterialRemovedObservable.clear();\n        this.onMultiMaterialRemovedObservable.clear();\n        this.onNewTextureAddedObservable.clear();\n        this.onTextureRemovedObservable.clear();\n        this.onPrePointerObservable.clear();\n        this.onPointerObservable.clear();\n        this.onPreKeyboardObservable.clear();\n        this.onKeyboardObservable.clear();\n        this.onActiveCameraChanged.clear();\n        this.detachControl();\n        // Detach cameras\n        const canvas = this._engine.getInputElement();\n        if (canvas) {\n            for (let index = 0; index < this.cameras.length; index++) {\n                this.cameras[index].detachControl();\n            }\n        }\n        // Release animation groups\n        this._disposeList(this.animationGroups);\n        // Release lights\n        this._disposeList(this.lights);\n        // Release meshes\n        this._disposeList(this.meshes, (item) => item.dispose(true));\n        this._disposeList(this.transformNodes, (item) => item.dispose(true));\n        // Release cameras\n        const cameras = this.cameras;\n        this._disposeList(cameras);\n        // Release materials\n        if (this._defaultMaterial) {\n            this._defaultMaterial.dispose();\n        }\n        this._disposeList(this.multiMaterials);\n        this._disposeList(this.materials);\n        // Release particles\n        this._disposeList(this.particleSystems);\n        // Release postProcesses\n        this._disposeList(this.postProcesses);\n        // Release textures\n        this._disposeList(this.textures);\n        // Release morph targets\n        this._disposeList(this.morphTargetManagers);\n        // Release UBO\n        this._sceneUbo.dispose();\n        if (this._multiviewSceneUbo) {\n            this._multiviewSceneUbo.dispose();\n        }\n        // Post-processes\n        this.postProcessManager.dispose();\n        // Components\n        this._disposeList(this._components);\n        // Remove from engine\n        let index = this._engine.scenes.indexOf(this);\n        if (index > -1) {\n            this._engine.scenes.splice(index, 1);\n        }\n        if (EngineStore._LastCreatedScene === this) {\n            if (this._engine.scenes.length > 0) {\n                EngineStore._LastCreatedScene = this._engine.scenes[this._engine.scenes.length - 1];\n            }\n            else {\n                EngineStore._LastCreatedScene = null;\n            }\n        }\n        index = this._engine._virtualScenes.indexOf(this);\n        if (index > -1) {\n            this._engine._virtualScenes.splice(index, 1);\n        }\n        this._engine.wipeCaches(true);\n        this._isDisposed = true;\n    }\n    private _disposeList<T extends IDisposable>(items: T[], callback?: (item: T) => void): void {\n        const itemsCopy = items.slice(0);\n        callback = callback ?? ((item) => item.dispose());\n        for (const item of itemsCopy) {\n            callback(item);\n        }\n        items.length = 0;\n    }\n    /**\n     * Gets if the scene is already disposed\n     */\n    public get isDisposed(): boolean {\n        return this._isDisposed;\n    }\n    /**\n     * Call this function to reduce memory footprint of the scene.\n     * Vertex buffers will not store CPU data anymore (this will prevent picking, collisions or physics to work correctly)\n     */\n    public clearCachedVertexData(): void {\n        for (let meshIndex = 0; meshIndex < this.meshes.length; meshIndex++) {\n            const mesh = this.meshes[meshIndex];\n            const geometry = (<Mesh>mesh).geometry;\n            if (geometry) {\n                geometry.clearCachedData();\n            }\n        }\n    }\n    /**\n     * This function will remove the local cached buffer data from texture.\n     * It will save memory but will prevent the texture from being rebuilt\n     */\n    public cleanCachedTextureBuffer(): void {\n        for (const baseTexture of this.textures) {\n            const buffer = (<Texture>baseTexture)._buffer;\n            if (buffer) {\n                (<Texture>baseTexture)._buffer = null;\n            }\n        }\n    }\n    /**\n     * Get the world extend vectors with an optional filter\n     *\n     * @param filterPredicate the predicate - which meshes should be included when calculating the world size\n     * @returns {{ min: Vector3; max: Vector3 }} min and max vectors\n     */\n    public getWorldExtends(filterPredicate?: (mesh: AbstractMesh) => boolean): {\n        min: Vector3;\n        max: Vector3;\n    } {\n        const min = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        const max = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n        filterPredicate = filterPredicate || (() => true);\n        this.meshes.filter(filterPredicate).forEach((mesh) => {\n            mesh.computeWorldMatrix(true);\n            if (!mesh.subMeshes || mesh.subMeshes.length === 0 || mesh.infiniteDistance) {\n                return;\n            }\n            const boundingInfo = mesh.getBoundingInfo();\n            const minBox = boundingInfo.boundingBox.minimumWorld;\n            const maxBox = boundingInfo.boundingBox.maximumWorld;\n            Vector3.CheckExtends(minBox, min, max);\n            Vector3.CheckExtends(maxBox, min, max);\n        });\n        return {\n            min: min,\n            max: max\n        };\n    }\n    // Picking\n    /**\n     * Creates a ray that can be used to pick in the scene\n     * @param x defines the x coordinate of the origin (on-screen)\n     * @param y defines the y coordinate of the origin (on-screen)\n     * @param world defines the world matrix to use if you want to pick in object space (instead of world space)\n     * @param camera defines the camera to use for the picking\n     * @param cameraViewSpace defines if picking will be done in view space (false by default)\n     * @returns a Ray\n     */\n    public createPickingRay(x: number, y: number, world: Nullable<Matrix>, camera: Nullable<Camera>, cameraViewSpace = false): Ray {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Creates a ray that can be used to pick in the scene\n     * @param x defines the x coordinate of the origin (on-screen)\n     * @param y defines the y coordinate of the origin (on-screen)\n     * @param world defines the world matrix to use if you want to pick in object space (instead of world space)\n     * @param result defines the ray where to store the picking ray\n     * @param camera defines the camera to use for the picking\n     * @param cameraViewSpace defines if picking will be done in view space (false by default)\n     * @param enableDistantPicking defines if picking should handle large values for mesh position/scaling (false by default)\n     * @returns the current scene\n     */\n    public createPickingRayToRef(x: number, y: number, world: Nullable<Matrix>, result: Ray, camera: Nullable<Camera>, cameraViewSpace = false, enableDistantPicking = false): Scene {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Creates a ray that can be used to pick in the scene\n     * @param x defines the x coordinate of the origin (on-screen)\n     * @param y defines the y coordinate of the origin (on-screen)\n     * @param camera defines the camera to use for the picking\n     * @returns a Ray\n     */\n    public createPickingRayInCameraSpace(x: number, y: number, camera?: Camera): Ray {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Creates a ray that can be used to pick in the scene\n     * @param x defines the x coordinate of the origin (on-screen)\n     * @param y defines the y coordinate of the origin (on-screen)\n     * @param result defines the ray where to store the picking ray\n     * @param camera defines the camera to use for the picking\n     * @returns the current scene\n     */\n    public createPickingRayInCameraSpaceToRef(x: number, y: number, result: Ray, camera?: Camera): Scene {\n        throw _WarnImport(\"Ray\");\n    }\n    /** @internal */\n    public get _pickingAvailable(): boolean {\n        return false;\n    }\n    /** @internal */\n    public _registeredActions: number = 0;\n    /** Launch a ray to try to pick a mesh in the scene\n     * @param x position on screen\n     * @param y position on screen\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\n     * @param camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n     * @returns a PickingInfo\n     */\n    public pick(x: number, y: number, predicate?: (mesh: AbstractMesh) => boolean, fastCheck?: boolean, camera?: Nullable<Camera>, trianglePredicate?: TrianglePickingPredicate): PickingInfo {\n        // Dummy info if picking as not been imported\n        return new PickingInfo();\n    }\n    /** Launch a ray to try to pick a mesh in the scene using only bounding information of the main mesh (not using submeshes)\n     * @param x position on screen\n     * @param y position on screen\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\n     * @param camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\n     * @returns a PickingInfo (Please note that some info will not be set like distance, bv, bu and everything that cannot be capture by only using bounding infos)\n     */\n    public pickWithBoundingInfo(x: number, y: number, predicate?: (mesh: AbstractMesh) => boolean, fastCheck?: boolean, camera?: Nullable<Camera>): Nullable<PickingInfo> {\n        // Dummy info if picking as not been imported\n        return new PickingInfo();\n    }\n    /** Use the given ray to pick a mesh in the scene\n     * @param ray The ray to use to pick meshes\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must have isPickable set to true\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n     * @returns a PickingInfo\n     */\n    public pickWithRay(ray: Ray, predicate?: (mesh: AbstractMesh) => boolean, fastCheck?: boolean, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo> {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Launch a ray to try to pick a mesh in the scene\n     * @param x X position on screen\n     * @param y Y position on screen\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n     * @param camera camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n     * @returns an array of PickingInfo\n     */\n    public multiPick(x: number, y: number, predicate?: (mesh: AbstractMesh) => boolean, camera?: Camera, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo[]> {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Launch a ray to try to pick a mesh in the scene\n     * @param ray Ray to use\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n     * @returns an array of PickingInfo\n     */\n    public multiPickWithRay(ray: Ray, predicate?: (mesh: AbstractMesh) => boolean, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo[]> {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Force the value of meshUnderPointer\n     * @param mesh defines the mesh to use\n     * @param pointerId optional pointer id when using more than one pointer\n     * @param pickResult optional pickingInfo data used to find mesh\n     */\n    public setPointerOverMesh(mesh: Nullable<AbstractMesh>, pointerId?: number, pickResult?: Nullable<PickingInfo>): void {\n        this._inputManager.setPointerOverMesh(mesh, pointerId, pickResult);\n    }\n    /**\n     * Gets the mesh under the pointer\n     * @returns a Mesh or null if no mesh is under the pointer\n     */\n    public getPointerOverMesh(): Nullable<AbstractMesh> {\n        return this._inputManager.getPointerOverMesh();\n    }\n    // Misc.\n    /** @internal */\n    public _rebuildGeometries(): void {\n        for (const geometry of this.geometries) {\n            geometry._rebuild();\n        }\n        for (const mesh of this.meshes) {\n            mesh._rebuild();\n        }\n        if (this.postProcessManager) {\n            this.postProcessManager._rebuild();\n        }\n        for (const component of this._components) {\n            component.rebuild();\n        }\n        for (const system of this.particleSystems) {\n            system.rebuild();\n        }\n        if (this.spriteManagers) {\n            for (const spriteMgr of this.spriteManagers) {\n                spriteMgr.rebuild();\n            }\n        }\n    }\n    /** @internal */\n    public _rebuildTextures(): void {\n        for (const texture of this.textures) {\n            texture._rebuild();\n        }\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\n    }\n    // Tags\n    private _getByTags(list: any[], tagsQuery: string, forEach?: (item: any) => void): any[] {\n        if (tagsQuery === undefined) {\n            // returns the complete list (could be done with Tags.MatchesQuery but no need to have a for-loop here)\n            return list;\n        }\n        const listByTags = [];\n        forEach =\n            forEach ||\n                ((item: any) => {\n                    return;\n                });\n        for (const i in list) {\n            const item = list[i];\n            if (Tags && Tags.MatchesQuery(item, tagsQuery)) {\n                listByTags.push(item);\n                forEach(item);\n            }\n        }\n        return listByTags;\n    }\n    /**\n     * Get a list of meshes by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of Mesh\n     */\n    public getMeshesByTags(tagsQuery: string, forEach?: (mesh: AbstractMesh) => void): Mesh[] {\n        return this._getByTags(this.meshes, tagsQuery, forEach);\n    }\n    /**\n     * Get a list of cameras by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of Camera\n     */\n    public getCamerasByTags(tagsQuery: string, forEach?: (camera: Camera) => void): Camera[] {\n        return this._getByTags(this.cameras, tagsQuery, forEach);\n    }\n    /**\n     * Get a list of lights by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of Light\n     */\n    public getLightsByTags(tagsQuery: string, forEach?: (light: Light) => void): Light[] {\n        return this._getByTags(this.lights, tagsQuery, forEach);\n    }\n    /**\n     * Get a list of materials by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of Material\n     */\n    public getMaterialByTags(tagsQuery: string, forEach?: (material: Material) => void): Material[] {\n        return this._getByTags(this.materials, tagsQuery, forEach).concat(this._getByTags(this.multiMaterials, tagsQuery, forEach));\n    }\n    /**\n     * Get a list of transform nodes by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of TransformNode\n     */\n    public getTransformNodesByTags(tagsQuery: string, forEach?: (transform: TransformNode) => void): TransformNode[] {\n        return this._getByTags(this.transformNodes, tagsQuery, forEach);\n    }\n    /**\n     * Overrides the default sort function applied in the rendering group to prepare the meshes.\n     * This allowed control for front to back rendering or reversly depending of the special needs.\n     *\n     * @param renderingGroupId The rendering group id corresponding to its index\n     * @param opaqueSortCompareFn The opaque queue comparison function use to sort.\n     * @param alphaTestSortCompareFn The alpha test queue comparison function use to sort.\n     * @param transparentSortCompareFn The transparent queue comparison function use to sort.\n     */\n    public setRenderingOrder(renderingGroupId: number, opaqueSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null, alphaTestSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null, transparentSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null): void {\n        this._renderingManager.setRenderingOrder(renderingGroupId, opaqueSortCompareFn, alphaTestSortCompareFn, transparentSortCompareFn);\n    }\n    /**\n     * Specifies whether or not the stencil and depth buffer are cleared between two rendering groups.\n     *\n     * @param renderingGroupId The rendering group id corresponding to its index\n     * @param autoClearDepthStencil Automatically clears depth and stencil between groups if true.\n     * @param depth Automatically clears depth between groups if true and autoClear is true.\n     * @param stencil Automatically clears stencil between groups if true and autoClear is true.\n     */\n    public setRenderingAutoClearDepthStencil(renderingGroupId: number, autoClearDepthStencil: boolean, depth = true, stencil = true): void {\n        this._renderingManager.setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil, depth, stencil);\n    }\n    /**\n     * Gets the current auto clear configuration for one rendering group of the rendering\n     * manager.\n     * @param index the rendering group index to get the information for\n     * @returns The auto clear setup for the requested rendering group\n     */\n    public getAutoClearDepthStencilSetup(index: number): IRenderingManagerAutoClearSetup {\n        return this._renderingManager.getAutoClearDepthStencilSetup(index);\n    }\n    private _blockMaterialDirtyMechanism = false;\n    /** Gets or sets a boolean blocking all the calls to markAllMaterialsAsDirty (ie. the materials won't be updated if they are out of sync) */\n    public get blockMaterialDirtyMechanism(): boolean {\n        return this._blockMaterialDirtyMechanism;\n    }\n    public set blockMaterialDirtyMechanism(value: boolean) {\n        if (this._blockMaterialDirtyMechanism === value) {\n            return;\n        }\n        this._blockMaterialDirtyMechanism = value;\n        if (!value) {\n            // Do a complete update\n            this.markAllMaterialsAsDirty(Constants.MATERIAL_AllDirtyFlag);\n        }\n    }\n    /**\n     * Will flag all materials as dirty to trigger new shader compilation\n     * @param flag defines the flag used to specify which material part must be marked as dirty\n     * @param predicate If not null, it will be used to specify if a material has to be marked as dirty\n     */\n    public markAllMaterialsAsDirty(flag: number, predicate?: (mat: Material) => boolean): void {\n        if (this._blockMaterialDirtyMechanism) {\n            return;\n        }\n        for (const material of this.materials) {\n            if (predicate && !predicate(material)) {\n                continue;\n            }\n            material.markAsDirty(flag);\n        }\n    }\n    /**\n     * @internal\n     */\n    public _loadFile(fileOrUrl: File | string, onSuccess: (data: string | ArrayBuffer, responseURL?: string) => void, onProgress?: (ev: ProgressEvent) => void, useOfflineSupport?: boolean, useArrayBuffer?: boolean, onError?: (request?: WebRequest, exception?: LoadFileError) => void, onOpened?: (request: WebRequest) => void): IFileRequest {\n        const request = LoadFile(fileOrUrl, onSuccess, onProgress, useOfflineSupport ? this.offlineProvider : undefined, useArrayBuffer, onError, onOpened);\n        this._activeRequests.push(request);\n        request.onCompleteObservable.add((request) => {\n            this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\n        });\n        return request;\n    }\n    /**\n     * @internal\n     */\n    public _loadFileAsync(fileOrUrl: File | string, onProgress?: (data: any) => void, useOfflineSupport?: boolean, useArrayBuffer?: boolean, onOpened?: (request: WebRequest) => void): Promise<string | ArrayBuffer> {\n        return new Promise((resolve, reject) => {\n            this._loadFile(fileOrUrl, (data) => {\n                resolve(data);\n            }, onProgress, useOfflineSupport, useArrayBuffer, (request, exception) => {\n                reject(exception);\n            }, onOpened);\n        });\n    }\n    /**\n     * @internal\n     */\n    public _requestFile(url: string, onSuccess: (data: string | ArrayBuffer, request?: WebRequest) => void, onProgress?: (ev: ProgressEvent) => void, useOfflineSupport?: boolean, useArrayBuffer?: boolean, onError?: (error: RequestFileError) => void, onOpened?: (request: WebRequest) => void): IFileRequest {\n        const request = RequestFile(url, onSuccess, onProgress, useOfflineSupport ? this.offlineProvider : undefined, useArrayBuffer, onError, onOpened);\n        this._activeRequests.push(request);\n        request.onCompleteObservable.add((request) => {\n            this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\n        });\n        return request;\n    }\n    /**\n     * @internal\n     */\n    public _requestFileAsync(url: string, onProgress?: (ev: ProgressEvent) => void, useOfflineSupport?: boolean, useArrayBuffer?: boolean, onOpened?: (request: WebRequest) => void): Promise<string | ArrayBuffer> {\n        return new Promise((resolve, reject) => {\n            this._requestFile(url, (data) => {\n                resolve(data);\n            }, onProgress, useOfflineSupport, useArrayBuffer, (error) => {\n                reject(error);\n            }, onOpened);\n        });\n    }\n    /**\n     * @internal\n     */\n    public _readFile(file: File, onSuccess: (data: string | ArrayBuffer) => void, onProgress?: (ev: ProgressEvent) => any, useArrayBuffer?: boolean, onError?: (error: ReadFileError) => void): IFileRequest {\n        const request = ReadFile(file, onSuccess, onProgress, useArrayBuffer, onError);\n        this._activeRequests.push(request);\n        request.onCompleteObservable.add((request) => {\n            this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\n        });\n        return request;\n    }\n    /**\n     * @internal\n     */\n    public _readFileAsync(file: File, onProgress?: (ev: ProgressEvent) => any, useArrayBuffer?: boolean): Promise<string | ArrayBuffer> {\n        return new Promise((resolve, reject) => {\n            this._readFile(file, (data) => {\n                resolve(data);\n            }, onProgress, useArrayBuffer, (error) => {\n                reject(error);\n            });\n        });\n    }\n    /**\n     * Internal perfCollector instance used for sharing between inspector and playground.\n     * Marked as protected to allow sharing between prototype extensions, but disallow access at toplevel.\n     */\n    protected _perfCollector: Nullable<PerformanceViewerCollector> = null;\n    /**\n     * This method gets the performance collector belonging to the scene, which is generally shared with the inspector.\n     * @returns the perf collector belonging to the scene.\n     */\n    public getPerfCollector(): PerformanceViewerCollector {\n        throw _WarnImport(\"performanceViewerSceneExtension\");\n    }\n}\n\n    declare module \"./scene\" {\n    interface Scene {\n        /**\n         * Sets the active camera of the scene using its Id\n         * @param id defines the camera's Id\n         * @returns the new active camera or null if none found.\n         * @deprecated Please use setActiveCameraById instead\n         */\n        setActiveCameraByID(id: string): Nullable<Camera>;\n        /**\n         * Get a material using its id\n         * @param id defines the material's Id\n         * @returns the material or null if none found.\n         * @deprecated Please use getMaterialById instead\n         */\n        getMaterialByID(id: string): Nullable<Material>;\n        /**\n         * Gets a the last added material using a given id\n         * @param id defines the material's Id\n         * @returns the last material with the given id or null if none found.\n         * @deprecated Please use getLastMaterialById instead\n         */\n        getLastMaterialByID(id: string): Nullable<Material>;\n        /**\n         * Get a texture using its unique id\n         * @param uniqueId defines the texture's unique id\n         * @returns the texture or null if none found.\n         * @deprecated Please use getTextureByUniqueId instead\n         */\n        getTextureByUniqueID(uniqueId: number): Nullable<BaseTexture>;\n        /**\n         * Gets a camera using its Id\n         * @param id defines the Id to look for\n         * @returns the camera or null if not found\n         * @deprecated Please use getCameraById instead\n         */\n        getCameraByID(id: string): Nullable<Camera>;\n        /**\n         * Gets a camera using its unique Id\n         * @param uniqueId defines the unique Id to look for\n         * @returns the camera or null if not found\n         * @deprecated Please use getCameraByUniqueId instead\n         */\n        getCameraByUniqueID(uniqueId: number): Nullable<Camera>;\n        /**\n         * Gets a bone using its Id\n         * @param id defines the bone's Id\n         * @returns the bone or null if not found\n         * @deprecated Please use getBoneById instead\n         */\n        getBoneByID(id: string): Nullable<Bone>;\n        /**\n         * Gets a light node using its Id\n         * @param id defines the light's Id\n         * @returns the light or null if none found.\n         * @deprecated Please use getLightById instead\n         */\n        getLightByID(id: string): Nullable<Light>;\n        /**\n         * Gets a light node using its scene-generated unique Id\n         * @param uniqueId defines the light's unique Id\n         * @returns the light or null if none found.\n         * @deprecated Please use getLightByUniqueId instead\n         */\n        getLightByUniqueID(uniqueId: number): Nullable<Light>;\n        /**\n         * Gets a particle system by Id\n         * @param id defines the particle system Id\n         * @returns the corresponding system or null if none found\n         * @deprecated Please use getParticleSystemById instead\n         */\n        getParticleSystemByID(id: string): Nullable<IParticleSystem>;\n        /**\n         * Gets a geometry using its Id\n         * @param id defines the geometry's Id\n         * @returns the geometry or null if none found.\n         * @deprecated Please use getGeometryById instead\n         */\n        getGeometryByID(id: string): Nullable<Geometry>;\n        /**\n         * Gets the first added mesh found of a given Id\n         * @param id defines the Id to search for\n         * @returns the mesh found or null if not found at all\n         * @deprecated Please use getMeshById instead\n         */\n        getMeshByID(id: string): Nullable<AbstractMesh>;\n        /**\n         * Gets a mesh with its auto-generated unique Id\n         * @param uniqueId defines the unique Id to search for\n         * @returns the found mesh or null if not found at all.\n         * @deprecated Please use getMeshByUniqueId instead\n         */\n        getMeshByUniqueID(uniqueId: number): Nullable<AbstractMesh>;\n        /**\n         * Gets a the last added mesh using a given Id\n         * @param id defines the Id to search for\n         * @returns the found mesh or null if not found at all.\n         * @deprecated Please use getLastMeshById instead\n         */\n        getLastMeshByID(id: string): Nullable<AbstractMesh>;\n        /**\n         * Gets a list of meshes using their Id\n         * @param id defines the Id to search for\n         * @returns a list of meshes\n         * @deprecated Please use getMeshesById instead\n         */\n        getMeshesByID(id: string): Array<AbstractMesh>;\n        /**\n         * Gets the first added transform node found of a given Id\n         * @param id defines the Id to search for\n         * @returns the found transform node or null if not found at all.\n         * @deprecated Please use getTransformNodeById instead\n         */\n        getTransformNodeByID(id: string): Nullable<TransformNode>;\n        /**\n         * Gets a transform node with its auto-generated unique Id\n         * @param uniqueId defines the unique Id to search for\n         * @returns the found transform node or null if not found at all.\n         * @deprecated Please use getTransformNodeByUniqueId instead\n         */\n        getTransformNodeByUniqueID(uniqueId: number): Nullable<TransformNode>;\n        /**\n         * Gets a list of transform nodes using their Id\n         * @param id defines the Id to search for\n         * @returns a list of transform nodes\n         * @deprecated Please use getTransformNodesById instead\n         */\n        getTransformNodesByID(id: string): Array<TransformNode>;\n        /**\n         * Gets a node (Mesh, Camera, Light) using a given Id\n         * @param id defines the Id to search for\n         * @returns the found node or null if not found at all\n         * @deprecated Please use getNodeById instead\n         */\n        getNodeByID(id: string): Nullable<Node>;\n        /**\n         * Gets a the last added node (Mesh, Camera, Light) using a given Id\n         * @param id defines the Id to search for\n         * @returns the found node or null if not found at all\n         * @deprecated Please use getLastEntryById instead\n         */\n        getLastEntryByID(id: string): Nullable<Node>;\n        /**\n         * Gets a skeleton using a given Id (if many are found, this function will pick the last one)\n         * @param id defines the Id to search for\n         * @returns the found skeleton or null if not found at all.\n         * @deprecated Please use getLastSkeletonById instead\n         */\n        getLastSkeletonByID(id: string): Nullable<Skeleton>;\n    }\n}\n/**\n * @internal\n */\nScene.prototype.setActiveCameraByID = function (id: string): Nullable<Camera> {\n    return this.setActiveCameraById(id);\n};\nScene.prototype.getLastMaterialByID = function (id: string): Nullable<Material> {\n    return this.getLastMaterialById(id);\n};\nScene.prototype.getMaterialByID = function (id: string): Nullable<Material> {\n    return this.getMaterialById(id);\n};\nScene.prototype.getTextureByUniqueID = function (uniqueId: number): Nullable<BaseTexture> {\n    return this.getTextureByUniqueId(uniqueId);\n};\nScene.prototype.getCameraByID = function (id: string): Nullable<Camera> {\n    return this.getCameraById(id);\n};\nScene.prototype.getCameraByUniqueID = function (uniqueId: number): Nullable<Camera> {\n    return this.getCameraByUniqueId(uniqueId);\n};\nScene.prototype.getBoneByID = function (id: string): Nullable<Bone> {\n    return this.getBoneById(id);\n};\nScene.prototype.getLightByID = function (id: string): Nullable<Light> {\n    return this.getLightById(id);\n};\nScene.prototype.getLightByUniqueID = function (uniqueId: number): Nullable<Light> {\n    return this.getLightByUniqueId(uniqueId);\n};\nScene.prototype.getParticleSystemByID = function (id: string): Nullable<IParticleSystem> {\n    return this.getParticleSystemById(id);\n};\nScene.prototype.getGeometryByID = function (id: string): Nullable<Geometry> {\n    return this.getGeometryById(id);\n};\nScene.prototype.getMeshByID = function (id: string): Nullable<AbstractMesh> {\n    return this.getMeshById(id);\n};\nScene.prototype.getMeshesByID = function (id: string): Array<AbstractMesh> {\n    return this.getMeshesById(id);\n};\nScene.prototype.getTransformNodeByID = function (id: string): Nullable<TransformNode> {\n    return this.getTransformNodeById(id);\n};\nScene.prototype.getTransformNodeByUniqueID = function (uniqueId: number): Nullable<TransformNode> {\n    return this.getTransformNodeByUniqueId(uniqueId);\n};\nScene.prototype.getTransformNodesByID = function (id: string): Array<TransformNode> {\n    return this.getTransformNodesById(id);\n};\nScene.prototype.getMeshByUniqueID = function (uniqueId: number): Nullable<AbstractMesh> {\n    return this.getMeshByUniqueId(uniqueId);\n};\nScene.prototype.getLastMeshByID = function (id: string): Nullable<AbstractMesh> {\n    return this.getLastMeshById(id);\n};\nScene.prototype.getLastEntryByID = function (id: string): Nullable<Node> {\n    return this.getLastEntryById(id);\n};\nScene.prototype.getNodeByID = function (id: string): Nullable<Node> {\n    return this.getNodeById(id);\n};\nScene.prototype.getLastSkeletonByID = function (id: string): Nullable<Skeleton> {\n    return this.getLastSkeletonById(id);\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}