{"ast":null,"code":"import { Vector3, Vector2, TmpVectors } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\n/**\n * Information about the result of picking within a scene\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/interactions/picking_collisions\n */\nexport class PickingInfo {\n  constructor() {\n    /**\n     * If the pick collided with an object\n     */\n    this.hit = false;\n    /**\n     * Distance away where the pick collided\n     */\n    this.distance = 0;\n    /**\n     * The location of pick collision\n     */\n    this.pickedPoint = null;\n    /**\n     * The mesh corresponding the pick collision\n     */\n    this.pickedMesh = null;\n    /** (See getTextureCoordinates) The barycentric U coordinate that is used when calculating the texture coordinates of the collision.*/\n    this.bu = 0;\n    /** (See getTextureCoordinates) The barycentric V coordinate that is used when calculating the texture coordinates of the collision.*/\n    this.bv = 0;\n    /** The index of the face on the mesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\n    this.faceId = -1;\n    /** The index of the face on the subMesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\n    this.subMeshFaceId = -1;\n    /** Id of the submesh that was picked */\n    this.subMeshId = 0;\n    /** If a sprite was picked, this will be the sprite the pick collided with */\n    this.pickedSprite = null;\n    /** If we are picking a mesh with thin instance, this will give you the picked thin instance */\n    this.thinInstanceIndex = -1;\n    /**\n     * The ray that was used to perform the picking.\n     */\n    this.ray = null;\n    /**\n     * If a mesh was used to do the picking (eg. 6dof controller) as a \"near interaction\", this will be populated.\n     */\n    this.originMesh = null;\n    /**\n     * The aim-space transform of the input used for picking, if it is an XR input source.\n     */\n    this.aimTransform = null;\n    /**\n     * The grip-space transform of the input used for picking, if it is an XR input source.\n     * Some XR sources, such as input coming from head mounted displays, do not have this.\n     */\n    this.gripTransform = null;\n  }\n  /**\n   * Gets the normal corresponding to the face the pick collided with\n   * @param useWorldCoordinates If the resulting normal should be relative to the world (default: false)\n   * @param useVerticesNormals If the vertices normals should be used to calculate the normal instead of the normal map (default: true)\n   * @returns The normal corresponding to the face the pick collided with\n   * @remarks Note that the returned normal will always point towards the picking ray.\n   */\n  getNormal(useWorldCoordinates = false, useVerticesNormals = true) {\n    if (!this.pickedMesh || useVerticesNormals && !this.pickedMesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n      return null;\n    }\n    const indices = this.pickedMesh.getIndices();\n    if (!indices) {\n      return null;\n    }\n    let result;\n    if (useVerticesNormals) {\n      const normals = this.pickedMesh.getVerticesData(VertexBuffer.NormalKind);\n      let normal0 = Vector3.FromArray(normals, indices[this.faceId * 3] * 3);\n      let normal1 = Vector3.FromArray(normals, indices[this.faceId * 3 + 1] * 3);\n      let normal2 = Vector3.FromArray(normals, indices[this.faceId * 3 + 2] * 3);\n      normal0 = normal0.scale(this.bu);\n      normal1 = normal1.scale(this.bv);\n      normal2 = normal2.scale(1.0 - this.bu - this.bv);\n      result = new Vector3(normal0.x + normal1.x + normal2.x, normal0.y + normal1.y + normal2.y, normal0.z + normal1.z + normal2.z);\n    } else {\n      const positions = this.pickedMesh.getVerticesData(VertexBuffer.PositionKind);\n      const vertex1 = Vector3.FromArray(positions, indices[this.faceId * 3] * 3);\n      const vertex2 = Vector3.FromArray(positions, indices[this.faceId * 3 + 1] * 3);\n      const vertex3 = Vector3.FromArray(positions, indices[this.faceId * 3 + 2] * 3);\n      const p1p2 = vertex1.subtract(vertex2);\n      const p3p2 = vertex3.subtract(vertex2);\n      result = Vector3.Cross(p1p2, p3p2);\n    }\n    const transformNormalToWorld = (pickedMesh, n) => {\n      let wm = pickedMesh.getWorldMatrix();\n      if (pickedMesh.nonUniformScaling) {\n        TmpVectors.Matrix[0].copyFrom(wm);\n        wm = TmpVectors.Matrix[0];\n        wm.setTranslationFromFloats(0, 0, 0);\n        wm.invert();\n        wm.transposeToRef(TmpVectors.Matrix[1]);\n        wm = TmpVectors.Matrix[1];\n      }\n      Vector3.TransformNormalToRef(n, wm, n);\n    };\n    if (useWorldCoordinates) {\n      transformNormalToWorld(this.pickedMesh, result);\n    }\n    if (this.ray) {\n      const normalForDirectionChecking = TmpVectors.Vector3[0].copyFrom(result);\n      if (!useWorldCoordinates) {\n        // the normal has not been transformed to world space as part as the normal processing, so we must do it now\n        transformNormalToWorld(this.pickedMesh, normalForDirectionChecking);\n      }\n      // Flip the normal if the picking ray is in the same direction.\n      if (Vector3.Dot(normalForDirectionChecking, this.ray.direction) > 0) {\n        result.negateInPlace();\n      }\n    }\n    result.normalize();\n    return result;\n  }\n  /**\n   * Gets the texture coordinates of where the pick occurred\n   * @returns The vector containing the coordinates of the texture\n   */\n  getTextureCoordinates() {\n    if (!this.pickedMesh || !this.pickedMesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\n      return null;\n    }\n    const indices = this.pickedMesh.getIndices();\n    if (!indices) {\n      return null;\n    }\n    const uvs = this.pickedMesh.getVerticesData(VertexBuffer.UVKind);\n    if (!uvs) {\n      return null;\n    }\n    let uv0 = Vector2.FromArray(uvs, indices[this.faceId * 3] * 2);\n    let uv1 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 1] * 2);\n    let uv2 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 2] * 2);\n    uv0 = uv0.scale(this.bu);\n    uv1 = uv1.scale(this.bv);\n    uv2 = uv2.scale(1.0 - this.bu - this.bv);\n    return new Vector2(uv0.x + uv1.x + uv2.x, uv0.y + uv1.y + uv2.y);\n  }\n}","map":{"version":3,"mappings":"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","names":["Vector3","Vector2","TmpVectors","VertexBuffer","PickingInfo","constructor","getNormal","useWorldCoordinates","useVerticesNormals","pickedMesh","isVerticesDataPresent","NormalKind","indices","getIndices","result","normals","getVerticesData","normal0","FromArray","faceId","normal1","normal2","scale","bu","bv","x","y","z","positions","PositionKind","vertex1","vertex2","vertex3","p1p2","subtract","p3p2","Cross","transformNormalToWorld","n","wm","getWorldMatrix","nonUniformScaling","Matrix","copyFrom","setTranslationFromFloats","invert","transposeToRef","TransformNormalToRef","ray","normalForDirectionChecking","Dot","direction","negateInPlace","normalize","getTextureCoordinates","UVKind","uvs","uv0","uv1","uv2"],"sourceRoot":"","sources":["../../../../lts/core/generated/Collisions/pickingInfo.ts"],"sourcesContent":["import type { Nullable, FloatArray } from \"../types\";\r\nimport { Vector3, Vector2, TmpVectors } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { Sprite } from \"../Sprites/sprite\";\r\n\r\ndeclare type Ray = import(\"../Culling/ray\").Ray;\r\n\r\n/**\r\n * Information about the result of picking within a scene\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/interactions/picking_collisions\r\n */\r\nexport class PickingInfo {\r\n    /**\r\n     * If the pick collided with an object\r\n     */\r\n    public hit = false;\r\n    /**\r\n     * Distance away where the pick collided\r\n     */\r\n    public distance = 0;\r\n    /**\r\n     * The location of pick collision\r\n     */\r\n    public pickedPoint: Nullable<Vector3> = null;\r\n    /**\r\n     * The mesh corresponding the pick collision\r\n     */\r\n    public pickedMesh: Nullable<AbstractMesh> = null;\r\n    /** (See getTextureCoordinates) The barycentric U coordinate that is used when calculating the texture coordinates of the collision.*/\r\n    public bu = 0;\r\n    /** (See getTextureCoordinates) The barycentric V coordinate that is used when calculating the texture coordinates of the collision.*/\r\n    public bv = 0;\r\n    /** The index of the face on the mesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\r\n    public faceId = -1;\r\n    /** The index of the face on the subMesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\r\n    public subMeshFaceId = -1;\r\n    /** Id of the submesh that was picked */\r\n    public subMeshId = 0;\r\n    /** If a sprite was picked, this will be the sprite the pick collided with */\r\n    public pickedSprite: Nullable<Sprite> = null;\r\n    /** If we are picking a mesh with thin instance, this will give you the picked thin instance */\r\n    public thinInstanceIndex = -1;\r\n    /**\r\n     * The ray that was used to perform the picking.\r\n     */\r\n    public ray: Nullable<Ray> = null;\r\n    /**\r\n     * If a mesh was used to do the picking (eg. 6dof controller) as a \"near interaction\", this will be populated.\r\n     */\r\n    public originMesh: Nullable<AbstractMesh> = null;\r\n    /**\r\n     * The aim-space transform of the input used for picking, if it is an XR input source.\r\n     */\r\n    public aimTransform: Nullable<TransformNode> = null;\r\n    /**\r\n     * The grip-space transform of the input used for picking, if it is an XR input source.\r\n     * Some XR sources, such as input coming from head mounted displays, do not have this.\r\n     */\r\n    public gripTransform: Nullable<TransformNode> = null;\r\n\r\n    /**\r\n     * Gets the normal corresponding to the face the pick collided with\r\n     * @param useWorldCoordinates If the resulting normal should be relative to the world (default: false)\r\n     * @param useVerticesNormals If the vertices normals should be used to calculate the normal instead of the normal map (default: true)\r\n     * @returns The normal corresponding to the face the pick collided with\r\n     * @remarks Note that the returned normal will always point towards the picking ray.\r\n     */\r\n    public getNormal(useWorldCoordinates = false, useVerticesNormals = true): Nullable<Vector3> {\r\n        if (!this.pickedMesh || (useVerticesNormals && !this.pickedMesh.isVerticesDataPresent(VertexBuffer.NormalKind))) {\r\n            return null;\r\n        }\r\n\r\n        const indices = this.pickedMesh.getIndices();\r\n\r\n        if (!indices) {\r\n            return null;\r\n        }\r\n\r\n        let result: Vector3;\r\n\r\n        if (useVerticesNormals) {\r\n            const normals = <FloatArray>this.pickedMesh.getVerticesData(VertexBuffer.NormalKind);\r\n\r\n            let normal0 = Vector3.FromArray(normals, indices[this.faceId * 3] * 3);\r\n            let normal1 = Vector3.FromArray(normals, indices[this.faceId * 3 + 1] * 3);\r\n            let normal2 = Vector3.FromArray(normals, indices[this.faceId * 3 + 2] * 3);\r\n\r\n            normal0 = normal0.scale(this.bu);\r\n            normal1 = normal1.scale(this.bv);\r\n            normal2 = normal2.scale(1.0 - this.bu - this.bv);\r\n\r\n            result = new Vector3(normal0.x + normal1.x + normal2.x, normal0.y + normal1.y + normal2.y, normal0.z + normal1.z + normal2.z);\r\n        } else {\r\n            const positions = <FloatArray>this.pickedMesh.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n            const vertex1 = Vector3.FromArray(positions, indices[this.faceId * 3] * 3);\r\n            const vertex2 = Vector3.FromArray(positions, indices[this.faceId * 3 + 1] * 3);\r\n            const vertex3 = Vector3.FromArray(positions, indices[this.faceId * 3 + 2] * 3);\r\n\r\n            const p1p2 = vertex1.subtract(vertex2);\r\n            const p3p2 = vertex3.subtract(vertex2);\r\n\r\n            result = Vector3.Cross(p1p2, p3p2);\r\n        }\r\n\r\n        const transformNormalToWorld = (pickedMesh: AbstractMesh, n: Vector3) => {\r\n            let wm = pickedMesh.getWorldMatrix();\r\n\r\n            if (pickedMesh.nonUniformScaling) {\r\n                TmpVectors.Matrix[0].copyFrom(wm);\r\n                wm = TmpVectors.Matrix[0];\r\n                wm.setTranslationFromFloats(0, 0, 0);\r\n                wm.invert();\r\n                wm.transposeToRef(TmpVectors.Matrix[1]);\r\n\r\n                wm = TmpVectors.Matrix[1];\r\n            }\r\n\r\n            Vector3.TransformNormalToRef(n, wm, n);\r\n        };\r\n\r\n        if (useWorldCoordinates) {\r\n            transformNormalToWorld(this.pickedMesh, result);\r\n        }\r\n\r\n        if (this.ray) {\r\n            const normalForDirectionChecking = TmpVectors.Vector3[0].copyFrom(result);\r\n\r\n            if (!useWorldCoordinates) {\r\n                // the normal has not been transformed to world space as part as the normal processing, so we must do it now\r\n                transformNormalToWorld(this.pickedMesh, normalForDirectionChecking);\r\n            }\r\n\r\n            // Flip the normal if the picking ray is in the same direction.\r\n            if (Vector3.Dot(normalForDirectionChecking, this.ray.direction) > 0) {\r\n                result.negateInPlace();\r\n            }\r\n        }\r\n\r\n        result.normalize();\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the texture coordinates of where the pick occurred\r\n     * @returns The vector containing the coordinates of the texture\r\n     */\r\n    public getTextureCoordinates(): Nullable<Vector2> {\r\n        if (!this.pickedMesh || !this.pickedMesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n            return null;\r\n        }\r\n\r\n        const indices = this.pickedMesh.getIndices();\r\n        if (!indices) {\r\n            return null;\r\n        }\r\n\r\n        const uvs = this.pickedMesh.getVerticesData(VertexBuffer.UVKind);\r\n        if (!uvs) {\r\n            return null;\r\n        }\r\n\r\n        let uv0 = Vector2.FromArray(uvs, indices[this.faceId * 3] * 2);\r\n        let uv1 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 1] * 2);\r\n        let uv2 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 2] * 2);\r\n\r\n        uv0 = uv0.scale(this.bu);\r\n        uv1 = uv1.scale(this.bv);\r\n        uv2 = uv2.scale(1.0 - this.bu - this.bv);\r\n\r\n        return new Vector2(uv0.x + uv1.x + uv2.x, uv0.y + uv1.y + uv2.y);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}