{"ast":null,"code":"import { RegisterNativeTypeAsync } from \"../../Engines/nativeEngine.js\";\n/** @internal */\nexport class NativeXRFrame {\n  constructor(_nativeImpl) {\n    this._nativeImpl = _nativeImpl;\n    this._xrTransform = new XRRigidTransform();\n    this._xrPose = {\n      transform: this._xrTransform,\n      emulatedPosition: false\n    };\n    // Enough space for position, orientation\n    this._xrPoseVectorData = new Float32Array(4 + 4);\n    this.fillPoses = this._nativeImpl.fillPoses.bind(this._nativeImpl);\n    this.getViewerPose = this._nativeImpl.getViewerPose.bind(this._nativeImpl);\n    this.getHitTestResults = this._nativeImpl.getHitTestResults.bind(this._nativeImpl);\n    this.getHitTestResultsForTransientInput = () => {\n      throw new Error(\"XRFrame.getHitTestResultsForTransientInput not supported on native.\");\n    };\n    this.createAnchor = this._nativeImpl.createAnchor.bind(this._nativeImpl);\n    this.getJointPose = this._nativeImpl.getJointPose.bind(this._nativeImpl);\n    this.fillJointRadii = this._nativeImpl.fillJointRadii.bind(this._nativeImpl);\n    this.getLightEstimate = () => {\n      throw new Error(\"XRFrame.getLightEstimate not supported on native.\");\n    };\n    this.getImageTrackingResults = () => {\n      var _a;\n      return (_a = this._nativeImpl._imageTrackingResults) !== null && _a !== void 0 ? _a : [];\n    };\n  }\n  get session() {\n    return this._nativeImpl.session;\n  }\n  getPose(space, baseSpace) {\n    if (!this._nativeImpl.getPoseData(space, baseSpace, this._xrPoseVectorData.buffer, this._xrTransform.matrix.buffer)) {\n      return undefined;\n    }\n    const position = this._xrTransform.position;\n    position.x = this._xrPoseVectorData[0];\n    position.y = this._xrPoseVectorData[1];\n    position.z = this._xrPoseVectorData[2];\n    position.w = this._xrPoseVectorData[3];\n    const orientation = this._xrTransform.orientation;\n    orientation.x = this._xrPoseVectorData[4];\n    orientation.y = this._xrPoseVectorData[5];\n    orientation.z = this._xrPoseVectorData[6];\n    orientation.w = this._xrPoseVectorData[7];\n    return this._xrPose;\n  }\n  get trackedAnchors() {\n    return this._nativeImpl.trackedAnchors;\n  }\n  get worldInformation() {\n    return this._nativeImpl.worldInformation;\n  }\n  get detectedPlanes() {\n    return this._nativeImpl.detectedPlanes;\n  }\n  get featurePointCloud() {\n    return this._nativeImpl.featurePointCloud;\n  }\n}\nRegisterNativeTypeAsync(\"NativeXRFrame\", NativeXRFrame);","map":{"version":3,"mappings":"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","names":["RegisterNativeTypeAsync","NativeXRFrame","constructor","_nativeImpl","XRRigidTransform","transform","_xrTransform","emulatedPosition","Float32Array","fillPoses","bind","getViewerPose","getHitTestResults","Error","createAnchor","getJointPose","fillJointRadii","_imageTrackingResults","session","getPose","space","baseSpace","getPoseData","_xrPoseVectorData","buffer","matrix","undefined","position","x","y","z","w","orientation","_xrPose","trackedAnchors","worldInformation","detectedPlanes","featurePointCloud"],"sourceRoot":"","sources":["../../../../../lts/core/generated/XR/native/nativeXRFrame.ts"],"sourcesContent":["import { RegisterNativeTypeAsync } from \"../../Engines/nativeEngine\";\r\n\r\n/** @internal */\r\ninterface INativeXRFrame extends XRFrame {\r\n    // Native-only helper functions\r\n    getPoseData: (space: XRSpace, baseSpace: XRReferenceSpace, vectorBuffer: ArrayBuffer, matrixBuffer: ArrayBuffer) => XRPose;\r\n    _imageTrackingResults?: XRImageTrackingResult[];\r\n}\r\n\r\n/** @internal */\r\nexport class NativeXRFrame implements XRFrame {\r\n    private readonly _xrTransform = new XRRigidTransform();\r\n    private readonly _xrPose: XRPose = {\r\n        transform: this._xrTransform,\r\n        emulatedPosition: false,\r\n    };\r\n    // Enough space for position, orientation\r\n    private readonly _xrPoseVectorData = new Float32Array(4 + 4);\r\n\r\n    public get session(): XRSession {\r\n        return this._nativeImpl.session;\r\n    }\r\n\r\n    constructor(private _nativeImpl: INativeXRFrame) {}\r\n\r\n    public getPose(space: XRSpace, baseSpace: XRReferenceSpace): XRPose | undefined {\r\n        if (!this._nativeImpl.getPoseData(space, baseSpace, this._xrPoseVectorData.buffer, this._xrTransform.matrix.buffer)) {\r\n            return undefined;\r\n        }\r\n        const position = this._xrTransform.position as DOMPoint;\r\n        position.x = this._xrPoseVectorData[0];\r\n        position.y = this._xrPoseVectorData[1];\r\n        position.z = this._xrPoseVectorData[2];\r\n        position.w = this._xrPoseVectorData[3];\r\n\r\n        const orientation = this._xrTransform.orientation as DOMPoint;\r\n        orientation.x = this._xrPoseVectorData[4];\r\n        orientation.y = this._xrPoseVectorData[5];\r\n        orientation.z = this._xrPoseVectorData[6];\r\n        orientation.w = this._xrPoseVectorData[7];\r\n        return this._xrPose;\r\n    }\r\n\r\n    public readonly fillPoses = this._nativeImpl.fillPoses!.bind(this._nativeImpl);\r\n\r\n    public readonly getViewerPose = this._nativeImpl.getViewerPose.bind(this._nativeImpl);\r\n\r\n    public readonly getHitTestResults = this._nativeImpl.getHitTestResults.bind(this._nativeImpl);\r\n\r\n    public readonly getHitTestResultsForTransientInput = () => {\r\n        throw new Error(\"XRFrame.getHitTestResultsForTransientInput not supported on native.\");\r\n    };\r\n\r\n    public get trackedAnchors(): XRAnchorSet | undefined {\r\n        return this._nativeImpl.trackedAnchors;\r\n    }\r\n\r\n    public readonly createAnchor = this._nativeImpl.createAnchor!.bind(this._nativeImpl);\r\n\r\n    public get worldInformation(): XRWorldInformation | undefined {\r\n        return this._nativeImpl.worldInformation;\r\n    }\r\n\r\n    public get detectedPlanes(): XRPlaneSet | undefined {\r\n        return this._nativeImpl.detectedPlanes;\r\n    }\r\n\r\n    public readonly getJointPose = this._nativeImpl.getJointPose!.bind(this._nativeImpl);\r\n\r\n    public readonly fillJointRadii = this._nativeImpl.fillJointRadii!.bind(this._nativeImpl);\r\n\r\n    public readonly getLightEstimate = () => {\r\n        throw new Error(\"XRFrame.getLightEstimate not supported on native.\");\r\n    };\r\n\r\n    public get featurePointCloud(): number[] | undefined {\r\n        return this._nativeImpl.featurePointCloud;\r\n    }\r\n\r\n    public readonly getImageTrackingResults = (): XRImageTrackingResult[] => {\r\n        return this._nativeImpl._imageTrackingResults ?? [];\r\n    };\r\n}\r\n\r\nRegisterNativeTypeAsync(\"NativeXRFrame\", NativeXRFrame);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}