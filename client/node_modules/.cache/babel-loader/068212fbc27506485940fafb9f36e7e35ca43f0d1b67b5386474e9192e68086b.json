{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { TmpVectors } from \"../../Maths/math.vector.js\";\nimport { Mesh, _CreationDataStorage } from \"../mesh.js\";\nimport { VertexBuffer } from \"../../Buffers/buffer.js\";\nimport { VertexData } from \"../mesh.vertexData.js\";\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions.js\";\n/**\n * Creates the VertexData for a Ribbon\n * @param options an object used to set the following optional parameters for the ribbon, required but can be empty\n * * pathArray array of paths, each of which an array of successive Vector3\n * * closeArray creates a seam between the first and the last paths of the pathArray, optional, default false\n * * closePath creates a seam between the first and the last points of each path of the path array, optional, default false\n * * offset a positive integer, only used when pathArray contains a single path (offset = 10 means the point 1 is joined to the point 11), default rounded half size of the pathArray length\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n * * invertUV swaps in the U and V coordinates when applying a texture, optional, default false\n * * uvs a linear array, of length 2 * number of vertices, of custom UV values, optional\n * * colors a linear array, of length 4 * number of vertices, of custom color values, optional\n * @param options.pathArray\n * @param options.closeArray\n * @param options.closePath\n * @param options.offset\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @param options.invertUV\n * @param options.uvs\n * @param options.colors\n * @returns the VertexData of the ribbon\n */\nexport function CreateRibbonVertexData(options) {\n  let pathArray = options.pathArray;\n  const closeArray = options.closeArray || false;\n  const closePath = options.closePath || false;\n  const invertUV = options.invertUV || false;\n  const defaultOffset = Math.floor(pathArray[0].length / 2);\n  let offset = options.offset || defaultOffset;\n  offset = offset > defaultOffset ? defaultOffset : Math.floor(offset); // offset max allowed : defaultOffset\n  const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\n  const customUV = options.uvs;\n  const customColors = options.colors;\n  const positions = [];\n  const indices = [];\n  const normals = [];\n  const uvs = [];\n  const us = []; // us[path_id] = [uDist1, uDist2, uDist3 ... ] distances between points on path path_id\n  const vs = []; // vs[i] = [vDist1, vDist2, vDist3, ... ] distances between points i of consecutive paths from pathArray\n  const uTotalDistance = []; // uTotalDistance[p] : total distance of path p\n  const vTotalDistance = []; //  vTotalDistance[i] : total distance between points i of first and last path from pathArray\n  let minlg; // minimal length among all paths from pathArray\n  const lg = []; // array of path lengths : nb of vertex per path\n  const idx = []; // array of path indexes : index of each path (first vertex) in the total vertex number\n  let p; // path iterator\n  let i; // point iterator\n  let j; // point iterator\n  // if single path in pathArray\n  if (pathArray.length < 2) {\n    const ar1 = [];\n    const ar2 = [];\n    for (i = 0; i < pathArray[0].length - offset; i++) {\n      ar1.push(pathArray[0][i]);\n      ar2.push(pathArray[0][i + offset]);\n    }\n    pathArray = [ar1, ar2];\n  }\n  // positions and horizontal distances (u)\n  let idc = 0;\n  const closePathCorr = closePath ? 1 : 0; // the final index will be +1 if closePath\n  let path;\n  let l;\n  minlg = pathArray[0].length;\n  let vectlg;\n  let dist;\n  for (p = 0; p < pathArray.length; p++) {\n    uTotalDistance[p] = 0;\n    us[p] = [0];\n    path = pathArray[p];\n    l = path.length;\n    minlg = minlg < l ? minlg : l;\n    j = 0;\n    while (j < l) {\n      positions.push(path[j].x, path[j].y, path[j].z);\n      if (j > 0) {\n        vectlg = path[j].subtract(path[j - 1]).length();\n        dist = vectlg + uTotalDistance[p];\n        us[p].push(dist);\n        uTotalDistance[p] = dist;\n      }\n      j++;\n    }\n    if (closePath) {\n      // an extra hidden vertex is added in the \"positions\" array\n      j--;\n      positions.push(path[0].x, path[0].y, path[0].z);\n      vectlg = path[j].subtract(path[0]).length();\n      dist = vectlg + uTotalDistance[p];\n      us[p].push(dist);\n      uTotalDistance[p] = dist;\n    }\n    lg[p] = l + closePathCorr;\n    idx[p] = idc;\n    idc += l + closePathCorr;\n  }\n  // vertical distances (v)\n  let path1;\n  let path2;\n  let vertex1 = null;\n  let vertex2 = null;\n  for (i = 0; i < minlg + closePathCorr; i++) {\n    vTotalDistance[i] = 0;\n    vs[i] = [0];\n    for (p = 0; p < pathArray.length - 1; p++) {\n      path1 = pathArray[p];\n      path2 = pathArray[p + 1];\n      if (i === minlg) {\n        // closePath\n        vertex1 = path1[0];\n        vertex2 = path2[0];\n      } else {\n        vertex1 = path1[i];\n        vertex2 = path2[i];\n      }\n      vectlg = vertex2.subtract(vertex1).length();\n      dist = vectlg + vTotalDistance[i];\n      vs[i].push(dist);\n      vTotalDistance[i] = dist;\n    }\n    if (closeArray && vertex2 && vertex1) {\n      path1 = pathArray[p];\n      path2 = pathArray[0];\n      if (i === minlg) {\n        // closePath\n        vertex2 = path2[0];\n      }\n      vectlg = vertex2.subtract(vertex1).length();\n      dist = vectlg + vTotalDistance[i];\n      vTotalDistance[i] = dist;\n    }\n  }\n  // uvs\n  let u;\n  let v;\n  if (customUV) {\n    for (p = 0; p < customUV.length; p++) {\n      uvs.push(customUV[p].x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - customUV[p].y : customUV[p].y);\n    }\n  } else {\n    for (p = 0; p < pathArray.length; p++) {\n      for (i = 0; i < minlg + closePathCorr; i++) {\n        u = uTotalDistance[p] != 0.0 ? us[p][i] / uTotalDistance[p] : 0.0;\n        v = vTotalDistance[i] != 0.0 ? vs[i][p] / vTotalDistance[i] : 0.0;\n        if (invertUV) {\n          uvs.push(v, u);\n        } else {\n          uvs.push(u, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - v : v);\n        }\n      }\n    }\n  }\n  // indices\n  p = 0; // path index\n  let pi = 0; // positions array index\n  let l1 = lg[p] - 1; // path1 length\n  let l2 = lg[p + 1] - 1; // path2 length\n  let min = l1 < l2 ? l1 : l2; // current path stop index\n  let shft = idx[1] - idx[0]; // shift\n  const path1nb = closeArray ? lg.length : lg.length - 1; // number of path1 to iterate\ton\n  while (pi <= min && p < path1nb) {\n    //  stay under min and don't go over next to last path\n    // draw two triangles between path1 (p1) and path2 (p2) : (p1.pi, p2.pi, p1.pi+1) and (p2.pi+1, p1.pi+1, p2.pi) clockwise\n    indices.push(pi, pi + shft, pi + 1);\n    indices.push(pi + shft + 1, pi + 1, pi + shft);\n    pi += 1;\n    if (pi === min) {\n      // if end of one of two consecutive paths reached, go to next existing path\n      p++;\n      if (p === lg.length - 1) {\n        // last path of pathArray reached <=> closeArray == true\n        shft = idx[0] - idx[p];\n        l1 = lg[p] - 1;\n        l2 = lg[0] - 1;\n      } else {\n        shft = idx[p + 1] - idx[p];\n        l1 = lg[p] - 1;\n        l2 = lg[p + 1] - 1;\n      }\n      pi = idx[p];\n      min = l1 < l2 ? l1 + pi : l2 + pi;\n    }\n  }\n  // normals\n  VertexData.ComputeNormals(positions, indices, normals);\n  if (closePath) {\n    // update both the first and last vertex normals to their average value\n    let indexFirst = 0;\n    let indexLast = 0;\n    for (p = 0; p < pathArray.length; p++) {\n      indexFirst = idx[p] * 3;\n      if (p + 1 < pathArray.length) {\n        indexLast = (idx[p + 1] - 1) * 3;\n      } else {\n        indexLast = normals.length - 3;\n      }\n      normals[indexFirst] = (normals[indexFirst] + normals[indexLast]) * 0.5;\n      normals[indexFirst + 1] = (normals[indexFirst + 1] + normals[indexLast + 1]) * 0.5;\n      normals[indexFirst + 2] = (normals[indexFirst + 2] + normals[indexLast + 2]) * 0.5;\n      normals[indexLast] = normals[indexFirst];\n      normals[indexLast + 1] = normals[indexFirst + 1];\n      normals[indexLast + 2] = normals[indexFirst + 2];\n    }\n  }\n  // sides\n  VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\n  // Colors\n  let colors = null;\n  if (customColors) {\n    colors = new Float32Array(customColors.length * 4);\n    for (let c = 0; c < customColors.length; c++) {\n      colors[c * 4] = customColors[c].r;\n      colors[c * 4 + 1] = customColors[c].g;\n      colors[c * 4 + 2] = customColors[c].b;\n      colors[c * 4 + 3] = customColors[c].a;\n    }\n  }\n  // Result\n  const vertexData = new VertexData();\n  const positions32 = new Float32Array(positions);\n  const normals32 = new Float32Array(normals);\n  const uvs32 = new Float32Array(uvs);\n  vertexData.indices = indices;\n  vertexData.positions = positions32;\n  vertexData.normals = normals32;\n  vertexData.uvs = uvs32;\n  if (colors) {\n    vertexData.set(colors, VertexBuffer.ColorKind);\n  }\n  if (closePath) {\n    vertexData._idx = idx;\n  }\n  return vertexData;\n}\n/**\n * Creates a ribbon mesh. The ribbon is a parametric shape.  It has no predefined shape. Its final shape will depend on the input parameters\n * * The parameter `pathArray` is a required array of paths, what are each an array of successive Vector3. The pathArray parameter depicts the ribbon geometry\n * * The parameter `closeArray` (boolean, default false) creates a seam between the first and the last paths of the path array\n * * The parameter `closePath` (boolean, default false) creates a seam between the first and the last points of each path of the path array\n * * The parameter `offset` (positive integer, default : rounded half size of the pathArray length), is taken in account only if the `pathArray` is containing a single path\n * * It's the offset to join the points from the same path. Ex : offset = 10 means the point 1 is joined to the point 11\n * * The optional parameter `instance` is an instance of an existing Ribbon object to be updated with the passed `pathArray` parameter : https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#ribbon\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\n * * The optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture\n * * The parameter `uvs` is an optional flat array of `Vector2` to update/set each ribbon vertex with its own custom UV values instead of the computed ones\n * * The parameters `colors` is an optional flat array of `Color4` to set/update each ribbon vertex with its own custom color values\n * * Note that if you use the parameters `uvs` or `colors`, the passed arrays must be populated with the right number of elements, it is to say the number of ribbon vertices. Remember that if you set `closePath` to `true`, there's one extra vertex per path in the geometry\n * * Moreover, you can use the parameter `color` with `instance` (to update the ribbon), only if you previously used it at creation time\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\n * @param name defines the name of the mesh\n * @param options defines the options used to create the mesh\n * @param options.pathArray\n * @param options.closeArray\n * @param options.closePath\n * @param options.offset\n * @param options.updatable\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @param options.instance\n * @param options.invertUV\n * @param options.uvs\n * @param options.colors\n * @param scene defines the hosting scene\n * @returns the ribbon mesh\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param/ribbon_extra\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\n */\nexport function CreateRibbon(name, options, scene = null) {\n  const pathArray = options.pathArray;\n  const closeArray = options.closeArray;\n  const closePath = options.closePath;\n  const sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n  const instance = options.instance;\n  const updatable = options.updatable;\n  if (instance) {\n    // existing ribbon instance update\n    // positionFunction : ribbon case\n    // only pathArray and sideOrientation parameters are taken into account for positions update\n    const minimum = TmpVectors.Vector3[0].setAll(Number.MAX_VALUE);\n    const maximum = TmpVectors.Vector3[1].setAll(-Number.MAX_VALUE);\n    const positionFunction = positions => {\n      let minlg = pathArray[0].length;\n      const mesh = instance;\n      let i = 0;\n      const ns = mesh._originalBuilderSideOrientation === Mesh.DOUBLESIDE ? 2 : 1;\n      for (let si = 1; si <= ns; ++si) {\n        for (let p = 0; p < pathArray.length; ++p) {\n          const path = pathArray[p];\n          const l = path.length;\n          minlg = minlg < l ? minlg : l;\n          for (let j = 0; j < minlg; ++j) {\n            const pathPoint = path[j];\n            positions[i] = pathPoint.x;\n            positions[i + 1] = pathPoint.y;\n            positions[i + 2] = pathPoint.z;\n            minimum.minimizeInPlaceFromFloats(pathPoint.x, pathPoint.y, pathPoint.z);\n            maximum.maximizeInPlaceFromFloats(pathPoint.x, pathPoint.y, pathPoint.z);\n            i += 3;\n          }\n          if (mesh._creationDataStorage && mesh._creationDataStorage.closePath) {\n            const pathPoint = path[0];\n            positions[i] = pathPoint.x;\n            positions[i + 1] = pathPoint.y;\n            positions[i + 2] = pathPoint.z;\n            i += 3;\n          }\n        }\n      }\n    };\n    const positions = instance.getVerticesData(VertexBuffer.PositionKind);\n    positionFunction(positions);\n    if (instance.hasBoundingInfo) {\n      instance.getBoundingInfo().reConstruct(minimum, maximum, instance._worldMatrix);\n    } else {\n      instance.buildBoundingInfo(minimum, maximum, instance._worldMatrix);\n    }\n    instance.updateVerticesData(VertexBuffer.PositionKind, positions, false, false);\n    if (options.colors) {\n      const colors = instance.getVerticesData(VertexBuffer.ColorKind);\n      for (let c = 0, colorIndex = 0; c < options.colors.length; c++, colorIndex += 4) {\n        const color = options.colors[c];\n        colors[colorIndex] = color.r;\n        colors[colorIndex + 1] = color.g;\n        colors[colorIndex + 2] = color.b;\n        colors[colorIndex + 3] = color.a;\n      }\n      instance.updateVerticesData(VertexBuffer.ColorKind, colors, false, false);\n    }\n    if (options.uvs) {\n      const uvs = instance.getVerticesData(VertexBuffer.UVKind);\n      for (let i = 0; i < options.uvs.length; i++) {\n        uvs[i * 2] = options.uvs[i].x;\n        uvs[i * 2 + 1] = CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - options.uvs[i].y : options.uvs[i].y;\n      }\n      instance.updateVerticesData(VertexBuffer.UVKind, uvs, false, false);\n    }\n    if (!instance.areNormalsFrozen || instance.isFacetDataEnabled) {\n      const indices = instance.getIndices();\n      const normals = instance.getVerticesData(VertexBuffer.NormalKind);\n      const params = instance.isFacetDataEnabled ? instance.getFacetDataParameters() : null;\n      VertexData.ComputeNormals(positions, indices, normals, params);\n      if (instance._creationDataStorage && instance._creationDataStorage.closePath) {\n        let indexFirst = 0;\n        let indexLast = 0;\n        for (let p = 0; p < pathArray.length; p++) {\n          indexFirst = instance._creationDataStorage.idx[p] * 3;\n          if (p + 1 < pathArray.length) {\n            indexLast = (instance._creationDataStorage.idx[p + 1] - 1) * 3;\n          } else {\n            indexLast = normals.length - 3;\n          }\n          normals[indexFirst] = (normals[indexFirst] + normals[indexLast]) * 0.5;\n          normals[indexFirst + 1] = (normals[indexFirst + 1] + normals[indexLast + 1]) * 0.5;\n          normals[indexFirst + 2] = (normals[indexFirst + 2] + normals[indexLast + 2]) * 0.5;\n          normals[indexLast] = normals[indexFirst];\n          normals[indexLast + 1] = normals[indexFirst + 1];\n          normals[indexLast + 2] = normals[indexFirst + 2];\n        }\n      }\n      if (!instance.areNormalsFrozen) {\n        instance.updateVerticesData(VertexBuffer.NormalKind, normals, false, false);\n      }\n    }\n    return instance;\n  } else {\n    // new ribbon creation\n    const ribbon = new Mesh(name, scene);\n    ribbon._originalBuilderSideOrientation = sideOrientation;\n    ribbon._creationDataStorage = new _CreationDataStorage();\n    const vertexData = CreateRibbonVertexData(options);\n    if (closePath) {\n      ribbon._creationDataStorage.idx = vertexData._idx;\n    }\n    ribbon._creationDataStorage.closePath = closePath;\n    ribbon._creationDataStorage.closeArray = closeArray;\n    vertexData.applyToMesh(ribbon, updatable);\n    return ribbon;\n  }\n}\n/**\n * Class containing static functions to help procedurally build meshes\n * @deprecated use CreateRibbon directly\n */\nexport const RibbonBuilder = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  CreateRibbon\n};\nVertexData.CreateRibbon = CreateRibbonVertexData;\nMesh.CreateRibbon = (name, pathArray, closeArray = false, closePath, offset, scene, updatable = false, sideOrientation, instance) => {\n  return CreateRibbon(name, {\n    pathArray: pathArray,\n    closeArray: closeArray,\n    closePath: closePath,\n    offset: offset,\n    updatable: updatable,\n    sideOrientation: sideOrientation,\n    instance: instance\n  }, scene);\n};","map":{"version":3,"mappings":"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","names":["TmpVectors","Mesh","_CreationDataStorage","VertexBuffer","VertexData","CompatibilityOptions","CreateRibbonVertexData","options","pathArray","closeArray","closePath","invertUV","defaultOffset","Math","floor","length","offset","sideOrientation","DEFAULTSIDE","customUV","uvs","customColors","colors","positions","indices","normals","us","vs","uTotalDistance","vTotalDistance","minlg","lg","idx","p","i","j","ar1","ar2","push","idc","closePathCorr","path","l","vectlg","dist","x","y","z","subtract","path1","path2","vertex1","vertex2","u","v","UseOpenGLOrientationForUV","pi","l1","l2","min","shft","path1nb","ComputeNormals","indexFirst","indexLast","_ComputeSides","frontUVs","backUVs","Float32Array","c","r","g","b","a","vertexData","positions32","normals32","uvs32","set","ColorKind","_idx","CreateRibbon","name","scene","_GetDefaultSideOrientation","instance","updatable","minimum","Vector3","setAll","Number","MAX_VALUE","maximum","positionFunction","mesh","ns","_originalBuilderSideOrientation","DOUBLESIDE","si","pathPoint","minimizeInPlaceFromFloats","maximizeInPlaceFromFloats","_creationDataStorage","getVerticesData","PositionKind","hasBoundingInfo","getBoundingInfo","reConstruct","_worldMatrix","buildBoundingInfo","updateVerticesData","colorIndex","color","UVKind","areNormalsFrozen","isFacetDataEnabled","getIndices","NormalKind","params","getFacetDataParameters","ribbon","applyToMesh","RibbonBuilder"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Meshes/Builders/ribbonBuilder.ts"],"sourcesContent":["import type { Nullable, FloatArray } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Vector3, Vector2, Vector4 } from \"../../Maths/math.vector\";\r\nimport { TmpVectors } from \"../../Maths/math.vector\";\r\nimport type { Color4 } from \"../../Maths/math.color\";\r\nimport { Mesh, _CreationDataStorage } from \"../mesh\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for a Ribbon\r\n * @param options an object used to set the following optional parameters for the ribbon, required but can be empty\r\n * * pathArray array of paths, each of which an array of successive Vector3\r\n * * closeArray creates a seam between the first and the last paths of the pathArray, optional, default false\r\n * * closePath creates a seam between the first and the last points of each path of the path array, optional, default false\r\n * * offset a positive integer, only used when pathArray contains a single path (offset = 10 means the point 1 is joined to the point 11), default rounded half size of the pathArray length\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * * invertUV swaps in the U and V coordinates when applying a texture, optional, default false\r\n * * uvs a linear array, of length 2 * number of vertices, of custom UV values, optional\r\n * * colors a linear array, of length 4 * number of vertices, of custom color values, optional\r\n * @param options.pathArray\r\n * @param options.closeArray\r\n * @param options.closePath\r\n * @param options.offset\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.invertUV\r\n * @param options.uvs\r\n * @param options.colors\r\n * @returns the VertexData of the ribbon\r\n */\r\nexport function CreateRibbonVertexData(options: {\r\n    pathArray: Vector3[][];\r\n    closeArray?: boolean;\r\n    closePath?: boolean;\r\n    offset?: number;\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n    invertUV?: boolean;\r\n    uvs?: Vector2[];\r\n    colors?: Color4[];\r\n}): VertexData {\r\n    let pathArray: Vector3[][] = options.pathArray;\r\n    const closeArray: boolean = options.closeArray || false;\r\n    const closePath: boolean = options.closePath || false;\r\n    const invertUV: boolean = options.invertUV || false;\r\n    const defaultOffset: number = Math.floor(pathArray[0].length / 2);\r\n    let offset: number = options.offset || defaultOffset;\r\n    offset = offset > defaultOffset ? defaultOffset : Math.floor(offset); // offset max allowed : defaultOffset\r\n    const sideOrientation: number = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n    const customUV = options.uvs;\r\n    const customColors = options.colors;\r\n\r\n    const positions: number[] = [];\r\n    const indices: number[] = [];\r\n    const normals: number[] = [];\r\n    const uvs: number[] = [];\r\n\r\n    const us: number[][] = []; // us[path_id] = [uDist1, uDist2, uDist3 ... ] distances between points on path path_id\r\n    const vs: number[][] = []; // vs[i] = [vDist1, vDist2, vDist3, ... ] distances between points i of consecutive paths from pathArray\r\n    const uTotalDistance: number[] = []; // uTotalDistance[p] : total distance of path p\r\n    const vTotalDistance: number[] = []; //  vTotalDistance[i] : total distance between points i of first and last path from pathArray\r\n    let minlg: number; // minimal length among all paths from pathArray\r\n    const lg: number[] = []; // array of path lengths : nb of vertex per path\r\n    const idx: number[] = []; // array of path indexes : index of each path (first vertex) in the total vertex number\r\n    let p: number; // path iterator\r\n    let i: number; // point iterator\r\n    let j: number; // point iterator\r\n\r\n    // if single path in pathArray\r\n    if (pathArray.length < 2) {\r\n        const ar1: Vector3[] = [];\r\n        const ar2: Vector3[] = [];\r\n        for (i = 0; i < pathArray[0].length - offset; i++) {\r\n            ar1.push(pathArray[0][i]);\r\n            ar2.push(pathArray[0][i + offset]);\r\n        }\r\n        pathArray = [ar1, ar2];\r\n    }\r\n\r\n    // positions and horizontal distances (u)\r\n    let idc: number = 0;\r\n    const closePathCorr: number = closePath ? 1 : 0; // the final index will be +1 if closePath\r\n    let path: Vector3[];\r\n    let l: number;\r\n    minlg = pathArray[0].length;\r\n    let vectlg: number;\r\n    let dist: number;\r\n    for (p = 0; p < pathArray.length; p++) {\r\n        uTotalDistance[p] = 0;\r\n        us[p] = [0];\r\n        path = pathArray[p];\r\n        l = path.length;\r\n        minlg = minlg < l ? minlg : l;\r\n\r\n        j = 0;\r\n        while (j < l) {\r\n            positions.push(path[j].x, path[j].y, path[j].z);\r\n            if (j > 0) {\r\n                vectlg = path[j].subtract(path[j - 1]).length();\r\n                dist = vectlg + uTotalDistance[p];\r\n                us[p].push(dist);\r\n                uTotalDistance[p] = dist;\r\n            }\r\n            j++;\r\n        }\r\n\r\n        if (closePath) {\r\n            // an extra hidden vertex is added in the \"positions\" array\r\n            j--;\r\n            positions.push(path[0].x, path[0].y, path[0].z);\r\n            vectlg = path[j].subtract(path[0]).length();\r\n            dist = vectlg + uTotalDistance[p];\r\n            us[p].push(dist);\r\n            uTotalDistance[p] = dist;\r\n        }\r\n\r\n        lg[p] = l + closePathCorr;\r\n        idx[p] = idc;\r\n        idc += l + closePathCorr;\r\n    }\r\n\r\n    // vertical distances (v)\r\n    let path1: Vector3[];\r\n    let path2: Vector3[];\r\n    let vertex1: Nullable<Vector3> = null;\r\n    let vertex2: Nullable<Vector3> = null;\r\n    for (i = 0; i < minlg + closePathCorr; i++) {\r\n        vTotalDistance[i] = 0;\r\n        vs[i] = [0];\r\n        for (p = 0; p < pathArray.length - 1; p++) {\r\n            path1 = pathArray[p];\r\n            path2 = pathArray[p + 1];\r\n            if (i === minlg) {\r\n                // closePath\r\n                vertex1 = path1[0];\r\n                vertex2 = path2[0];\r\n            } else {\r\n                vertex1 = path1[i];\r\n                vertex2 = path2[i];\r\n            }\r\n            vectlg = vertex2.subtract(vertex1).length();\r\n            dist = vectlg + vTotalDistance[i];\r\n            vs[i].push(dist);\r\n            vTotalDistance[i] = dist;\r\n        }\r\n\r\n        if (closeArray && vertex2 && vertex1) {\r\n            path1 = pathArray[p];\r\n            path2 = pathArray[0];\r\n            if (i === minlg) {\r\n                // closePath\r\n                vertex2 = path2[0];\r\n            }\r\n            vectlg = vertex2.subtract(vertex1).length();\r\n            dist = vectlg + vTotalDistance[i];\r\n            vTotalDistance[i] = dist;\r\n        }\r\n    }\r\n\r\n    // uvs\r\n    let u: number;\r\n    let v: number;\r\n    if (customUV) {\r\n        for (p = 0; p < customUV.length; p++) {\r\n            uvs.push(customUV[p].x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - customUV[p].y : customUV[p].y);\r\n        }\r\n    } else {\r\n        for (p = 0; p < pathArray.length; p++) {\r\n            for (i = 0; i < minlg + closePathCorr; i++) {\r\n                u = uTotalDistance[p] != 0.0 ? us[p][i] / uTotalDistance[p] : 0.0;\r\n                v = vTotalDistance[i] != 0.0 ? vs[i][p] / vTotalDistance[i] : 0.0;\r\n                if (invertUV) {\r\n                    uvs.push(v, u);\r\n                } else {\r\n                    uvs.push(u, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - v : v);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // indices\r\n    p = 0; // path index\r\n    let pi: number = 0; // positions array index\r\n    let l1: number = lg[p] - 1; // path1 length\r\n    let l2: number = lg[p + 1] - 1; // path2 length\r\n    let min: number = l1 < l2 ? l1 : l2; // current path stop index\r\n    let shft: number = idx[1] - idx[0]; // shift\r\n    const path1nb: number = closeArray ? lg.length : lg.length - 1; // number of path1 to iterate\ton\r\n\r\n    while (pi <= min && p < path1nb) {\r\n        //  stay under min and don't go over next to last path\r\n        // draw two triangles between path1 (p1) and path2 (p2) : (p1.pi, p2.pi, p1.pi+1) and (p2.pi+1, p1.pi+1, p2.pi) clockwise\r\n\r\n        indices.push(pi, pi + shft, pi + 1);\r\n        indices.push(pi + shft + 1, pi + 1, pi + shft);\r\n        pi += 1;\r\n        if (pi === min) {\r\n            // if end of one of two consecutive paths reached, go to next existing path\r\n            p++;\r\n            if (p === lg.length - 1) {\r\n                // last path of pathArray reached <=> closeArray == true\r\n                shft = idx[0] - idx[p];\r\n                l1 = lg[p] - 1;\r\n                l2 = lg[0] - 1;\r\n            } else {\r\n                shft = idx[p + 1] - idx[p];\r\n                l1 = lg[p] - 1;\r\n                l2 = lg[p + 1] - 1;\r\n            }\r\n            pi = idx[p];\r\n            min = l1 < l2 ? l1 + pi : l2 + pi;\r\n        }\r\n    }\r\n\r\n    // normals\r\n    VertexData.ComputeNormals(positions, indices, normals);\r\n\r\n    if (closePath) {\r\n        // update both the first and last vertex normals to their average value\r\n        let indexFirst: number = 0;\r\n        let indexLast: number = 0;\r\n        for (p = 0; p < pathArray.length; p++) {\r\n            indexFirst = idx[p] * 3;\r\n            if (p + 1 < pathArray.length) {\r\n                indexLast = (idx[p + 1] - 1) * 3;\r\n            } else {\r\n                indexLast = normals.length - 3;\r\n            }\r\n            normals[indexFirst] = (normals[indexFirst] + normals[indexLast]) * 0.5;\r\n            normals[indexFirst + 1] = (normals[indexFirst + 1] + normals[indexLast + 1]) * 0.5;\r\n            normals[indexFirst + 2] = (normals[indexFirst + 2] + normals[indexLast + 2]) * 0.5;\r\n            normals[indexLast] = normals[indexFirst];\r\n            normals[indexLast + 1] = normals[indexFirst + 1];\r\n            normals[indexLast + 2] = normals[indexFirst + 2];\r\n        }\r\n    }\r\n\r\n    // sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Colors\r\n    let colors: Nullable<Float32Array> = null;\r\n    if (customColors) {\r\n        colors = new Float32Array(customColors.length * 4);\r\n        for (let c = 0; c < customColors.length; c++) {\r\n            colors[c * 4] = customColors[c].r;\r\n            colors[c * 4 + 1] = customColors[c].g;\r\n            colors[c * 4 + 2] = customColors[c].b;\r\n            colors[c * 4 + 3] = customColors[c].a;\r\n        }\r\n    }\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n    const positions32 = new Float32Array(positions);\r\n    const normals32 = new Float32Array(normals);\r\n    const uvs32 = new Float32Array(uvs);\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions32;\r\n    vertexData.normals = normals32;\r\n    vertexData.uvs = uvs32;\r\n    if (colors) {\r\n        vertexData.set(colors, VertexBuffer.ColorKind);\r\n    }\r\n\r\n    if (closePath) {\r\n        (<any>vertexData)._idx = idx;\r\n    }\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a ribbon mesh. The ribbon is a parametric shape.  It has no predefined shape. Its final shape will depend on the input parameters\r\n * * The parameter `pathArray` is a required array of paths, what are each an array of successive Vector3. The pathArray parameter depicts the ribbon geometry\r\n * * The parameter `closeArray` (boolean, default false) creates a seam between the first and the last paths of the path array\r\n * * The parameter `closePath` (boolean, default false) creates a seam between the first and the last points of each path of the path array\r\n * * The parameter `offset` (positive integer, default : rounded half size of the pathArray length), is taken in account only if the `pathArray` is containing a single path\r\n * * It's the offset to join the points from the same path. Ex : offset = 10 means the point 1 is joined to the point 11\r\n * * The optional parameter `instance` is an instance of an existing Ribbon object to be updated with the passed `pathArray` parameter : https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#ribbon\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture\r\n * * The parameter `uvs` is an optional flat array of `Vector2` to update/set each ribbon vertex with its own custom UV values instead of the computed ones\r\n * * The parameters `colors` is an optional flat array of `Color4` to set/update each ribbon vertex with its own custom color values\r\n * * Note that if you use the parameters `uvs` or `colors`, the passed arrays must be populated with the right number of elements, it is to say the number of ribbon vertices. Remember that if you set `closePath` to `true`, there's one extra vertex per path in the geometry\r\n * * Moreover, you can use the parameter `color` with `instance` (to update the ribbon), only if you previously used it at creation time\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.pathArray\r\n * @param options.closeArray\r\n * @param options.closePath\r\n * @param options.offset\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.instance\r\n * @param options.invertUV\r\n * @param options.uvs\r\n * @param options.colors\r\n * @param scene defines the hosting scene\r\n * @returns the ribbon mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param/ribbon_extra\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\r\n */\r\nexport function CreateRibbon(\r\n    name: string,\r\n    options: {\r\n        pathArray: Vector3[][];\r\n        closeArray?: boolean;\r\n        closePath?: boolean;\r\n        offset?: number;\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        instance?: Mesh;\r\n        invertUV?: boolean;\r\n        uvs?: Vector2[];\r\n        colors?: Color4[];\r\n    },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const pathArray = options.pathArray;\r\n    const closeArray = options.closeArray;\r\n    const closePath = options.closePath;\r\n    const sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    const instance = options.instance;\r\n    const updatable = options.updatable;\r\n\r\n    if (instance) {\r\n        // existing ribbon instance update\r\n        // positionFunction : ribbon case\r\n        // only pathArray and sideOrientation parameters are taken into account for positions update\r\n        const minimum = TmpVectors.Vector3[0].setAll(Number.MAX_VALUE);\r\n        const maximum = TmpVectors.Vector3[1].setAll(-Number.MAX_VALUE);\r\n        const positionFunction = (positions: FloatArray) => {\r\n            let minlg = pathArray[0].length;\r\n            const mesh = <Mesh>instance;\r\n            let i = 0;\r\n            const ns = mesh._originalBuilderSideOrientation === Mesh.DOUBLESIDE ? 2 : 1;\r\n            for (let si = 1; si <= ns; ++si) {\r\n                for (let p = 0; p < pathArray.length; ++p) {\r\n                    const path = pathArray[p];\r\n                    const l = path.length;\r\n                    minlg = minlg < l ? minlg : l;\r\n                    for (let j = 0; j < minlg; ++j) {\r\n                        const pathPoint = path[j];\r\n                        positions[i] = pathPoint.x;\r\n                        positions[i + 1] = pathPoint.y;\r\n                        positions[i + 2] = pathPoint.z;\r\n                        minimum.minimizeInPlaceFromFloats(pathPoint.x, pathPoint.y, pathPoint.z);\r\n                        maximum.maximizeInPlaceFromFloats(pathPoint.x, pathPoint.y, pathPoint.z);\r\n                        i += 3;\r\n                    }\r\n                    if (mesh._creationDataStorage && mesh._creationDataStorage.closePath) {\r\n                        const pathPoint = path[0];\r\n                        positions[i] = pathPoint.x;\r\n                        positions[i + 1] = pathPoint.y;\r\n                        positions[i + 2] = pathPoint.z;\r\n                        i += 3;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        const positions = <FloatArray>instance.getVerticesData(VertexBuffer.PositionKind);\r\n        positionFunction(positions);\r\n        if (instance.hasBoundingInfo) {\r\n            instance.getBoundingInfo().reConstruct(minimum, maximum, instance._worldMatrix);\r\n        } else {\r\n            instance.buildBoundingInfo(minimum, maximum, instance._worldMatrix);\r\n        }\r\n        instance.updateVerticesData(VertexBuffer.PositionKind, positions, false, false);\r\n        if (options.colors) {\r\n            const colors = <FloatArray>instance.getVerticesData(VertexBuffer.ColorKind);\r\n            for (let c = 0, colorIndex = 0; c < options.colors.length; c++, colorIndex += 4) {\r\n                const color = options.colors[c];\r\n                colors[colorIndex] = color.r;\r\n                colors[colorIndex + 1] = color.g;\r\n                colors[colorIndex + 2] = color.b;\r\n                colors[colorIndex + 3] = color.a;\r\n            }\r\n            instance.updateVerticesData(VertexBuffer.ColorKind, colors, false, false);\r\n        }\r\n        if (options.uvs) {\r\n            const uvs = <FloatArray>instance.getVerticesData(VertexBuffer.UVKind);\r\n            for (let i = 0; i < options.uvs.length; i++) {\r\n                uvs[i * 2] = options.uvs[i].x;\r\n                uvs[i * 2 + 1] = CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - options.uvs[i].y : options.uvs[i].y;\r\n            }\r\n            instance.updateVerticesData(VertexBuffer.UVKind, uvs, false, false);\r\n        }\r\n        if (!instance.areNormalsFrozen || instance.isFacetDataEnabled) {\r\n            const indices = instance.getIndices();\r\n            const normals = <FloatArray>instance.getVerticesData(VertexBuffer.NormalKind);\r\n            const params = instance.isFacetDataEnabled ? instance.getFacetDataParameters() : null;\r\n            VertexData.ComputeNormals(positions, indices, normals, params);\r\n\r\n            if (instance._creationDataStorage && instance._creationDataStorage.closePath) {\r\n                let indexFirst: number = 0;\r\n                let indexLast: number = 0;\r\n                for (let p = 0; p < pathArray.length; p++) {\r\n                    indexFirst = instance._creationDataStorage!.idx[p] * 3;\r\n                    if (p + 1 < pathArray.length) {\r\n                        indexLast = (instance._creationDataStorage!.idx[p + 1] - 1) * 3;\r\n                    } else {\r\n                        indexLast = normals.length - 3;\r\n                    }\r\n                    normals[indexFirst] = (normals[indexFirst] + normals[indexLast]) * 0.5;\r\n                    normals[indexFirst + 1] = (normals[indexFirst + 1] + normals[indexLast + 1]) * 0.5;\r\n                    normals[indexFirst + 2] = (normals[indexFirst + 2] + normals[indexLast + 2]) * 0.5;\r\n                    normals[indexLast] = normals[indexFirst];\r\n                    normals[indexLast + 1] = normals[indexFirst + 1];\r\n                    normals[indexLast + 2] = normals[indexFirst + 2];\r\n                }\r\n            }\r\n            if (!instance.areNormalsFrozen) {\r\n                instance.updateVerticesData(VertexBuffer.NormalKind, normals, false, false);\r\n            }\r\n        }\r\n\r\n        return instance;\r\n    } else {\r\n        // new ribbon creation\r\n\r\n        const ribbon = new Mesh(name, scene);\r\n        ribbon._originalBuilderSideOrientation = sideOrientation;\r\n        ribbon._creationDataStorage = new _CreationDataStorage();\r\n\r\n        const vertexData = CreateRibbonVertexData(options);\r\n        if (closePath) {\r\n            ribbon._creationDataStorage.idx = (<any>vertexData)._idx;\r\n        }\r\n        ribbon._creationDataStorage.closePath = closePath;\r\n        ribbon._creationDataStorage.closeArray = closeArray;\r\n\r\n        vertexData.applyToMesh(ribbon, updatable);\r\n\r\n        return ribbon;\r\n    }\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use CreateRibbon directly\r\n */\r\nexport const RibbonBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateRibbon,\r\n};\r\n\r\nVertexData.CreateRibbon = CreateRibbonVertexData;\r\n\r\n(Mesh as any).CreateRibbon = (\r\n    name: string,\r\n    pathArray: Vector3[][],\r\n    closeArray: boolean = false,\r\n    closePath: boolean,\r\n    offset: number,\r\n    scene?: Scene,\r\n    updatable: boolean = false,\r\n    sideOrientation?: number,\r\n    instance?: Mesh\r\n) => {\r\n    return CreateRibbon(\r\n        name,\r\n        {\r\n            pathArray: pathArray,\r\n            closeArray: closeArray,\r\n            closePath: closePath,\r\n            offset: offset,\r\n            updatable: updatable,\r\n            sideOrientation: sideOrientation,\r\n            instance: instance,\r\n        },\r\n        scene\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}