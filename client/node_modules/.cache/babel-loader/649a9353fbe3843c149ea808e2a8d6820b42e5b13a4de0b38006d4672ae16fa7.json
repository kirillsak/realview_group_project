{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../tslib.es6.js\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Manage the keyboard inputs to control the movement of a free camera.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\n */\nexport class FreeCameraKeyboardMoveInput {\n  constructor() {\n    /**\n     * Gets or Set the list of keyboard keys used to control the forward move of the camera.\n     */\n    this.keysUp = [38];\n    /**\n     * Gets or Set the list of keyboard keys used to control the upward move of the camera.\n     */\n    this.keysUpward = [33];\n    /**\n     * Gets or Set the list of keyboard keys used to control the backward move of the camera.\n     */\n    this.keysDown = [40];\n    /**\n     * Gets or Set the list of keyboard keys used to control the downward move of the camera.\n     */\n    this.keysDownward = [34];\n    /**\n     * Gets or Set the list of keyboard keys used to control the left strafe move of the camera.\n     */\n    this.keysLeft = [37];\n    /**\n     * Gets or Set the list of keyboard keys used to control the right strafe move of the camera.\n     */\n    this.keysRight = [39];\n    /**\n     * Defines the pointer angular sensibility  along the X and Y axis or how fast is the camera rotating.\n     */\n    this.rotationSpeed = 0.5;\n    /**\n     * Gets or Set the list of keyboard keys used to control the left rotation move of the camera.\n     */\n    this.keysRotateLeft = [];\n    /**\n     * Gets or Set the list of keyboard keys used to control the right rotation move of the camera.\n     */\n    this.keysRotateRight = [];\n    this._keys = new Array();\n  }\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n   */\n  attachControl(noPreventDefault) {\n    // eslint-disable-next-line prefer-rest-params\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n    if (this._onCanvasBlurObserver) {\n      return;\n    }\n    this._scene = this.camera.getScene();\n    this._engine = this._scene.getEngine();\n    this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(() => {\n      this._keys.length = 0;\n    });\n    this._onKeyboardObserver = this._scene.onKeyboardObservable.add(info => {\n      const evt = info.event;\n      if (!evt.metaKey) {\n        if (info.type === KeyboardEventTypes.KEYDOWN) {\n          if (this.keysUp.indexOf(evt.keyCode) !== -1 || this.keysDown.indexOf(evt.keyCode) !== -1 || this.keysLeft.indexOf(evt.keyCode) !== -1 || this.keysRight.indexOf(evt.keyCode) !== -1 || this.keysUpward.indexOf(evt.keyCode) !== -1 || this.keysDownward.indexOf(evt.keyCode) !== -1 || this.keysRotateLeft.indexOf(evt.keyCode) !== -1 || this.keysRotateRight.indexOf(evt.keyCode) !== -1) {\n            const index = this._keys.indexOf(evt.keyCode);\n            if (index === -1) {\n              this._keys.push(evt.keyCode);\n            }\n            if (!noPreventDefault) {\n              evt.preventDefault();\n            }\n          }\n        } else {\n          if (this.keysUp.indexOf(evt.keyCode) !== -1 || this.keysDown.indexOf(evt.keyCode) !== -1 || this.keysLeft.indexOf(evt.keyCode) !== -1 || this.keysRight.indexOf(evt.keyCode) !== -1 || this.keysUpward.indexOf(evt.keyCode) !== -1 || this.keysDownward.indexOf(evt.keyCode) !== -1 || this.keysRotateLeft.indexOf(evt.keyCode) !== -1 || this.keysRotateRight.indexOf(evt.keyCode) !== -1) {\n            const index = this._keys.indexOf(evt.keyCode);\n            if (index >= 0) {\n              this._keys.splice(index, 1);\n            }\n            if (!noPreventDefault) {\n              evt.preventDefault();\n            }\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n  detachControl() {\n    if (this._scene) {\n      if (this._onKeyboardObserver) {\n        this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\n      }\n      if (this._onCanvasBlurObserver) {\n        this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\n      }\n      this._onKeyboardObserver = null;\n      this._onCanvasBlurObserver = null;\n    }\n    this._keys.length = 0;\n  }\n  /**\n   * Update the current camera state depending on the inputs that have been used this frame.\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n   */\n  checkInputs() {\n    if (this._onKeyboardObserver) {\n      const camera = this.camera;\n      // Keyboard\n      for (let index = 0; index < this._keys.length; index++) {\n        const keyCode = this._keys[index];\n        const speed = camera._computeLocalCameraSpeed();\n        if (this.keysLeft.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(-speed, 0, 0);\n        } else if (this.keysUp.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, 0, speed);\n        } else if (this.keysRight.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(speed, 0, 0);\n        } else if (this.keysDown.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, 0, -speed);\n        } else if (this.keysUpward.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, speed, 0);\n        } else if (this.keysDownward.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, -speed, 0);\n        } else if (this.keysRotateLeft.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, 0, 0);\n          camera.cameraRotation.y -= this._getLocalRotation();\n        } else if (this.keysRotateRight.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, 0, 0);\n          camera.cameraRotation.y += this._getLocalRotation();\n        }\n        if (camera.getScene().useRightHandedSystem) {\n          camera._localDirection.z *= -1;\n        }\n        camera.getViewMatrix().invertToRef(camera._cameraTransformMatrix);\n        Vector3.TransformNormalToRef(camera._localDirection, camera._cameraTransformMatrix, camera._transformedDirection);\n        camera.cameraDirection.addInPlace(camera._transformedDirection);\n      }\n    }\n  }\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n  getClassName() {\n    return \"FreeCameraKeyboardMoveInput\";\n  }\n  /** @internal */\n  _onLostFocus() {\n    this._keys.length = 0;\n  }\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n  getSimpleName() {\n    return \"keyboard\";\n  }\n  _getLocalRotation() {\n    let rotation = this.rotationSpeed * this._engine.getDeltaTime() / 1000;\n    if (this.camera.getScene().useRightHandedSystem) {\n      rotation *= -1;\n    }\n    if (this.camera.parent && this.camera.parent._getWorldMatrixDeterminant() < 0) {\n      rotation *= -1;\n    }\n    return rotation;\n  }\n}\n__decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysUp\", void 0);\n__decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysUpward\", void 0);\n__decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysDown\", void 0);\n__decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysDownward\", void 0);\n__decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysLeft\", void 0);\n__decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysRight\", void 0);\n__decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"rotationSpeed\", void 0);\n__decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysRotateLeft\", void 0);\n__decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysRotateRight\", void 0);\nCameraInputTypes[\"FreeCameraKeyboardMoveInput\"] = FreeCameraKeyboardMoveInput;","map":{"version":3,"mappings":"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","names":["serialize","CameraInputTypes","KeyboardEventTypes","Vector3","Tools","FreeCameraKeyboardMoveInput","constructor","Array","attachControl","noPreventDefault","BackCompatCameraNoPreventDefault","arguments","_onCanvasBlurObserver","_scene","camera","getScene","_engine","getEngine","onCanvasBlurObservable","add","_keys","length","_onKeyboardObserver","onKeyboardObservable","info","evt","event","metaKey","type","KEYDOWN","keysUp","indexOf","keyCode","keysDown","keysLeft","keysRight","keysUpward","keysDownward","keysRotateLeft","keysRotateRight","index","push","preventDefault","splice","detachControl","remove","checkInputs","speed","_computeLocalCameraSpeed","_localDirection","copyFromFloats","cameraRotation","y","_getLocalRotation","useRightHandedSystem","z","getViewMatrix","invertToRef","_cameraTransformMatrix","TransformNormalToRef","_transformedDirection","cameraDirection","addInPlace","getClassName","_onLostFocus","getSimpleName","rotation","rotationSpeed","getDeltaTime","parent","_getWorldMatrixDeterminant","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/Inputs/freeCameraKeyboardMoveInput.ts"],"sourcesContent":["import { serialize } from \"../../Misc/decorators\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport type { KeyboardInfo } from \"../../Events/keyboardEvents\";\r\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { Engine } from \"../../Engines/engine\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n/**\r\n * Manage the keyboard inputs to control the movement of a free camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class FreeCameraKeyboardMoveInput implements ICameraInput<FreeCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FreeCamera;\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the forward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysUp = [38];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the upward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysUpward = [33];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the backward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysDown = [40];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the downward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysDownward = [34];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the left strafe move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysLeft = [37];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the right strafe move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysRight = [39];\r\n\r\n    /**\r\n     * Defines the pointer angular sensibility  along the X and Y axis or how fast is the camera rotating.\r\n     */\r\n    @serialize()\r\n    public rotationSpeed = 0.5;\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the left rotation move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysRotateLeft: number[] = [];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the right rotation move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysRotateRight: number[] = [];\r\n\r\n    private _keys = new Array<number>();\r\n    private _onCanvasBlurObserver: Nullable<Observer<Engine>>;\r\n    private _onKeyboardObserver: Nullable<Observer<KeyboardInfo>>;\r\n    private _engine: Engine;\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        if (this._onCanvasBlurObserver) {\r\n            return;\r\n        }\r\n\r\n        this._scene = this.camera.getScene();\r\n        this._engine = this._scene.getEngine();\r\n\r\n        this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(() => {\r\n            this._keys.length = 0;\r\n        });\r\n\r\n        this._onKeyboardObserver = this._scene.onKeyboardObservable.add((info) => {\r\n            const evt = info.event;\r\n            if (!evt.metaKey) {\r\n                if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                    if (\r\n                        this.keysUp.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDown.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRight.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysUpward.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDownward.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateRight.indexOf(evt.keyCode) !== -1\r\n                    ) {\r\n                        const index = this._keys.indexOf(evt.keyCode);\r\n\r\n                        if (index === -1) {\r\n                            this._keys.push(evt.keyCode);\r\n                        }\r\n                        if (!noPreventDefault) {\r\n                            evt.preventDefault();\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (\r\n                        this.keysUp.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDown.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRight.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysUpward.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDownward.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateRight.indexOf(evt.keyCode) !== -1\r\n                    ) {\r\n                        const index = this._keys.indexOf(evt.keyCode);\r\n\r\n                        if (index >= 0) {\r\n                            this._keys.splice(index, 1);\r\n                        }\r\n                        if (!noPreventDefault) {\r\n                            evt.preventDefault();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        if (this._scene) {\r\n            if (this._onKeyboardObserver) {\r\n                this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\r\n            }\r\n\r\n            if (this._onCanvasBlurObserver) {\r\n                this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\r\n            }\r\n            this._onKeyboardObserver = null;\r\n            this._onCanvasBlurObserver = null;\r\n        }\r\n        this._keys.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this._onKeyboardObserver) {\r\n            const camera = this.camera;\r\n            // Keyboard\r\n            for (let index = 0; index < this._keys.length; index++) {\r\n                const keyCode = this._keys[index];\r\n                const speed = camera._computeLocalCameraSpeed();\r\n\r\n                if (this.keysLeft.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(-speed, 0, 0);\r\n                } else if (this.keysUp.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, speed);\r\n                } else if (this.keysRight.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(speed, 0, 0);\r\n                } else if (this.keysDown.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, -speed);\r\n                } else if (this.keysUpward.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, speed, 0);\r\n                } else if (this.keysDownward.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, -speed, 0);\r\n                } else if (this.keysRotateLeft.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, 0);\r\n                    camera.cameraRotation.y -= this._getLocalRotation();\r\n                } else if (this.keysRotateRight.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, 0);\r\n                    camera.cameraRotation.y += this._getLocalRotation();\r\n                }\r\n\r\n                if (camera.getScene().useRightHandedSystem) {\r\n                    camera._localDirection.z *= -1;\r\n                }\r\n\r\n                camera.getViewMatrix().invertToRef(camera._cameraTransformMatrix);\r\n                Vector3.TransformNormalToRef(camera._localDirection, camera._cameraTransformMatrix, camera._transformedDirection);\r\n                camera.cameraDirection.addInPlace(camera._transformedDirection);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraKeyboardMoveInput\";\r\n    }\r\n\r\n    /** @internal */\r\n    public _onLostFocus(): void {\r\n        this._keys.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"keyboard\";\r\n    }\r\n\r\n    private _getLocalRotation(): number {\r\n        let rotation = (this.rotationSpeed * this._engine.getDeltaTime()) / 1000;\r\n        if (this.camera.getScene().useRightHandedSystem) {\r\n            rotation *= -1;\r\n        }\r\n        if (this.camera.parent && this.camera.parent._getWorldMatrixDeterminant() < 0) {\r\n            rotation *= -1;\r\n        }\r\n        return rotation;\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraKeyboardMoveInput\"] = FreeCameraKeyboardMoveInput;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}