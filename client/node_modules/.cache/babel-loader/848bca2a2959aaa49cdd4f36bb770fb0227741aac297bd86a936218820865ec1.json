{"ast":null,"code":"/**\n * Gather the list of keyboard event types as constants.\n */\nexport class KeyboardEventTypes {}\n/**\n * The keydown event is fired when a key becomes active (pressed).\n */\nKeyboardEventTypes.KEYDOWN = 0x01;\n/**\n * The keyup event is fired when a key has been released.\n */\nKeyboardEventTypes.KEYUP = 0x02;\n/**\n * This class is used to store keyboard related info for the onKeyboardObservable event.\n */\nexport class KeyboardInfo {\n  /**\n   * Instantiates a new keyboard info.\n   * This class is used to store keyboard related info for the onKeyboardObservable event.\n   * @param type Defines the type of event (KeyboardEventTypes)\n   * @param event Defines the related dom event\n   */\n  constructor(\n  /**\n   * Defines the type of event (KeyboardEventTypes)\n   */\n  type,\n  /**\n   * Defines the related dom event\n   */\n  event) {\n    this.type = type;\n    this.event = event;\n  }\n}\n/**\n * This class is used to store keyboard related info for the onPreKeyboardObservable event.\n * Set the skipOnKeyboardObservable property to true if you want the engine to stop any process after this event is triggered, even not calling onKeyboardObservable\n */\nexport class KeyboardInfoPre extends KeyboardInfo {\n  /**\n   * Instantiates a new keyboard pre info.\n   * This class is used to store keyboard related info for the onPreKeyboardObservable event.\n   * @param type Defines the type of event (KeyboardEventTypes)\n   * @param event Defines the related dom event\n   */\n  constructor(\n  /**\n   * Defines the type of event (KeyboardEventTypes)\n   */\n  type,\n  /**\n   * Defines the related dom event\n   */\n  event) {\n    super(type, event);\n    this.type = type;\n    this.event = event;\n    this.skipOnKeyboardObservable = false;\n  }\n  /**\n   * Defines whether the engine should skip the next onKeyboardObservable associated to this pre.\n   * @deprecated use skipOnKeyboardObservable property instead\n   */\n  get skipOnPointerObservable() {\n    return this.skipOnKeyboardObservable;\n  }\n  set skipOnPointerObservable(value) {\n    this.skipOnKeyboardObservable = value;\n  }\n}","map":{"version":3,"mappings":"AAEA;;;AAGA,OAAM,MAAOA,kBAAkB;AAC3B;;;AAGuBA,0BAAO,GAAG,IAAI;AACrC;;;AAGuBA,wBAAK,GAAG,IAAI;AAGvC;;;AAGA,OAAM,MAAOC,YAAY;EACrB;;;;;;EAMAC;EACI;;;EAGOC,IAAY;EACnB;;;EAGOC,KAAqB;IAJrB,SAAI,GAAJD,IAAI;IAIJ,UAAK,GAALC,KAAK;EACb;;AAGP;;;;AAIA,OAAM,MAAOC,eAAgB,SAAQJ,YAAY;EAiB7C;;;;;;EAMAC;EACI;;;EAGOC,IAAY;EACnB;;;EAGOC,KAAqB;IAE5B,KAAK,CAACD,IAAI,EAAEC,KAAK,CAAC;IANX,SAAI,GAAJD,IAAI;IAIJ,UAAK,GAALC,KAAK;IAGZ,IAAI,CAACE,wBAAwB,GAAG,KAAK;EACzC;EA7BA;;;;EAIA,IAAWC,uBAAuB;IAC9B,OAAO,IAAI,CAACD,wBAAwB;EACxC;EACA,IAAWC,uBAAuB,CAACC,KAAK;IACpC,IAAI,CAACF,wBAAwB,GAAGE,KAAK;EACzC","names":["KeyboardEventTypes","KeyboardInfo","constructor","type","event","KeyboardInfoPre","skipOnKeyboardObservable","skipOnPointerObservable","value"],"sourceRoot":"","sources":["../../../../lts/core/generated/Events/keyboardEvents.ts"],"sourcesContent":["import type { IKeyboardEvent } from \"./deviceInputEvents\";\r\n\r\n/**\r\n * Gather the list of keyboard event types as constants.\r\n */\r\nexport class KeyboardEventTypes {\r\n    /**\r\n     * The keydown event is fired when a key becomes active (pressed).\r\n     */\r\n    public static readonly KEYDOWN = 0x01;\r\n    /**\r\n     * The keyup event is fired when a key has been released.\r\n     */\r\n    public static readonly KEYUP = 0x02;\r\n}\r\n\r\n/**\r\n * This class is used to store keyboard related info for the onKeyboardObservable event.\r\n */\r\nexport class KeyboardInfo {\r\n    /**\r\n     * Instantiates a new keyboard info.\r\n     * This class is used to store keyboard related info for the onKeyboardObservable event.\r\n     * @param type Defines the type of event (KeyboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (KeyboardEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: IKeyboardEvent\r\n    ) {}\r\n}\r\n\r\n/**\r\n * This class is used to store keyboard related info for the onPreKeyboardObservable event.\r\n * Set the skipOnKeyboardObservable property to true if you want the engine to stop any process after this event is triggered, even not calling onKeyboardObservable\r\n */\r\nexport class KeyboardInfoPre extends KeyboardInfo {\r\n    /**\r\n     * Defines whether the engine should skip the next onKeyboardObservable associated to this pre.\r\n     */\r\n    public skipOnKeyboardObservable: boolean;\r\n\r\n    /**\r\n     * Defines whether the engine should skip the next onKeyboardObservable associated to this pre.\r\n     * @deprecated use skipOnKeyboardObservable property instead\r\n     */\r\n    public get skipOnPointerObservable() {\r\n        return this.skipOnKeyboardObservable;\r\n    }\r\n    public set skipOnPointerObservable(value) {\r\n        this.skipOnKeyboardObservable = value;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new keyboard pre info.\r\n     * This class is used to store keyboard related info for the onPreKeyboardObservable event.\r\n     * @param type Defines the type of event (KeyboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (KeyboardEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: IKeyboardEvent\r\n    ) {\r\n        super(type, event);\r\n        this.skipOnKeyboardObservable = false;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}