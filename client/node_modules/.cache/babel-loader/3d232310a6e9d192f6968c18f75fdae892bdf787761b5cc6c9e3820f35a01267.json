{"ast":null,"code":"/**\n * Gather the list of clipboard event types as constants.\n */\nexport class ClipboardEventTypes {}\n/**\n * The clipboard event is fired when a copy command is active (pressed).\n */\nClipboardEventTypes.COPY = 0x01; //\n/**\n *  The clipboard event is fired when a cut command is active (pressed).\n */\nClipboardEventTypes.CUT = 0x02;\n/**\n * The clipboard event is fired when a paste command is active (pressed).\n */\nClipboardEventTypes.PASTE = 0x03;\n/**\n * This class is used to store clipboard related info for the onClipboardObservable event.\n */\nexport class ClipboardInfo {\n  /**\n   *Creates an instance of ClipboardInfo.\n   * @param type Defines the type of event (BABYLON.ClipboardEventTypes)\n   * @param event Defines the related dom event\n   */\n  constructor(\n  /**\n   * Defines the type of event (BABYLON.ClipboardEventTypes)\n   */\n  type,\n  /**\n   * Defines the related dom event\n   */\n  event) {\n    this.type = type;\n    this.event = event;\n  }\n  /**\n   *  Get the clipboard event's type from the keycode.\n   * @param keyCode Defines the keyCode for the current keyboard event.\n   * @returns {number}\n   */\n  static GetTypeFromCharacter(keyCode) {\n    const charCode = keyCode;\n    //TODO: add codes for extended ASCII\n    switch (charCode) {\n      case 67:\n        return ClipboardEventTypes.COPY;\n      case 86:\n        return ClipboardEventTypes.PASTE;\n      case 88:\n        return ClipboardEventTypes.CUT;\n      default:\n        return -1;\n    }\n  }\n}","map":{"version":3,"mappings":"AAAA;;;AAGA,OAAM,MAAOA,mBAAmB;AAC5B;;;AAGuBA,wBAAI,GAAG,IAAI,CAAC,CAAC;AACpC;;;AAGuBA,uBAAG,GAAG,IAAI;AAEjC;;;AAGuBA,yBAAK,GAAG,IAAI;AAEvC;;;AAGA,OAAM,MAAOC,aAAa;EACtB;;;;;EAKAC;EACI;;;EAGOC,IAAY;EACnB;;;EAGOC,KAAqB;IAJrB,SAAI,GAAJD,IAAI;IAIJ,UAAK,GAALC,KAAK;EACb;EAEH;;;;;EAKO,OAAOC,oBAAoB,CAACC,OAAe;IAC9C,MAAMC,QAAQ,GAAGD,OAAO;IACxB;IACA,QAAQC,QAAQ;MACZ,KAAK,EAAE;QACH,OAAOP,mBAAmB,CAACQ,IAAI;MACnC,KAAK,EAAE;QACH,OAAOR,mBAAmB,CAACS,KAAK;MACpC,KAAK,EAAE;QACH,OAAOT,mBAAmB,CAACU,GAAG;MAClC;QACI,OAAO,CAAC,CAAC;IAAC;EAEtB","names":["ClipboardEventTypes","ClipboardInfo","constructor","type","event","GetTypeFromCharacter","keyCode","charCode","COPY","PASTE","CUT"],"sourceRoot":"","sources":["../../../../lts/core/generated/Events/clipboardEvents.ts"],"sourcesContent":["/**\r\n * Gather the list of clipboard event types as constants.\r\n */\r\nexport class ClipboardEventTypes {\r\n    /**\r\n     * The clipboard event is fired when a copy command is active (pressed).\r\n     */\r\n    public static readonly COPY = 0x01; //\r\n    /**\r\n     *  The clipboard event is fired when a cut command is active (pressed).\r\n     */\r\n    public static readonly CUT = 0x02;\r\n\r\n    /**\r\n     * The clipboard event is fired when a paste command is active (pressed).\r\n     */\r\n    public static readonly PASTE = 0x03;\r\n}\r\n/**\r\n * This class is used to store clipboard related info for the onClipboardObservable event.\r\n */\r\nexport class ClipboardInfo {\r\n    /**\r\n     *Creates an instance of ClipboardInfo.\r\n     * @param type Defines the type of event (BABYLON.ClipboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (BABYLON.ClipboardEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: ClipboardEvent\r\n    ) {}\r\n\r\n    /**\r\n     *  Get the clipboard event's type from the keycode.\r\n     * @param keyCode Defines the keyCode for the current keyboard event.\r\n     * @returns {number}\r\n     */\r\n    public static GetTypeFromCharacter(keyCode: number): number {\r\n        const charCode = keyCode;\r\n        //TODO: add codes for extended ASCII\r\n        switch (charCode) {\r\n            case 67:\r\n                return ClipboardEventTypes.COPY;\r\n            case 86:\r\n                return ClipboardEventTypes.PASTE;\r\n            case 88:\r\n                return ClipboardEventTypes.CUT;\r\n            default:\r\n                return -1;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}