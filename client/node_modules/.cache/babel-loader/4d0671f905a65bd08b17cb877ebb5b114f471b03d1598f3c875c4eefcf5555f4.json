{"ast":null,"code":"import { WebXRAbstractMotionController } from \"./webXRAbstractMotionController.js\";\nimport { WebXRMotionControllerManager } from \"./webXRMotionControllerManager.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { Quaternion } from \"../../Maths/math.vector.js\";\n/**\n * The motion controller class for oculus touch (quest, rift).\n * This class supports legacy mapping as well the standard xr mapping\n */\nexport class WebXROculusTouchMotionController extends WebXRAbstractMotionController {\n  constructor(scene, gamepadObject, handedness, _legacyMapping = false, _forceLegacyControllers = false) {\n    super(scene, OculusTouchLayouts[handedness], gamepadObject, handedness);\n    this._forceLegacyControllers = _forceLegacyControllers;\n    this.profileId = \"oculus-touch\";\n  }\n  _getFilenameAndPath() {\n    let filename = \"\";\n    if (this.handedness === \"left\") {\n      filename = WebXROculusTouchMotionController.MODEL_LEFT_FILENAME;\n    } else {\n      // Right is the default if no hand is specified\n      filename = WebXROculusTouchMotionController.MODEL_RIGHT_FILENAME;\n    }\n    const path = this._isQuest() ? WebXROculusTouchMotionController.QUEST_MODEL_BASE_URL : WebXROculusTouchMotionController.MODEL_BASE_URL;\n    return {\n      filename,\n      path\n    };\n  }\n  _getModelLoadingConstraints() {\n    return true;\n  }\n  _processLoadedModel(_meshes) {\n    const isQuest = this._isQuest();\n    const triggerDirection = this.handedness === \"right\" ? -1 : 1;\n    this.getComponentIds().forEach(id => {\n      const comp = id && this.getComponent(id);\n      if (comp) {\n        comp.onButtonStateChangedObservable.add(component => {\n          if (!this.rootMesh || this.disableAnimation) {\n            return;\n          }\n          switch (id) {\n            case \"xr-standard-trigger\":\n              // index trigger\n              if (!isQuest) {\n                this._modelRootNode.getChildren()[3].rotation.x = -component.value * 0.2;\n                this._modelRootNode.getChildren()[3].position.y = -component.value * 0.005;\n                this._modelRootNode.getChildren()[3].position.z = -component.value * 0.005;\n              }\n              return;\n            case \"xr-standard-squeeze\":\n              // secondary trigger\n              if (!isQuest) {\n                this._modelRootNode.getChildren()[4].position.x = triggerDirection * component.value * 0.0035;\n              }\n              return;\n            case \"xr-standard-thumbstick\":\n              // thumbstick\n              return;\n            case \"a-button\":\n            case \"x-button\":\n              if (!isQuest) {\n                if (component.pressed) {\n                  this._modelRootNode.getChildren()[1].position.y = -0.001;\n                } else {\n                  this._modelRootNode.getChildren()[1].position.y = 0;\n                }\n              }\n              return;\n            case \"b-button\":\n            case \"y-button\":\n              if (!isQuest) {\n                if (component.pressed) {\n                  this._modelRootNode.getChildren()[2].position.y = -0.001;\n                } else {\n                  this._modelRootNode.getChildren()[2].position.y = 0;\n                }\n              }\n              return;\n          }\n        }, undefined, true);\n      }\n    });\n  }\n  _setRootMesh(meshes) {\n    this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\n    if (!this.scene.useRightHandedSystem) {\n      this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\n    }\n    meshes.forEach(mesh => {\n      mesh.isPickable = false;\n    });\n    if (this._isQuest()) {\n      this._modelRootNode = meshes[0];\n    } else {\n      this._modelRootNode = meshes[1];\n      this.rootMesh.position.y = 0.034;\n      this.rootMesh.position.z = 0.052;\n    }\n    this._modelRootNode.parent = this.rootMesh;\n  }\n  _updateModel() {\n    // no-op. model is updated using observables.\n  }\n  /**\n   * Is this the new type of oculus touch. At the moment both have the same profile and it is impossible to differentiate\n   * between the touch and touch 2.\n   */\n  _isQuest() {\n    // this is SADLY the only way to currently check. Until proper profiles will be available.\n    return !!navigator.userAgent.match(/Quest/gi) && !this._forceLegacyControllers;\n  }\n}\n/**\n * The base url used to load the left and right controller models\n */\nWebXROculusTouchMotionController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/oculus/\";\n/**\n * The name of the left controller model file\n */\nWebXROculusTouchMotionController.MODEL_LEFT_FILENAME = \"left.babylon\";\n/**\n * The name of the right controller model file\n */\nWebXROculusTouchMotionController.MODEL_RIGHT_FILENAME = \"right.babylon\";\n/**\n * Base Url for the Quest controller model.\n */\nWebXROculusTouchMotionController.QUEST_MODEL_BASE_URL = \"https://controllers.babylonjs.com/oculusQuest/\";\n// register the profile\nWebXRMotionControllerManager.RegisterController(\"oculus-touch\", (xrInput, scene) => {\n  return new WebXROculusTouchMotionController(scene, xrInput.gamepad, xrInput.handedness);\n});\nWebXRMotionControllerManager.RegisterController(\"oculus-touch-legacy\", (xrInput, scene) => {\n  return new WebXROculusTouchMotionController(scene, xrInput.gamepad, xrInput.handedness, true);\n});\nconst OculusTouchLayouts = {\n  left: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {}\n      },\n      \"xr-standard-squeeze\": {\n        type: \"squeeze\",\n        gamepadIndices: {\n          button: 1\n        },\n        rootNodeName: \"xr_standard_squeeze\",\n        visualResponses: {}\n      },\n      \"xr-standard-thumbstick\": {\n        type: \"thumbstick\",\n        gamepadIndices: {\n          button: 3,\n          xAxis: 2,\n          yAxis: 3\n        },\n        rootNodeName: \"xr_standard_thumbstick\",\n        visualResponses: {}\n      },\n      \"x-button\": {\n        type: \"button\",\n        gamepadIndices: {\n          button: 4\n        },\n        rootNodeName: \"x_button\",\n        visualResponses: {}\n      },\n      \"y-button\": {\n        type: \"button\",\n        gamepadIndices: {\n          button: 5\n        },\n        rootNodeName: \"y_button\",\n        visualResponses: {}\n      },\n      thumbrest: {\n        type: \"button\",\n        gamepadIndices: {\n          button: 6\n        },\n        rootNodeName: \"thumbrest\",\n        visualResponses: {}\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"oculus-touch-v2-left\",\n    assetPath: \"left.glb\"\n  },\n  right: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {}\n      },\n      \"xr-standard-squeeze\": {\n        type: \"squeeze\",\n        gamepadIndices: {\n          button: 1\n        },\n        rootNodeName: \"xr_standard_squeeze\",\n        visualResponses: {}\n      },\n      \"xr-standard-thumbstick\": {\n        type: \"thumbstick\",\n        gamepadIndices: {\n          button: 3,\n          xAxis: 2,\n          yAxis: 3\n        },\n        rootNodeName: \"xr_standard_thumbstick\",\n        visualResponses: {}\n      },\n      \"a-button\": {\n        type: \"button\",\n        gamepadIndices: {\n          button: 4\n        },\n        rootNodeName: \"a_button\",\n        visualResponses: {}\n      },\n      \"b-button\": {\n        type: \"button\",\n        gamepadIndices: {\n          button: 5\n        },\n        rootNodeName: \"b_button\",\n        visualResponses: {}\n      },\n      thumbrest: {\n        type: \"button\",\n        gamepadIndices: {\n          button: 6\n        },\n        rootNodeName: \"thumbrest\",\n        visualResponses: {}\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"oculus-touch-v2-right\",\n    assetPath: \"right.glb\"\n  }\n};","map":{"version":3,"mappings":"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","names":["WebXRAbstractMotionController","WebXRMotionControllerManager","Mesh","Quaternion","WebXROculusTouchMotionController","constructor","scene","gamepadObject","handedness","_legacyMapping","_forceLegacyControllers","OculusTouchLayouts","_getFilenameAndPath","filename","MODEL_LEFT_FILENAME","MODEL_RIGHT_FILENAME","path","_isQuest","QUEST_MODEL_BASE_URL","MODEL_BASE_URL","_getModelLoadingConstraints","_processLoadedModel","_meshes","isQuest","triggerDirection","getComponentIds","forEach","id","comp","getComponent","onButtonStateChangedObservable","add","component","rootMesh","disableAnimation","_modelRootNode","getChildren","rotation","x","value","position","y","z","pressed","undefined","_setRootMesh","meshes","profileId","useRightHandedSystem","rotationQuaternion","FromEulerAngles","Math","PI","mesh","isPickable","parent","_updateModel","navigator","userAgent","match","RegisterController","xrInput","gamepad","left","selectComponentId","components","type","gamepadIndices","button","rootNodeName","visualResponses","xAxis","yAxis","thumbrest","gamepadMapping","assetPath","right"],"sourceRoot":"","sources":["../../../../../lts/core/generated/XR/motionController/webXROculusTouchMotionController.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { IMinimalMotionControllerObject, MotionControllerHandedness, IMotionControllerLayoutMap } from \"./webXRAbstractMotionController\";\r\nimport { WebXRAbstractMotionController } from \"./webXRAbstractMotionController\";\r\nimport { WebXRMotionControllerManager } from \"./webXRMotionControllerManager\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { Quaternion } from \"../../Maths/math.vector\";\r\n\r\n/**\r\n * The motion controller class for oculus touch (quest, rift).\r\n * This class supports legacy mapping as well the standard xr mapping\r\n */\r\nexport class WebXROculusTouchMotionController extends WebXRAbstractMotionController {\r\n    private _modelRootNode: AbstractMesh;\r\n\r\n    /**\r\n     * The base url used to load the left and right controller models\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/oculus/\";\r\n    /**\r\n     * The name of the left controller model file\r\n     */\r\n    public static MODEL_LEFT_FILENAME: string = \"left.babylon\";\r\n    /**\r\n     * The name of the right controller model file\r\n     */\r\n    public static MODEL_RIGHT_FILENAME: string = \"right.babylon\";\r\n    /**\r\n     * Base Url for the Quest controller model.\r\n     */\r\n    public static QUEST_MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/oculusQuest/\";\r\n\r\n    public profileId = \"oculus-touch\";\r\n\r\n    constructor(\r\n        scene: Scene,\r\n        gamepadObject: IMinimalMotionControllerObject,\r\n        handedness: MotionControllerHandedness,\r\n        _legacyMapping: boolean = false,\r\n        private _forceLegacyControllers: boolean = false\r\n    ) {\r\n        super(scene, OculusTouchLayouts[handedness], gamepadObject, handedness);\r\n    }\r\n\r\n    protected _getFilenameAndPath(): { filename: string; path: string } {\r\n        let filename = \"\";\r\n        if (this.handedness === \"left\") {\r\n            filename = WebXROculusTouchMotionController.MODEL_LEFT_FILENAME;\r\n        } else {\r\n            // Right is the default if no hand is specified\r\n            filename = WebXROculusTouchMotionController.MODEL_RIGHT_FILENAME;\r\n        }\r\n\r\n        const path = this._isQuest() ? WebXROculusTouchMotionController.QUEST_MODEL_BASE_URL : WebXROculusTouchMotionController.MODEL_BASE_URL;\r\n        return {\r\n            filename,\r\n            path,\r\n        };\r\n    }\r\n\r\n    protected _getModelLoadingConstraints(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected _processLoadedModel(_meshes: AbstractMesh[]): void {\r\n        const isQuest = this._isQuest();\r\n        const triggerDirection = this.handedness === \"right\" ? -1 : 1;\r\n\r\n        this.getComponentIds().forEach((id) => {\r\n            const comp = id && this.getComponent(id);\r\n            if (comp) {\r\n                comp.onButtonStateChangedObservable.add(\r\n                    (component) => {\r\n                        if (!this.rootMesh || this.disableAnimation) {\r\n                            return;\r\n                        }\r\n\r\n                        switch (id) {\r\n                            case \"xr-standard-trigger\": // index trigger\r\n                                if (!isQuest) {\r\n                                    (<AbstractMesh>this._modelRootNode.getChildren()[3]).rotation.x = -component.value * 0.2;\r\n                                    (<AbstractMesh>this._modelRootNode.getChildren()[3]).position.y = -component.value * 0.005;\r\n                                    (<AbstractMesh>this._modelRootNode.getChildren()[3]).position.z = -component.value * 0.005;\r\n                                }\r\n                                return;\r\n                            case \"xr-standard-squeeze\": // secondary trigger\r\n                                if (!isQuest) {\r\n                                    (<AbstractMesh>this._modelRootNode.getChildren()[4]).position.x = triggerDirection * component.value * 0.0035;\r\n                                }\r\n                                return;\r\n                            case \"xr-standard-thumbstick\": // thumbstick\r\n                                return;\r\n                            case \"a-button\":\r\n                            case \"x-button\":\r\n                                if (!isQuest) {\r\n                                    if (component.pressed) {\r\n                                        (<AbstractMesh>this._modelRootNode.getChildren()[1]).position.y = -0.001;\r\n                                    } else {\r\n                                        (<AbstractMesh>this._modelRootNode.getChildren()[1]).position.y = 0;\r\n                                    }\r\n                                }\r\n                                return;\r\n                            case \"b-button\":\r\n                            case \"y-button\":\r\n                                if (!isQuest) {\r\n                                    if (component.pressed) {\r\n                                        (<AbstractMesh>this._modelRootNode.getChildren()[2]).position.y = -0.001;\r\n                                    } else {\r\n                                        (<AbstractMesh>this._modelRootNode.getChildren()[2]).position.y = 0;\r\n                                    }\r\n                                }\r\n                                return;\r\n                        }\r\n                    },\r\n                    undefined,\r\n                    true\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    protected _setRootMesh(meshes: AbstractMesh[]): void {\r\n        this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\r\n        if (!this.scene.useRightHandedSystem) {\r\n            this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\r\n        }\r\n\r\n        meshes.forEach((mesh) => {\r\n            mesh.isPickable = false;\r\n        });\r\n        if (this._isQuest()) {\r\n            this._modelRootNode = meshes[0];\r\n        } else {\r\n            this._modelRootNode = meshes[1];\r\n            this.rootMesh.position.y = 0.034;\r\n            this.rootMesh.position.z = 0.052;\r\n        }\r\n        this._modelRootNode.parent = this.rootMesh;\r\n    }\r\n\r\n    protected _updateModel(): void {\r\n        // no-op. model is updated using observables.\r\n    }\r\n\r\n    /**\r\n     * Is this the new type of oculus touch. At the moment both have the same profile and it is impossible to differentiate\r\n     * between the touch and touch 2.\r\n     */\r\n    private _isQuest() {\r\n        // this is SADLY the only way to currently check. Until proper profiles will be available.\r\n        return !!navigator.userAgent.match(/Quest/gi) && !this._forceLegacyControllers;\r\n    }\r\n}\r\n\r\n// register the profile\r\nWebXRMotionControllerManager.RegisterController(\"oculus-touch\", (xrInput: XRInputSource, scene: Scene) => {\r\n    return new WebXROculusTouchMotionController(scene, <any>xrInput.gamepad, xrInput.handedness);\r\n});\r\n\r\nWebXRMotionControllerManager.RegisterController(\"oculus-touch-legacy\", (xrInput: XRInputSource, scene: Scene) => {\r\n    return new WebXROculusTouchMotionController(scene, <any>xrInput.gamepad, xrInput.handedness, true);\r\n});\r\n\r\nconst OculusTouchLayouts: IMotionControllerLayoutMap = {\r\n    left: {\r\n        selectComponentId: \"xr-standard-trigger\",\r\n        components: {\r\n            \"xr-standard-trigger\": {\r\n                type: \"trigger\",\r\n                gamepadIndices: {\r\n                    button: 0,\r\n                },\r\n                rootNodeName: \"xr_standard_trigger\",\r\n                visualResponses: {},\r\n            },\r\n            \"xr-standard-squeeze\": {\r\n                type: \"squeeze\",\r\n                gamepadIndices: {\r\n                    button: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_squeeze\",\r\n                visualResponses: {},\r\n            },\r\n            \"xr-standard-thumbstick\": {\r\n                type: \"thumbstick\",\r\n                gamepadIndices: {\r\n                    button: 3,\r\n                    xAxis: 2,\r\n                    yAxis: 3,\r\n                },\r\n                rootNodeName: \"xr_standard_thumbstick\",\r\n                visualResponses: {},\r\n            },\r\n            \"x-button\": {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 4,\r\n                },\r\n                rootNodeName: \"x_button\",\r\n                visualResponses: {},\r\n            },\r\n            \"y-button\": {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 5,\r\n                },\r\n                rootNodeName: \"y_button\",\r\n                visualResponses: {},\r\n            },\r\n            thumbrest: {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 6,\r\n                },\r\n                rootNodeName: \"thumbrest\",\r\n                visualResponses: {},\r\n            },\r\n        },\r\n        gamepadMapping: \"xr-standard\",\r\n        rootNodeName: \"oculus-touch-v2-left\",\r\n        assetPath: \"left.glb\",\r\n    },\r\n    right: {\r\n        selectComponentId: \"xr-standard-trigger\",\r\n        components: {\r\n            \"xr-standard-trigger\": {\r\n                type: \"trigger\",\r\n                gamepadIndices: {\r\n                    button: 0,\r\n                },\r\n                rootNodeName: \"xr_standard_trigger\",\r\n                visualResponses: {},\r\n            },\r\n            \"xr-standard-squeeze\": {\r\n                type: \"squeeze\",\r\n                gamepadIndices: {\r\n                    button: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_squeeze\",\r\n                visualResponses: {},\r\n            },\r\n            \"xr-standard-thumbstick\": {\r\n                type: \"thumbstick\",\r\n                gamepadIndices: {\r\n                    button: 3,\r\n                    xAxis: 2,\r\n                    yAxis: 3,\r\n                },\r\n                rootNodeName: \"xr_standard_thumbstick\",\r\n                visualResponses: {},\r\n            },\r\n            \"a-button\": {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 4,\r\n                },\r\n                rootNodeName: \"a_button\",\r\n                visualResponses: {},\r\n            },\r\n            \"b-button\": {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 5,\r\n                },\r\n                rootNodeName: \"b_button\",\r\n                visualResponses: {},\r\n            },\r\n            thumbrest: {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 6,\r\n                },\r\n                rootNodeName: \"thumbrest\",\r\n                visualResponses: {},\r\n            },\r\n        },\r\n        gamepadMapping: \"xr-standard\",\r\n        rootNodeName: \"oculus-touch-v2-right\",\r\n        assetPath: \"right.glb\",\r\n    },\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}