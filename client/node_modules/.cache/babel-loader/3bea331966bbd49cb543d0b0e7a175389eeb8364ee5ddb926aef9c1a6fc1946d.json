{"ast":null,"code":"import \"core-js/modules/es.array.unshift.js\";\nimport { KhronosTextureContainer } from \"../../../Misc/khronosTextureContainer.js\";\nimport { KhronosTextureContainer2 } from \"../../../Misc/khronosTextureContainer2.js\";\nimport { Engine } from \"../../../Engines/engine.js\";\nimport { Logger } from \"../../../Misc/logger.js\";\nfunction mapSRGBToLinear(format) {\n  switch (format) {\n    case 35916:\n      return 33776;\n    case 35918:\n      return 33778;\n    case 35919:\n      return 33779;\n    case 37493:\n      return 37492;\n    case 37497:\n      return 37496;\n    case 37495:\n      return 37494;\n    case 37840:\n      return 37808;\n    case 36493:\n      return 36492;\n  }\n  return null;\n}\n/**\n * Implementation of the KTX Texture Loader.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _KTXTextureLoader {\n  constructor() {\n    /**\n     * Defines whether the loader supports cascade loading the different faces.\n     */\n    this.supportCascades = false;\n  }\n  /**\n   * This returns if the loader support the current file information.\n   * @param extension defines the file extension of the file being loaded\n   * @param mimeType defines the optional mime type of the file being loaded\n   * @returns true if the loader can load the specified file\n   */\n  canLoad(extension, mimeType) {\n    // The \".ktx2\" file extension is still up for debate: https://github.com/KhronosGroup/KTX-Specification/issues/18\n    return extension.endsWith(\".ktx\") || extension.endsWith(\".ktx2\") || mimeType === \"image/ktx\" || mimeType === \"image/ktx2\";\n  }\n  /**\n   * Uploads the cube texture data to the WebGL texture. It has already been bound.\n   * @param data contains the texture data\n   * @param texture defines the BabylonJS internal texture\n   * @param createPolynomials will be true if polynomials have been requested\n   * @param onLoad defines the callback to trigger once the texture is ready\n   */\n  loadCubeData(data, texture, createPolynomials, onLoad) {\n    if (Array.isArray(data)) {\n      return;\n    }\n    // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\n    texture._invertVScale = !texture.invertY;\n    const engine = texture.getEngine();\n    const ktx = new KhronosTextureContainer(data, 6);\n    const loadMipmap = ktx.numberOfMipmapLevels > 1 && texture.generateMipMaps;\n    engine._unpackFlipY(true);\n    ktx.uploadLevels(texture, texture.generateMipMaps);\n    texture.width = ktx.pixelWidth;\n    texture.height = ktx.pixelHeight;\n    engine._setCubeMapTextureParams(texture, loadMipmap, ktx.numberOfMipmapLevels - 1);\n    texture.isReady = true;\n    texture.onLoadedObservable.notifyObservers(texture);\n    texture.onLoadedObservable.clear();\n    if (onLoad) {\n      onLoad();\n    }\n  }\n  /**\n   * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n   * @param data contains the texture data\n   * @param texture defines the BabylonJS internal texture\n   * @param callback defines the method to call once ready to upload\n   * @param options\n   */\n  loadData(data, texture, callback, options) {\n    if (KhronosTextureContainer.IsValid(data)) {\n      // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\n      texture._invertVScale = !texture.invertY;\n      const ktx = new KhronosTextureContainer(data, 1);\n      const mappedFormat = mapSRGBToLinear(ktx.glInternalFormat);\n      if (mappedFormat) {\n        texture.format = mappedFormat;\n        texture._useSRGBBuffer = texture.getEngine()._getUseSRGBBuffer(true, texture.generateMipMaps);\n        texture._gammaSpace = true;\n      } else {\n        texture.format = ktx.glInternalFormat;\n      }\n      callback(ktx.pixelWidth, ktx.pixelHeight, texture.generateMipMaps, true, () => {\n        ktx.uploadLevels(texture, texture.generateMipMaps);\n      }, ktx.isInvalid);\n    } else if (KhronosTextureContainer2.IsValid(data)) {\n      const ktx2 = new KhronosTextureContainer2(texture.getEngine());\n      ktx2.uploadAsync(data, texture, options).then(() => {\n        callback(texture.width, texture.height, texture.generateMipMaps, true, () => {}, false);\n      }, error => {\n        Logger.Warn(`Failed to load KTX2 texture data: ${error.message}`);\n        callback(0, 0, false, false, () => {}, true);\n      });\n    } else {\n      Logger.Error(\"texture missing KTX identifier\");\n      callback(0, 0, false, false, () => {}, true);\n    }\n  }\n}\n// Register the loader.\nEngine._TextureLoaders.unshift(new _KTXTextureLoader());","map":{"version":3,"mappings":"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","names":["KhronosTextureContainer","KhronosTextureContainer2","Engine","Logger","mapSRGBToLinear","format","_KTXTextureLoader","constructor","canLoad","extension","mimeType","endsWith","loadCubeData","data","texture","createPolynomials","onLoad","Array","isArray","_invertVScale","invertY","engine","getEngine","ktx","loadMipmap","numberOfMipmapLevels","generateMipMaps","_unpackFlipY","uploadLevels","width","pixelWidth","height","pixelHeight","_setCubeMapTextureParams","isReady","onLoadedObservable","notifyObservers","clear","loadData","callback","options","IsValid","mappedFormat","glInternalFormat","_useSRGBBuffer","_getUseSRGBBuffer","_gammaSpace","isInvalid","ktx2","uploadAsync","then","error","Warn","message","Error","_TextureLoaders","unshift"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Textures/Loaders/ktxTextureLoader.ts"],"sourcesContent":["import { KhronosTextureContainer } from \"../../../Misc/khronosTextureContainer\";\r\nimport { KhronosTextureContainer2 } from \"../../../Misc/khronosTextureContainer2\";\r\nimport type { Nullable } from \"../../../types\";\r\nimport { Engine } from \"../../../Engines/engine\";\r\nimport type { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport type { IInternalTextureLoader } from \"../../../Materials/Textures/internalTextureLoader\";\r\nimport { Logger } from \"../../../Misc/logger\";\r\nimport { Constants } from \"../../../Engines/constants\";\r\n\r\nfunction mapSRGBToLinear(format: number): Nullable<number> {\r\n    switch (format) {\r\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB_S3TC_DXT1_EXT:\r\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGB_S3TC_DXT1;\r\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT:\r\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT3;\r\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT:\r\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT5;\r\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB8_ETC2:\r\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGB8_ETC2;\r\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:\r\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGBA8_ETC2_EAC;\r\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:\r\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;\r\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:\r\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGBA_ASTC_4x4;\r\n        case Constants.TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_BPTC_UNORM:\r\n            return Constants.TEXTUREFORMAT_COMPRESSED_RGBA_BPTC_UNORM;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/**\r\n * Implementation of the KTX Texture Loader.\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _KTXTextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines whether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = false;\r\n\r\n    /**\r\n     * This returns if the loader support the current file information.\r\n     * @param extension defines the file extension of the file being loaded\r\n     * @param mimeType defines the optional mime type of the file being loaded\r\n     * @returns true if the loader can load the specified file\r\n     */\r\n    public canLoad(extension: string, mimeType?: string): boolean {\r\n        // The \".ktx2\" file extension is still up for debate: https://github.com/KhronosGroup/KTX-Specification/issues/18\r\n        return extension.endsWith(\".ktx\") || extension.endsWith(\".ktx2\") || mimeType === \"image/ktx\" || mimeType === \"image/ktx2\";\r\n    }\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param createPolynomials will be true if polynomials have been requested\r\n     * @param onLoad defines the callback to trigger once the texture is ready\r\n     */\r\n    public loadCubeData(data: ArrayBufferView | ArrayBufferView[], texture: InternalTexture, createPolynomials: boolean, onLoad: Nullable<(data?: any) => void>): void {\r\n        if (Array.isArray(data)) {\r\n            return;\r\n        }\r\n\r\n        // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\r\n        texture._invertVScale = !texture.invertY;\r\n        const engine = texture.getEngine() as Engine;\r\n        const ktx = new KhronosTextureContainer(data, 6);\r\n\r\n        const loadMipmap = ktx.numberOfMipmapLevels > 1 && texture.generateMipMaps;\r\n\r\n        engine._unpackFlipY(true);\r\n\r\n        ktx.uploadLevels(texture, texture.generateMipMaps);\r\n\r\n        texture.width = ktx.pixelWidth;\r\n        texture.height = ktx.pixelHeight;\r\n\r\n        engine._setCubeMapTextureParams(texture, loadMipmap, ktx.numberOfMipmapLevels - 1);\r\n        texture.isReady = true;\r\n        texture.onLoadedObservable.notifyObservers(texture);\r\n        texture.onLoadedObservable.clear();\r\n\r\n        if (onLoad) {\r\n            onLoad();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     * @param options\r\n     */\r\n    public loadData(\r\n        data: ArrayBufferView,\r\n        texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void, loadFailed: boolean) => void,\r\n        options?: any\r\n    ): void {\r\n        if (KhronosTextureContainer.IsValid(data)) {\r\n            // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\r\n            texture._invertVScale = !texture.invertY;\r\n            const ktx = new KhronosTextureContainer(data, 1);\r\n\r\n            const mappedFormat = mapSRGBToLinear(ktx.glInternalFormat);\r\n            if (mappedFormat) {\r\n                texture.format = mappedFormat;\r\n                texture._useSRGBBuffer = texture.getEngine()._getUseSRGBBuffer(true, texture.generateMipMaps);\r\n                texture._gammaSpace = true;\r\n            } else {\r\n                texture.format = ktx.glInternalFormat;\r\n            }\r\n\r\n            callback(\r\n                ktx.pixelWidth,\r\n                ktx.pixelHeight,\r\n                texture.generateMipMaps,\r\n                true,\r\n                () => {\r\n                    ktx.uploadLevels(texture, texture.generateMipMaps);\r\n                },\r\n                ktx.isInvalid\r\n            );\r\n        } else if (KhronosTextureContainer2.IsValid(data)) {\r\n            const ktx2 = new KhronosTextureContainer2(texture.getEngine());\r\n            ktx2.uploadAsync(data, texture, options).then(\r\n                () => {\r\n                    callback(texture.width, texture.height, texture.generateMipMaps, true, () => {}, false);\r\n                },\r\n                (error) => {\r\n                    Logger.Warn(`Failed to load KTX2 texture data: ${error.message}`);\r\n                    callback(0, 0, false, false, () => {}, true);\r\n                }\r\n            );\r\n        } else {\r\n            Logger.Error(\"texture missing KTX identifier\");\r\n            callback(0, 0, false, false, () => {}, true);\r\n        }\r\n    }\r\n}\r\n\r\n// Register the loader.\r\nEngine._TextureLoaders.unshift(new _KTXTextureLoader());\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}