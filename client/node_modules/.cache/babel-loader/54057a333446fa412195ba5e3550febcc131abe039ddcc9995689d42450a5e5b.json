{"ast":null,"code":"import { ArrayItem, GLTFLoader } from \"../glTFLoader.js\";\nimport { MeshoptCompression } from \"@babylonjs/core/Meshes/Compression/meshoptCompression.js\";\nconst NAME = \"EXT_meshopt_compression\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_meshopt_compression/README.md)\n *\n * This extension uses a WebAssembly decoder module from https://github.com/zeux/meshoptimizer/tree/master/js\n * @since 5.0.0\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class EXT_meshopt_compression {\n  /**\n   * @internal\n   */\n  constructor(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    this.enabled = loader.isExtensionUsed(NAME);\n    this._loader = loader;\n  }\n  /** @internal */\n  dispose() {\n    this._loader = null;\n  }\n  /**\n   * @internal\n   */\n  loadBufferViewAsync(context, bufferView) {\n    return GLTFLoader.LoadExtensionAsync(context, bufferView, this.name, (extensionContext, extension) => {\n      const bufferViewMeshopt = bufferView;\n      if (bufferViewMeshopt._meshOptData) {\n        return bufferViewMeshopt._meshOptData;\n      }\n      const buffer = ArrayItem.Get(`${context}/buffer`, this._loader.gltf.buffers, extension.buffer);\n      bufferViewMeshopt._meshOptData = this._loader.loadBufferAsync(`/buffers/${buffer.index}`, buffer, extension.byteOffset || 0, extension.byteLength).then(buffer => {\n        return MeshoptCompression.Default.decodeGltfBufferAsync(buffer, extension.count, extension.byteStride, extension.mode, extension.filter);\n      });\n      return bufferViewMeshopt._meshOptData;\n    });\n  }\n}\nGLTFLoader.RegisterExtension(NAME, loader => new EXT_meshopt_compression(loader));","map":{"version":3,"mappings":"AAEA,SAASA,SAAS,EAAEC,UAAU,QAAQ,kBAAgB;AAGtD,SAASC,kBAAkB,QAAE;AAE7B,MAAMC,IAAI,GAAG,yBAAyB;AAMtC;;;;;;AAMA;AACA,OAAM,MAAOC,uBAAuB;EAahC;;;EAGAC,YAAYC,MAAkB;IAf9B;;;IAGgB,SAAI,GAAGH,IAAI;IAavB,IAAI,CAACI,OAAO,GAAGD,MAAM,CAACE,eAAe,CAACL,IAAI,CAAC;IAC3C,IAAI,CAACM,OAAO,GAAGH,MAAM;EACzB;EAEA;EACOI,OAAO;IACT,IAAI,CAACD,OAAe,GAAG,IAAI;EAChC;EAEA;;;EAGOE,mBAAmB,CAACC,OAAe,EAAEC,UAAuB;IAC/D,OAAOZ,UAAU,CAACa,kBAAkB,CAA0CF,OAAO,EAAEC,UAAU,EAAE,IAAI,CAACE,IAAI,EAAE,CAACC,gBAAgB,EAAEC,SAAS,KAAI;MAC1I,MAAMC,iBAAiB,GAAGL,UAAgC;MAC1D,IAAIK,iBAAiB,CAACC,YAAY,EAAE;QAChC,OAAOD,iBAAiB,CAACC,YAAY;;MAGzC,MAAMC,MAAM,GAAGpB,SAAS,CAACqB,GAAG,CAAC,GAAGT,OAAO,SAAS,EAAE,IAAI,CAACH,OAAO,CAACa,IAAI,CAACC,OAAO,EAAEN,SAAS,CAACG,MAAM,CAAC;MAC9FF,iBAAiB,CAACC,YAAY,GAAG,IAAI,CAACV,OAAO,CAACe,eAAe,CAAC,YAAYJ,MAAM,CAACK,KAAK,EAAE,EAAEL,MAAM,EAAEH,SAAS,CAACS,UAAU,IAAI,CAAC,EAAET,SAAS,CAACU,UAAU,CAAC,CAACC,IAAI,CAAER,MAAM,IAAI;QAC/J,OAAOlB,kBAAkB,CAAC2B,OAAO,CAACC,qBAAqB,CAACV,MAAoB,EAAEH,SAAS,CAACc,KAAK,EAAEd,SAAS,CAACe,UAAU,EAAEf,SAAS,CAACgB,IAAI,EAAEhB,SAAS,CAACiB,MAAM,CAAC;MAC1J,CAAC,CAAC;MAEF,OAAOhB,iBAAiB,CAACC,YAAY;IACzC,CAAC,CAAC;EACN;;AAGJlB,UAAU,CAACkC,iBAAiB,CAAChC,IAAI,EAAGG,MAAM,IAAK,IAAIF,uBAAuB,CAACE,MAAM,CAAC,CAAC","names":["ArrayItem","GLTFLoader","MeshoptCompression","NAME","EXT_meshopt_compression","constructor","loader","enabled","isExtensionUsed","_loader","dispose","loadBufferViewAsync","context","bufferView","LoadExtensionAsync","name","extensionContext","extension","bufferViewMeshopt","_meshOptData","buffer","Get","gltf","buffers","loadBufferAsync","index","byteOffset","byteLength","then","Default","decodeGltfBufferAsync","count","byteStride","mode","filter","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../lts/loaders/generated/glTF/2.0/Extensions/EXT_meshopt_compression.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { ArrayItem, GLTFLoader } from \"../glTFLoader\";\r\nimport type { IBufferView } from \"../glTFLoaderInterfaces\";\r\nimport type { IEXTMeshoptCompression } from \"babylonjs-gltf2interface\";\r\nimport { MeshoptCompression } from \"core/Meshes/Compression/meshoptCompression\";\r\n\r\nconst NAME = \"EXT_meshopt_compression\";\r\n\r\ninterface IBufferViewMeshopt extends IBufferView {\r\n    _meshOptData?: Promise<ArrayBufferView>;\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_meshopt_compression/README.md)\r\n *\r\n * This extension uses a WebAssembly decoder module from https://github.com/zeux/meshoptimizer/tree/master/js\r\n * @since 5.0.0\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_meshopt_compression implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this.enabled = loader.isExtensionUsed(NAME);\r\n        this._loader = loader;\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadBufferViewAsync(context: string, bufferView: IBufferView): Nullable<Promise<ArrayBufferView>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTMeshoptCompression, ArrayBufferView>(context, bufferView, this.name, (extensionContext, extension) => {\r\n            const bufferViewMeshopt = bufferView as IBufferViewMeshopt;\r\n            if (bufferViewMeshopt._meshOptData) {\r\n                return bufferViewMeshopt._meshOptData;\r\n            }\r\n\r\n            const buffer = ArrayItem.Get(`${context}/buffer`, this._loader.gltf.buffers, extension.buffer);\r\n            bufferViewMeshopt._meshOptData = this._loader.loadBufferAsync(`/buffers/${buffer.index}`, buffer, extension.byteOffset || 0, extension.byteLength).then((buffer) => {\r\n                return MeshoptCompression.Default.decodeGltfBufferAsync(buffer as Uint8Array, extension.count, extension.byteStride, extension.mode, extension.filter);\r\n            });\r\n\r\n            return bufferViewMeshopt._meshOptData;\r\n        });\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new EXT_meshopt_compression(loader));\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}