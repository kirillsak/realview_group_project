{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { InternalTexture, InternalTextureSource } from \"../../../Materials/Textures/internalTexture.js\";\nimport { WebGPUEngine } from \"../../webgpuEngine.js\";\nimport { WebGPURenderTargetWrapper } from \"../webgpuRenderTargetWrapper.js\";\nWebGPUEngine.prototype._createHardwareRenderTargetWrapper = function (isMulti, isCube, size) {\n  const rtWrapper = new WebGPURenderTargetWrapper(isMulti, isCube, size, this);\n  this._renderTargetWrapperCache.push(rtWrapper);\n  return rtWrapper;\n};\nWebGPUEngine.prototype.createRenderTargetTexture = function (size, options) {\n  var _a, _b;\n  const rtWrapper = this._createHardwareRenderTargetWrapper(false, false, size);\n  const fullOptions = {};\n  if (options !== undefined && typeof options === \"object\") {\n    fullOptions.generateMipMaps = options.generateMipMaps;\n    fullOptions.generateDepthBuffer = options.generateDepthBuffer === undefined ? true : options.generateDepthBuffer;\n    fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && options.generateStencilBuffer;\n    fullOptions.samplingMode = options.samplingMode === undefined ? 3 : options.samplingMode;\n    fullOptions.creationFlags = (_a = options.creationFlags) !== null && _a !== void 0 ? _a : 0;\n    fullOptions.noColorAttachment = !!options.noColorAttachment;\n    fullOptions.samples = options.samples;\n  } else {\n    fullOptions.generateMipMaps = options;\n    fullOptions.generateDepthBuffer = true;\n    fullOptions.generateStencilBuffer = false;\n    fullOptions.samplingMode = 3;\n    fullOptions.creationFlags = 0;\n    fullOptions.noColorAttachment = false;\n  }\n  const texture = fullOptions.noColorAttachment ? null : this._createInternalTexture(size, options, true, InternalTextureSource.RenderTarget);\n  rtWrapper._samples = (_b = fullOptions.samples) !== null && _b !== void 0 ? _b : 1;\n  rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\n  rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer ? true : false;\n  rtWrapper.setTextures(texture);\n  if (rtWrapper._generateDepthBuffer || rtWrapper._generateStencilBuffer) {\n    rtWrapper.createDepthStencilTexture(0, this._caps.textureFloatLinearFiltering && (fullOptions.samplingMode === undefined || fullOptions.samplingMode === 2 || fullOptions.samplingMode === 2 || fullOptions.samplingMode === 3 || fullOptions.samplingMode === 3 || fullOptions.samplingMode === 5 || fullOptions.samplingMode === 6 || fullOptions.samplingMode === 7 || fullOptions.samplingMode === 11), rtWrapper._generateStencilBuffer, rtWrapper.samples);\n  }\n  if (texture) {\n    if (options !== undefined && typeof options === \"object\" && options.createMipMaps && !fullOptions.generateMipMaps) {\n      texture.generateMipMaps = true;\n    }\n    this._textureHelper.createGPUTextureForInternalTexture(texture, undefined, undefined, undefined, fullOptions.creationFlags);\n    if (options !== undefined && typeof options === \"object\" && options.createMipMaps && !fullOptions.generateMipMaps) {\n      texture.generateMipMaps = false;\n    }\n  }\n  return rtWrapper;\n};\nWebGPUEngine.prototype._createDepthStencilTexture = function (size, options) {\n  const internalTexture = new InternalTexture(this, InternalTextureSource.DepthStencil);\n  const internalOptions = {\n    bilinearFiltering: false,\n    comparisonFunction: 0,\n    generateStencil: false,\n    samples: 1,\n    depthTextureFormat: options.generateStencil ? 13 : 14,\n    ...options\n  };\n  internalTexture.format = internalOptions.depthTextureFormat;\n  this._setupDepthStencilTexture(internalTexture, size, internalOptions.generateStencil, internalOptions.bilinearFiltering, internalOptions.comparisonFunction, internalOptions.samples);\n  this._textureHelper.createGPUTextureForInternalTexture(internalTexture);\n  this._internalTexturesCache.push(internalTexture);\n  return internalTexture;\n};\nWebGPUEngine.prototype._setupDepthStencilTexture = function (internalTexture, size, generateStencil, bilinearFiltering, comparisonFunction, samples = 1) {\n  const width = size.width || size;\n  const height = size.height || size;\n  const layers = size.layers || 0;\n  internalTexture.baseWidth = width;\n  internalTexture.baseHeight = height;\n  internalTexture.width = width;\n  internalTexture.height = height;\n  internalTexture.is2DArray = layers > 0;\n  internalTexture.depth = layers;\n  internalTexture.isReady = true;\n  internalTexture.samples = samples;\n  internalTexture.generateMipMaps = false;\n  internalTexture.samplingMode = bilinearFiltering ? 2 : 1;\n  internalTexture.type = 1;\n  internalTexture._comparisonFunction = comparisonFunction;\n  internalTexture._cachedWrapU = 0;\n  internalTexture._cachedWrapV = 0;\n};\nWebGPUEngine.prototype.updateRenderTargetTextureSampleCount = function (rtWrapper, samples) {\n  if (!rtWrapper || !rtWrapper.texture || rtWrapper.samples === samples) {\n    return samples;\n  }\n  samples = Math.min(samples, this.getCaps().maxMSAASamples);\n  this._textureHelper.createMSAATexture(rtWrapper.texture, samples);\n  if (rtWrapper._depthStencilTexture) {\n    this._textureHelper.createMSAATexture(rtWrapper._depthStencilTexture, samples);\n    rtWrapper._depthStencilTexture.samples = samples;\n  }\n  rtWrapper._samples = samples;\n  rtWrapper.texture.samples = samples;\n  return samples;\n};","map":{"version":3,"mappings":"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","names":["InternalTexture","InternalTextureSource","WebGPUEngine","WebGPURenderTargetWrapper","prototype","_createHardwareRenderTargetWrapper","isMulti","isCube","size","rtWrapper","_renderTargetWrapperCache","push","createRenderTargetTexture","options","fullOptions","undefined","generateMipMaps","generateDepthBuffer","generateStencilBuffer","samplingMode","creationFlags","noColorAttachment","samples","texture","_createInternalTexture","RenderTarget","_samples","_generateDepthBuffer","_generateStencilBuffer","setTextures","createDepthStencilTexture","_caps","textureFloatLinearFiltering","createMipMaps","_textureHelper","createGPUTextureForInternalTexture","_createDepthStencilTexture","internalTexture","DepthStencil","internalOptions","bilinearFiltering","comparisonFunction","generateStencil","depthTextureFormat","format","_setupDepthStencilTexture","_internalTexturesCache","width","height","layers","baseWidth","baseHeight","is2DArray","depth","isReady","type","_comparisonFunction","_cachedWrapU","_cachedWrapV","updateRenderTargetTextureSampleCount","Math","min","getCaps","maxMSAASamples","createMSAATexture","_depthStencilTexture"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/Extensions/engine.renderTarget.ts"],"sourcesContent":["import { InternalTexture, InternalTextureSource } from \"../../../Materials/Textures/internalTexture\";\r\nimport type { RenderTargetCreationOptions, DepthTextureCreationOptions, TextureSize } from \"../../../Materials/Textures/textureCreationOptions\";\r\nimport type { Nullable } from \"../../../types\";\r\nimport { Constants } from \"../../constants\";\r\nimport type { RenderTargetWrapper } from \"../../renderTargetWrapper\";\r\nimport { WebGPUEngine } from \"../../webgpuEngine\";\r\nimport { WebGPURenderTargetWrapper } from \"../webgpuRenderTargetWrapper\";\r\n\r\nWebGPUEngine.prototype._createHardwareRenderTargetWrapper = function (isMulti: boolean, isCube: boolean, size: TextureSize): WebGPURenderTargetWrapper {\r\n    const rtWrapper = new WebGPURenderTargetWrapper(isMulti, isCube, size, this);\r\n    this._renderTargetWrapperCache.push(rtWrapper);\r\n    return rtWrapper;\r\n};\r\n\r\nWebGPUEngine.prototype.createRenderTargetTexture = function (size: TextureSize, options: boolean | RenderTargetCreationOptions): WebGPURenderTargetWrapper {\r\n    const rtWrapper = this._createHardwareRenderTargetWrapper(false, false, size) as WebGPURenderTargetWrapper;\r\n\r\n    const fullOptions: RenderTargetCreationOptions = {};\r\n\r\n    if (options !== undefined && typeof options === \"object\") {\r\n        fullOptions.generateMipMaps = options.generateMipMaps;\r\n        fullOptions.generateDepthBuffer = options.generateDepthBuffer === undefined ? true : options.generateDepthBuffer;\r\n        fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && options.generateStencilBuffer;\r\n        fullOptions.samplingMode = options.samplingMode === undefined ? Constants.TEXTURE_TRILINEAR_SAMPLINGMODE : options.samplingMode;\r\n        fullOptions.creationFlags = options.creationFlags ?? 0;\r\n        fullOptions.noColorAttachment = !!options.noColorAttachment;\r\n        fullOptions.samples = options.samples;\r\n    } else {\r\n        fullOptions.generateMipMaps = <boolean>options;\r\n        fullOptions.generateDepthBuffer = true;\r\n        fullOptions.generateStencilBuffer = false;\r\n        fullOptions.samplingMode = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE;\r\n        fullOptions.creationFlags = 0;\r\n        fullOptions.noColorAttachment = false;\r\n    }\r\n\r\n    const texture = fullOptions.noColorAttachment ? null : this._createInternalTexture(size, options, true, InternalTextureSource.RenderTarget);\r\n\r\n    rtWrapper._samples = fullOptions.samples ?? 1;\r\n    rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\r\n    rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer ? true : false;\r\n\r\n    rtWrapper.setTextures(texture);\r\n\r\n    if (rtWrapper._generateDepthBuffer || rtWrapper._generateStencilBuffer) {\r\n        rtWrapper.createDepthStencilTexture(\r\n            0,\r\n            this._caps.textureFloatLinearFiltering &&\r\n                (fullOptions.samplingMode === undefined ||\r\n                    fullOptions.samplingMode === Constants.TEXTURE_BILINEAR_SAMPLINGMODE ||\r\n                    fullOptions.samplingMode === Constants.TEXTURE_LINEAR_LINEAR ||\r\n                    fullOptions.samplingMode === Constants.TEXTURE_TRILINEAR_SAMPLINGMODE ||\r\n                    fullOptions.samplingMode === Constants.TEXTURE_LINEAR_LINEAR_MIPLINEAR ||\r\n                    fullOptions.samplingMode === Constants.TEXTURE_NEAREST_LINEAR_MIPNEAREST ||\r\n                    fullOptions.samplingMode === Constants.TEXTURE_NEAREST_LINEAR_MIPLINEAR ||\r\n                    fullOptions.samplingMode === Constants.TEXTURE_NEAREST_LINEAR ||\r\n                    fullOptions.samplingMode === Constants.TEXTURE_LINEAR_LINEAR_MIPNEAREST),\r\n            rtWrapper._generateStencilBuffer,\r\n            rtWrapper.samples\r\n        );\r\n    }\r\n\r\n    if (texture) {\r\n        if (options !== undefined && typeof options === \"object\" && options.createMipMaps && !fullOptions.generateMipMaps) {\r\n            texture.generateMipMaps = true;\r\n        }\r\n\r\n        this._textureHelper.createGPUTextureForInternalTexture(texture, undefined, undefined, undefined, fullOptions.creationFlags);\r\n\r\n        if (options !== undefined && typeof options === \"object\" && options.createMipMaps && !fullOptions.generateMipMaps) {\r\n            texture.generateMipMaps = false;\r\n        }\r\n    }\r\n\r\n    return rtWrapper;\r\n};\r\n\r\nWebGPUEngine.prototype._createDepthStencilTexture = function (size: TextureSize, options: DepthTextureCreationOptions): InternalTexture {\r\n    const internalTexture = new InternalTexture(this, InternalTextureSource.DepthStencil);\r\n\r\n    const internalOptions = {\r\n        bilinearFiltering: false,\r\n        comparisonFunction: 0,\r\n        generateStencil: false,\r\n        samples: 1,\r\n        depthTextureFormat: options.generateStencil ? Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 : Constants.TEXTUREFORMAT_DEPTH32_FLOAT,\r\n        ...options,\r\n    };\r\n\r\n    internalTexture.format = internalOptions.depthTextureFormat;\r\n\r\n    this._setupDepthStencilTexture(\r\n        internalTexture,\r\n        size,\r\n        internalOptions.generateStencil,\r\n        internalOptions.bilinearFiltering,\r\n        internalOptions.comparisonFunction,\r\n        internalOptions.samples\r\n    );\r\n\r\n    this._textureHelper.createGPUTextureForInternalTexture(internalTexture);\r\n\r\n    this._internalTexturesCache.push(internalTexture);\r\n\r\n    return internalTexture;\r\n};\r\n\r\nWebGPUEngine.prototype._setupDepthStencilTexture = function (\r\n    internalTexture: InternalTexture,\r\n    size: TextureSize,\r\n    generateStencil: boolean,\r\n    bilinearFiltering: boolean,\r\n    comparisonFunction: number,\r\n    samples = 1\r\n): void {\r\n    const width = (<{ width: number; height: number; layers?: number }>size).width || <number>size;\r\n    const height = (<{ width: number; height: number; layers?: number }>size).height || <number>size;\r\n    const layers = (<{ width: number; height: number; layers?: number }>size).layers || 0;\r\n\r\n    internalTexture.baseWidth = width;\r\n    internalTexture.baseHeight = height;\r\n    internalTexture.width = width;\r\n    internalTexture.height = height;\r\n    internalTexture.is2DArray = layers > 0;\r\n    internalTexture.depth = layers;\r\n    internalTexture.isReady = true;\r\n    internalTexture.samples = samples;\r\n    internalTexture.generateMipMaps = false;\r\n    internalTexture.samplingMode = bilinearFiltering ? Constants.TEXTURE_BILINEAR_SAMPLINGMODE : Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n    internalTexture.type = Constants.TEXTURETYPE_FLOAT;\r\n    internalTexture._comparisonFunction = comparisonFunction;\r\n    internalTexture._cachedWrapU = Constants.TEXTURE_CLAMP_ADDRESSMODE;\r\n    internalTexture._cachedWrapV = Constants.TEXTURE_CLAMP_ADDRESSMODE;\r\n};\r\n\r\nWebGPUEngine.prototype.updateRenderTargetTextureSampleCount = function (rtWrapper: Nullable<RenderTargetWrapper>, samples: number): number {\r\n    if (!rtWrapper || !rtWrapper.texture || rtWrapper.samples === samples) {\r\n        return samples;\r\n    }\r\n\r\n    samples = Math.min(samples, this.getCaps().maxMSAASamples);\r\n\r\n    this._textureHelper.createMSAATexture(rtWrapper.texture, samples);\r\n\r\n    if (rtWrapper._depthStencilTexture) {\r\n        this._textureHelper.createMSAATexture(rtWrapper._depthStencilTexture, samples);\r\n        rtWrapper._depthStencilTexture.samples = samples;\r\n    }\r\n\r\n    rtWrapper._samples = samples;\r\n    rtWrapper.texture.samples = samples;\r\n\r\n    return samples;\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}