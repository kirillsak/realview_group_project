{"ast":null,"code":"import { ConstraintType } from \"./IPhysicsEnginePlugin.js\";\n/**\n * This is a holder class for the physics constraint created by the physics plugin\n * It holds a set of functions to control the underlying constraint\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\nexport class PhysicsConstraint {\n  /**\n   * Constructs a new constraint for the physics constraint.\n   * @param type The type of constraint to create.\n   * @param options The options for the constraint.\n   * @param scene The scene the constraint belongs to.\n   *\n   * This code is useful for creating a new constraint for the physics engine. It checks if the scene has a physics engine, and if the plugin version is correct.\n   * If all checks pass, it initializes the constraint with the given type and options.\n   */\n  constructor(type, options, scene) {\n    /**\n     * V2 Physics plugin private data for a physics material\n     */\n    this._pluginData = undefined;\n    if (!scene) {\n      return;\n    }\n    const physicsEngine = scene.getPhysicsEngine();\n    if (!physicsEngine) {\n      throw new Error(\"No Physics Engine available.\");\n    }\n    if (physicsEngine.getPluginVersion() != 2) {\n      throw new Error(\"Plugin version is incorrect. Expected version 2.\");\n    }\n    const physicsPlugin = physicsEngine.getPhysicsPlugin();\n    if (!physicsPlugin) {\n      throw new Error(\"No Physics Plugin available.\");\n    }\n    this._physicsPlugin = physicsPlugin;\n    this._physicsPlugin.initConstraint(this, type, options);\n  }\n  /**\n   * Sets the parent body of this body.\n   * @param body - The parent body to set.\n   *\n   * This method is useful for setting the parent body of a physics body in a physics engine.\n   * This allows the engine to accurately simulate the motion of the body in relation to its parent body.\n   * For example, if the parent body is a planet, the engine can accurately simulate the motion of the body in relation to the planet's gravity.\n   */\n  setParentBody(body) {\n    this._physicsPlugin.setParentBody(this, body);\n  }\n  /**\n   * Retrieves the parent body of the current physics constraint.\n   *\n   * @returns The parent body of the current physics constraint, or `undefined` if the\n   * current constraint does not have a parent body.\n   */\n  getParentBody() {\n    return this._physicsPlugin.getParentBody(this);\n  }\n  /**\n   * Sets the child body of the current body.\n   *\n   * @param body - The child body to set.\n   *\n   * This method is useful for setting the child body of the current body in a physics engine.\n   * This allows for the creation of complex structures of bodies that interact with each other in a realistic way.\n   */\n  setChildBody(body) {\n    this._physicsPlugin.setChildBody(this, body);\n  }\n  /**\n   * Retrieves the child body of the current physics constraint.\n   *\n   * @returns The child body of the current physics constraint, or `undefined` if no\n   * child body is present.\n   */\n  getChildBody() {\n    return this._physicsPlugin.getChildBody(this);\n  }\n  /**\n   *\n   * @param pivot +\n   * @param axisX\n   * @param axisY\n   */\n  setAnchorInParent(pivot, axisX, axisY) {\n    this._physicsPlugin.setAnchorInParent(this, pivot, axisX, axisY);\n  }\n  /**\n   *\n   * @param pivot\n   * @param axisX\n   * @param axisY\n   */\n  setAnchorInChild(pivot, axisX, axisY) {\n    this._physicsPlugin.setAnchorInChild(this, pivot, axisX, axisY);\n  }\n  /**\n   *\n   * @param isEnabled\n   */\n  setEnabled(isEnabled) {\n    this._physicsPlugin.setEnabled(this, isEnabled);\n  }\n  /**\n   *\n   * @returns\n   */\n  getEnabled() {\n    return this._physicsPlugin.getEnabled(this);\n  }\n  /**\n   *\n   * @param isEnabled\n   */\n  setCollisionsEnabled(isEnabled) {\n    this._physicsPlugin.setCollisionsEnabled(this, isEnabled);\n  }\n  /**\n   *\n   * @returns\n   */\n  getCollisionsEnabled() {\n    return this._physicsPlugin.getCollisionsEnabled(this);\n  }\n  /**\n   *\n   * @param axis\n   * @param friction\n   */\n  setAxisFriction(axis, friction) {\n    this._physicsPlugin.setAxisFriction(this, axis, friction);\n  }\n  /**\n   *\n   * @param axis\n   * @returns\n   */\n  getAxisFriction(axis) {\n    return this._physicsPlugin.getAxisFriction(this, axis);\n  }\n  /**\n   *\n   * @param axis\n   * @param limitMode\n   */\n  setAxisMode(axis, limitMode) {\n    this._physicsPlugin.setAxisMode(this, axis, limitMode);\n  }\n  /**\n   *\n   * @param axis\n   */\n  getAxisMode(axis) {\n    return this._physicsPlugin.getAxisMode(this, axis);\n  }\n  /**\n   *\n   */\n  setAxisMinLimit(axis, minLimit) {\n    this._physicsPlugin.setAxisMinLimit(this, axis, minLimit);\n  }\n  /**\n   *\n   */\n  getAxisMinLimit(axis) {\n    return this._physicsPlugin.getAxisMinLimit(this, axis);\n  }\n  /**\n   *\n   */\n  setAxisMaxLimit(axis, limit) {\n    this._physicsPlugin.setAxisMaxLimit(this, axis, limit);\n  }\n  /**\n   *\n   */\n  getAxisMaxLimit(axis) {\n    return this._physicsPlugin.getAxisMaxLimit(this, axis);\n  }\n  /**\n   *\n   */\n  setAxisMotorType(axis, motorType) {\n    this._physicsPlugin.setAxisMotorType(this, axis, motorType);\n  }\n  /**\n   *\n   */\n  getAxisMotorType(axis) {\n    return this._physicsPlugin.getAxisMotorType(this, axis);\n  }\n  /**\n   *\n   */\n  setAxisMotorTarget(axis, target) {\n    this._physicsPlugin.setAxisMotorTarget(this, axis, target);\n  }\n  /**\n   *\n   */\n  getAxisMotorTarget(axis) {\n    return this._physicsPlugin.getAxisMotorTarget(this, axis);\n  }\n  /**\n   *\n   */\n  setAxisMotorMaxForce(axis, maxForce) {\n    this._physicsPlugin.setAxisMotorMaxForce(this, axis, maxForce);\n  }\n  /**\n   *\n   */\n  getAxisMotorMaxForce(axis) {\n    return this._physicsPlugin.getAxisMotorMaxForce(this, axis);\n  }\n  /**\n   *\n   */\n  dispose() {\n    this._physicsPlugin.disposeConstraint(this);\n  }\n}\n/**\n *\n */\n/** @internal */\nexport class PhysicsConstraintBallAndSocket extends PhysicsConstraint {\n  /** @internal */\n  constructor(pivotA, pivotB, axisA, axisB, scene) {\n    super(ConstraintType.BALL_AND_SOCKET, {\n      pivotA: pivotA,\n      pivotB: pivotB,\n      axisA: axisA,\n      axisB: axisB\n    }, scene);\n  }\n}\n/**\n *\n */\n/** @internal */\nexport class PhysicsConstraintDistance extends PhysicsConstraint {\n  /** @internal */\n  constructor(pivotA, pivotB, axisA, axisB, scene) {\n    super(ConstraintType.DISTANCE, {\n      pivotA: pivotA,\n      pivotB: pivotB,\n      axisA: axisA,\n      axisB: axisB\n    }, scene);\n  }\n}\n/**\n *\n */\n/** @internal */\nexport class PhysicsConstraintHinge extends PhysicsConstraint {\n  /** @internal */\n  constructor(pivotA, pivotB, axisA, axisB, scene) {\n    super(ConstraintType.HINGE, {\n      pivotA: pivotA,\n      pivotB: pivotB,\n      axisA: axisA,\n      axisB: axisB\n    }, scene);\n  }\n}\n/**\n *\n */\n/** @internal */\nexport class PhysicsConstraintSlider extends PhysicsConstraint {\n  /** @internal */\n  constructor(pivotA, pivotB, axisA, axisB, scene) {\n    super(ConstraintType.SLIDER, {\n      pivotA: pivotA,\n      pivotB: pivotB,\n      axisA: axisA,\n      axisB: axisB\n    }, scene);\n  }\n}\n/**\n *\n */\n/** @internal */\nexport class PhysicsConstraintLock extends PhysicsConstraint {\n  /** @internal */\n  constructor(pivotA, pivotB, axisA, axisB, scene) {\n    super(ConstraintType.LOCK, {\n      pivotA: pivotA,\n      pivotB: pivotB,\n      axisA: axisA,\n      axisB: axisB\n    }, scene);\n  }\n}","map":{"version":3,"mappings":"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","names":["ConstraintType","PhysicsConstraint","constructor","type","options","scene","undefined","physicsEngine","getPhysicsEngine","Error","getPluginVersion","physicsPlugin","getPhysicsPlugin","_physicsPlugin","initConstraint","setParentBody","body","getParentBody","setChildBody","getChildBody","setAnchorInParent","pivot","axisX","axisY","setAnchorInChild","setEnabled","isEnabled","getEnabled","setCollisionsEnabled","getCollisionsEnabled","setAxisFriction","axis","friction","getAxisFriction","setAxisMode","limitMode","getAxisMode","setAxisMinLimit","minLimit","getAxisMinLimit","setAxisMaxLimit","limit","getAxisMaxLimit","setAxisMotorType","motorType","getAxisMotorType","setAxisMotorTarget","target","getAxisMotorTarget","setAxisMotorMaxForce","maxForce","getAxisMotorMaxForce","dispose","disposeConstraint","PhysicsConstraintBallAndSocket","pivotA","pivotB","axisA","axisB","BALL_AND_SOCKET","PhysicsConstraintDistance","DISTANCE","PhysicsConstraintHinge","HINGE","PhysicsConstraintSlider","SLIDER","PhysicsConstraintLock","LOCK"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Physics/v2/physicsConstraint.ts"],"sourcesContent":["import type { Scene } from \"../../scene\";\r\nimport type { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { IPhysicsEnginePluginV2, ConstraintAxis, PhysicsConstraintParameters, ConstraintAxisLimitMode, ConstraintMotorType } from \"./IPhysicsEnginePlugin\";\r\nimport { ConstraintType } from \"./IPhysicsEnginePlugin\";\r\nimport type { PhysicsBody } from \"./physicsBody\";\r\n\r\n/**\r\n * This is a holder class for the physics constraint created by the physics plugin\r\n * It holds a set of functions to control the underlying constraint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class PhysicsConstraint {\r\n    /**\r\n     * V2 Physics plugin private data for a physics material\r\n     */\r\n    public _pluginData: any = undefined;\r\n    /**\r\n     * The V2 plugin used to create and manage this Physics Body\r\n     */\r\n    protected _physicsPlugin: IPhysicsEnginePluginV2;\r\n\r\n    /**\r\n     * Constructs a new constraint for the physics constraint.\r\n     * @param type The type of constraint to create.\r\n     * @param options The options for the constraint.\r\n     * @param scene The scene the constraint belongs to.\r\n     *\r\n     * This code is useful for creating a new constraint for the physics engine. It checks if the scene has a physics engine, and if the plugin version is correct.\r\n     * If all checks pass, it initializes the constraint with the given type and options.\r\n     */\r\n    constructor(type: ConstraintType, options: PhysicsConstraintParameters, scene: Scene) {\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        const physicsEngine = scene.getPhysicsEngine();\r\n        if (!physicsEngine) {\r\n            throw new Error(\"No Physics Engine available.\");\r\n        }\r\n        if (physicsEngine.getPluginVersion() != 2) {\r\n            throw new Error(\"Plugin version is incorrect. Expected version 2.\");\r\n        }\r\n        const physicsPlugin = physicsEngine.getPhysicsPlugin();\r\n        if (!physicsPlugin) {\r\n            throw new Error(\"No Physics Plugin available.\");\r\n        }\r\n\r\n        this._physicsPlugin = physicsPlugin as IPhysicsEnginePluginV2;\r\n        this._physicsPlugin.initConstraint(this, type, options);\r\n    }\r\n\r\n    /**\r\n     * Sets the parent body of this body.\r\n     * @param body - The parent body to set.\r\n     *\r\n     * This method is useful for setting the parent body of a physics body in a physics engine.\r\n     * This allows the engine to accurately simulate the motion of the body in relation to its parent body.\r\n     * For example, if the parent body is a planet, the engine can accurately simulate the motion of the body in relation to the planet's gravity.\r\n     */\r\n    public setParentBody(body: PhysicsBody): void {\r\n        this._physicsPlugin.setParentBody(this, body);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the parent body of the current physics constraint.\r\n     *\r\n     * @returns The parent body of the current physics constraint, or `undefined` if the\r\n     * current constraint does not have a parent body.\r\n     */\r\n    public getParentBody(): PhysicsBody | undefined {\r\n        return this._physicsPlugin.getParentBody(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the child body of the current body.\r\n     *\r\n     * @param body - The child body to set.\r\n     *\r\n     * This method is useful for setting the child body of the current body in a physics engine.\r\n     * This allows for the creation of complex structures of bodies that interact with each other in a realistic way.\r\n     */\r\n    public setChildBody(body: PhysicsBody): void {\r\n        this._physicsPlugin.setChildBody(this, body);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the child body of the current physics constraint.\r\n     *\r\n     * @returns The child body of the current physics constraint, or `undefined` if no\r\n     * child body is present.\r\n     */\r\n    public getChildBody(): PhysicsBody | undefined {\r\n        return this._physicsPlugin.getChildBody(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pivot +\r\n     * @param axisX\r\n     * @param axisY\r\n     */\r\n    public setAnchorInParent(pivot: Vector3, axisX: Vector3, axisY: Vector3): void {\r\n        this._physicsPlugin.setAnchorInParent(this, pivot, axisX, axisY);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pivot\r\n     * @param axisX\r\n     * @param axisY\r\n     */\r\n    public setAnchorInChild(pivot: Vector3, axisX: Vector3, axisY: Vector3): void {\r\n        this._physicsPlugin.setAnchorInChild(this, pivot, axisX, axisY);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param isEnabled\r\n     */\r\n    public setEnabled(isEnabled: boolean): void {\r\n        this._physicsPlugin.setEnabled(this, isEnabled);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     */\r\n    public getEnabled(): boolean {\r\n        return this._physicsPlugin.getEnabled(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param isEnabled\r\n     */\r\n    public setCollisionsEnabled(isEnabled: boolean): void {\r\n        this._physicsPlugin.setCollisionsEnabled(this, isEnabled);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     */\r\n    public getCollisionsEnabled(): boolean {\r\n        return this._physicsPlugin.getCollisionsEnabled(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param axis\r\n     * @param friction\r\n     */\r\n    public setAxisFriction(axis: ConstraintAxis, friction: number): void {\r\n        this._physicsPlugin.setAxisFriction(this, axis, friction);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param axis\r\n     * @returns\r\n     */\r\n    public getAxisFriction(axis: ConstraintAxis): number {\r\n        return this._physicsPlugin.getAxisFriction(this, axis);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param axis\r\n     * @param limitMode\r\n     */\r\n    public setAxisMode(axis: ConstraintAxis, limitMode: ConstraintAxisLimitMode): void {\r\n        this._physicsPlugin.setAxisMode(this, axis, limitMode);\r\n    }\r\n    /**\r\n     *\r\n     * @param axis\r\n     */\r\n    public getAxisMode(axis: ConstraintAxis): ConstraintAxisLimitMode {\r\n        return this._physicsPlugin.getAxisMode(this, axis);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public setAxisMinLimit(axis: ConstraintAxis, minLimit: number): void {\r\n        this._physicsPlugin.setAxisMinLimit(this, axis, minLimit);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public getAxisMinLimit(axis: ConstraintAxis): number {\r\n        return this._physicsPlugin.getAxisMinLimit(this, axis);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public setAxisMaxLimit(axis: ConstraintAxis, limit: number): void {\r\n        this._physicsPlugin.setAxisMaxLimit(this, axis, limit);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public getAxisMaxLimit(axis: ConstraintAxis): number {\r\n        return this._physicsPlugin.getAxisMaxLimit(this, axis);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public setAxisMotorType(axis: ConstraintAxis, motorType: ConstraintMotorType): void {\r\n        this._physicsPlugin.setAxisMotorType(this, axis, motorType);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public getAxisMotorType(axis: ConstraintAxis): ConstraintMotorType {\r\n        return this._physicsPlugin.getAxisMotorType(this, axis);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public setAxisMotorTarget(axis: ConstraintAxis, target: number): void {\r\n        this._physicsPlugin.setAxisMotorTarget(this, axis, target);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public getAxisMotorTarget(axis: ConstraintAxis): number {\r\n        return this._physicsPlugin.getAxisMotorTarget(this, axis);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public setAxisMotorMaxForce(axis: ConstraintAxis, maxForce: number): void {\r\n        this._physicsPlugin.setAxisMotorMaxForce(this, axis, maxForce);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public getAxisMotorMaxForce(axis: ConstraintAxis): number {\r\n        return this._physicsPlugin.getAxisMotorMaxForce(this, axis);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public dispose(): void {\r\n        this._physicsPlugin.disposeConstraint(this);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n */\r\n/** @internal */\r\nexport class PhysicsConstraintBallAndSocket extends PhysicsConstraint {\r\n    /** @internal */\r\n    constructor(pivotA: Vector3, pivotB: Vector3, axisA: Vector3, axisB: Vector3, scene: Scene) {\r\n        super(ConstraintType.BALL_AND_SOCKET, { pivotA: pivotA, pivotB: pivotB, axisA: axisA, axisB: axisB }, scene);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n */\r\n/** @internal */\r\nexport class PhysicsConstraintDistance extends PhysicsConstraint {\r\n    /** @internal */\r\n    constructor(pivotA: Vector3, pivotB: Vector3, axisA: Vector3, axisB: Vector3, scene: Scene) {\r\n        super(ConstraintType.DISTANCE, { pivotA: pivotA, pivotB: pivotB, axisA: axisA, axisB: axisB }, scene);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n */\r\n/** @internal */\r\nexport class PhysicsConstraintHinge extends PhysicsConstraint {\r\n    /** @internal */\r\n    constructor(pivotA: Vector3, pivotB: Vector3, axisA: Vector3, axisB: Vector3, scene: Scene) {\r\n        super(ConstraintType.HINGE, { pivotA: pivotA, pivotB: pivotB, axisA: axisA, axisB: axisB }, scene);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n */\r\n/** @internal */\r\nexport class PhysicsConstraintSlider extends PhysicsConstraint {\r\n    /** @internal */\r\n    constructor(pivotA: Vector3, pivotB: Vector3, axisA: Vector3, axisB: Vector3, scene: Scene) {\r\n        super(ConstraintType.SLIDER, { pivotA: pivotA, pivotB: pivotB, axisA: axisA, axisB: axisB }, scene);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n */\r\n/** @internal */\r\nexport class PhysicsConstraintLock extends PhysicsConstraint {\r\n    /** @internal */\r\n    constructor(pivotA: Vector3, pivotB: Vector3, axisA: Vector3, axisB: Vector3, scene: Scene) {\r\n        super(ConstraintType.LOCK, { pivotA: pivotA, pivotB: pivotB, axisA: axisA, axisB: axisB }, scene);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}