{"ast":null,"code":"import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Custom block created from user-defined json\n */\nexport class CustomBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new CustomBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n  }\n  /**\n   * Gets or sets the options for this custom block\n   */\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this._deserializeOptions(options);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"CustomBlock\";\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    let code = this._code;\n    let functionName = this._options.functionName;\n    // Replace the TYPE_XXX placeholders (if any)\n    this._inputs.forEach(input => {\n      const rexp = new RegExp(\"\\\\{TYPE_\" + input.name + \"\\\\}\", \"gm\");\n      const type = state._getGLType(input.type);\n      code = code.replace(rexp, type);\n      functionName = functionName.replace(rexp, type);\n    });\n    this._outputs.forEach(output => {\n      const rexp = new RegExp(\"\\\\{TYPE_\" + output.name + \"\\\\}\", \"gm\");\n      const type = state._getGLType(output.type);\n      code = code.replace(rexp, type);\n      functionName = functionName.replace(rexp, type);\n    });\n    state._emitFunction(functionName, code, \"\");\n    // Declare the output variables\n    this._outputs.forEach(output => {\n      state.compilationString += this._declareOutput(output, state) + \";\\r\\n\";\n    });\n    // Generate the function call\n    state.compilationString += functionName + \"(\";\n    let hasInput = false;\n    this._inputs.forEach((input, index) => {\n      if (index > 0) {\n        state.compilationString += \", \";\n      }\n      state.compilationString += input.associatedVariableName;\n      hasInput = true;\n    });\n    this._outputs.forEach((output, index) => {\n      if (index > 0 || hasInput) {\n        state.compilationString += \", \";\n      }\n      state.compilationString += output.associatedVariableName;\n    });\n    state.compilationString += \");\\r\\n\";\n    return this;\n  }\n  _dumpPropertiesCode() {\n    let codeString = super._dumpPropertiesCode();\n    codeString += `${this._codeVariableName}.options = ${JSON.stringify(this._options)};\\r\\n`;\n    return codeString;\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.options = this._options;\n    return serializationObject;\n  }\n  _deserialize(serializationObject, scene, rootUrl) {\n    this._deserializeOptions(serializationObject.options);\n    super._deserialize(serializationObject, scene, rootUrl);\n  }\n  _deserializeOptions(options) {\n    var _a, _b, _c;\n    this._options = options;\n    this._code = options.code.join(\"\\r\\n\") + \"\\r\\n\";\n    this.name = this.name || options.name;\n    this.target = NodeMaterialBlockTargets[options.target];\n    (_a = options.inParameters) === null || _a === void 0 ? void 0 : _a.forEach((input, index) => {\n      const type = NodeMaterialBlockConnectionPointTypes[input.type];\n      this.registerInput(input.name, type);\n      Object.defineProperty(this, input.name, {\n        get: function () {\n          return this._inputs[index];\n        },\n        enumerable: true,\n        configurable: true\n      });\n    });\n    (_b = options.outParameters) === null || _b === void 0 ? void 0 : _b.forEach((output, index) => {\n      this.registerOutput(output.name, NodeMaterialBlockConnectionPointTypes[output.type]);\n      Object.defineProperty(this, output.name, {\n        get: function () {\n          return this._outputs[index];\n        },\n        enumerable: true,\n        configurable: true\n      });\n      if (output.type === \"BasedOnInput\") {\n        this._outputs[index]._typeConnectionSource = this._findInputByName(output.typeFromInput)[0];\n      }\n    });\n    (_c = options.inLinkedConnectionTypes) === null || _c === void 0 ? void 0 : _c.forEach(connection => {\n      this._linkConnectionTypes(this._findInputByName(connection.input1)[1], this._findInputByName(connection.input2)[1]);\n    });\n  }\n  _findInputByName(name) {\n    if (!name) {\n      return null;\n    }\n    for (let i = 0; i < this._inputs.length; i++) {\n      if (this._inputs[i].name === name) {\n        return [this._inputs[i], i];\n      }\n    }\n    return null;\n  }\n}\nRegisterClass(\"BABYLON.CustomBlock\", CustomBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","CustomBlock","constructor","name","options","_options","_deserializeOptions","getClassName","_buildBlock","state","code","_code","functionName","_inputs","forEach","input","rexp","RegExp","type","_getGLType","replace","_outputs","output","_emitFunction","compilationString","_declareOutput","hasInput","index","associatedVariableName","_dumpPropertiesCode","codeString","_codeVariableName","JSON","stringify","serialize","serializationObject","_deserialize","scene","rootUrl","join","target","inParameters","registerInput","Object","defineProperty","get","enumerable","configurable","outParameters","registerOutput","_typeConnectionSource","_findInputByName","typeFromInput","inLinkedConnectionTypes","connection","_linkConnectionTypes","input1","input2","i","length"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Node/Blocks/customBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { Scene } from \"../../../scene\";\r\nimport type { Nullable } from \"../../../types\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\n\r\n/**\r\n * Custom block created from user-defined json\r\n */\r\nexport class CustomBlock extends NodeMaterialBlock {\r\n    private _options: any;\r\n    private _code: string;\r\n\r\n    /**\r\n     * Gets or sets the options for this custom block\r\n     */\r\n    public get options() {\r\n        return this._options;\r\n    }\r\n\r\n    public set options(options: any) {\r\n        this._deserializeOptions(options);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CustomBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"CustomBlock\";\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        let code = this._code;\r\n\r\n        let functionName = this._options.functionName;\r\n\r\n        // Replace the TYPE_XXX placeholders (if any)\r\n        this._inputs.forEach((input) => {\r\n            const rexp = new RegExp(\"\\\\{TYPE_\" + input.name + \"\\\\}\", \"gm\");\r\n            const type = state._getGLType(input.type);\r\n            code = code.replace(rexp, type);\r\n            functionName = functionName.replace(rexp, type);\r\n        });\r\n        this._outputs.forEach((output) => {\r\n            const rexp = new RegExp(\"\\\\{TYPE_\" + output.name + \"\\\\}\", \"gm\");\r\n            const type = state._getGLType(output.type);\r\n            code = code.replace(rexp, type);\r\n            functionName = functionName.replace(rexp, type);\r\n        });\r\n\r\n        state._emitFunction(functionName, code, \"\");\r\n\r\n        // Declare the output variables\r\n        this._outputs.forEach((output) => {\r\n            state.compilationString += this._declareOutput(output, state) + \";\\r\\n\";\r\n        });\r\n\r\n        // Generate the function call\r\n        state.compilationString += functionName + \"(\";\r\n\r\n        let hasInput = false;\r\n        this._inputs.forEach((input, index) => {\r\n            if (index > 0) {\r\n                state.compilationString += \", \";\r\n            }\r\n            state.compilationString += input.associatedVariableName;\r\n            hasInput = true;\r\n        });\r\n\r\n        this._outputs.forEach((output, index) => {\r\n            if (index > 0 || hasInput) {\r\n                state.compilationString += \", \";\r\n            }\r\n            state.compilationString += output.associatedVariableName;\r\n        });\r\n\r\n        state.compilationString += \");\\r\\n\";\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode();\r\n\r\n        codeString += `${this._codeVariableName}.options = ${JSON.stringify(this._options)};\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.options = this._options;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        this._deserializeOptions(serializationObject.options);\r\n\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n    }\r\n\r\n    private _deserializeOptions(options: any) {\r\n        this._options = options;\r\n        this._code = options.code.join(\"\\r\\n\") + \"\\r\\n\";\r\n        this.name = this.name || options.name;\r\n        this.target = (<any>NodeMaterialBlockTargets)[options.target];\r\n\r\n        options.inParameters?.forEach((input: any, index: number) => {\r\n            const type = (<any>NodeMaterialBlockConnectionPointTypes)[input.type];\r\n            this.registerInput(input.name, type);\r\n\r\n            Object.defineProperty(this, input.name, {\r\n                get: function () {\r\n                    return this._inputs[index];\r\n                },\r\n                enumerable: true,\r\n                configurable: true,\r\n            });\r\n        });\r\n\r\n        options.outParameters?.forEach((output: any, index: number) => {\r\n            this.registerOutput(output.name, (<any>NodeMaterialBlockConnectionPointTypes)[output.type]);\r\n\r\n            Object.defineProperty(this, output.name, {\r\n                get: function () {\r\n                    return this._outputs[index];\r\n                },\r\n                enumerable: true,\r\n                configurable: true,\r\n            });\r\n\r\n            if (output.type === \"BasedOnInput\") {\r\n                this._outputs[index]._typeConnectionSource = this._findInputByName(output.typeFromInput)![0];\r\n            }\r\n        });\r\n\r\n        options.inLinkedConnectionTypes?.forEach((connection: any) => {\r\n            this._linkConnectionTypes(this._findInputByName(connection.input1)![1], this._findInputByName(connection.input2)![1]);\r\n        });\r\n    }\r\n\r\n    private _findInputByName(name: string): Nullable<[NodeMaterialConnectionPoint, number]> {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n\r\n        for (let i = 0; i < this._inputs.length; i++) {\r\n            if (this._inputs[i].name === name) {\r\n                return [this._inputs[i], i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.CustomBlock\", CustomBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}