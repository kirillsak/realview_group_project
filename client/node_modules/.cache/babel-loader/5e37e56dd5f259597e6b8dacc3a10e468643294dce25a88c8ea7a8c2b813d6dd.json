{"ast":null,"code":"import { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/highlights.fragment.js\";\n/**\n * Extracts highlights from the image\n * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses\n */\nexport class HighlightsPostProcess extends PostProcess {\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"HighlightsPostProcess\" string\n   */\n  getClassName() {\n    return \"HighlightsPostProcess\";\n  }\n  /**\n   * Extracts highlights from the image\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses\n   * @param name The name of the effect.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType Type of texture for the post process (default: Engine.TEXTURETYPE_UNSIGNED_INT)\n   */\n  constructor(name, options, camera, samplingMode, engine, reusable, textureType = 0) {\n    super(name, \"highlights\", null, null, options, camera, samplingMode, engine, reusable, null, textureType);\n  }\n}","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,QAAQ,kBAAgB;AAI5C,OAAO,mCAAiC;AAExC;;;;AAIA,OAAM,MAAOC,qBAAsB,SAAQD,WAAW;EAClD;;;;EAIOE,YAAY;IACf,OAAO,uBAAuB;EAClC;EAEA;;;;;;;;;;;EAWAC,YACIC,IAAY,EACZC,OAAoC,EACpCC,MAAwB,EACxBC,YAAqB,EACrBC,MAAe,EACfC,QAAkB,EAClBC,cAAsB;IAEtB,KAAK,CAACN,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,EAAEC,OAAO,EAAEC,MAAM,EAAEC,YAAY,EAAEC,MAAM,EAAEC,QAAQ,EAAE,IAAI,EAAEC,WAAW,CAAC;EAC7G","names":["PostProcess","HighlightsPostProcess","getClassName","constructor","name","options","camera","samplingMode","engine","reusable","textureType"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/highlightsPostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/highlights.fragment\";\r\n\r\n/**\r\n * Extracts highlights from the image\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses\r\n */\r\nexport class HighlightsPostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"HighlightsPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"HighlightsPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Extracts highlights from the image\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of texture for the post process (default: Engine.TEXTURETYPE_UNSIGNED_INT)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT\r\n    ) {\r\n        super(name, \"highlights\", null, null, options, camera, samplingMode, engine, reusable, null, textureType);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}