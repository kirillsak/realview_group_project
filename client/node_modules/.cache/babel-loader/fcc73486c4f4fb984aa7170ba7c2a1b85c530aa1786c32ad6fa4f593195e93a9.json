{"ast":null,"code":"import { Logger } from \"../Misc/logger.js\";\nimport { Scene } from \"../scene.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { PBRMaterial } from \"../Materials/PBR/pbrMaterial.js\";\nimport { HemisphericLight } from \"../Lights/hemisphericLight.js\";\nimport { EnvironmentHelper } from \"./environmentHelper.js\";\nimport { FreeCamera } from \"../Cameras/freeCamera.js\";\nimport { ArcRotateCamera } from \"../Cameras/arcRotateCamera.js\";\nimport { VRExperienceHelper } from \"../Cameras/VR/vrExperienceHelper.js\";\nimport \"../Materials/Textures/Loaders/ddsTextureLoader.js\";\nimport \"../Materials/Textures/Loaders/envTextureLoader.js\";\nimport \"../Materials/Textures/Loaders/ktxTextureLoader.js\";\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder.js\";\nimport { WebXRDefaultExperience } from \"../XR/webXRDefaultExperience.js\";\n/** @internal */\n// eslint-disable-next-line no-var\nexport var _forceSceneHelpersToBundle = true;\nScene.prototype.createDefaultLight = function (replace = false) {\n  // Dispose existing light in replace mode.\n  if (replace) {\n    if (this.lights) {\n      for (let i = 0; i < this.lights.length; i++) {\n        this.lights[i].dispose();\n      }\n    }\n  }\n  // Light\n  if (this.lights.length === 0) {\n    new HemisphericLight(\"default light\", Vector3.Up(), this);\n  }\n};\nScene.prototype.createDefaultCamera = function (createArcRotateCamera = false, replace = false, attachCameraControls = false) {\n  // Dispose existing camera in replace mode.\n  if (replace) {\n    if (this.activeCamera) {\n      this.activeCamera.dispose();\n      this.activeCamera = null;\n    }\n  }\n  // Camera\n  if (!this.activeCamera) {\n    const worldExtends = this.getWorldExtends(mesh => mesh.isVisible && mesh.isEnabled());\n    const worldSize = worldExtends.max.subtract(worldExtends.min);\n    const worldCenter = worldExtends.min.add(worldSize.scale(0.5));\n    let camera;\n    let radius = worldSize.length() * 1.5;\n    // empty scene scenario!\n    if (!isFinite(radius)) {\n      radius = 1;\n      worldCenter.copyFromFloats(0, 0, 0);\n    }\n    if (createArcRotateCamera) {\n      const arcRotateCamera = new ArcRotateCamera(\"default camera\", -(Math.PI / 2), Math.PI / 2, radius, worldCenter, this);\n      arcRotateCamera.lowerRadiusLimit = radius * 0.01;\n      arcRotateCamera.wheelPrecision = 100 / radius;\n      camera = arcRotateCamera;\n    } else {\n      const freeCamera = new FreeCamera(\"default camera\", new Vector3(worldCenter.x, worldCenter.y, -radius), this);\n      freeCamera.setTarget(worldCenter);\n      camera = freeCamera;\n    }\n    camera.minZ = radius * 0.01;\n    camera.maxZ = radius * 1000;\n    camera.speed = radius * 0.2;\n    this.activeCamera = camera;\n    if (attachCameraControls) {\n      camera.attachControl();\n    }\n  }\n};\nScene.prototype.createDefaultCameraOrLight = function (createArcRotateCamera = false, replace = false, attachCameraControls = false) {\n  this.createDefaultLight(replace);\n  this.createDefaultCamera(createArcRotateCamera, replace, attachCameraControls);\n};\nScene.prototype.createDefaultSkybox = function (environmentTexture, pbr = false, scale = 1000, blur = 0, setGlobalEnvTexture = true) {\n  if (!environmentTexture) {\n    Logger.Warn(\"Can not create default skybox without environment texture.\");\n    return null;\n  }\n  if (setGlobalEnvTexture) {\n    if (environmentTexture) {\n      this.environmentTexture = environmentTexture;\n    }\n  }\n  // Skybox\n  const hdrSkybox = CreateBox(\"hdrSkyBox\", {\n    size: scale\n  }, this);\n  if (pbr) {\n    const hdrSkyboxMaterial = new PBRMaterial(\"skyBox\", this);\n    hdrSkyboxMaterial.backFaceCulling = false;\n    hdrSkyboxMaterial.reflectionTexture = environmentTexture.clone();\n    if (hdrSkyboxMaterial.reflectionTexture) {\n      hdrSkyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\n    }\n    hdrSkyboxMaterial.microSurface = 1.0 - blur;\n    hdrSkyboxMaterial.disableLighting = true;\n    hdrSkyboxMaterial.twoSidedLighting = true;\n    hdrSkybox.material = hdrSkyboxMaterial;\n  } else {\n    const skyboxMaterial = new StandardMaterial(\"skyBox\", this);\n    skyboxMaterial.backFaceCulling = false;\n    skyboxMaterial.reflectionTexture = environmentTexture.clone();\n    if (skyboxMaterial.reflectionTexture) {\n      skyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\n    }\n    skyboxMaterial.disableLighting = true;\n    hdrSkybox.material = skyboxMaterial;\n  }\n  hdrSkybox.isPickable = false;\n  hdrSkybox.infiniteDistance = true;\n  hdrSkybox.ignoreCameraMaxZ = true;\n  return hdrSkybox;\n};\nScene.prototype.createDefaultEnvironment = function (options) {\n  if (EnvironmentHelper) {\n    return new EnvironmentHelper(options, this);\n  }\n  return null;\n};\nScene.prototype.createDefaultVRExperience = function (webVROptions = {}) {\n  return new VRExperienceHelper(this, webVROptions);\n};\nScene.prototype.createDefaultXRExperienceAsync = function (options = {}) {\n  return WebXRDefaultExperience.CreateAsync(this, options).then(helper => {\n    return helper;\n  });\n};","map":{"version":3,"mappings":"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","names":["Logger","Scene","Vector3","Texture","StandardMaterial","PBRMaterial","HemisphericLight","EnvironmentHelper","FreeCamera","ArcRotateCamera","VRExperienceHelper","CreateBox","WebXRDefaultExperience","_forceSceneHelpersToBundle","prototype","createDefaultLight","replace","lights","i","length","dispose","Up","createDefaultCamera","createArcRotateCamera","attachCameraControls","activeCamera","worldExtends","getWorldExtends","mesh","isVisible","isEnabled","worldSize","max","subtract","min","worldCenter","add","scale","camera","radius","isFinite","copyFromFloats","arcRotateCamera","Math","PI","lowerRadiusLimit","wheelPrecision","freeCamera","x","y","setTarget","minZ","maxZ","speed","attachControl","createDefaultCameraOrLight","createDefaultSkybox","environmentTexture","pbr","blur","setGlobalEnvTexture","Warn","hdrSkybox","size","hdrSkyboxMaterial","backFaceCulling","reflectionTexture","clone","coordinatesMode","SKYBOX_MODE","microSurface","disableLighting","twoSidedLighting","material","skyboxMaterial","isPickable","infiniteDistance","ignoreCameraMaxZ","createDefaultEnvironment","options","createDefaultVRExperience","webVROptions","createDefaultXRExperienceAsync","CreateAsync","then","helper"],"sourceRoot":"","sources":["../../../../lts/core/generated/Helpers/sceneHelpers.ts"],"sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport { PBRMaterial } from \"../Materials/PBR/pbrMaterial\";\r\nimport { HemisphericLight } from \"../Lights/hemisphericLight\";\r\nimport type { IEnvironmentHelperOptions } from \"./environmentHelper\";\r\nimport { EnvironmentHelper } from \"./environmentHelper\";\r\nimport { FreeCamera } from \"../Cameras/freeCamera\";\r\nimport { ArcRotateCamera } from \"../Cameras/arcRotateCamera\";\r\nimport type { TargetCamera } from \"../Cameras/targetCamera\";\r\nimport type { VRExperienceHelperOptions } from \"../Cameras/VR/vrExperienceHelper\";\r\nimport { VRExperienceHelper } from \"../Cameras/VR/vrExperienceHelper\";\r\n\r\nimport \"../Materials/Textures/Loaders/ddsTextureLoader\";\r\nimport \"../Materials/Textures/Loaders/envTextureLoader\";\r\nimport \"../Materials/Textures/Loaders/ktxTextureLoader\";\r\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder\";\r\nimport type { WebXRDefaultExperienceOptions } from \"../XR/webXRDefaultExperience\";\r\nimport { WebXRDefaultExperience } from \"../XR/webXRDefaultExperience\";\r\n\r\n/** @internal */\r\n// eslint-disable-next-line no-var\r\nexport var _forceSceneHelpersToBundle = true;\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /**\r\n         * Creates a default light for the scene.\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/fastBuildWorld#create-default-light\r\n         * @param replace has the default false, when true replaces the existing lights in the scene with a hemispheric light\r\n         */\r\n        createDefaultLight(replace?: boolean): void;\r\n\r\n        /**\r\n         * Creates a default camera for the scene.\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/fastBuildWorld#create-default-camera\r\n         * @param createArcRotateCamera has the default false which creates a free camera, when true creates an arc rotate camera\r\n         * @param replace has default false, when true replaces the active camera in the scene\r\n         * @param attachCameraControls has default false, when true attaches camera controls to the canvas.\r\n         */\r\n        createDefaultCamera(createArcRotateCamera?: boolean, replace?: boolean, attachCameraControls?: boolean): void;\r\n\r\n        /**\r\n         * Creates a default camera and a default light.\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/fastBuildWorld#create-default-camera-or-light\r\n         * @param createArcRotateCamera has the default false which creates a free camera, when true creates an arc rotate camera\r\n         * @param replace has the default false, when true replaces the active camera/light in the scene\r\n         * @param attachCameraControls has the default false, when true attaches camera controls to the canvas.\r\n         */\r\n        createDefaultCameraOrLight(createArcRotateCamera?: boolean, replace?: boolean, attachCameraControls?: boolean): void;\r\n\r\n        /**\r\n         * Creates a new sky box\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/fastBuildWorld#create-default-skybox\r\n         * @param environmentTexture defines the texture to use as environment texture\r\n         * @param pbr has default false which requires the StandardMaterial to be used, when true PBRMaterial must be used\r\n         * @param scale defines the overall scale of the skybox\r\n         * @param blur is only available when pbr is true, default is 0, no blur, maximum value is 1\r\n         * @param setGlobalEnvTexture has default true indicating that scene.environmentTexture must match the current skybox texture\r\n         * @returns a new mesh holding the sky box\r\n         */\r\n        createDefaultSkybox(environmentTexture?: BaseTexture, pbr?: boolean, scale?: number, blur?: number, setGlobalEnvTexture?: boolean): Nullable<Mesh>;\r\n\r\n        /**\r\n         * Creates a new environment\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/fastBuildWorld#create-default-environment\r\n         * @param options defines the options you can use to configure the environment\r\n         * @returns the new EnvironmentHelper\r\n         */\r\n        createDefaultEnvironment(options?: Partial<IEnvironmentHelperOptions>): Nullable<EnvironmentHelper>;\r\n\r\n        /**\r\n         * Creates a new VREXperienceHelper\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/webVRHelper\r\n         * @param webVROptions defines the options used to create the new VREXperienceHelper\r\n         * @deprecated Please use createDefaultXRExperienceAsync instead\r\n         * @returns a new VREXperienceHelper\r\n         */\r\n        createDefaultVRExperience(webVROptions?: VRExperienceHelperOptions): VRExperienceHelper;\r\n\r\n        /**\r\n         * Creates a new WebXRDefaultExperience\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/webXR/introToWebXR\r\n         * @param options experience options\r\n         * @returns a promise for a new WebXRDefaultExperience\r\n         */\r\n        createDefaultXRExperienceAsync(options?: WebXRDefaultExperienceOptions): Promise<WebXRDefaultExperience>;\r\n    }\r\n}\r\n\r\nScene.prototype.createDefaultLight = function (replace = false): void {\r\n    // Dispose existing light in replace mode.\r\n    if (replace) {\r\n        if (this.lights) {\r\n            for (let i = 0; i < this.lights.length; i++) {\r\n                this.lights[i].dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Light\r\n    if (this.lights.length === 0) {\r\n        new HemisphericLight(\"default light\", Vector3.Up(), this);\r\n    }\r\n};\r\n\r\nScene.prototype.createDefaultCamera = function (createArcRotateCamera = false, replace = false, attachCameraControls = false): void {\r\n    // Dispose existing camera in replace mode.\r\n    if (replace) {\r\n        if (this.activeCamera) {\r\n            this.activeCamera.dispose();\r\n            this.activeCamera = null;\r\n        }\r\n    }\r\n\r\n    // Camera\r\n    if (!this.activeCamera) {\r\n        const worldExtends = this.getWorldExtends((mesh) => mesh.isVisible && mesh.isEnabled());\r\n        const worldSize = worldExtends.max.subtract(worldExtends.min);\r\n        const worldCenter = worldExtends.min.add(worldSize.scale(0.5));\r\n\r\n        let camera: TargetCamera;\r\n        let radius = worldSize.length() * 1.5;\r\n        // empty scene scenario!\r\n        if (!isFinite(radius)) {\r\n            radius = 1;\r\n            worldCenter.copyFromFloats(0, 0, 0);\r\n        }\r\n        if (createArcRotateCamera) {\r\n            const arcRotateCamera = new ArcRotateCamera(\"default camera\", -(Math.PI / 2), Math.PI / 2, radius, worldCenter, this);\r\n            arcRotateCamera.lowerRadiusLimit = radius * 0.01;\r\n            arcRotateCamera.wheelPrecision = 100 / radius;\r\n            camera = arcRotateCamera;\r\n        } else {\r\n            const freeCamera = new FreeCamera(\"default camera\", new Vector3(worldCenter.x, worldCenter.y, -radius), this);\r\n            freeCamera.setTarget(worldCenter);\r\n            camera = freeCamera;\r\n        }\r\n        camera.minZ = radius * 0.01;\r\n        camera.maxZ = radius * 1000;\r\n        camera.speed = radius * 0.2;\r\n        this.activeCamera = camera;\r\n\r\n        if (attachCameraControls) {\r\n            camera.attachControl();\r\n        }\r\n    }\r\n};\r\n\r\nScene.prototype.createDefaultCameraOrLight = function (createArcRotateCamera = false, replace = false, attachCameraControls = false): void {\r\n    this.createDefaultLight(replace);\r\n    this.createDefaultCamera(createArcRotateCamera, replace, attachCameraControls);\r\n};\r\n\r\nScene.prototype.createDefaultSkybox = function (environmentTexture?: BaseTexture, pbr = false, scale = 1000, blur = 0, setGlobalEnvTexture = true): Nullable<Mesh> {\r\n    if (!environmentTexture) {\r\n        Logger.Warn(\"Can not create default skybox without environment texture.\");\r\n        return null;\r\n    }\r\n\r\n    if (setGlobalEnvTexture) {\r\n        if (environmentTexture) {\r\n            this.environmentTexture = environmentTexture;\r\n        }\r\n    }\r\n\r\n    // Skybox\r\n    const hdrSkybox = CreateBox(\"hdrSkyBox\", { size: scale }, this);\r\n    if (pbr) {\r\n        const hdrSkyboxMaterial = new PBRMaterial(\"skyBox\", this);\r\n        hdrSkyboxMaterial.backFaceCulling = false;\r\n        hdrSkyboxMaterial.reflectionTexture = environmentTexture.clone();\r\n        if (hdrSkyboxMaterial.reflectionTexture) {\r\n            hdrSkyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\r\n        }\r\n        hdrSkyboxMaterial.microSurface = 1.0 - blur;\r\n        hdrSkyboxMaterial.disableLighting = true;\r\n        hdrSkyboxMaterial.twoSidedLighting = true;\r\n        hdrSkybox.material = hdrSkyboxMaterial;\r\n    } else {\r\n        const skyboxMaterial = new StandardMaterial(\"skyBox\", this);\r\n        skyboxMaterial.backFaceCulling = false;\r\n        skyboxMaterial.reflectionTexture = environmentTexture.clone();\r\n        if (skyboxMaterial.reflectionTexture) {\r\n            skyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\r\n        }\r\n        skyboxMaterial.disableLighting = true;\r\n        hdrSkybox.material = skyboxMaterial;\r\n    }\r\n    hdrSkybox.isPickable = false;\r\n    hdrSkybox.infiniteDistance = true;\r\n    hdrSkybox.ignoreCameraMaxZ = true;\r\n    return hdrSkybox;\r\n};\r\n\r\nScene.prototype.createDefaultEnvironment = function (options: Partial<IEnvironmentHelperOptions>): Nullable<EnvironmentHelper> {\r\n    if (EnvironmentHelper) {\r\n        return new EnvironmentHelper(options, this);\r\n    }\r\n    return null;\r\n};\r\n\r\nScene.prototype.createDefaultVRExperience = function (webVROptions: VRExperienceHelperOptions = {}): VRExperienceHelper {\r\n    return new VRExperienceHelper(this, webVROptions);\r\n};\r\n\r\nScene.prototype.createDefaultXRExperienceAsync = function (options: WebXRDefaultExperienceOptions = {}): Promise<WebXRDefaultExperience> {\r\n    return WebXRDefaultExperience.CreateAsync(this, options).then((helper) => {\r\n        return helper;\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}