{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ShaderLanguage } from \"../../Materials/shaderLanguage.js\";\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\n/** @internal */\nexport class WebGPUShaderProcessor {\n  constructor() {\n    this.shaderLanguage = ShaderLanguage.GLSL;\n  }\n  _addUniformToLeftOverUBO(name, uniformType, preProcessors) {\n    let length = 0;\n    [name, uniformType, length] = this._getArraySize(name, uniformType, preProcessors);\n    for (let i = 0; i < this._webgpuProcessingContext.leftOverUniforms.length; i++) {\n      if (this._webgpuProcessingContext.leftOverUniforms[i].name === name) {\n        return;\n      }\n    }\n    this._webgpuProcessingContext.leftOverUniforms.push({\n      name,\n      type: uniformType,\n      length\n    });\n  }\n  _buildLeftOverUBO() {\n    if (!this._webgpuProcessingContext.leftOverUniforms.length) {\n      return \"\";\n    }\n    const name = WebGPUShaderProcessor.LeftOvertUBOName;\n    let availableUBO = this._webgpuProcessingContext.availableBuffers[name];\n    if (!availableUBO) {\n      availableUBO = {\n        binding: this._webgpuProcessingContext.getNextFreeUBOBinding()\n      };\n      this._webgpuProcessingContext.availableBuffers[name] = availableUBO;\n      this._addBufferBindingDescription(name, availableUBO, WebGPUConstants.BufferBindingType.Uniform, true);\n      this._addBufferBindingDescription(name, availableUBO, WebGPUConstants.BufferBindingType.Uniform, false);\n    }\n    return this._generateLeftOverUBOCode(name, availableUBO);\n  }\n  _collectBindingNames() {\n    // collect all the binding names for faster processing in WebGPUCacheBindGroup\n    for (let i = 0; i < this._webgpuProcessingContext.bindGroupLayoutEntries.length; i++) {\n      const setDefinition = this._webgpuProcessingContext.bindGroupLayoutEntries[i];\n      if (setDefinition === undefined) {\n        this._webgpuProcessingContext.bindGroupLayoutEntries[i] = [];\n        continue;\n      }\n      for (let j = 0; j < setDefinition.length; j++) {\n        const entry = this._webgpuProcessingContext.bindGroupLayoutEntries[i][j];\n        const name = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[i][entry.binding].name;\n        const nameInArrayOfTexture = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[i][entry.binding].nameInArrayOfTexture;\n        if (entry) {\n          if (entry.texture || entry.externalTexture || entry.storageTexture) {\n            this._webgpuProcessingContext.textureNames.push(nameInArrayOfTexture);\n          } else if (entry.sampler) {\n            this._webgpuProcessingContext.samplerNames.push(name);\n          } else if (entry.buffer) {\n            this._webgpuProcessingContext.bufferNames.push(name);\n          }\n        }\n      }\n    }\n  }\n  _preCreateBindGroupEntries() {\n    const bindGroupEntries = this._webgpuProcessingContext.bindGroupEntries;\n    for (let i = 0; i < this._webgpuProcessingContext.bindGroupLayoutEntries.length; i++) {\n      const setDefinition = this._webgpuProcessingContext.bindGroupLayoutEntries[i];\n      const entries = [];\n      for (let j = 0; j < setDefinition.length; j++) {\n        const entry = this._webgpuProcessingContext.bindGroupLayoutEntries[i][j];\n        if (entry.sampler || entry.texture || entry.storageTexture || entry.externalTexture) {\n          entries.push({\n            binding: entry.binding,\n            resource: undefined\n          });\n        } else if (entry.buffer) {\n          entries.push({\n            binding: entry.binding,\n            resource: {\n              buffer: undefined,\n              offset: 0,\n              size: 0\n            }\n          });\n        }\n      }\n      bindGroupEntries[i] = entries;\n    }\n  }\n  _addTextureBindingDescription(name, textureInfo, textureIndex, dimension, format, isVertex) {\n    // eslint-disable-next-line prefer-const\n    let {\n      groupIndex,\n      bindingIndex\n    } = textureInfo.textures[textureIndex];\n    if (!this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex]) {\n      this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex] = [];\n      this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex] = [];\n    }\n    if (!this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex]) {\n      let len;\n      if (dimension === null) {\n        len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\n          binding: bindingIndex,\n          visibility: 0,\n          externalTexture: {}\n        });\n      } else if (format) {\n        len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\n          binding: bindingIndex,\n          visibility: 0,\n          storageTexture: {\n            access: WebGPUConstants.StorageTextureAccess.WriteOnly,\n            format,\n            viewDimension: dimension\n          }\n        });\n      } else {\n        len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\n          binding: bindingIndex,\n          visibility: 0,\n          texture: {\n            sampleType: textureInfo.sampleType,\n            viewDimension: dimension,\n            multisampled: false\n          }\n        });\n      }\n      const textureName = textureInfo.isTextureArray ? name + textureIndex : name;\n      this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex] = {\n        name,\n        index: len - 1,\n        nameInArrayOfTexture: textureName\n      };\n    }\n    bindingIndex = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex].index;\n    if (isVertex) {\n      this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Vertex;\n    } else {\n      this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Fragment;\n    }\n  }\n  _addSamplerBindingDescription(name, samplerInfo, isVertex) {\n    // eslint-disable-next-line prefer-const\n    let {\n      groupIndex,\n      bindingIndex\n    } = samplerInfo.binding;\n    if (!this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex]) {\n      this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex] = [];\n      this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex] = [];\n    }\n    if (!this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex]) {\n      const len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\n        binding: bindingIndex,\n        visibility: 0,\n        sampler: {\n          type: samplerInfo.type\n        }\n      });\n      this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex] = {\n        name,\n        index: len - 1\n      };\n    }\n    bindingIndex = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex].index;\n    if (isVertex) {\n      this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Vertex;\n    } else {\n      this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Fragment;\n    }\n  }\n  _addBufferBindingDescription(name, uniformBufferInfo, bufferType, isVertex) {\n    // eslint-disable-next-line prefer-const\n    let {\n      groupIndex,\n      bindingIndex\n    } = uniformBufferInfo.binding;\n    if (!this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex]) {\n      this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex] = [];\n      this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex] = [];\n    }\n    if (!this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex]) {\n      const len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\n        binding: bindingIndex,\n        visibility: 0,\n        buffer: {\n          type: bufferType\n        }\n      });\n      this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex] = {\n        name,\n        index: len - 1\n      };\n    }\n    bindingIndex = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex].index;\n    if (isVertex) {\n      this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Vertex;\n    } else {\n      this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Fragment;\n    }\n  }\n  _injectStartingAndEndingCode(code, mainFuncDecl, startingCode, endingCode) {\n    let idx = code.indexOf(mainFuncDecl);\n    if (idx < 0) {\n      console.error(`No \"main\" function found in shader code! Processing aborted.`);\n      return code;\n    }\n    if (startingCode) {\n      // eslint-disable-next-line no-empty\n      while (idx++ < code.length && code.charAt(idx) != \"{\") {}\n      if (idx < code.length) {\n        const part1 = code.substring(0, idx + 1);\n        const part2 = code.substring(idx + 1);\n        code = part1 + startingCode + part2;\n      }\n    }\n    if (endingCode) {\n      const lastClosingCurly = code.lastIndexOf(\"}\");\n      code = code.substring(0, lastClosingCurly);\n      code += endingCode + \"\\n}\";\n    }\n    return code;\n  }\n}\nWebGPUShaderProcessor.AutoSamplerSuffix = \"Sampler\";\nWebGPUShaderProcessor.LeftOvertUBOName = \"LeftOver\";\nWebGPUShaderProcessor.InternalsUBOName = \"Internals\";\nWebGPUShaderProcessor.UniformSizes = {\n  // GLSL types\n  bool: 1,\n  int: 1,\n  float: 1,\n  vec2: 2,\n  ivec2: 2,\n  vec3: 3,\n  ivec3: 3,\n  vec4: 4,\n  ivec4: 4,\n  mat2: 4,\n  mat3: 12,\n  mat4: 16,\n  // WGSL types\n  i32: 1,\n  u32: 1,\n  f32: 1,\n  mat2x2: 4,\n  mat3x3: 12,\n  mat4x4: 16\n};\n// eslint-disable-next-line @typescript-eslint/naming-convention\nWebGPUShaderProcessor._SamplerFunctionByWebGLSamplerType = {\n  sampler2D: \"sampler2D\",\n  sampler2DArray: \"sampler2DArray\",\n  sampler2DShadow: \"sampler2DShadow\",\n  sampler2DArrayShadow: \"sampler2DArrayShadow\",\n  samplerCube: \"samplerCube\",\n  sampler3D: \"sampler3D\"\n};\n// eslint-disable-next-line @typescript-eslint/naming-convention\nWebGPUShaderProcessor._TextureTypeByWebGLSamplerType = {\n  sampler2D: \"texture2D\",\n  sampler2DArray: \"texture2DArray\",\n  sampler2DShadow: \"texture2D\",\n  sampler2DArrayShadow: \"texture2DArray\",\n  samplerCube: \"textureCube\",\n  samplerCubeArray: \"textureCubeArray\",\n  sampler3D: \"texture3D\"\n};\n// eslint-disable-next-line @typescript-eslint/naming-convention\nWebGPUShaderProcessor._GpuTextureViewDimensionByWebGPUTextureType = {\n  textureCube: WebGPUConstants.TextureViewDimension.Cube,\n  textureCubeArray: WebGPUConstants.TextureViewDimension.CubeArray,\n  texture2D: WebGPUConstants.TextureViewDimension.E2d,\n  texture2DArray: WebGPUConstants.TextureViewDimension.E2dArray,\n  texture3D: WebGPUConstants.TextureViewDimension.E3d\n};\n// if the webgl sampler type is not listed in this array, \"sampler\" is taken by default\n// eslint-disable-next-line @typescript-eslint/naming-convention\nWebGPUShaderProcessor._SamplerTypeByWebGLSamplerType = {\n  sampler2DShadow: \"samplerShadow\",\n  sampler2DArrayShadow: \"samplerShadow\"\n};\n// eslint-disable-next-line @typescript-eslint/naming-convention\nWebGPUShaderProcessor._IsComparisonSamplerByWebGPUSamplerType = {\n  samplerShadow: true,\n  samplerArrayShadow: true,\n  sampler: false\n};","map":{"version":3,"mappings":"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","names":["ShaderLanguage","WebGPUConstants","WebGPUShaderProcessor","constructor","GLSL","_addUniformToLeftOverUBO","name","uniformType","preProcessors","length","_getArraySize","i","_webgpuProcessingContext","leftOverUniforms","push","type","_buildLeftOverUBO","LeftOvertUBOName","availableUBO","availableBuffers","binding","getNextFreeUBOBinding","_addBufferBindingDescription","BufferBindingType","Uniform","_generateLeftOverUBOCode","_collectBindingNames","bindGroupLayoutEntries","setDefinition","undefined","j","entry","bindGroupLayoutEntryInfo","nameInArrayOfTexture","texture","externalTexture","storageTexture","textureNames","sampler","samplerNames","buffer","bufferNames","_preCreateBindGroupEntries","bindGroupEntries","entries","resource","offset","size","_addTextureBindingDescription","textureInfo","textureIndex","dimension","format","isVertex","groupIndex","bindingIndex","textures","len","visibility","access","StorageTextureAccess","WriteOnly","viewDimension","sampleType","multisampled","textureName","isTextureArray","index","ShaderStage","Vertex","Fragment","_addSamplerBindingDescription","samplerInfo","uniformBufferInfo","bufferType","_injectStartingAndEndingCode","code","mainFuncDecl","startingCode","endingCode","idx","indexOf","console","error","charAt","part1","substring","part2","lastClosingCurly","lastIndexOf","bool","int","float","vec2","ivec2","vec3","ivec3","vec4","ivec4","mat2","mat3","mat4","i32","u32","f32","mat2x2","mat3x3","mat4x4","sampler2D","sampler2DArray","sampler2DShadow","sampler2DArrayShadow","samplerCube","sampler3D","samplerCubeArray","textureCube","TextureViewDimension","Cube","textureCubeArray","CubeArray","texture2D","E2d","texture2DArray","E2dArray","texture3D","E3d","samplerShadow","samplerArrayShadow"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/WebGPU/webgpuShaderProcessor.ts"],"sourcesContent":["import { ShaderLanguage } from \"../../Materials/shaderLanguage\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { IShaderProcessor } from \"../Processors/iShaderProcessor\";\r\nimport * as WebGPUConstants from \"./webgpuConstants\";\r\nimport type { WebGPUSamplerDescription, WebGPUShaderProcessingContext, WebGPUTextureDescription, WebGPUBufferDescription } from \"./webgpuShaderProcessingContext\";\r\n\r\n/** @internal */\r\nexport abstract class WebGPUShaderProcessor implements IShaderProcessor {\r\n    public static readonly AutoSamplerSuffix = \"Sampler\";\r\n    public static readonly LeftOvertUBOName = \"LeftOver\";\r\n    public static readonly InternalsUBOName = \"Internals\";\r\n\r\n    public static UniformSizes: { [type: string]: number } = {\r\n        // GLSL types\r\n        bool: 1,\r\n        int: 1,\r\n        float: 1,\r\n        vec2: 2,\r\n        ivec2: 2,\r\n        vec3: 3,\r\n        ivec3: 3,\r\n        vec4: 4,\r\n        ivec4: 4,\r\n        mat2: 4,\r\n        mat3: 12,\r\n        mat4: 16,\r\n\r\n        // WGSL types\r\n        i32: 1,\r\n        u32: 1,\r\n        f32: 1,\r\n        mat2x2: 4,\r\n        mat3x3: 12,\r\n        mat4x4: 16,\r\n    };\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected static _SamplerFunctionByWebGLSamplerType: { [key: string]: string } = {\r\n        sampler2D: \"sampler2D\",\r\n        sampler2DArray: \"sampler2DArray\",\r\n        sampler2DShadow: \"sampler2DShadow\",\r\n        sampler2DArrayShadow: \"sampler2DArrayShadow\",\r\n        samplerCube: \"samplerCube\",\r\n        sampler3D: \"sampler3D\",\r\n    };\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected static _TextureTypeByWebGLSamplerType: { [key: string]: string } = {\r\n        sampler2D: \"texture2D\",\r\n        sampler2DArray: \"texture2DArray\",\r\n        sampler2DShadow: \"texture2D\",\r\n        sampler2DArrayShadow: \"texture2DArray\",\r\n        samplerCube: \"textureCube\",\r\n        samplerCubeArray: \"textureCubeArray\",\r\n        sampler3D: \"texture3D\",\r\n    };\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected static _GpuTextureViewDimensionByWebGPUTextureType: { [key: string]: GPUTextureViewDimension } = {\r\n        textureCube: WebGPUConstants.TextureViewDimension.Cube,\r\n        textureCubeArray: WebGPUConstants.TextureViewDimension.CubeArray,\r\n        texture2D: WebGPUConstants.TextureViewDimension.E2d,\r\n        texture2DArray: WebGPUConstants.TextureViewDimension.E2dArray,\r\n        texture3D: WebGPUConstants.TextureViewDimension.E3d,\r\n    };\r\n\r\n    // if the webgl sampler type is not listed in this array, \"sampler\" is taken by default\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected static _SamplerTypeByWebGLSamplerType: { [key: string]: string } = {\r\n        sampler2DShadow: \"samplerShadow\",\r\n        sampler2DArrayShadow: \"samplerShadow\",\r\n    };\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected static _IsComparisonSamplerByWebGPUSamplerType: { [key: string]: boolean } = {\r\n        samplerShadow: true,\r\n        samplerArrayShadow: true,\r\n        sampler: false,\r\n    };\r\n\r\n    public shaderLanguage = ShaderLanguage.GLSL;\r\n\r\n    protected _webgpuProcessingContext: WebGPUShaderProcessingContext;\r\n\r\n    protected abstract _getArraySize(name: string, type: string, preProcessors: { [key: string]: string }): [string, string, number];\r\n    protected abstract _generateLeftOverUBOCode(name: string, uniformBufferDescription: WebGPUBufferDescription): string;\r\n\r\n    protected _addUniformToLeftOverUBO(name: string, uniformType: string, preProcessors: { [key: string]: string }): void {\r\n        let length = 0;\r\n\r\n        [name, uniformType, length] = this._getArraySize(name, uniformType, preProcessors);\r\n\r\n        for (let i = 0; i < this._webgpuProcessingContext.leftOverUniforms.length; i++) {\r\n            if (this._webgpuProcessingContext.leftOverUniforms[i].name === name) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._webgpuProcessingContext.leftOverUniforms.push({\r\n            name,\r\n            type: uniformType,\r\n            length,\r\n        });\r\n    }\r\n\r\n    protected _buildLeftOverUBO(): string {\r\n        if (!this._webgpuProcessingContext.leftOverUniforms.length) {\r\n            return \"\";\r\n        }\r\n        const name = WebGPUShaderProcessor.LeftOvertUBOName;\r\n        let availableUBO = this._webgpuProcessingContext.availableBuffers[name];\r\n        if (!availableUBO) {\r\n            availableUBO = {\r\n                binding: this._webgpuProcessingContext.getNextFreeUBOBinding(),\r\n            };\r\n            this._webgpuProcessingContext.availableBuffers[name] = availableUBO;\r\n            this._addBufferBindingDescription(name, availableUBO, WebGPUConstants.BufferBindingType.Uniform, true);\r\n            this._addBufferBindingDescription(name, availableUBO, WebGPUConstants.BufferBindingType.Uniform, false);\r\n        }\r\n\r\n        return this._generateLeftOverUBOCode(name, availableUBO);\r\n    }\r\n\r\n    protected _collectBindingNames(): void {\r\n        // collect all the binding names for faster processing in WebGPUCacheBindGroup\r\n        for (let i = 0; i < this._webgpuProcessingContext.bindGroupLayoutEntries.length; i++) {\r\n            const setDefinition = this._webgpuProcessingContext.bindGroupLayoutEntries[i];\r\n            if (setDefinition === undefined) {\r\n                this._webgpuProcessingContext.bindGroupLayoutEntries[i] = [];\r\n                continue;\r\n            }\r\n            for (let j = 0; j < setDefinition.length; j++) {\r\n                const entry = this._webgpuProcessingContext.bindGroupLayoutEntries[i][j];\r\n                const name = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[i][entry.binding].name;\r\n                const nameInArrayOfTexture = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[i][entry.binding].nameInArrayOfTexture;\r\n                if (entry) {\r\n                    if (entry.texture || entry.externalTexture || entry.storageTexture) {\r\n                        this._webgpuProcessingContext.textureNames.push(nameInArrayOfTexture!);\r\n                    } else if (entry.sampler) {\r\n                        this._webgpuProcessingContext.samplerNames.push(name);\r\n                    } else if (entry.buffer) {\r\n                        this._webgpuProcessingContext.bufferNames.push(name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _preCreateBindGroupEntries(): void {\r\n        const bindGroupEntries = this._webgpuProcessingContext.bindGroupEntries;\r\n\r\n        for (let i = 0; i < this._webgpuProcessingContext.bindGroupLayoutEntries.length; i++) {\r\n            const setDefinition = this._webgpuProcessingContext.bindGroupLayoutEntries[i];\r\n\r\n            const entries: GPUBindGroupEntry[] = [];\r\n            for (let j = 0; j < setDefinition.length; j++) {\r\n                const entry = this._webgpuProcessingContext.bindGroupLayoutEntries[i][j];\r\n\r\n                if (entry.sampler || entry.texture || entry.storageTexture || entry.externalTexture) {\r\n                    entries.push({\r\n                        binding: entry.binding,\r\n                        resource: undefined as any,\r\n                    });\r\n                } else if (entry.buffer) {\r\n                    entries.push({\r\n                        binding: entry.binding,\r\n                        resource: {\r\n                            buffer: undefined as any,\r\n                            offset: 0,\r\n                            size: 0,\r\n                        },\r\n                    });\r\n                }\r\n            }\r\n\r\n            bindGroupEntries[i] = entries;\r\n        }\r\n    }\r\n\r\n    protected _addTextureBindingDescription(\r\n        name: string,\r\n        textureInfo: WebGPUTextureDescription,\r\n        textureIndex: number,\r\n        dimension: Nullable<GPUTextureViewDimension>,\r\n        format: Nullable<GPUTextureFormat>,\r\n        isVertex: boolean\r\n    ): void {\r\n        // eslint-disable-next-line prefer-const\r\n        let { groupIndex, bindingIndex } = textureInfo.textures[textureIndex];\r\n        if (!this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex]) {\r\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex] = [];\r\n            this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex] = [];\r\n        }\r\n        if (!this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex]) {\r\n            let len;\r\n            if (dimension === null) {\r\n                len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\r\n                    binding: bindingIndex,\r\n                    visibility: 0,\r\n                    externalTexture: {},\r\n                });\r\n            } else if (format) {\r\n                len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\r\n                    binding: bindingIndex,\r\n                    visibility: 0,\r\n                    storageTexture: {\r\n                        access: WebGPUConstants.StorageTextureAccess.WriteOnly,\r\n                        format,\r\n                        viewDimension: dimension,\r\n                    },\r\n                });\r\n            } else {\r\n                len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\r\n                    binding: bindingIndex,\r\n                    visibility: 0,\r\n                    texture: {\r\n                        sampleType: textureInfo.sampleType,\r\n                        viewDimension: dimension,\r\n                        multisampled: false,\r\n                    },\r\n                });\r\n            }\r\n            const textureName = textureInfo.isTextureArray ? name + textureIndex : name;\r\n            this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex] = { name, index: len - 1, nameInArrayOfTexture: textureName };\r\n        }\r\n\r\n        bindingIndex = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex].index;\r\n        if (isVertex) {\r\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Vertex;\r\n        } else {\r\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Fragment;\r\n        }\r\n    }\r\n\r\n    protected _addSamplerBindingDescription(name: string, samplerInfo: WebGPUSamplerDescription, isVertex: boolean): void {\r\n        // eslint-disable-next-line prefer-const\r\n        let { groupIndex, bindingIndex } = samplerInfo.binding;\r\n        if (!this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex]) {\r\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex] = [];\r\n            this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex] = [];\r\n        }\r\n        if (!this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex]) {\r\n            const len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\r\n                binding: bindingIndex,\r\n                visibility: 0,\r\n                sampler: {\r\n                    type: samplerInfo.type,\r\n                },\r\n            });\r\n            this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex] = { name, index: len - 1 };\r\n        }\r\n\r\n        bindingIndex = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex].index;\r\n        if (isVertex) {\r\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Vertex;\r\n        } else {\r\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Fragment;\r\n        }\r\n    }\r\n\r\n    protected _addBufferBindingDescription(name: string, uniformBufferInfo: WebGPUBufferDescription, bufferType: GPUBufferBindingType, isVertex: boolean): void {\r\n        // eslint-disable-next-line prefer-const\r\n        let { groupIndex, bindingIndex } = uniformBufferInfo.binding;\r\n        if (!this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex]) {\r\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex] = [];\r\n            this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex] = [];\r\n        }\r\n        if (!this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex]) {\r\n            const len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\r\n                binding: bindingIndex,\r\n                visibility: 0,\r\n                buffer: {\r\n                    type: bufferType,\r\n                },\r\n            });\r\n            this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex] = { name, index: len - 1 };\r\n        }\r\n\r\n        bindingIndex = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex].index;\r\n        if (isVertex) {\r\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Vertex;\r\n        } else {\r\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Fragment;\r\n        }\r\n    }\r\n\r\n    protected _injectStartingAndEndingCode(code: string, mainFuncDecl: string, startingCode?: string, endingCode?: string): string {\r\n        let idx = code.indexOf(mainFuncDecl);\r\n        if (idx < 0) {\r\n            console.error(`No \"main\" function found in shader code! Processing aborted.`);\r\n            return code;\r\n        }\r\n        if (startingCode) {\r\n            // eslint-disable-next-line no-empty\r\n            while (idx++ < code.length && code.charAt(idx) != \"{\") {}\r\n            if (idx < code.length) {\r\n                const part1 = code.substring(0, idx + 1);\r\n                const part2 = code.substring(idx + 1);\r\n                code = part1 + startingCode + part2;\r\n            }\r\n        }\r\n\r\n        if (endingCode) {\r\n            const lastClosingCurly = code.lastIndexOf(\"}\");\r\n            code = code.substring(0, lastClosingCurly);\r\n            code += endingCode + \"\\n}\";\r\n        }\r\n\r\n        return code;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}