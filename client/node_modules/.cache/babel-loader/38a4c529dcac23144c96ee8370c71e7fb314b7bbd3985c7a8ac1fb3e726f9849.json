{"ast":null,"code":"import { Observable } from \"../Misc/observable.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { WebXRWebGLLayerWrapper } from \"./webXRWebGLLayer.js\";\n/**\n * Configuration object for WebXR output canvas\n */\nexport class WebXRManagedOutputCanvasOptions {\n  /**\n   * Get the default values of the configuration object\n   * @param engine defines the engine to use (can be null)\n   * @returns default values of this configuration object\n   */\n  static GetDefaults(engine) {\n    const defaults = new WebXRManagedOutputCanvasOptions();\n    defaults.canvasOptions = {\n      antialias: true,\n      depth: true,\n      stencil: engine ? engine.isStencilEnable : true,\n      alpha: true,\n      framebufferScaleFactor: 1\n    };\n    defaults.newCanvasCssStyle = \"position:absolute; bottom:0px;right:0px;z-index:10;width:90%;height:100%;background-color: #000000;\";\n    return defaults;\n  }\n}\n/**\n * Creates a canvas that is added/removed from the webpage when entering/exiting XR\n */\nexport class WebXRManagedOutputCanvas {\n  /**\n   * Initializes the canvas to be added/removed upon entering/exiting xr\n   * @param _xrSessionManager The XR Session manager\n   * @param _options optional configuration for this canvas output. defaults will be used if not provided\n   */\n  constructor(_xrSessionManager, _options = WebXRManagedOutputCanvasOptions.GetDefaults()) {\n    this._options = _options;\n    this._canvas = null;\n    this._engine = null;\n    /**\n     * xr layer for the canvas\n     */\n    this.xrLayer = null;\n    this._xrLayerWrapper = null;\n    /**\n     * Observers registered here will be triggered when the xr layer was initialized\n     */\n    this.onXRLayerInitObservable = new Observable();\n    this._engine = _xrSessionManager.scene.getEngine();\n    this._engine.onDisposeObservable.addOnce(() => {\n      this._engine = null;\n    });\n    if (!_options.canvasElement) {\n      const canvas = document.createElement(\"canvas\");\n      canvas.style.cssText = this._options.newCanvasCssStyle || \"position:absolute; bottom:0px;right:0px;\";\n      this._setManagedOutputCanvas(canvas);\n    } else {\n      this._setManagedOutputCanvas(_options.canvasElement);\n    }\n    _xrSessionManager.onXRSessionInit.add(() => {\n      this._addCanvas();\n    });\n    _xrSessionManager.onXRSessionEnded.add(() => {\n      this._removeCanvas();\n    });\n  }\n  /**\n   * Disposes of the object\n   */\n  dispose() {\n    this._removeCanvas();\n    this._setManagedOutputCanvas(null);\n  }\n  /**\n   * Initializes a XRWebGLLayer to be used as the session's baseLayer.\n   * @param xrSession xr session\n   * @returns a promise that will resolve once the XR Layer has been created\n   */\n  async initializeXRLayerAsync(xrSession) {\n    const createLayer = () => {\n      this.xrLayer = new XRWebGLLayer(xrSession, this.canvasContext, this._options.canvasOptions);\n      this._xrLayerWrapper = new WebXRWebGLLayerWrapper(this.xrLayer);\n      this.onXRLayerInitObservable.notifyObservers(this.xrLayer);\n      return this.xrLayer;\n    };\n    // support canvases without makeXRCompatible\n    if (!this.canvasContext.makeXRCompatible) {\n      return Promise.resolve(createLayer());\n    }\n    return this.canvasContext.makeXRCompatible().then(\n    // catch any error and continue. When using the emulator is throws this error for no apparent reason.\n    () => {}, () => {\n      // log the error, continue nonetheless!\n      Tools.Warn(\"Error executing makeXRCompatible. This does not mean that the session will work incorrectly.\");\n    }).then(() => {\n      return createLayer();\n    });\n  }\n  _addCanvas() {\n    if (this._canvas && this._engine && this._canvas !== this._engine.getRenderingCanvas()) {\n      document.body.appendChild(this._canvas);\n    }\n    if (this.xrLayer) {\n      this._setCanvasSize(true);\n    } else {\n      this.onXRLayerInitObservable.addOnce(() => {\n        this._setCanvasSize(true);\n      });\n    }\n  }\n  _removeCanvas() {\n    if (this._canvas && this._engine && document.body.contains(this._canvas) && this._canvas !== this._engine.getRenderingCanvas()) {\n      document.body.removeChild(this._canvas);\n    }\n    this._setCanvasSize(false);\n  }\n  _setCanvasSize(init = true, xrLayer = this._xrLayerWrapper) {\n    if (!this._canvas || !this._engine) {\n      return;\n    }\n    if (init) {\n      if (xrLayer) {\n        if (this._canvas !== this._engine.getRenderingCanvas()) {\n          this._canvas.style.width = xrLayer.getWidth() + \"px\";\n          this._canvas.style.height = xrLayer.getHeight() + \"px\";\n        } else {\n          this._engine.setSize(xrLayer.getWidth(), xrLayer.getHeight());\n        }\n      }\n    } else {\n      if (this._originalCanvasSize) {\n        if (this._canvas !== this._engine.getRenderingCanvas()) {\n          this._canvas.style.width = this._originalCanvasSize.width + \"px\";\n          this._canvas.style.height = this._originalCanvasSize.height + \"px\";\n        } else {\n          this._engine.setSize(this._originalCanvasSize.width, this._originalCanvasSize.height);\n        }\n      }\n    }\n  }\n  _setManagedOutputCanvas(canvas) {\n    this._removeCanvas();\n    if (!canvas) {\n      this._canvas = null;\n      this.canvasContext = null;\n    } else {\n      this._originalCanvasSize = {\n        width: canvas.offsetWidth,\n        height: canvas.offsetHeight\n      };\n      this._canvas = canvas;\n      this.canvasContext = this._canvas.getContext(\"webgl2\");\n      if (!this.canvasContext) {\n        this.canvasContext = this._canvas.getContext(\"webgl\");\n      }\n    }\n  }\n}","map":{"version":3,"mappings":"AAIA,SAASA,UAAU,QAAQ,uBAAqB;AAChD,SAASC,KAAK,QAAQ,kBAAgB;AAEtC,SAASC,sBAAsB,QAAQ,sBAAoB;AAE3D;;;AAGA,OAAM,MAAOC,+BAA+B;EAexC;;;;;EAKO,OAAOC,WAAW,CAACC,MAAmB;IACzC,MAAMC,QAAQ,GAAG,IAAIH,+BAA+B,EAAE;IACtDG,QAAQ,CAACC,aAAa,GAAG;MACrBC,SAAS,EAAE,IAAI;MACfC,KAAK,EAAE,IAAI;MACXC,OAAO,EAAEL,MAAM,GAAGA,MAAM,CAACM,eAAe,GAAG,IAAI;MAC/CC,KAAK,EAAE,IAAI;MACXC,sBAAsB,EAAE;KAC3B;IAEDP,QAAQ,CAACQ,iBAAiB,GAAG,qGAAqG;IAElI,OAAOR,QAAQ;EACnB;;AAEJ;;;AAGA,OAAM,MAAOS,wBAAwB;EAyBjC;;;;;EAKAC,YAAYC,iBAAsC,EAAUC,WAA4Cf,+BAA+B,CAACC,WAAW,EAAE;IAAzF,aAAQ,GAARc,QAAQ;IA7B5D,YAAO,GAAgC,IAAI;IAC3C,YAAO,GAAyB,IAAI;IAW5C;;;IAGO,YAAO,GAA2B,IAAI;IAErC,oBAAe,GAAgC,IAAI;IAE3D;;;IAGO,4BAAuB,GAA6B,IAAIlB,UAAU,EAAE;IAQvE,IAAI,CAACmB,OAAO,GAAGF,iBAAiB,CAACG,KAAK,CAACC,SAAS,EAAE;IAClD,IAAI,CAACF,OAAO,CAACG,mBAAmB,CAACC,OAAO,CAAC,MAAK;MAC1C,IAAI,CAACJ,OAAO,GAAG,IAAI;IACvB,CAAC,CAAC;IAEF,IAAI,CAACD,QAAQ,CAACM,aAAa,EAAE;MACzB,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/CF,MAAM,CAACG,KAAK,CAACC,OAAO,GAAG,IAAI,CAACX,QAAQ,CAACJ,iBAAiB,IAAI,0CAA0C;MACpG,IAAI,CAACgB,uBAAuB,CAACL,MAAM,CAAC;KACvC,MAAM;MACH,IAAI,CAACK,uBAAuB,CAACZ,QAAQ,CAACM,aAAa,CAAC;;IAGxDP,iBAAiB,CAACc,eAAe,CAACC,GAAG,CAAC,MAAK;MACvC,IAAI,CAACC,UAAU,EAAE;IACrB,CAAC,CAAC;IAEFhB,iBAAiB,CAACiB,gBAAgB,CAACF,GAAG,CAAC,MAAK;MACxC,IAAI,CAACG,aAAa,EAAE;IACxB,CAAC,CAAC;EACN;EAEA;;;EAGOC,OAAO;IACV,IAAI,CAACD,aAAa,EAAE;IACpB,IAAI,CAACL,uBAAuB,CAAC,IAAI,CAAC;EACtC;EAEA;;;;;EAKO,MAAMO,sBAAsB,CAACC,SAAoB;IACpD,MAAMC,WAAW,GAAG,MAAK;MACrB,IAAI,CAACC,OAAO,GAAG,IAAIC,YAAY,CAACH,SAAS,EAAE,IAAI,CAACI,aAAa,EAAE,IAAI,CAACxB,QAAQ,CAACX,aAAa,CAAC;MAC3F,IAAI,CAACoC,eAAe,GAAG,IAAIzC,sBAAsB,CAAC,IAAI,CAACsC,OAAO,CAAC;MAC/D,IAAI,CAACI,uBAAuB,CAACC,eAAe,CAAC,IAAI,CAACL,OAAO,CAAC;MAC1D,OAAO,IAAI,CAACA,OAAO;IACvB,CAAC;IAED;IACA,IAAI,CAAE,IAAI,CAACE,aAAqB,CAACI,gBAAgB,EAAE;MAC/C,OAAOC,OAAO,CAACC,OAAO,CAACT,WAAW,EAAE,CAAC;;IAGzC,OAAQ,IAAI,CAACG,aAAqB,CAC7BI,gBAAgB,EAAE,CAClBG,IAAI;IACD;IACA,MAAK,CAAE,CAAC,EACR,MAAK;MACD;MACAhD,KAAK,CAACiD,IAAI,CAAC,8FAA8F,CAAC;IAC9G,CAAC,CACJ,CACAD,IAAI,CAAC,MAAK;MACP,OAAOV,WAAW,EAAE;IACxB,CAAC,CAAC;EACV;EAEQN,UAAU;IACd,IAAI,IAAI,CAACkB,OAAO,IAAI,IAAI,CAAChC,OAAO,IAAI,IAAI,CAACgC,OAAO,KAAK,IAAI,CAAChC,OAAO,CAACiC,kBAAkB,EAAE,EAAE;MACpF1B,QAAQ,CAAC2B,IAAI,CAACC,WAAW,CAAC,IAAI,CAACH,OAAO,CAAC;;IAE3C,IAAI,IAAI,CAACX,OAAO,EAAE;MACd,IAAI,CAACe,cAAc,CAAC,IAAI,CAAC;KAC5B,MAAM;MACH,IAAI,CAACX,uBAAuB,CAACrB,OAAO,CAAC,MAAK;QACtC,IAAI,CAACgC,cAAc,CAAC,IAAI,CAAC;MAC7B,CAAC,CAAC;;EAEV;EAEQpB,aAAa;IACjB,IAAI,IAAI,CAACgB,OAAO,IAAI,IAAI,CAAChC,OAAO,IAAIO,QAAQ,CAAC2B,IAAI,CAACG,QAAQ,CAAC,IAAI,CAACL,OAAO,CAAC,IAAI,IAAI,CAACA,OAAO,KAAK,IAAI,CAAChC,OAAO,CAACiC,kBAAkB,EAAE,EAAE;MAC5H1B,QAAQ,CAAC2B,IAAI,CAACI,WAAW,CAAC,IAAI,CAACN,OAAO,CAAC;;IAE3C,IAAI,CAACI,cAAc,CAAC,KAAK,CAAC;EAC9B;EAEQA,cAAc,CAACG,OAAgB,IAAI,EAAElB,OAAO,GAAG,IAAI,CAACG,eAAe;IACvE,IAAI,CAAC,IAAI,CAACQ,OAAO,IAAI,CAAC,IAAI,CAAChC,OAAO,EAAE;MAChC;;IAEJ,IAAIuC,IAAI,EAAE;MACN,IAAIlB,OAAO,EAAE;QACT,IAAI,IAAI,CAACW,OAAO,KAAK,IAAI,CAAChC,OAAO,CAACiC,kBAAkB,EAAE,EAAE;UACpD,IAAI,CAACD,OAAO,CAACvB,KAAK,CAAC+B,KAAK,GAAGnB,OAAO,CAACoB,QAAQ,EAAE,GAAG,IAAI;UACpD,IAAI,CAACT,OAAO,CAACvB,KAAK,CAACiC,MAAM,GAAGrB,OAAO,CAACsB,SAAS,EAAE,GAAG,IAAI;SACzD,MAAM;UACH,IAAI,CAAC3C,OAAO,CAAC4C,OAAO,CAACvB,OAAO,CAACoB,QAAQ,EAAE,EAAEpB,OAAO,CAACsB,SAAS,EAAE,CAAC;;;KAGxE,MAAM;MACH,IAAI,IAAI,CAACE,mBAAmB,EAAE;QAC1B,IAAI,IAAI,CAACb,OAAO,KAAK,IAAI,CAAChC,OAAO,CAACiC,kBAAkB,EAAE,EAAE;UACpD,IAAI,CAACD,OAAO,CAACvB,KAAK,CAAC+B,KAAK,GAAG,IAAI,CAACK,mBAAmB,CAACL,KAAK,GAAG,IAAI;UAChE,IAAI,CAACR,OAAO,CAACvB,KAAK,CAACiC,MAAM,GAAG,IAAI,CAACG,mBAAmB,CAACH,MAAM,GAAG,IAAI;SACrE,MAAM;UACH,IAAI,CAAC1C,OAAO,CAAC4C,OAAO,CAAC,IAAI,CAACC,mBAAmB,CAACL,KAAK,EAAE,IAAI,CAACK,mBAAmB,CAACH,MAAM,CAAC;;;;EAIrG;EAEQ/B,uBAAuB,CAACL,MAAmC;IAC/D,IAAI,CAACU,aAAa,EAAE;IACpB,IAAI,CAACV,MAAM,EAAE;MACT,IAAI,CAAC0B,OAAO,GAAG,IAAI;MAClB,IAAI,CAACT,aAAqB,GAAG,IAAI;KACrC,MAAM;MACH,IAAI,CAACsB,mBAAmB,GAAG;QACvBL,KAAK,EAAElC,MAAM,CAACwC,WAAW;QACzBJ,MAAM,EAAEpC,MAAM,CAACyC;OAClB;MACD,IAAI,CAACf,OAAO,GAAG1B,MAAM;MACrB,IAAI,CAACiB,aAAa,GAAQ,IAAI,CAACS,OAAO,CAACgB,UAAU,CAAC,QAAQ,CAAC;MAC3D,IAAI,CAAC,IAAI,CAACzB,aAAa,EAAE;QACrB,IAAI,CAACA,aAAa,GAAQ,IAAI,CAACS,OAAO,CAACgB,UAAU,CAAC,OAAO,CAAC;;;EAGtE","names":["Observable","Tools","WebXRWebGLLayerWrapper","WebXRManagedOutputCanvasOptions","GetDefaults","engine","defaults","canvasOptions","antialias","depth","stencil","isStencilEnable","alpha","framebufferScaleFactor","newCanvasCssStyle","WebXRManagedOutputCanvas","constructor","_xrSessionManager","_options","_engine","scene","getEngine","onDisposeObservable","addOnce","canvasElement","canvas","document","createElement","style","cssText","_setManagedOutputCanvas","onXRSessionInit","add","_addCanvas","onXRSessionEnded","_removeCanvas","dispose","initializeXRLayerAsync","xrSession","createLayer","xrLayer","XRWebGLLayer","canvasContext","_xrLayerWrapper","onXRLayerInitObservable","notifyObservers","makeXRCompatible","Promise","resolve","then","Warn","_canvas","getRenderingCanvas","body","appendChild","_setCanvasSize","contains","removeChild","init","width","getWidth","height","getHeight","setSize","_originalCanvasSize","offsetWidth","offsetHeight","getContext"],"sourceRoot":"","sources":["../../../../lts/core/generated/XR/webXRManagedOutputCanvas.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport type { WebXRRenderTarget } from \"./webXRTypes\";\r\nimport type { WebXRSessionManager } from \"./webXRSessionManager\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport type { WebXRLayerWrapper } from \"./webXRLayerWrapper\";\r\nimport { WebXRWebGLLayerWrapper } from \"./webXRWebGLLayer\";\r\n\r\n/**\r\n * Configuration object for WebXR output canvas\r\n */\r\nexport class WebXRManagedOutputCanvasOptions {\r\n    /**\r\n     * An optional canvas in case you wish to create it yourself and provide it here.\r\n     * If not provided, a new canvas will be created\r\n     */\r\n    public canvasElement?: HTMLCanvasElement;\r\n    /**\r\n     * Options for this XR Layer output\r\n     */\r\n    public canvasOptions?: XRWebGLLayerInit;\r\n    /**\r\n     * CSS styling for a newly created canvas (if not provided)\r\n     */\r\n    public newCanvasCssStyle?: string;\r\n\r\n    /**\r\n     * Get the default values of the configuration object\r\n     * @param engine defines the engine to use (can be null)\r\n     * @returns default values of this configuration object\r\n     */\r\n    public static GetDefaults(engine?: ThinEngine): WebXRManagedOutputCanvasOptions {\r\n        const defaults = new WebXRManagedOutputCanvasOptions();\r\n        defaults.canvasOptions = {\r\n            antialias: true,\r\n            depth: true,\r\n            stencil: engine ? engine.isStencilEnable : true,\r\n            alpha: true,\r\n            framebufferScaleFactor: 1,\r\n        };\r\n\r\n        defaults.newCanvasCssStyle = \"position:absolute; bottom:0px;right:0px;z-index:10;width:90%;height:100%;background-color: #000000;\";\r\n\r\n        return defaults;\r\n    }\r\n}\r\n/**\r\n * Creates a canvas that is added/removed from the webpage when entering/exiting XR\r\n */\r\nexport class WebXRManagedOutputCanvas implements WebXRRenderTarget {\r\n    private _canvas: Nullable<HTMLCanvasElement> = null;\r\n    private _engine: Nullable<ThinEngine> = null;\r\n    private _originalCanvasSize: {\r\n        width: number;\r\n        height: number;\r\n    };\r\n\r\n    /**\r\n     * Rendering context of the canvas which can be used to display/mirror xr content\r\n     */\r\n    public canvasContext: WebGLRenderingContext;\r\n\r\n    /**\r\n     * xr layer for the canvas\r\n     */\r\n    public xrLayer: Nullable<XRWebGLLayer> = null;\r\n\r\n    private _xrLayerWrapper: Nullable<WebXRLayerWrapper> = null;\r\n\r\n    /**\r\n     * Observers registered here will be triggered when the xr layer was initialized\r\n     */\r\n    public onXRLayerInitObservable: Observable<XRWebGLLayer> = new Observable();\r\n\r\n    /**\r\n     * Initializes the canvas to be added/removed upon entering/exiting xr\r\n     * @param _xrSessionManager The XR Session manager\r\n     * @param _options optional configuration for this canvas output. defaults will be used if not provided\r\n     */\r\n    constructor(_xrSessionManager: WebXRSessionManager, private _options: WebXRManagedOutputCanvasOptions = WebXRManagedOutputCanvasOptions.GetDefaults()) {\r\n        this._engine = _xrSessionManager.scene.getEngine();\r\n        this._engine.onDisposeObservable.addOnce(() => {\r\n            this._engine = null;\r\n        });\r\n\r\n        if (!_options.canvasElement) {\r\n            const canvas = document.createElement(\"canvas\");\r\n            canvas.style.cssText = this._options.newCanvasCssStyle || \"position:absolute; bottom:0px;right:0px;\";\r\n            this._setManagedOutputCanvas(canvas);\r\n        } else {\r\n            this._setManagedOutputCanvas(_options.canvasElement);\r\n        }\r\n\r\n        _xrSessionManager.onXRSessionInit.add(() => {\r\n            this._addCanvas();\r\n        });\r\n\r\n        _xrSessionManager.onXRSessionEnded.add(() => {\r\n            this._removeCanvas();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disposes of the object\r\n     */\r\n    public dispose() {\r\n        this._removeCanvas();\r\n        this._setManagedOutputCanvas(null);\r\n    }\r\n\r\n    /**\r\n     * Initializes a XRWebGLLayer to be used as the session's baseLayer.\r\n     * @param xrSession xr session\r\n     * @returns a promise that will resolve once the XR Layer has been created\r\n     */\r\n    public async initializeXRLayerAsync(xrSession: XRSession): Promise<XRWebGLLayer> {\r\n        const createLayer = () => {\r\n            this.xrLayer = new XRWebGLLayer(xrSession, this.canvasContext, this._options.canvasOptions);\r\n            this._xrLayerWrapper = new WebXRWebGLLayerWrapper(this.xrLayer);\r\n            this.onXRLayerInitObservable.notifyObservers(this.xrLayer);\r\n            return this.xrLayer;\r\n        };\r\n\r\n        // support canvases without makeXRCompatible\r\n        if (!(this.canvasContext as any).makeXRCompatible) {\r\n            return Promise.resolve(createLayer());\r\n        }\r\n\r\n        return (this.canvasContext as any)\r\n            .makeXRCompatible()\r\n            .then(\r\n                // catch any error and continue. When using the emulator is throws this error for no apparent reason.\r\n                () => {},\r\n                () => {\r\n                    // log the error, continue nonetheless!\r\n                    Tools.Warn(\"Error executing makeXRCompatible. This does not mean that the session will work incorrectly.\");\r\n                }\r\n            )\r\n            .then(() => {\r\n                return createLayer();\r\n            });\r\n    }\r\n\r\n    private _addCanvas() {\r\n        if (this._canvas && this._engine && this._canvas !== this._engine.getRenderingCanvas()) {\r\n            document.body.appendChild(this._canvas);\r\n        }\r\n        if (this.xrLayer) {\r\n            this._setCanvasSize(true);\r\n        } else {\r\n            this.onXRLayerInitObservable.addOnce(() => {\r\n                this._setCanvasSize(true);\r\n            });\r\n        }\r\n    }\r\n\r\n    private _removeCanvas() {\r\n        if (this._canvas && this._engine && document.body.contains(this._canvas) && this._canvas !== this._engine.getRenderingCanvas()) {\r\n            document.body.removeChild(this._canvas);\r\n        }\r\n        this._setCanvasSize(false);\r\n    }\r\n\r\n    private _setCanvasSize(init: boolean = true, xrLayer = this._xrLayerWrapper) {\r\n        if (!this._canvas || !this._engine) {\r\n            return;\r\n        }\r\n        if (init) {\r\n            if (xrLayer) {\r\n                if (this._canvas !== this._engine.getRenderingCanvas()) {\r\n                    this._canvas.style.width = xrLayer.getWidth() + \"px\";\r\n                    this._canvas.style.height = xrLayer.getHeight() + \"px\";\r\n                } else {\r\n                    this._engine.setSize(xrLayer.getWidth(), xrLayer.getHeight());\r\n                }\r\n            }\r\n        } else {\r\n            if (this._originalCanvasSize) {\r\n                if (this._canvas !== this._engine.getRenderingCanvas()) {\r\n                    this._canvas.style.width = this._originalCanvasSize.width + \"px\";\r\n                    this._canvas.style.height = this._originalCanvasSize.height + \"px\";\r\n                } else {\r\n                    this._engine.setSize(this._originalCanvasSize.width, this._originalCanvasSize.height);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _setManagedOutputCanvas(canvas: Nullable<HTMLCanvasElement>) {\r\n        this._removeCanvas();\r\n        if (!canvas) {\r\n            this._canvas = null;\r\n            (this.canvasContext as any) = null;\r\n        } else {\r\n            this._originalCanvasSize = {\r\n                width: canvas.offsetWidth,\r\n                height: canvas.offsetHeight,\r\n            };\r\n            this._canvas = canvas;\r\n            this.canvasContext = <any>this._canvas.getContext(\"webgl2\");\r\n            if (!this.canvasContext) {\r\n                this.canvasContext = <any>this._canvas.getContext(\"webgl\");\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}