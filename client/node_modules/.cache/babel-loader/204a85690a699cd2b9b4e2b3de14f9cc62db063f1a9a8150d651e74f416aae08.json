{"ast":null,"code":"import { PhysicsMaterial } from \"./physicsMaterial.js\";\nimport { Logger } from \"../../Misc/logger.js\";\n/**\n *\n */\nexport class PhysicsAggregate {\n  constructor(\n  /**\n   * The physics-enabled object used as the physics imposter\n   */\n  transformNode,\n  /**\n   * The type of the physics imposter\n   */\n  type, _options = {\n    mass: 0\n  }, _scene) {\n    this.transformNode = transformNode;\n    this.type = type;\n    this._options = _options;\n    this._scene = _scene;\n    //sanity check!\n    if (!this.transformNode) {\n      Logger.Error(\"No object was provided. A physics object is obligatory\");\n      return;\n    }\n    if (this.transformNode.parent && this._options.mass !== 0) {\n      Logger.Warn(\"A physics impostor has been created for an object which has a parent. Babylon physics currently works in local space so unexpected issues may occur.\");\n    }\n    // Legacy support for old syntax.\n    if (!this._scene && transformNode.getScene) {\n      this._scene = transformNode.getScene();\n    }\n    if (!this._scene) {\n      return;\n    }\n    this.material = new PhysicsMaterial(this._options.friction ? this._options.friction : 0, this._options.restitution ? this._options.restitution : 0, this._scene);\n  }\n  /**\n   *\n   */\n  dispose() {\n    this.body.dispose();\n    this.material.dispose();\n    this.shape.dispose();\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,sBAAoB;AAEpD,SAASC,MAAM,QAAQ,sBAAoB;AAyE3C;;;AAGA,OAAM,MAAOC,gBAAgB;EAgBzBC;EACI;;;EAGOC,aAA4B;EACnC;;;EAGOC,IAAY,EACXC,WAAuC;IAAEC,IAAI,EAAE;EAAC,CAAE,EAClDC,MAAc;IANf,kBAAa,GAAbJ,aAAa;IAIb,SAAI,GAAJC,IAAI;IACH,aAAQ,GAARC,QAAQ;IACR,WAAM,GAANE,MAAM;IAEd;IACA,IAAI,CAAC,IAAI,CAACJ,aAAa,EAAE;MACrBH,MAAM,CAACQ,KAAK,CAAC,wDAAwD,CAAC;MACtE;;IAEJ,IAAI,IAAI,CAACL,aAAa,CAACM,MAAM,IAAI,IAAI,CAACJ,QAAQ,CAACC,IAAI,KAAK,CAAC,EAAE;MACvDN,MAAM,CAACU,IAAI,CAAC,sJAAsJ,CAAC;;IAGvK;IACA,IAAI,CAAC,IAAI,CAACH,MAAM,IAAIJ,aAAa,CAACQ,QAAQ,EAAE;MACxC,IAAI,CAACJ,MAAM,GAAGJ,aAAa,CAACQ,QAAQ,EAAE;;IAG1C,IAAI,CAAC,IAAI,CAACJ,MAAM,EAAE;MACd;;IAGJ,IAAI,CAACK,QAAQ,GAAG,IAAIb,eAAe,CAAC,IAAI,CAACM,QAAQ,CAACQ,QAAQ,GAAG,IAAI,CAACR,QAAQ,CAACQ,QAAQ,GAAG,CAAC,EAAE,IAAI,CAACR,QAAQ,CAACS,WAAW,GAAG,IAAI,CAACT,QAAQ,CAACS,WAAW,GAAG,CAAC,EAAE,IAAI,CAACP,MAAM,CAAC;EACpK;EAEA;;;EAGOQ,OAAO;IACV,IAAI,CAACC,IAAI,CAACD,OAAO,EAAE;IACnB,IAAI,CAACH,QAAQ,CAACG,OAAO,EAAE;IACvB,IAAI,CAACE,KAAK,CAACF,OAAO,EAAE;EACxB","names":["PhysicsMaterial","Logger","PhysicsAggregate","constructor","transformNode","type","_options","mass","_scene","Error","parent","Warn","getScene","material","friction","restitution","dispose","body","shape"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Physics/v2/physicsAggregate.ts"],"sourcesContent":["import type { PhysicsBody } from \"./physicsBody\";\r\nimport { PhysicsMaterial } from \"./physicsMaterial\";\r\nimport type { PhysicsShape } from \"./physicsShape\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { TransformNode } from \"../../Meshes/transformNode\";\r\n\r\n/**\r\n * The interface for the physics aggregate parameters\r\n */\r\n/** @internal */\r\nexport interface PhysicsAggregateParameters {\r\n    /** @internal */\r\n    /**\r\n     * The mass of the physics imposter\r\n     */\r\n    mass: number;\r\n    /**\r\n     * The friction of the physics imposter\r\n     */\r\n    friction?: number;\r\n    /**\r\n     * The coefficient of restitution of the physics imposter\r\n     */\r\n    restitution?: number;\r\n    /**\r\n     * The native options of the physics imposter\r\n     */\r\n    nativeOptions?: any;\r\n    /**\r\n     * Specifies if the parent should be ignored\r\n     */\r\n    ignoreParent?: boolean;\r\n    /**\r\n     * Specifies if bi-directional transformations should be disabled\r\n     */\r\n    disableBidirectionalTransformation?: boolean;\r\n    /**\r\n     * The pressure inside the physics imposter, soft object only\r\n     */\r\n    pressure?: number;\r\n    /**\r\n     * The stiffness the physics imposter, soft object only\r\n     */\r\n    stiffness?: number;\r\n    /**\r\n     * The number of iterations used in maintaining consistent vertex velocities, soft object only\r\n     */\r\n    velocityIterations?: number;\r\n    /**\r\n     * The number of iterations used in maintaining consistent vertex positions, soft object only\r\n     */\r\n    positionIterations?: number;\r\n    /**\r\n     * The number used to fix points on a cloth (0, 1, 2, 4, 8) or rope (0, 1, 2) only\r\n     * 0 None, 1, back left or top, 2, back right or bottom, 4, front left, 8, front right\r\n     * Add to fix multiple points\r\n     */\r\n    fixedPoints?: number;\r\n    /**\r\n     * The collision margin around a soft object\r\n     */\r\n    margin?: number;\r\n    /**\r\n     * The collision margin around a soft object\r\n     */\r\n    damping?: number;\r\n    /**\r\n     * The path for a rope based on an extrusion\r\n     */\r\n    path?: any;\r\n    /**\r\n     * The shape of an extrusion used for a rope based on an extrusion\r\n     */\r\n    shape?: any;\r\n}\r\n/**\r\n *\r\n */\r\nexport class PhysicsAggregate {\r\n    /**\r\n     *\r\n     */\r\n    public body: PhysicsBody;\r\n\r\n    /**\r\n     *\r\n     */\r\n    public shape: PhysicsShape;\r\n\r\n    /**\r\n     *\r\n     */\r\n    public material: PhysicsMaterial;\r\n\r\n    constructor(\r\n        /**\r\n         * The physics-enabled object used as the physics imposter\r\n         */\r\n        public transformNode: TransformNode,\r\n        /**\r\n         * The type of the physics imposter\r\n         */\r\n        public type: number,\r\n        private _options: PhysicsAggregateParameters = { mass: 0 },\r\n        private _scene?: Scene\r\n    ) {\r\n        //sanity check!\r\n        if (!this.transformNode) {\r\n            Logger.Error(\"No object was provided. A physics object is obligatory\");\r\n            return;\r\n        }\r\n        if (this.transformNode.parent && this._options.mass !== 0) {\r\n            Logger.Warn(\"A physics impostor has been created for an object which has a parent. Babylon physics currently works in local space so unexpected issues may occur.\");\r\n        }\r\n\r\n        // Legacy support for old syntax.\r\n        if (!this._scene && transformNode.getScene) {\r\n            this._scene = transformNode.getScene();\r\n        }\r\n\r\n        if (!this._scene) {\r\n            return;\r\n        }\r\n\r\n        this.material = new PhysicsMaterial(this._options.friction ? this._options.friction : 0, this._options.restitution ? this._options.restitution : 0, this._scene);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public dispose(): void {\r\n        this.body.dispose();\r\n        this.material.dispose();\r\n        this.shape.dispose();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}