{"ast":null,"code":"import { Observable } from \"../Misc/observable.js\";\n/**\n * Represents a gamepad control stick position\n */\nexport class StickValues {\n  /**\n   * Initializes the gamepad x and y control stick values\n   * @param x The x component of the gamepad control stick value\n   * @param y The y component of the gamepad control stick value\n   */\n  constructor(\n  /**\n   * The x component of the control stick\n   */\n  x,\n  /**\n   * The y component of the control stick\n   */\n  y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n/**\n * Represents a gamepad\n */\nexport class Gamepad {\n  /**\n   * Initializes the gamepad\n   * @param id The id of the gamepad\n   * @param index The index of the gamepad\n   * @param browserGamepad The browser gamepad\n   * @param leftStickX The x component of the left joystick\n   * @param leftStickY The y component of the left joystick\n   * @param rightStickX The x component of the right joystick\n   * @param rightStickY The y component of the right joystick\n   */\n  constructor(\n  /**\n   * The id of the gamepad\n   */\n  id,\n  /**\n   * The index of the gamepad\n   */\n  index,\n  /**\n   * The browser gamepad\n   */\n  browserGamepad, leftStickX = 0, leftStickY = 1, rightStickX = 2, rightStickY = 3) {\n    this.id = id;\n    this.index = index;\n    this.browserGamepad = browserGamepad;\n    this._leftStick = {\n      x: 0,\n      y: 0\n    };\n    this._rightStick = {\n      x: 0,\n      y: 0\n    };\n    /** @internal */\n    this._isConnected = true;\n    /**\n     * Specifies whether the left control stick should be Y-inverted\n     */\n    this._invertLeftStickY = false;\n    this.type = Gamepad.GAMEPAD;\n    this._leftStickAxisX = leftStickX;\n    this._leftStickAxisY = leftStickY;\n    this._rightStickAxisX = rightStickX;\n    this._rightStickAxisY = rightStickY;\n    if (this.browserGamepad.axes.length >= 2) {\n      this._leftStick = {\n        x: this.browserGamepad.axes[this._leftStickAxisX],\n        y: this.browserGamepad.axes[this._leftStickAxisY]\n      };\n    }\n    if (this.browserGamepad.axes.length >= 4) {\n      this._rightStick = {\n        x: this.browserGamepad.axes[this._rightStickAxisX],\n        y: this.browserGamepad.axes[this._rightStickAxisY]\n      };\n    }\n  }\n  /**\n   * Specifies if the gamepad has been connected\n   */\n  get isConnected() {\n    return this._isConnected;\n  }\n  /**\n   * Callback triggered when the left joystick has changed\n   * @param callback\n   */\n  onleftstickchanged(callback) {\n    this._onleftstickchanged = callback;\n  }\n  /**\n   * Callback triggered when the right joystick has changed\n   * @param callback\n   */\n  onrightstickchanged(callback) {\n    this._onrightstickchanged = callback;\n  }\n  /**\n   * Gets the left joystick\n   */\n  get leftStick() {\n    return this._leftStick;\n  }\n  /**\n   * Sets the left joystick values\n   */\n  set leftStick(newValues) {\n    if (this._onleftstickchanged && (this._leftStick.x !== newValues.x || this._leftStick.y !== newValues.y)) {\n      this._onleftstickchanged(newValues);\n    }\n    this._leftStick = newValues;\n  }\n  /**\n   * Gets the right joystick\n   */\n  get rightStick() {\n    return this._rightStick;\n  }\n  /**\n   * Sets the right joystick value\n   */\n  set rightStick(newValues) {\n    if (this._onrightstickchanged && (this._rightStick.x !== newValues.x || this._rightStick.y !== newValues.y)) {\n      this._onrightstickchanged(newValues);\n    }\n    this._rightStick = newValues;\n  }\n  /**\n   * Updates the gamepad joystick positions\n   */\n  update() {\n    if (this._leftStick) {\n      this.leftStick = {\n        x: this.browserGamepad.axes[this._leftStickAxisX],\n        y: this.browserGamepad.axes[this._leftStickAxisY]\n      };\n      if (this._invertLeftStickY) {\n        this.leftStick.y *= -1;\n      }\n    }\n    if (this._rightStick) {\n      this.rightStick = {\n        x: this.browserGamepad.axes[this._rightStickAxisX],\n        y: this.browserGamepad.axes[this._rightStickAxisY]\n      };\n    }\n  }\n  /**\n   * Disposes the gamepad\n   */\n  dispose() {}\n}\n/**\n * Represents a gamepad controller\n */\nGamepad.GAMEPAD = 0;\n/**\n * Represents a generic controller\n */\nGamepad.GENERIC = 1;\n/**\n * Represents an XBox controller\n */\nGamepad.XBOX = 2;\n/**\n * Represents a pose-enabled controller\n */\nGamepad.POSE_ENABLED = 3;\n/**\n * Represents an Dual Shock controller\n */\nGamepad.DUALSHOCK = 4;\n/**\n * Represents a generic gamepad\n */\nexport class GenericPad extends Gamepad {\n  /**\n   * Initializes the generic gamepad\n   * @param id The id of the generic gamepad\n   * @param index The index of the generic gamepad\n   * @param browserGamepad The browser gamepad\n   */\n  constructor(id, index, browserGamepad) {\n    super(id, index, browserGamepad);\n    /**\n     * Observable triggered when a button has been pressed\n     */\n    this.onButtonDownObservable = new Observable();\n    /**\n     * Observable triggered when a button has been released\n     */\n    this.onButtonUpObservable = new Observable();\n    this.type = Gamepad.GENERIC;\n    this._buttons = new Array(browserGamepad.buttons.length);\n  }\n  /**\n   * Callback triggered when a button has been pressed\n   * @param callback Called when a button has been pressed\n   */\n  onbuttondown(callback) {\n    this._onbuttondown = callback;\n  }\n  /**\n   * Callback triggered when a button has been released\n   * @param callback Called when a button has been released\n   */\n  onbuttonup(callback) {\n    this._onbuttonup = callback;\n  }\n  _setButtonValue(newValue, currentValue, buttonIndex) {\n    if (newValue !== currentValue) {\n      if (newValue === 1) {\n        if (this._onbuttondown) {\n          this._onbuttondown(buttonIndex);\n        }\n        this.onButtonDownObservable.notifyObservers(buttonIndex);\n      }\n      if (newValue === 0) {\n        if (this._onbuttonup) {\n          this._onbuttonup(buttonIndex);\n        }\n        this.onButtonUpObservable.notifyObservers(buttonIndex);\n      }\n    }\n    return newValue;\n  }\n  /**\n   * Updates the generic gamepad\n   */\n  update() {\n    super.update();\n    for (let index = 0; index < this._buttons.length; index++) {\n      this._buttons[index] = this._setButtonValue(this.browserGamepad.buttons[index].value, this._buttons[index], index);\n    }\n  }\n  /**\n   * Disposes the generic gamepad\n   */\n  dispose() {\n    super.dispose();\n    this.onButtonDownObservable.clear();\n    this.onButtonUpObservable.clear();\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,uBAAqB;AAEhD;;;AAGA,OAAM,MAAOC,WAAW;EACpB;;;;;EAKAC;EACI;;;EAGOC,CAAS;EAChB;;;EAGOC,CAAS;IAJT,MAAC,GAADD,CAAC;IAID,MAAC,GAADC,CAAC;EACT;;AAyBP;;;AAGA,OAAM,MAAOC,OAAO;EA4DhB;;;;;;;;;;EAUAH;EACI;;;EAGOI,EAAU;EACjB;;;EAGOC,KAAa;EACpB;;;EAGOC,cAAmB,EAC1BC,aAAqB,CAAC,EACtBC,aAAqB,CAAC,EACtBC,cAAsB,CAAC,EACvBC,cAAsB,CAAC;IAZhB,OAAE,GAAFN,EAAE;IAIF,UAAK,GAALC,KAAK;IAIL,mBAAc,GAAdC,cAAc;IA5EjB,eAAU,GAAgB;MAAEL,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAC,CAAE;IACxC,gBAAW,GAAgB;MAAED,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAC,CAAE;IAEjD;IACO,iBAAY,GAAG,IAAI;IAsC1B;;;IAGU,sBAAiB,GAAY,KAAK;IAqCxC,IAAI,CAACS,IAAI,GAAGR,OAAO,CAACS,OAAO;IAC3B,IAAI,CAACC,eAAe,GAAGN,UAAU;IACjC,IAAI,CAACO,eAAe,GAAGN,UAAU;IACjC,IAAI,CAACO,gBAAgB,GAAGN,WAAW;IACnC,IAAI,CAACO,gBAAgB,GAAGN,WAAW;IACnC,IAAI,IAAI,CAACJ,cAAc,CAACW,IAAI,CAACC,MAAM,IAAI,CAAC,EAAE;MACtC,IAAI,CAACC,UAAU,GAAG;QAAElB,CAAC,EAAE,IAAI,CAACK,cAAc,CAACW,IAAI,CAAC,IAAI,CAACJ,eAAe,CAAC;QAAEX,CAAC,EAAE,IAAI,CAACI,cAAc,CAACW,IAAI,CAAC,IAAI,CAACH,eAAe;MAAC,CAAE;;IAE9H,IAAI,IAAI,CAACR,cAAc,CAACW,IAAI,CAACC,MAAM,IAAI,CAAC,EAAE;MACtC,IAAI,CAACE,WAAW,GAAG;QAAEnB,CAAC,EAAE,IAAI,CAACK,cAAc,CAACW,IAAI,CAAC,IAAI,CAACF,gBAAgB,CAAC;QAAEb,CAAC,EAAE,IAAI,CAACI,cAAc,CAACW,IAAI,CAAC,IAAI,CAACD,gBAAgB;MAAC,CAAE;;EAErI;EA9CA;;;EAGA,IAAWK,WAAW;IAClB,OAAO,IAAI,CAACC,YAAY;EAC5B;EA2CA;;;;EAIOC,kBAAkB,CAACC,QAAuC;IAC7D,IAAI,CAACC,mBAAmB,GAAGD,QAAQ;EACvC;EAEA;;;;EAIOE,mBAAmB,CAACF,QAAuC;IAC9D,IAAI,CAACG,oBAAoB,GAAGH,QAAQ;EACxC;EAEA;;;EAGA,IAAWI,SAAS;IAChB,OAAO,IAAI,CAACT,UAAU;EAC1B;EACA;;;EAGA,IAAWS,SAAS,CAACC,SAAsB;IACvC,IAAI,IAAI,CAACJ,mBAAmB,KAAK,IAAI,CAACN,UAAU,CAAClB,CAAC,KAAK4B,SAAS,CAAC5B,CAAC,IAAI,IAAI,CAACkB,UAAU,CAACjB,CAAC,KAAK2B,SAAS,CAAC3B,CAAC,CAAC,EAAE;MACtG,IAAI,CAACuB,mBAAmB,CAACI,SAAS,CAAC;;IAEvC,IAAI,CAACV,UAAU,GAAGU,SAAS;EAC/B;EACA;;;EAGA,IAAWC,UAAU;IACjB,OAAO,IAAI,CAACV,WAAW;EAC3B;EACA;;;EAGA,IAAWU,UAAU,CAACD,SAAsB;IACxC,IAAI,IAAI,CAACF,oBAAoB,KAAK,IAAI,CAACP,WAAW,CAACnB,CAAC,KAAK4B,SAAS,CAAC5B,CAAC,IAAI,IAAI,CAACmB,WAAW,CAAClB,CAAC,KAAK2B,SAAS,CAAC3B,CAAC,CAAC,EAAE;MACzG,IAAI,CAACyB,oBAAoB,CAACE,SAAS,CAAC;;IAExC,IAAI,CAACT,WAAW,GAAGS,SAAS;EAChC;EAEA;;;EAIOE,MAAM;IACT,IAAI,IAAI,CAACZ,UAAU,EAAE;MACjB,IAAI,CAACS,SAAS,GAAG;QAAE3B,CAAC,EAAE,IAAI,CAACK,cAAc,CAACW,IAAI,CAAC,IAAI,CAACJ,eAAe,CAAC;QAAEX,CAAC,EAAE,IAAI,CAACI,cAAc,CAACW,IAAI,CAAC,IAAI,CAACH,eAAe;MAAC,CAAE;MACzH,IAAI,IAAI,CAACkB,iBAAiB,EAAE;QACxB,IAAI,CAACJ,SAAS,CAAC1B,CAAC,IAAI,CAAC,CAAC;;;IAG9B,IAAI,IAAI,CAACkB,WAAW,EAAE;MAClB,IAAI,CAACU,UAAU,GAAG;QAAE7B,CAAC,EAAE,IAAI,CAACK,cAAc,CAACW,IAAI,CAAC,IAAI,CAACF,gBAAgB,CAAC;QAAEb,CAAC,EAAE,IAAI,CAACI,cAAc,CAACW,IAAI,CAAC,IAAI,CAACD,gBAAgB;MAAC,CAAE;;EAEpI;EAEA;;;EAGOiB,OAAO,IAAI;;AA5IlB;;;AAGc9B,eAAO,GAAG,CAAC;AACzB;;;AAGcA,eAAO,GAAG,CAAC;AACzB;;;AAGcA,YAAI,GAAG,CAAC;AACtB;;;AAGcA,oBAAY,GAAG,CAAC;AAC9B;;;AAGcA,iBAAS,GAAG,CAAC;AA4H/B;;;AAGA,OAAM,MAAO+B,UAAW,SAAQ/B,OAAO;EA6BnC;;;;;;EAMAH,YAAYI,EAAU,EAAEC,KAAa,EAAEC,cAAmB;IACtD,KAAK,CAACF,EAAE,EAAEC,KAAK,EAAEC,cAAc,CAAC;IA/BpC;;;IAGO,2BAAsB,GAAG,IAAIR,UAAU,EAAU;IACxD;;;IAGO,yBAAoB,GAAG,IAAIA,UAAU,EAAU;IAyBlD,IAAI,CAACa,IAAI,GAAGR,OAAO,CAACgC,OAAO;IAC3B,IAAI,CAACC,QAAQ,GAAG,IAAIC,KAAK,CAAC/B,cAAc,CAACgC,OAAO,CAACpB,MAAM,CAAC;EAC5D;EAzBA;;;;EAIOqB,YAAY,CAACf,QAAyC;IACzD,IAAI,CAACgB,aAAa,GAAGhB,QAAQ;EACjC;EACA;;;;EAIOiB,UAAU,CAACjB,QAA0C;IACxD,IAAI,CAACkB,WAAW,GAAGlB,QAAQ;EAC/B;EAcQmB,eAAe,CAACC,QAAgB,EAAEC,YAAoB,EAAEC,WAAmB;IAC/E,IAAIF,QAAQ,KAAKC,YAAY,EAAE;MAC3B,IAAID,QAAQ,KAAK,CAAC,EAAE;QAChB,IAAI,IAAI,CAACJ,aAAa,EAAE;UACpB,IAAI,CAACA,aAAa,CAACM,WAAW,CAAC;;QAGnC,IAAI,CAACC,sBAAsB,CAACC,eAAe,CAACF,WAAW,CAAC;;MAE5D,IAAIF,QAAQ,KAAK,CAAC,EAAE;QAChB,IAAI,IAAI,CAACF,WAAW,EAAE;UAClB,IAAI,CAACA,WAAW,CAACI,WAAW,CAAC;;QAGjC,IAAI,CAACG,oBAAoB,CAACD,eAAe,CAACF,WAAW,CAAC;;;IAG9D,OAAOF,QAAQ;EACnB;EAEA;;;EAGOb,MAAM;IACT,KAAK,CAACA,MAAM,EAAE;IACd,KAAK,IAAI1B,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,IAAI,CAAC+B,QAAQ,CAAClB,MAAM,EAAEb,KAAK,EAAE,EAAE;MACvD,IAAI,CAAC+B,QAAQ,CAAC/B,KAAK,CAAC,GAAG,IAAI,CAACsC,eAAe,CAAC,IAAI,CAACrC,cAAc,CAACgC,OAAO,CAACjC,KAAK,CAAC,CAAC6C,KAAK,EAAE,IAAI,CAACd,QAAQ,CAAC/B,KAAK,CAAC,EAAEA,KAAK,CAAC;;EAE1H;EAEA;;;EAGO4B,OAAO;IACV,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACc,sBAAsB,CAACI,KAAK,EAAE;IACnC,IAAI,CAACF,oBAAoB,CAACE,KAAK,EAAE;EACrC","names":["Observable","StickValues","constructor","x","y","Gamepad","id","index","browserGamepad","leftStickX","leftStickY","rightStickX","rightStickY","type","GAMEPAD","_leftStickAxisX","_leftStickAxisY","_rightStickAxisX","_rightStickAxisY","axes","length","_leftStick","_rightStick","isConnected","_isConnected","onleftstickchanged","callback","_onleftstickchanged","onrightstickchanged","_onrightstickchanged","leftStick","newValues","rightStick","update","_invertLeftStickY","dispose","GenericPad","GENERIC","_buttons","Array","buttons","onbuttondown","_onbuttondown","onbuttonup","_onbuttonup","_setButtonValue","newValue","currentValue","buttonIndex","onButtonDownObservable","notifyObservers","onButtonUpObservable","value","clear"],"sourceRoot":"","sources":["../../../../lts/core/generated/Gamepads/gamepad.ts"],"sourcesContent":["import { Observable } from \"../Misc/observable\";\r\n\r\n/**\r\n * Represents a gamepad control stick position\r\n */\r\nexport class StickValues {\r\n    /**\r\n     * Initializes the gamepad x and y control stick values\r\n     * @param x The x component of the gamepad control stick value\r\n     * @param y The y component of the gamepad control stick value\r\n     */\r\n    constructor(\r\n        /**\r\n         * The x component of the control stick\r\n         */\r\n        public x: number,\r\n        /**\r\n         * The y component of the control stick\r\n         */\r\n        public y: number\r\n    ) {}\r\n}\r\n\r\n/**\r\n * An interface which manages callbacks for gamepad button changes\r\n */\r\nexport interface GamepadButtonChanges {\r\n    /**\r\n     * Called when a gamepad has been changed\r\n     */\r\n    changed: boolean;\r\n    /**\r\n     * Called when a gamepad press event has been triggered\r\n     */\r\n    pressChanged: boolean;\r\n    /**\r\n     * Called when a touch event has been triggered\r\n     */\r\n    touchChanged: boolean;\r\n    /**\r\n     * Called when a value has changed\r\n     */\r\n    valueChanged: boolean;\r\n}\r\n\r\n/**\r\n * Represents a gamepad\r\n */\r\nexport class Gamepad {\r\n    /**\r\n     * Specifies what type of gamepad this represents\r\n     */\r\n    public type: number;\r\n\r\n    private _leftStick: StickValues = { x: 0, y: 0 };\r\n    private _rightStick: StickValues = { x: 0, y: 0 };\r\n\r\n    /** @internal */\r\n    public _isConnected = true;\r\n\r\n    private _leftStickAxisX: number;\r\n    private _leftStickAxisY: number;\r\n    private _rightStickAxisX: number;\r\n    private _rightStickAxisY: number;\r\n\r\n    /**\r\n     * Triggered when the left control stick has been changed\r\n     */\r\n    private _onleftstickchanged: (values: StickValues) => void;\r\n\r\n    /**\r\n     * Triggered when the right control stick has been changed\r\n     */\r\n    private _onrightstickchanged: (values: StickValues) => void;\r\n\r\n    /**\r\n     * Represents a gamepad controller\r\n     */\r\n    public static GAMEPAD = 0;\r\n    /**\r\n     * Represents a generic controller\r\n     */\r\n    public static GENERIC = 1;\r\n    /**\r\n     * Represents an XBox controller\r\n     */\r\n    public static XBOX = 2;\r\n    /**\r\n     * Represents a pose-enabled controller\r\n     */\r\n    public static POSE_ENABLED = 3;\r\n    /**\r\n     * Represents an Dual Shock controller\r\n     */\r\n    public static DUALSHOCK = 4;\r\n\r\n    /**\r\n     * Specifies whether the left control stick should be Y-inverted\r\n     */\r\n    protected _invertLeftStickY: boolean = false;\r\n\r\n    /**\r\n     * Specifies if the gamepad has been connected\r\n     */\r\n    public get isConnected(): boolean {\r\n        return this._isConnected;\r\n    }\r\n\r\n    /**\r\n     * Initializes the gamepad\r\n     * @param id The id of the gamepad\r\n     * @param index The index of the gamepad\r\n     * @param browserGamepad The browser gamepad\r\n     * @param leftStickX The x component of the left joystick\r\n     * @param leftStickY The y component of the left joystick\r\n     * @param rightStickX The x component of the right joystick\r\n     * @param rightStickY The y component of the right joystick\r\n     */\r\n    constructor(\r\n        /**\r\n         * The id of the gamepad\r\n         */\r\n        public id: string,\r\n        /**\r\n         * The index of the gamepad\r\n         */\r\n        public index: number,\r\n        /**\r\n         * The browser gamepad\r\n         */\r\n        public browserGamepad: any,\r\n        leftStickX: number = 0,\r\n        leftStickY: number = 1,\r\n        rightStickX: number = 2,\r\n        rightStickY: number = 3\r\n    ) {\r\n        this.type = Gamepad.GAMEPAD;\r\n        this._leftStickAxisX = leftStickX;\r\n        this._leftStickAxisY = leftStickY;\r\n        this._rightStickAxisX = rightStickX;\r\n        this._rightStickAxisY = rightStickY;\r\n        if (this.browserGamepad.axes.length >= 2) {\r\n            this._leftStick = { x: this.browserGamepad.axes[this._leftStickAxisX], y: this.browserGamepad.axes[this._leftStickAxisY] };\r\n        }\r\n        if (this.browserGamepad.axes.length >= 4) {\r\n            this._rightStick = { x: this.browserGamepad.axes[this._rightStickAxisX], y: this.browserGamepad.axes[this._rightStickAxisY] };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback triggered when the left joystick has changed\r\n     * @param callback\r\n     */\r\n    public onleftstickchanged(callback: (values: StickValues) => void) {\r\n        this._onleftstickchanged = callback;\r\n    }\r\n\r\n    /**\r\n     * Callback triggered when the right joystick has changed\r\n     * @param callback\r\n     */\r\n    public onrightstickchanged(callback: (values: StickValues) => void) {\r\n        this._onrightstickchanged = callback;\r\n    }\r\n\r\n    /**\r\n     * Gets the left joystick\r\n     */\r\n    public get leftStick(): StickValues {\r\n        return this._leftStick;\r\n    }\r\n    /**\r\n     * Sets the left joystick values\r\n     */\r\n    public set leftStick(newValues: StickValues) {\r\n        if (this._onleftstickchanged && (this._leftStick.x !== newValues.x || this._leftStick.y !== newValues.y)) {\r\n            this._onleftstickchanged(newValues);\r\n        }\r\n        this._leftStick = newValues;\r\n    }\r\n    /**\r\n     * Gets the right joystick\r\n     */\r\n    public get rightStick(): StickValues {\r\n        return this._rightStick;\r\n    }\r\n    /**\r\n     * Sets the right joystick value\r\n     */\r\n    public set rightStick(newValues: StickValues) {\r\n        if (this._onrightstickchanged && (this._rightStick.x !== newValues.x || this._rightStick.y !== newValues.y)) {\r\n            this._onrightstickchanged(newValues);\r\n        }\r\n        this._rightStick = newValues;\r\n    }\r\n\r\n    /**\r\n     * Updates the gamepad joystick positions\r\n     */\r\n\r\n    public update() {\r\n        if (this._leftStick) {\r\n            this.leftStick = { x: this.browserGamepad.axes[this._leftStickAxisX], y: this.browserGamepad.axes[this._leftStickAxisY] };\r\n            if (this._invertLeftStickY) {\r\n                this.leftStick.y *= -1;\r\n            }\r\n        }\r\n        if (this._rightStick) {\r\n            this.rightStick = { x: this.browserGamepad.axes[this._rightStickAxisX], y: this.browserGamepad.axes[this._rightStickAxisY] };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the gamepad\r\n     */\r\n    public dispose() {}\r\n}\r\n\r\n/**\r\n * Represents a generic gamepad\r\n */\r\nexport class GenericPad extends Gamepad {\r\n    private _buttons: Array<number>;\r\n    private _onbuttondown: (buttonPressed: number) => void;\r\n    private _onbuttonup: (buttonReleased: number) => void;\r\n\r\n    /**\r\n     * Observable triggered when a button has been pressed\r\n     */\r\n    public onButtonDownObservable = new Observable<number>();\r\n    /**\r\n     * Observable triggered when a button has been released\r\n     */\r\n    public onButtonUpObservable = new Observable<number>();\r\n\r\n    /**\r\n     * Callback triggered when a button has been pressed\r\n     * @param callback Called when a button has been pressed\r\n     */\r\n    public onbuttondown(callback: (buttonPressed: number) => void) {\r\n        this._onbuttondown = callback;\r\n    }\r\n    /**\r\n     * Callback triggered when a button has been released\r\n     * @param callback Called when a button has been released\r\n     */\r\n    public onbuttonup(callback: (buttonReleased: number) => void) {\r\n        this._onbuttonup = callback;\r\n    }\r\n\r\n    /**\r\n     * Initializes the generic gamepad\r\n     * @param id The id of the generic gamepad\r\n     * @param index The index of the generic gamepad\r\n     * @param browserGamepad The browser gamepad\r\n     */\r\n    constructor(id: string, index: number, browserGamepad: any) {\r\n        super(id, index, browserGamepad);\r\n        this.type = Gamepad.GENERIC;\r\n        this._buttons = new Array(browserGamepad.buttons.length);\r\n    }\r\n\r\n    private _setButtonValue(newValue: number, currentValue: number, buttonIndex: number): number {\r\n        if (newValue !== currentValue) {\r\n            if (newValue === 1) {\r\n                if (this._onbuttondown) {\r\n                    this._onbuttondown(buttonIndex);\r\n                }\r\n\r\n                this.onButtonDownObservable.notifyObservers(buttonIndex);\r\n            }\r\n            if (newValue === 0) {\r\n                if (this._onbuttonup) {\r\n                    this._onbuttonup(buttonIndex);\r\n                }\r\n\r\n                this.onButtonUpObservable.notifyObservers(buttonIndex);\r\n            }\r\n        }\r\n        return newValue;\r\n    }\r\n\r\n    /**\r\n     * Updates the generic gamepad\r\n     */\r\n    public update() {\r\n        super.update();\r\n        for (let index = 0; index < this._buttons.length; index++) {\r\n            this._buttons[index] = this._setButtonValue(this.browserGamepad.buttons[index].value, this._buttons[index], index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the generic gamepad\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onButtonDownObservable.clear();\r\n        this.onButtonUpObservable.clear();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}