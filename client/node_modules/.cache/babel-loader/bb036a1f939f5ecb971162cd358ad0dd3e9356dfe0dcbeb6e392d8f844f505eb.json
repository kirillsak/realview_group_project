{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { HDRTools } from \"../../../Misc/HighDynamicRange/hdr.js\";\nimport { Engine } from \"../../../Engines/engine.js\";\n\n/**\n * Implementation of the HDR Texture Loader.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _HDRTextureLoader {\n  constructor() {\n    /**\n     * Defines whether the loader supports cascade loading the different faces.\n     */\n    this.supportCascades = false;\n  }\n  /**\n   * This returns if the loader support the current file information.\n   * @param extension defines the file extension of the file being loaded\n   * @returns true if the loader can load the specified file\n   */\n  canLoad(extension) {\n    return extension.endsWith(\".hdr\");\n  }\n  /**\n   * Uploads the cube texture data to the WebGL texture. It has already been bound.\n   */\n  loadCubeData() {\n    throw \".env not supported in Cube.\";\n  }\n  /**\n   * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n   * @param data contains the texture data\n   * @param texture defines the BabylonJS internal texture\n   * @param callback defines the method to call once ready to upload\n   */\n  loadData(data, texture, callback) {\n    const uint8array = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    const hdrInfo = HDRTools.RGBE_ReadHeader(uint8array);\n    const pixelsDataRGB32 = HDRTools.RGBE_ReadPixels(uint8array, hdrInfo);\n    const pixels = hdrInfo.width * hdrInfo.height;\n    const pixelsDataRGBA32 = new Float32Array(pixels * 4);\n    for (let i = 0; i < pixels; i += 1) {\n      pixelsDataRGBA32[i * 4] = pixelsDataRGB32[i * 3];\n      pixelsDataRGBA32[i * 4 + 1] = pixelsDataRGB32[i * 3 + 1];\n      pixelsDataRGBA32[i * 4 + 2] = pixelsDataRGB32[i * 3 + 2];\n      pixelsDataRGBA32[i * 4 + 3] = 1;\n    }\n    callback(hdrInfo.width, hdrInfo.height, texture.generateMipMaps, false, () => {\n      const engine = texture.getEngine();\n      texture.type = 1;\n      texture.format = 5;\n      texture._gammaSpace = false;\n      engine._uploadDataToTextureDirectly(texture, pixelsDataRGBA32);\n    });\n  }\n}\n// Register the loader.\nEngine._TextureLoaders.push(new _HDRTextureLoader());","map":{"version":3,"mappings":";AAAA,SAASA,QAAQ,QAAQ,uCAAqC;AAC9D,SAASC,MAAM,QAAQ,4BAA0B;;AAKjD;;;;AAIA;AACA,OAAM,MAAOC,iBAAiB;EAA9BC;IACI;;;IAGgB,oBAAe,GAAG,KAAK;EAkD3C;EAhDI;;;;;EAKOC,OAAO,CAACC,SAAiB;IAC5B,OAAOA,SAAS,CAACC,QAAQ,CAAC,MAAM,CAAC;EACrC;EAEA;;;EAGOC,YAAY;IACf,MAAM,6BAA6B;EACvC;EAEA;;;;;;EAMOC,QAAQ,CACXC,IAAqB,EACrBC,OAAwB,EACxBC,QAA+G;IAE/G,MAAMC,UAAU,GAAG,IAAIC,UAAU,CAACJ,IAAI,CAACK,MAAM,EAAEL,IAAI,CAACM,UAAU,EAAEN,IAAI,CAACO,UAAU,CAAC;IAChF,MAAMC,OAAO,GAAGjB,QAAQ,CAACkB,eAAe,CAACN,UAAU,CAAC;IACpD,MAAMO,eAAe,GAAGnB,QAAQ,CAACoB,eAAe,CAACR,UAAU,EAAEK,OAAO,CAAC;IAErE,MAAMI,MAAM,GAAGJ,OAAO,CAACK,KAAK,GAAGL,OAAO,CAACM,MAAM;IAC7C,MAAMC,gBAAgB,GAAG,IAAIC,YAAY,CAACJ,MAAM,GAAG,CAAC,CAAC;IACrD,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,EAAEK,CAAC,IAAI,CAAC,EAAE;MAChCF,gBAAgB,CAACE,CAAC,GAAG,CAAC,CAAC,GAAGP,eAAe,CAACO,CAAC,GAAG,CAAC,CAAC;MAChDF,gBAAgB,CAACE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGP,eAAe,CAACO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MACxDF,gBAAgB,CAACE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGP,eAAe,CAACO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MACxDF,gBAAgB,CAACE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;;IAGnCf,QAAQ,CAACM,OAAO,CAACK,KAAK,EAAEL,OAAO,CAACM,MAAM,EAAEb,OAAO,CAACiB,eAAe,EAAE,KAAK,EAAE,MAAK;MACzE,MAAMC,MAAM,GAAGlB,OAAO,CAACmB,SAAS,EAAE;MAClCnB,OAAO,CAACoB,IAAI,GAAG;MACfpB,OAAO,CAACqB,MAAM,GAAG;MACjBrB,OAAO,CAACsB,WAAW,GAAG,KAAK;MAC3BJ,MAAM,CAACK,4BAA4B,CAACvB,OAAO,EAAEc,gBAAgB,CAAC;IAClE,CAAC,CAAC;EACN;;AAGJ;AACAvB,MAAM,CAACiC,eAAe,CAACC,IAAI,CAAC,IAAIjC,iBAAiB,EAAE,CAAC","names":["HDRTools","Engine","_HDRTextureLoader","constructor","canLoad","extension","endsWith","loadCubeData","loadData","data","texture","callback","uint8array","Uint8Array","buffer","byteOffset","byteLength","hdrInfo","RGBE_ReadHeader","pixelsDataRGB32","RGBE_ReadPixels","pixels","width","height","pixelsDataRGBA32","Float32Array","i","generateMipMaps","engine","getEngine","type","format","_gammaSpace","_uploadDataToTextureDirectly","_TextureLoaders","push"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Textures/Loaders/hdrTextureLoader.ts"],"sourcesContent":["import { HDRTools } from \"../../../Misc/HighDynamicRange/hdr\";\r\nimport { Engine } from \"../../../Engines/engine\";\r\nimport type { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport type { IInternalTextureLoader } from \"../../../Materials/Textures/internalTextureLoader\";\r\nimport { Constants } from \"../../../Engines/constants\";\r\n\r\n/**\r\n * Implementation of the HDR Texture Loader.\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _HDRTextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines whether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = false;\r\n\r\n    /**\r\n     * This returns if the loader support the current file information.\r\n     * @param extension defines the file extension of the file being loaded\r\n     * @returns true if the loader can load the specified file\r\n     */\r\n    public canLoad(extension: string): boolean {\r\n        return extension.endsWith(\".hdr\");\r\n    }\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n     */\r\n    public loadCubeData(): void {\r\n        throw \".env not supported in Cube.\";\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     */\r\n    public loadData(\r\n        data: ArrayBufferView,\r\n        texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void) => void\r\n    ): void {\r\n        const uint8array = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\r\n        const hdrInfo = HDRTools.RGBE_ReadHeader(uint8array);\r\n        const pixelsDataRGB32 = HDRTools.RGBE_ReadPixels(uint8array, hdrInfo);\r\n\r\n        const pixels = hdrInfo.width * hdrInfo.height;\r\n        const pixelsDataRGBA32 = new Float32Array(pixels * 4);\r\n        for (let i = 0; i < pixels; i += 1) {\r\n            pixelsDataRGBA32[i * 4] = pixelsDataRGB32[i * 3];\r\n            pixelsDataRGBA32[i * 4 + 1] = pixelsDataRGB32[i * 3 + 1];\r\n            pixelsDataRGBA32[i * 4 + 2] = pixelsDataRGB32[i * 3 + 2];\r\n            pixelsDataRGBA32[i * 4 + 3] = 1;\r\n        }\r\n\r\n        callback(hdrInfo.width, hdrInfo.height, texture.generateMipMaps, false, () => {\r\n            const engine = texture.getEngine();\r\n            texture.type = Constants.TEXTURETYPE_FLOAT;\r\n            texture.format = Constants.TEXTUREFORMAT_RGBA;\r\n            texture._gammaSpace = false;\r\n            engine._uploadDataToTextureDirectly(texture, pixelsDataRGBA32);\r\n        });\r\n    }\r\n}\r\n\r\n// Register the loader.\r\nEngine._TextureLoaders.push(new _HDRTextureLoader());\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}