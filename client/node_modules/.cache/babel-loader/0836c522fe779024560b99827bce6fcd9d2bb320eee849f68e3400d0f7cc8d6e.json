{"ast":null,"code":"/**\n * ActionEvent is the event being sent when an action is triggered.\n */\nexport class ActionEvent {\n  /**\n   * Creates a new ActionEvent\n   * @param source The mesh or sprite that triggered the action\n   * @param pointerX The X mouse cursor position at the time of the event\n   * @param pointerY The Y mouse cursor position at the time of the event\n   * @param meshUnderPointer The mesh that is currently pointed at (can be null)\n   * @param sourceEvent the original (browser) event that triggered the ActionEvent\n   * @param additionalData additional data for the event\n   */\n  constructor( /** The mesh or sprite that triggered the action */\n  source, /** The X mouse cursor position at the time of the event */\n  pointerX, /** The Y mouse cursor position at the time of the event */\n  pointerY, /** The mesh that is currently pointed at (can be null) */\n  meshUnderPointer, /** the original (browser) event that triggered the ActionEvent */\n  sourceEvent, /** additional data for the event */\n  additionalData) {\n    this.source = source;\n    this.pointerX = pointerX;\n    this.pointerY = pointerY;\n    this.meshUnderPointer = meshUnderPointer;\n    this.sourceEvent = sourceEvent;\n    this.additionalData = additionalData;\n  }\n  /**\n   * Helper function to auto-create an ActionEvent from a source mesh.\n   * @param source The source mesh that triggered the event\n   * @param evt The original (browser) event\n   * @param additionalData additional data for the event\n   * @returns the new ActionEvent\n   */\n  static CreateNew(source, evt, additionalData) {\n    const scene = source.getScene();\n    return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer || source, evt, additionalData);\n  }\n  /**\n   * Helper function to auto-create an ActionEvent from a source sprite\n   * @param source The source sprite that triggered the event\n   * @param scene Scene associated with the sprite\n   * @param evt The original (browser) event\n   * @param additionalData additional data for the event\n   * @returns the new ActionEvent\n   */\n  static CreateNewFromSprite(source, scene, evt, additionalData) {\n    return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt, additionalData);\n  }\n  /**\n   * Helper function to auto-create an ActionEvent from a scene. If triggered by a mesh use ActionEvent.CreateNew\n   * @param scene the scene where the event occurred\n   * @param evt The original (browser) event\n   * @returns the new ActionEvent\n   */\n  static CreateNewFromScene(scene, evt) {\n    return new ActionEvent(null, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt);\n  }\n  /**\n   * Helper function to auto-create an ActionEvent from a primitive\n   * @param prim defines the target primitive\n   * @param pointerPos defines the pointer position\n   * @param evt The original (browser) event\n   * @param additionalData additional data for the event\n   * @returns the new ActionEvent\n   */\n  static CreateNewFromPrimitive(prim, pointerPos, evt, additionalData) {\n    return new ActionEvent(prim, pointerPos.x, pointerPos.y, null, evt, additionalData);\n  }\n}","map":{"version":3,"mappings":"AAwBA;;;AAGA,OAAM,MAAOA,WAAW;EACpB;;;;;;;;;EASAC,aACI;EACOC,MAAW,EAClB;EACOC,QAAgB,EACvB;EACOC,QAAgB,EACvB;EACOC,gBAAwC,EAC/C;EACOC,WAAiB,EACxB;EACOC,cAAoB;IAVpB,WAAM,GAANL,MAAM;IAEN,aAAQ,GAARC,QAAQ;IAER,aAAQ,GAARC,QAAQ;IAER,qBAAgB,GAAhBC,gBAAgB;IAEhB,gBAAW,GAAXC,WAAW;IAEX,mBAAc,GAAdC,cAAc;EACtB;EAEH;;;;;;;EAOO,OAAOC,SAAS,CAACN,MAAoB,EAAEO,GAAS,EAAEF,cAAoB;IACzE,MAAMG,KAAK,GAAGR,MAAM,CAACS,QAAQ,EAAE;IAC/B,OAAO,IAAIX,WAAW,CAACE,MAAM,EAAEQ,KAAK,CAACP,QAAQ,EAAEO,KAAK,CAACN,QAAQ,EAAEM,KAAK,CAACL,gBAAgB,IAAIH,MAAM,EAAEO,GAAG,EAAEF,cAAc,CAAC;EACzH;EAEA;;;;;;;;EAQO,OAAOK,mBAAmB,CAACV,MAAc,EAAEQ,KAAY,EAAED,GAAS,EAAEF,cAAoB;IAC3F,OAAO,IAAIP,WAAW,CAACE,MAAM,EAAEQ,KAAK,CAACP,QAAQ,EAAEO,KAAK,CAACN,QAAQ,EAAEM,KAAK,CAACL,gBAAgB,EAAEI,GAAG,EAAEF,cAAc,CAAC;EAC/G;EAEA;;;;;;EAMO,OAAOM,kBAAkB,CAACH,KAAY,EAAED,GAAQ;IACnD,OAAO,IAAIT,WAAW,CAAC,IAAI,EAAEU,KAAK,CAACP,QAAQ,EAAEO,KAAK,CAACN,QAAQ,EAAEM,KAAK,CAACL,gBAAgB,EAAEI,GAAG,CAAC;EAC7F;EAEA;;;;;;;;EAQO,OAAOK,sBAAsB,CAACC,IAAS,EAAEC,UAAmB,EAAEP,GAAW,EAAEF,cAAoB;IAClG,OAAO,IAAIP,WAAW,CAACe,IAAI,EAAEC,UAAU,CAACC,CAAC,EAAED,UAAU,CAACE,CAAC,EAAE,IAAI,EAAET,GAAG,EAAEF,cAAc,CAAC;EACvF","names":["ActionEvent","constructor","source","pointerX","pointerY","meshUnderPointer","sourceEvent","additionalData","CreateNew","evt","scene","getScene","CreateNewFromSprite","CreateNewFromScene","CreateNewFromPrimitive","prim","pointerPos","x","y"],"sourceRoot":"","sources":["../../../../lts/core/generated/Actions/actionEvent.ts"],"sourcesContent":["import type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Sprite } from \"../Sprites/sprite\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Vector2 } from \"../Maths/math.vector\";\r\n\r\n/**\r\n * Interface used to define ActionEvent\r\n */\r\nexport interface IActionEvent {\r\n    /** The mesh or sprite that triggered the action */\r\n    source: any;\r\n    /** The X mouse cursor position at the time of the event */\r\n    pointerX: number;\r\n    /** The Y mouse cursor position at the time of the event */\r\n    pointerY: number;\r\n    /** The mesh that is currently pointed at (can be null) */\r\n    meshUnderPointer: Nullable<AbstractMesh>;\r\n    /** the original (browser) event that triggered the ActionEvent */\r\n    sourceEvent?: any;\r\n    /** additional data for the event */\r\n    additionalData?: any;\r\n}\r\n\r\n/**\r\n * ActionEvent is the event being sent when an action is triggered.\r\n */\r\nexport class ActionEvent implements IActionEvent {\r\n    /**\r\n     * Creates a new ActionEvent\r\n     * @param source The mesh or sprite that triggered the action\r\n     * @param pointerX The X mouse cursor position at the time of the event\r\n     * @param pointerY The Y mouse cursor position at the time of the event\r\n     * @param meshUnderPointer The mesh that is currently pointed at (can be null)\r\n     * @param sourceEvent the original (browser) event that triggered the ActionEvent\r\n     * @param additionalData additional data for the event\r\n     */\r\n    constructor(\r\n        /** The mesh or sprite that triggered the action */\r\n        public source: any,\r\n        /** The X mouse cursor position at the time of the event */\r\n        public pointerX: number,\r\n        /** The Y mouse cursor position at the time of the event */\r\n        public pointerY: number,\r\n        /** The mesh that is currently pointed at (can be null) */\r\n        public meshUnderPointer: Nullable<AbstractMesh>,\r\n        /** the original (browser) event that triggered the ActionEvent */\r\n        public sourceEvent?: any,\r\n        /** additional data for the event */\r\n        public additionalData?: any\r\n    ) {}\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a source mesh.\r\n     * @param source The source mesh that triggered the event\r\n     * @param evt The original (browser) event\r\n     * @param additionalData additional data for the event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNew(source: AbstractMesh, evt?: any, additionalData?: any): ActionEvent {\r\n        const scene = source.getScene();\r\n        return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer || source, evt, additionalData);\r\n    }\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a source sprite\r\n     * @param source The source sprite that triggered the event\r\n     * @param scene Scene associated with the sprite\r\n     * @param evt The original (browser) event\r\n     * @param additionalData additional data for the event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNewFromSprite(source: Sprite, scene: Scene, evt?: any, additionalData?: any): ActionEvent {\r\n        return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt, additionalData);\r\n    }\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a scene. If triggered by a mesh use ActionEvent.CreateNew\r\n     * @param scene the scene where the event occurred\r\n     * @param evt The original (browser) event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNewFromScene(scene: Scene, evt: any): ActionEvent {\r\n        return new ActionEvent(null, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt);\r\n    }\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a primitive\r\n     * @param prim defines the target primitive\r\n     * @param pointerPos defines the pointer position\r\n     * @param evt The original (browser) event\r\n     * @param additionalData additional data for the event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNewFromPrimitive(prim: any, pointerPos: Vector2, evt?: Event, additionalData?: any): ActionEvent {\r\n        return new ActionEvent(prim, pointerPos.x, pointerPos.y, null, evt, additionalData);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}