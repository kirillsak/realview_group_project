{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * Defines an GC Friendly array where the backfield array do not shrink to prevent over allocations.\n */\nexport class SmartArray {\n  /**\n   * Instantiates a Smart Array.\n   * @param capacity defines the default capacity of the array.\n   */\n  constructor(capacity) {\n    /**\n     * The active length of the array.\n     */\n    this.length = 0;\n    this.data = new Array(capacity);\n    this._id = SmartArray._GlobalId++;\n  }\n  /**\n   * Pushes a value at the end of the active data.\n   * @param value defines the object to push in the array.\n   */\n  push(value) {\n    this.data[this.length++] = value;\n    if (this.length > this.data.length) {\n      this.data.length *= 2;\n    }\n  }\n  /**\n   * Iterates over the active data and apply the lambda to them.\n   * @param func defines the action to apply on each value.\n   */\n  forEach(func) {\n    for (let index = 0; index < this.length; index++) {\n      func(this.data[index]);\n    }\n  }\n  /**\n   * Sorts the full sets of data.\n   * @param compareFn defines the comparison function to apply.\n   */\n  sort(compareFn) {\n    this.data.sort(compareFn);\n  }\n  /**\n   * Resets the active data to an empty array.\n   */\n  reset() {\n    this.length = 0;\n  }\n  /**\n   * Releases all the data from the array as well as the array.\n   */\n  dispose() {\n    this.reset();\n    if (this.data) {\n      this.data.length = 0;\n    }\n  }\n  /**\n   * Concats the active data with a given array.\n   * @param array defines the data to concatenate with.\n   */\n  concat(array) {\n    if (array.length === 0) {\n      return;\n    }\n    if (this.length + array.length > this.data.length) {\n      this.data.length = (this.length + array.length) * 2;\n    }\n    for (let index = 0; index < array.length; index++) {\n      this.data[this.length++] = (array.data || array)[index];\n    }\n  }\n  /**\n   * Returns the position of a value in the active data.\n   * @param value defines the value to find the index for\n   * @returns the index if found in the active data otherwise -1\n   */\n  indexOf(value) {\n    const position = this.data.indexOf(value);\n    if (position >= this.length) {\n      return -1;\n    }\n    return position;\n  }\n  /**\n   * Returns whether an element is part of the active data.\n   * @param value defines the value to look for\n   * @returns true if found in the active data otherwise false\n   */\n  contains(value) {\n    return this.indexOf(value) !== -1;\n  }\n}\n// Statics\nSmartArray._GlobalId = 0;\n/**\n * Defines an GC Friendly array where the backfield array do not shrink to prevent over allocations.\n * The data in this array can only be present once\n */\nexport class SmartArrayNoDuplicate extends SmartArray {\n  constructor() {\n    super(...arguments);\n    this._duplicateId = 0;\n  }\n  /**\n   * Pushes a value at the end of the active data.\n   * THIS DOES NOT PREVENT DUPPLICATE DATA\n   * @param value defines the object to push in the array.\n   */\n  push(value) {\n    super.push(value);\n    if (!value.__smartArrayFlags) {\n      value.__smartArrayFlags = {};\n    }\n    value.__smartArrayFlags[this._id] = this._duplicateId;\n  }\n  /**\n   * Pushes a value at the end of the active data.\n   * If the data is already present, it won t be added again\n   * @param value defines the object to push in the array.\n   * @returns true if added false if it was already present\n   */\n  pushNoDuplicate(value) {\n    if (value.__smartArrayFlags && value.__smartArrayFlags[this._id] === this._duplicateId) {\n      return false;\n    }\n    this.push(value);\n    return true;\n  }\n  /**\n   * Resets the active data to an empty array.\n   */\n  reset() {\n    super.reset();\n    this._duplicateId++;\n  }\n  /**\n   * Concats the active data with a given array.\n   * This ensures no duplicate will be present in the result.\n   * @param array defines the data to concatenate with.\n   */\n  concatWithNoDuplicate(array) {\n    if (array.length === 0) {\n      return;\n    }\n    if (this.length + array.length > this.data.length) {\n      this.data.length = (this.length + array.length) * 2;\n    }\n    for (let index = 0; index < array.length; index++) {\n      const item = (array.data || array)[index];\n      this.pushNoDuplicate(item);\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["SmartArray","constructor","capacity","data","Array","_id","_GlobalId","push","value","length","forEach","func","index","sort","compareFn","reset","dispose","concat","array","indexOf","position","contains","SmartArrayNoDuplicate","__smartArrayFlags","_duplicateId","pushNoDuplicate","concatWithNoDuplicate","item"],"sourceRoot":"","sources":["../../../../lts/core/generated/Misc/smartArray.ts"],"sourcesContent":["/**\r\n * Defines an array and its length.\r\n * It can be helpful to group result from both Arrays and smart arrays in one structure.\r\n */\r\nexport interface ISmartArrayLike<T> {\r\n    /**\r\n     * The data of the array.\r\n     */\r\n    data: Array<T>;\r\n    /**\r\n     * The active length of the array.\r\n     */\r\n    length: number;\r\n}\r\n\r\n/**\r\n * Defines an GC Friendly array where the backfield array do not shrink to prevent over allocations.\r\n */\r\nexport class SmartArray<T> implements ISmartArrayLike<T> {\r\n    /**\r\n     * The full set of data from the array.\r\n     */\r\n    public data: Array<T>;\r\n\r\n    /**\r\n     * The active length of the array.\r\n     */\r\n    public length: number = 0;\r\n\r\n    protected _id: number;\r\n\r\n    /**\r\n     * Instantiates a Smart Array.\r\n     * @param capacity defines the default capacity of the array.\r\n     */\r\n    constructor(capacity: number) {\r\n        this.data = new Array(capacity);\r\n        this._id = SmartArray._GlobalId++;\r\n    }\r\n\r\n    /**\r\n     * Pushes a value at the end of the active data.\r\n     * @param value defines the object to push in the array.\r\n     */\r\n    public push(value: T): void {\r\n        this.data[this.length++] = value;\r\n\r\n        if (this.length > this.data.length) {\r\n            this.data.length *= 2;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterates over the active data and apply the lambda to them.\r\n     * @param func defines the action to apply on each value.\r\n     */\r\n    public forEach(func: (content: T) => void): void {\r\n        for (let index = 0; index < this.length; index++) {\r\n            func(this.data[index]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sorts the full sets of data.\r\n     * @param compareFn defines the comparison function to apply.\r\n     */\r\n    public sort(compareFn: (a: T, b: T) => number): void {\r\n        this.data.sort(compareFn);\r\n    }\r\n\r\n    /**\r\n     * Resets the active data to an empty array.\r\n     */\r\n    public reset(): void {\r\n        this.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Releases all the data from the array as well as the array.\r\n     */\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        if (this.data) {\r\n            this.data.length = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Concats the active data with a given array.\r\n     * @param array defines the data to concatenate with.\r\n     */\r\n    public concat(array: any): void {\r\n        if (array.length === 0) {\r\n            return;\r\n        }\r\n        if (this.length + array.length > this.data.length) {\r\n            this.data.length = (this.length + array.length) * 2;\r\n        }\r\n\r\n        for (let index = 0; index < array.length; index++) {\r\n            this.data[this.length++] = (array.data || array)[index];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the position of a value in the active data.\r\n     * @param value defines the value to find the index for\r\n     * @returns the index if found in the active data otherwise -1\r\n     */\r\n    public indexOf(value: T): number {\r\n        const position = this.data.indexOf(value);\r\n\r\n        if (position >= this.length) {\r\n            return -1;\r\n        }\r\n\r\n        return position;\r\n    }\r\n\r\n    /**\r\n     * Returns whether an element is part of the active data.\r\n     * @param value defines the value to look for\r\n     * @returns true if found in the active data otherwise false\r\n     */\r\n    public contains(value: T): boolean {\r\n        return this.indexOf(value) !== -1;\r\n    }\r\n\r\n    // Statics\r\n    private static _GlobalId = 0;\r\n}\r\n\r\n/**\r\n * Defines an GC Friendly array where the backfield array do not shrink to prevent over allocations.\r\n * The data in this array can only be present once\r\n */\r\nexport class SmartArrayNoDuplicate<T> extends SmartArray<T> {\r\n    private _duplicateId = 0;\r\n\r\n    /**\r\n     * Pushes a value at the end of the active data.\r\n     * THIS DOES NOT PREVENT DUPPLICATE DATA\r\n     * @param value defines the object to push in the array.\r\n     */\r\n    public push(value: T): void {\r\n        super.push(value);\r\n\r\n        if (!(<any>value).__smartArrayFlags) {\r\n            (<any>value).__smartArrayFlags = {};\r\n        }\r\n\r\n        (<any>value).__smartArrayFlags[this._id] = this._duplicateId;\r\n    }\r\n\r\n    /**\r\n     * Pushes a value at the end of the active data.\r\n     * If the data is already present, it won t be added again\r\n     * @param value defines the object to push in the array.\r\n     * @returns true if added false if it was already present\r\n     */\r\n    public pushNoDuplicate(value: T): boolean {\r\n        if ((<any>value).__smartArrayFlags && (<any>value).__smartArrayFlags[this._id] === this._duplicateId) {\r\n            return false;\r\n        }\r\n        this.push(value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Resets the active data to an empty array.\r\n     */\r\n    public reset(): void {\r\n        super.reset();\r\n        this._duplicateId++;\r\n    }\r\n\r\n    /**\r\n     * Concats the active data with a given array.\r\n     * This ensures no duplicate will be present in the result.\r\n     * @param array defines the data to concatenate with.\r\n     */\r\n    public concatWithNoDuplicate(array: any): void {\r\n        if (array.length === 0) {\r\n            return;\r\n        }\r\n        if (this.length + array.length > this.data.length) {\r\n            this.data.length = (this.length + array.length) * 2;\r\n        }\r\n\r\n        for (let index = 0; index < array.length; index++) {\r\n            const item = (array.data || array)[index];\r\n            this.pushNoDuplicate(item);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}