{"ast":null,"code":"import { Observable } from \"../../Misc/observable.js\";\nimport { PoseEnabledController } from \"./poseEnabledController.js\";\n/**\n * Defines the WebVRController object that represents controllers tracked in 3D space\n * @deprecated Use WebXR instead\n */\nexport class WebVRController extends PoseEnabledController {\n  /**\n   * Creates a new WebVRController from a gamepad\n   * @param vrGamepad the gamepad that the WebVRController should be created from\n   */\n  constructor(vrGamepad) {\n    super(vrGamepad);\n    // Observables\n    /**\n     * Fired when the trigger state has changed\n     */\n    this.onTriggerStateChangedObservable = new Observable();\n    /**\n     * Fired when the main button state has changed\n     */\n    this.onMainButtonStateChangedObservable = new Observable();\n    /**\n     * Fired when the secondary button state has changed\n     */\n    this.onSecondaryButtonStateChangedObservable = new Observable();\n    /**\n     * Fired when the pad state has changed\n     */\n    this.onPadStateChangedObservable = new Observable();\n    /**\n     * Fired when controllers stick values have changed\n     */\n    this.onPadValuesChangedObservable = new Observable();\n    /**\n     * X and Y axis corresponding to the controllers joystick\n     */\n    this.pad = {\n      x: 0,\n      y: 0\n    };\n    // avoid GC, store state in a tmp object\n    this._changes = {\n      pressChanged: false,\n      touchChanged: false,\n      valueChanged: false,\n      changed: false\n    };\n    this._buttons = new Array(vrGamepad.buttons.length);\n    this.hand = vrGamepad.hand;\n  }\n  /**\n   * Fired when a controller button's state has changed\n   * @param callback the callback containing the button that was modified\n   */\n  onButtonStateChange(callback) {\n    this._onButtonStateChange = callback;\n  }\n  /**\n   * The default controller model for the controller\n   */\n  get defaultModel() {\n    return this._defaultModel;\n  }\n  /**\n   * Updates the state of the controller and mesh based on the current position and rotation of the controller\n   */\n  update() {\n    super.update();\n    for (let index = 0; index < this._buttons.length; index++) {\n      this._setButtonValue(this.browserGamepad.buttons[index], this._buttons[index], index);\n    }\n    if (this.leftStick.x !== this.pad.x || this.leftStick.y !== this.pad.y) {\n      this.pad.x = this.leftStick.x;\n      this.pad.y = this.leftStick.y;\n      this.onPadValuesChangedObservable.notifyObservers(this.pad);\n    }\n  }\n  _setButtonValue(newState, currentState, buttonIndex) {\n    if (!newState) {\n      newState = {\n        pressed: false,\n        touched: false,\n        value: 0\n      };\n    }\n    if (!currentState) {\n      this._buttons[buttonIndex] = {\n        pressed: newState.pressed,\n        touched: newState.touched,\n        value: newState.value\n      };\n      return;\n    }\n    this._checkChanges(newState, currentState);\n    if (this._changes.changed) {\n      this._onButtonStateChange && this._onButtonStateChange(this.index, buttonIndex, newState);\n      this._handleButtonChange(buttonIndex, newState, this._changes);\n    }\n    this._buttons[buttonIndex].pressed = newState.pressed;\n    this._buttons[buttonIndex].touched = newState.touched;\n    // oculus triggers are never 0, thou not touched.\n    this._buttons[buttonIndex].value = newState.value < 0.00000001 ? 0 : newState.value;\n  }\n  _checkChanges(newState, currentState) {\n    this._changes.pressChanged = newState.pressed !== currentState.pressed;\n    this._changes.touchChanged = newState.touched !== currentState.touched;\n    this._changes.valueChanged = newState.value !== currentState.value;\n    this._changes.changed = this._changes.pressChanged || this._changes.touchChanged || this._changes.valueChanged;\n    return this._changes;\n  }\n  /**\n   * Disposes of th webVRController\n   */\n  dispose() {\n    super.dispose();\n    this._defaultModel = null;\n    this.onTriggerStateChangedObservable.clear();\n    this.onMainButtonStateChangedObservable.clear();\n    this.onSecondaryButtonStateChangedObservable.clear();\n    this.onPadStateChangedObservable.clear();\n    this.onPadValuesChangedObservable.clear();\n  }\n}","map":{"version":3,"mappings":"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","names":["Observable","PoseEnabledController","WebVRController","constructor","vrGamepad","x","y","pressChanged","touchChanged","valueChanged","changed","_buttons","Array","buttons","length","hand","onButtonStateChange","callback","_onButtonStateChange","defaultModel","_defaultModel","update","index","_setButtonValue","browserGamepad","leftStick","pad","onPadValuesChangedObservable","notifyObservers","newState","currentState","buttonIndex","pressed","touched","value","_checkChanges","_changes","_handleButtonChange","dispose","onTriggerStateChangedObservable","clear","onMainButtonStateChangedObservable","onSecondaryButtonStateChangedObservable","onPadStateChangedObservable"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Gamepads/Controllers/webVRController.ts"],"sourcesContent":["import { Observable } from \"../../Misc/observable\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { ExtendedGamepadButton, MutableGamepadButton } from \"./poseEnabledController\";\r\nimport { PoseEnabledController } from \"./poseEnabledController\";\r\nimport type { StickValues, GamepadButtonChanges } from \"../../Gamepads/gamepad\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n/**\r\n * Defines the WebVRController object that represents controllers tracked in 3D space\r\n * @deprecated Use WebXR instead\r\n */\r\nexport abstract class WebVRController extends PoseEnabledController {\r\n    /**\r\n     * Internal, the default controller model for the controller\r\n     */\r\n    protected _defaultModel: Nullable<AbstractMesh>;\r\n\r\n    // Observables\r\n    /**\r\n     * Fired when the trigger state has changed\r\n     */\r\n    public onTriggerStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n    /**\r\n     * Fired when the main button state has changed\r\n     */\r\n    public onMainButtonStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n    /**\r\n     * Fired when the secondary button state has changed\r\n     */\r\n    public onSecondaryButtonStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n    /**\r\n     * Fired when the pad state has changed\r\n     */\r\n    public onPadStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n    /**\r\n     * Fired when controllers stick values have changed\r\n     */\r\n    public onPadValuesChangedObservable = new Observable<StickValues>();\r\n\r\n    /**\r\n     * Array of button available on the controller\r\n     */\r\n    protected _buttons: Array<MutableGamepadButton>;\r\n\r\n    private _onButtonStateChange: (controlledIndex: number, buttonIndex: number, state: ExtendedGamepadButton) => void;\r\n\r\n    /**\r\n     * Fired when a controller button's state has changed\r\n     * @param callback the callback containing the button that was modified\r\n     */\r\n    public onButtonStateChange(callback: (controlledIndex: number, buttonIndex: number, state: ExtendedGamepadButton) => void) {\r\n        this._onButtonStateChange = callback;\r\n    }\r\n\r\n    /**\r\n     * X and Y axis corresponding to the controllers joystick\r\n     */\r\n    public pad: StickValues = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * 'left' or 'right', see https://w3c.github.io/gamepad/extensions.html#gamepadhand-enum\r\n     */\r\n    public hand: string;\r\n\r\n    /**\r\n     * The default controller model for the controller\r\n     */\r\n    public get defaultModel(): Nullable<AbstractMesh> {\r\n        return this._defaultModel;\r\n    }\r\n\r\n    /**\r\n     * Creates a new WebVRController from a gamepad\r\n     * @param vrGamepad the gamepad that the WebVRController should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n        this._buttons = new Array<ExtendedGamepadButton>(vrGamepad.buttons.length);\r\n        this.hand = vrGamepad.hand;\r\n    }\r\n\r\n    /**\r\n     * Updates the state of the controller and mesh based on the current position and rotation of the controller\r\n     */\r\n    public update() {\r\n        super.update();\r\n        for (let index = 0; index < this._buttons.length; index++) {\r\n            this._setButtonValue(this.browserGamepad.buttons[index], this._buttons[index], index);\r\n        }\r\n        if (this.leftStick.x !== this.pad.x || this.leftStick.y !== this.pad.y) {\r\n            this.pad.x = this.leftStick.x;\r\n            this.pad.y = this.leftStick.y;\r\n            this.onPadValuesChangedObservable.notifyObservers(this.pad);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to be called when a button is modified\r\n     */\r\n    protected abstract _handleButtonChange(buttonIdx: number, value: ExtendedGamepadButton, changes: GamepadButtonChanges): void;\r\n\r\n    /**\r\n     * Loads a mesh and attaches it to the controller\r\n     * @param scene the scene the mesh should be added to\r\n     * @param meshLoaded callback for when the mesh has been loaded\r\n     */\r\n    public abstract initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void): void;\r\n\r\n    private _setButtonValue(newState: ExtendedGamepadButton, currentState: ExtendedGamepadButton, buttonIndex: number) {\r\n        if (!newState) {\r\n            newState = {\r\n                pressed: false,\r\n                touched: false,\r\n                value: 0,\r\n            };\r\n        }\r\n        if (!currentState) {\r\n            this._buttons[buttonIndex] = {\r\n                pressed: newState.pressed,\r\n                touched: newState.touched,\r\n                value: newState.value,\r\n            };\r\n            return;\r\n        }\r\n        this._checkChanges(newState, currentState);\r\n        if (this._changes.changed) {\r\n            this._onButtonStateChange && this._onButtonStateChange(this.index, buttonIndex, newState);\r\n\r\n            this._handleButtonChange(buttonIndex, newState, this._changes);\r\n        }\r\n        this._buttons[buttonIndex].pressed = newState.pressed;\r\n        this._buttons[buttonIndex].touched = newState.touched;\r\n        // oculus triggers are never 0, thou not touched.\r\n        this._buttons[buttonIndex].value = newState.value < 0.00000001 ? 0 : newState.value;\r\n    }\r\n\r\n    // avoid GC, store state in a tmp object\r\n    private _changes: GamepadButtonChanges = {\r\n        pressChanged: false,\r\n        touchChanged: false,\r\n        valueChanged: false,\r\n        changed: false,\r\n    };\r\n\r\n    private _checkChanges(newState: ExtendedGamepadButton, currentState: ExtendedGamepadButton) {\r\n        this._changes.pressChanged = newState.pressed !== currentState.pressed;\r\n        this._changes.touchChanged = newState.touched !== currentState.touched;\r\n        this._changes.valueChanged = newState.value !== currentState.value;\r\n        this._changes.changed = this._changes.pressChanged || this._changes.touchChanged || this._changes.valueChanged;\r\n        return this._changes;\r\n    }\r\n\r\n    /**\r\n     * Disposes of th webVRController\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this._defaultModel = null;\r\n\r\n        this.onTriggerStateChangedObservable.clear();\r\n        this.onMainButtonStateChangedObservable.clear();\r\n        this.onSecondaryButtonStateChangedObservable.clear();\r\n        this.onPadStateChangedObservable.clear();\r\n        this.onPadValuesChangedObservable.clear();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}