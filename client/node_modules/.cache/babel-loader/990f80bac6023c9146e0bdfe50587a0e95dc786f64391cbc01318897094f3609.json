{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Block used to get the screen sizes\n */\nexport class ScreenSizeBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new ScreenSizeBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"xy\", NodeMaterialBlockConnectionPointTypes.Vector2, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"x\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"y\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"ScreenSizeBlock\";\n  }\n  /**\n   * Gets the xy component\n   */\n  get xy() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets the x component\n   */\n  get x() {\n    return this._outputs[1];\n  }\n  /**\n   * Gets the y component\n   */\n  get y() {\n    return this._outputs[2];\n  }\n  bind(effect) {\n    const engine = this._scene.getEngine();\n    effect.setFloat2(this._varName, engine.getRenderWidth(), engine.getRenderHeight());\n  }\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  writeOutputs(state, varName) {\n    let code = \"\";\n    for (const output of this._outputs) {\n      if (output.hasEndpoints) {\n        code += `${this._declareOutput(output, state)} = ${varName}.${output.name};\\r\\n`;\n      }\n    }\n    return code;\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    this._scene = state.sharedData.scene;\n    if (state.target === NodeMaterialBlockTargets.Vertex) {\n      throw \"ScreenSizeBlock must only be used in a fragment shader\";\n    }\n    state.sharedData.bindableBlocks.push(this);\n    this._varName = state._getFreeVariableName(\"screenSize\");\n    state._emitUniformFromString(this._varName, \"vec2\");\n    state.compilationString += this.writeOutputs(state, this._varName);\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.ScreenSizeBlock\", ScreenSizeBlock);","map":{"version":3,"mappings":";AAAA,SAASA,iBAAiB,QAAQ,4BAA0B;AAC5D,SAASC,qCAAqC,QAAQ,sDAAoD;AAG1G,SAASC,wBAAwB,QAAQ,yCAAuC;AAChF,SAASC,aAAa,QAAQ,+BAA6B;AAI3D;;;AAGA,OAAM,MAAOC,eAAgB,SAAQJ,iBAAiB;EAIlD;;;;EAIAK,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,EAAEJ,wBAAwB,CAACK,QAAQ,CAAC;IAE9C,IAAI,CAACC,cAAc,CAAC,IAAI,EAAEP,qCAAqC,CAACQ,OAAO,EAAEP,wBAAwB,CAACK,QAAQ,CAAC;IAC3G,IAAI,CAACC,cAAc,CAAC,GAAG,EAAEP,qCAAqC,CAACS,KAAK,EAAER,wBAAwB,CAACK,QAAQ,CAAC;IACxG,IAAI,CAACC,cAAc,CAAC,GAAG,EAAEP,qCAAqC,CAACS,KAAK,EAAER,wBAAwB,CAACK,QAAQ,CAAC;EAC5G;EAEA;;;;EAIOI,YAAY;IACf,OAAO,iBAAiB;EAC5B;EAEA;;;EAGA,IAAWC,EAAE;IACT,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEA;;;EAGA,IAAWC,CAAC;IACR,OAAO,IAAI,CAACD,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEA;;;EAGA,IAAWE,CAAC;IACR,OAAO,IAAI,CAACF,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEOG,IAAI,CAACC,MAAc;IACtB,MAAMC,MAAM,GAAG,IAAI,CAACC,MAAM,CAACC,SAAS,EAAE;IAEtCH,MAAM,CAACI,SAAS,CAAC,IAAI,CAACC,QAAQ,EAAEJ,MAAM,CAACK,cAAc,EAAE,EAAEL,MAAM,CAACM,eAAe,EAAE,CAAC;EACtF;EAEA;EACUC,YAAY,CAACC,KAA6B,EAAEC,OAAe;IACjE,IAAIC,IAAI,GAAG,EAAE;IAEb,KAAK,MAAMC,MAAM,IAAI,IAAI,CAAChB,QAAQ,EAAE;MAChC,IAAIgB,MAAM,CAACC,YAAY,EAAE;QACrBF,IAAI,IAAI,GAAG,IAAI,CAACG,cAAc,CAACF,MAAM,EAAEH,KAAK,CAAC,MAAMC,OAAO,IAAIE,MAAM,CAACvB,IAAI,OAAO;;;IAIxF,OAAOsB,IAAI;EACf;EAEUI,WAAW,CAACN,KAA6B;IAC/C,KAAK,CAACM,WAAW,CAACN,KAAK,CAAC;IAExB,IAAI,CAACP,MAAM,GAAGO,KAAK,CAACO,UAAU,CAACC,KAAK;IAEpC,IAAIR,KAAK,CAACS,MAAM,KAAKjC,wBAAwB,CAACkC,MAAM,EAAE;MAClD,MAAM,wDAAwD;;IAGlEV,KAAK,CAACO,UAAU,CAACI,cAAc,CAACC,IAAI,CAAC,IAAI,CAAC;IAE1C,IAAI,CAAChB,QAAQ,GAAGI,KAAK,CAACa,oBAAoB,CAAC,YAAY,CAAC;IACxDb,KAAK,CAACc,sBAAsB,CAAC,IAAI,CAAClB,QAAQ,EAAE,MAAM,CAAC;IAEnDI,KAAK,CAACe,iBAAiB,IAAI,IAAI,CAAChB,YAAY,CAACC,KAAK,EAAE,IAAI,CAACJ,QAAQ,CAAC;IAElE,OAAO,IAAI;EACf;;AAGJnB,aAAa,CAAC,yBAAyB,EAAEC,eAAe,CAAC","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","ScreenSizeBlock","constructor","name","Fragment","registerOutput","Vector2","Float","getClassName","xy","_outputs","x","y","bind","effect","engine","_scene","getEngine","setFloat2","_varName","getRenderWidth","getRenderHeight","writeOutputs","state","varName","code","output","hasEndpoints","_declareOutput","_buildBlock","sharedData","scene","target","Vertex","bindableBlocks","push","_getFreeVariableName","_emitUniformFromString","compilationString"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/Fragment/screenSizeBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport type { Scene } from \"../../../../scene\";\r\n\r\n/**\r\n * Block used to get the screen sizes\r\n */\r\nexport class ScreenSizeBlock extends NodeMaterialBlock {\r\n    private _varName: string;\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Creates a new ScreenSizeBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\"xy\", NodeMaterialBlockConnectionPointTypes.Vector2, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"x\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"y\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ScreenSizeBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the xy component\r\n     */\r\n    public get xy(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the x component\r\n     */\r\n    public get x(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the y component\r\n     */\r\n    public get y(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    public bind(effect: Effect) {\r\n        const engine = this._scene.getEngine();\r\n\r\n        effect.setFloat2(this._varName, engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected writeOutputs(state: NodeMaterialBuildState, varName: string): string {\r\n        let code = \"\";\r\n\r\n        for (const output of this._outputs) {\r\n            if (output.hasEndpoints) {\r\n                code += `${this._declareOutput(output, state)} = ${varName}.${output.name};\\r\\n`;\r\n            }\r\n        }\r\n\r\n        return code;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        this._scene = state.sharedData.scene;\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Vertex) {\r\n            throw \"ScreenSizeBlock must only be used in a fragment shader\";\r\n        }\r\n\r\n        state.sharedData.bindableBlocks.push(this);\r\n\r\n        this._varName = state._getFreeVariableName(\"screenSize\");\r\n        state._emitUniformFromString(this._varName, \"vec2\");\r\n\r\n        state.compilationString += this.writeOutputs(state, this._varName);\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ScreenSizeBlock\", ScreenSizeBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}