{"ast":null,"code":"import { ThinEngine } from \"../../Engines/thinEngine.js\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nThinEngine.prototype.updateDynamicIndexBuffer = function (indexBuffer, indices, offset = 0) {\n  // Force cache update\n  this._currentBoundBuffer[this._gl.ELEMENT_ARRAY_BUFFER] = null;\n  this.bindIndexBuffer(indexBuffer);\n  let view;\n  if (indexBuffer.is32Bits) {\n    // anything else than Uint32Array needs to be converted to Uint32Array\n    view = indices instanceof Uint32Array ? indices : new Uint32Array(indices);\n  } else {\n    // anything else than Uint16Array needs to be converted to Uint16Array\n    view = indices instanceof Uint16Array ? indices : new Uint16Array(indices);\n  }\n  this._gl.bufferData(this._gl.ELEMENT_ARRAY_BUFFER, view, this._gl.DYNAMIC_DRAW);\n  this._resetIndexBufferBinding();\n};\nThinEngine.prototype.updateDynamicVertexBuffer = function (vertexBuffer, data, byteOffset, byteLength) {\n  this.bindArrayBuffer(vertexBuffer);\n  if (byteOffset === undefined) {\n    byteOffset = 0;\n  }\n  const dataLength = data.byteLength || data.length;\n  if (byteLength === undefined || byteLength >= dataLength && byteOffset === 0) {\n    if (data instanceof Array) {\n      this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, new Float32Array(data));\n    } else {\n      this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, data);\n    }\n  } else {\n    if (data instanceof Array) {\n      this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, new Float32Array(data).subarray(byteOffset, byteOffset + byteLength));\n    } else {\n      if (data instanceof ArrayBuffer) {\n        data = new Uint8Array(data, byteOffset, byteLength);\n      } else {\n        data = new Uint8Array(data.buffer, data.byteOffset + byteOffset, byteLength);\n      }\n      this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, data);\n    }\n  }\n  this._resetVertexBufferBinding();\n};","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,6BAA2B;AAyBtD;AACAA,UAAU,CAACC,SAAS,CAACC,wBAAwB,GAAG,UAA4BC,WAAuB,EAAEC,OAAqB,EAAEC,SAAiB,CAAC;EAC1I;EACA,IAAI,CAACC,mBAAmB,CAAC,IAAI,CAACC,GAAG,CAACC,oBAAoB,CAAC,GAAG,IAAI;EAC9D,IAAI,CAACC,eAAe,CAACN,WAAW,CAAC;EAEjC,IAAIO,IAAqB;EACzB,IAAIP,WAAW,CAACQ,QAAQ,EAAE;IACtB;IACAD,IAAI,GAAGN,OAAO,YAAYQ,WAAW,GAAGR,OAAO,GAAG,IAAIQ,WAAW,CAACR,OAAO,CAAC;GAC7E,MAAM;IACH;IACAM,IAAI,GAAGN,OAAO,YAAYS,WAAW,GAAGT,OAAO,GAAG,IAAIS,WAAW,CAACT,OAAO,CAAC;;EAG9E,IAAI,CAACG,GAAG,CAACO,UAAU,CAAC,IAAI,CAACP,GAAG,CAACC,oBAAoB,EAAEE,IAAI,EAAE,IAAI,CAACH,GAAG,CAACQ,YAAY,CAAC;EAE/E,IAAI,CAACC,wBAAwB,EAAE;AACnC,CAAC;AAEDhB,UAAU,CAACC,SAAS,CAACgB,yBAAyB,GAAG,UAA4BC,YAAwB,EAAEC,IAAe,EAAEC,UAAmB,EAAEC,UAAmB;EAC5J,IAAI,CAACC,eAAe,CAACJ,YAAY,CAAC;EAElC,IAAIE,UAAU,KAAKG,SAAS,EAAE;IAC1BH,UAAU,GAAG,CAAC;;EAGlB,MAAMI,UAAU,GAAIL,IAAoB,CAACE,UAAU,IAAKF,IAAiB,CAACM,MAAM;EAEhF,IAAIJ,UAAU,KAAKE,SAAS,IAAKF,UAAU,IAAIG,UAAU,IAAIJ,UAAU,KAAK,CAAE,EAAE;IAC5E,IAAID,IAAI,YAAYO,KAAK,EAAE;MACvB,IAAI,CAACnB,GAAG,CAACoB,aAAa,CAAC,IAAI,CAACpB,GAAG,CAACqB,YAAY,EAAER,UAAU,EAAE,IAAIS,YAAY,CAACV,IAAI,CAAC,CAAC;KACpF,MAAM;MACH,IAAI,CAACZ,GAAG,CAACoB,aAAa,CAAC,IAAI,CAACpB,GAAG,CAACqB,YAAY,EAAER,UAAU,EAAeD,IAAI,CAAC;;GAEnF,MAAM;IACH,IAAIA,IAAI,YAAYO,KAAK,EAAE;MACvB,IAAI,CAACnB,GAAG,CAACoB,aAAa,CAAC,IAAI,CAACpB,GAAG,CAACqB,YAAY,EAAE,CAAC,EAAE,IAAIC,YAAY,CAACV,IAAI,CAAC,CAACW,QAAQ,CAACV,UAAU,EAAEA,UAAU,GAAGC,UAAU,CAAC,CAAC;KACzH,MAAM;MACH,IAAIF,IAAI,YAAYY,WAAW,EAAE;QAC7BZ,IAAI,GAAG,IAAIa,UAAU,CAACb,IAAI,EAAEC,UAAU,EAAEC,UAAU,CAAC;OACtD,MAAM;QACHF,IAAI,GAAG,IAAIa,UAAU,CAACb,IAAI,CAACc,MAAM,EAAEd,IAAI,CAACC,UAAU,GAAGA,UAAU,EAAEC,UAAU,CAAC;;MAGhF,IAAI,CAACd,GAAG,CAACoB,aAAa,CAAC,IAAI,CAACpB,GAAG,CAACqB,YAAY,EAAE,CAAC,EAAeT,IAAI,CAAC;;;EAI3E,IAAI,CAACe,yBAAyB,EAAE;AACpC,CAAC","names":["ThinEngine","prototype","updateDynamicIndexBuffer","indexBuffer","indices","offset","_currentBoundBuffer","_gl","ELEMENT_ARRAY_BUFFER","bindIndexBuffer","view","is32Bits","Uint32Array","Uint16Array","bufferData","DYNAMIC_DRAW","_resetIndexBufferBinding","updateDynamicVertexBuffer","vertexBuffer","data","byteOffset","byteLength","bindArrayBuffer","undefined","dataLength","length","Array","bufferSubData","ARRAY_BUFFER","Float32Array","subarray","ArrayBuffer","Uint8Array","buffer","_resetVertexBufferBinding"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/Extensions/engine.dynamicBuffer.ts"],"sourcesContent":["import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport type { DataBuffer } from \"../../Buffers/dataBuffer\";\r\nimport type { IndicesArray, DataArray } from \"../../types\";\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Update a dynamic index buffer\r\n         * @param indexBuffer defines the target index buffer\r\n         * @param indices defines the data to update\r\n         * @param offset defines the offset in the target index buffer where update should start\r\n         */\r\n        updateDynamicIndexBuffer(indexBuffer: DataBuffer, indices: IndicesArray, offset?: number): void;\r\n\r\n        /**\r\n         * Updates a dynamic vertex buffer.\r\n         * @param vertexBuffer the vertex buffer to update\r\n         * @param data the data used to update the vertex buffer\r\n         * @param byteOffset the byte offset of the data\r\n         * @param byteLength the byte length of the data\r\n         */\r\n        updateDynamicVertexBuffer(vertexBuffer: DataBuffer, data: DataArray, byteOffset?: number, byteLength?: number): void;\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nThinEngine.prototype.updateDynamicIndexBuffer = function (this: ThinEngine, indexBuffer: DataBuffer, indices: IndicesArray, offset: number = 0): void {\r\n    // Force cache update\r\n    this._currentBoundBuffer[this._gl.ELEMENT_ARRAY_BUFFER] = null;\r\n    this.bindIndexBuffer(indexBuffer);\r\n\r\n    let view: ArrayBufferView;\r\n    if (indexBuffer.is32Bits) {\r\n        // anything else than Uint32Array needs to be converted to Uint32Array\r\n        view = indices instanceof Uint32Array ? indices : new Uint32Array(indices);\r\n    } else {\r\n        // anything else than Uint16Array needs to be converted to Uint16Array\r\n        view = indices instanceof Uint16Array ? indices : new Uint16Array(indices);\r\n    }\r\n\r\n    this._gl.bufferData(this._gl.ELEMENT_ARRAY_BUFFER, view, this._gl.DYNAMIC_DRAW);\r\n\r\n    this._resetIndexBufferBinding();\r\n};\r\n\r\nThinEngine.prototype.updateDynamicVertexBuffer = function (this: ThinEngine, vertexBuffer: DataBuffer, data: DataArray, byteOffset?: number, byteLength?: number): void {\r\n    this.bindArrayBuffer(vertexBuffer);\r\n\r\n    if (byteOffset === undefined) {\r\n        byteOffset = 0;\r\n    }\r\n\r\n    const dataLength = (data as ArrayBuffer).byteLength || (data as number[]).length;\r\n\r\n    if (byteLength === undefined || (byteLength >= dataLength && byteOffset === 0)) {\r\n        if (data instanceof Array) {\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, new Float32Array(data));\r\n        } else {\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, <ArrayBuffer>data);\r\n        }\r\n    } else {\r\n        if (data instanceof Array) {\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, new Float32Array(data).subarray(byteOffset, byteOffset + byteLength));\r\n        } else {\r\n            if (data instanceof ArrayBuffer) {\r\n                data = new Uint8Array(data, byteOffset, byteLength);\r\n            } else {\r\n                data = new Uint8Array(data.buffer, data.byteOffset + byteOffset, byteLength);\r\n            }\r\n\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, <ArrayBuffer>data);\r\n        }\r\n    }\r\n\r\n    this._resetVertexBufferBinding();\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}