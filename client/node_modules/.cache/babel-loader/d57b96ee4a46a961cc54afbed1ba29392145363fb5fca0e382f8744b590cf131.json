{"ast":null,"code":"import { ShaderLanguage } from \"../../Materials/shaderLanguage.js\";\n/** @internal */\nexport class WebGL2ShaderProcessor {\n  constructor() {\n    this.shaderLanguage = ShaderLanguage.GLSL;\n  }\n  attributeProcessor(attribute) {\n    return attribute.replace(\"attribute\", \"in\");\n  }\n  varyingProcessor(varying, isFragment) {\n    return varying.replace(\"varying\", isFragment ? \"in\" : \"out\");\n  }\n  postProcessor(code, defines, isFragment) {\n    const hasDrawBuffersExtension = code.search(/#extension.+GL_EXT_draw_buffers.+require/) !== -1;\n    // Remove extensions\n    const regex = /#extension.+(GL_OVR_multiview2|GL_OES_standard_derivatives|GL_EXT_shader_texture_lod|GL_EXT_frag_depth|GL_EXT_draw_buffers).+(enable|require)/g;\n    code = code.replace(regex, \"\");\n    // Replace instructions\n    code = code.replace(/texture2D\\s*\\(/g, \"texture(\");\n    if (isFragment) {\n      code = code.replace(/texture2DLodEXT\\s*\\(/g, \"textureLod(\");\n      code = code.replace(/textureCubeLodEXT\\s*\\(/g, \"textureLod(\");\n      code = code.replace(/textureCube\\s*\\(/g, \"texture(\");\n      code = code.replace(/gl_FragDepthEXT/g, \"gl_FragDepth\");\n      code = code.replace(/gl_FragColor/g, \"glFragColor\");\n      code = code.replace(/gl_FragData/g, \"glFragData\");\n      code = code.replace(/void\\s+?main\\s*\\(/g, (hasDrawBuffersExtension ? \"\" : \"layout(location = 0) out vec4 glFragColor;\\n\") + \"void main(\");\n    } else {\n      const hasMultiviewExtension = defines.indexOf(\"#define MULTIVIEW\") !== -1;\n      if (hasMultiviewExtension) {\n        return \"#extension GL_OVR_multiview2 : require\\nlayout (num_views = 2) in;\\n\" + code;\n      }\n    }\n    return code;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,cAAc,QAAQ,mCAAiC;AAGhE;AACA,OAAM,MAAOC,qBAAqB;EAAlCC;IACW,mBAAc,GAAGF,cAAc,CAACG,IAAI;EAoC/C;EAlCWC,kBAAkB,CAACC,SAAiB;IACvC,OAAOA,SAAS,CAACC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC;EAC/C;EAEOC,gBAAgB,CAACC,OAAe,EAAEC,UAAmB;IACxD,OAAOD,OAAO,CAACF,OAAO,CAAC,SAAS,EAAEG,UAAU,GAAG,IAAI,GAAG,KAAK,CAAC;EAChE;EAEOC,aAAa,CAACC,IAAY,EAAEC,OAAiB,EAAEH,UAAmB;IACrE,MAAMI,uBAAuB,GAAGF,IAAI,CAACG,MAAM,CAAC,0CAA0C,CAAC,KAAK,CAAC,CAAC;IAE9F;IACA,MAAMC,KAAK,GAAG,gJAAgJ;IAC9JJ,IAAI,GAAGA,IAAI,CAACL,OAAO,CAACS,KAAK,EAAE,EAAE,CAAC;IAE9B;IACAJ,IAAI,GAAGA,IAAI,CAACL,OAAO,CAAC,iBAAiB,EAAE,UAAU,CAAC;IAClD,IAAIG,UAAU,EAAE;MACZE,IAAI,GAAGA,IAAI,CAACL,OAAO,CAAC,uBAAuB,EAAE,aAAa,CAAC;MAC3DK,IAAI,GAAGA,IAAI,CAACL,OAAO,CAAC,yBAAyB,EAAE,aAAa,CAAC;MAC7DK,IAAI,GAAGA,IAAI,CAACL,OAAO,CAAC,mBAAmB,EAAE,UAAU,CAAC;MACpDK,IAAI,GAAGA,IAAI,CAACL,OAAO,CAAC,kBAAkB,EAAE,cAAc,CAAC;MACvDK,IAAI,GAAGA,IAAI,CAACL,OAAO,CAAC,eAAe,EAAE,aAAa,CAAC;MACnDK,IAAI,GAAGA,IAAI,CAACL,OAAO,CAAC,cAAc,EAAE,YAAY,CAAC;MACjDK,IAAI,GAAGA,IAAI,CAACL,OAAO,CAAC,oBAAoB,EAAE,CAACO,uBAAuB,GAAG,EAAE,GAAG,8CAA8C,IAAI,YAAY,CAAC;KAC5I,MAAM;MACH,MAAMG,qBAAqB,GAAGJ,OAAO,CAACK,OAAO,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;MACzE,IAAID,qBAAqB,EAAE;QACvB,OAAO,sEAAsE,GAAGL,IAAI;;;IAI5F,OAAOA,IAAI;EACf","names":["ShaderLanguage","WebGL2ShaderProcessor","constructor","GLSL","attributeProcessor","attribute","replace","varyingProcessor","varying","isFragment","postProcessor","code","defines","hasDrawBuffersExtension","search","regex","hasMultiviewExtension","indexOf"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/WebGL/webGL2ShaderProcessors.ts"],"sourcesContent":["import { ShaderLanguage } from \"../../Materials/shaderLanguage\";\r\nimport type { IShaderProcessor } from \"../Processors/iShaderProcessor\";\r\n\r\n/** @internal */\r\nexport class WebGL2ShaderProcessor implements IShaderProcessor {\r\n    public shaderLanguage = ShaderLanguage.GLSL;\r\n\r\n    public attributeProcessor(attribute: string) {\r\n        return attribute.replace(\"attribute\", \"in\");\r\n    }\r\n\r\n    public varyingProcessor(varying: string, isFragment: boolean) {\r\n        return varying.replace(\"varying\", isFragment ? \"in\" : \"out\");\r\n    }\r\n\r\n    public postProcessor(code: string, defines: string[], isFragment: boolean) {\r\n        const hasDrawBuffersExtension = code.search(/#extension.+GL_EXT_draw_buffers.+require/) !== -1;\r\n\r\n        // Remove extensions\r\n        const regex = /#extension.+(GL_OVR_multiview2|GL_OES_standard_derivatives|GL_EXT_shader_texture_lod|GL_EXT_frag_depth|GL_EXT_draw_buffers).+(enable|require)/g;\r\n        code = code.replace(regex, \"\");\r\n\r\n        // Replace instructions\r\n        code = code.replace(/texture2D\\s*\\(/g, \"texture(\");\r\n        if (isFragment) {\r\n            code = code.replace(/texture2DLodEXT\\s*\\(/g, \"textureLod(\");\r\n            code = code.replace(/textureCubeLodEXT\\s*\\(/g, \"textureLod(\");\r\n            code = code.replace(/textureCube\\s*\\(/g, \"texture(\");\r\n            code = code.replace(/gl_FragDepthEXT/g, \"gl_FragDepth\");\r\n            code = code.replace(/gl_FragColor/g, \"glFragColor\");\r\n            code = code.replace(/gl_FragData/g, \"glFragData\");\r\n            code = code.replace(/void\\s+?main\\s*\\(/g, (hasDrawBuffersExtension ? \"\" : \"layout(location = 0) out vec4 glFragColor;\\n\") + \"void main(\");\r\n        } else {\r\n            const hasMultiviewExtension = defines.indexOf(\"#define MULTIVIEW\") !== -1;\r\n            if (hasMultiviewExtension) {\r\n                return \"#extension GL_OVR_multiview2 : require\\nlayout (num_views = 2) in;\\n\" + code;\r\n            }\r\n        }\r\n\r\n        return code;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}