{"ast":null,"code":"import { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/vrMultiviewToSingleview.fragment.js\";\nimport \"../Engines/Extensions/engine.multiview.js\";\n/**\n * VRMultiviewToSingleview used to convert multiview texture arrays to standard textures for scenarios such as webVR\n * This will not be used for webXR as it supports displaying texture arrays directly\n */\nexport class VRMultiviewToSingleviewPostProcess extends PostProcess {\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"VRMultiviewToSingleviewPostProcess\" string\n   */\n  getClassName() {\n    return \"VRMultiviewToSingleviewPostProcess\";\n  }\n  /**\n   * Initializes a VRMultiviewToSingleview\n   * @param name name of the post process\n   * @param camera camera to be applied to\n   * @param scaleFactor scaling factor to the size of the output texture\n   */\n  constructor(name, camera, scaleFactor) {\n    super(name, \"vrMultiviewToSingleview\", [\"imageIndex\"], [\"multiviewSampler\"], scaleFactor, camera, Texture.BILINEAR_SAMPLINGMODE);\n    const cam = camera !== null && camera !== void 0 ? camera : this.getCamera();\n    this.onSizeChangedObservable.add(() => {});\n    this.onApplyObservable.add(effect => {\n      if (cam._scene.activeCamera && cam._scene.activeCamera.isLeftCamera) {\n        effect.setInt(\"imageIndex\", 0);\n      } else {\n        effect.setInt(\"imageIndex\", 1);\n      }\n      effect.setTexture(\"multiviewSampler\", cam._multiviewTexture);\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAASA,OAAO,QAAQ,kCAAgC;AACxD,SAASC,WAAW,QAAQ,kBAAgB;AAE5C,OAAO,gDAA8C;AACrD,OAAO,2CAAyC;AAGhD;;;;AAIA,OAAM,MAAOC,kCAAmC,SAAQD,WAAW;EAC/D;;;;EAIOE,YAAY;IACf,OAAO,oCAAoC;EAC/C;EAEA;;;;;;EAMAC,YAAYC,IAAY,EAAEC,MAAwB,EAAEC,WAAmB;IACnE,KAAK,CAACF,IAAI,EAAE,yBAAyB,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,kBAAkB,CAAC,EAAEE,WAAW,EAAED,MAAM,EAAEN,OAAO,CAACQ,qBAAqB,CAAC;IAEhI,MAAMC,GAAG,GAAGH,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,IAAI,CAACI,SAAS,EAAE;IACtC,IAAI,CAACC,uBAAuB,CAACC,GAAG,CAAC,MAAK,CAAE,CAAC,CAAC;IAC1C,IAAI,CAACC,iBAAiB,CAACD,GAAG,CAAEE,MAAc,IAAI;MAC1C,IAAIL,GAAG,CAACM,MAAM,CAACC,YAAY,IAAIP,GAAG,CAACM,MAAM,CAACC,YAAY,CAACC,YAAY,EAAE;QACjEH,MAAM,CAACI,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC;OACjC,MAAM;QACHJ,MAAM,CAACI,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC;;MAElCJ,MAAM,CAACK,UAAU,CAAC,kBAAkB,EAAEV,GAAG,CAACW,iBAAiB,CAAC;IAChE,CAAC,CAAC;EACN","names":["Texture","PostProcess","VRMultiviewToSingleviewPostProcess","getClassName","constructor","name","camera","scaleFactor","BILINEAR_SAMPLINGMODE","cam","getCamera","onSizeChangedObservable","add","onApplyObservable","effect","_scene","activeCamera","isLeftCamera","setInt","setTexture","_multiviewTexture"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/vrMultiviewToSingleviewPostProcess.ts"],"sourcesContent":["import type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { PostProcess } from \"./postProcess\";\r\n\r\nimport \"../Shaders/vrMultiviewToSingleview.fragment\";\r\nimport \"../Engines/Extensions/engine.multiview\";\r\nimport type { Nullable } from \"../types\";\r\n\r\n/**\r\n * VRMultiviewToSingleview used to convert multiview texture arrays to standard textures for scenarios such as webVR\r\n * This will not be used for webXR as it supports displaying texture arrays directly\r\n */\r\nexport class VRMultiviewToSingleviewPostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"VRMultiviewToSingleviewPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"VRMultiviewToSingleviewPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Initializes a VRMultiviewToSingleview\r\n     * @param name name of the post process\r\n     * @param camera camera to be applied to\r\n     * @param scaleFactor scaling factor to the size of the output texture\r\n     */\r\n    constructor(name: string, camera: Nullable<Camera>, scaleFactor: number) {\r\n        super(name, \"vrMultiviewToSingleview\", [\"imageIndex\"], [\"multiviewSampler\"], scaleFactor, camera, Texture.BILINEAR_SAMPLINGMODE);\r\n\r\n        const cam = camera ?? this.getCamera();\r\n        this.onSizeChangedObservable.add(() => {});\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            if (cam._scene.activeCamera && cam._scene.activeCamera.isLeftCamera) {\r\n                effect.setInt(\"imageIndex\", 0);\r\n            } else {\r\n                effect.setInt(\"imageIndex\", 1);\r\n            }\r\n            effect.setTexture(\"multiviewSampler\", cam._multiviewTexture);\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}