{"ast":null,"code":"import { __decorate } from \"../../tslib.es6.js\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { Gamepad } from \"../../Gamepads/gamepad.js\";\n/**\n * Manage the gamepad inputs to control an arc rotate camera.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\n */\nexport class ArcRotateCameraGamepadInput {\n  constructor() {\n    /**\n     * Defines the gamepad rotation sensibility.\n     * This is the threshold from when rotation starts to be accounted for to prevent jittering.\n     */\n    this.gamepadRotationSensibility = 80;\n    /**\n     * Defines the gamepad move sensibility.\n     * This is the threshold from when moving starts to be accounted for for to prevent jittering.\n     */\n    this.gamepadMoveSensibility = 40;\n    this._yAxisScale = 1.0;\n  }\n  /**\n   * Gets or sets a boolean indicating that Yaxis (for right stick) should be inverted\n   */\n  get invertYAxis() {\n    return this._yAxisScale !== 1.0;\n  }\n  set invertYAxis(value) {\n    this._yAxisScale = value ? -1.0 : 1.0;\n  }\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   */\n  attachControl() {\n    const manager = this.camera.getScene().gamepadManager;\n    this._onGamepadConnectedObserver = manager.onGamepadConnectedObservable.add(gamepad => {\n      if (gamepad.type !== Gamepad.POSE_ENABLED) {\n        // prioritize XBOX gamepads.\n        if (!this.gamepad || gamepad.type === Gamepad.XBOX) {\n          this.gamepad = gamepad;\n        }\n      }\n    });\n    this._onGamepadDisconnectedObserver = manager.onGamepadDisconnectedObservable.add(gamepad => {\n      if (this.gamepad === gamepad) {\n        this.gamepad = null;\n      }\n    });\n    this.gamepad = manager.getGamepadByType(Gamepad.XBOX);\n  }\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n  detachControl() {\n    this.camera.getScene().gamepadManager.onGamepadConnectedObservable.remove(this._onGamepadConnectedObserver);\n    this.camera.getScene().gamepadManager.onGamepadDisconnectedObservable.remove(this._onGamepadDisconnectedObserver);\n    this.gamepad = null;\n  }\n  /**\n   * Update the current camera state depending on the inputs that have been used this frame.\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n   */\n  checkInputs() {\n    if (this.gamepad) {\n      const camera = this.camera;\n      const rsValues = this.gamepad.rightStick;\n      if (rsValues) {\n        if (rsValues.x != 0) {\n          const normalizedRX = rsValues.x / this.gamepadRotationSensibility;\n          if (normalizedRX != 0 && Math.abs(normalizedRX) > 0.005) {\n            camera.inertialAlphaOffset += normalizedRX;\n          }\n        }\n        if (rsValues.y != 0) {\n          const normalizedRY = rsValues.y / this.gamepadRotationSensibility * this._yAxisScale;\n          if (normalizedRY != 0 && Math.abs(normalizedRY) > 0.005) {\n            camera.inertialBetaOffset += normalizedRY;\n          }\n        }\n      }\n      const lsValues = this.gamepad.leftStick;\n      if (lsValues && lsValues.y != 0) {\n        const normalizedLY = lsValues.y / this.gamepadMoveSensibility;\n        if (normalizedLY != 0 && Math.abs(normalizedLY) > 0.005) {\n          this.camera.inertialRadiusOffset -= normalizedLY;\n        }\n      }\n    }\n  }\n  /**\n   * Gets the class name of the current intput.\n   * @returns the class name\n   */\n  getClassName() {\n    return \"ArcRotateCameraGamepadInput\";\n  }\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n  getSimpleName() {\n    return \"gamepad\";\n  }\n}\n__decorate([serialize()], ArcRotateCameraGamepadInput.prototype, \"gamepadRotationSensibility\", void 0);\n__decorate([serialize()], ArcRotateCameraGamepadInput.prototype, \"gamepadMoveSensibility\", void 0);\nCameraInputTypes[\"ArcRotateCameraGamepadInput\"] = ArcRotateCameraGamepadInput;","map":{"version":3,"mappings":"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","names":["serialize","CameraInputTypes","Gamepad","ArcRotateCameraGamepadInput","constructor","invertYAxis","_yAxisScale","value","attachControl","manager","camera","getScene","gamepadManager","_onGamepadConnectedObserver","onGamepadConnectedObservable","add","gamepad","type","POSE_ENABLED","XBOX","_onGamepadDisconnectedObserver","onGamepadDisconnectedObservable","getGamepadByType","detachControl","remove","checkInputs","rsValues","rightStick","x","normalizedRX","gamepadRotationSensibility","Math","abs","inertialAlphaOffset","y","normalizedRY","inertialBetaOffset","lsValues","leftStick","normalizedLY","gamepadMoveSensibility","inertialRadiusOffset","getClassName","getSimpleName","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/Inputs/arcRotateCameraGamepadInput.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport type { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { Gamepad } from \"../../Gamepads/gamepad\";\r\n/**\r\n * Manage the gamepad inputs to control an arc rotate camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class ArcRotateCameraGamepadInput implements ICameraInput<ArcRotateCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: ArcRotateCamera;\r\n\r\n    /**\r\n     * Defines the gamepad the input is gathering event from.\r\n     */\r\n    public gamepad: Nullable<Gamepad>;\r\n\r\n    /**\r\n     * Defines the gamepad rotation sensibility.\r\n     * This is the threshold from when rotation starts to be accounted for to prevent jittering.\r\n     */\r\n    @serialize()\r\n    public gamepadRotationSensibility = 80;\r\n\r\n    /**\r\n     * Defines the gamepad move sensibility.\r\n     * This is the threshold from when moving starts to be accounted for for to prevent jittering.\r\n     */\r\n    @serialize()\r\n    public gamepadMoveSensibility = 40;\r\n\r\n    private _yAxisScale = 1.0;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that Yaxis (for right stick) should be inverted\r\n     */\r\n    public get invertYAxis() {\r\n        return this._yAxisScale !== 1.0;\r\n    }\r\n\r\n    public set invertYAxis(value: boolean) {\r\n        this._yAxisScale = value ? -1.0 : 1.0;\r\n    }\r\n\r\n    private _onGamepadConnectedObserver: Nullable<Observer<Gamepad>>;\r\n    private _onGamepadDisconnectedObserver: Nullable<Observer<Gamepad>>;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     */\r\n    public attachControl(): void {\r\n        const manager = this.camera.getScene().gamepadManager;\r\n        this._onGamepadConnectedObserver = manager.onGamepadConnectedObservable.add((gamepad) => {\r\n            if (gamepad.type !== Gamepad.POSE_ENABLED) {\r\n                // prioritize XBOX gamepads.\r\n                if (!this.gamepad || gamepad.type === Gamepad.XBOX) {\r\n                    this.gamepad = gamepad;\r\n                }\r\n            }\r\n        });\r\n\r\n        this._onGamepadDisconnectedObserver = manager.onGamepadDisconnectedObservable.add((gamepad) => {\r\n            if (this.gamepad === gamepad) {\r\n                this.gamepad = null;\r\n            }\r\n        });\r\n\r\n        this.gamepad = manager.getGamepadByType(Gamepad.XBOX);\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        this.camera.getScene().gamepadManager.onGamepadConnectedObservable.remove(this._onGamepadConnectedObserver);\r\n        this.camera.getScene().gamepadManager.onGamepadDisconnectedObservable.remove(this._onGamepadDisconnectedObserver);\r\n        this.gamepad = null;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this.gamepad) {\r\n            const camera = this.camera;\r\n            const rsValues = this.gamepad.rightStick;\r\n\r\n            if (rsValues) {\r\n                if (rsValues.x != 0) {\r\n                    const normalizedRX = rsValues.x / this.gamepadRotationSensibility;\r\n                    if (normalizedRX != 0 && Math.abs(normalizedRX) > 0.005) {\r\n                        camera.inertialAlphaOffset += normalizedRX;\r\n                    }\r\n                }\r\n\r\n                if (rsValues.y != 0) {\r\n                    const normalizedRY = (rsValues.y / this.gamepadRotationSensibility) * this._yAxisScale;\r\n                    if (normalizedRY != 0 && Math.abs(normalizedRY) > 0.005) {\r\n                        camera.inertialBetaOffset += normalizedRY;\r\n                    }\r\n                }\r\n            }\r\n\r\n            const lsValues = this.gamepad.leftStick;\r\n            if (lsValues && lsValues.y != 0) {\r\n                const normalizedLY = lsValues.y / this.gamepadMoveSensibility;\r\n                if (normalizedLY != 0 && Math.abs(normalizedLY) > 0.005) {\r\n                    this.camera.inertialRadiusOffset -= normalizedLY;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current intput.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ArcRotateCameraGamepadInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"gamepad\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"ArcRotateCameraGamepadInput\"] = ArcRotateCameraGamepadInput;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}