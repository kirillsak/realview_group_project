{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Vector2, Vector4 } from \"../../Maths/math.vector.js\";\nimport { Color4 } from \"../../Maths/math.color.js\";\nimport { Mesh } from \"../mesh.js\";\nimport { VertexData } from \"../mesh.vertexData.js\";\nimport { PolygonMeshBuilder } from \"../polygonMesh.js\";\nimport { VertexBuffer } from \"../../Buffers/buffer.js\";\nimport { EngineStore } from \"../../Engines/engineStore.js\";\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions.js\";\n/**\n * Creates the VertexData for an irregular Polygon in the XoZ plane using a mesh built by polygonTriangulation.build()\n * All parameters are provided by CreatePolygon as needed\n * @param polygon a mesh built from polygonTriangulation.build()\n * @param sideOrientation takes the values Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n * @param fUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\n * @param fColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\n * @param frontUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n * @param backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n * @param wrp a boolean, default false, when true and fUVs used texture is wrapped around all sides, when false texture is applied side\n * @returns the VertexData of the Polygon\n */\nexport function CreatePolygonVertexData(polygon, sideOrientation, fUV, fColors, frontUVs, backUVs, wrp) {\n  const faceUV = fUV || new Array(3);\n  const faceColors = fColors;\n  const colors = [];\n  const wrap = wrp || false;\n  // default face colors and UV if undefined\n  for (let f = 0; f < 3; f++) {\n    if (faceUV[f] === undefined) {\n      faceUV[f] = new Vector4(0, 0, 1, 1);\n    }\n    if (faceColors && faceColors[f] === undefined) {\n      faceColors[f] = new Color4(1, 1, 1, 1);\n    }\n  }\n  const positions = polygon.getVerticesData(VertexBuffer.PositionKind);\n  const normals = polygon.getVerticesData(VertexBuffer.NormalKind);\n  const uvs = polygon.getVerticesData(VertexBuffer.UVKind);\n  const indices = polygon.getIndices();\n  const startIndex = positions.length / 9;\n  let disp = 0;\n  let distX = 0;\n  let distZ = 0;\n  let dist = 0;\n  let totalLen = 0;\n  const cumulate = [0];\n  if (wrap) {\n    for (let idx = startIndex; idx < positions.length / 3; idx += 4) {\n      distX = positions[3 * (idx + 2)] - positions[3 * idx];\n      distZ = positions[3 * (idx + 2) + 2] - positions[3 * idx + 2];\n      dist = Math.sqrt(distX * distX + distZ * distZ);\n      totalLen += dist;\n      cumulate.push(totalLen);\n    }\n  }\n  // set face colours and textures\n  let idx = 0;\n  let face = 0;\n  for (let index = 0; index < normals.length; index += 3) {\n    //Edge Face  no. 1\n    if (Math.abs(normals[index + 1]) < 0.001) {\n      face = 1;\n    }\n    //Top Face  no. 0\n    if (Math.abs(normals[index + 1] - 1) < 0.001) {\n      face = 0;\n    }\n    //Bottom Face  no. 2\n    if (Math.abs(normals[index + 1] + 1) < 0.001) {\n      face = 2;\n    }\n    idx = index / 3;\n    if (face === 1) {\n      disp = idx - startIndex;\n      if (disp % 4 < 1.5) {\n        if (wrap) {\n          uvs[2 * idx] = faceUV[face].x + (faceUV[face].z - faceUV[face].x) * cumulate[Math.floor(disp / 4)] / totalLen;\n        } else {\n          uvs[2 * idx] = faceUV[face].x;\n        }\n      } else {\n        if (wrap) {\n          uvs[2 * idx] = faceUV[face].x + (faceUV[face].z - faceUV[face].x) * cumulate[Math.floor(disp / 4) + 1] / totalLen;\n        } else {\n          uvs[2 * idx] = faceUV[face].z;\n        }\n      }\n      if (disp % 2 === 0) {\n        uvs[2 * idx + 1] = CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[face].w : faceUV[face].w;\n      } else {\n        uvs[2 * idx + 1] = CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[face].y : faceUV[face].y;\n      }\n    } else {\n      uvs[2 * idx] = (1 - uvs[2 * idx]) * faceUV[face].x + uvs[2 * idx] * faceUV[face].z;\n      uvs[2 * idx + 1] = (1 - uvs[2 * idx + 1]) * faceUV[face].y + uvs[2 * idx + 1] * faceUV[face].w;\n      if (CompatibilityOptions.UseOpenGLOrientationForUV) {\n        uvs[2 * idx + 1] = 1.0 - uvs[2 * idx + 1];\n      }\n    }\n    if (faceColors) {\n      colors.push(faceColors[face].r, faceColors[face].g, faceColors[face].b, faceColors[face].a);\n    }\n  }\n  // sides\n  VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, frontUVs, backUVs);\n  // Result\n  const vertexData = new VertexData();\n  vertexData.indices = indices;\n  vertexData.positions = positions;\n  vertexData.normals = normals;\n  vertexData.uvs = uvs;\n  if (faceColors) {\n    const totalColors = sideOrientation === VertexData.DOUBLESIDE ? colors.concat(colors) : colors;\n    vertexData.colors = totalColors;\n  }\n  return vertexData;\n}\n/**\n * Creates a polygon mesh\n * The polygon's shape will depend on the input parameters and is constructed parallel to a ground mesh\n * * The parameter `shape` is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors\n * * You can set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4)\n * * Remember you can only change the shape positions, not their number when updating a polygon\n * @param name defines the name of the mesh\n * @param options defines the options used to create the mesh\n * @param options.shape\n * @param options.holes\n * @param options.depth\n * @param options.smoothingThreshold\n * @param options.faceUV\n * @param options.faceColors\n * @param options.updatable\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @param options.wrap\n * @param scene defines the hosting scene\n * @param earcutInjection can be used to inject your own earcut reference\n * @returns the polygon mesh\n */\nexport function CreatePolygon(name, options, scene = null, earcutInjection = earcut) {\n  options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n  const shape = options.shape;\n  const holes = options.holes || [];\n  const depth = options.depth || 0;\n  const smoothingThreshold = options.smoothingThreshold || 2;\n  const contours = [];\n  let hole = [];\n  for (let i = 0; i < shape.length; i++) {\n    contours[i] = new Vector2(shape[i].x, shape[i].z);\n  }\n  const epsilon = 0.00000001;\n  if (contours[0].equalsWithEpsilon(contours[contours.length - 1], epsilon)) {\n    contours.pop();\n  }\n  const polygonTriangulation = new PolygonMeshBuilder(name, contours, scene || EngineStore.LastCreatedScene, earcutInjection);\n  for (let hNb = 0; hNb < holes.length; hNb++) {\n    hole = [];\n    for (let hPoint = 0; hPoint < holes[hNb].length; hPoint++) {\n      hole.push(new Vector2(holes[hNb][hPoint].x, holes[hNb][hPoint].z));\n    }\n    polygonTriangulation.addHole(hole);\n  }\n  //updatability is set during applyToMesh; setting to true in triangulation build produces errors\n  const polygon = polygonTriangulation.build(false, depth, smoothingThreshold);\n  polygon._originalBuilderSideOrientation = options.sideOrientation;\n  const vertexData = CreatePolygonVertexData(polygon, options.sideOrientation, options.faceUV, options.faceColors, options.frontUVs, options.backUVs, options.wrap);\n  vertexData.applyToMesh(polygon, options.updatable);\n  return polygon;\n}\n/**\n * Creates an extruded polygon mesh, with depth in the Y direction.\n * * You can set different colors and different images to the top, bottom and extruded side by using the parameters `faceColors` (an array of 3 Color3 elements) and `faceUV` (an array of 3 Vector4 elements)\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/texturePerBoxFace\n * @param name defines the name of the mesh\n * @param options defines the options used to create the mesh\n * @param options.shape\n * @param options.holes\n * @param options.depth\n * @param options.faceUV\n * @param options.faceColors\n * @param options.updatable\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @param options.wrap\n * @param scene defines the hosting scene\n * @param earcutInjection can be used to inject your own earcut reference\n * @returns the polygon mesh\n */\nexport function ExtrudePolygon(name, options, scene = null, earcutInjection = earcut) {\n  return CreatePolygon(name, options, scene, earcutInjection);\n}\n/**\n * Class containing static functions to help procedurally build meshes\n * @deprecated use the functions directly from the module\n */\nexport const PolygonBuilder = {\n  ExtrudePolygon,\n  CreatePolygon\n};\nVertexData.CreatePolygon = CreatePolygonVertexData;\nMesh.CreatePolygon = (name, shape, scene, holes, updatable, sideOrientation, earcutInjection = earcut) => {\n  const options = {\n    shape: shape,\n    holes: holes,\n    updatable: updatable,\n    sideOrientation: sideOrientation\n  };\n  return CreatePolygon(name, options, scene, earcutInjection);\n};\nMesh.ExtrudePolygon = (name, shape, depth, scene, holes, updatable, sideOrientation, earcutInjection = earcut) => {\n  const options = {\n    shape: shape,\n    holes: holes,\n    depth: depth,\n    updatable: updatable,\n    sideOrientation: sideOrientation\n  };\n  return ExtrudePolygon(name, options, scene, earcutInjection);\n};","map":{"version":3,"mappings":"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","names":["Vector2","Vector4","Color4","Mesh","VertexData","PolygonMeshBuilder","VertexBuffer","EngineStore","CompatibilityOptions","CreatePolygonVertexData","polygon","sideOrientation","fUV","fColors","frontUVs","backUVs","wrp","faceUV","Array","faceColors","colors","wrap","f","undefined","positions","getVerticesData","PositionKind","normals","NormalKind","uvs","UVKind","indices","getIndices","startIndex","length","disp","distX","distZ","dist","totalLen","cumulate","idx","Math","sqrt","push","face","index","abs","x","z","floor","UseOpenGLOrientationForUV","w","y","r","g","b","a","_ComputeSides","vertexData","totalColors","DOUBLESIDE","concat","CreatePolygon","name","options","scene","earcutInjection","earcut","_GetDefaultSideOrientation","shape","holes","depth","smoothingThreshold","contours","hole","i","epsilon","equalsWithEpsilon","pop","polygonTriangulation","LastCreatedScene","hNb","hPoint","addHole","build","_originalBuilderSideOrientation","applyToMesh","updatable","ExtrudePolygon","PolygonBuilder"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Meshes/Builders/polygonBuilder.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Vector2, Vector4 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { PolygonMeshBuilder } from \"../polygonMesh\";\r\nimport type { FloatArray, IndicesArray, Nullable } from \"../../types\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\ndeclare let earcut: any;\r\n\r\n/**\r\n * Creates the VertexData for an irregular Polygon in the XoZ plane using a mesh built by polygonTriangulation.build()\r\n * All parameters are provided by CreatePolygon as needed\r\n * @param polygon a mesh built from polygonTriangulation.build()\r\n * @param sideOrientation takes the values Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * @param fUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n * @param fColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n * @param frontUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * @param backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param wrp a boolean, default false, when true and fUVs used texture is wrapped around all sides, when false texture is applied side\r\n * @returns the VertexData of the Polygon\r\n */\r\nexport function CreatePolygonVertexData(polygon: Mesh, sideOrientation: number, fUV?: Vector4[], fColors?: Color4[], frontUVs?: Vector4, backUVs?: Vector4, wrp?: boolean) {\r\n    const faceUV: Vector4[] = fUV || new Array<Vector4>(3);\r\n    const faceColors = fColors;\r\n    const colors = [];\r\n    const wrap: boolean = wrp || false;\r\n\r\n    // default face colors and UV if undefined\r\n    for (let f = 0; f < 3; f++) {\r\n        if (faceUV[f] === undefined) {\r\n            faceUV[f] = new Vector4(0, 0, 1, 1);\r\n        }\r\n        if (faceColors && faceColors[f] === undefined) {\r\n            faceColors[f] = new Color4(1, 1, 1, 1);\r\n        }\r\n    }\r\n\r\n    const positions = <FloatArray>polygon.getVerticesData(VertexBuffer.PositionKind);\r\n    const normals = <FloatArray>polygon.getVerticesData(VertexBuffer.NormalKind);\r\n    const uvs = <FloatArray>polygon.getVerticesData(VertexBuffer.UVKind);\r\n    const indices = <IndicesArray>polygon.getIndices();\r\n    const startIndex = positions.length / 9;\r\n    let disp = 0;\r\n    let distX = 0;\r\n    let distZ = 0;\r\n    let dist = 0;\r\n    let totalLen = 0;\r\n    const cumulate = [0];\r\n    if (wrap) {\r\n        for (let idx = startIndex; idx < positions.length / 3; idx += 4) {\r\n            distX = positions[3 * (idx + 2)] - positions[3 * idx];\r\n            distZ = positions[3 * (idx + 2) + 2] - positions[3 * idx + 2];\r\n            dist = Math.sqrt(distX * distX + distZ * distZ);\r\n            totalLen += dist;\r\n            cumulate.push(totalLen);\r\n        }\r\n    }\r\n    // set face colours and textures\r\n    let idx: number = 0;\r\n    let face: number = 0;\r\n    for (let index = 0; index < normals.length; index += 3) {\r\n        //Edge Face  no. 1\r\n        if (Math.abs(normals[index + 1]) < 0.001) {\r\n            face = 1;\r\n        }\r\n        //Top Face  no. 0\r\n        if (Math.abs(normals[index + 1] - 1) < 0.001) {\r\n            face = 0;\r\n        }\r\n        //Bottom Face  no. 2\r\n        if (Math.abs(normals[index + 1] + 1) < 0.001) {\r\n            face = 2;\r\n        }\r\n        idx = index / 3;\r\n        if (face === 1) {\r\n            disp = idx - startIndex;\r\n            if (disp % 4 < 1.5) {\r\n                if (wrap) {\r\n                    uvs[2 * idx] = faceUV[face].x + ((faceUV[face].z - faceUV[face].x) * cumulate[Math.floor(disp / 4)]) / totalLen;\r\n                } else {\r\n                    uvs[2 * idx] = faceUV[face].x;\r\n                }\r\n            } else {\r\n                if (wrap) {\r\n                    uvs[2 * idx] = faceUV[face].x + ((faceUV[face].z - faceUV[face].x) * cumulate[Math.floor(disp / 4) + 1]) / totalLen;\r\n                } else {\r\n                    uvs[2 * idx] = faceUV[face].z;\r\n                }\r\n            }\r\n            if (disp % 2 === 0) {\r\n                uvs[2 * idx + 1] = CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[face].w : faceUV[face].w;\r\n            } else {\r\n                uvs[2 * idx + 1] = CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[face].y : faceUV[face].y;\r\n            }\r\n        } else {\r\n            uvs[2 * idx] = (1 - uvs[2 * idx]) * faceUV[face].x + uvs[2 * idx] * faceUV[face].z;\r\n            uvs[2 * idx + 1] = (1 - uvs[2 * idx + 1]) * faceUV[face].y + uvs[2 * idx + 1] * faceUV[face].w;\r\n\r\n            if (CompatibilityOptions.UseOpenGLOrientationForUV) {\r\n                uvs[2 * idx + 1] = 1.0 - uvs[2 * idx + 1];\r\n            }\r\n        }\r\n        if (faceColors) {\r\n            colors.push(faceColors[face].r, faceColors[face].g, faceColors[face].b, faceColors[face].a);\r\n        }\r\n    }\r\n\r\n    // sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, frontUVs, backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    if (faceColors) {\r\n        const totalColors = sideOrientation === VertexData.DOUBLESIDE ? colors.concat(colors) : colors;\r\n        vertexData.colors = totalColors;\r\n    }\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a polygon mesh\r\n * The polygon's shape will depend on the input parameters and is constructed parallel to a ground mesh\r\n * * The parameter `shape` is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors\r\n * * You can set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4)\r\n * * Remember you can only change the shape positions, not their number when updating a polygon\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.shape\r\n * @param options.holes\r\n * @param options.depth\r\n * @param options.smoothingThreshold\r\n * @param options.faceUV\r\n * @param options.faceColors\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.wrap\r\n * @param scene defines the hosting scene\r\n * @param earcutInjection can be used to inject your own earcut reference\r\n * @returns the polygon mesh\r\n */\r\nexport function CreatePolygon(\r\n    name: string,\r\n    options: {\r\n        shape: Vector3[];\r\n        holes?: Vector3[][];\r\n        depth?: number;\r\n        smoothingThreshold?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        wrap?: boolean;\r\n    },\r\n    scene: Nullable<Scene> = null,\r\n    earcutInjection = earcut\r\n): Mesh {\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    const shape = options.shape;\r\n    const holes = options.holes || [];\r\n    const depth = options.depth || 0;\r\n    const smoothingThreshold = options.smoothingThreshold || 2;\r\n    const contours: Array<Vector2> = [];\r\n    let hole: Array<Vector2> = [];\r\n\r\n    for (let i = 0; i < shape.length; i++) {\r\n        contours[i] = new Vector2(shape[i].x, shape[i].z);\r\n    }\r\n    const epsilon = 0.00000001;\r\n    if (contours[0].equalsWithEpsilon(contours[contours.length - 1], epsilon)) {\r\n        contours.pop();\r\n    }\r\n\r\n    const polygonTriangulation = new PolygonMeshBuilder(name, contours, scene || EngineStore.LastCreatedScene!, earcutInjection);\r\n    for (let hNb = 0; hNb < holes.length; hNb++) {\r\n        hole = [];\r\n        for (let hPoint = 0; hPoint < holes[hNb].length; hPoint++) {\r\n            hole.push(new Vector2(holes[hNb][hPoint].x, holes[hNb][hPoint].z));\r\n        }\r\n        polygonTriangulation.addHole(hole);\r\n    }\r\n    //updatability is set during applyToMesh; setting to true in triangulation build produces errors\r\n    const polygon = polygonTriangulation.build(false, depth, smoothingThreshold);\r\n    polygon._originalBuilderSideOrientation = options.sideOrientation;\r\n    const vertexData = CreatePolygonVertexData(polygon, options.sideOrientation, options.faceUV, options.faceColors, options.frontUVs, options.backUVs, options.wrap);\r\n    vertexData.applyToMesh(polygon, options.updatable);\r\n\r\n    return polygon;\r\n}\r\n\r\n/**\r\n * Creates an extruded polygon mesh, with depth in the Y direction.\r\n * * You can set different colors and different images to the top, bottom and extruded side by using the parameters `faceColors` (an array of 3 Color3 elements) and `faceUV` (an array of 3 Vector4 elements)\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/texturePerBoxFace\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.shape\r\n * @param options.holes\r\n * @param options.depth\r\n * @param options.faceUV\r\n * @param options.faceColors\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.wrap\r\n * @param scene defines the hosting scene\r\n * @param earcutInjection can be used to inject your own earcut reference\r\n * @returns the polygon mesh\r\n */\r\nexport function ExtrudePolygon(\r\n    name: string,\r\n    options: {\r\n        shape: Vector3[];\r\n        holes?: Vector3[][];\r\n        depth?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        wrap?: boolean;\r\n    },\r\n    scene: Nullable<Scene> = null,\r\n    earcutInjection = earcut\r\n): Mesh {\r\n    return CreatePolygon(name, options, scene, earcutInjection);\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the functions directly from the module\r\n */\r\nexport const PolygonBuilder = {\r\n    ExtrudePolygon,\r\n    CreatePolygon,\r\n};\r\n\r\nVertexData.CreatePolygon = CreatePolygonVertexData;\r\n(Mesh as any).CreatePolygon = (\r\n    name: string,\r\n    shape: Vector3[],\r\n    scene: Scene,\r\n    holes?: Vector3[][],\r\n    updatable?: boolean,\r\n    sideOrientation?: number,\r\n    earcutInjection = earcut\r\n): Mesh => {\r\n    const options = {\r\n        shape: shape,\r\n        holes: holes,\r\n        updatable: updatable,\r\n        sideOrientation: sideOrientation,\r\n    };\r\n    return CreatePolygon(name, options, scene, earcutInjection);\r\n};\r\n\r\n(Mesh as any).ExtrudePolygon = (\r\n    name: string,\r\n    shape: Vector3[],\r\n    depth: number,\r\n    scene: Scene,\r\n    holes?: Vector3[][],\r\n    updatable?: boolean,\r\n    sideOrientation?: number,\r\n    earcutInjection = earcut\r\n): Mesh => {\r\n    const options = {\r\n        shape: shape,\r\n        holes: holes,\r\n        depth: depth,\r\n        updatable: updatable,\r\n        sideOrientation: sideOrientation,\r\n    };\r\n    return ExtrudePolygon(name, options, scene, earcutInjection);\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}