{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { bindClipPlane } from \"../../../../Materials/clipPlaneMaterialHelper.js\";\n/**\n * Block used to implement clip planes\n */\nexport class ClipPlanesBlock extends NodeMaterialBlock {\n  /**\n   * Create a new ClipPlanesBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.VertexAndFragment, true);\n    this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"ClipPlanesBlock\";\n  }\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n  initialize(state) {\n    state._excludeVariableName(\"vClipPlane\");\n    state._excludeVariableName(\"fClipDistance\");\n    state._excludeVariableName(\"vClipPlane2\");\n    state._excludeVariableName(\"fClipDistance2\");\n    state._excludeVariableName(\"vClipPlane3\");\n    state._excludeVariableName(\"fClipDistance3\");\n    state._excludeVariableName(\"vClipPlane4\");\n    state._excludeVariableName(\"fClipDistance4\");\n    state._excludeVariableName(\"vClipPlane5\");\n    state._excludeVariableName(\"fClipDistance5\");\n    state._excludeVariableName(\"vClipPlane6\");\n    state._excludeVariableName(\"fClipDistance6\");\n  }\n  /**\n   * Gets the worldPosition input component\n   */\n  get worldPosition() {\n    return this._inputs[0];\n  }\n  get target() {\n    return NodeMaterialBlockTargets.VertexAndFragment;\n  }\n  set target(value) {}\n  prepareDefines(mesh, nodeMaterial, defines) {\n    var _a, _b, _c, _d, _e, _f;\n    const scene = mesh.getScene();\n    const useClipPlane1 = ((_a = nodeMaterial.clipPlane) !== null && _a !== void 0 ? _a : scene.clipPlane) ? true : false;\n    const useClipPlane2 = ((_b = nodeMaterial.clipPlane2) !== null && _b !== void 0 ? _b : scene.clipPlane2) ? true : false;\n    const useClipPlane3 = ((_c = nodeMaterial.clipPlane3) !== null && _c !== void 0 ? _c : scene.clipPlane3) ? true : false;\n    const useClipPlane4 = ((_d = nodeMaterial.clipPlane4) !== null && _d !== void 0 ? _d : scene.clipPlane4) ? true : false;\n    const useClipPlane5 = ((_e = nodeMaterial.clipPlane5) !== null && _e !== void 0 ? _e : scene.clipPlane5) ? true : false;\n    const useClipPlane6 = ((_f = nodeMaterial.clipPlane6) !== null && _f !== void 0 ? _f : scene.clipPlane6) ? true : false;\n    defines.setValue(\"CLIPPLANE\", useClipPlane1, true);\n    defines.setValue(\"CLIPPLANE2\", useClipPlane2, true);\n    defines.setValue(\"CLIPPLANE3\", useClipPlane3, true);\n    defines.setValue(\"CLIPPLANE4\", useClipPlane4, true);\n    defines.setValue(\"CLIPPLANE5\", useClipPlane5, true);\n    defines.setValue(\"CLIPPLANE6\", useClipPlane6, true);\n  }\n  bind(effect, nodeMaterial, mesh) {\n    if (!mesh) {\n      return;\n    }\n    const scene = mesh.getScene();\n    bindClipPlane(effect, nodeMaterial, scene);\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const comments = `//${this.name}`;\n    if (state.target !== NodeMaterialBlockTargets.Fragment) {\n      // Vertex\n      const worldPos = this.worldPosition;\n      state._emitFunctionFromInclude(\"clipPlaneVertexDeclaration\", comments, {\n        replaceStrings: [{\n          search: /uniform vec4 vClipPlane\\d*;/g,\n          replace: \"\"\n        }]\n      });\n      state.compilationString += state._emitCodeFromInclude(\"clipPlaneVertex\", comments, {\n        replaceStrings: [{\n          search: /worldPos/g,\n          replace: worldPos.associatedVariableName\n        }]\n      });\n      state._emitUniformFromString(\"vClipPlane\", \"vec4\");\n      state._emitUniformFromString(\"vClipPlane2\", \"vec4\");\n      state._emitUniformFromString(\"vClipPlane3\", \"vec4\");\n      state._emitUniformFromString(\"vClipPlane4\", \"vec4\");\n      state._emitUniformFromString(\"vClipPlane5\", \"vec4\");\n      state._emitUniformFromString(\"vClipPlane6\", \"vec4\");\n      return;\n    }\n    // Fragment\n    state.sharedData.bindableBlocks.push(this);\n    state.sharedData.blocksWithDefines.push(this);\n    state._emitFunctionFromInclude(\"clipPlaneFragmentDeclaration\", comments);\n    state.compilationString += state._emitCodeFromInclude(\"clipPlaneFragment\", comments);\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.ClipPlanesBlock\", ClipPlanesBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","bindClipPlane","ClipPlanesBlock","constructor","name","VertexAndFragment","registerInput","Vector4","getClassName","initialize","state","_excludeVariableName","worldPosition","_inputs","target","value","prepareDefines","mesh","nodeMaterial","defines","scene","getScene","useClipPlane1","clipPlane","useClipPlane2","clipPlane2","useClipPlane3","clipPlane3","useClipPlane4","clipPlane4","useClipPlane5","clipPlane5","useClipPlane6","clipPlane6","setValue","bind","effect","_buildBlock","comments","Fragment","worldPos","_emitFunctionFromInclude","replaceStrings","search","replace","compilationString","_emitCodeFromInclude","associatedVariableName","_emitUniformFromString","sharedData","bindableBlocks","push","blocksWithDefines"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/Dual/clipPlanesBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport type { Mesh } from \"../../../../Meshes/mesh\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport { bindClipPlane } from \"../../../../Materials/clipPlaneMaterialHelper\";\r\n/**\r\n * Block used to implement clip planes\r\n */\r\nexport class ClipPlanesBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new ClipPlanesBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.VertexAndFragment, true);\r\n\r\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ClipPlanesBlock\";\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"vClipPlane\");\r\n        state._excludeVariableName(\"fClipDistance\");\r\n        state._excludeVariableName(\"vClipPlane2\");\r\n        state._excludeVariableName(\"fClipDistance2\");\r\n        state._excludeVariableName(\"vClipPlane3\");\r\n        state._excludeVariableName(\"fClipDistance3\");\r\n        state._excludeVariableName(\"vClipPlane4\");\r\n        state._excludeVariableName(\"fClipDistance4\");\r\n        state._excludeVariableName(\"vClipPlane5\");\r\n        state._excludeVariableName(\"fClipDistance5\");\r\n        state._excludeVariableName(\"vClipPlane6\");\r\n        state._excludeVariableName(\"fClipDistance6\");\r\n    }\r\n\r\n    /**\r\n     * Gets the worldPosition input component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    public get target() {\r\n        return NodeMaterialBlockTargets.VertexAndFragment;\r\n    }\r\n\r\n    public set target(value: NodeMaterialBlockTargets) {}\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        const scene = mesh.getScene();\r\n\r\n        const useClipPlane1 = nodeMaterial.clipPlane ?? scene.clipPlane ? true : false;\r\n        const useClipPlane2 = nodeMaterial.clipPlane2 ?? scene.clipPlane2 ? true : false;\r\n        const useClipPlane3 = nodeMaterial.clipPlane3 ?? scene.clipPlane3 ? true : false;\r\n        const useClipPlane4 = nodeMaterial.clipPlane4 ?? scene.clipPlane4 ? true : false;\r\n        const useClipPlane5 = nodeMaterial.clipPlane5 ?? scene.clipPlane5 ? true : false;\r\n        const useClipPlane6 = nodeMaterial.clipPlane6 ?? scene.clipPlane6 ? true : false;\r\n\r\n        defines.setValue(\"CLIPPLANE\", useClipPlane1, true);\r\n        defines.setValue(\"CLIPPLANE2\", useClipPlane2, true);\r\n        defines.setValue(\"CLIPPLANE3\", useClipPlane3, true);\r\n        defines.setValue(\"CLIPPLANE4\", useClipPlane4, true);\r\n        defines.setValue(\"CLIPPLANE5\", useClipPlane5, true);\r\n        defines.setValue(\"CLIPPLANE6\", useClipPlane6, true);\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        const scene = mesh.getScene();\r\n\r\n        bindClipPlane(effect, nodeMaterial, scene);\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const comments = `//${this.name}`;\r\n        if (state.target !== NodeMaterialBlockTargets.Fragment) {\r\n            // Vertex\r\n            const worldPos = this.worldPosition;\r\n\r\n            state._emitFunctionFromInclude(\"clipPlaneVertexDeclaration\", comments, {\r\n                replaceStrings: [{ search: /uniform vec4 vClipPlane\\d*;/g, replace: \"\" }],\r\n            });\r\n            state.compilationString += state._emitCodeFromInclude(\"clipPlaneVertex\", comments, {\r\n                replaceStrings: [{ search: /worldPos/g, replace: worldPos.associatedVariableName }],\r\n            });\r\n\r\n            state._emitUniformFromString(\"vClipPlane\", \"vec4\");\r\n            state._emitUniformFromString(\"vClipPlane2\", \"vec4\");\r\n            state._emitUniformFromString(\"vClipPlane3\", \"vec4\");\r\n            state._emitUniformFromString(\"vClipPlane4\", \"vec4\");\r\n            state._emitUniformFromString(\"vClipPlane5\", \"vec4\");\r\n            state._emitUniformFromString(\"vClipPlane6\", \"vec4\");\r\n\r\n            return;\r\n        }\r\n\r\n        // Fragment\r\n        state.sharedData.bindableBlocks.push(this);\r\n        state.sharedData.blocksWithDefines.push(this);\r\n\r\n        state._emitFunctionFromInclude(\"clipPlaneFragmentDeclaration\", comments);\r\n        state.compilationString += state._emitCodeFromInclude(\"clipPlaneFragment\", comments);\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ClipPlanesBlock\", ClipPlanesBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}