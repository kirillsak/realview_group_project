{"ast":null,"code":"import { Scene } from \"../scene.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { DepthPeelingRenderer } from \"./depthPeelingRenderer.js\";\nObject.defineProperty(Scene.prototype, \"depthPeelingRenderer\", {\n  get: function () {\n    if (!this._depthPeelingRenderer) {\n      let component = this._getComponent(SceneComponentConstants.NAME_DEPTHPEELINGRENDERER);\n      if (!component) {\n        component = new DepthPeelingSceneComponent(this);\n        this._addComponent(component);\n      }\n    }\n    return this._depthPeelingRenderer;\n  },\n  set: function (value) {\n    this._depthPeelingRenderer = value;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Scene.prototype, \"useOrderIndependentTransparency\", {\n  get: function () {\n    return this._useOrderIndependentTransparency;\n  },\n  set: function (value) {\n    var _a;\n    if (this._useOrderIndependentTransparency === value) {\n      return;\n    }\n    this._useOrderIndependentTransparency = value;\n    this.markAllMaterialsAsDirty(63);\n    (_a = this.prePassRenderer) === null || _a === void 0 ? void 0 : _a.markAsDirty();\n  },\n  enumerable: true,\n  configurable: true\n});\n/**\n * Scene component to render order independent transparency with depth peeling\n */\nexport class DepthPeelingSceneComponent {\n  /**\n   * Creates a new instance of the component for the given scene\n   * @param scene Defines the scene to register the component in\n   */\n  constructor(scene) {\n    /**\n     * The component name helpful to identify the component in the list of scene components.\n     */\n    this.name = SceneComponentConstants.NAME_DEPTHPEELINGRENDERER;\n    this.scene = scene;\n    scene.depthPeelingRenderer = new DepthPeelingRenderer(scene);\n  }\n  /**\n   * Registers the component in a given scene\n   */\n  register() {}\n  /**\n   * Rebuilds the elements related to this component in case of\n   * context lost for instance.\n   */\n  rebuild() {}\n  /**\n   * Disposes the component and the associated resources.\n   */\n  dispose() {\n    var _a;\n    (_a = this.scene.depthPeelingRenderer) === null || _a === void 0 ? void 0 : _a.dispose();\n    this.scene.depthPeelingRenderer = null;\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,KAAK,QAAQ,aAAW;AAEjC,SAASC,uBAAuB,QAAQ,sBAAoB;AAE5D,SAASC,oBAAoB,QAAQ,2BAAyB;AAoB9DC,MAAM,CAACC,cAAc,CAACJ,KAAK,CAACK,SAAS,EAAE,sBAAsB,EAAE;EAC3DC,GAAG,EAAE;IACD,IAAI,CAAC,IAAI,CAACC,qBAAqB,EAAE;MAC7B,IAAIC,SAAS,GAAG,IAAI,CAACC,aAAa,CAACR,uBAAuB,CAACS,yBAAyB,CAA+B;MACnH,IAAI,CAACF,SAAS,EAAE;QACZA,SAAS,GAAG,IAAIG,0BAA0B,CAAC,IAAI,CAAC;QAChD,IAAI,CAACC,aAAa,CAACJ,SAAS,CAAC;;;IAIrC,OAAO,IAAI,CAACD,qBAAqB;EACrC,CAAC;EACDM,GAAG,EAAE,UAAuBC,KAA2B;IACnD,IAAI,CAACP,qBAAqB,GAAGO,KAAK;EACtC,CAAC;EACDC,UAAU,EAAE,IAAI;EAChBC,YAAY,EAAE;CACjB,CAAC;AAEFb,MAAM,CAACC,cAAc,CAACJ,KAAK,CAACK,SAAS,EAAE,iCAAiC,EAAE;EACtEC,GAAG,EAAE;IACD,OAAO,IAAI,CAACW,gCAAgC;EAChD,CAAC;EACDJ,GAAG,EAAE,UAAuBC,KAAc;;IACtC,IAAI,IAAI,CAACG,gCAAgC,KAAKH,KAAK,EAAE;MACjD;;IAEJ,IAAI,CAACG,gCAAgC,GAAGH,KAAK;IAC7C,IAAI,CAACI,uBAAuB,CAAC;IAC7B,UAAI,CAACC,eAAe,0CAAEC,WAAW,EAAE;EACvC,CAAC;EACDL,UAAU,EAAE,IAAI;EAChBC,YAAY,EAAE;CACjB,CAAC;AAEF;;;AAGA,OAAM,MAAOL,0BAA0B;EAWnC;;;;EAIAU,YAAYC,KAAY;IAdxB;;;IAGgB,SAAI,GAAGrB,uBAAuB,CAACS,yBAAyB;IAYpE,IAAI,CAACY,KAAK,GAAGA,KAAK;IAElBA,KAAK,CAACC,oBAAoB,GAAG,IAAIrB,oBAAoB,CAACoB,KAAK,CAAC;EAChE;EAEA;;;EAGOE,QAAQ,IAAU;EAEzB;;;;EAIOC,OAAO,IAAU;EAExB;;;EAGOC,OAAO;;IACV,UAAI,CAACJ,KAAK,CAACC,oBAAoB,0CAAEG,OAAO,EAAE;IAC1C,IAAI,CAACJ,KAAK,CAACC,oBAAoB,GAAG,IAAI;EAC1C","names":["Scene","SceneComponentConstants","DepthPeelingRenderer","Object","defineProperty","prototype","get","_depthPeelingRenderer","component","_getComponent","NAME_DEPTHPEELINGRENDERER","DepthPeelingSceneComponent","_addComponent","set","value","enumerable","configurable","_useOrderIndependentTransparency","markAllMaterialsAsDirty","prePassRenderer","markAsDirty","constructor","scene","depthPeelingRenderer","register","rebuild","dispose"],"sourceRoot":"","sources":["../../../../lts/core/generated/Rendering/depthPeelingSceneComponent.ts"],"sourcesContent":["import { Constants } from \"../Engines/constants\";\r\nimport { Scene } from \"../scene\";\r\nimport type { ISceneComponent } from \"../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport type { Nullable } from \"../types\";\r\nimport { DepthPeelingRenderer } from \"./depthPeelingRenderer\";\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /**\r\n         * The depth peeling renderer\r\n         */\r\n        depthPeelingRenderer: Nullable<DepthPeelingRenderer>;\r\n        /** @internal (Backing field) */\r\n        _depthPeelingRenderer: Nullable<DepthPeelingRenderer>;\r\n\r\n        /**\r\n         * Flag to indicate if we want to use order independent transparency, despite the performance hit\r\n         */\r\n        useOrderIndependentTransparency: boolean;\r\n        /** @internal */\r\n        _useOrderIndependentTransparency: boolean;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Scene.prototype, \"depthPeelingRenderer\", {\r\n    get: function (this: Scene) {\r\n        if (!this._depthPeelingRenderer) {\r\n            let component = this._getComponent(SceneComponentConstants.NAME_DEPTHPEELINGRENDERER) as DepthPeelingSceneComponent;\r\n            if (!component) {\r\n                component = new DepthPeelingSceneComponent(this);\r\n                this._addComponent(component);\r\n            }\r\n        }\r\n\r\n        return this._depthPeelingRenderer;\r\n    },\r\n    set: function (this: Scene, value: DepthPeelingRenderer) {\r\n        this._depthPeelingRenderer = value;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nObject.defineProperty(Scene.prototype, \"useOrderIndependentTransparency\", {\r\n    get: function (this: Scene) {\r\n        return this._useOrderIndependentTransparency;\r\n    },\r\n    set: function (this: Scene, value: boolean) {\r\n        if (this._useOrderIndependentTransparency === value) {\r\n            return;\r\n        }\r\n        this._useOrderIndependentTransparency = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_AllDirtyFlag);\r\n        this.prePassRenderer?.markAsDirty();\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\n/**\r\n * Scene component to render order independent transparency with depth peeling\r\n */\r\nexport class DepthPeelingSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_DEPTHPEELINGRENDERER;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n\r\n        scene.depthPeelingRenderer = new DepthPeelingRenderer(scene);\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {}\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {}\r\n\r\n    /**\r\n     * Disposes the component and the associated resources.\r\n     */\r\n    public dispose(): void {\r\n        this.scene.depthPeelingRenderer?.dispose();\r\n        this.scene.depthPeelingRenderer = null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}