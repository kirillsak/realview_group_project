{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * Manages the defines for the Material\n */\nexport class MaterialDefines {\n  /**\n   * Creates a new instance\n   * @param externalProperties list of external properties to inject into the object\n   */\n  constructor(externalProperties) {\n    /** @internal */\n    this._keys = [];\n    this._isDirty = true;\n    /** @internal */\n    this._areLightsDirty = true;\n    /** @internal */\n    this._areLightsDisposed = false;\n    /** @internal */\n    this._areAttributesDirty = true;\n    /** @internal */\n    this._areTexturesDirty = true;\n    /** @internal */\n    this._areFresnelDirty = true;\n    /** @internal */\n    this._areMiscDirty = true;\n    /** @internal */\n    this._arePrePassDirty = true;\n    /** @internal */\n    this._areImageProcessingDirty = true;\n    /** @internal */\n    this._normals = false;\n    /** @internal */\n    this._uvs = false;\n    /** @internal */\n    this._needNormals = false;\n    /** @internal */\n    this._needUVs = false;\n    this._externalProperties = externalProperties;\n    // Initialize External Properties\n    if (externalProperties) {\n      for (const prop in externalProperties) {\n        if (Object.prototype.hasOwnProperty.call(externalProperties, prop)) {\n          this._setDefaultValue(prop);\n        }\n      }\n    }\n  }\n  /**\n   * Specifies if the material needs to be re-calculated\n   */\n  get isDirty() {\n    return this._isDirty;\n  }\n  /**\n   * Marks the material to indicate that it has been re-calculated\n   */\n  markAsProcessed() {\n    this._isDirty = false;\n    this._areAttributesDirty = false;\n    this._areTexturesDirty = false;\n    this._areFresnelDirty = false;\n    this._areLightsDirty = false;\n    this._areLightsDisposed = false;\n    this._areMiscDirty = false;\n    this._arePrePassDirty = false;\n    this._areImageProcessingDirty = false;\n  }\n  /**\n   * Marks the material to indicate that it needs to be re-calculated\n   */\n  markAsUnprocessed() {\n    this._isDirty = true;\n  }\n  /**\n   * Marks the material to indicate all of its defines need to be re-calculated\n   */\n  markAllAsDirty() {\n    this._areTexturesDirty = true;\n    this._areAttributesDirty = true;\n    this._areLightsDirty = true;\n    this._areFresnelDirty = true;\n    this._areMiscDirty = true;\n    this._areImageProcessingDirty = true;\n    this._isDirty = true;\n  }\n  /**\n   * Marks the material to indicate that image processing needs to be re-calculated\n   */\n  markAsImageProcessingDirty() {\n    this._areImageProcessingDirty = true;\n    this._isDirty = true;\n  }\n  /**\n   * Marks the material to indicate the lights need to be re-calculated\n   * @param disposed Defines whether the light is dirty due to dispose or not\n   */\n  markAsLightDirty(disposed = false) {\n    this._areLightsDirty = true;\n    this._areLightsDisposed = this._areLightsDisposed || disposed;\n    this._isDirty = true;\n  }\n  /**\n   * Marks the attribute state as changed\n   */\n  markAsAttributesDirty() {\n    this._areAttributesDirty = true;\n    this._isDirty = true;\n  }\n  /**\n   * Marks the texture state as changed\n   */\n  markAsTexturesDirty() {\n    this._areTexturesDirty = true;\n    this._isDirty = true;\n  }\n  /**\n   * Marks the fresnel state as changed\n   */\n  markAsFresnelDirty() {\n    this._areFresnelDirty = true;\n    this._isDirty = true;\n  }\n  /**\n   * Marks the misc state as changed\n   */\n  markAsMiscDirty() {\n    this._areMiscDirty = true;\n    this._isDirty = true;\n  }\n  /**\n   * Marks the prepass state as changed\n   */\n  markAsPrePassDirty() {\n    this._arePrePassDirty = true;\n    this._isDirty = true;\n  }\n  /**\n   * Rebuilds the material defines\n   */\n  rebuild() {\n    this._keys.length = 0;\n    for (const key of Object.keys(this)) {\n      if (key[0] === \"_\") {\n        continue;\n      }\n      this._keys.push(key);\n    }\n    if (this._externalProperties) {\n      for (const name in this._externalProperties) {\n        if (this._keys.indexOf(name) === -1) {\n          this._keys.push(name);\n        }\n      }\n    }\n  }\n  /**\n   * Specifies if two material defines are equal\n   * @param other - A material define instance to compare to\n   * @returns - Boolean indicating if the material defines are equal (true) or not (false)\n   */\n  isEqual(other) {\n    if (this._keys.length !== other._keys.length) {\n      return false;\n    }\n    for (let index = 0; index < this._keys.length; index++) {\n      const prop = this._keys[index];\n      if (this[prop] !== other[prop]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Clones this instance's defines to another instance\n   * @param other - material defines to clone values to\n   */\n  cloneTo(other) {\n    if (this._keys.length !== other._keys.length) {\n      other._keys = this._keys.slice(0);\n    }\n    for (let index = 0; index < this._keys.length; index++) {\n      const prop = this._keys[index];\n      other[prop] = this[prop];\n    }\n  }\n  /**\n   * Resets the material define values\n   */\n  reset() {\n    this._keys.forEach(prop => this._setDefaultValue(prop));\n  }\n  _setDefaultValue(prop) {\n    var _a, _b, _c, _d, _e;\n    const type = (_c = (_b = (_a = this._externalProperties) === null || _a === void 0 ? void 0 : _a[prop]) === null || _b === void 0 ? void 0 : _b.type) !== null && _c !== void 0 ? _c : typeof this[prop];\n    const defValue = (_e = (_d = this._externalProperties) === null || _d === void 0 ? void 0 : _d[prop]) === null || _e === void 0 ? void 0 : _e.default;\n    switch (type) {\n      case \"number\":\n        this[prop] = defValue !== null && defValue !== void 0 ? defValue : 0;\n        break;\n      case \"string\":\n        this[prop] = defValue !== null && defValue !== void 0 ? defValue : \"\";\n        break;\n      default:\n        this[prop] = defValue !== null && defValue !== void 0 ? defValue : false;\n        break;\n    }\n  }\n  /**\n   * Converts the material define values to a string\n   * @returns - String of material define information\n   */\n  toString() {\n    let result = \"\";\n    for (let index = 0; index < this._keys.length; index++) {\n      const prop = this._keys[index];\n      const value = this[prop];\n      const type = typeof value;\n      switch (type) {\n        case \"number\":\n        case \"string\":\n          result += \"#define \" + prop + \" \" + value + \"\\n\";\n          break;\n        default:\n          if (value) {\n            result += \"#define \" + prop + \"\\n\";\n          }\n          break;\n      }\n    }\n    return result;\n  }\n}","map":{"version":3,"mappings":"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","names":["MaterialDefines","constructor","externalProperties","_externalProperties","prop","Object","prototype","hasOwnProperty","call","_setDefaultValue","isDirty","_isDirty","markAsProcessed","_areAttributesDirty","_areTexturesDirty","_areFresnelDirty","_areLightsDirty","_areLightsDisposed","_areMiscDirty","_arePrePassDirty","_areImageProcessingDirty","markAsUnprocessed","markAllAsDirty","markAsImageProcessingDirty","markAsLightDirty","disposed","markAsAttributesDirty","markAsTexturesDirty","markAsFresnelDirty","markAsMiscDirty","markAsPrePassDirty","rebuild","_keys","length","key","keys","push","name","indexOf","isEqual","other","index","cloneTo","slice","reset","forEach","type","defValue","default","toString","result","value"],"sourceRoot":"","sources":["../../../../lts/core/generated/Materials/materialDefines.ts"],"sourcesContent":["/**\r\n * Manages the defines for the Material\r\n */\r\nexport class MaterialDefines {\r\n    /** @internal */\r\n    protected _keys: string[] = [];\r\n    private _isDirty = true;\r\n    /** @internal */\r\n    public _renderId: number;\r\n\r\n    /** @internal */\r\n    public _areLightsDirty = true;\r\n    /** @internal */\r\n    public _areLightsDisposed = false;\r\n    /** @internal */\r\n    public _areAttributesDirty = true;\r\n    /** @internal */\r\n    public _areTexturesDirty = true;\r\n    /** @internal */\r\n    public _areFresnelDirty = true;\r\n    /** @internal */\r\n    public _areMiscDirty = true;\r\n    /** @internal */\r\n    public _arePrePassDirty = true;\r\n    /** @internal */\r\n    public _areImageProcessingDirty = true;\r\n\r\n    /** @internal */\r\n    public _normals = false;\r\n    /** @internal */\r\n    public _uvs = false;\r\n\r\n    /** @internal */\r\n    public _needNormals = false;\r\n    /** @internal */\r\n    public _needUVs = false;\r\n\r\n    protected _externalProperties?: { [name: string]: { type: string; default: any } };\r\n\r\n    [id: string]: any;\r\n\r\n    /**\r\n     * Creates a new instance\r\n     * @param externalProperties list of external properties to inject into the object\r\n     */\r\n    constructor(externalProperties?: { [name: string]: { type: string; default: any } }) {\r\n        this._externalProperties = externalProperties;\r\n\r\n        // Initialize External Properties\r\n        if (externalProperties) {\r\n            for (const prop in externalProperties) {\r\n                if (Object.prototype.hasOwnProperty.call(externalProperties, prop)) {\r\n                    this._setDefaultValue(prop);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material needs to be re-calculated\r\n     */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that it has been re-calculated\r\n     */\r\n    public markAsProcessed() {\r\n        this._isDirty = false;\r\n        this._areAttributesDirty = false;\r\n        this._areTexturesDirty = false;\r\n        this._areFresnelDirty = false;\r\n        this._areLightsDirty = false;\r\n        this._areLightsDisposed = false;\r\n        this._areMiscDirty = false;\r\n        this._arePrePassDirty = false;\r\n        this._areImageProcessingDirty = false;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that it needs to be re-calculated\r\n     */\r\n    public markAsUnprocessed() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate all of its defines need to be re-calculated\r\n     */\r\n    public markAllAsDirty() {\r\n        this._areTexturesDirty = true;\r\n        this._areAttributesDirty = true;\r\n        this._areLightsDirty = true;\r\n        this._areFresnelDirty = true;\r\n        this._areMiscDirty = true;\r\n        this._areImageProcessingDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that image processing needs to be re-calculated\r\n     */\r\n    public markAsImageProcessingDirty() {\r\n        this._areImageProcessingDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate the lights need to be re-calculated\r\n     * @param disposed Defines whether the light is dirty due to dispose or not\r\n     */\r\n    public markAsLightDirty(disposed = false) {\r\n        this._areLightsDirty = true;\r\n        this._areLightsDisposed = this._areLightsDisposed || disposed;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the attribute state as changed\r\n     */\r\n    public markAsAttributesDirty() {\r\n        this._areAttributesDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the texture state as changed\r\n     */\r\n    public markAsTexturesDirty() {\r\n        this._areTexturesDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the fresnel state as changed\r\n     */\r\n    public markAsFresnelDirty() {\r\n        this._areFresnelDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the misc state as changed\r\n     */\r\n    public markAsMiscDirty() {\r\n        this._areMiscDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the prepass state as changed\r\n     */\r\n    public markAsPrePassDirty() {\r\n        this._arePrePassDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the material defines\r\n     */\r\n    public rebuild() {\r\n        this._keys.length = 0;\r\n\r\n        for (const key of Object.keys(this)) {\r\n            if (key[0] === \"_\") {\r\n                continue;\r\n            }\r\n\r\n            this._keys.push(key);\r\n        }\r\n\r\n        if (this._externalProperties) {\r\n            for (const name in this._externalProperties) {\r\n                if (this._keys.indexOf(name) === -1) {\r\n                    this._keys.push(name);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies if two material defines are equal\r\n     * @param other - A material define instance to compare to\r\n     * @returns - Boolean indicating if the material defines are equal (true) or not (false)\r\n     */\r\n    public isEqual(other: MaterialDefines): boolean {\r\n        if (this._keys.length !== other._keys.length) {\r\n            return false;\r\n        }\r\n\r\n        for (let index = 0; index < this._keys.length; index++) {\r\n            const prop = this._keys[index];\r\n\r\n            if ((<any>this)[prop] !== (<any>other)[prop]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Clones this instance's defines to another instance\r\n     * @param other - material defines to clone values to\r\n     */\r\n    public cloneTo(other: MaterialDefines): void {\r\n        if (this._keys.length !== other._keys.length) {\r\n            other._keys = this._keys.slice(0);\r\n        }\r\n\r\n        for (let index = 0; index < this._keys.length; index++) {\r\n            const prop = this._keys[index];\r\n\r\n            (<any>other)[prop] = (<any>this)[prop];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the material define values\r\n     */\r\n    public reset(): void {\r\n        this._keys.forEach((prop) => this._setDefaultValue(prop));\r\n    }\r\n\r\n    private _setDefaultValue(prop: string): void {\r\n        const type = this._externalProperties?.[prop]?.type ?? typeof (<any>this)[prop];\r\n        const defValue = this._externalProperties?.[prop]?.default;\r\n\r\n        switch (type) {\r\n            case \"number\":\r\n                (<any>this)[prop] = defValue ?? 0;\r\n                break;\r\n            case \"string\":\r\n                (<any>this)[prop] = defValue ?? \"\";\r\n                break;\r\n            default:\r\n                (<any>this)[prop] = defValue ?? false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the material define values to a string\r\n     * @returns - String of material define information\r\n     */\r\n    public toString(): string {\r\n        let result = \"\";\r\n        for (let index = 0; index < this._keys.length; index++) {\r\n            const prop = this._keys[index];\r\n            const value = (<any>this)[prop];\r\n            const type = typeof value;\r\n\r\n            switch (type) {\r\n                case \"number\":\r\n                case \"string\":\r\n                    result += \"#define \" + prop + \" \" + value + \"\\n\";\r\n                    break;\r\n                default:\r\n                    if (value) {\r\n                        result += \"#define \" + prop + \"\\n\";\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}