{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/refraction.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper, serialize } from \"../Misc/decorators.js\";\n/**\n * Post process which applies a refraction texture\n * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#refraction\n */\nexport class RefractionPostProcess extends PostProcess {\n  /**\n   * Initializes the RefractionPostProcess\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#refraction\n   * @param name The name of the effect.\n   * @param refractionTextureUrl Url of the refraction texture to use\n   * @param color the base color of the refraction (used to taint the rendering)\n   * @param depth simulated refraction depth\n   * @param colorLevel the coefficient of the base color (0 to remove base color tainting)\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   */\n  constructor(name, refractionTextureUrl, color, depth, colorLevel, options, camera, samplingMode, engine, reusable) {\n    super(name, \"refraction\", [\"baseColor\", \"depth\", \"colorLevel\"], [\"refractionSampler\"], options, camera, samplingMode, engine, reusable);\n    this._ownRefractionTexture = true;\n    this.color = color;\n    this.depth = depth;\n    this.colorLevel = colorLevel;\n    this.refractionTextureUrl = refractionTextureUrl;\n    this.onActivateObservable.add(cam => {\n      this._refTexture = this._refTexture || new Texture(refractionTextureUrl, cam.getScene());\n    });\n    this.onApplyObservable.add(effect => {\n      effect.setColor3(\"baseColor\", this.color);\n      effect.setFloat(\"depth\", this.depth);\n      effect.setFloat(\"colorLevel\", this.colorLevel);\n      effect.setTexture(\"refractionSampler\", this._refTexture);\n    });\n  }\n  /**\n   * Gets or sets the refraction texture\n   * Please note that you are responsible for disposing the texture if you set it manually\n   */\n  get refractionTexture() {\n    return this._refTexture;\n  }\n  set refractionTexture(value) {\n    if (this._refTexture && this._ownRefractionTexture) {\n      this._refTexture.dispose();\n    }\n    this._refTexture = value;\n    this._ownRefractionTexture = false;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"RefractionPostProcess\" string\n   */\n  getClassName() {\n    return \"RefractionPostProcess\";\n  }\n  // Methods\n  /**\n   * Disposes of the post process\n   * @param camera Camera to dispose post process on\n   */\n  dispose(camera) {\n    if (this._refTexture && this._ownRefractionTexture) {\n      this._refTexture.dispose();\n      this._refTexture = null;\n    }\n    super.dispose(camera);\n  }\n  /**\n   * @internal\n   */\n  static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(() => {\n      return new RefractionPostProcess(parsedPostProcess.name, parsedPostProcess.refractionTextureUrl, parsedPostProcess.color, parsedPostProcess.depth, parsedPostProcess.colorLevel, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  }\n}\n__decorate([serialize()], RefractionPostProcess.prototype, \"color\", void 0);\n__decorate([serialize()], RefractionPostProcess.prototype, \"depth\", void 0);\n__decorate([serialize()], RefractionPostProcess.prototype, \"colorLevel\", void 0);\n__decorate([serialize()], RefractionPostProcess.prototype, \"refractionTextureUrl\", void 0);\nRegisterClass(\"BABYLON.RefractionPostProcess\", RefractionPostProcess);","map":{"version":3,"mappings":"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","names":["Texture","PostProcess","RegisterClass","SerializationHelper","serialize","RefractionPostProcess","constructor","name","refractionTextureUrl","color","depth","colorLevel","options","camera","samplingMode","engine","reusable","onActivateObservable","add","cam","_refTexture","getScene","onApplyObservable","effect","setColor3","setFloat","setTexture","refractionTexture","value","_ownRefractionTexture","dispose","getClassName","_Parse","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","getEngine","__decorate"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/refractionPostProcess.ts"],"sourcesContent":["import type { Color3 } from \"../Maths/math.color\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\n\r\nimport \"../Shaders/refraction.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { SerializationHelper, serialize } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * Post process which applies a refraction texture\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#refraction\r\n */\r\nexport class RefractionPostProcess extends PostProcess {\r\n    private _refTexture: Texture;\r\n    private _ownRefractionTexture = true;\r\n\r\n    /** the base color of the refraction (used to taint the rendering) */\r\n    @serialize()\r\n    public color: Color3;\r\n\r\n    /** simulated refraction depth */\r\n    @serialize()\r\n    public depth: number;\r\n\r\n    /** the coefficient of the base color (0 to remove base color tainting) */\r\n    @serialize()\r\n    public colorLevel: number;\r\n\r\n    /** Gets the url used to load the refraction texture */\r\n    @serialize()\r\n    public refractionTextureUrl: string;\r\n\r\n    /**\r\n     * Gets or sets the refraction texture\r\n     * Please note that you are responsible for disposing the texture if you set it manually\r\n     */\r\n    public get refractionTexture(): Texture {\r\n        return this._refTexture;\r\n    }\r\n\r\n    public set refractionTexture(value: Texture) {\r\n        if (this._refTexture && this._ownRefractionTexture) {\r\n            this._refTexture.dispose();\r\n        }\r\n\r\n        this._refTexture = value;\r\n        this._ownRefractionTexture = false;\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"RefractionPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"RefractionPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Initializes the RefractionPostProcess\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#refraction\r\n     * @param name The name of the effect.\r\n     * @param refractionTextureUrl Url of the refraction texture to use\r\n     * @param color the base color of the refraction (used to taint the rendering)\r\n     * @param depth simulated refraction depth\r\n     * @param colorLevel the coefficient of the base color (0 to remove base color tainting)\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        refractionTextureUrl: string,\r\n        color: Color3,\r\n        depth: number,\r\n        colorLevel: number,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean\r\n    ) {\r\n        super(name, \"refraction\", [\"baseColor\", \"depth\", \"colorLevel\"], [\"refractionSampler\"], options, camera, samplingMode, engine, reusable);\r\n\r\n        this.color = color;\r\n        this.depth = depth;\r\n        this.colorLevel = colorLevel;\r\n        this.refractionTextureUrl = refractionTextureUrl;\r\n\r\n        this.onActivateObservable.add((cam: Camera) => {\r\n            this._refTexture = this._refTexture || new Texture(refractionTextureUrl, cam.getScene());\r\n        });\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setColor3(\"baseColor\", this.color);\r\n            effect.setFloat(\"depth\", this.depth);\r\n            effect.setFloat(\"colorLevel\", this.colorLevel);\r\n\r\n            effect.setTexture(\"refractionSampler\", this._refTexture);\r\n        });\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Disposes of the post process\r\n     * @param camera Camera to dispose post process on\r\n     */\r\n    public dispose(camera: Camera): void {\r\n        if (this._refTexture && this._ownRefractionTexture) {\r\n            this._refTexture.dispose();\r\n            (<any>this._refTexture) = null;\r\n        }\r\n\r\n        super.dispose(camera);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new RefractionPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.refractionTextureUrl,\r\n                    parsedPostProcess.color,\r\n                    parsedPostProcess.depth,\r\n                    parsedPostProcess.colorLevel,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.RefractionPostProcess\", RefractionPostProcess);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}