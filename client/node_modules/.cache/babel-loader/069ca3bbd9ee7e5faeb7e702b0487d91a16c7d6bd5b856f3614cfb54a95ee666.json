{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { ToGammaSpace } from \"../Maths/math.constants.js\";\nimport \"../Shaders/extractHighlights.fragment.js\";\nimport { serialize } from \"../Misc/decorators.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * The extract highlights post process sets all pixels to black except pixels above the specified luminance threshold. Used as the first step for a bloom effect.\n */\nexport class ExtractHighlightsPostProcess extends PostProcess {\n  constructor(name, options, camera, samplingMode, engine, reusable, textureType = 0, blockCompilation = false) {\n    super(name, \"extractHighlights\", [\"threshold\", \"exposure\"], null, options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\n    /**\n     * The luminance threshold, pixels below this value will be set to black.\n     */\n    this.threshold = 0.9;\n    /** @internal */\n    this._exposure = 1;\n    /**\n     * Post process which has the input texture to be used when performing highlight extraction\n     * @internal\n     */\n    this._inputPostProcess = null;\n    this.onApplyObservable.add(effect => {\n      this.externalTextureSamplerBinding = !!this._inputPostProcess;\n      if (this._inputPostProcess) {\n        effect.setTextureFromPostProcess(\"textureSampler\", this._inputPostProcess);\n      }\n      effect.setFloat(\"threshold\", Math.pow(this.threshold, ToGammaSpace));\n      effect.setFloat(\"exposure\", this._exposure);\n    });\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"ExtractHighlightsPostProcess\" string\n   */\n  getClassName() {\n    return \"ExtractHighlightsPostProcess\";\n  }\n}\n__decorate([serialize()], ExtractHighlightsPostProcess.prototype, \"threshold\", void 0);\nRegisterClass(\"BABYLON.ExtractHighlightsPostProcess\", ExtractHighlightsPostProcess);","map":{"version":3,"mappings":";AAIA,SAASA,WAAW,QAAQ,kBAAgB;AAE5C,SAASC,YAAY,QAAQ,4BAA0B;AAGvD,OAAO,0CAAwC;AAC/C,SAASC,SAAS,QAAQ,uBAAqB;AAC/C,SAASC,aAAa,QAAQ,sBAAoB;AAElD;;;AAGA,OAAM,MAAOC,4BAA6B,SAAQJ,WAAW;EAwBzDK,YACIC,IAAY,EACZC,OAAoC,EACpCC,MAAwB,EACxBC,YAAqB,EACrBC,MAAe,EACfC,QAAkB,EAClBC,cAAsB,mBAAU;IAGhC,KAAK,CAACN,IAAI,EAAE,mBAAmB,EAAE,CAAC,WAAW,EAAE,UAAU,CAAC,EAAE,IAAI,EAAEC,OAAO,EAAEC,MAAM,EAAEC,YAAY,EAAEC,MAAM,EAAEC,QAAQ,EAAE,IAAI,EAAEC,WAAW,EAAEC,SAAS,EAAE,IAAI,EAAEC,gBAAgB,CAAC;IAjC5K;;;IAIO,cAAS,GAAG,GAAG;IAEtB;IACO,cAAS,GAAG,CAAC;IAEpB;;;;IAIO,sBAAiB,GAA0B,IAAI;IAqBlD,IAAI,CAACC,iBAAiB,CAACC,GAAG,CAAEC,MAAc,IAAI;MAC1C,IAAI,CAACC,6BAA6B,GAAG,CAAC,CAAC,IAAI,CAACC,iBAAiB;MAC7D,IAAI,IAAI,CAACA,iBAAiB,EAAE;QACxBF,MAAM,CAACG,yBAAyB,CAAC,gBAAgB,EAAE,IAAI,CAACD,iBAAiB,CAAC;;MAE9EF,MAAM,CAACI,QAAQ,CAAC,WAAW,EAAEC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACC,SAAS,EAAEvB,YAAY,CAAC,CAAC;MACpEgB,MAAM,CAACI,QAAQ,CAAC,UAAU,EAAE,IAAI,CAACI,SAAS,CAAC;IAC/C,CAAC,CAAC;EACN;EA3BA;;;;EAIOC,YAAY;IACf,OAAO,8BAA8B;EACzC;;AAjBAC,YADCzB,SAAS,EAAE,+DACW;AAyC3BC,aAAa,CAAC,sCAAsC,EAAEC,4BAA4B,CAAC","names":["PostProcess","ToGammaSpace","serialize","RegisterClass","ExtractHighlightsPostProcess","constructor","name","options","camera","samplingMode","engine","reusable","textureType","undefined","blockCompilation","onApplyObservable","add","effect","externalTextureSamplerBinding","_inputPostProcess","setTextureFromPostProcess","setFloat","Math","pow","threshold","_exposure","getClassName","__decorate"],"sourceRoot":"","sources":["../../../../lts/core/generated/PostProcesses/extractHighlightsPostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { ToGammaSpace } from \"../Maths/math.constants\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/extractHighlights.fragment\";\r\nimport { serialize } from \"../Misc/decorators\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\n/**\r\n * The extract highlights post process sets all pixels to black except pixels above the specified luminance threshold. Used as the first step for a bloom effect.\r\n */\r\nexport class ExtractHighlightsPostProcess extends PostProcess {\r\n    /**\r\n     * The luminance threshold, pixels below this value will be set to black.\r\n     */\r\n    @serialize()\r\n    public threshold = 0.9;\r\n\r\n    /** @internal */\r\n    public _exposure = 1;\r\n\r\n    /**\r\n     * Post process which has the input texture to be used when performing highlight extraction\r\n     * @internal\r\n     */\r\n    public _inputPostProcess: Nullable<PostProcess> = null;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"ExtractHighlightsPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"ExtractHighlightsPostProcess\";\r\n    }\r\n\r\n    constructor(\r\n        name: string,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(name, \"extractHighlights\", [\"threshold\", \"exposure\"], null, options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            this.externalTextureSamplerBinding = !!this._inputPostProcess;\r\n            if (this._inputPostProcess) {\r\n                effect.setTextureFromPostProcess(\"textureSampler\", this._inputPostProcess);\r\n            }\r\n            effect.setFloat(\"threshold\", Math.pow(this.threshold, ToGammaSpace));\r\n            effect.setFloat(\"exposure\", this._exposure);\r\n        });\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ExtractHighlightsPostProcess\", ExtractHighlightsPostProcess);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}