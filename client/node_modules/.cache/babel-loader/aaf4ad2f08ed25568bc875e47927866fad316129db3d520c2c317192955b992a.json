{"ast":null,"code":"import { TmpVectors, Vector3 } from \"../Maths/math.vector.js\";\nimport { SubMesh } from \"./subMesh.js\";\n/**\n * @internal\n */\nSubMesh.prototype._projectOnTrianglesToRef = function (vector, positions, indices, step, checkStopper, ref) {\n  // Triangles test\n  const proj = TmpVectors.Vector3[0];\n  const tmp = TmpVectors.Vector3[1];\n  let distance = +Infinity;\n  for (let index = this.indexStart; index < this.indexStart + this.indexCount - (3 - step); index += step) {\n    const indexA = indices[index];\n    const indexB = indices[index + 1];\n    const indexC = indices[index + 2];\n    if (checkStopper && indexC === 0xffffffff) {\n      index += 2;\n      continue;\n    }\n    const p0 = positions[indexA];\n    const p1 = positions[indexB];\n    const p2 = positions[indexC];\n    // stay defensive and don't check against undefined positions.\n    if (!p0 || !p1 || !p2) {\n      continue;\n    }\n    const tmpDist = Vector3.ProjectOnTriangleToRef(vector, p0, p1, p2, tmp);\n    if (tmpDist < distance) {\n      proj.copyFrom(tmp);\n      distance = tmpDist;\n    }\n  }\n  ref.copyFrom(proj);\n  return distance;\n};\n/**\n * @internal\n */\nSubMesh.prototype._projectOnUnIndexedTrianglesToRef = function (vector, positions, indices, ref) {\n  // Triangles test\n  const proj = TmpVectors.Vector3[0];\n  const tmp = TmpVectors.Vector3[1];\n  let distance = +Infinity;\n  for (let index = this.verticesStart; index < this.verticesStart + this.verticesCount; index += 3) {\n    const p0 = positions[index];\n    const p1 = positions[index + 1];\n    const p2 = positions[index + 2];\n    const tmpDist = Vector3.ProjectOnTriangleToRef(vector, p0, p1, p2, tmp);\n    if (tmpDist < distance) {\n      proj.copyFrom(tmp);\n      distance = tmpDist;\n    }\n  }\n  ref.copyFrom(proj);\n  return distance;\n};\nSubMesh.prototype.projectToRef = function (vector, positions, indices, ref) {\n  const material = this.getMaterial();\n  if (!material) {\n    return -1;\n  }\n  let step = 3;\n  let checkStopper = false;\n  switch (material.fillMode) {\n    case 3:\n    case 5:\n    case 6:\n    case 8:\n      return -1;\n    case 7:\n      step = 1;\n      checkStopper = true;\n      break;\n    default:\n      break;\n  }\n  // LineMesh first as it's also a Mesh...\n  if (material.fillMode === 4) {\n    return -1;\n  } else {\n    // Check if mesh is unindexed\n    if (!indices.length && this._mesh._unIndexed) {\n      return this._projectOnUnIndexedTrianglesToRef(vector, positions, indices, ref);\n    }\n    return this._projectOnTrianglesToRef(vector, positions, indices, step, checkStopper, ref);\n  }\n};","map":{"version":3,"mappings":"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","names":["TmpVectors","Vector3","SubMesh","prototype","_projectOnTrianglesToRef","vector","positions","indices","step","checkStopper","ref","proj","tmp","distance","Infinity","index","indexStart","indexCount","indexA","indexB","indexC","p0","p1","p2","tmpDist","ProjectOnTriangleToRef","copyFrom","_projectOnUnIndexedTrianglesToRef","verticesStart","verticesCount","projectToRef","material","getMaterial","fillMode","length","_mesh","_unIndexed"],"sourceRoot":"","sources":["../../../../lts/core/generated/Meshes/subMesh.project.ts"],"sourcesContent":["import { Constants } from \"../Engines/constants\";\r\nimport { TmpVectors, Vector3 } from \"../Maths/math.vector\";\r\nimport type { IndicesArray } from \"../types\";\r\nimport { SubMesh } from \"./subMesh\";\r\n\r\ndeclare module \"./subMesh\" {\r\n    export interface SubMesh {\r\n        /** @internal */\r\n        _projectOnTrianglesToRef(vector: Vector3, positions: Vector3[], indices: IndicesArray, step: number, checkStopper: boolean, ref: Vector3): number;\r\n        /** @internal */\r\n        _projectOnUnIndexedTrianglesToRef(vector: Vector3, positions: Vector3[], indices: IndicesArray, ref: Vector3): number;\r\n        /**\r\n         * Projects a point on this submesh and stores the result in \"ref\"\r\n         *\r\n         * @param vector point to project\r\n         * @param positions defines mesh's positions array\r\n         * @param indices defines mesh's indices array\r\n         * @param ref vector that will store the result\r\n         * @returns distance from the point and the submesh, or -1 if the mesh rendering mode doesn't support projections\r\n         */\r\n        projectToRef(vector: Vector3, positions: Vector3[], indices: IndicesArray, ref: Vector3): number;\r\n    }\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nSubMesh.prototype._projectOnTrianglesToRef = function (vector: Vector3, positions: Vector3[], indices: IndicesArray, step: number, checkStopper: boolean, ref: Vector3): number {\r\n    // Triangles test\r\n    const proj = TmpVectors.Vector3[0];\r\n    const tmp = TmpVectors.Vector3[1];\r\n    let distance = +Infinity;\r\n\r\n    for (let index = this.indexStart; index < this.indexStart + this.indexCount - (3 - step); index += step) {\r\n        const indexA = indices[index];\r\n        const indexB = indices[index + 1];\r\n        const indexC = indices[index + 2];\r\n\r\n        if (checkStopper && indexC === 0xffffffff) {\r\n            index += 2;\r\n            continue;\r\n        }\r\n\r\n        const p0 = positions[indexA];\r\n        const p1 = positions[indexB];\r\n        const p2 = positions[indexC];\r\n\r\n        // stay defensive and don't check against undefined positions.\r\n        if (!p0 || !p1 || !p2) {\r\n            continue;\r\n        }\r\n\r\n        const tmpDist = Vector3.ProjectOnTriangleToRef(vector, p0, p1, p2, tmp);\r\n        if (tmpDist < distance) {\r\n            proj.copyFrom(tmp);\r\n            distance = tmpDist;\r\n        }\r\n    }\r\n\r\n    ref.copyFrom(proj);\r\n\r\n    return distance;\r\n};\r\n\r\n/**\r\n * @internal\r\n */\r\nSubMesh.prototype._projectOnUnIndexedTrianglesToRef = function (vector: Vector3, positions: Vector3[], indices: IndicesArray, ref: Vector3): number {\r\n    // Triangles test\r\n    const proj = TmpVectors.Vector3[0];\r\n    const tmp = TmpVectors.Vector3[1];\r\n    let distance = +Infinity;\r\n\r\n    for (let index = this.verticesStart; index < this.verticesStart + this.verticesCount; index += 3) {\r\n        const p0 = positions[index];\r\n        const p1 = positions[index + 1];\r\n        const p2 = positions[index + 2];\r\n\r\n        const tmpDist = Vector3.ProjectOnTriangleToRef(vector, p0, p1, p2, tmp);\r\n        if (tmpDist < distance) {\r\n            proj.copyFrom(tmp);\r\n            distance = tmpDist;\r\n        }\r\n    }\r\n\r\n    ref.copyFrom(proj);\r\n\r\n    return distance;\r\n};\r\n\r\nSubMesh.prototype.projectToRef = function (vector: Vector3, positions: Vector3[], indices: IndicesArray, ref: Vector3): number {\r\n    const material = this.getMaterial();\r\n    if (!material) {\r\n        return -1;\r\n    }\r\n    let step = 3;\r\n    let checkStopper = false;\r\n\r\n    switch (material.fillMode) {\r\n        case Constants.MATERIAL_PointListDrawMode:\r\n        case Constants.MATERIAL_LineLoopDrawMode:\r\n        case Constants.MATERIAL_LineStripDrawMode:\r\n        case Constants.MATERIAL_TriangleFanDrawMode:\r\n            return -1;\r\n        case Constants.MATERIAL_TriangleStripDrawMode:\r\n            step = 1;\r\n            checkStopper = true;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    // LineMesh first as it's also a Mesh...\r\n    if (material.fillMode === Constants.MATERIAL_LineListDrawMode) {\r\n        return -1;\r\n    } else {\r\n        // Check if mesh is unindexed\r\n        if (!indices.length && (this as any)._mesh._unIndexed) {\r\n            return this._projectOnUnIndexedTrianglesToRef(vector, positions, indices, ref);\r\n        }\r\n\r\n        return this._projectOnTrianglesToRef(vector, positions, indices, step, checkStopper, ref);\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}