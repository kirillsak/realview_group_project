{"ast":null,"code":"import { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { Vector2 } from \"../../../../Maths/math.vector.js\";\n/**\n * Block used to generate a twirl\n */\nexport class TwirlBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new TwirlBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Fragment);\n    this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Vector2);\n    this.registerInput(\"strength\", NodeMaterialBlockConnectionPointTypes.Float);\n    this.registerInput(\"center\", NodeMaterialBlockConnectionPointTypes.Vector2);\n    this.registerInput(\"offset\", NodeMaterialBlockConnectionPointTypes.Vector2);\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector2);\n    this.registerOutput(\"x\", NodeMaterialBlockConnectionPointTypes.Float);\n    this.registerOutput(\"y\", NodeMaterialBlockConnectionPointTypes.Float);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"TwirlBlock\";\n  }\n  /**\n   * Gets the input component\n   */\n  get input() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the strength component\n   */\n  get strength() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the center component\n   */\n  get center() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the offset component\n   */\n  get offset() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets the x output component\n   */\n  get x() {\n    return this._outputs[1];\n  }\n  /**\n   * Gets the y output component\n   */\n  get y() {\n    return this._outputs[2];\n  }\n  autoConfigure() {\n    if (!this.center.isConnected) {\n      const centerInput = new InputBlock(\"center\");\n      centerInput.value = new Vector2(0.5, 0.5);\n      centerInput.output.connectTo(this.center);\n    }\n    if (!this.strength.isConnected) {\n      const strengthInput = new InputBlock(\"strength\");\n      strengthInput.value = 1.0;\n      strengthInput.output.connectTo(this.strength);\n    }\n    if (!this.offset.isConnected) {\n      const offsetInput = new InputBlock(\"offset\");\n      offsetInput.value = new Vector2(0, 0);\n      offsetInput.output.connectTo(this.offset);\n    }\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const tempDelta = state._getFreeVariableName(\"delta\");\n    const tempAngle = state._getFreeVariableName(\"angle\");\n    const tempX = state._getFreeVariableName(\"x\");\n    const tempY = state._getFreeVariableName(\"y\");\n    const tempResult = state._getFreeVariableName(\"result\");\n    state.compilationString += `\n            vec2 ${tempDelta} = ${this.input.associatedVariableName} - ${this.center.associatedVariableName};\n            float ${tempAngle} = ${this.strength.associatedVariableName} * length(${tempDelta});\n            float ${tempX} = cos(${tempAngle}) * ${tempDelta}.x - sin(${tempAngle}) * ${tempDelta}.y;\n            float ${tempY} = sin(${tempAngle}) * ${tempDelta}.x + cos(${tempAngle}) * ${tempDelta}.y;\n            vec2 ${tempResult} = vec2(${tempX} + ${this.center.associatedVariableName}.x + ${this.offset.associatedVariableName}.x, ${tempY} + ${this.center.associatedVariableName}.y + ${this.offset.associatedVariableName}.y);\n        `;\n    if (this.output.hasEndpoints) {\n      state.compilationString += this._declareOutput(this.output, state) + ` = ${tempResult};\\r\\n`;\n    }\n    if (this.x.hasEndpoints) {\n      state.compilationString += this._declareOutput(this.x, state) + ` = ${tempResult}.x;\\r\\n`;\n    }\n    if (this.y.hasEndpoints) {\n      state.compilationString += this._declareOutput(this.y, state) + ` = ${tempResult}.y;\\r\\n`;\n    }\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.TwirlBlock\", TwirlBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","InputBlock","Vector2","TwirlBlock","constructor","name","Fragment","registerInput","Float","registerOutput","getClassName","input","_inputs","strength","center","offset","output","_outputs","x","y","autoConfigure","isConnected","centerInput","value","connectTo","strengthInput","offsetInput","_buildBlock","state","tempDelta","_getFreeVariableName","tempAngle","tempX","tempY","tempResult","compilationString","associatedVariableName","hasEndpoints","_declareOutput"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/Fragment/twirlBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport { Vector2 } from \"../../../../Maths/math.vector\";\r\n\r\n/**\r\n * Block used to generate a twirl\r\n */\r\nexport class TwirlBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new TwirlBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n        this.registerInput(\"strength\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerInput(\"center\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n        this.registerInput(\"offset\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n        this.registerOutput(\"x\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"y\", NodeMaterialBlockConnectionPointTypes.Float);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"TwirlBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the strength component\r\n     */\r\n    public get strength(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the center component\r\n     */\r\n    public get center(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the offset component\r\n     */\r\n    public get offset(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the x output component\r\n     */\r\n    public get x(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the y output component\r\n     */\r\n    public get y(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    public autoConfigure() {\r\n        if (!this.center.isConnected) {\r\n            const centerInput = new InputBlock(\"center\");\r\n            centerInput.value = new Vector2(0.5, 0.5);\r\n\r\n            centerInput.output.connectTo(this.center);\r\n        }\r\n\r\n        if (!this.strength.isConnected) {\r\n            const strengthInput = new InputBlock(\"strength\");\r\n            strengthInput.value = 1.0;\r\n\r\n            strengthInput.output.connectTo(this.strength);\r\n        }\r\n\r\n        if (!this.offset.isConnected) {\r\n            const offsetInput = new InputBlock(\"offset\");\r\n            offsetInput.value = new Vector2(0, 0);\r\n\r\n            offsetInput.output.connectTo(this.offset);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const tempDelta = state._getFreeVariableName(\"delta\");\r\n        const tempAngle = state._getFreeVariableName(\"angle\");\r\n        const tempX = state._getFreeVariableName(\"x\");\r\n        const tempY = state._getFreeVariableName(\"y\");\r\n        const tempResult = state._getFreeVariableName(\"result\");\r\n\r\n        state.compilationString += `\r\n            vec2 ${tempDelta} = ${this.input.associatedVariableName} - ${this.center.associatedVariableName};\r\n            float ${tempAngle} = ${this.strength.associatedVariableName} * length(${tempDelta});\r\n            float ${tempX} = cos(${tempAngle}) * ${tempDelta}.x - sin(${tempAngle}) * ${tempDelta}.y;\r\n            float ${tempY} = sin(${tempAngle}) * ${tempDelta}.x + cos(${tempAngle}) * ${tempDelta}.y;\r\n            vec2 ${tempResult} = vec2(${tempX} + ${this.center.associatedVariableName}.x + ${this.offset.associatedVariableName}.x, ${tempY} + ${this.center.associatedVariableName}.y + ${this.offset.associatedVariableName}.y);\r\n        `;\r\n\r\n        if (this.output.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(this.output, state) + ` = ${tempResult};\\r\\n`;\r\n        }\r\n\r\n        if (this.x.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(this.x, state) + ` = ${tempResult}.x;\\r\\n`;\r\n        }\r\n\r\n        if (this.y.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(this.y, state) + ` = ${tempResult}.y;\\r\\n`;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.TwirlBlock\", TwirlBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}