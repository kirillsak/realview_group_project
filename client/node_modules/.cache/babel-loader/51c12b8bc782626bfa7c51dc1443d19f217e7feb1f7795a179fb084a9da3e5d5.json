{"ast":null,"code":"import { Tools } from \"../../Misc/tools.js\";\nimport { WebXRFeatureName, WebXRFeaturesManager } from \"../webXRFeaturesManager.js\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature.js\";\n/**\n * DOM Overlay Feature\n *\n * @since 5.0.0\n */\nexport class WebXRDomOverlay extends WebXRAbstractFeature {\n  /**\n   * Creates a new instance of the dom-overlay feature\n   * @param _xrSessionManager an instance of WebXRSessionManager\n   * @param options options to use when constructing this feature\n   */\n  constructor(_xrSessionManager,\n  /**\n   * options to use when constructing this feature\n   */\n  options) {\n    super(_xrSessionManager);\n    this.options = options;\n    /**\n     * Type of overlay - non-null when available\n     */\n    this._domOverlayType = null;\n    /**\n     * Event Listener to supress \"beforexrselect\" events.\n     */\n    this._beforeXRSelectListener = null;\n    /**\n     * Element used for overlay\n     */\n    this._element = null;\n    this.xrNativeFeatureName = \"dom-overlay\";\n    // https://immersive-web.github.io/dom-overlays/\n    Tools.Warn(\"dom-overlay is an experimental and unstable feature.\");\n  }\n  /**\n   * attach this feature\n   * Will usually be called by the features manager\n   *\n   * @returns true if successful.\n   */\n  attach() {\n    if (!super.attach()) {\n      return false;\n    }\n    // Feature not available\n    if (!this._xrSessionManager.session.domOverlayState || this._xrSessionManager.session.domOverlayState.type === null) {\n      return false;\n    }\n    this._domOverlayType = this._xrSessionManager.session.domOverlayState.type;\n    if (this._element !== null && this.options.supressXRSelectEvents === true) {\n      this._beforeXRSelectListener = ev => {\n        ev.preventDefault();\n      };\n      this._element.addEventListener(\"beforexrselect\", this._beforeXRSelectListener);\n    }\n    return true;\n  }\n  /**\n   * The type of DOM overlay (null when not supported).  Provided by UA and remains unchanged for duration of session.\n   */\n  get domOverlayType() {\n    return this._domOverlayType;\n  }\n  /**\n   * Dispose this feature and all of the resources attached\n   */\n  dispose() {\n    super.dispose();\n    if (this._element !== null && this._beforeXRSelectListener) {\n      this._element.removeEventListener(\"beforexrselect\", this._beforeXRSelectListener);\n    }\n  }\n  _onXRFrame(_xrFrame) {\n    /* empty */\n  }\n  /**\n   * Extends the session init object if needed\n   * @returns augmentation object for the xr session init object.\n   */\n  async getXRSessionInitExtension() {\n    if (this.options.element === undefined) {\n      Tools.Warn('\"element\" option must be provided to attach xr-dom-overlay feature.');\n      return {};\n    } else if (typeof this.options.element === \"string\") {\n      const selectedElement = document.querySelector(this.options.element);\n      if (selectedElement === null) {\n        Tools.Warn(`element not found '${this.options.element}' (not requesting xr-dom-overlay)`);\n        return {};\n      }\n      this._element = selectedElement;\n    } else {\n      this._element = this.options.element;\n    }\n    return {\n      domOverlay: {\n        root: this._element\n      }\n    };\n  }\n}\n/**\n * The module's name\n */\nWebXRDomOverlay.Name = WebXRFeatureName.DOM_OVERLAY;\n/**\n * The (Babylon) version of this module.\n * This is an integer representing the implementation version.\n * This number does not correspond to the WebXR specs version\n */\nWebXRDomOverlay.Version = 1;\n//register the plugin\nWebXRFeaturesManager.AddWebXRFeature(WebXRDomOverlay.Name, (xrSessionManager, options) => {\n  return () => new WebXRDomOverlay(xrSessionManager, options);\n}, WebXRDomOverlay.Version, false);","map":{"version":3,"mappings":"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","names":["Tools","WebXRFeatureName","WebXRFeaturesManager","WebXRAbstractFeature","WebXRDomOverlay","constructor","_xrSessionManager","options","xrNativeFeatureName","Warn","attach","session","domOverlayState","type","_domOverlayType","_element","supressXRSelectEvents","_beforeXRSelectListener","ev","preventDefault","addEventListener","domOverlayType","dispose","removeEventListener","_onXRFrame","_xrFrame","getXRSessionInitExtension","element","undefined","selectedElement","document","querySelector","domOverlay","root","DOM_OVERLAY","AddWebXRFeature","Name","xrSessionManager","Version"],"sourceRoot":"","sources":["../../../../../lts/core/generated/XR/features/WebXRDOMOverlay.ts"],"sourcesContent":["import { Tools } from \"../../Misc/tools\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { WebXRFeatureName, WebXRFeaturesManager } from \"../webXRFeaturesManager\";\r\nimport type { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\r\n\r\n/**\r\n * Options for DOM Overlay feature\r\n */\r\nexport interface IWebXRDomOverlayOptions {\r\n    /**\r\n     * DOM Element or document query selector string for overlay.\r\n     *\r\n     * NOTE: UA may make this element background transparent in XR.\r\n     */\r\n    element: Element | string;\r\n    /**\r\n     * Supress XR Select events on container element (DOM blocks interaction to scene).\r\n     */\r\n    supressXRSelectEvents?: boolean;\r\n}\r\n\r\n/**\r\n * Type of DOM overlay provided by UA.\r\n */\r\ntype WebXRDomOverlayType =\r\n    /**\r\n     * Covers the entire physical screen for a screen-based device, for example handheld AR\r\n     */\r\n    | \"screen\"\r\n    /**\r\n     * Appears as a floating rectangle in space\r\n     */\r\n    | \"floating\"\r\n    /**\r\n     * Follows the userâ€™s head movement consistently, appearing similar to a HUD\r\n     */\r\n    | \"head-locked\";\r\n\r\n/**\r\n * DOM Overlay Feature\r\n *\r\n * @since 5.0.0\r\n */\r\nexport class WebXRDomOverlay extends WebXRAbstractFeature {\r\n    /**\r\n     * Type of overlay - non-null when available\r\n     */\r\n    private _domOverlayType: Nullable<WebXRDomOverlayType> = null;\r\n\r\n    /**\r\n     * Event Listener to supress \"beforexrselect\" events.\r\n     */\r\n    private _beforeXRSelectListener: Nullable<EventListenerOrEventListenerObject> = null;\r\n\r\n    /**\r\n     * Element used for overlay\r\n     */\r\n    private _element: Nullable<Element> = null;\r\n\r\n    /**\r\n     * The module's name\r\n     */\r\n    public static readonly Name = WebXRFeatureName.DOM_OVERLAY;\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number does not correspond to the WebXR specs version\r\n     */\r\n    public static readonly Version = 1;\r\n\r\n    /**\r\n     * Creates a new instance of the dom-overlay feature\r\n     * @param _xrSessionManager an instance of WebXRSessionManager\r\n     * @param options options to use when constructing this feature\r\n     */\r\n    constructor(\r\n        _xrSessionManager: WebXRSessionManager,\r\n        /**\r\n         * options to use when constructing this feature\r\n         */\r\n        public readonly options: IWebXRDomOverlayOptions\r\n    ) {\r\n        super(_xrSessionManager);\r\n        this.xrNativeFeatureName = \"dom-overlay\";\r\n\r\n        // https://immersive-web.github.io/dom-overlays/\r\n        Tools.Warn(\"dom-overlay is an experimental and unstable feature.\");\r\n    }\r\n\r\n    /**\r\n     * attach this feature\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public attach(): boolean {\r\n        if (!super.attach()) {\r\n            return false;\r\n        }\r\n\r\n        // Feature not available\r\n        if (!this._xrSessionManager.session.domOverlayState || this._xrSessionManager.session.domOverlayState.type === null) {\r\n            return false;\r\n        }\r\n\r\n        this._domOverlayType = this._xrSessionManager.session.domOverlayState.type;\r\n\r\n        if (this._element !== null && this.options.supressXRSelectEvents === true) {\r\n            this._beforeXRSelectListener = (ev) => {\r\n                ev.preventDefault();\r\n            };\r\n            this._element.addEventListener(\"beforexrselect\", this._beforeXRSelectListener);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * The type of DOM overlay (null when not supported).  Provided by UA and remains unchanged for duration of session.\r\n     */\r\n    public get domOverlayType(): Nullable<WebXRDomOverlayType> {\r\n        return this._domOverlayType;\r\n    }\r\n\r\n    /**\r\n     * Dispose this feature and all of the resources attached\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n        if (this._element !== null && this._beforeXRSelectListener) {\r\n            this._element.removeEventListener(\"beforexrselect\", this._beforeXRSelectListener);\r\n        }\r\n    }\r\n\r\n    protected _onXRFrame(_xrFrame: XRFrame): void {\r\n        /* empty */\r\n    }\r\n\r\n    /**\r\n     * Extends the session init object if needed\r\n     * @returns augmentation object for the xr session init object.\r\n     */\r\n    public async getXRSessionInitExtension(): Promise<Partial<XRSessionInit>> {\r\n        if (this.options.element === undefined) {\r\n            Tools.Warn('\"element\" option must be provided to attach xr-dom-overlay feature.');\r\n            return {};\r\n        } else if (typeof this.options.element === \"string\") {\r\n            const selectedElement = document.querySelector(this.options.element);\r\n            if (selectedElement === null) {\r\n                Tools.Warn(`element not found '${this.options.element}' (not requesting xr-dom-overlay)`);\r\n                return {};\r\n            }\r\n            this._element = selectedElement;\r\n        } else {\r\n            this._element = this.options.element;\r\n        }\r\n\r\n        return {\r\n            domOverlay: {\r\n                root: this._element,\r\n            },\r\n        };\r\n    }\r\n}\r\n\r\n//register the plugin\r\nWebXRFeaturesManager.AddWebXRFeature(\r\n    WebXRDomOverlay.Name,\r\n    (xrSessionManager, options) => {\r\n        return () => new WebXRDomOverlay(xrSessionManager, options);\r\n    },\r\n    WebXRDomOverlay.Version,\r\n    false\r\n);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}