{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { WebXRControllerComponent } from \"./webXRControllerComponent.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { Quaternion, Vector3 } from \"../../Maths/math.vector.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\n/**\n * An Abstract Motion controller\n * This class receives an xrInput and a profile layout and uses those to initialize the components\n * Each component has an observable to check for changes in value and state\n */\nexport class WebXRAbstractMotionController {\n  /**\n   * constructs a new abstract motion controller\n   * @param scene the scene to which the model of the controller will be added\n   * @param layout The profile layout to load\n   * @param gamepadObject The gamepad object correlating to this controller\n   * @param handedness handedness (left/right/none) of this controller\n   * @param _doNotLoadControllerMesh set this flag to ignore the mesh loading\n   * @param _controllerCache a cache holding controller models already loaded in this session\n   */\n  constructor(\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  scene,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  layout,\n  /**\n   * The gamepad object correlating to this controller\n   */\n  gamepadObject,\n  /**\n   * handedness (left/right/none) of this controller\n   */\n  handedness,\n  /**\n   * @internal\n   */\n  _doNotLoadControllerMesh = false, _controllerCache) {\n    this.scene = scene;\n    this.layout = layout;\n    this.gamepadObject = gamepadObject;\n    this.handedness = handedness;\n    this._doNotLoadControllerMesh = _doNotLoadControllerMesh;\n    this._controllerCache = _controllerCache;\n    this._initComponent = id => {\n      if (!id) {\n        return;\n      }\n      const componentDef = this.layout.components[id];\n      const type = componentDef.type;\n      const buttonIndex = componentDef.gamepadIndices.button;\n      // search for axes\n      const axes = [];\n      if (componentDef.gamepadIndices.xAxis !== undefined && componentDef.gamepadIndices.yAxis !== undefined) {\n        axes.push(componentDef.gamepadIndices.xAxis, componentDef.gamepadIndices.yAxis);\n      }\n      this.components[id] = new WebXRControllerComponent(id, type, buttonIndex, axes);\n    };\n    this._modelReady = false;\n    /**\n     * A map of components (WebXRControllerComponent) in this motion controller\n     * Components have a ComponentType and can also have both button and axis definitions\n     */\n    this.components = {};\n    /**\n     * Disable the model's animation. Can be set at any time.\n     */\n    this.disableAnimation = false;\n    /**\n     * Observers registered here will be triggered when the model of this controller is done loading\n     */\n    this.onModelLoadedObservable = new Observable();\n    // initialize the components\n    if (layout.components) {\n      Object.keys(layout.components).forEach(this._initComponent);\n    }\n    // Model is loaded in WebXRInput\n  }\n  /**\n   * Dispose this controller, the model mesh and all its components\n   */\n  dispose() {\n    this.getComponentIds().forEach(id => this.getComponent(id).dispose());\n    if (this.rootMesh) {\n      this.rootMesh.getChildren(undefined, true).forEach(node => {\n        node.setEnabled(false);\n      });\n      this.rootMesh.dispose(!!this._controllerCache, !this._controllerCache);\n    }\n  }\n  /**\n   * Returns all components of specific type\n   * @param type the type to search for\n   * @returns an array of components with this type\n   */\n  getAllComponentsOfType(type) {\n    return this.getComponentIds().map(id => this.components[id]).filter(component => component.type === type);\n  }\n  /**\n   * get a component based an its component id as defined in layout.components\n   * @param id the id of the component\n   * @returns the component correlates to the id or undefined if not found\n   */\n  getComponent(id) {\n    return this.components[id];\n  }\n  /**\n   * Get the list of components available in this motion controller\n   * @returns an array of strings correlating to available components\n   */\n  getComponentIds() {\n    return Object.keys(this.components);\n  }\n  /**\n   * Get the first component of specific type\n   * @param type type of component to find\n   * @returns a controller component or null if not found\n   */\n  getComponentOfType(type) {\n    return this.getAllComponentsOfType(type)[0] || null;\n  }\n  /**\n   * Get the main (Select) component of this controller as defined in the layout\n   * @returns the main component of this controller\n   */\n  getMainComponent() {\n    return this.getComponent(this.layout.selectComponentId);\n  }\n  /**\n   * Loads the model correlating to this controller\n   * When the mesh is loaded, the onModelLoadedObservable will be triggered\n   * @returns A promise fulfilled with the result of the model loading\n   */\n  async loadModel() {\n    const useGeneric = !this._getModelLoadingConstraints();\n    let loadingParams = this._getGenericFilenameAndPath();\n    // Checking if GLB loader is present\n    if (useGeneric) {\n      Logger.Warn(\"Falling back to generic models\");\n    } else {\n      loadingParams = this._getFilenameAndPath();\n    }\n    return new Promise((resolve, reject) => {\n      const meshesLoaded = meshes => {\n        if (useGeneric) {\n          this._getGenericParentMesh(meshes);\n        } else {\n          this._setRootMesh(meshes);\n        }\n        this._processLoadedModel(meshes);\n        this._modelReady = true;\n        this.onModelLoadedObservable.notifyObservers(this);\n        resolve(true);\n      };\n      if (this._controllerCache) {\n        // look for it in the cache\n        const found = this._controllerCache.filter(c => {\n          return c.filename === loadingParams.filename && c.path === loadingParams.path;\n        });\n        if (found[0]) {\n          found[0].meshes.forEach(mesh => mesh.setEnabled(true));\n          meshesLoaded(found[0].meshes);\n          return;\n          // found, don't continue to load\n        }\n      }\n\n      SceneLoader.ImportMesh(\"\", loadingParams.path, loadingParams.filename, this.scene, meshes => {\n        if (this._controllerCache) {\n          this._controllerCache.push({\n            ...loadingParams,\n            meshes\n          });\n        }\n        meshesLoaded(meshes);\n      }, null, (_scene, message) => {\n        Logger.Log(message);\n        Logger.Warn(`Failed to retrieve controller model of type ${this.profileId} from the remote server: ${loadingParams.path}${loadingParams.filename}`);\n        reject(message);\n      });\n    });\n  }\n  /**\n   * Update this model using the current XRFrame\n   * @param xrFrame the current xr frame to use and update the model\n   */\n  updateFromXRFrame(xrFrame) {\n    this.getComponentIds().forEach(id => this.getComponent(id).update(this.gamepadObject));\n    this.updateModel(xrFrame);\n  }\n  /**\n   * Backwards compatibility due to a deeply-integrated typo\n   */\n  get handness() {\n    return this.handedness;\n  }\n  /**\n   * Pulse (vibrate) this controller\n   * If the controller does not support pulses, this function will fail silently and return Promise<false> directly after called\n   * Consecutive calls to this function will cancel the last pulse call\n   *\n   * @param value the strength of the pulse in 0.0...1.0 range\n   * @param duration Duration of the pulse in milliseconds\n   * @param hapticActuatorIndex optional index of actuator (will usually be 0)\n   * @returns a promise that will send true when the pulse has ended and false if the device doesn't support pulse or an error accrued\n   */\n  pulse(value, duration, hapticActuatorIndex = 0) {\n    if (this.gamepadObject.hapticActuators && this.gamepadObject.hapticActuators[hapticActuatorIndex]) {\n      return this.gamepadObject.hapticActuators[hapticActuatorIndex].pulse(value, duration);\n    } else {\n      return Promise.resolve(false);\n    }\n  }\n  // Look through all children recursively. This will return null if no mesh exists with the given name.\n  _getChildByName(node, name) {\n    return node.getChildren(n => n.name === name, false)[0];\n  }\n  // Look through only immediate children. This will return null if no mesh exists with the given name.\n  _getImmediateChildByName(node, name) {\n    return node.getChildren(n => n.name == name, true)[0];\n  }\n  /**\n   * Moves the axis on the controller mesh based on its current state\n   * @param axisMap\n   * @param axisValue the value of the axis which determines the meshes new position\n   * @internal\n   */\n  _lerpTransform(axisMap, axisValue, fixValueCoordinates) {\n    if (!axisMap.minMesh || !axisMap.maxMesh || !axisMap.valueMesh) {\n      return;\n    }\n    if (!axisMap.minMesh.rotationQuaternion || !axisMap.maxMesh.rotationQuaternion || !axisMap.valueMesh.rotationQuaternion) {\n      return;\n    }\n    // Convert from gamepad value range (-1 to +1) to lerp range (0 to 1)\n    const lerpValue = fixValueCoordinates ? axisValue * 0.5 + 0.5 : axisValue;\n    Quaternion.SlerpToRef(axisMap.minMesh.rotationQuaternion, axisMap.maxMesh.rotationQuaternion, lerpValue, axisMap.valueMesh.rotationQuaternion);\n    Vector3.LerpToRef(axisMap.minMesh.position, axisMap.maxMesh.position, lerpValue, axisMap.valueMesh.position);\n  }\n  /**\n   * Update the model itself with the current frame data\n   * @param xrFrame the frame to use for updating the model mesh\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  updateModel(xrFrame) {\n    if (!this._modelReady) {\n      return;\n    }\n    this._updateModel(xrFrame);\n  }\n  _getGenericFilenameAndPath() {\n    return {\n      filename: \"generic.babylon\",\n      path: \"https://controllers.babylonjs.com/generic/\"\n    };\n  }\n  _getGenericParentMesh(meshes) {\n    this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\n    meshes.forEach(mesh => {\n      if (!mesh.parent) {\n        mesh.isPickable = false;\n        mesh.setParent(this.rootMesh);\n      }\n    });\n    this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\n  }\n}","map":{"version":3,"mappings":"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","names":["WebXRControllerComponent","Observable","Logger","SceneLoader","Quaternion","Vector3","Mesh","WebXRAbstractMotionController","constructor","scene","layout","gamepadObject","handedness","_doNotLoadControllerMesh","_controllerCache","id","componentDef","components","type","buttonIndex","gamepadIndices","button","axes","xAxis","undefined","yAxis","push","Object","keys","forEach","_initComponent","dispose","getComponentIds","getComponent","rootMesh","getChildren","node","setEnabled","getAllComponentsOfType","map","filter","component","getComponentOfType","getMainComponent","selectComponentId","loadModel","useGeneric","_getModelLoadingConstraints","loadingParams","_getGenericFilenameAndPath","Warn","_getFilenameAndPath","Promise","resolve","reject","meshesLoaded","meshes","_getGenericParentMesh","_setRootMesh","_processLoadedModel","_modelReady","onModelLoadedObservable","notifyObservers","found","c","filename","path","mesh","ImportMesh","_scene","message","Log","profileId","updateFromXRFrame","xrFrame","update","updateModel","handness","pulse","value","duration","hapticActuatorIndex","hapticActuators","_getChildByName","name","n","_getImmediateChildByName","_lerpTransform","axisMap","axisValue","fixValueCoordinates","minMesh","maxMesh","valueMesh","rotationQuaternion","lerpValue","SlerpToRef","LerpToRef","position","_updateModel","parent","isPickable","setParent","FromEulerAngles","Math","PI"],"sourceRoot":"","sources":["../../../../../lts/core/generated/XR/motionController/webXRAbstractMotionController.ts"],"sourcesContent":["import type { IDisposable, Scene } from \"../../scene\";\r\nimport { WebXRControllerComponent } from \"./webXRControllerComponent\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Quaternion, Vector3 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\n\r\n/**\r\n * Handedness type in xrInput profiles. These can be used to define layouts in the Layout Map.\r\n */\r\nexport type MotionControllerHandedness = \"none\" | \"left\" | \"right\";\r\n/**\r\n * The type of components available in motion controllers.\r\n * This is not the name of the component.\r\n */\r\nexport type MotionControllerComponentType = \"trigger\" | \"squeeze\" | \"touchpad\" | \"thumbstick\" | \"button\";\r\n\r\n/**\r\n * The state of a controller component\r\n */\r\nexport type MotionControllerComponentStateType = \"default\" | \"touched\" | \"pressed\";\r\n\r\n/**\r\n * The schema of motion controller layout.\r\n * No object will be initialized using this interface\r\n * This is used just to define the profile.\r\n */\r\nexport interface IMotionControllerLayout {\r\n    /**\r\n     * Path to load the assets. Usually relative to the base path\r\n     */\r\n    assetPath: string;\r\n    /**\r\n     * Available components (unsorted)\r\n     */\r\n    components: {\r\n        /**\r\n         * A map of component Ids\r\n         */\r\n        [componentId: string]: {\r\n            /**\r\n             * The type of input the component outputs\r\n             */\r\n            type: MotionControllerComponentType;\r\n            /**\r\n             * The indices of this component in the gamepad object\r\n             */\r\n            gamepadIndices: {\r\n                /**\r\n                 * Index of button\r\n                 */\r\n                button?: number;\r\n                /**\r\n                 * If available, index of x-axis\r\n                 */\r\n                xAxis?: number;\r\n                /**\r\n                 * If available, index of y-axis\r\n                 */\r\n                yAxis?: number;\r\n            };\r\n            /**\r\n             * The mesh's root node name\r\n             */\r\n            rootNodeName: string;\r\n            /**\r\n             * Animation definitions for this model\r\n             */\r\n            visualResponses: {\r\n                [stateKey: string]: {\r\n                    /**\r\n                     * What property will be animated\r\n                     */\r\n                    componentProperty: \"xAxis\" | \"yAxis\" | \"button\" | \"state\";\r\n                    /**\r\n                     * What states influence this visual response\r\n                     */\r\n                    states: MotionControllerComponentStateType[];\r\n                    /**\r\n                     * Type of animation - movement or visibility\r\n                     */\r\n                    valueNodeProperty: \"transform\" | \"visibility\";\r\n                    /**\r\n                     * Base node name to move. Its position will be calculated according to the min and max nodes\r\n                     */\r\n                    valueNodeName?: string;\r\n                    /**\r\n                     * Minimum movement node\r\n                     */\r\n                    minNodeName?: string;\r\n                    /**\r\n                     * Max movement node\r\n                     */\r\n                    maxNodeName?: string;\r\n                };\r\n            };\r\n            /**\r\n             * If touch enabled, what is the name of node to display user feedback\r\n             */\r\n            touchPointNodeName?: string;\r\n        };\r\n    };\r\n    /**\r\n     * Is it xr standard mapping or not\r\n     */\r\n    gamepadMapping: \"\" | \"xr-standard\";\r\n    /**\r\n     * Base root node of this entire model\r\n     */\r\n    rootNodeName: string;\r\n    /**\r\n     * Defines the main button component id\r\n     */\r\n    selectComponentId: string;\r\n}\r\n\r\n/**\r\n * A definition for the layout map in the input profile\r\n */\r\nexport interface IMotionControllerLayoutMap {\r\n    /**\r\n     * Layouts with handedness type as a key\r\n     */\r\n    [handedness: string /* handedness */]: IMotionControllerLayout;\r\n}\r\n\r\n/**\r\n * The XR Input profile schema\r\n * Profiles can be found here:\r\n * https://github.com/immersive-web/webxr-input-profiles/tree/master/packages/registry/profiles\r\n */\r\nexport interface IMotionControllerProfile {\r\n    /**\r\n     * fallback profiles for this profileId\r\n     */\r\n    fallbackProfileIds: string[];\r\n    /**\r\n     * The layout map, with handedness as key\r\n     */\r\n    layouts: IMotionControllerLayoutMap;\r\n    /**\r\n     * The id of this profile\r\n     * correlates to the profile(s) in the xrInput.profiles array\r\n     */\r\n    profileId: string;\r\n}\r\n\r\n/**\r\n * A helper-interface for the 3 meshes needed for controller button animation\r\n * The meshes are provided to the _lerpButtonTransform function to calculate the current position of the value mesh\r\n */\r\nexport interface IMotionControllerButtonMeshMap {\r\n    /**\r\n     * the mesh that defines the pressed value mesh position.\r\n     * This is used to find the max-position of this button\r\n     */\r\n    pressedMesh: AbstractMesh;\r\n    /**\r\n     * the mesh that defines the unpressed value mesh position.\r\n     * This is used to find the min (or initial) position of this button\r\n     */\r\n    unpressedMesh: AbstractMesh;\r\n    /**\r\n     * The mesh that will be changed when value changes\r\n     */\r\n    valueMesh: AbstractMesh;\r\n}\r\n\r\n/**\r\n * A helper-interface for the 3 meshes needed for controller axis animation.\r\n * This will be expanded when touchpad animations are fully supported\r\n * The meshes are provided to the _lerpAxisTransform function to calculate the current position of the value mesh\r\n */\r\nexport interface IMotionControllerMeshMap {\r\n    /**\r\n     * the mesh that defines the maximum value mesh position.\r\n     */\r\n    maxMesh?: AbstractMesh;\r\n    /**\r\n     * the mesh that defines the minimum value mesh position.\r\n     */\r\n    minMesh?: AbstractMesh;\r\n    /**\r\n     * The mesh that will be changed when axis value changes\r\n     */\r\n    valueMesh?: AbstractMesh;\r\n}\r\n\r\n/**\r\n * The elements needed for change-detection of the gamepad objects in motion controllers\r\n */\r\nexport interface IMinimalMotionControllerObject {\r\n    /**\r\n     * Available axes of this controller\r\n     */\r\n    axes: number[];\r\n    /**\r\n     * An array of available buttons\r\n     */\r\n    buttons: Array<{\r\n        /**\r\n         * Value of the button/trigger\r\n         */\r\n        value: number;\r\n        /**\r\n         * If the button/trigger is currently touched\r\n         */\r\n        touched: boolean;\r\n        /**\r\n         * If the button/trigger is currently pressed\r\n         */\r\n        pressed: boolean;\r\n    }>;\r\n\r\n    /**\r\n     * EXPERIMENTAL haptic support.\r\n     */\r\n    hapticActuators?: Array<{\r\n        pulse: (value: number, duration: number) => Promise<boolean>;\r\n    }>;\r\n}\r\n\r\n/**\r\n * An Abstract Motion controller\r\n * This class receives an xrInput and a profile layout and uses those to initialize the components\r\n * Each component has an observable to check for changes in value and state\r\n */\r\nexport abstract class WebXRAbstractMotionController implements IDisposable {\r\n    private _initComponent = (id: string) => {\r\n        if (!id) {\r\n            return;\r\n        }\r\n        const componentDef = this.layout.components[id];\r\n        const type = componentDef.type;\r\n        const buttonIndex = componentDef.gamepadIndices.button;\r\n        // search for axes\r\n        const axes: number[] = [];\r\n        if (componentDef.gamepadIndices.xAxis !== undefined && componentDef.gamepadIndices.yAxis !== undefined) {\r\n            axes.push(componentDef.gamepadIndices.xAxis, componentDef.gamepadIndices.yAxis);\r\n        }\r\n\r\n        this.components[id] = new WebXRControllerComponent(id, type, buttonIndex, axes);\r\n    };\r\n\r\n    private _modelReady: boolean = false;\r\n\r\n    /**\r\n     * A map of components (WebXRControllerComponent) in this motion controller\r\n     * Components have a ComponentType and can also have both button and axis definitions\r\n     */\r\n    public readonly components: {\r\n        [id: string]: WebXRControllerComponent;\r\n    } = {};\r\n\r\n    /**\r\n     * Disable the model's animation. Can be set at any time.\r\n     */\r\n    public disableAnimation: boolean = false;\r\n    /**\r\n     * Observers registered here will be triggered when the model of this controller is done loading\r\n     */\r\n    public onModelLoadedObservable: Observable<WebXRAbstractMotionController> = new Observable();\r\n    /**\r\n     * The profile id of this motion controller\r\n     */\r\n    public abstract profileId: string;\r\n    /**\r\n     * The root mesh of the model. It is null if the model was not yet initialized\r\n     */\r\n    public rootMesh: Nullable<AbstractMesh>;\r\n\r\n    /**\r\n     * constructs a new abstract motion controller\r\n     * @param scene the scene to which the model of the controller will be added\r\n     * @param layout The profile layout to load\r\n     * @param gamepadObject The gamepad object correlating to this controller\r\n     * @param handedness handedness (left/right/none) of this controller\r\n     * @param _doNotLoadControllerMesh set this flag to ignore the mesh loading\r\n     * @param _controllerCache a cache holding controller models already loaded in this session\r\n     */\r\n    constructor(\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        protected scene: Scene,\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        protected layout: IMotionControllerLayout,\r\n        /**\r\n         * The gamepad object correlating to this controller\r\n         */\r\n        public gamepadObject: IMinimalMotionControllerObject,\r\n        /**\r\n         * handedness (left/right/none) of this controller\r\n         */\r\n        public handedness: MotionControllerHandedness,\r\n        /**\r\n         * @internal\r\n         */\r\n        public _doNotLoadControllerMesh: boolean = false,\r\n        private _controllerCache?: Array<{\r\n            filename: string;\r\n            path: string;\r\n            meshes: AbstractMesh[];\r\n        }>\r\n    ) {\r\n        // initialize the components\r\n        if (layout.components) {\r\n            Object.keys(layout.components).forEach(this._initComponent);\r\n        }\r\n        // Model is loaded in WebXRInput\r\n    }\r\n\r\n    /**\r\n     * Dispose this controller, the model mesh and all its components\r\n     */\r\n    public dispose(): void {\r\n        this.getComponentIds().forEach((id) => this.getComponent(id).dispose());\r\n        if (this.rootMesh) {\r\n            this.rootMesh.getChildren(undefined, true).forEach((node) => {\r\n                node.setEnabled(false);\r\n            });\r\n            this.rootMesh.dispose(!!this._controllerCache, !this._controllerCache);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns all components of specific type\r\n     * @param type the type to search for\r\n     * @returns an array of components with this type\r\n     */\r\n    public getAllComponentsOfType(type: MotionControllerComponentType): WebXRControllerComponent[] {\r\n        return this.getComponentIds()\r\n            .map((id) => this.components[id])\r\n            .filter((component) => component.type === type);\r\n    }\r\n\r\n    /**\r\n     * get a component based an its component id as defined in layout.components\r\n     * @param id the id of the component\r\n     * @returns the component correlates to the id or undefined if not found\r\n     */\r\n    public getComponent(id: string): WebXRControllerComponent {\r\n        return this.components[id];\r\n    }\r\n\r\n    /**\r\n     * Get the list of components available in this motion controller\r\n     * @returns an array of strings correlating to available components\r\n     */\r\n    public getComponentIds(): string[] {\r\n        return Object.keys(this.components);\r\n    }\r\n\r\n    /**\r\n     * Get the first component of specific type\r\n     * @param type type of component to find\r\n     * @returns a controller component or null if not found\r\n     */\r\n    public getComponentOfType(type: MotionControllerComponentType): Nullable<WebXRControllerComponent> {\r\n        return this.getAllComponentsOfType(type)[0] || null;\r\n    }\r\n\r\n    /**\r\n     * Get the main (Select) component of this controller as defined in the layout\r\n     * @returns the main component of this controller\r\n     */\r\n    public getMainComponent(): WebXRControllerComponent {\r\n        return this.getComponent(this.layout.selectComponentId);\r\n    }\r\n\r\n    /**\r\n     * Loads the model correlating to this controller\r\n     * When the mesh is loaded, the onModelLoadedObservable will be triggered\r\n     * @returns A promise fulfilled with the result of the model loading\r\n     */\r\n    public async loadModel(): Promise<boolean> {\r\n        const useGeneric = !this._getModelLoadingConstraints();\r\n        let loadingParams = this._getGenericFilenameAndPath();\r\n        // Checking if GLB loader is present\r\n        if (useGeneric) {\r\n            Logger.Warn(\"Falling back to generic models\");\r\n        } else {\r\n            loadingParams = this._getFilenameAndPath();\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const meshesLoaded = (meshes: AbstractMesh[]) => {\r\n                if (useGeneric) {\r\n                    this._getGenericParentMesh(meshes);\r\n                } else {\r\n                    this._setRootMesh(meshes);\r\n                }\r\n                this._processLoadedModel(meshes);\r\n                this._modelReady = true;\r\n                this.onModelLoadedObservable.notifyObservers(this);\r\n                resolve(true);\r\n            };\r\n            if (this._controllerCache) {\r\n                // look for it in the cache\r\n                const found = this._controllerCache.filter((c) => {\r\n                    return c.filename === loadingParams.filename && c.path === loadingParams.path;\r\n                });\r\n                if (found[0]) {\r\n                    found[0].meshes.forEach((mesh) => mesh.setEnabled(true));\r\n                    meshesLoaded(found[0].meshes);\r\n                    return;\r\n                    // found, don't continue to load\r\n                }\r\n            }\r\n            SceneLoader.ImportMesh(\r\n                \"\",\r\n                loadingParams.path,\r\n                loadingParams.filename,\r\n                this.scene,\r\n                (meshes) => {\r\n                    if (this._controllerCache) {\r\n                        this._controllerCache.push({\r\n                            ...loadingParams,\r\n                            meshes,\r\n                        });\r\n                    }\r\n                    meshesLoaded(meshes);\r\n                },\r\n                null,\r\n                (_scene: Scene, message: string) => {\r\n                    Logger.Log(message);\r\n                    Logger.Warn(`Failed to retrieve controller model of type ${this.profileId} from the remote server: ${loadingParams.path}${loadingParams.filename}`);\r\n                    reject(message);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update this model using the current XRFrame\r\n     * @param xrFrame the current xr frame to use and update the model\r\n     */\r\n    public updateFromXRFrame(xrFrame: XRFrame): void {\r\n        this.getComponentIds().forEach((id) => this.getComponent(id).update(this.gamepadObject));\r\n        this.updateModel(xrFrame);\r\n    }\r\n\r\n    /**\r\n     * Backwards compatibility due to a deeply-integrated typo\r\n     */\r\n    public get handness() {\r\n        return this.handedness;\r\n    }\r\n\r\n    /**\r\n     * Pulse (vibrate) this controller\r\n     * If the controller does not support pulses, this function will fail silently and return Promise<false> directly after called\r\n     * Consecutive calls to this function will cancel the last pulse call\r\n     *\r\n     * @param value the strength of the pulse in 0.0...1.0 range\r\n     * @param duration Duration of the pulse in milliseconds\r\n     * @param hapticActuatorIndex optional index of actuator (will usually be 0)\r\n     * @returns a promise that will send true when the pulse has ended and false if the device doesn't support pulse or an error accrued\r\n     */\r\n    public pulse(value: number, duration: number, hapticActuatorIndex: number = 0): Promise<boolean> {\r\n        if (this.gamepadObject.hapticActuators && this.gamepadObject.hapticActuators[hapticActuatorIndex]) {\r\n            return this.gamepadObject.hapticActuators[hapticActuatorIndex].pulse(value, duration);\r\n        } else {\r\n            return Promise.resolve(false);\r\n        }\r\n    }\r\n\r\n    // Look through all children recursively. This will return null if no mesh exists with the given name.\r\n    protected _getChildByName(node: AbstractMesh, name: string): AbstractMesh | undefined {\r\n        return <AbstractMesh | undefined>node.getChildren((n) => n.name === name, false)[0];\r\n    }\r\n\r\n    // Look through only immediate children. This will return null if no mesh exists with the given name.\r\n    protected _getImmediateChildByName(node: AbstractMesh, name: string): AbstractMesh | undefined {\r\n        return <AbstractMesh | undefined>node.getChildren((n) => n.name == name, true)[0];\r\n    }\r\n\r\n    /**\r\n     * Moves the axis on the controller mesh based on its current state\r\n     * @param axisMap\r\n     * @param axisValue the value of the axis which determines the meshes new position\r\n     * @internal\r\n     */\r\n    protected _lerpTransform(axisMap: IMotionControllerMeshMap, axisValue: number, fixValueCoordinates?: boolean): void {\r\n        if (!axisMap.minMesh || !axisMap.maxMesh || !axisMap.valueMesh) {\r\n            return;\r\n        }\r\n\r\n        if (!axisMap.minMesh.rotationQuaternion || !axisMap.maxMesh.rotationQuaternion || !axisMap.valueMesh.rotationQuaternion) {\r\n            return;\r\n        }\r\n\r\n        // Convert from gamepad value range (-1 to +1) to lerp range (0 to 1)\r\n        const lerpValue = fixValueCoordinates ? axisValue * 0.5 + 0.5 : axisValue;\r\n        Quaternion.SlerpToRef(axisMap.minMesh.rotationQuaternion, axisMap.maxMesh.rotationQuaternion, lerpValue, axisMap.valueMesh.rotationQuaternion);\r\n        Vector3.LerpToRef(axisMap.minMesh.position, axisMap.maxMesh.position, lerpValue, axisMap.valueMesh.position);\r\n    }\r\n\r\n    /**\r\n     * Update the model itself with the current frame data\r\n     * @param xrFrame the frame to use for updating the model mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected updateModel(xrFrame: XRFrame): void {\r\n        if (!this._modelReady) {\r\n            return;\r\n        }\r\n        this._updateModel(xrFrame);\r\n    }\r\n\r\n    /**\r\n     * Get the filename and path for this controller's model\r\n     * @returns a map of filename and path\r\n     */\r\n    protected abstract _getFilenameAndPath(): { filename: string; path: string };\r\n    /**\r\n     * This function is called before the mesh is loaded. It checks for loading constraints.\r\n     * For example, this function can check if the GLB loader is available\r\n     * If this function returns false, the generic controller will be loaded instead\r\n     * @returns Is the client ready to load the mesh\r\n     */\r\n    protected abstract _getModelLoadingConstraints(): boolean;\r\n    /**\r\n     * This function will be called after the model was successfully loaded and can be used\r\n     * for mesh transformations before it is available for the user\r\n     * @param meshes the loaded meshes\r\n     */\r\n    protected abstract _processLoadedModel(meshes: AbstractMesh[]): void;\r\n    /**\r\n     * Set the root mesh for this controller. Important for the WebXR controller class\r\n     * @param meshes the loaded meshes\r\n     */\r\n    protected abstract _setRootMesh(meshes: AbstractMesh[]): void;\r\n    /**\r\n     * A function executed each frame that updates the mesh (if needed)\r\n     * @param xrFrame the current xrFrame\r\n     */\r\n    protected abstract _updateModel(xrFrame: XRFrame): void;\r\n\r\n    private _getGenericFilenameAndPath(): { filename: string; path: string } {\r\n        return {\r\n            filename: \"generic.babylon\",\r\n            path: \"https://controllers.babylonjs.com/generic/\",\r\n        };\r\n    }\r\n\r\n    private _getGenericParentMesh(meshes: AbstractMesh[]): void {\r\n        this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\r\n\r\n        meshes.forEach((mesh) => {\r\n            if (!mesh.parent) {\r\n                mesh.isPickable = false;\r\n                mesh.setParent(this.rootMesh);\r\n            }\r\n        });\r\n\r\n        this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}