{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { WebGPUEngine } from \"../../webgpuEngine.js\";\nWebGPUEngine.prototype._debugPushGroup = function (groupName, targetObject) {\n  if (!this._options.enableGPUDebugMarkers) {\n    return;\n  }\n  if (targetObject === 0 || targetObject === 1) {\n    const encoder = targetObject === 0 ? this._renderEncoder : this._renderTargetEncoder;\n    encoder.pushDebugGroup(groupName);\n  } else if (this._currentRenderPass) {\n    this._currentRenderPass.pushDebugGroup(groupName);\n  } else {\n    this._pendingDebugCommands.push([\"push\", groupName]);\n  }\n};\nWebGPUEngine.prototype._debugPopGroup = function (targetObject) {\n  if (!this._options.enableGPUDebugMarkers) {\n    return;\n  }\n  if (targetObject === 0 || targetObject === 1) {\n    const encoder = targetObject === 0 ? this._renderEncoder : this._renderTargetEncoder;\n    encoder.popDebugGroup();\n  } else if (this._currentRenderPass) {\n    this._currentRenderPass.popDebugGroup();\n  } else {\n    this._pendingDebugCommands.push([\"pop\", null]);\n  }\n};\nWebGPUEngine.prototype._debugInsertMarker = function (text, targetObject) {\n  if (!this._options.enableGPUDebugMarkers) {\n    return;\n  }\n  if (targetObject === 0 || targetObject === 1) {\n    const encoder = targetObject === 0 ? this._renderEncoder : this._renderTargetEncoder;\n    encoder.insertDebugMarker(text);\n  } else if (this._currentRenderPass) {\n    this._currentRenderPass.insertDebugMarker(text);\n  } else {\n    this._pendingDebugCommands.push([\"insert\", text]);\n  }\n};\nWebGPUEngine.prototype._debugFlushPendingCommands = function () {\n  for (let i = 0; i < this._pendingDebugCommands.length; ++i) {\n    const [name, param] = this._pendingDebugCommands[i];\n    switch (name) {\n      case \"push\":\n        this._debugPushGroup(param);\n        break;\n      case \"pop\":\n        this._debugPopGroup();\n        break;\n      case \"insert\":\n        this._debugInsertMarker(param);\n        break;\n    }\n  }\n  this._pendingDebugCommands.length = 0;\n};","map":{"version":3,"mappings":";AAAA,SAASA,YAAY,QAAQ,uBAAqB;AAElDA,YAAY,CAACC,SAAS,CAACC,eAAe,GAAG,UAAUC,SAAiB,EAAEC,YAAqB;EACvF,IAAI,CAAC,IAAI,CAACC,QAAQ,CAACC,qBAAqB,EAAE;IACtC;;EAGJ,IAAIF,YAAY,KAAK,CAAC,IAAIA,YAAY,KAAK,CAAC,EAAE;IAC1C,MAAMG,OAAO,GAAGH,YAAY,KAAK,CAAC,GAAG,IAAI,CAACI,cAAc,GAAG,IAAI,CAACC,oBAAoB;IACpFF,OAAO,CAACG,cAAc,CAACP,SAAS,CAAC;GACpC,MAAM,IAAI,IAAI,CAACQ,kBAAkB,EAAE;IAChC,IAAI,CAACA,kBAAkB,CAACD,cAAc,CAACP,SAAS,CAAC;GACpD,MAAM;IACH,IAAI,CAACS,qBAAqB,CAACC,IAAI,CAAC,CAAC,MAAM,EAAEV,SAAS,CAAC,CAAC;;AAE5D,CAAC;AAEDH,YAAY,CAACC,SAAS,CAACa,cAAc,GAAG,UAAUV,YAAqB;EACnE,IAAI,CAAC,IAAI,CAACC,QAAQ,CAACC,qBAAqB,EAAE;IACtC;;EAGJ,IAAIF,YAAY,KAAK,CAAC,IAAIA,YAAY,KAAK,CAAC,EAAE;IAC1C,MAAMG,OAAO,GAAGH,YAAY,KAAK,CAAC,GAAG,IAAI,CAACI,cAAc,GAAG,IAAI,CAACC,oBAAoB;IACpFF,OAAO,CAACQ,aAAa,EAAE;GAC1B,MAAM,IAAI,IAAI,CAACJ,kBAAkB,EAAE;IAChC,IAAI,CAACA,kBAAkB,CAACI,aAAa,EAAE;GAC1C,MAAM;IACH,IAAI,CAACH,qBAAqB,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;;AAEtD,CAAC;AAEDb,YAAY,CAACC,SAAS,CAACe,kBAAkB,GAAG,UAAUC,IAAY,EAAEb,YAAqB;EACrF,IAAI,CAAC,IAAI,CAACC,QAAQ,CAACC,qBAAqB,EAAE;IACtC;;EAGJ,IAAIF,YAAY,KAAK,CAAC,IAAIA,YAAY,KAAK,CAAC,EAAE;IAC1C,MAAMG,OAAO,GAAGH,YAAY,KAAK,CAAC,GAAG,IAAI,CAACI,cAAc,GAAG,IAAI,CAACC,oBAAoB;IACpFF,OAAO,CAACW,iBAAiB,CAACD,IAAI,CAAC;GAClC,MAAM,IAAI,IAAI,CAACN,kBAAkB,EAAE;IAChC,IAAI,CAACA,kBAAkB,CAACO,iBAAiB,CAACD,IAAI,CAAC;GAClD,MAAM;IACH,IAAI,CAACL,qBAAqB,CAACC,IAAI,CAAC,CAAC,QAAQ,EAAEI,IAAI,CAAC,CAAC;;AAEzD,CAAC;AAEDjB,YAAY,CAACC,SAAS,CAACkB,0BAA0B,GAAG;EAChD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACR,qBAAqB,CAACS,MAAM,EAAE,EAAED,CAAC,EAAE;IACxD,MAAM,CAACE,IAAI,EAAEC,KAAK,CAAC,GAAG,IAAI,CAACX,qBAAqB,CAACQ,CAAC,CAAC;IAEnD,QAAQE,IAAI;MACR,KAAK,MAAM;QACP,IAAI,CAACpB,eAAe,CAACqB,KAAM,CAAC;QAC5B;MACJ,KAAK,KAAK;QACN,IAAI,CAACT,cAAc,EAAE;QACrB;MACJ,KAAK,QAAQ;QACT,IAAI,CAACE,kBAAkB,CAACO,KAAM,CAAC;QAC/B;IAAM;;EAGlB,IAAI,CAACX,qBAAqB,CAACS,MAAM,GAAG,CAAC;AACzC,CAAC","names":["WebGPUEngine","prototype","_debugPushGroup","groupName","targetObject","_options","enableGPUDebugMarkers","encoder","_renderEncoder","_renderTargetEncoder","pushDebugGroup","_currentRenderPass","_pendingDebugCommands","push","_debugPopGroup","popDebugGroup","_debugInsertMarker","text","insertDebugMarker","_debugFlushPendingCommands","i","length","name","param"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/Extensions/engine.debugging.ts"],"sourcesContent":["import { WebGPUEngine } from \"../../webgpuEngine\";\r\n\r\nWebGPUEngine.prototype._debugPushGroup = function (groupName: string, targetObject?: number): void {\r\n    if (!this._options.enableGPUDebugMarkers) {\r\n        return;\r\n    }\r\n\r\n    if (targetObject === 0 || targetObject === 1) {\r\n        const encoder = targetObject === 0 ? this._renderEncoder : this._renderTargetEncoder;\r\n        encoder.pushDebugGroup(groupName);\r\n    } else if (this._currentRenderPass) {\r\n        this._currentRenderPass.pushDebugGroup(groupName);\r\n    } else {\r\n        this._pendingDebugCommands.push([\"push\", groupName]);\r\n    }\r\n};\r\n\r\nWebGPUEngine.prototype._debugPopGroup = function (targetObject?: number): void {\r\n    if (!this._options.enableGPUDebugMarkers) {\r\n        return;\r\n    }\r\n\r\n    if (targetObject === 0 || targetObject === 1) {\r\n        const encoder = targetObject === 0 ? this._renderEncoder : this._renderTargetEncoder;\r\n        encoder.popDebugGroup();\r\n    } else if (this._currentRenderPass) {\r\n        this._currentRenderPass.popDebugGroup();\r\n    } else {\r\n        this._pendingDebugCommands.push([\"pop\", null]);\r\n    }\r\n};\r\n\r\nWebGPUEngine.prototype._debugInsertMarker = function (text: string, targetObject?: number): void {\r\n    if (!this._options.enableGPUDebugMarkers) {\r\n        return;\r\n    }\r\n\r\n    if (targetObject === 0 || targetObject === 1) {\r\n        const encoder = targetObject === 0 ? this._renderEncoder : this._renderTargetEncoder;\r\n        encoder.insertDebugMarker(text);\r\n    } else if (this._currentRenderPass) {\r\n        this._currentRenderPass.insertDebugMarker(text);\r\n    } else {\r\n        this._pendingDebugCommands.push([\"insert\", text]);\r\n    }\r\n};\r\n\r\nWebGPUEngine.prototype._debugFlushPendingCommands = function (): void {\r\n    for (let i = 0; i < this._pendingDebugCommands.length; ++i) {\r\n        const [name, param] = this._pendingDebugCommands[i];\r\n\r\n        switch (name) {\r\n            case \"push\":\r\n                this._debugPushGroup(param!);\r\n                break;\r\n            case \"pop\":\r\n                this._debugPopGroup();\r\n                break;\r\n            case \"insert\":\r\n                this._debugInsertMarker(param!);\r\n                break;\r\n        }\r\n    }\r\n    this._pendingDebugCommands.length = 0;\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}