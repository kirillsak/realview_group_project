{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../../../tslib.es6.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator.js\";\nimport \"../../../../Shaders/ShadersInclude/helperFunctions.js\";\nimport \"../../../../Shaders/ShadersInclude/imageProcessingDeclaration.js\";\nimport \"../../../../Shaders/ShadersInclude/imageProcessingFunctions.js\";\n/**\n * Block used to add image processing support to fragment shader\n */\nexport class ImageProcessingBlock extends NodeMaterialBlock {\n  /**\n   * Create a new ImageProcessingBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Fragment);\n    /**\n     * Defines if the input should be converted to linear space (default: true)\n     */\n    this.convertInputToLinearSpace = true;\n    this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Color4);\n    this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3);\n    this._inputs[0].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Color3 | NodeMaterialBlockConnectionPointTypes.Color4 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"ImageProcessingBlock\";\n  }\n  /**\n   * Gets the color input component\n   */\n  get color() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets the rgb component\n   */\n  get rgb() {\n    return this._outputs[1];\n  }\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n  initialize(state) {\n    state._excludeVariableName(\"exposureLinear\");\n    state._excludeVariableName(\"contrast\");\n    state._excludeVariableName(\"vInverseScreenSize\");\n    state._excludeVariableName(\"vignetteSettings1\");\n    state._excludeVariableName(\"vignetteSettings2\");\n    state._excludeVariableName(\"vCameraColorCurveNegative\");\n    state._excludeVariableName(\"vCameraColorCurveNeutral\");\n    state._excludeVariableName(\"vCameraColorCurvePositive\");\n    state._excludeVariableName(\"txColorTransform\");\n    state._excludeVariableName(\"colorTransformSettings\");\n    state._excludeVariableName(\"ditherIntensity\");\n  }\n  isReady(mesh, nodeMaterial, defines) {\n    if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\n      if (!nodeMaterial.imageProcessingConfiguration.isReady()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  prepareDefines(mesh, nodeMaterial, defines) {\n    if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\n      nodeMaterial.imageProcessingConfiguration.prepareDefines(defines);\n    }\n  }\n  bind(effect, nodeMaterial, mesh) {\n    if (!mesh) {\n      return;\n    }\n    if (!nodeMaterial.imageProcessingConfiguration) {\n      return;\n    }\n    nodeMaterial.imageProcessingConfiguration.bind(effect);\n  }\n  _buildBlock(state) {\n    var _a;\n    super._buildBlock(state);\n    // Register for defines\n    state.sharedData.blocksWithDefines.push(this);\n    // Register for blocking\n    state.sharedData.blockingBlocks.push(this);\n    // Register for binding\n    state.sharedData.bindableBlocks.push(this);\n    // Uniforms\n    state.uniforms.push(\"exposureLinear\");\n    state.uniforms.push(\"contrast\");\n    state.uniforms.push(\"vInverseScreenSize\");\n    state.uniforms.push(\"vignetteSettings1\");\n    state.uniforms.push(\"vignetteSettings2\");\n    state.uniforms.push(\"vCameraColorCurveNegative\");\n    state.uniforms.push(\"vCameraColorCurveNeutral\");\n    state.uniforms.push(\"vCameraColorCurvePositive\");\n    state.uniforms.push(\"txColorTransform\");\n    state.uniforms.push(\"colorTransformSettings\");\n    state.uniforms.push(\"ditherIntensity\");\n    // Emit code\n    const color = this.color;\n    const output = this._outputs[0];\n    const comments = `//${this.name}`;\n    state._emitFunctionFromInclude(\"helperFunctions\", comments);\n    state._emitFunctionFromInclude(\"imageProcessingDeclaration\", comments);\n    state._emitFunctionFromInclude(\"imageProcessingFunctions\", comments);\n    if ((_a = color.connectedPoint) === null || _a === void 0 ? void 0 : _a.isConnected) {\n      if (color.connectedPoint.type === NodeMaterialBlockConnectionPointTypes.Color4 || color.connectedPoint.type === NodeMaterialBlockConnectionPointTypes.Vector4) {\n        state.compilationString += `${this._declareOutput(output, state)} = ${color.associatedVariableName};\\r\\n`;\n      } else {\n        state.compilationString += `${this._declareOutput(output, state)} = vec4(${color.associatedVariableName}, 1.0);\\r\\n`;\n      }\n      state.compilationString += `#ifdef IMAGEPROCESSINGPOSTPROCESS\\r\\n`;\n      if (this.convertInputToLinearSpace) {\n        state.compilationString += `${output.associatedVariableName}.rgb = toLinearSpace(${color.associatedVariableName}.rgb);\\r\\n`;\n      }\n      state.compilationString += `#else\\r\\n`;\n      state.compilationString += `#ifdef IMAGEPROCESSING\\r\\n`;\n      if (this.convertInputToLinearSpace) {\n        state.compilationString += `${output.associatedVariableName}.rgb = toLinearSpace(${color.associatedVariableName}.rgb);\\r\\n`;\n      }\n      state.compilationString += `${output.associatedVariableName} = applyImageProcessing(${output.associatedVariableName});\\r\\n`;\n      state.compilationString += `#endif\\r\\n`;\n      state.compilationString += `#endif\\r\\n`;\n      if (this.rgb.hasEndpoints) {\n        state.compilationString += this._declareOutput(this.rgb, state) + ` = ${this.output.associatedVariableName}.xyz;\\r\\n`;\n      }\n    }\n    return this;\n  }\n  _dumpPropertiesCode() {\n    let codeString = super._dumpPropertiesCode();\n    codeString += `${this._codeVariableName}.convertInputToLinearSpace = ${this.convertInputToLinearSpace};\\r\\n`;\n    return codeString;\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.convertInputToLinearSpace = this.convertInputToLinearSpace;\n    return serializationObject;\n  }\n  _deserialize(serializationObject, scene, rootUrl) {\n    var _a;\n    super._deserialize(serializationObject, scene, rootUrl);\n    this.convertInputToLinearSpace = (_a = serializationObject.convertInputToLinearSpace) !== null && _a !== void 0 ? _a : true;\n  }\n}\n__decorate([editableInPropertyPage(\"Convert input to linear space\", PropertyTypeForEdition.Boolean, \"ADVANCED\")], ImageProcessingBlock.prototype, \"convertInputToLinearSpace\", void 0);\nRegisterClass(\"BABYLON.ImageProcessingBlock\", ImageProcessingBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","editableInPropertyPage","PropertyTypeForEdition","ImageProcessingBlock","constructor","name","Fragment","registerInput","AutoDetect","registerOutput","Color4","Color3","_inputs","addExcludedConnectionPointFromAllowedTypes","Vector3","Vector4","getClassName","color","output","_outputs","rgb","initialize","state","_excludeVariableName","isReady","mesh","nodeMaterial","defines","_areImageProcessingDirty","imageProcessingConfiguration","prepareDefines","bind","effect","_buildBlock","sharedData","blocksWithDefines","push","blockingBlocks","bindableBlocks","uniforms","comments","_emitFunctionFromInclude","connectedPoint","isConnected","type","compilationString","_declareOutput","associatedVariableName","convertInputToLinearSpace","hasEndpoints","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","_deserialize","scene","rootUrl","__decorate","Boolean"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/Fragment/imageProcessingBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport type { Mesh } from \"../../../../Meshes/mesh\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\r\n\r\nimport \"../../../../Shaders/ShadersInclude/helperFunctions\";\r\nimport \"../../../../Shaders/ShadersInclude/imageProcessingDeclaration\";\r\nimport \"../../../../Shaders/ShadersInclude/imageProcessingFunctions\";\r\n\r\n/**\r\n * Block used to add image processing support to fragment shader\r\n */\r\nexport class ImageProcessingBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new ImageProcessingBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Color4);\r\n        this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3);\r\n\r\n        this._inputs[0].addExcludedConnectionPointFromAllowedTypes(\r\n            NodeMaterialBlockConnectionPointTypes.Color3 |\r\n                NodeMaterialBlockConnectionPointTypes.Color4 |\r\n                NodeMaterialBlockConnectionPointTypes.Vector3 |\r\n                NodeMaterialBlockConnectionPointTypes.Vector4\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Defines if the input should be converted to linear space (default: true)\r\n     */\r\n    @editableInPropertyPage(\"Convert input to linear space\", PropertyTypeForEdition.Boolean, \"ADVANCED\")\r\n    public convertInputToLinearSpace: boolean = true;\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ImageProcessingBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the color input component\r\n     */\r\n    public get color(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb component\r\n     */\r\n    public get rgb(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"exposureLinear\");\r\n        state._excludeVariableName(\"contrast\");\r\n        state._excludeVariableName(\"vInverseScreenSize\");\r\n        state._excludeVariableName(\"vignetteSettings1\");\r\n        state._excludeVariableName(\"vignetteSettings2\");\r\n        state._excludeVariableName(\"vCameraColorCurveNegative\");\r\n        state._excludeVariableName(\"vCameraColorCurveNeutral\");\r\n        state._excludeVariableName(\"vCameraColorCurvePositive\");\r\n        state._excludeVariableName(\"txColorTransform\");\r\n        state._excludeVariableName(\"colorTransformSettings\");\r\n        state._excludeVariableName(\"ditherIntensity\");\r\n    }\r\n\r\n    public isReady(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\r\n            if (!nodeMaterial.imageProcessingConfiguration.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\r\n            nodeMaterial.imageProcessingConfiguration.prepareDefines(defines);\r\n        }\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        if (!nodeMaterial.imageProcessingConfiguration) {\r\n            return;\r\n        }\r\n\r\n        nodeMaterial.imageProcessingConfiguration.bind(effect);\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        // Register for defines\r\n        state.sharedData.blocksWithDefines.push(this);\r\n\r\n        // Register for blocking\r\n        state.sharedData.blockingBlocks.push(this);\r\n\r\n        // Register for binding\r\n        state.sharedData.bindableBlocks.push(this);\r\n\r\n        // Uniforms\r\n        state.uniforms.push(\"exposureLinear\");\r\n        state.uniforms.push(\"contrast\");\r\n        state.uniforms.push(\"vInverseScreenSize\");\r\n        state.uniforms.push(\"vignetteSettings1\");\r\n        state.uniforms.push(\"vignetteSettings2\");\r\n        state.uniforms.push(\"vCameraColorCurveNegative\");\r\n        state.uniforms.push(\"vCameraColorCurveNeutral\");\r\n        state.uniforms.push(\"vCameraColorCurvePositive\");\r\n        state.uniforms.push(\"txColorTransform\");\r\n        state.uniforms.push(\"colorTransformSettings\");\r\n        state.uniforms.push(\"ditherIntensity\");\r\n\r\n        // Emit code\r\n        const color = this.color;\r\n        const output = this._outputs[0];\r\n        const comments = `//${this.name}`;\r\n\r\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\r\n        state._emitFunctionFromInclude(\"imageProcessingDeclaration\", comments);\r\n        state._emitFunctionFromInclude(\"imageProcessingFunctions\", comments);\r\n\r\n        if (color.connectedPoint?.isConnected) {\r\n            if (color.connectedPoint!.type === NodeMaterialBlockConnectionPointTypes.Color4 || color.connectedPoint!.type === NodeMaterialBlockConnectionPointTypes.Vector4) {\r\n                state.compilationString += `${this._declareOutput(output, state)} = ${color.associatedVariableName};\\r\\n`;\r\n            } else {\r\n                state.compilationString += `${this._declareOutput(output, state)} = vec4(${color.associatedVariableName}, 1.0);\\r\\n`;\r\n            }\r\n            state.compilationString += `#ifdef IMAGEPROCESSINGPOSTPROCESS\\r\\n`;\r\n            if (this.convertInputToLinearSpace) {\r\n                state.compilationString += `${output.associatedVariableName}.rgb = toLinearSpace(${color.associatedVariableName}.rgb);\\r\\n`;\r\n            }\r\n            state.compilationString += `#else\\r\\n`;\r\n            state.compilationString += `#ifdef IMAGEPROCESSING\\r\\n`;\r\n            if (this.convertInputToLinearSpace) {\r\n                state.compilationString += `${output.associatedVariableName}.rgb = toLinearSpace(${color.associatedVariableName}.rgb);\\r\\n`;\r\n            }\r\n            state.compilationString += `${output.associatedVariableName} = applyImageProcessing(${output.associatedVariableName});\\r\\n`;\r\n            state.compilationString += `#endif\\r\\n`;\r\n            state.compilationString += `#endif\\r\\n`;\r\n\r\n            if (this.rgb.hasEndpoints) {\r\n                state.compilationString += this._declareOutput(this.rgb, state) + ` = ${this.output.associatedVariableName}.xyz;\\r\\n`;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode();\r\n\r\n        codeString += `${this._codeVariableName}.convertInputToLinearSpace = ${this.convertInputToLinearSpace};\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.convertInputToLinearSpace = this.convertInputToLinearSpace;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.convertInputToLinearSpace = serializationObject.convertInputToLinearSpace ?? true;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ImageProcessingBlock\", ImageProcessingBlock);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}