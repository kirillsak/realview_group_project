{"ast":null,"code":"import { ShapeType } from \"./IPhysicsEnginePlugin.js\";\n/**\n * PhysicsShape class.\n * This class is useful for creating a physics shape that can be used in a physics engine.\n * A Physic Shape determine how collision are computed. It must be attached to a body.\n */\nexport class PhysicsShape {\n  /**\n   * Constructs a new physics shape.\n   * @param type The type of the shape.\n   * @param options The options of the shape.\n   * @param scene The scene the shape belongs to.\n   *\n   * This code is useful for creating a new physics shape with the given type, options, and scene.\n   * It also checks that the physics engine and plugin version are correct.\n   * If not, it throws an error. This ensures that the shape is created with the correct parameters and is compatible with the physics engine.\n   */\n  constructor(type, options = {}, scene) {\n    /**\n     * V2 Physics plugin private data for single shape\n     */\n    this._pluginData = undefined;\n    this._type = type;\n    if (!scene) {\n      return;\n    }\n    const physicsEngine = scene.getPhysicsEngine();\n    if (!physicsEngine) {\n      throw new Error(\"No Physics Engine available.\");\n    }\n    if (physicsEngine.getPluginVersion() != 2) {\n      throw new Error(\"Plugin version is incorrect. Expected version 2.\");\n    }\n    const physicsPlugin = physicsEngine.getPhysicsPlugin();\n    if (!physicsPlugin) {\n      throw new Error(\"No Physics Plugin available.\");\n    }\n    this._physicsPlugin = physicsPlugin;\n    this._physicsPlugin.initShape(this, type, options);\n  }\n  /**\n   *\n   */\n  get type() {\n    return this._type;\n  }\n  /**\n   *\n   * @param layer\n   */\n  setFilterLayer(layer) {\n    this._physicsPlugin.setFilterLayer(this, layer);\n  }\n  /**\n   *\n   * @returns\n   */\n  getFilterLayer() {\n    return this._physicsPlugin.getFilterLayer(this);\n  }\n  /**\n   *\n   * @param materialId\n   */\n  setMaterial(material) {\n    this._physicsPlugin.setMaterial(this, material);\n  }\n  /**\n   *\n   * @returns\n   */\n  getMaterial() {\n    return this._physicsPlugin.getMaterial(this);\n  }\n  /**\n   *\n   * @param density\n   */\n  setDensity(density) {\n    this._physicsPlugin.setDensity(this, density);\n  }\n  /**\n   *\n   */\n  getDensity() {\n    return this._physicsPlugin.getDensity(this);\n  }\n  /**\n   *\n   * @param newChild\n   * @param childTransform\n   */\n  addChild(newChild, childTransform) {\n    this._physicsPlugin.addChild(this, newChild, childTransform);\n  }\n  /**\n   *\n   * @param childIndex\n   */\n  removeChild(childIndex) {\n    this._physicsPlugin.removeChild(this, childIndex);\n  }\n  /**\n   *\n   * @returns\n   */\n  getNumChildren() {\n    return this._physicsPlugin.getNumChildren(this);\n  }\n  /**\n   *\n   */\n  getBoundingBox() {\n    return this._physicsPlugin.getBoundingBox(this);\n  }\n  /**\n   *\n   */\n  dispose() {\n    this._physicsPlugin.disposeShape(this);\n  }\n}\n/**\n *\n */\n/** @internal */\nexport class PhysicsShapeSphere extends PhysicsShape {\n  /** @internal */\n  /**\n   *\n   * @param center\n   * @param radius\n   * @param scene\n   */\n  constructor(center, radius, scene) {\n    super(ShapeType.SPHERE, {\n      center: center,\n      radius: radius\n    }, scene);\n  }\n}\n/***\n *\n */\n/** @internal */\nexport class PhysicsShapeCapsule extends PhysicsShape {\n  /** @internal */\n  /**\n   *\n   * @param pointA\n   * @param pointB\n   * @param radius\n   * @param scene\n   */\n  constructor(pointA, pointB, radius, scene) {\n    super(ShapeType.CAPSULE, {\n      pointA: pointA,\n      pointB: pointB,\n      radius: radius\n    }, scene);\n  }\n}\n/**\n *\n */\n/** @internal */\nexport class PhysicsShapeCylinder extends PhysicsShape {\n  /** @internal */\n  /**\n   *\n   * @param pointA\n   * @param pointB\n   * @param radius\n   * @param scene\n   */\n  constructor(pointA, pointB, radius, scene) {\n    super(ShapeType.CYLINDER, {\n      pointA: pointA,\n      pointB: pointB,\n      radius: radius\n    }, scene);\n  }\n}\n/**\n *\n */\n/** @internal */\nexport class PhysicsShapeBox extends PhysicsShape {\n  /** @internal */\n  /**\n   *\n   * @param center\n   * @param rotation\n   * @param extents\n   * @param scene\n   */\n  constructor(center, rotation, extents, scene) {\n    super(ShapeType.BOX, {\n      center: center,\n      rotation: rotation,\n      extents: extents\n    }, scene);\n  }\n}\n/**\n *\n */\n/** @internal */\nexport class PhysicsShapeConvexHull extends PhysicsShape {\n  /** @internal */\n  /**\n   *\n   * @param mesh\n   * @param scene\n   */\n  constructor(mesh, scene) {\n    super(ShapeType.CONVEX_HULL, {\n      mesh: mesh\n    }, scene);\n  }\n}\n/**\n *\n */\n/** @internal */\nexport class PhysicsShapeMesh extends PhysicsShape {\n  /** @internal */\n  /**\n   *\n   * @param mesh\n   * @param scene\n   */\n  constructor(mesh, scene) {\n    super(ShapeType.MESH, {\n      mesh: mesh\n    }, scene);\n  }\n}\n/**\n *\n */\n/** @internal */\nexport class PhysicsShapeContainer extends PhysicsShape {\n  /** @internal */\n  /**\n   *\n   * @param mesh\n   * @param scene\n   */\n  constructor(mesh, scene) {\n    super(ShapeType.CONTAINER, {}, scene);\n  }\n}","map":{"version":3,"mappings":"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","names":["ShapeType","PhysicsShape","constructor","type","options","scene","undefined","_type","physicsEngine","getPhysicsEngine","Error","getPluginVersion","physicsPlugin","getPhysicsPlugin","_physicsPlugin","initShape","setFilterLayer","layer","getFilterLayer","setMaterial","material","getMaterial","setDensity","density","getDensity","addChild","newChild","childTransform","removeChild","childIndex","getNumChildren","getBoundingBox","dispose","disposeShape","PhysicsShapeSphere","center","radius","SPHERE","PhysicsShapeCapsule","pointA","pointB","CAPSULE","PhysicsShapeCylinder","CYLINDER","PhysicsShapeBox","rotation","extents","BOX","PhysicsShapeConvexHull","mesh","CONVEX_HULL","PhysicsShapeMesh","MESH","PhysicsShapeContainer","CONTAINER"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Physics/v2/physicsShape.ts"],"sourcesContent":["import type { TransformNode } from \"../../Meshes/transformNode\";\r\nimport type { BoundingBox } from \"../../Culling/boundingBox\";\r\nimport { ShapeType } from \"./IPhysicsEnginePlugin\";\r\nimport type { IPhysicsEnginePluginV2, PhysicsShapeParameters } from \"./IPhysicsEnginePlugin\";\r\nimport type { PhysicsMaterial } from \"./physicsMaterial\";\r\nimport type { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { Quaternion } from \"../../Maths/math.vector\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport type { Scene } from \"../../scene\";\r\n\r\n/**\r\n * PhysicsShape class.\r\n * This class is useful for creating a physics shape that can be used in a physics engine.\r\n * A Physic Shape determine how collision are computed. It must be attached to a body.\r\n */\r\nexport class PhysicsShape {\r\n    /**\r\n     * V2 Physics plugin private data for single shape\r\n     */\r\n    public _pluginData: any = undefined;\r\n    /**\r\n     * The V2 plugin used to create and manage this Physics Body\r\n     */\r\n    private _physicsPlugin: IPhysicsEnginePluginV2;\r\n\r\n    private _type: ShapeType;\r\n\r\n    /**\r\n     * Constructs a new physics shape.\r\n     * @param type The type of the shape.\r\n     * @param options The options of the shape.\r\n     * @param scene The scene the shape belongs to.\r\n     *\r\n     * This code is useful for creating a new physics shape with the given type, options, and scene.\r\n     * It also checks that the physics engine and plugin version are correct.\r\n     * If not, it throws an error. This ensures that the shape is created with the correct parameters and is compatible with the physics engine.\r\n     */\r\n    constructor(type: number, options: PhysicsShapeParameters = {}, scene: Scene) {\r\n        this._type = type;\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        const physicsEngine = scene.getPhysicsEngine();\r\n        if (!physicsEngine) {\r\n            throw new Error(\"No Physics Engine available.\");\r\n        }\r\n        if (physicsEngine.getPluginVersion() != 2) {\r\n            throw new Error(\"Plugin version is incorrect. Expected version 2.\");\r\n        }\r\n        const physicsPlugin = physicsEngine.getPhysicsPlugin();\r\n        if (!physicsPlugin) {\r\n            throw new Error(\"No Physics Plugin available.\");\r\n        }\r\n\r\n        this._physicsPlugin = physicsPlugin as IPhysicsEnginePluginV2;\r\n        this._physicsPlugin.initShape(this, type, options);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public get type(): ShapeType {\r\n        return this._type;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param layer\r\n     */\r\n    public setFilterLayer(layer: number): void {\r\n        this._physicsPlugin.setFilterLayer(this, layer);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     */\r\n    public getFilterLayer(): number {\r\n        return this._physicsPlugin.getFilterLayer(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param materialId\r\n     */\r\n    public setMaterial(material: PhysicsMaterial): void {\r\n        this._physicsPlugin.setMaterial(this, material);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     */\r\n    public getMaterial(): PhysicsMaterial | undefined {\r\n        return this._physicsPlugin.getMaterial(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param density\r\n     */\r\n    public setDensity(density: number): void {\r\n        this._physicsPlugin.setDensity(this, density);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public getDensity(): number {\r\n        return this._physicsPlugin.getDensity(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param newChild\r\n     * @param childTransform\r\n     */\r\n    public addChild(newChild: PhysicsShape, childTransform: TransformNode): void {\r\n        this._physicsPlugin.addChild(this, newChild, childTransform);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param childIndex\r\n     */\r\n    public removeChild(childIndex: number): void {\r\n        this._physicsPlugin.removeChild(this, childIndex);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     */\r\n    public getNumChildren(): number {\r\n        return this._physicsPlugin.getNumChildren(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public getBoundingBox(): BoundingBox {\r\n        return this._physicsPlugin.getBoundingBox(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public dispose() {\r\n        this._physicsPlugin.disposeShape(this);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n */\r\n/** @internal */\r\nexport class PhysicsShapeSphere extends PhysicsShape {\r\n    /** @internal */\r\n    /**\r\n     *\r\n     * @param center\r\n     * @param radius\r\n     * @param scene\r\n     */\r\n    constructor(center: Vector3, radius: number, scene: Scene) {\r\n        super(ShapeType.SPHERE, { center: center, radius: radius }, scene);\r\n    }\r\n}\r\n\r\n/***\r\n *\r\n */\r\n/** @internal */\r\nexport class PhysicsShapeCapsule extends PhysicsShape {\r\n    /** @internal */\r\n    /**\r\n     *\r\n     * @param pointA\r\n     * @param pointB\r\n     * @param radius\r\n     * @param scene\r\n     */\r\n    constructor(pointA: Vector3, pointB: Vector3, radius: number, scene: Scene) {\r\n        super(ShapeType.CAPSULE, { pointA: pointA, pointB: pointB, radius: radius }, scene);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n */\r\n/** @internal */\r\nexport class PhysicsShapeCylinder extends PhysicsShape {\r\n    /** @internal */\r\n    /**\r\n     *\r\n     * @param pointA\r\n     * @param pointB\r\n     * @param radius\r\n     * @param scene\r\n     */\r\n    constructor(pointA: Vector3, pointB: Vector3, radius: number, scene: Scene) {\r\n        super(ShapeType.CYLINDER, { pointA: pointA, pointB: pointB, radius: radius }, scene);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n */\r\n/** @internal */\r\nexport class PhysicsShapeBox extends PhysicsShape {\r\n    /** @internal */\r\n    /**\r\n     *\r\n     * @param center\r\n     * @param rotation\r\n     * @param extents\r\n     * @param scene\r\n     */\r\n    constructor(center: Vector3, rotation: Quaternion, extents: Vector3, scene: Scene) {\r\n        super(ShapeType.BOX, { center: center, rotation: rotation, extents: extents }, scene);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n */\r\n/** @internal */\r\nexport class PhysicsShapeConvexHull extends PhysicsShape {\r\n    /** @internal */\r\n    /**\r\n     *\r\n     * @param mesh\r\n     * @param scene\r\n     */\r\n    constructor(mesh: Mesh, scene: Scene) {\r\n        super(ShapeType.CONVEX_HULL, { mesh: mesh }, scene);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n */\r\n/** @internal */\r\nexport class PhysicsShapeMesh extends PhysicsShape {\r\n    /** @internal */\r\n    /**\r\n     *\r\n     * @param mesh\r\n     * @param scene\r\n     */\r\n    constructor(mesh: Mesh, scene: Scene) {\r\n        super(ShapeType.MESH, { mesh: mesh }, scene);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n */\r\n/** @internal */\r\nexport class PhysicsShapeContainer extends PhysicsShape {\r\n    /** @internal */\r\n    /**\r\n     *\r\n     * @param mesh\r\n     * @param scene\r\n     */\r\n    constructor(mesh: Mesh, scene: Scene) {\r\n        super(ShapeType.CONTAINER, {}, scene);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}