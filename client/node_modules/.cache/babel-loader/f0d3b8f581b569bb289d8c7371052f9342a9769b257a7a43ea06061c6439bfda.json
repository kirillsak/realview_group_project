{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * This class is a small wrapper around a native buffer that can be read and/or written\n */\nexport class StorageBuffer {\n  /**\n   * Creates a new storage buffer instance\n   * @param engine The engine the buffer will be created inside\n   * @param size The size of the buffer in bytes\n   * @param creationFlags flags to use when creating the buffer (see undefined). The BUFFER_CREATIONFLAG_STORAGE flag will be automatically added.\n   */\n  constructor(engine, size, creationFlags = 3) {\n    this._engine = engine;\n    this._engine._storageBuffers.push(this);\n    this._create(size, creationFlags);\n  }\n  _create(size, creationFlags) {\n    this._bufferSize = size;\n    this._creationFlags = creationFlags;\n    this._buffer = this._engine.createStorageBuffer(size, creationFlags);\n  }\n  /** @internal */\n  _rebuild() {\n    this._create(this._bufferSize, this._creationFlags);\n  }\n  /**\n   * Gets underlying native buffer\n   * @returns underlying native buffer\n   */\n  getBuffer() {\n    return this._buffer;\n  }\n  /**\n   * Updates the storage buffer\n   * @param data the data used to update the storage buffer\n   * @param byteOffset the byte offset of the data (optional)\n   * @param byteLength the byte length of the data (optional)\n   */\n  update(data, byteOffset, byteLength) {\n    if (!this._buffer) {\n      return;\n    }\n    this._engine.updateStorageBuffer(this._buffer, data, byteOffset, byteLength);\n  }\n  /**\n   * Reads data from the storage buffer\n   * @param offset The offset in the storage buffer to start reading from (default: 0)\n   * @param size  The number of bytes to read from the storage buffer (default: capacity of the buffer)\n   * @param buffer The buffer to write the data we have read from the storage buffer to (optional)\n   * @returns If not undefined, returns the (promise) buffer (as provided by the 4th parameter) filled with the data, else it returns a (promise) Uint8Array with the data read from the storage buffer\n   */\n  read(offset, size, buffer) {\n    return this._engine.readFromStorageBuffer(this._buffer, offset, size, buffer);\n  }\n  /**\n   * Disposes the storage buffer\n   */\n  dispose() {\n    const storageBuffers = this._engine._storageBuffers;\n    const index = storageBuffers.indexOf(this);\n    if (index !== -1) {\n      storageBuffers[index] = storageBuffers[storageBuffers.length - 1];\n      storageBuffers.pop();\n    }\n    this._engine._releaseBuffer(this._buffer);\n    this._buffer = null;\n  }\n}","map":{"version":3,"mappings":";AAKA;;;AAGA,OAAM,MAAOA,aAAa;EAMtB;;;;;;EAMAC,YAAYC,MAAkB,EAAEC,IAAY,EAAEC,aAAa,GAAG;IAC1D,IAAI,CAACC,OAAO,GAAGH,MAAM;IACrB,IAAI,CAACG,OAAO,CAACC,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC;IACvC,IAAI,CAACC,OAAO,CAACL,IAAI,EAAEC,aAAa,CAAC;EACrC;EAEQI,OAAO,CAACL,IAAY,EAAEC,aAAqB;IAC/C,IAAI,CAACK,WAAW,GAAGN,IAAI;IACvB,IAAI,CAACO,cAAc,GAAGN,aAAa;IACnC,IAAI,CAACO,OAAO,GAAG,IAAI,CAACN,OAAO,CAACO,mBAAmB,CAACT,IAAI,EAAEC,aAAa,CAAC;EACxE;EAEA;EACOS,QAAQ;IACX,IAAI,CAACL,OAAO,CAAC,IAAI,CAACC,WAAW,EAAE,IAAI,CAACC,cAAc,CAAC;EACvD;EAEA;;;;EAIOI,SAAS;IACZ,OAAO,IAAI,CAACH,OAAO;EACvB;EAEA;;;;;;EAMOI,MAAM,CAACC,IAAe,EAAEC,UAAmB,EAAEC,UAAmB;IACnE,IAAI,CAAC,IAAI,CAACP,OAAO,EAAE;MACf;;IAGJ,IAAI,CAACN,OAAO,CAACc,mBAAmB,CAAC,IAAI,CAACR,OAAO,EAAEK,IAAI,EAAEC,UAAU,EAAEC,UAAU,CAAC;EAChF;EAEA;;;;;;;EAOOE,IAAI,CAACC,MAAe,EAAElB,IAAa,EAAEmB,MAAwB;IAChE,OAAO,IAAI,CAACjB,OAAO,CAACkB,qBAAqB,CAAC,IAAI,CAACZ,OAAO,EAAEU,MAAM,EAAElB,IAAI,EAAEmB,MAAM,CAAC;EACjF;EAEA;;;EAGOE,OAAO;IACV,MAAMC,cAAc,GAAG,IAAI,CAACpB,OAAO,CAACC,eAAe;IACnD,MAAMoB,KAAK,GAAGD,cAAc,CAACE,OAAO,CAAC,IAAI,CAAC;IAE1C,IAAID,KAAK,KAAK,CAAC,CAAC,EAAE;MACdD,cAAc,CAACC,KAAK,CAAC,GAAGD,cAAc,CAACA,cAAc,CAACG,MAAM,GAAG,CAAC,CAAC;MACjEH,cAAc,CAACI,GAAG,EAAE;;IAGxB,IAAI,CAACxB,OAAO,CAACyB,cAAc,CAAC,IAAI,CAACnB,OAAO,CAAC;IACzC,IAAI,CAACA,OAAO,GAAG,IAAW;EAC9B","names":["StorageBuffer","constructor","engine","size","creationFlags","_engine","_storageBuffers","push","_create","_bufferSize","_creationFlags","_buffer","createStorageBuffer","_rebuild","getBuffer","update","data","byteOffset","byteLength","updateStorageBuffer","read","offset","buffer","readFromStorageBuffer","dispose","storageBuffers","index","indexOf","length","pop","_releaseBuffer"],"sourceRoot":"","sources":["../../../../lts/core/generated/Buffers/storageBuffer.ts"],"sourcesContent":["import type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport type { DataArray } from \"../types\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * This class is a small wrapper around a native buffer that can be read and/or written\r\n */\r\nexport class StorageBuffer {\r\n    private _engine: ThinEngine;\r\n    private _buffer: DataBuffer;\r\n    private _bufferSize: number;\r\n    private _creationFlags: number;\r\n\r\n    /**\r\n     * Creates a new storage buffer instance\r\n     * @param engine The engine the buffer will be created inside\r\n     * @param size The size of the buffer in bytes\r\n     * @param creationFlags flags to use when creating the buffer (see Constants.BUFFER_CREATIONFLAG_XXX). The BUFFER_CREATIONFLAG_STORAGE flag will be automatically added.\r\n     */\r\n    constructor(engine: ThinEngine, size: number, creationFlags = Constants.BUFFER_CREATIONFLAG_READWRITE) {\r\n        this._engine = engine;\r\n        this._engine._storageBuffers.push(this);\r\n        this._create(size, creationFlags);\r\n    }\r\n\r\n    private _create(size: number, creationFlags: number): void {\r\n        this._bufferSize = size;\r\n        this._creationFlags = creationFlags;\r\n        this._buffer = this._engine.createStorageBuffer(size, creationFlags);\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild(): void {\r\n        this._create(this._bufferSize, this._creationFlags);\r\n    }\r\n\r\n    /**\r\n     * Gets underlying native buffer\r\n     * @returns underlying native buffer\r\n     */\r\n    public getBuffer(): DataBuffer {\r\n        return this._buffer;\r\n    }\r\n\r\n    /**\r\n     * Updates the storage buffer\r\n     * @param data the data used to update the storage buffer\r\n     * @param byteOffset the byte offset of the data (optional)\r\n     * @param byteLength the byte length of the data (optional)\r\n     */\r\n    public update(data: DataArray, byteOffset?: number, byteLength?: number): void {\r\n        if (!this._buffer) {\r\n            return;\r\n        }\r\n\r\n        this._engine.updateStorageBuffer(this._buffer, data, byteOffset, byteLength);\r\n    }\r\n\r\n    /**\r\n     * Reads data from the storage buffer\r\n     * @param offset The offset in the storage buffer to start reading from (default: 0)\r\n     * @param size  The number of bytes to read from the storage buffer (default: capacity of the buffer)\r\n     * @param buffer The buffer to write the data we have read from the storage buffer to (optional)\r\n     * @returns If not undefined, returns the (promise) buffer (as provided by the 4th parameter) filled with the data, else it returns a (promise) Uint8Array with the data read from the storage buffer\r\n     */\r\n    public read(offset?: number, size?: number, buffer?: ArrayBufferView): Promise<ArrayBufferView> {\r\n        return this._engine.readFromStorageBuffer(this._buffer, offset, size, buffer);\r\n    }\r\n\r\n    /**\r\n     * Disposes the storage buffer\r\n     */\r\n    public dispose(): void {\r\n        const storageBuffers = this._engine._storageBuffers;\r\n        const index = storageBuffers.indexOf(this);\r\n\r\n        if (index !== -1) {\r\n            storageBuffers[index] = storageBuffers[storageBuffers.length - 1];\r\n            storageBuffers.pop();\r\n        }\r\n\r\n        this._engine._releaseBuffer(this._buffer);\r\n        this._buffer = null as any;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}